<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_SecOC_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/ReqM2_Native/asc_SecOC_public_modulereference_integration_req.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/ReqM2_Native/asc_SecOC_requirements_AUTOSAR_SWS_SecureOnboardCommunication_Asr.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/ReqM2_Native/asc_SecOC_requirements_AUTOSAR_SWS_SecureOnboardCommunication_R2111.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/ReqM2_Native/asc_SecOC_requirements_SECOC_EB_Requirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/common_req/SecOC_BswmdDbg_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/common_req/SecOC_PbcfgM_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/common_req/SecOC_PduLengthType_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/common_req/SecOC_VerifyStub_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</commandline>
    <timestamp>Mon Jun 17 20:55:55 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_SecOC_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/ReqM2_Native/asc_SecOC_public_modulereference_integration_req.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/ReqM2_Native/asc_SecOC_requirements_AUTOSAR_SWS_SecureOnboardCommunication_Asr.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/ReqM2_Native/asc_SecOC_requirements_AUTOSAR_SWS_SecureOnboardCommunication_R2111.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/ReqM2_Native/asc_SecOC_requirements_SECOC_EB_Requirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/common_req/SecOC_BswmdDbg_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/common_req/SecOC_PbcfgM_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/common_req/SecOC_PduLengthType_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/common_req/SecOC_VerifyStub_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/1018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>swpad</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swts</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/1010: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>

      <!-- legacy items -->
      <regex>dev</regex>
      <regex>man</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>
    <!-- The Ruleset for RMP4.0 is currently identical to the previous rule set. This rule is
        intoduce to show that the right file is uses. It will be removed when the RMP4.0 rule set is
    reworked -->
    <rule>
      <name>INFO.Rule set RMP4.0</name>
      <description>This rules indicates that RMP4.0 rule set is used.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.general.doctypes</name>
      <description>The used doctype is not part of the tracing model</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobjects/@doctype</applyto>
          <condition>((. != 'creq') or (. != 'fea') or (. != 'swpad') or (. != 'swts') or (. != 'swrs') or (. !='swad') or (. != 'swintts') or (.!= 'swdd') or (. != 'swurs') or (. != 'swmts') or (. != 'swuts') or (. != 'impl') or (. != 'dev') or (. != 'man') or (. != 'lim'))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected.coverage</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.count</name>
      <description>Unit requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swrs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swurs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd') and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.doctypes</name>
      <description>Requirements can be covered only by swurs, swad, dev, lim, swdd, impl, swuts, swmts, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs')]</applyto>
          <condition>(./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swurs, swad, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swuts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swmts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swintts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.impl.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='impl')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes"))</condition>
        </conditioncheck>
      </conditionchecks>
          </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

  </rules>
    <oreqmRules>

        <rule>
            <name>WRN.swts.needscoverage.count</name>
            <description>Violated if there are more than 10 swts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.man.needscoverage.count</name>
            <description>Violated if there are more than 10 man specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>man.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swintts.needscoverage.count</name>
            <description>Violated if there are more than 10 swintts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swintts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swmts.needscoverage.count</name>
            <description>Violated if there are more than 10 swmts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swmts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swuts.needscoverage.count</name>
            <description>Violated if there are more than 10 swuts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swuts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swpad.needscoverage.count</name>
            <description>Violated if there are more than 10 swpad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swpad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.needscoverage.count</name>
            <description>Violated if there are more than 10 swrs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.needscoverage.count</name>
            <description>Violated if there are more than 10 swad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.needscoverage.count</name>
            <description>Violated if there are more than 10 swurs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.needscoverage.count</name>
            <description>Violated if there are more than 10 swdd specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.impl.needscoverage.count</name>
            <description>Violated if there are more than 10 impl specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>impl.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swrs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.fulfilledby.count</name>
            <description>Violated if there are more than 10 swad specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swurs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.fulfilledby.count</name>
            <description>Violated if there are more than 10 swdd specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="dev">
   <specobject>
     <id>SecOC.Req.Integration_MacUniformProcType</id>
     <status>approved</status>
     <source>EB integration requirement</source>
     <version>1</version>
     <description>
        All Csm MacGenerate or MacVerify jobs referenced by the SecOC module for I-PDU
        authentication and verification need to be either synchronous or asynchronous.
     </description>
     <rationale>
        The current implementation of the SecOC module only offers a global configuration
        parameter to select between Csm synchronous or asynchronous job processing types.
     </rationale>
     
   <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>
   <specobject>
      <id>SecOC.Req.Integration_Init</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        <i>SecOC_Init()</i> initializes the module. <i>SecOC_Init()</i> shall be called during the start-up procedure of the ECU before any other API of the module is called.
        It is allowed to call the <i>SecOC_MainFunctionRx()</i> or <i>SecOC_MainFunctionTx()</i> before the initialization.
      </description>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>

    <specobject>
      <id>SecOC.Req.Integration_DeInit</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The function <i>SecOC_DeInit()</i> deinitializes the module. <i>SecOC_DeInit()</i> shall be called during the shutdown procedure of the ECU.
      </description>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>


    <specobject>
      <id>SecOC.Req.Integration_MainFuncRxCycleTime</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The <i>SecOC_MainFunctionRx()</i> shall be called with a sufficient cycle time depending on the received data. Example: If the fastest I-PDU in the lower layer is transmitted with a cycle time of 10 ms, the <i>SecOC_MainFunctionRx()</i> needs to be called with the same or a lower cycle time.<br/>
        Note: If Csm is used synchronously as the provider of cryptographic functionality, the cryptographic calculations are executed directly within the <i>SecOC_MainFunctionRx()</i> context. Therefore, the run-time of the <i>SecOC_MainFunctionRx()</i> might be significantly higher than if you use a Csm module asynchronously. The overall time consumption for verification is lower when synchronous job processing is used.
      </description>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>

    <specobject>
      <id>SecOC.Req.Integration_RxScheduledNetworks</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        For scheduled networks like FlexRay, the <i>SecOC_MainFunctionRx()</i> shall be scheduled to synchronize to the network.
      </description>
      <rationale>
        This avoids authentication failures caused by the discontinuity of the freshness value.
      </rationale>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>

    <specobject>
      <id>SecOC.Req.Integration_MainFuncTxCycleTime</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The <i>SecOC_MainFunctionTx()</i> shall be called with a sufficient cycle time depending on the transmitted data. Example: If the fastest I-PDU in the lower layer is transmitted with a cycle time of 10 ms, the <i>SecOC_MainFunctionTx()</i> needs to be called with the same or a lower cycle time.<br/>
        Note: If Csm is used synchronously as the provider of cryptographic functionality, the cryptographic calculations are executed directly within the <i>SecOC_MainFunctionTx()</i> context. Therefore, the run-time of the <i>SecOC_MainFunctionTx()</i> might be significantly higher than if you use the Csm module asynchronously. The overall time consumption for message authentication is lower when synchronous job processing is used.
      </description>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>

    <specobject>
      <id>SecOC.Req.Integration_TxScheduledNetworks</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        For scheduled networks like FlexRay, the <i>SecOC_MainFunctionTx()</i> shall be scheduled to synchronize to the network.
      </description>
      <rationale>
        This avoids authentication failures caused by the discontinuity of the freshness value.
      </rationale>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>

    <specobject>
      <id>SecOC.Req.Integration_PropagateVerificationStatus</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>2</version>
      <description>
        To propagate the verification status via CFUNC or RTE, <i>SecOCEbPropagateVerificationStatusApiVersion</i>
        must be set to a value different that <i>NONE</i>.
        NOTE: In order to have Autosar compliant interfaces to propagate the verification status,
        the option <i>SECOC_API_VERSION_430</i> or <i>SECOC_API_VERSION_20_11</i> must be set.
      </description>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>

 </specobjects>
    <specobjects doctype="swurs">
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00011</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>All SecOC data (e.g. Freshness Value, Authenticator, Data Identifier, SecOC message link data,...) that is directly or indirectly transmitted to the other side of a communication link shall be encoded in Big Endian byte order so that each SecOC module interprets the data in the same way.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_IF_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1241</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_CANCEL</srcid><srcstatus/><internalId>1249</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1078</srcid><srcstatus/><internalId>848</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00011</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>291</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00261</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            The Secured I-PDU Header shall indicate the length of the Authentic I-PDU in bytes.
            The length of the Header shall be configurable by the parameter SecOCAuthPduHeaderLength.
            Note: the SecOC supports combined usage of authentication data in a separate message
            (secured PDU collection) and Secured I-PDU Header. Also the SecOC covers dynamic length Authentic I-PDU.
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for both Rx/Tx side, for different types of transmission:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_24_PDU_HDR_EQUALS_ZERO</srcid><srcstatus/><internalId>1362</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_BIGGER_THAN_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1363</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_EQUALS_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1364</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH_RECV_LEN_EQUAL_CFG_LEN</srcid><srcstatus/><internalId>1365</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1366</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_04_PDU_AUTHENTIC_DATA_LENGTH_SMALLER_THAN_SECURED_AREA</srcid><srcstatus/><internalId>1367</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_26_PDU_COL_HDR_EQUAL_ZERO</srcid><srcstatus/><internalId>1368</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_BIGGER_THAN_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1369</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_EQUALS_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1370</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH_RECV_LEN_EQUAL_CFG_LEN</srcid><srcstatus/><internalId>1371</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1372</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_27_PDU_COL_PDU_AUTHENTIC_DATA_LENGTH_SMALLER_THAN_SECURED_AREA</srcid><srcstatus/><internalId>1373</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_PDU_LENGTH_SMALLER_THAN_MSG_LINK</srcid><srcstatus/><internalId>1374</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_HDR_VALUE_BIGGER_THAN_AUTHENTIC_DATA_LENGTH_MESSAGELINK</srcid><srcstatus/><internalId>1375</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH_MESSAGELINK</srcid><srcstatus/><internalId>1376</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_HDR_VALUE_EQUALS_AUTHENTIC_DATA_LENGTH_MESSAGELINK</srcid><srcstatus/><internalId>1377</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1523</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1524</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1525</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1526</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1527</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1528</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_DYN_RECEIVED_LEN_BIGGER_THAN_CONFIG_LEN</srcid><srcstatus/><internalId>1529</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_DYN_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1530</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_DYN_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1531</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1532</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1533</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1534</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1535</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1536</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1537</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIG_LEN</srcid><srcstatus/><internalId>1538</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1539</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1540</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_09_PDU_HDR_IF_EQUAL_LENGTH</srcid><srcstatus/><internalId>1541</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_09_PDU_HDR_IF_SMALLER_LENGTH</srcid><srcstatus/><internalId>1542</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_21_PDU_COL_HDR_IF_EQUAL_LENGTH</srcid><srcstatus/><internalId>1543</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_21_PDU_COL_HDR_IF_SMALLER_LENGTH</srcid><srcstatus/><internalId>1544</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_22_PDU_COL_MESSLINK_HDR_IF_EQUAL_LENGTH</srcid><srcstatus/><internalId>1545</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_22_PDU_COL_MESSLINK_HDR_IF_SMALLER_LENGTH</srcid><srcstatus/><internalId>1546</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2153</srcid><srcstatus/><internalId>912</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2207</srcid><srcstatus/><internalId>916</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00261</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>292</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00094</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If the parameter SecOCFreshnessValueTxLength is configured to a smaller length
            than the actual freshness value SecOC shall include only the least significant bits of the
            freshness value up to SecOCFreshnessValueTxLength within the secured I-PDU. If the parameter
            SecOCFreshnessValueTxLength is configured to 0 the freshness value shall not be included in
            the secured I-PDU.</description>
            <!-- changed: Replaced SecOCFreshnessValueTruncLength by SecOCFreshnessValueTxLength -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_03_04_05_TP_VERF_COUNTERS</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_12_TP_TRUNCATED_FREESHNESS</srcid><srcstatus/><internalId>1499</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1312</srcid><srcstatus/><internalId>1011</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00094</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00219</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>If SecOCUseAuthDataFreshness is set to TRUE, SecOC shall use a part of the
            Authentic I-PDU as freshness. In this case,
            SecOCAuthDataFreshnessStartPosition determines the start position in bits
            of the freshness inside the Authentic I-PDU and SecOCAuthDataFreshnessLen
            determines its length in bits.</description>
         <comment>
          Through the configuration parameter SecOCBitCountingAndOrder we can select between:
            - SECOC_INCREASING_ORDER_MONOTONE_COUNTING_FORMAT: monotone Bit counting and increasing bit order.
            - SECOC_DECREASING_ORDER_SAWTOOTH_COUNTING_FORMAT:"sawtooth" Bit counting in accordance with TPS_SYST_01068 and  "Decreasing"  bit order in accordance with TPS_SYST_01069.
         </comment>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1714</srcid><srcstatus/><internalId>886</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2458</srcid><srcstatus/><internalId>928</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_05_IF_FRESHNESS_AUTHDATA</srcid><srcstatus/><internalId>1299</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_06_TP_FRESHNESS_AUTHDATA</srcid><srcstatus/><internalId>1300</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_BIT_COUNTING_BIT_ORDERING</srcid><srcstatus/><internalId>1324</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00219</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>294</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00220</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>The Freshness Manager provides or receives freshness information in interface functions as byte arrays.
            The freshness is always aligned to the MSB of the first byte in the array. The 15th bit of the freshness is the MSB of the 2nd byte and so on.
            Unused bits of the freshness array must be set to 0. The associated length information must be given in bits.</description>
         <comment>
          Through the configuration parameter SecOCBitCountingAndOrder we can select between:
            - SECOC_INCREASING_ORDER_MONOTONE_COUNTING_FORMAT: monotone Bit counting and increasing bit order.
            - SECOC_DECREASING_ORDER_SAWTOOTH_COUNTING_FORMAT:"sawtooth" Bit counting in accordance with TPS_SYST_01068 and  "Decreasing"  bit order in accordance with TPS_SYST_01069.
         </comment>
         <releases>
            <release>AUTOSAR R21-11</release>
         </releases>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for every Secured PDU which has the Freshness value inside the Authenticator or every Secured PDU Collection which is using a message linker.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1689</srcid><srcstatus/><internalId>883</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2434</srcid><srcstatus/><internalId>925</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1229</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1270</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_BIT_COUNTING_BIT_ORDERING</srcid><srcstatus/><internalId>1324</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00220</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00221</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If SecOCQueryFreshnessValue = CFUNC AND SecOCProvideTxTruncatedFreshnessValue= TRUE for a PDU configuration, the SecOC calls the interface function as defined by the configuration parameter &amp;lt;SecOCFreshnessValueFuncName&amp;gt; whenever the DataToAuthenticator is constructed for the respective PDU.</description>
         <!-- changed: Replaced SecOC_GetTxFreshnessTruncData by ''as defined by the configuration parameter &amp;lt;SecOCFreshnessValueFuncName&amp;gt;'' -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_14_TP_GETTXFRESHNESSTRUNCDATA</srcid><srcstatus/><internalId>1503</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_738</srcid><srcstatus/><internalId>974</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00221</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00222</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If SecOCQueryFreshnessValue = CFUNC AND SecOCProvideTxTruncatedFreshnessValue= FALSE for a PDU configuration, the SecOC calls the interface function as defined by the configuration parameter &amp;lt;SecOCFreshnessValueFuncName&amp;gt; whenever the DataToAuthenticator is constructed for the respective PDU.</description>
         <!-- changed: Replaced SecOC_GetTxFreshness by ''as defined by the configuration parameter &amp;lt;SecOCFreshnessValueFuncName&amp;gt; -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1229</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_721</srcid><srcstatus/><internalId>972</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00222</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>297</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00223</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            If SecOCQueryFreshnessValue = RTE AND SecOCProvideTxTruncatedFreshnessValue = TRUE
            for a PDU configuration and the freshness value length is not equal to 0,
            SecOC calls the service operation TxFreshnessManagement_GetTxFreshnessTruncData
            whenever the DataToAuthenticator is constructed for the respective PDU.
         </description>
         <!-- changed: Replaced FreshnessManagement_GetTxFreshnessTruncData by TxFreshnessManagement_GetTxFreshnessTruncData -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_SWCFRESHNESSINTERFACES</srcid><srcstatus/><internalId>1219</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_739</srcid><srcstatus/><internalId>975</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00223</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>298</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00224</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            If SecOCQueryFreshnessValue = RTE AND SecOCProvideTxTruncatedFreshnessValue = FALSE
            for a PDU configuration and the freshness value length is not equal to 0,
            SecOC calls the service operation TxFreshnessManagement_GetTxFreshness
            whenever the DataToAuthenticator is constructed for the respective PDU.
         </description>
         <!-- changed: Replaced FreshnessManagement_GetTxFreshness by TxFreshnessManagement_GetTxFreshness -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1270</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_722</srcid><srcstatus/><internalId>973</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00224</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>299</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00225</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>For every transmission request that is queued to SecOC an authentication build counter shall be maintained.</description>
         <releases>
            <release>AUTOSAR R21-11</release>
         </releases>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1229</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1270</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Types.h_646</srcid><srcstatus/><internalId>735</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00225</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>300</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00226</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Upon the initial processing of a transmission request of a secured I-PDU SecOC shall set the authentication build counter to 0.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1229</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1270</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_319</srcid><srcstatus/><internalId>952</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_662</srcid><srcstatus/><internalId>966</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00226</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>301</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00227</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            If either the query of the freshness function (e.g. SecOC_GetTxFreshness()) or the
            calculation of the authenticator (e.g. Csm_MacGenerate()) returns anything else than E_OK,
            the authentication build counter shall be incremented.
         </description>
         <!-- changed: Replaced returns E_BUSY, QUEUE_FULL or any other recoverable error by returns anything else than E_OK -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_777</srcid><srcstatus/><internalId>976</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1229</srcid><srcstatus/><internalId>1005</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1229</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1270</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00227</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>302</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00228</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          If building the authentication has failed and the authentication build counter has not yet
          reached the configuration value SecOCAuthenticationBuildAttempts, the freshness attempt and
          authenticator calculation shall be retried in the next call to the Tx main function.
        </description>
        <needscoverage>
          <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_935</srcid><srcstatus/><internalId>985</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_965</srcid><srcstatus/><internalId>987</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1226</srcid><srcstatus/><internalId>1004</internalId></linkedfrom></coveredby></needscov>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1229</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1270</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00228</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00229</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            If the authentication build counter has reached the configuration value
            SecOCAuthenticationBuildAttempts, the SecOC module shall use SecOCDefaultAuthenticationInformationPattern
            for all the bytes of Freshness Value and Authenticator to build the Authentication Information if sending
            SecOCDefaultAuthenticationInformationPattern is enabled by service SecOC_SendDefaultAuthenticationInformation .
            If sending SecOCDefaultAuthenticationInformationPattern is not enabled, the SecOc module shall remove the Authentic
            I-PDU from its internal buffer and cancel the transmission request.
         </description>
         <!-- changed: Removed  or the query of the freshness function returns E_NOT_OK or the calculation of the authenticator has returned a non-recoverable error such as returning E_NOT_OK or KEY_FAILURE -->
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_791</srcid><srcstatus/><internalId>978</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1125</srcid><srcstatus/><internalId>997</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1246</srcid><srcstatus/><internalId>1007</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1260</srcid><srcstatus/><internalId>1009</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1229</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_MULTIPLE_MAINFUNC_RTE_DEFAULTAUTH_FVM_NOT_OK</srcid><srcstatus/><internalId>1238</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_16_TP_DEFAULTAUTH_FVM_NOT_OK</srcid><srcstatus/><internalId>1251</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1270</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_16_TP_DEFAULTAUTH_NO_INIT</srcid><srcstatus/><internalId>1486</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_16_TP_DEFAULTAUTH_INVALID_FVM_ID</srcid><srcstatus/><internalId>1487</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_16_TP_DEFAULTAUTH_FVM_NOT_OK</srcid><srcstatus/><internalId>1488</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_16_TP_DEFAULTAUTH_CSM_NOT_OK</srcid><srcstatus/><internalId>1489</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_16_TP_DEFAULTAUTH_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1490</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_18_IF_SECUREDPDUCOLLECTION_DEFAULTAUTH_FVM_NOT_OK</srcid><srcstatus/><internalId>1505</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_18_IF_SECUREDPDUCOLLECTION_DEFAULTAUTH_CSM_NOT_OK</srcid><srcstatus/><internalId>1506</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_16_18_IF_TP_SECUREDPDUCOLLECTION_DEFAULTAUTH_FVM_NOT_OK</srcid><srcstatus/><internalId>1507</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00229</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00234</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          For every processed secured I-PDU within SecOC an authentication build counter and
          an authentication verify attempt counter shall be maintained.
        </description>
        <needscoverage>
          <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Types.h_441</srcid><srcstatus/><internalId>733</internalId></linkedfrom></coveredby></needscov>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1267</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00234</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>309</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00235</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          Upon the initial processing of a received secured I-PDU, the authentication build counter and
          the authentication verify attempt counter shall be set to 0.
        </description>
        <needscoverage>
          <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_426</srcid><srcstatus/><internalId>830</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1115</srcid><srcstatus/><internalId>850</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1832</srcid><srcstatus/><internalId>902</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2553</srcid><srcstatus/><internalId>938</internalId></linkedfrom></coveredby></needscov>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1267</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00235</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>310</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00236</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            If the query of the freshness function (e.g. SecOC_GetRxFreshness()) returns E_BUSY the
            authentication build counter shall be incremented and no attempt for verification of
            authentication shall be executed.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1750</srcid><srcstatus/><internalId>889</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2522</srcid><srcstatus/><internalId>933</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00236</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>311</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00237</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If the verification of the authenticator (e.g. Csm_MacVerify()) returns anything
            else than E_OK, the verify attempt counter shall be incremented if it has not yet reached
            its configured maximum value.
         </description>
         <!-- changed: Replaced returns E_BUSY, QUEUE_FULL or any other recoverable error by returns anything else than E_OK -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1920</srcid><srcstatus/><internalId>906</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_SYNCATTEMPTS</srcid><srcstatus/><internalId>1280</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00237</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>312</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00238</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          If the authentication build attempts have failed and the authentication build counter
          has not yet reached the configuration value SecOCAuthenticationBuildAttempts,
          the freshness attempt and the authenticator verification shall be retried in the next call to the Rx main function.
        </description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1318</srcid><srcstatus/><internalId>857</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1389</srcid><srcstatus/><internalId>860</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1754</srcid><srcstatus/><internalId>891</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2527</srcid><srcstatus/><internalId>936</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1267</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00238</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>313</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00239</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          If the verification of the authenticator could be successfully executed but the verification
          failed (e.g. the MAC verification has failed or the key was invalid), the authentication
          verify attempt counter shall be incremented and the authentication build counter shall be set to 0.
        </description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1781</srcid><srcstatus/><internalId>895</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1784</srcid><srcstatus/><internalId>896</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00239</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>314</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00240</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          If the authentication build counter has reached the configuration value SecOCAuthenticationBuildAttempts
          the SecOC module shall remove the Authentic I-PDU from its internal buffer and shall drop the received message.
          The VerificationResultType shall be set to SECOC_AUTHENTICATIONBUILDFAILURE.
          if SecOC_VerifyStatusOverride is used, the verification result and I-PDU are handled according to overrideStatus value.
        </description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1760</srcid><srcstatus/><internalId>892</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1809</srcid><srcstatus/><internalId>901</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2534</srcid><srcstatus/><internalId>937</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2602</srcid><srcstatus/><internalId>944</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00240</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>315</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00256</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          If the query of the freshness function returns E_NOT_OK the SecOC module shall remove
          the Authentic I-PDU from its internal buffer and shall drop the received message.
          The VerificationResultType shall be set to SECOC_FRESHNESSFAILURE.
        </description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1796</srcid><srcstatus/><internalId>898</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2588</srcid><srcstatus/><internalId>941</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1267</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00256</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>316</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00241</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            If the verification of the authenticator failed and authentication verify attempt
            counter has reached the configuration value
            SecOCAuthenticationverify attempts, the SecOC module shall remove the Authentic I-PDU from
            its internal buffer and shall drop the received message. The VerificationResultType shall be
            set to SECOC_VERIFICATIONFAILURE. If SecOC_VerifyStatusOverride is used, the verification result
            and I-PDU are handled according to overrideStatus value.
         </description>
         <!-- changed: Removed the verification of the authenticator has returned a non-recoverable error such as returning E_NOT_OK or KEY_FAILURE -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1547</srcid><srcstatus/><internalId>873</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1267</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00241</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>317</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00242</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          If the verification of the authenticator was successful, the VerificationResultType shall be set to SECOC_VERIFICATIONSUCCESS.
        </description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1449</srcid><srcstatus/><internalId>864</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1267</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00242</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>318</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>
      <!-- SecOC.ASR21-11.SWS_SecOC_00243; [rejected] -->
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00244</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>If SecOCQueryFreshnessValue = RTE AND SecOCUseAuthDataFreshness = TRUE for a PDU configuration and the secured PDU is received completely, the SecOC calls the Rte service FreshnessManagement_GetRxFreshnessAuthData to query the current freshness. A part of the received PDU data are passed to this service operation as configured by the configuration SecOCAuthDataFreshnessStartPosition and SecOCAuthDataFreshnessLen.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1715</srcid><srcstatus/><internalId>887</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2459</srcid><srcstatus/><internalId>929</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_SWCFRESHNESSINTERFACES</srcid><srcstatus/><internalId>1219</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00244</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>320</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00245</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            If SecOCQueryFreshnessValue = RTE and SecOCUseAuthDataFreshness = FALSE
            for a PDU configuration, with freshness value length
            not equal to 0 and the secured PDU is received completely, the SecOC calls the Rte service
            RxFreshnessManagement_GetRxFreshness to query the current freshness.
         </description>
         <!-- changed: Replaced FreshnessManagement_GetRxFreshness by RxFreshnessManagement_GetRxFreshness -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1696</srcid><srcstatus/><internalId>884</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2440</srcid><srcstatus/><internalId>926</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1267</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00245</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>321</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00246</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If SecOCQueryFreshnessValue = CFUNC AND SecOCUseAuthDataFreshness = TRUE for a PDU configuration and the secured PDU is received completely, the SecOC calls the interface function as defined by the configuration parameter &amp;lt;SecOCFreshnessValueFuncName&amp;gt;, to query the current freshness. A part of the received PDU data are passed to this function as configured by the configuration SecOCAuthDataFreshnessStartPosition and SecOCAuthDataFreshnessLen.</description>
         <!-- changed: Replaced SecOC_GetRxFreshnessTruncData by "as defined by the configuration parameter &amp;lt;SecOCFreshnessValueFuncName&amp;gt;" -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1716</srcid><srcstatus/><internalId>888</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2460</srcid><srcstatus/><internalId>930</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_05_IF_FRESHNESS_AUTHDATA</srcid><srcstatus/><internalId>1299</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_06_TP_FRESHNESS_AUTHDATA</srcid><srcstatus/><internalId>1300</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00246</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>322</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00247</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If SecOCQueryFreshnessValue = CFUNC AND SecOCUseAuthDataFreshness = FALSE for a PDU configuration and the secured PDU is received completely, the SecOC calls the interface function as defined by the configuration parameter &amp;lt;SecOCFreshnessValueFuncName&amp;gt;, to query the current freshness.</description>
         <!-- changed: Replaced SecOC_GetRxFreshness by ''as defined by the configuration parameter &amp;lt;SecOCFreshnessValueFuncName&amp;gt;'' -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1697</srcid><srcstatus/><internalId>885</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2441</srcid><srcstatus/><internalId>927</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00247</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>323</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>
      <specobject>
         <id>SecOC.ASR430.Rx.SWS_SecOC_00248_NOT_OK</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            If the Rx freshness request function returns E_NOT_OK, the verification of a secured I-PDU
            is considered to be failed with result SECOC_FRESHNESSFAILURE, the SecOC module shall remove
            the I-PDU from its internal buffer.
         </description>
         <comment>
            The DET report is rejected, because development error detection is not supported.
            If a freshness verification value cannot be constructed from the one contained in the
            secured PDU, there is no possibility for the SecOC successfully verify the secured PDU.
            So the PDU can be removed.
         </comment>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1267</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1795</srcid><srcstatus/><internalId>897</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2587</srcid><srcstatus/><internalId>940</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00248</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>324</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00031</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
           The creation of a Secured I-PDU and thus the authentication of an Authentic I-PDU
           consists of the following six steps:
           1. Prepare Secured I-PDU
           2. Construct Data for Authenticator
           3. Generate Authenticator
           4. Construct Secured I-PDU
           5. Increment Freshness Counter
           6. Broadcast Secured I-PDU
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_621</srcid><srcstatus/><internalId>964</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_692</srcid><srcstatus/><internalId>969</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_890</srcid><srcstatus/><internalId>982</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_907</srcid><srcstatus/><internalId>984</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1097</srcid><srcstatus/><internalId>994</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1415</srcid><srcstatus/><internalId>1013</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1426</srcid><srcstatus/><internalId>1014</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00031</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>327</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00033</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>The SecOC module shall prepare the Secured I-PDU. During preparation,SecOC shall allocate the necessary buffers to hold the intermediate and final results of the authentication process.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_02_TP_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_26_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1520</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_27_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1521</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_28_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1522</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_27_DYN_LEN_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1552</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_27_STATIC_LEN_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1553</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_CSMMODE_TP_02_03_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_DATAIDLEN32BITS_TP_02_03</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_692</srcid><srcstatus/><internalId>969</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00033</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>328</internalId></provcov>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00031</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>327</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00034_1</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            The SecOC module shall construct the DataToAuthenticator, i.e. the data that is used to calculate the Authenticator.
            DataToAuthenticator is formed by concatenating the Data Id (parameter SecOCDataId),
            the secured part of the Authentic I-PDU (when the secured area within a PDU is used) and the complete
            Freshness Value corresponding to SecOCFreshnessValueID in the given order. The Data Id and the
            Freshness Value shall be encoded in Big Endian byte order for that purpose.
         </description>
         <!-- changed: Added (when the secured area within a PDU is used) -->
         <!-- changed: "Replaced the full 16 bit representation of the Data Id" by "the Data Id" -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_01_TP_SECUREDAREA</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_10_TP_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1477</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_26_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1520</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_27_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1521</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_28_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1522</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_27_DYN_LEN_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1552</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_27_STATIC_LEN_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1553</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_PDULENGTHTYPE32BITS_01_TP</srcid><srcstatus/><internalId>1602</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_621</srcid><srcstatus/><internalId>964</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00034</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>329</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00035</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>The SecOC module shall generate the Authenticator by passing DataToAuthenticator, length of DataToAuthenticator into the Authentication Algorithm corresponding to SecOCTxAuthServiceConfigRef.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_02_TP_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_26_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1520</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_27_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1521</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_28_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1522</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_27_DYN_LEN_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1552</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_27_STATIC_LEN_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1553</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_CSMMODE_TP_02_03_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_DATAIDLEN32BITS_TP_02_03</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_890</srcid><srcstatus/><internalId>982</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_907</srcid><srcstatus/><internalId>984</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00035</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>330</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00036</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>The SecOC module shall truncate the resulting Authenticator down to the number of
            bits specified by SecOCAuthInfoTxLength.</description>
         <!-- changed: Replaced SecOCAuthInfoTruncLength by SecOCAuthInfoTxLength -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_02_TP_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_26_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1520</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_27_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1521</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_28_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1522</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_27_DYN_LEN_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1552</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_27_STATIC_LEN_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1553</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_CSMMODE_TP_02_03_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_DATAIDLEN32BITS_TP_02_03</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1433</srcid><srcstatus/><internalId>1015</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00036</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>331</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00037</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>The SecOC module shall construct the Secured I-PDU by adding the Secured I-PDU Header (optional), the Freshness Value (optional) and the Authenticator to the Authentic I-PDU. The scheme for the Secured I-PDU (includes the order in which the contents are structured in the Secured I-PDU) shall be compliant with below: SecuredPDU = SecuredIPDUHeader (optional) | AuthenticIPDU | FreshnessValue [SecOCFreshnessValueTruncLength] (optional) | Authenticator [SecOCAuthInfoTruncLength]</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_02_TP_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_03_04_05_TP_VERF_COUNTERS</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_26_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1520</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_27_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1521</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_28_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1522</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1523</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1524</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1525</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1526</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1527</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1528</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_DYN_RECEIVED_LEN_BIGGER_THAN_CONFIG_LEN</srcid><srcstatus/><internalId>1529</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_DYN_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1530</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_DYN_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1531</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1532</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1533</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1534</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1535</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1536</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1537</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIG_LEN</srcid><srcstatus/><internalId>1538</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1539</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1540</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_09_PDU_HDR_IF_EQUAL_LENGTH</srcid><srcstatus/><internalId>1541</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_09_PDU_HDR_IF_SMALLER_LENGTH</srcid><srcstatus/><internalId>1542</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_21_PDU_COL_HDR_IF_EQUAL_LENGTH</srcid><srcstatus/><internalId>1543</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_21_PDU_COL_HDR_IF_SMALLER_LENGTH</srcid><srcstatus/><internalId>1544</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_22_PDU_COL_MESSLINK_HDR_IF_EQUAL_LENGTH</srcid><srcstatus/><internalId>1545</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_22_PDU_COL_MESSLINK_HDR_IF_SMALLER_LENGTH</srcid><srcstatus/><internalId>1546</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_27_DYN_LEN_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1552</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_27_STATIC_LEN_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1553</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_CSMMODE_TP_02_03_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_DATAIDLEN32BITS_TP_02_03</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1334</srcid><srcstatus/><internalId>1012</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1415</srcid><srcstatus/><internalId>1013</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1426</srcid><srcstatus/><internalId>1014</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00037</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>332</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00040</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
          The verification of a Secured I-PDU consists of the following six steps:
          1. Parse Authentic I-PDU, Freshness Value and Authenticator
          2. Get Freshness Value from Freshness Manager
          3. Construct Data to Authentication
          4. Verify Authentication Information
          5. Send Confirmation to Freshness Manager
          6. Pass Authentic I-PDU to upper layer
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1078</srcid><srcstatus/><internalId>848</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1244</srcid><srcstatus/><internalId>853</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1266</srcid><srcstatus/><internalId>855</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1602</srcid><srcstatus/><internalId>876</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2557</srcid><srcstatus/><internalId>939</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2634</srcid><srcstatus/><internalId>945</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00042</srcid><srcstatus/><internalId>46</internalId></linkedfrom><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00046_1</srcid><srcstatus/><internalId>47</internalId></linkedfrom><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00046_2</srcid><srcstatus/><internalId>48</internalId></linkedfrom><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00047</srcid><srcstatus/><internalId>49</internalId></linkedfrom><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00050</srcid><srcstatus/><internalId>53</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00040</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>333</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00203</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            If SecOCRxSecuredPduCollection is used then SecOC shall not perform any verification until
            it has received both the Authentic I-PDU and Cryptographic I-PDU which make up the
            Secured I-PDU. Only after both have been received SecOC shall attempt to verify
            the resulting Secure I-PDU.
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_17_IF_SECUREDPDUCOLLECTION_NOMESSAGE</srcid><srcstatus/><internalId>1307</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_18_IF_SECUREDPDUCOLLECTION_WITHMESSAGE</srcid><srcstatus/><internalId>1308</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_NOMESSAGE</srcid><srcstatus/><internalId>1309</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_WITHMESSAGE</srcid><srcstatus/><internalId>1310</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_WITHMESSAGE</srcid><srcstatus/><internalId>1311</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1312</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_ZEROPDULEN</srcid><srcstatus/><internalId>1313</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_SMALLERPDUSIZETHANCFGED</srcid><srcstatus/><internalId>1314</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_TPCOPYRXDATA_NOT_OK</srcid><srcstatus/><internalId>1315</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_17_IF_SECUREDPDUCOLLECTION_NOMESSAGE_VERIFYFAIL</srcid><srcstatus/><internalId>1316</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_21_IF_SECUREDPDUCOLLECTION_WRONGMESSAGE</srcid><srcstatus/><internalId>1317</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_23_IF_SECUREDPDUCOLLECTION_WRONGMESSAGE2</srcid><srcstatus/><internalId>1318</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_26_IF_SHAPE_NOMESSAGE</srcid><srcstatus/><internalId>1319</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_25_IF_SHAPE_WITHMESSAGE</srcid><srcstatus/><internalId>1320</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_WRONGMESSAGE3</srcid><srcstatus/><internalId>1321</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_STARTOFRECEPTION_NOT_OK</srcid><srcstatus/><internalId>1322</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_27_IF_SECUREDPDUCOLLECTION_SECUREDAREA</srcid><srcstatus/><internalId>1323</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_951</srcid><srcstatus/><internalId>843</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00203</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>334</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00211</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            If SecOCRxSecuredPduCollection is used then SecOC shall not attempt to verify the Secured I-PDU until it has received and buffered an Authentic I-PDU and Cryptographic I-PDU with matching Message Linker values. If SecOC_VerifyStatusOverride is used, the verification result and I-PDU are handled according to overrideStatus value. If SecOCUseMessageLink has 0 multiplicity, it means SecOCMessageLinkLen is 0 and that Message Linker Values are always matching.
         </description>
         <!-- changed: Added If SecOCUseMessageLink has 0 multiplicity, it means SecOCMessageLinkLen is 0 and that Message Linker Values are always matching. -->
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_17_IF_SECUREDPDUCOLLECTION_NOMESSAGE</srcid><srcstatus/><internalId>1307</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_18_IF_SECUREDPDUCOLLECTION_WITHMESSAGE</srcid><srcstatus/><internalId>1308</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_NOMESSAGE</srcid><srcstatus/><internalId>1309</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_WITHMESSAGE</srcid><srcstatus/><internalId>1310</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_WITHMESSAGE</srcid><srcstatus/><internalId>1311</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1312</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_ZEROPDULEN</srcid><srcstatus/><internalId>1313</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_SMALLERPDUSIZETHANCFGED</srcid><srcstatus/><internalId>1314</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_TPCOPYRXDATA_NOT_OK</srcid><srcstatus/><internalId>1315</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_17_IF_SECUREDPDUCOLLECTION_NOMESSAGE_VERIFYFAIL</srcid><srcstatus/><internalId>1316</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_21_IF_SECUREDPDUCOLLECTION_WRONGMESSAGE</srcid><srcstatus/><internalId>1317</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_23_IF_SECUREDPDUCOLLECTION_WRONGMESSAGE2</srcid><srcstatus/><internalId>1318</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_26_IF_SHAPE_NOMESSAGE</srcid><srcstatus/><internalId>1319</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_25_IF_SHAPE_WITHMESSAGE</srcid><srcstatus/><internalId>1320</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_WRONGMESSAGE3</srcid><srcstatus/><internalId>1321</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_STARTOFRECEPTION_NOT_OK</srcid><srcstatus/><internalId>1322</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_27_IF_SECUREDPDUCOLLECTION_SECUREDAREA</srcid><srcstatus/><internalId>1323</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_981</srcid><srcstatus/><internalId>845</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00211</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>335</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00042</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Upon reception of a secured I-PDU SecOC shall parse the Authentic I-PDU, the
            Freshness Value and the Authenticator from it.</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_CSM</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_10_IF_FRESHNESS_ZERO_MAC_FAILS</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_13_IF_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_VER_RES_09_IF</srcid><srcstatus/><internalId>1384</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_CSMMODE_IF_09_10_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1562</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_DATAIDLEN32BITS_IF_09_10</srcid><srcstatus/><internalId>1563</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_03_TP</srcid><srcstatus/><internalId>1564</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_09_IF</srcid><srcstatus/><internalId>1565</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2634</srcid><srcstatus/><internalId>945</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00042</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>336</internalId></provcov>
            <provcov>
               <linksto>SecOC.Asr.SWS_SecOC_00040</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00046_1</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            The SecOC module shall construct the data that is used to calculate the
            Authenticator (DataToAuthenticator) on the receiver side. When the secured area within a PDU is used
            this data is comprised of SecOCDataId | secured part of the Authentic I-PDU  | FreshnessVerifyValue.
         </description>
         <!-- changed: Replaced This data is comprised of SecOCDataId| AuthenticIPDU | FreshnessVerifyValue by When the secured area within a PDU is used
                       this data is comprised of SecOCDataId | secured part of the Authentic I-PDU  | FreshnessVerifyValue. -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_04_IF_SECUREDAREA</srcid><srcstatus/><internalId>1294</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_13_IF_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_VER_RES_09_IF</srcid><srcstatus/><internalId>1384</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1078</srcid><srcstatus/><internalId>848</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00046</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>337</internalId></provcov>
            <provcov>
               <linksto>SecOC.Asr.SWS_SecOC_00040</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00046_2</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            If the secured area feature is not set the SecOC module use the complete
            Authentic I-PDU to form the DataToAuthenticator. In this case this data is comprised of
            SecOCDataId | Authentic I-PDU | FreshnessVerifyValue.(SRS_SecOC_00006)
         </description>
         <!-- changed: Added If the secured area feature is not set the SecOC module -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_CSM</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_10_IF_FRESHNESS_ZERO_MAC_FAILS</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_CSMMODE_IF_09_10_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1562</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_DATAIDLEN32BITS_IF_09_10</srcid><srcstatus/><internalId>1563</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1078</srcid><srcstatus/><internalId>848</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00046</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>337</internalId></provcov>
            <provcov>
               <linksto>SecOC.Asr.SWS_SecOC_00040</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00047</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description> The SecOC module shall verify the Authenticator by passing DataToAuthenticator, length of
            DataToAuthenticator, the Authenticator parsed from Secured I-PDU, and SecOCAuthInfoTxLength
            into the authentication algorithm corresponding to SecOCRxAuthServiceConfigRef.
            The verification process is repeated as outlined in chapter 9.4. If SecOC_VerifyStatusOverride is used,
            the verification result and I-PDU are handled according to overrideStatus value.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_CSM</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_SYNCATTEMPTS</srcid><srcstatus/><internalId>1280</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_CSMMODE_IF_09_10_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1562</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_DATAIDLEN32BITS_IF_09_10</srcid><srcstatus/><internalId>1563</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1244</srcid><srcstatus/><internalId>853</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1266</srcid><srcstatus/><internalId>855</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00047</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
            <provcov>
               <linksto>SecOC.Asr.SWS_SecOC_00040</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00048</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>The SecOC module shall report the verification status of the corresponding secured Rx-PDU as follows: If SecOCRxPduProcessing/SecOCVerificationStatusPropagationMode is set to BOTH or FAILURE_ONLY, the verification status shall be served through the call out function SecOC_VerificationStatusCallout and the SecOC_VerificationStatus interface according to its current configuration. No report will be provided if the configuration is set to NONE.</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_IF_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1241</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_11_IF_TP_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1282</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_01_TP_SKIPMACVERIF</srcid><srcstatus/><internalId>1293</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_24_PROP_SET_TO_FAILURE_ONLY</srcid><srcstatus/><internalId>1410</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_24_PROP_SET_TO_FAILURE_ONLY</srcid><srcstatus/><internalId>1432</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_FVM_RET_VAL_BUSY_CASE1</srcid><srcstatus/><internalId>1433</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_FVM_RET_VAL_NOT_OK_CASE1</srcid><srcstatus/><internalId>1434</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_FVM_RET_VAL_BUSY_CASE2</srcid><srcstatus/><internalId>1435</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_FVM_RET_VAL_NOT_OK_CASE2</srcid><srcstatus/><internalId>1436</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1437</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1438</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1439</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1476</srcid><srcstatus/><internalId>866</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1510</srcid><srcstatus/><internalId>869</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00048</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>339</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00271</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>The SecOC module shall report the verification status of the corresponding secured Rx-PDU as follows: If SecOCRxPduProcessing/SecOCClientServerVerificationStatusPropagationMode is set to BOTH or FAILURE_ONLY, the verification status shall be served through the service interface SecOC_VerificationStatusIndication according to its current configuration. No report will be provided if the configuration is set to NONE</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
        <needscoverage>
           <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_NO_INIT</srcid><srcstatus/><internalId>1411</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1412</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1413</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1414</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1415</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_IF_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1416</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_TP_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1417</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1418</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_IF_SKIP_UNTIL_LIMIT_PDU_COL</srcid><srcstatus/><internalId>1419</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_TP_SKIP_UNTIL_LIMIT_PDU_COL</srcid><srcstatus/><internalId>1420</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1421</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_BUSY</srcid><srcstatus/><internalId>1422</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1423</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1424</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1425</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1426</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1427</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1428</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1429</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1430</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_INVALID_PARAM</srcid><srcstatus/><internalId>1431</internalId></linkedfrom></coveredby></needscov>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2884</srcid><srcstatus/><internalId>951</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
           <provcov>
              <linksto>SecOC.ASR21-11.SWS_SecOC_00271</linksto>
              <dstversion>1</dstversion>
           <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>340</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>51</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00272</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>If the configuration item SecOCGeneral/SecOCPropagateOnlyFinalVerificationStatus is set to TRUE,
          then only the final status shall be reported. If this item is set to FALSE,
          then each individual verification status (the final one as well as all previous failed ones)
          shall be reported according to SWS_SecOC_00048 and SWS_SecOC_00271.
        </description>
        <needscoverage>
           <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_FVM_RET_VAL_BUSY_CASE1</srcid><srcstatus/><internalId>1433</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_FVM_RET_VAL_NOT_OK_CASE1</srcid><srcstatus/><internalId>1434</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_FVM_RET_VAL_BUSY_CASE2</srcid><srcstatus/><internalId>1435</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_FVM_RET_VAL_NOT_OK_CASE2</srcid><srcstatus/><internalId>1436</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1437</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1438</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1439</internalId></linkedfrom></coveredby></needscov>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1478</srcid><srcstatus/><internalId>867</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1499</srcid><srcstatus/><internalId>868</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1512</srcid><srcstatus/><internalId>870</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1769</srcid><srcstatus/><internalId>894</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1804</srcid><srcstatus/><internalId>899</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1925</srcid><srcstatus/><internalId>907</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1937</srcid><srcstatus/><internalId>909</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2596</srcid><srcstatus/><internalId>942</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
           <provcov>
              <linksto>SecOC.ASR21-11.SWS_SecOC_00272</linksto>
              <dstversion>1</dstversion>
           <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>341</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00050</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>If the verification of a Secured I-PDU was successful or the status override was set accordingly, the SecOC module shall pass the Authentic I-PDU to the upper layer communication modules using the lower layer interfaces of the PduR.</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_CSM</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_10_IF_FRESHNESS_ZERO_MAC_FAILS</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_CSMRETVALNOTOK</srcid><srcstatus/><internalId>1288</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_CSMCALLBACKNOTOK</srcid><srcstatus/><internalId>1289</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_CSMRESULTNOTOK</srcid><srcstatus/><internalId>1290</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_13_IF_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_03_TP</srcid><srcstatus/><internalId>1564</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_09_IF</srcid><srcstatus/><internalId>1565</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1602</srcid><srcstatus/><internalId>876</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00050</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>342</internalId></provcov>
            <provcov>
               <linksto>SecOC.Asr.SWS_SecOC_00040</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>
      <!-- SecOC.ASR21-11.SWS_SecOC_00153; [rejected] -->
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00212</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>SecOC shall ensure that MetaData received in an authentic PDU will be present unchanged in the corresponding secured PDU, and vice versa.</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and when queueing incoming PDUs.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU</srcid><srcstatus/><internalId>1440</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_PDU_SIZE_ZERO</srcid><srcstatus/><internalId>1441</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_DYNAMICPDULENGTH_09_SECURED_PDU_IF_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1442</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_FULL</srcid><srcstatus/><internalId>1443</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_OVRFL</srcid><srcstatus/><internalId>1444</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_HALFQUE_OVRFL</srcid><srcstatus/><internalId>1445</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_FULL_EMPTY_HALF</srcid><srcstatus/><internalId>1446</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU</srcid><srcstatus/><internalId>1447</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_PARTIALCOPY</srcid><srcstatus/><internalId>1448</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_FULL</srcid><srcstatus/><internalId>1449</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_OVRFL</srcid><srcstatus/><internalId>1450</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_HALFQUE_OVRFL</srcid><srcstatus/><internalId>1451</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_FULL_EMPTY_HALF</srcid><srcstatus/><internalId>1452</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_REJECT_PDU_FROM_QUEUE</srcid><srcstatus/><internalId>1453</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_SMALL_PDU_SIZE</srcid><srcstatus/><internalId>1454</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_BIG_PDU_SIZE</srcid><srcstatus/><internalId>1455</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_FV_RET_VALUE_E_NOT_OK</srcid><srcstatus/><internalId>1456</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_CSM_RET_VALUE_E_NOT_OK</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_CSM_VER_RES_E_NOT_OK</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_CSM_CALLBACK_RET_VALUE_E_NOT_OK</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_FV_RET_VALUE_E_NOT_OK</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_CSM_RET_VALUE</srcid><srcstatus/><internalId>1461</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_CSM_VER_RES_E_NOT_OK</srcid><srcstatus/><internalId>1462</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_CSM_CALLBACK_RET_VALUE_E_NOT_OK</srcid><srcstatus/><internalId>1463</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_04_IF_SECUREDPDU_NO_METADATA</srcid><srcstatus/><internalId>1464</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_04_TP_SECUREDPDU_NO_METADATA</srcid><srcstatus/><internalId>1465</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_04_TP_SECUREDPDU_PARTIALCOPY_NO_METADATA</srcid><srcstatus/><internalId>1466</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_818</srcid><srcstatus/><internalId>841</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1595</srcid><srcstatus/><internalId>875</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00212</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>344</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>54</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00054</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Within SecOC_Init, the module shall initialize all internal global variables and the buffers of the SecOC I-PDUs.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_376</srcid><srcstatus/><internalId>762</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00054</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>345</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>55</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00269</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>The AUTOSAR SecOC module shall fill not used areas of a transmitted Secured or a transmitted Cryptographic Pdu with a value determined by configuration parameter SecOCTxPduUnusedAreasDefault (ECUC_SecOC_00101) e.g. 0xFF.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1039</srcid><srcstatus/><internalId>992</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_15_IF_SECUREDIPDU_DYN_LEN_UNUSED_AREA_BYTES</srcid><srcstatus/><internalId>1547</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_09_IF_SECUREDIPDU_DYN_LEN_UNUSED_AREA_AUTHINFO_BITS</srcid><srcstatus/><internalId>1548</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_15_IF_SECUREDIPDU_STATIC_LEN_UNUSED_AREA_BYTES</srcid><srcstatus/><internalId>1549</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_03_IF_SECUREDIPDU_UNUSED_AREA_FRESH_BITS</srcid><srcstatus/><internalId>1550</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_17_IF_SECUREDIPDU_UNUSED_AREA_AUTHINFO_FRESH_BITS</srcid><srcstatus/><internalId>1551</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00269</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>346</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>56</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00252</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>The SecOC module shall copy the complete Authentic I-PDU to its internal memory before starting transmission of the corresponding Secured I-PDU.</description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_526</srcid><srcstatus/><internalId>772</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00252</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>347</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>57</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00201</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            If SecOCTxSecuredPduCollection is used, then SecOC shall transmit the Secured I-PDU as
            two messages, the original Authentic I-PDU and a separate Cryptographic I-PDU.
            The Cryptographic I-PDU shall contain all Authentication Information of the Secured I-PDU,
            so that the Authentic I-PDU and the Cryptographic I-PDU contain all information necessary
            to reconstruct the Secured I-PDU.
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_18_IF_SECUREDPDUCOLLECTION_NOMESSAGELINK</srcid><srcstatus/><internalId>1508</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_19_IF_SECUREDPDUCOLLECTION_WITHMESSAGELINK</srcid><srcstatus/><internalId>1509</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_20_IF_SECUREDPDUCOLLECTION_WITHTRUNCATION</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_21_TP_SECUREDPDUCOLLECTION_NOMESSAGELINK</srcid><srcstatus/><internalId>1511</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_22_TP_SECUREDPDUCOLLECTION_WITHMESSAGELINK</srcid><srcstatus/><internalId>1512</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_23_TP_SECUREDPDUCOLLECTION_WITHTRUNCATION</srcid><srcstatus/><internalId>1513</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_18_IF_SECUREDPDUCOLLECTION_NOMESSAGE_WITH_TRIGGER_TRANSMIT</srcid><srcstatus/><internalId>1514</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_21_TP_SECUREDPDUCOLLECTION_CONFIRMATION_AUTH_NOT_OK</srcid><srcstatus/><internalId>1515</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_21_TP_SECUREDPDUCOLLECTION_CONFIRMATION_CRYPTO_NOT_OK</srcid><srcstatus/><internalId>1516</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_21_TP_SECUREDPDUCOLLECTION_CONFIRMATION_NOT_OK</srcid><srcstatus/><internalId>1517</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_24_TP_SHAPE_NOMESSAGELINK</srcid><srcstatus/><internalId>1518</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_25_TP_SHAPE_WITHMESSAGELINK</srcid><srcstatus/><internalId>1519</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1531</srcid><srcstatus/><internalId>1018</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1555</srcid><srcstatus/><internalId>1019</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00201</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>348</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>58</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00202</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            SecOC shall transmit an Authentic I-PDU and its corresponding Cryptographic I-PDU
            within the same main function cycle.
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_18_IF_SECUREDPDUCOLLECTION_NOMESSAGELINK</srcid><srcstatus/><internalId>1508</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_19_IF_SECUREDPDUCOLLECTION_WITHMESSAGELINK</srcid><srcstatus/><internalId>1509</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_20_IF_SECUREDPDUCOLLECTION_WITHTRUNCATION</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_21_TP_SECUREDPDUCOLLECTION_NOMESSAGELINK</srcid><srcstatus/><internalId>1511</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_22_TP_SECUREDPDUCOLLECTION_WITHMESSAGELINK</srcid><srcstatus/><internalId>1512</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_23_TP_SECUREDPDUCOLLECTION_WITHTRUNCATION</srcid><srcstatus/><internalId>1513</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_18_IF_SECUREDPDUCOLLECTION_NOMESSAGE_WITH_TRIGGER_TRANSMIT</srcid><srcstatus/><internalId>1514</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_21_TP_SECUREDPDUCOLLECTION_CONFIRMATION_AUTH_NOT_OK</srcid><srcstatus/><internalId>1515</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_21_TP_SECUREDPDUCOLLECTION_CONFIRMATION_CRYPTO_NOT_OK</srcid><srcstatus/><internalId>1516</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_21_TP_SECUREDPDUCOLLECTION_CONFIRMATION_NOT_OK</srcid><srcstatus/><internalId>1517</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_24_TP_SHAPE_NOMESSAGELINK</srcid><srcstatus/><internalId>1518</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_25_TP_SHAPE_WITHMESSAGELINK</srcid><srcstatus/><internalId>1519</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1079</srcid><srcstatus/><internalId>993</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00202</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>349</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>59</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00209</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            If SecOCTxSecuredPduCollection is used then SecOC shall repeat a part of the Authentic I-PDU
            inside the Cryptographic I-PDU as Message Linker and the Cryptographic I-PDU shall be
            constructed as Cryptographic I-PDU = Authentication Data | Message Linker.
         </description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_19_IF_SECUREDPDUCOLLECTION_WITHMESSAGELINK</srcid><srcstatus/><internalId>1509</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_20_IF_SECUREDPDUCOLLECTION_WITHTRUNCATION</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_22_TP_SECUREDPDUCOLLECTION_WITHMESSAGELINK</srcid><srcstatus/><internalId>1512</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_23_TP_SECUREDPDUCOLLECTION_WITHTRUNCATION</srcid><srcstatus/><internalId>1513</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_25_TP_SHAPE_WITHMESSAGELINK</srcid><srcstatus/><internalId>1519</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1009</srcid><srcstatus/><internalId>990</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00209</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>350</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>60</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00210</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            If SecOCUseMessageLink is used then SecOC shall use the value at bit position
            SecOCMessageLinkPos of length SecOCMessageLinkLen bits inside the Authentic I-PDU
            as the Message Linker.
         </description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_SECUREDPDUCOLLECTION_WITHMESSAGELINK</srcid><srcstatus/><internalId>1325</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_19_IF_SECUREDPDUCOLLECTION_WITHMESSAGELINK</srcid><srcstatus/><internalId>1509</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_20_IF_SECUREDPDUCOLLECTION_WITHTRUNCATION</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_22_TP_SECUREDPDUCOLLECTION_WITHMESSAGELINK</srcid><srcstatus/><internalId>1512</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_23_TP_SECUREDPDUCOLLECTION_WITHTRUNCATION</srcid><srcstatus/><internalId>1513</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_25_TP_SHAPE_WITHMESSAGELINK</srcid><srcstatus/><internalId>1519</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1585</srcid><srcstatus/><internalId>1020</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00210</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>351</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>61</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00270</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          If SecOCTxSecuredPduCollection is used, the SecOC shall forward the TxConfirmation
          to the upper layer if the SecOC_TxConfirmation was called for the Authentic I-PDU and the Cryptographic I-PDU.
          The reult parameter of the upper layer TxConfirmation call shall only be E_OK
          if the result parameters for both TxConfirmation calls were E_OK, Otherwise the result parameter shall be E_NOT_OK.
        </description>
        <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_20_IF_SECUREDPDUCOLLECTION_WITHTRUNCATION</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_21_TP_SECUREDPDUCOLLECTION_CONFIRMATION_AUTH_NOT_OK</srcid><srcstatus/><internalId>1515</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_21_TP_SECUREDPDUCOLLECTION_CONFIRMATION_CRYPTO_NOT_OK</srcid><srcstatus/><internalId>1516</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_21_TP_SECUREDPDUCOLLECTION_CONFIRMATION_NOT_OK</srcid><srcstatus/><internalId>1517</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_750</srcid><srcstatus/><internalId>784</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_778</srcid><srcstatus/><internalId>785</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1023</srcid><srcstatus/><internalId>793</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1030</srcid><srcstatus/><internalId>795</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00270</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>352</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>62</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00057</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>The SecOC module shall provide sufficient buffer capacities to store the incoming
            Authentic I-PDU, the outgoing Secured I-PDU and all intermediate data of the authentication
            process according to the process described in SWS_SecOC_00031.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/SecOC.xgen_212</srcid><srcstatus/><internalId>1199</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00057</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>353</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>63</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00146</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>The SecOC module shall provide separate buffers for the Authentic I-PDU and the
            Secured I-PDU.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/SecOC.xgen_212</srcid><srcstatus/><internalId>1199</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00146</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>354</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>64</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00110</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Any transmission request from the upper layer communication module shall
            overwrite the buffer that contains the Authentic I-PDU without affecting the buffer of the
            respective Secured I-PDU.</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_15_TP_TRANSMIT_OVERWRITE</srcid><srcstatus/><internalId>1485</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_526</srcid><srcstatus/><internalId>772</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00110</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>355</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>65</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00262</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>For a Tx Secured I-PDU with SecOCAuthPduHeaderLength &gt; 0, the SecOC module shall add the Secured I-PDU Header to the Secured I-PDU with the length of the Authentic I-PDU within the Secured I-PDU, to handle dynamic Authentic I-PDU. Note: Primary purpose of this Header is to indicate the position of Freshness Value and Authenticator in Secured I-PDUs with dynamic length Authentic I-PDU.Also some buses which cannot select arbitrary length of L-PDU (e.g. CAN FD and FlexRay) require this Header, because the position of Freshness Value and Authenticator is not always at the end of the Secured I-PDU, as lower layer modules (e.g. CanIf and FrIf) may add bus-specific padding bytes after processing at SecOC (then the L-PDU containing the Secured I-PDU with padding will be: Secured I-PDU = Secured I-PDU Header | Authentic I-PDU | Freshness Value | Authenticator | Bus-specific padding).</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp.</furtherinfo>
        <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1523</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1524</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1525</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1526</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1527</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1528</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_DYN_RECEIVED_LEN_BIGGER_THAN_CONFIG_LEN</srcid><srcstatus/><internalId>1529</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_DYN_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1530</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_DYN_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1531</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1532</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1533</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1534</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1535</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1536</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1537</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIG_LEN</srcid><srcstatus/><internalId>1538</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1539</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1540</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_09_PDU_HDR_IF_EQUAL_LENGTH</srcid><srcstatus/><internalId>1541</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_09_PDU_HDR_IF_SMALLER_LENGTH</srcid><srcstatus/><internalId>1542</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_21_PDU_COL_HDR_IF_EQUAL_LENGTH</srcid><srcstatus/><internalId>1543</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_21_PDU_COL_HDR_IF_SMALLER_LENGTH</srcid><srcstatus/><internalId>1544</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_22_PDU_COL_MESSLINK_HDR_IF_EQUAL_LENGTH</srcid><srcstatus/><internalId>1545</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_22_PDU_COL_MESSLINK_HDR_IF_SMALLER_LENGTH</srcid><srcstatus/><internalId>1546</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1028</srcid><srcstatus/><internalId>991</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00262</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>356</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>66</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00058</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>The SecOC module shall allocate internal buffer capacities to store the Authentic
            IPDU and the Authentication Information in a consecutive memory location.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/SecOC.xgen_212</srcid><srcstatus/><internalId>1199</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00058</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>357</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>67</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00060</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>For transmission of Authentic I-PDUs using bus interfaces that allow ad-hoc
            transmission (e.g. CanIf), the SecOC module shall calculate the Authenticator in the
            scheduled main function according to the overall approach specified in
            SWS_SecOC_00031.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_09_IF_AUTHPDU_DYNAMIC_LENGTH</srcid><srcstatus/><internalId>1480</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_889</srcid><srcstatus/><internalId>981</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_906</srcid><srcstatus/><internalId>983</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00060</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>358</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>68</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00061</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>For transmission of Authentic I-PDUs using bus interfaces that allow ad-hoc
            communication (e.g. CanIf), the SecOC module shall create the Secured I-PDU in the scheduled
            main function.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_09_IF_AUTHPDU_DYNAMIC_LENGTH</srcid><srcstatus/><internalId>1480</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_692</srcid><srcstatus/><internalId>969</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1334</srcid><srcstatus/><internalId>1012</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1415</srcid><srcstatus/><internalId>1013</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1426</srcid><srcstatus/><internalId>1014</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00061</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>359</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00062</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>The SecOC module shall provide the complete Secured I-PDU for further
            transmission to the destination lower layer module by triggering
            PduR_SecOCTransmit.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_09_IF_AUTHPDU_DYNAMIC_LENGTH</srcid><srcstatus/><internalId>1480</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1097</srcid><srcstatus/><internalId>994</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00062</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00063</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If the PDU Router module notifies the SecOC module that the destination lower layer module has either confirmed the transmission of the Secured I-PDU or reported an error during transmission by calling SecOCTxConfirmation|SecOCTpTxConfirmation, the SecOC module shall pass the received result of the respective Authentic I-PDU to the upper layer module by calling PduR_SecOCRxIndication|PduR_SecOCTpRxIndication.</description>
         <!-- changed: Replaced SecOCIfTxConfirmation and PduR_SecOCIfRxIndication  by SecOCTxConfirmation and PduR_SecOCRxIndication respectively -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_09_IF_AUTHPDU_DYNAMIC_LENGTH</srcid><srcstatus/><internalId>1480</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_811</srcid><srcstatus/><internalId>786</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1137</srcid><srcstatus/><internalId>999</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00063</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>361</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00064</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>For transmission of Authentic I-PDUs using bus interfaces that allow ad-hoc
            communication (e.g. CanIf), the SecOC module shall free the buffer that contain the Secured
            I-PDU, if and only if SecOC_TxConfirmation is called for the Secured I-PDU.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_09_IF_AUTHPDU_DYNAMIC_LENGTH</srcid><srcstatus/><internalId>1480</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1137</srcid><srcstatus/><internalId>999</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00064</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>362</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00065</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>For transmission of Authentic I-PDUs using bus interfaces that allow triggered
            transmission (e.g. FrIf), the SecOC module shall calculate the Authenticator in the
            scheduled main function according to the overall approach specified in SWS_SecOC_00031.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_889</srcid><srcstatus/><internalId>981</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_906</srcid><srcstatus/><internalId>983</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_17_IF_TRIGGER_TRANSMIT</srcid><srcstatus/><internalId>1500</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_17_IF_MACGENERATESTATUS</srcid><srcstatus/><internalId>1501</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_PDULENGTHTYPE32BITS_17_IF</srcid><srcstatus/><internalId>1603</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00065</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>363</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00066</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>For transmission of Authentic I-PDUs using bus interfaces that allow triggered
            transmission (e.g. FrIf), the SecOC module shall create the Secured I-PDU in the scheduled
            main function.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_692</srcid><srcstatus/><internalId>969</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1334</srcid><srcstatus/><internalId>1012</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1415</srcid><srcstatus/><internalId>1013</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1426</srcid><srcstatus/><internalId>1014</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_17_IF_TRIGGER_TRANSMIT</srcid><srcstatus/><internalId>1500</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_PDULENGTHTYPE32BITS_17_IF</srcid><srcstatus/><internalId>1603</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00066</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>364</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00067</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>For transmission of Authentic I-PDUs using bus interfaces that allow triggered
            transmission (e.g. FrIf), the SecOC module shall indicate the transmission request for the
            complete Secured I-PDU by triggering PduR_SecOCTransmit at the PduR. The PduR is responsible
            to further process the request and to notify the respective lower layer module.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1097</srcid><srcstatus/><internalId>994</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_17_IF_TRIGGER_TRANSMIT</srcid><srcstatus/><internalId>1500</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_PDULENGTHTYPE32BITS_17_IF</srcid><srcstatus/><internalId>1603</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00067</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>365</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00068</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>When SecOC_TriggerTransmit is called by the PduR module, the SecOC module shall
            copy the Secured I-PDU to the lower layer destination module.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_703</srcid><srcstatus/><internalId>782</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_17_IF_TRIGGER_TRANSMIT</srcid><srcstatus/><internalId>1500</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_PDULENGTHTYPE32BITS_17_IF</srcid><srcstatus/><internalId>1603</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00068</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>366</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00150</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>When SecOC_TriggerTransmit is called by the PduR module and the SecOC module is
            not able to provide a Secured I-PDU to the lower layer (no Secured I-PDU available), the
            SecOC module shall return the call with E_NOT_OK.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_697</srcid><srcstatus/><internalId>781</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_17_IF_TRIGGER_TRANSMIT</srcid><srcstatus/><internalId>1500</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_PDULENGTHTYPE32BITS_17_IF</srcid><srcstatus/><internalId>1603</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00150</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>367</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00069</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          For transmission of Authentic I-PDUs using bus interfaces that allow triggered transmission (e.g. FrIf) and
          the transmission of the Secured I-PDU was confirmed by SecOC_TxConfirmation (successfully sent),
          the SecOC module shall free the buffer that contain Authentication Information and preserve the buffer
          that contain the Authentic I-PDU. If the parameter SecOCReAuthenticateAfterTriggerTransmit is set to true,
          the Authentic I-PDU shall be treated as if it has been set by the upper layer and thus shall
          undergo a new authentication procedure with the subsequent call of the SecOC_MainFunctionTx.
          Otherwise no reauthentication of the Authentic I-PDU is required.
        </description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_550</srcid><srcstatus/><internalId>962</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1154</srcid><srcstatus/><internalId>1001</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_09_IF_RE_AUTHENTICATION_ENABLED</srcid><srcstatus/><internalId>1492</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00069</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>368</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>
      <!-- SecOC.ASR21-11.SWS_SecOC_00253; [approved not implemented yet] -->
      <!-- SecOC.ASR21-11.SWS_SecOC_00254; [approved not implemented yet] -->
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00070</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            For transmission of Authentic I-PDUs using transport protocol, the SecOC module
            shall calculate the Authenticator in the scheduled main function according to the
            overall approach specified in SWS_SecOC_00031.
            In case SecOCPduType is configured to SECOC_TPPDU the freshness value shall be retrieved
            as late as possible i.e. just in time when this part of the message will be transmitted
            next to the bus.
         </description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_02_TP_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_03_04_05_TP_VERF_COUNTERS</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_CSMMODE_TP_02_03_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_DATAIDLEN32BITS_TP_02_03</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_715</srcid><srcstatus/><internalId>971</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_889</srcid><srcstatus/><internalId>981</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_906</srcid><srcstatus/><internalId>983</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00070</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>371</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>79</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00071</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>For transmission of Authentic I-PDUs using transport protocol, the SecOC module
            shall create the Secured I-PDU in the scheduled main function.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_02_TP_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_03_04_05_TP_VERF_COUNTERS</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_CSMMODE_TP_02_03_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_DATAIDLEN32BITS_TP_02_03</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_692</srcid><srcstatus/><internalId>969</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1415</srcid><srcstatus/><internalId>1013</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1426</srcid><srcstatus/><internalId>1014</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00071</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>372</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00072</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>For transmission of Authentic I-PDUs using transport protocol, the SecOC module shall indicate the transmission request for the complete Secured I-PDU by triggering PduR_SecOCTransmit at the PduR. The PduR is responsible to further process the request and to notify the respective lower layer module.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_03_04_05_TP_VERF_COUNTERS</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED</srcid><srcstatus/><internalId>1495</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED_WRONGINPUT</srcid><srcstatus/><internalId>1496</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED_RETRY</srcid><srcstatus/><internalId>1497</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_PDUR_ERRORS</srcid><srcstatus/><internalId>1498</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_ASC43_INTEGRATION</srcid><srcstatus/><internalId>1559</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1097</srcid><srcstatus/><internalId>994</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00072</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>373</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00073</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>For transmission of Authentic I-PDUs using transport protocol, the SecOC module
            shall copy the NPDUs addressed by SecOC_CopyTxData into the buffer of the transport protocol
            module. After each copy process, it returns from SecOC_CopyTxData.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_16_TP_TRUNCATE_AUTH</srcid><srcstatus/><internalId>1481</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_16_TP_GETTXFRESHNESS_NOT_OK</srcid><srcstatus/><internalId>1493</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED</srcid><srcstatus/><internalId>1495</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED_WRONGINPUT</srcid><srcstatus/><internalId>1496</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED_RETRY</srcid><srcstatus/><internalId>1497</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_933</srcid><srcstatus/><internalId>789</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00073</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>374</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>
      <specobject>
         <id>SecOC.ASR430.Tx.SWS_SecOC_00074</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>2</version>
         <description>
            For transmission of Authentic I-PDUs using transport protocol and when the lower
            layer either confirms the transmission of the Secured I-PDU or signals an error during
            transmission by calling SecOC_TpTxConfirmation, the SecOC module shall in
            turn pass the received result of the Authentic I-PDU by calling
            PduR_SecOCTpTxConfirmation.
         </description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_03_04_05_TP_VERF_COUNTERS</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED</srcid><srcstatus/><internalId>1495</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED_WRONGINPUT</srcid><srcstatus/><internalId>1496</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED_RETRY</srcid><srcstatus/><internalId>1497</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_PDUR_ERRORS</srcid><srcstatus/><internalId>1498</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1024</srcid><srcstatus/><internalId>794</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1031</srcid><srcstatus/><internalId>796</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1059</srcid><srcstatus/><internalId>797</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00074</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>375</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00075</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>For transmission of Authentic I-PDUs using transport protocol, the SecOC module
            shall free the buffer that contains the Secured I-PDU only, if SecOC_TpTxConfirmation is
            called for the Secured I-PDU.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1137</srcid><srcstatus/><internalId>999</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00075</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>376</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>84</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00076</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If the upper layer module requests a cancelation of an ongoing transmission of the Authentic I-PDU by calling SecOC_CancelTransmit, the SecOC module shall immediately inform the lower layer transport protocol module to cancel the ongoing transmission of the Secured I-PDU, stop all internal actions related to the Authentic I-PDU, and free all related buffers.</description>
         <!-- changed: Replaced SecOC_[If|Tp]CancelTransmit by SecOC_CancelTransmit -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_06_07_08_TP_CANCELTRANSMIT</srcid><srcstatus/><internalId>1484</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_567</srcid><srcstatus/><internalId>776</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00076</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>377</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>85</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00077</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>If the lower layer transport protocol module reports an error during transmission
            of a Secured I-PDU using the return value E_NOT_OK, the SecOC module shall not perform any
            error handling other than skipping the confirmation of the transmission request for the
            corresponding Authentic I-PDU to the upper layer module.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_06_07_08_TP_CANCELTRANSMIT</srcid><srcstatus/><internalId>1484</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_983</srcid><srcstatus/><internalId>791</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_998</srcid><srcstatus/><internalId>792</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1059</srcid><srcstatus/><internalId>797</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00077</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>378</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>86</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00151</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If the CSM module reports an error during authentication of an Authentic
            I-PDU (authentication attempt returns anything else than E_OK), the SecOC module shall not provide a
            Secured I-PDU to the lower layer. It shall keep that Authentic I-PDU (if not overwritten by
            an incoming Authentic I-PDU of the same type) to start the authentication with the next call
            of the scheduled main function until the number of additional authentication attempts for
            that Authentic I-PDU has reached SecOCAuthenticationRetries.(SRS_SecOC_00021)</description>
         <!-- changed: Replaced reports a recoverable error (example: E_BUSY, QUEUE_FULL) by returns anything else than E_OK -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_TP_MACGENERATESTATUS</srcid><srcstatus/><internalId>1252</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_11_TP_MACGENERATE_CSM_NOT_OK</srcid><srcstatus/><internalId>1491</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1293</srcid><srcstatus/><internalId>856</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00151</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>379</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>87</internalId></specobject>
      <!-- SecOC.ASR21-11.SWS_SecOC_00155; [approved not implemented yet] -->
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00108</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>If the SecOC module is not able to serve any upper layer or lower layer request
            during transmission of an Authentic I-PDU due to an arbitrary internal error, it shall
            return this request with E_NOT_OK.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_03_16_17_IF_TP_WRONGINPUT</srcid><srcstatus/><internalId>1494</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_474</srcid><srcstatus/><internalId>769</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00108</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>381</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>88</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00217</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>If the upper layer module requests a cancelation of an ongoing reception of the Authentic I-PDU by calling SecOC_TpCancelReceive, the SecOC module shall immediately inform the lower layer transport protocol module to cancel the ongoing reception of the Secured I-PDU, stop all internal actions related to the Authentic I- PDU, and free all related buffers.</description>
        <needscoverage>
          <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1054</srcid><srcstatus/><internalId>847</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1170</srcid><srcstatus/><internalId>851</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1333</srcid><srcstatus/><internalId>858</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1411</srcid><srcstatus/><internalId>862</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1561</srcid><srcstatus/><internalId>874</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1657</srcid><srcstatus/><internalId>882</internalId></linkedfrom></coveredby></needscov>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_AFTER_START_OF_RECEPTION</srcid><srcstatus/><internalId>1301</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_AFTER_COPY_RX_DATA</srcid><srcstatus/><internalId>1302</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_AFTER_RX_INDICATION</srcid><srcstatus/><internalId>1303</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_DURING_ASYNC_VERIF</srcid><srcstatus/><internalId>1304</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_AFTER_MAIN</srcid><srcstatus/><internalId>1305</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_DURING_VERIFICATION</srcid><srcstatus/><internalId>1306</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
          <provcov>
              <linksto>SecOC.ASR21-11.SWS_SecOC_00217</linksto>
              <dstversion>1</dstversion>
          <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>89</internalId></specobject>
      <!-- SecOC.ASR21-11.SWS_SecOC_00218; [approved not implemented yet] -->
      <!-- SecOC.ASR21-11.SWS_SecOC_00260; [approved not implemented yet] -->
      <!-- SecOC.ASR21-11.SWS_SecOC_00266; [approved not implemented yet] -->
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00214</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            In case the SecOCReceptionOverflowStrategy is set to REPLACE, the SecOC module shall
            free all buffer related to a Secured I-PDU if the reception of a Secured IPDU with
            the same Pdu Identifier has been initiated.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1115</srcid><srcstatus/><internalId>800</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1507</srcid><srcstatus/><internalId>818</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_RECSTRATEGY_REPLACE</srcid><srcstatus/><internalId>1292</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_09_IF_SECPDU</srcid><srcstatus/><internalId>1470</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_17_IF_SECPDUCOL</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_19_TP_SECPDUCOL</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_17_IF_SECPDUCOLWRONGCRYPTO</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_17_IF_SECPDUCOLWRONGAUTHENTIC</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_17_IF_SECPDUCOLWRONGCRYPTOANDAUTH</srcid><srcstatus/><internalId>1475</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00214</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>386</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>90</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00215</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            In case the SecOCReceptionOverflowStrategy is set to REJECT and SecOC is currently busy
            with the same Secured I-PDU, the SecOC module shall reject the request,
            in case of reception via SecOC_StartOfReception the request is rejected
            by returning BUFREQ_E_OVFL.
         </description>
         <!-- changed: Replaced BUFREQ_E_NOT_OK by BUFREQ_E_OVFL -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1115</srcid><srcstatus/><internalId>800</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1217</srcid><srcstatus/><internalId>804</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1507</srcid><srcstatus/><internalId>818</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_COPYERROR</srcid><srcstatus/><internalId>1285</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REJECT_09_IF_SECUREDPDU</srcid><srcstatus/><internalId>1467</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REJECT_17_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1468</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REJECT_19_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1469</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00215</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00204</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>SecOC shall provide separate buffers for the incoming Secured I-PDU, Cryptographic I-PDU and the resulting Authentic I-PDU.</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_17_IF_SECUREDPDUCOLLECTION_NOMESSAGE</srcid><srcstatus/><internalId>1307</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_18_IF_SECUREDPDUCOLLECTION_WITHMESSAGE</srcid><srcstatus/><internalId>1308</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_NOMESSAGE</srcid><srcstatus/><internalId>1309</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_WITHMESSAGE</srcid><srcstatus/><internalId>1310</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_WITHMESSAGE</srcid><srcstatus/><internalId>1311</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1312</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_ZEROPDULEN</srcid><srcstatus/><internalId>1313</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_SMALLERPDUSIZETHANCFGED</srcid><srcstatus/><internalId>1314</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_TPCOPYRXDATA_NOT_OK</srcid><srcstatus/><internalId>1315</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_17_IF_SECUREDPDUCOLLECTION_NOMESSAGE_VERIFYFAIL</srcid><srcstatus/><internalId>1316</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_21_IF_SECUREDPDUCOLLECTION_WRONGMESSAGE</srcid><srcstatus/><internalId>1317</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_23_IF_SECUREDPDUCOLLECTION_WRONGMESSAGE2</srcid><srcstatus/><internalId>1318</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_26_IF_SHAPE_NOMESSAGE</srcid><srcstatus/><internalId>1319</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_25_IF_SHAPE_WITHMESSAGE</srcid><srcstatus/><internalId>1320</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_WRONGMESSAGE3</srcid><srcstatus/><internalId>1321</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_STARTOFRECEPTION_NOT_OK</srcid><srcstatus/><internalId>1322</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_27_IF_SECUREDPDUCOLLECTION_SECUREDAREA</srcid><srcstatus/><internalId>1323</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/SecOC.xgen_186</srcid><srcstatus/><internalId>1198</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00204</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00216</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            In case the SecOCReceptionOverflowStrategy is set to QUEUE and SecOC is currently busy
            with the same Secured I-PDU, the SecOC module shall additionally receive the Secured I-PDU and
            queue them for a subsequent processing after the currently processed Secured I-PDU is finalized.
            In case the limit which is given by SecOCReceptionQueueSize is reach any further reception shall be rejected.
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1176</srcid><srcstatus/><internalId>802</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1307</srcid><srcstatus/><internalId>807</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1558</srcid><srcstatus/><internalId>819</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU</srcid><srcstatus/><internalId>1440</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_PDU_SIZE_ZERO</srcid><srcstatus/><internalId>1441</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_DYNAMICPDULENGTH_09_SECURED_PDU_IF_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1442</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_FULL</srcid><srcstatus/><internalId>1443</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_OVRFL</srcid><srcstatus/><internalId>1444</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_HALFQUE_OVRFL</srcid><srcstatus/><internalId>1445</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_FULL_EMPTY_HALF</srcid><srcstatus/><internalId>1446</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU</srcid><srcstatus/><internalId>1447</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_PARTIALCOPY</srcid><srcstatus/><internalId>1448</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_FULL</srcid><srcstatus/><internalId>1449</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_OVRFL</srcid><srcstatus/><internalId>1450</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_HALFQUE_OVRFL</srcid><srcstatus/><internalId>1451</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_FULL_EMPTY_HALF</srcid><srcstatus/><internalId>1452</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_REJECT_PDU_FROM_QUEUE</srcid><srcstatus/><internalId>1453</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_SMALL_PDU_SIZE</srcid><srcstatus/><internalId>1454</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_BIG_PDU_SIZE</srcid><srcstatus/><internalId>1455</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_FV_RET_VALUE_E_NOT_OK</srcid><srcstatus/><internalId>1456</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_CSM_RET_VALUE_E_NOT_OK</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_CSM_VER_RES_E_NOT_OK</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_CSM_CALLBACK_RET_VALUE_E_NOT_OK</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_FV_RET_VALUE_E_NOT_OK</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_CSM_RET_VALUE</srcid><srcstatus/><internalId>1461</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_CSM_VER_RES_E_NOT_OK</srcid><srcstatus/><internalId>1462</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_CSM_CALLBACK_RET_VALUE_E_NOT_OK</srcid><srcstatus/><internalId>1463</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_04_IF_SECUREDPDU_NO_METADATA</srcid><srcstatus/><internalId>1464</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_04_TP_SECUREDPDU_NO_METADATA</srcid><srcstatus/><internalId>1465</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_04_TP_SECUREDPDU_PARTIALCOPY_NO_METADATA</srcid><srcstatus/><internalId>1466</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00216</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00205</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>For each Secured I-PDU having SecOCRxSecuredPduCollection present in the corresponding SecOCRxSecuredPduLayer SecOC shall buffer only the last Authentic I-PDU and Cryptographic I-PDU it has received. If a buffer has already been filled with a previous I-PDU, the previous I-PDU is overwritten.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_NOMESSAGE</srcid><srcstatus/><internalId>1309</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_WITHMESSAGE</srcid><srcstatus/><internalId>1310</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_WITHMESSAGE</srcid><srcstatus/><internalId>1311</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1312</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_ZEROPDULEN</srcid><srcstatus/><internalId>1313</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_SMALLERPDUSIZETHANCFGED</srcid><srcstatus/><internalId>1314</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_TPCOPYRXDATA_NOT_OK</srcid><srcstatus/><internalId>1315</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_WRONGMESSAGE3</srcid><srcstatus/><internalId>1321</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_STARTOFRECEPTION_NOT_OK</srcid><srcstatus/><internalId>1322</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1320</srcid><srcstatus/><internalId>809</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1568</srcid><srcstatus/><internalId>820</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00205</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>390</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00206</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>SecOC shall construct the Secured I-PDU immediately after it has received both the respective Authentic I-PDU and Cryptographic I-PDU. If SecOC_VerifyStatusOverride is used, the verification result and I-PDU are handled according to overrideStatus value.</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_17_IF_SECUREDPDUCOLLECTION_NOMESSAGE</srcid><srcstatus/><internalId>1307</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_18_IF_SECUREDPDUCOLLECTION_WITHMESSAGE</srcid><srcstatus/><internalId>1308</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_NOMESSAGE</srcid><srcstatus/><internalId>1309</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_WITHMESSAGE</srcid><srcstatus/><internalId>1310</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_WITHMESSAGE</srcid><srcstatus/><internalId>1311</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1312</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_ZEROPDULEN</srcid><srcstatus/><internalId>1313</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_SMALLERPDUSIZETHANCFGED</srcid><srcstatus/><internalId>1314</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_TPCOPYRXDATA_NOT_OK</srcid><srcstatus/><internalId>1315</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_17_IF_SECUREDPDUCOLLECTION_NOMESSAGE_VERIFYFAIL</srcid><srcstatus/><internalId>1316</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_21_IF_SECUREDPDUCOLLECTION_WRONGMESSAGE</srcid><srcstatus/><internalId>1317</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_23_IF_SECUREDPDUCOLLECTION_WRONGMESSAGE2</srcid><srcstatus/><internalId>1318</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_26_IF_SHAPE_NOMESSAGE</srcid><srcstatus/><internalId>1319</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_25_IF_SHAPE_WITHMESSAGE</srcid><srcstatus/><internalId>1320</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_WRONGMESSAGE3</srcid><srcstatus/><internalId>1321</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_STARTOFRECEPTION_NOT_OK</srcid><srcstatus/><internalId>1322</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_27_IF_SECUREDPDUCOLLECTION_SECUREDAREA</srcid><srcstatus/><internalId>1323</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1954</srcid><srcstatus/><internalId>910</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00206</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>391</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00207</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            If the subsequent verification of the resulting Secured I-PDU is successful,
            then SecOC shall clear the buffers of both the Authentic and Cryptographic I-PDU.
         </description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_17_IF_SECUREDPDUCOLLECTION_NOMESSAGE</srcid><srcstatus/><internalId>1307</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_26_IF_SHAPE_NOMESSAGE</srcid><srcstatus/><internalId>1319</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_27_IF_SECUREDPDUCOLLECTION_SECUREDAREA</srcid><srcstatus/><internalId>1323</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1637</srcid><srcstatus/><internalId>880</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00207</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>392</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00257</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          For a Secured Rx I-PDU with SecOCAuthPduHeaderLength = 0 or not configured and DynamicLength
          of the referred global Pdu (see ECUC_EcuC_00078) is set to FALSE, the SecOC module shall
          extract the Authentic I-PDU by using the configured length of the corresponding global PDU.
        </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
        <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_IF_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1344</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_IF_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1345</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_TP_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1347</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_TP_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1348</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_IF_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1350</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_IF_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1351</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_TP_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1353</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_TP_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1354</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_IF_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1356</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_IF_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1357</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_TP_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1359</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_TP_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1360</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2312</srcid><srcstatus/><internalId>922</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00257</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>393</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00258</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          For a Secured Rx I-PDU with SecOCAuthPduHeaderLength = 0 or not configured and DynamicLength
          of the referred global Pdu (see ECUC_EcuC_00078) is set to TRUE, the SecOC module shall
          extract the Authentic I-PDU by using the length provided by the lower layer.
        </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
        <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1326</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1327</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1328</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_TP_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1329</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_TP_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1330</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_TP_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1331</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1332</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1333</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1334</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_TP_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1335</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_TP_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1336</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_TP_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1337</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_IF_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1338</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_IF_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1339</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_IF_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1340</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_TP_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1341</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_TP_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</srcid><srcstatus/><internalId>1342</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_TP_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1343</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2312</srcid><srcstatus/><internalId>922</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00258</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>394</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00259</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          For a Secured Rx I-PDU with SecOCAuthPduHeaderLength &gt; 0, the SecOC module shall
          extract the Authentic I-PDU using the length provided at runtime within the Secured I-PDU Header.
        </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
        <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_BIGGER_THAN_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1363</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_EQUALS_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1364</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH_RECV_LEN_EQUAL_CFG_LEN</srcid><srcstatus/><internalId>1365</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1366</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_04_PDU_AUTHENTIC_DATA_LENGTH_SMALLER_THAN_SECURED_AREA</srcid><srcstatus/><internalId>1367</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_BIGGER_THAN_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1369</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_EQUALS_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1370</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH_RECV_LEN_EQUAL_CFG_LEN</srcid><srcstatus/><internalId>1371</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1372</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_27_PDU_COL_PDU_AUTHENTIC_DATA_LENGTH_SMALLER_THAN_SECURED_AREA</srcid><srcstatus/><internalId>1373</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_PDU_LENGTH_SMALLER_THAN_MSG_LINK</srcid><srcstatus/><internalId>1374</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_HDR_VALUE_BIGGER_THAN_AUTHENTIC_DATA_LENGTH_MESSAGELINK</srcid><srcstatus/><internalId>1375</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH_MESSAGELINK</srcid><srcstatus/><internalId>1376</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_HDR_VALUE_EQUALS_AUTHENTIC_DATA_LENGTH_MESSAGELINK</srcid><srcstatus/><internalId>1377</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2306</srcid><srcstatus/><internalId>921</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00259</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>395</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00268</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          During reception of a static length (Secured / Authentic / Cryptographic) I-PDU,
          i.e. EcuC Parameter DynamicLength (ECUC_EcuC_00078) is set to FALSE, by means of
          a lower layer bus interface and when SecOC_RxIndication has been called, the SecOC module
          shall silently discard this I-PDU in case of the received length is smaller than the configured length.
        </description>
        <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_IF_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1346</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_TP_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1349</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_IF_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1352</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_TP_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1355</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_IF_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1358</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_TP_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1361</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1790</srcid><srcstatus/><internalId>824</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1832</srcid><srcstatus/><internalId>825</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1843</srcid><srcstatus/><internalId>826</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1876</srcid><srcstatus/><internalId>827</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1897</srcid><srcstatus/><internalId>828</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1907</srcid><srcstatus/><internalId>829</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00268</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>396</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00078</id>
         <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>During reception of a Secured I-PDU that is received by means of a lower layer
            bus interface and when SecOC_RxIndication has been called, the SecOC module shall copy the
            complete Secured I-PDU into its own buffer. Afterwards it returns
            fromSecOC_RxIndication.(SRS_SecOC_00010, SRS_SecOC_00010,
            SRS_SecOC_00012,SRS_SecOC_00013)</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_CSM</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_10_IF_FRESHNESS_ZERO_MAC_FAILS</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_13_IF_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_VER_RES_09_IF</srcid><srcstatus/><internalId>1384</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_CSMMODE_IF_09_10_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1562</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_DATAIDLEN32BITS_IF_09_10</srcid><srcstatus/><internalId>1563</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_09_IF</srcid><srcstatus/><internalId>1565</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1568</srcid><srcstatus/><internalId>820</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00078</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>397</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00079</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>During reception of a Secured I-PDU that is received by means of a lower layer
            bus interface, the SecOC module shall verify the Authenticator according to the overall
            approach specified in SWS_SecOC_00040. The verification shall be processed in the scheduled
            main function.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_CSM</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_CSMMODE_IF_09_10_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1562</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_DATAIDLEN32BITS_IF_09_10</srcid><srcstatus/><internalId>1563</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_09_IF</srcid><srcstatus/><internalId>1565</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1244</srcid><srcstatus/><internalId>853</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1266</srcid><srcstatus/><internalId>855</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00079</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>398</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00080</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>During reception of a Secured I-PDU that is received by means of a lower layer bus interface and if the verification eventually succeeds, the SecOC module shall call PduR_SecOCRxIndication|PduR_SecOCTpRxIndication referencing the Authentic I-PDU that is contained in the Secured I-PDU.</description>
         <!-- changed: Replaced PduR_SecOCIfRxIndication by PduR_SecOCRxIndication -->
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_IF_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1241</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_CSM</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_10_IF_FRESHNESS_ZERO_MAC_FAILS</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_13_IF_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_CSMMODE_IF_09_10_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1562</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_DATAIDLEN32BITS_IF_09_10</srcid><srcstatus/><internalId>1563</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_03_TP</srcid><srcstatus/><internalId>1564</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_09_IF</srcid><srcstatus/><internalId>1565</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1602</srcid><srcstatus/><internalId>876</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00080</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>399</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00081</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            During reception of a Secured I-PDU that is received by means of a lower layer bus
            interface and if the verification fails and the SecOCIgnoreVerificationResult is configured
            to TRUE, the SecOC module shall call PduR_SecOCRxIndication|PduR_SecOCTpRxIndication referencing the Authentic I-PDU
            that is contained in the Secured I-PDU.
         </description>
         <!-- changed: Replaced PduR_SecOCIfRxIndication by PduR_SecOCRxIndication -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_VER_RES_09_IF</srcid><srcstatus/><internalId>1384</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1463</srcid><srcstatus/><internalId>865</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1627</srcid><srcstatus/><internalId>879</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00081</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00082</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>During reception of a Secured I-PDU that is received by means of a lower layer transport protocol interface and when SecOC_StartOfReception is called, the SecOC module shall provide buffer capacities to store the complete Secured I-PDU. Further it shall forward the SecOC_StartOfReception call by calling PduR_SecOCStartOfReception in case SecOCPduType is configured to SECOC_TPPDU.</description>
         <needscoverage>
         <!-- changed: Replaced PduR_SecOCTpStartOfReception by PduR_SecOCStartOfReception -->
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_03_TP</srcid><srcstatus/><internalId>1564</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2003</srcid><srcstatus/><internalId>911</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00082</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>401</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00083</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>During reception of a Secured I-PDU that is received by means of a lower layer
            transport protocol interface and when SecOC_CopyRxData is called, the SecOC module shall
            copy the NPDUs addressed by SecOC_CopyRxData into its own buffers. Finally, it returns from
            SecOC_CopyRxData.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_03_TP</srcid><srcstatus/><internalId>1564</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1320</srcid><srcstatus/><internalId>809</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00083</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>402</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00084</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>During reception of a Secured I-PDU that is received by means of a lower layer
            transport protocol interface and when SecOC_TpRxIndication is called, the SecOC module shall
            returns SecOC_TpRxIndication without any further processing.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1361</srcid><srcstatus/><internalId>813</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00084</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>403</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00085</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>During reception of a Secured I-PDU that is received by means of a lower layer
            transport protocol interface and when SecOC_TpRxIndication has been called, the SecOC module
            shall verify the contents of the Secured I-PDU according to the process described in Section
            7.1.3.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_03_TP</srcid><srcstatus/><internalId>1564</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_951</srcid><srcstatus/><internalId>843</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00085</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>404</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00086</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            During reception of a Secured I-PDU that is received by means of a lower layer
            transport protocol interface and when the verification eventually succeeds, the SecOC module shall call
            PduR_SecOCRxIndication with references to the Authentic I-PDU contained in
            the Secured I-PDU in case SecOCPduType is configured to SECOC_IFPDU.
            In case SecOCPduType is configured to SECOC_TPPDU SecOC shall forward in
            advance all data to the upper layer by first calling PduR_SecOCTpCopyRxData and
            afterwards PduR_SecOCTpRxIndication with references to the Authentic I-PDU
            contained in the Secured I-PDU.
         </description>
         <!-- changed: Replaced PduR_SecOCIfRxIndication by PduR_SecOCRxIndication -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_ASC43_INTEGRATION</srcid><srcstatus/><internalId>1559</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_03_TP</srcid><srcstatus/><internalId>1564</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1603</srcid><srcstatus/><internalId>877</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00086</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>405</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00088</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            During reception of a Secured I-PDU that is received by means of a lower layer transport
            protocol interface and when the verification fails and the SecOCIgnoreVerificationResult
            is configured to TRUE, the SecOC module shall call PduR_SecOCRxIndication with references
            to the Authentic I-PDU contained in the Secured I-PDU in case SecOCPduType is configured
            to SECOC_IFPDU.
            In case SecOCPduType is configured to SECOC_TPPDU SecOC shall forward in advance all data
            to the upper layer by first calling PduR_SecOCTpCopyRxData and afterwards
            PduR_SecOCTpRxIndication with references to the Authentic I-PDU contained
            in the Secured I-PDU.
         </description>
         <!-- changed: Replaced PduR_SecOCIfRxIndication by PduR_SecOCRxIndication -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_IF_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1241</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_VER_RES_09_IF</srcid><srcstatus/><internalId>1384</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1604</srcid><srcstatus/><internalId>878</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00088</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00213</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>In case the SecOC frees buffers related to a Secured I-PDU (see SWS_SecOC_00087) and SecOCPduType is configured to SECOC_TPPDU the SecOC shall cancel the reception in the upper layer (negative PduR_SecOCTpRxIndication).</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1848</srcid><srcstatus/><internalId>903</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_SYNCATTEMPTS</srcid><srcstatus/><internalId>1280</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_TPERROR</srcid><srcstatus/><internalId>1283</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_FREEUSEDBUFFER</srcid><srcstatus/><internalId>1286</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_NOMESSAGE</srcid><srcstatus/><internalId>1309</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1312</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_ZEROPDULEN</srcid><srcstatus/><internalId>1313</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00213</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00087</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            The SecOC module shall free all buffer related to a Secured I-PDU either if
            1. it has passed the respective authenticated I-PDU to the PduR via PduR_SecOCRxIndication or PduR_SecOCTpRxIndication
            2. the verification of a Secured I-PDU eventually failed
            3. the transmission of a Secured I-PDU has been canceled by the upper or lower layer.
         </description>
          <!-- changed: Replaced PduR_SecOCIfRxIndication by PduR_SecOCRxIndication -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1454</srcid><srcstatus/><internalId>814</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1546</srcid><srcstatus/><internalId>872</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1645</srcid><srcstatus/><internalId>881</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1808</srcid><srcstatus/><internalId>900</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_FREEUSEDBUFFER</srcid><srcstatus/><internalId>1286</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00087</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>408</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>
      <!-- SecOC.ASR21-11.SWS_SecOC_00255; [approved not implemented yet] -->
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00265</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>For a Rx Secured I-PDU with SecOCSecuredRxPduVerification=false, the SecOC module shall extract the Authentic I-PDU without Authentication and pass it to the upper layer without Authentication..</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1017</srcid><srcstatus/><internalId>846</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_01_TP_SKIPMACVERIF</srcid><srcstatus/><internalId>1293</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00265</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>410</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>113</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00089</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>If the lower layer transport protocol module reports an error by returning something else than E_OK during reception of a Secured I-PDU using SecOC_TpRxIndication,the SecOC module shall drop the Secured I-PDU and free all corresponding buffers.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_TPERROR</srcid><srcstatus/><internalId>1283</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1454</srcid><srcstatus/><internalId>814</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00089</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>411</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>114</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00121</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            If the CSM module reports an error during verification (verification attempt returns E_NOT_OK) of a Secured I-PDU,
            the SecOC module shall not provide the AuthenticI-PDU.
            It shall keep the Secured I-PDU (if not overwritten by an incoming Secured IPDU of the same type),
            increment the counter for verification attempts and
            if it has not reached its limit SecOCFreshnessCounterSyncAttempts start the verification with the next call of the scheduled main function.
         </description>
          <!-- changed: Added increment the counter for verification attempts and if it has not reached its limit SecOCFreshnessCounterSyncAttempts -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_CSMRETVALNOTOK</srcid><srcstatus/><internalId>1288</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_CSMCALLBACKNOTOK</srcid><srcstatus/><internalId>1289</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_CSMRESULTNOTOK</srcid><srcstatus/><internalId>1290</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1930</srcid><srcstatus/><internalId>908</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2526</srcid><srcstatus/><internalId>935</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00121</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>115</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00208</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            If SecOC has received both an Authentic I-PDU and a Cryptographic PDU and the verification
            of the resulting Secured I-PDU fails, both the Authentic and Cryptographic I-PDU shall
            remain buffered and verification shall be reattempted each time new data
            for any of them is received.
         </description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_17_IF_SECUREDPDUCOLLECTION_NOMESSAGE_VERIFYFAIL</srcid><srcstatus/><internalId>1316</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_17_IF_SECPDUCOLWRONGCRYPTO</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_17_IF_SECPDUCOLWRONGAUTHENTIC</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_17_IF_SECPDUCOLWRONGCRYPTOANDAUTH</srcid><srcstatus/><internalId>1475</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1536</srcid><srcstatus/><internalId>871</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00208</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>413</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>116</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00109</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>If the SecOC module is not able to serve any upper layer or lower layer request
            during reception of A Secured I-PDU due to an arbitrary internal error, it shall return this
            request with E_NOT_OK.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_INTERNALERROR</srcid><srcstatus/><internalId>1281</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1102</srcid><srcstatus/><internalId>799</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1246</srcid><srcstatus/><internalId>806</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00109</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>414</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>117</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00263</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          For a Rx Secured I-PDU with SecOCAuthPduHeaderLength &gt; 0 and the length of Authentic I-PDU
          in the Header is longer than configured length (in case of dynamic length IPdus
          (containing a dynamical length signal), this value indicates the maximum data length) of the Authentic I-PDU,
          the SecOC module shall discard the I- PDU. In such case with SecOC_StartOfReception,
          BUFREQ_E_NOT_OK shall be returned (see SWS_COMTYPE_00012). Note: SecOC_RxIndication has no return value.
        </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp.</furtherinfo>
        <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_24_PDU_HDR_EQUALS_ZERO</srcid><srcstatus/><internalId>1362</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_BIGGER_THAN_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1363</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_EQUALS_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1364</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH_RECV_LEN_EQUAL_CFG_LEN</srcid><srcstatus/><internalId>1365</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1366</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_04_PDU_AUTHENTIC_DATA_LENGTH_SMALLER_THAN_SECURED_AREA</srcid><srcstatus/><internalId>1367</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_26_PDU_COL_HDR_EQUAL_ZERO</srcid><srcstatus/><internalId>1368</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_BIGGER_THAN_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1369</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_EQUALS_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1370</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH_RECV_LEN_EQUAL_CFG_LEN</srcid><srcstatus/><internalId>1371</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1372</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_27_PDU_COL_PDU_AUTHENTIC_DATA_LENGTH_SMALLER_THAN_SECURED_AREA</srcid><srcstatus/><internalId>1373</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_PDU_LENGTH_SMALLER_THAN_MSG_LINK</srcid><srcstatus/><internalId>1374</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_HDR_VALUE_BIGGER_THAN_AUTHENTIC_DATA_LENGTH_MESSAGELINK</srcid><srcstatus/><internalId>1375</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH_MESSAGELINK</srcid><srcstatus/><internalId>1376</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_HDR_VALUE_EQUALS_AUTHENTIC_DATA_LENGTH_MESSAGELINK</srcid><srcstatus/><internalId>1377</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2164</srcid><srcstatus/><internalId>913</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2218</srcid><srcstatus/><internalId>917</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00263</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>415</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>118</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00264</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          For a Rx Secured I-PDU with SecOCAuthPduHeaderLength &gt; 0, the SecOC module shall process
          Secured I-PDU Header, Authentic I-PDU (with the length specified by the Header),
          Freshness Value and Authenticator of the Rx Secured I- PDU.
          The rest of bytes in the Secured I-PDU shall be discarded.
        </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
        <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_24_PDU_HDR_EQUALS_ZERO</srcid><srcstatus/><internalId>1362</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_BIGGER_THAN_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1363</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_EQUALS_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1364</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH_RECV_LEN_EQUAL_CFG_LEN</srcid><srcstatus/><internalId>1365</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1366</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_04_PDU_AUTHENTIC_DATA_LENGTH_SMALLER_THAN_SECURED_AREA</srcid><srcstatus/><internalId>1367</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_26_PDU_COL_HDR_EQUAL_ZERO</srcid><srcstatus/><internalId>1368</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_BIGGER_THAN_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1369</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_EQUALS_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1370</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH_RECV_LEN_EQUAL_CFG_LEN</srcid><srcstatus/><internalId>1371</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH</srcid><srcstatus/><internalId>1372</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_27_PDU_COL_PDU_AUTHENTIC_DATA_LENGTH_SMALLER_THAN_SECURED_AREA</srcid><srcstatus/><internalId>1373</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_PDU_LENGTH_SMALLER_THAN_MSG_LINK</srcid><srcstatus/><internalId>1374</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_HDR_VALUE_BIGGER_THAN_AUTHENTIC_DATA_LENGTH_MESSAGELINK</srcid><srcstatus/><internalId>1375</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH_MESSAGELINK</srcid><srcstatus/><internalId>1376</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_HDR_VALUE_EQUALS_AUTHENTIC_DATA_LENGTH_MESSAGELINK</srcid><srcstatus/><internalId>1377</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2306</srcid><srcstatus/><internalId>921</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00264</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>119</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00267</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          If the upper layer transport protocol module reports BUFREQ_E_NOT_OK in a call to
          PduR_SecOCTpCopyRxData then SecOC shall immediately abort the reception via calling
          PduR_SecOCTpRxIndication with E_NOT_OK result, shall stop all internal actions related
          to the Secured I-PDU, and shall free all related buffers.
        </description>
        <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_TPCOPYRXDATA_NOT_OK</srcid><srcstatus/><internalId>1315</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1604</srcid><srcstatus/><internalId>878</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00267</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>120</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00276</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          SecOCTxPduProcessings shall be processed within the MainFunction,
          which is referenced via SecOCTxPduMainFunctionRef (see ECUC_SecOC_00111).
        </description>
        <needscoverage>
           <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_MULTIPLE_MAINFUNC_TX_NO_INIT</srcid><srcstatus/><internalId>1233</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_MULTIPLE_MAINFUNC_TX</srcid><srcstatus/><internalId>1235</internalId></linkedfrom></coveredby></needscov>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/SecOC_Tx_Cfg.c_386</srcid><srcstatus/><internalId>738</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
           <provcov>
              <linksto>SecOC.ASR21-11.SWS_SecOC_00276</linksto>
              <dstversion>1</dstversion>
           <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>418</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>121</internalId></specobject>
      <!-- SecOC.ASR21-11.SWS_SecOC_00273; [approved not implemented yet] -->
      <!-- SecOC.ASR21-11.SWS_SecOC_00274; [approved not implemented yet] -->
      <!-- SecOC.ASR21-11.SWS_SecOC_00275; [approved not implemented yet] -->
      <!-- SecOC.ASR21-11.SWS_SecOC_00101; [approved not implemented yet] -->
      <!-- SecOC.ASR21-11.SWS_SecOC_00114; [approved not implemented yet] -->
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00311</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
          If the parameter SecOCSecuredTxPduOffset or SecOCSecuredRxPduOffset is available,
          the applied Security Profile shall only consider the bytes starting with the configured offset.
        </description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1092</srcid><srcstatus/><internalId>849</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_636</srcid><srcstatus/><internalId>965</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_04_IF_SECUREDAREA</srcid><srcstatus/><internalId>1294</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_01_TP_SECUREDAREA</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_10_TP_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1477</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_PDULENGTHTYPE32BITS_01_TP</srcid><srcstatus/><internalId>1602</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
            <provcov>
              <linksto>SecOC.ASR21-11.SWS_SecOC_00311</linksto>
              <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>424</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>122</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00312</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
          If the parameter SecOCSecuredTxPduLength or SecOCSecuredRxPduLength is available,
          the applied Security Profile shall only consider the configured length.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1092</srcid><srcstatus/><internalId>849</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_636</srcid><srcstatus/><internalId>965</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_04_IF_SECUREDAREA</srcid><srcstatus/><internalId>1294</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_01_TP_SECUREDAREA</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_10_TP_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1477</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_PDULENGTHTYPE32BITS_01_TP</srcid><srcstatus/><internalId>1602</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
            <provcov>
              <linksto>SecOC.ASR21-11.SWS_SecOC_00312</linksto>
              <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>123</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00313</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If the sum of configured value of SecOCSecuredTxPduLength and SecOCSecuredTxPduOffset is longer than the PduInfoPtr-&gt;SduLength provided to SecOC_Transmit, this Pdu shall be discarded and E_NOT_OK shall be returned.</description>
         <!-- changed: Replaced 'SecOC_IfTransmit or SecOC_TpTransmit' by SecOC_Transmit -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_483</srcid><srcstatus/><internalId>770</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_01_TP_SECUREDAREA</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_10_TP_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1477</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_PDULENGTHTYPE32BITS_01_TP</srcid><srcstatus/><internalId>1602</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
              <linksto>SecOC.ASR21-11.SWS_SecOC_00313</linksto>
              <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>426</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>124</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00314</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>If the sum of configured value of SecOCSecuredRxPduLength and SecOCSecuredRxPduOffset are longer than the received Pdu length itself, this Pdu shall be discarded.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2168</srcid><srcstatus/><internalId>914</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2182</srcid><srcstatus/><internalId>915</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2226</srcid><srcstatus/><internalId>918</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2243</srcid><srcstatus/><internalId>919</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_04_IF_SECUREDAREA</srcid><srcstatus/><internalId>1294</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
              <linksto>SecOC.ASR21-11.SWS_SecOC_00314</linksto>
              <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>427</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>125</internalId></specobject>
      <!-- SecOC.ASR21-11.SWS_SecOC_00190; [approved not implemented yet] -->
      <!-- SecOC.ASR21-11.SWS_SecOC_00191; [approved not implemented yet] -->
      <!-- SecOC.ASR21-11.SWS_SecOC_00192; [approved not implemented yet] -->
      <!-- SecOC.ASR21-11.SWS_SecOC_00193; [approved not implemented yet] -->
      <!-- SecOC.ASR21-11.SWS_SecOC_00194; [approved not implemented yet] -->
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00103</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
           Module            | Header File        | Imported Type
          -------------------------------------------------------------------
           ComStack_Types    |  ComStack_Types.h  |  BufReq_ReturnType
                             |  ComStack_Types.h  |  PduIdType
                             |  ComStack_Types.h  |  PduInfoType
                             |  ComStack_Types.h  |  PduLengthType
                             |  ComStack_Types.h  |  RetryInfoType
                             |  ComStack_Types.h  |  TpDataStateType
          -------------------------------------------------------------------
           Csm               |  Rte_Csm_Type.h    |  Crypto_OperationModeType
                             |  Rte_Csm_Type.h    |  Crypto_VerifyResultType
          -------------------------------------------------------------------
           IdsM              |  IdsM_Types.h      |  IdsM_SecurityEventIdType
          -------------------------------------------------------------------
           Std               |  Std_Types.h       |  Std_ReturnType
                             |  Std_Types.h       |  Std_VersionInfoType
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_409</srcid><srcstatus/><internalId>767</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_841</srcid><srcstatus/><internalId>787</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1233</srcid><srcstatus/><internalId>805</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00103</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>126</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00104</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOC_ConfigType Kind Structure Elements implementation specific Type -- Comment The content of the configuration data structure is implementation specific. Description Configuration data structure of SecOC module Available via SecOC.h</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/SecOC.xgen_81</srcid><srcstatus/><internalId>1196</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_TYPES</srcid><srcstatus/><internalId>1220</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00104</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>434</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>127</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00162</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOC_StateType Kind Enumeration Range SECOC_UNINIT -- SecOC module is not initialized SECOC_INIT -- SecOC module is initialized Description States of the SecOC module Available via SecOC.h</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_13</srcid><srcstatus/><internalId>1166</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_159</srcid><srcstatus/><internalId>1167</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_370</srcid><srcstatus/><internalId>1175</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00162</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>435</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>128</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00106</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            Service name: SecOC_Init
            Syntax: void SecOC_Init( const SecOC_ConfigType* config )
            Service ID[hex]: 0x01
            Sync/Async: Synchronous
            Reentrancy: Non Reentrant
            Parameters (in): config Pointer to a selected configuration structure
            Parameters (inout): None
            Parameters (out): None
            Return value: None
            Description: Initializes the SecOC module. Successful initialization leads to state SecOC_INIT. In configurations, in which SecOC is assigned to more than one partition (i.e. SecOC_MainFunctions are mapped to partitions), SecOC may provide one init function per partition. The decision on whether a single SecOC_Init() function or one per partition is provided is implementation-specific. In case a given implementation provides one SecOC_Init() function per partition, it is up to the implementation to devise a naming pattern that prevents name clashes among the different SecOC_ Init() functions (e.g., by adding a suffix containing short name the EcucPartition. Available via SecOC.h
         </description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RX</srcid><srcstatus/><internalId>1208</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX</srcid><srcstatus/><internalId>1210</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_NOVERSIONINFOAPI_NOCRYPTOBITLEN</srcid><srcstatus/><internalId>1215</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_TX</srcid><srcstatus/><internalId>1221</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_150</srcid><srcstatus/><internalId>741</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_331</srcid><srcstatus/><internalId>760</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_384</srcid><srcstatus/><internalId>763</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00106</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>436</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>129</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00161</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Service Name SecOC_DeInit Syntax void SecOC_DeInit ( void ) Service ID [hex] 0x05 Sync/Async Synchronous Reentrancy Non Reentrant Parameters (in) None Parameters (inout) None Parameters (out) None Return value None Description This service stops the secure onboard communication. All buffered I-PDU are removed and have to be obtained again, if needed, after SecOC_Init has been called. By a call to SecOC_DeInit the AUTOSAR SecOC module is put into a not initialized state (SecOC_UNINIT). Available via SecOC.h</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RX</srcid><srcstatus/><internalId>1208</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX</srcid><srcstatus/><internalId>1210</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_NOVERSIONINFOAPI_NOCRYPTOBITLEN</srcid><srcstatus/><internalId>1215</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_TX</srcid><srcstatus/><internalId>1221</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_164</srcid><srcstatus/><internalId>742</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_390</srcid><srcstatus/><internalId>764</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_396</srcid><srcstatus/><internalId>765</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00161</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>130</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00157</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Within SecOC_DeInit the module shall clear all internal global variables and the buffers of the SecOC I-PDUs.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_399</srcid><srcstatus/><internalId>766</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CLEAR_BUFFERS_13_TP</srcid><srcstatus/><internalId>1231</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00157</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>438</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>131</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00107</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Service Name SecOC_GetVersionInfo Syntax void SecOC_GetVersionInfo ( Std_VersionInfoType* versioninfo ) Service ID [hex] 0x02 Sync/Async Synchronous Reentrancy Reentrant Parameters (in) None Parameters (inout) None Parameters (out) versioninfo Pointer to where to store the version information of this module. Return value None Description Returns the version information of this module. Available via SecOC.h</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RX</srcid><srcstatus/><internalId>1208</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX</srcid><srcstatus/><internalId>1210</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_TX</srcid><srcstatus/><internalId>1221</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_GETVERSIONINFO</srcid><srcstatus/><internalId>1483</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_181</srcid><srcstatus/><internalId>743</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_409</srcid><srcstatus/><internalId>767</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00107</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>132</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00112</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Service name: SecOC_Transmit
            Syntax: Std_ReturnType SecOC_Transmit( PduIdType Id, const PduInfoType* Info )
            Service ID[hex]: 0x49
            Sync/Async: Synchronous
            Reentrancy: Non Reentrant for the same PDU-ID.
                        Reentrant for different PDU-ID.
            Parameters (in): Id ID of the Authentic I-PDU to be transmitted
                             info A pointer to a structure with Authentic I-PDU related data that shall
                             be transmitted: data length and pointer to I-SDU buffer
            Parameters (inout): None
            Parameters (out):   None
            Return value:
            Std_ReturnType E_OK: request is accepted by the SecOC module; transmission is continued.
                           E_NOT_OK: Transmit request has not been accepted.
            Description: Requests transmission of a PDU.
         </description>
         <!-- changed: Replaced 'SecOC_IfTransmit' by SecOC_Transmit -->
         <!-- changed: Removed and pointer to Meta Data -->
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX</srcid><srcstatus/><internalId>1210</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_NOVERSIONINFOAPI_NOCRYPTOBITLEN</srcid><srcstatus/><internalId>1215</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_TX</srcid><srcstatus/><internalId>1221</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_TP_MACGENERATESTATUS</srcid><srcstatus/><internalId>1252</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_11_TP_MACGENERATE_CSM_NOT_OK</srcid><srcstatus/><internalId>1491</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_03_16_17_IF_TP_WRONGINPUT</srcid><srcstatus/><internalId>1494</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED</srcid><srcstatus/><internalId>1495</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED_WRONGINPUT</srcid><srcstatus/><internalId>1496</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED_RETRY</srcid><srcstatus/><internalId>1497</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_PDUR_ERRORS</srcid><srcstatus/><internalId>1498</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_WITHOUT_TX_PDU</srcid><srcstatus/><internalId>1616</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_367</srcid><srcstatus/><internalId>750</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_462</srcid><srcstatus/><internalId>768</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00112</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>440</internalId></provcov>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91008</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>133</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00113</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>Service Name SecOC_CancelTransmit Syntax Std_ReturnType SecOC_IfCancelTransmit ( PduIdType TxPduId ) Service ID [hex] 0x4a Sync/Async Synchronous Reentrancy Reentrant for different PduIds. Non reentrant for the same PduId. Parameters (in) TxPduId Identification of the PDU to be cancelled. Parameters (inout) None Parameters (out) None Return value Std_Return- Type E_OK: Cancellation was executed successfully by the destination module. E_NOT_OK: Cancellation was rejected by the destination module. Description Requests cancellation of an ongoing transmission of a PDU in a lower layer communication module. Available via SecOC.h</description>
         <!-- changed: Replaced 'SecOC_IfCancelTransmit' by SecOC_CancelTransmit -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX</srcid><srcstatus/><internalId>1210</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_NOVERSIONINFOAPI_NOCRYPTOBITLEN</srcid><srcstatus/><internalId>1215</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_TX</srcid><srcstatus/><internalId>1221</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_WITHOUT_TX_PDU</srcid><srcstatus/><internalId>1616</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_386</srcid><srcstatus/><internalId>751</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_556</srcid><srcstatus/><internalId>775</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00113</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>442</internalId></provcov>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91009</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>443</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>134</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_91010</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Service Name SecOC_TpCancelReceive Syntax Std_ReturnType SecOC_TpCancelReceive ( PduIdType RxPduId ) Service ID [hex] 0x4c Sync/Async Synchronous Reentrancy Non Reentrant Parameters (in) RxPduId Identification of the PDU to be cancelled. Parameters (inout) None Parameters (out) None Return value Std_Return- Type E_OK: Cancellation was executed successfully by the destination module. E_NOT_OK: Cancellation was rejected by the destination module. Description Requests cancellation of an ongoing reception of a PDU in a lower layer transport protocol module. Available via SecOC.h</description>
        <needscoverage>
          <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_331</srcid><srcstatus/><internalId>748</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_595</srcid><srcstatus/><internalId>777</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_617</srcid><srcstatus/><internalId>779</internalId></linkedfrom></coveredby></needscov>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX</srcid><srcstatus/><internalId>1210</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
          <provcov>
              <linksto>SecOC.ASR21-11.SWS_SecOC_91010</linksto>
              <dstversion>1</dstversion>
          <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>444</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>135</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00122</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          Service Name SecOC_VerifyStatusOverride
          Syntax Std_ReturnType SecOC_VerifyStatusOverride ( uint16 ValueID, SecOC_OverrideStatusType overrideStatus, uint8 numberOfMessagesToOverride )
          Service ID [hex] 0x0b
          Sync/Async Synchronous
          Reentrancy Non Reentrant for the same FreshnessValueID. Reentrant for different Freshness ValueIDs
          Parameters (in)
            ValueID If SecOCOverrideStatusWithDataId is configured to FALSE, ValueID is the ID of the Freshness Value used to control the verification behaviour of all assigned Secured I-PDUs according to the override Status.
                    If SecOCOverrideStatusWithDataId is configured to TRUE, ValueID is the DataID of a Secured I-PDU that shall be controlled by the overrideStatus.
            overrideStatus Defines whether verification is executed and whether the I-PDU is passed on, and for how long the override is active.
            numberOfMessagesToOverride Number of sequential verification to override when using a specific counter for authentication verification.
                                       This is only considered when OverrideStatus is equal to SECOC_OVERRIDE_DROP_UNTIL_ LIMIT, SECOC_OVERRIDE_SKIP_UNTIL_LIMIT or SECOC_ OVERRIDE_PASS_UNTIL_LIMIT.
          Parameters (inout) None
          Parameters (out) None
          Return value Std_ReturnType
            E_OK: request successful
            E_NOT_OK: request failed
          Description
            This service provides the ability to force specific behaviour of SecOc: accept or drop
            an I-PDU with or without performing the verification of authenticator or independent
            of the authenticator verification result, and to force a specific result for
            SecOC_ VerificationResultType allowing additional fault handling in the application.
            Option SECOC_OVERRIDE_PASS_UNTIL_NOTICE, SECOC_OVERRIDE_SKIP_UNTIL_ LIMIT, SECOC_OVERRIDE_PASS_UNTIL_LIMIT or SECOC_OVERRIDE_SKIP_ UNTIL_NOTICE are available only if SecOCEnableForcedPassOverride is set to TRUE. Available via SecOC.h
        </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
        <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_FAIL_NTIMES</srcid><srcstatus/><internalId>1242</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_PASS_NTIMES_VER_RESULT</srcid><srcstatus/><internalId>1243</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_PASS_NTIMES_RETVAL</srcid><srcstatus/><internalId>1244</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_PASS_NTIMES_CALLBACK_RESULT</srcid><srcstatus/><internalId>1245</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_24_IF_VERIFYSTATUSOVERRIDE_PASS_MULTIPDUS_SAMEFRESHID</srcid><srcstatus/><internalId>1246</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_SKIP_UNTIL_NOTICE_SECPDU</srcid><srcstatus/><internalId>1247</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_19_TP_VERIFYSTATUSOVERRIDE_SKIP_UNTIL_NOTICE_SECPDUCOL</srcid><srcstatus/><internalId>1248</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_CANCEL</srcid><srcstatus/><internalId>1249</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_WRONGINPUT</srcid><srcstatus/><internalId>1250</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_NO_INIT</srcid><srcstatus/><internalId>1385</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_DROP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1386</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_DROP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1387</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_DROP_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1388</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_SKIP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1389</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_17_IF_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1390</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_18_IF_SKIP_UNTIL_NOTICE_PDU_COL_MSG_LINK</srcid><srcstatus/><internalId>1391</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_17_TP_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1392</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_18_TP_SKIP_UNTIL_NOTICE_PDU_COL_MSG_LINK</srcid><srcstatus/><internalId>1393</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_SKIP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1394</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_17_IF_SKIP_UNTIL_LIMIT_PDU_COL</srcid><srcstatus/><internalId>1395</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_18_IF_SKIP_UNTIL_LIMIT_PDU_COL_MSG_LINK</srcid><srcstatus/><internalId>1396</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_17_TP_SKIP_UNTIL_LIMIT_PDU_COL</srcid><srcstatus/><internalId>1397</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_18_TP_SKIP_UNTIL_LIMIT_PDU_COL_MSG_LINK</srcid><srcstatus/><internalId>1398</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_SKIP_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1399</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_BUSY</srcid><srcstatus/><internalId>1400</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1401</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1402</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1403</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_NOTICE_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1404</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1405</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1406</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_LIMIT_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1407</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1408</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_INVALID_PARAM</srcid><srcstatus/><internalId>1409</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_NO_INIT</srcid><srcstatus/><internalId>1411</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1412</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1413</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1414</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1415</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_IF_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1416</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_TP_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1417</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1418</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_IF_SKIP_UNTIL_LIMIT_PDU_COL</srcid><srcstatus/><internalId>1419</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_TP_SKIP_UNTIL_LIMIT_PDU_COL</srcid><srcstatus/><internalId>1420</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1421</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_BUSY</srcid><srcstatus/><internalId>1422</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1423</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1424</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1425</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1426</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1427</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1428</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1429</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1430</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_INVALID_PARAM</srcid><srcstatus/><internalId>1431</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_198</srcid><srcstatus/><internalId>744</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_614</srcid><srcstatus/><internalId>839</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00122</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>445</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>136</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_91013</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Service Name SecOC_SendDefaultAuthenticationInformation Syntax Std_ReturnType SecOC_SendDefaultAuthenticationInformation ( uint16 FreshnessValueID, boolean sendDefaultAuthenticationInformation ) Service ID [hex] 0x04 Sync/Async Synchronous Reentrancy Non Reentrant for the same FreshnessValueID. Reentrant for different Freshness ValueIDs Parameters (in) FreshnessValueID ID of the Freshness Value for which sending SecOCDefault AuthenticationInformationPattern should be enabled. sendDefault Authentication Information FALSE - sending SecOCDefaultAuthenticationInformation Pattern shall be disabled for given FreshnessValueID TRUE - sending SecOCDefaultAuthenticationInformationPattern shall be enabled for given FreshnessValueID Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: request successful E_NOT_OK: request failed Description The service provides the ability to enable the sending of un-authenticated PDU to lower layer. (example: in case authentication build counter has reached the configuration value SecOCAuthenticationBuildAttempts or the query of the freshness function returns E_NOT_OK or the calculation of the authenticator has returned a non-recoverable error such as returning E_NOT_OK or KEY_FAILURE). This service is optional (the service is available only if SecOCDefaultAuthenticationInformation Pattern is configured). If the service is not available or the service is available but the service was called with sendDefaultAuthenticationInformation as FALSE for a given FreshnessValueID , SecOC module shall remove the Authentic I-PDU from its internal buffer and cancel the transmission request in case the building of authentication Information failed. If the service is available and the service was called with sendDefaultAuthenticationInformation as TRUE for a given FreshnessValueID , SecOc will use SecOCDefaultAuthenticationInformationPattern as authentication Information and will not cancel the transmission request. Available via SecOC.h</description>
        <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_16_TP_DEFAULTAUTH_NO_INIT</srcid><srcstatus/><internalId>1486</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_16_TP_DEFAULTAUTH_INVALID_FVM_ID</srcid><srcstatus/><internalId>1487</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_16_TP_DEFAULTAUTH_FVM_NOT_OK</srcid><srcstatus/><internalId>1488</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_16_TP_DEFAULTAUTH_CSM_NOT_OK</srcid><srcstatus/><internalId>1489</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_16_TP_DEFAULTAUTH_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1490</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_18_IF_SECUREDPDUCOLLECTION_DEFAULTAUTH_FVM_NOT_OK</srcid><srcstatus/><internalId>1505</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_18_IF_SECUREDPDUCOLLECTION_DEFAULTAUTH_CSM_NOT_OK</srcid><srcstatus/><internalId>1506</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_16_18_IF_TP_SECUREDPDUCOLLECTION_DEFAULTAUTH_FVM_NOT_OK</srcid><srcstatus/><internalId>1507</internalId></linkedfrom></coveredby></needscov>
          <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_563</srcid><srcstatus/><internalId>756</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_490</srcid><srcstatus/><internalId>961</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
          <provcov>
              <linksto>SecOC.ASR21-11.SWS_SecOC_91013</linksto>
              <dstversion>1</dstversion>
          <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>446</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>137</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00124</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Service Name SecOC_RxIndication
            Syntax void SecOC_RxIndication ( PduIdType RxPduId, const PduInfoType* PduInfoPtr )
            Service ID [hex] 0x42
            Sync/Async Synchronous
            Reentrancy Reentrant for different PduIds.
            Non reentrant for the same PduId.
            Parameters (in) RxPdu Id ID of the received PDU.
                            Pdu InfoPtr Contains the length (SduLength) of the received PDU, a pointer to a buffer (SduDataPtr) containing the PDU.
            Parameters (inout) None
            Parameters (out) None
            Return value None
            Description Indication of a received PDU from a lower layer communication interface module.
            Available via SecOC.h</description>
         <!-- changed: Removed and the MetaData related to this PDU -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RX</srcid><srcstatus/><internalId>1208</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX</srcid><srcstatus/><internalId>1210</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_NOVERSIONINFOAPI_NOCRYPTOBITLEN</srcid><srcstatus/><internalId>1215</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_WITHOUT_RX_PDU</srcid><srcstatus/><internalId>1615</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_348</srcid><srcstatus/><internalId>749</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1481</srcid><srcstatus/><internalId>817</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00124</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>447</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>138</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00125</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Service Name SecOC_TpRxIndication Syntax void SecOC_TpRxIndication ( PduIdType id, Std_ReturnType result ) Service ID [hex] 0x45 Sync/Async Synchronous Reentrancy Reentrant Parameters (in) id Identification of the received I-PDU. result E_OK: The PDU was received. E_NOT_OK: Reception of the PDU failed. Parameters (inout) None Parameters (out) None Return value None Description Called after an I-PDU has been received via the TP API, the result indicates whether the transmission was successful or not. Available via SecOC.h</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RX</srcid><srcstatus/><internalId>1208</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX</srcid><srcstatus/><internalId>1210</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_NOVERSIONINFOAPI_NOCRYPTOBITLEN</srcid><srcstatus/><internalId>1215</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_311</srcid><srcstatus/><internalId>747</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1352</srcid><srcstatus/><internalId>812</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00125</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>448</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>139</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00126</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Service name: SecOC_TxConfirmation
            Syntax: void SecOC_TxConfirmation(PduIdType TxPduId)
            Service ID[hex]: 0x40
            Sync/Async: Synchronous
            Reentrancy: Reentrant for different PduIds. Non reentrant for the same PduId.
            Parameters (in): TxPduId ID of the I-PDU that has been transmitted.
            Parameters (inout): None
            Parameters (out): None
            Return value: None
            Description: The lower layer communication interface module confirms the transmission of an I PDU.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX</srcid><srcstatus/><internalId>1210</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_NOVERSIONINFOAPI_NOCRYPTOBITLEN</srcid><srcstatus/><internalId>1215</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_TX</srcid><srcstatus/><internalId>1221</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_WITHOUT_TX_PDU</srcid><srcstatus/><internalId>1616</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_497</srcid><srcstatus/><internalId>755</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_724</srcid><srcstatus/><internalId>783</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00126</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>449</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>140</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00152</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Service Name SecOC_TpTxConfirmation Syntax void SecOC_TpTxConfirmation ( PduIdType id, Std_ReturnType result ) Service ID [hex] 0x48 Sync/Async Synchronous Reentrancy Reentrant Parameters (in) id Identification of the transmitted I-PDU. result E_OK: The PDU was transmitted. E_NOT_OK: Transmission of the PDU failed. Parameters (inout) None Parameters (out) None Return value None Description This function is called after the I-PDU has been transmitted on its network, the result indicates whether the transmission was successful or not. Available via SecOC.h</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_TX</srcid><srcstatus/><internalId>1221</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_460</srcid><srcstatus/><internalId>753</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_959</srcid><srcstatus/><internalId>790</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00152</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>450</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>141</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00127</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Service Name SecOC_TriggerTransmit Syntax Std_ReturnType SecOC_TriggerTransmit ( PduIdType TxPduId, PduInfoType* PduInfoPtr ) Service ID [hex] 0x41 Sync/Async Synchronous Reentrancy Reentrant for different PduIds. Non reentrant for the same PduId. Parameters (in) TxPduId ID of the SDU that is requested to be transmitted. Parameters (inout) PduInfoPtr Contains a pointer to a buffer (SduDataPtr) to where the SDU data shall be copied, and the available buffer size in SduLengh. On return, the service will indicate the length of the copied SDU data in SduLength. Parameters (out) None Return value Std_- Return- Type E_OK: SDU has been copied and SduLength indicates the number of copied bytes. E_NOT_OK: No SDU data has been copied. PduInfoPtr must not be used since it may contain a NULL pointer or point to invalid data. Description Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr-&gt;SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr-&gt;SduDataPtr and update the length of the actual copied data in PduInfoPtr-&gt;SduLength. If not, it returns E_ NOT_OK without changing PduInfoPtr. Available via SecOC.h</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_03_16_17_IF_TP_WRONGINPUT</srcid><srcstatus/><internalId>1494</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_WITHOUT_TX_PDU</srcid><srcstatus/><internalId>1616</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_477</srcid><srcstatus/><internalId>754</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_639</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00127</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>142</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00128</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Service Name SecOC_CopyRxData Syntax BufReq_ReturnType SecOC_CopyRxData ( PduIdType id, const PduInfoType* info, PduLengthType* bufferSizePtr ) Service ID [hex] 0x44 Sync/Async Synchronous Reentrancy Reentrant Parameters (in) id Identification of the received I-PDU. info Provides the source buffer (SduDataPtr) and the number of bytes to be copied (SduLength). An SduLength of 0 can be used to query the current amount of available buffer in the upper layer module. In this case, the SduDataPtr may be a NULL_PTR. Parameters (inout) None Parameters (out) bufferSize Ptr Available receive buffer after data has been copied. Return value BufReq_- Return- Type BUFREQ_OK: Data copied successfully BUFREQ_E_NOT_OK: Data was not copied because an error occurred. Description This function is called to provide the received data of an I-PDU segment (N-PDU) to the upper layer. Each call to this function provides the next part of the I-PDU data. The size of the remaining buffer is written to the position indicated by bufferSizePtr. Available via SecOC.h</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RX</srcid><srcstatus/><internalId>1208</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX</srcid><srcstatus/><internalId>1210</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_NOVERSIONINFOAPI_NOCRYPTOBITLEN</srcid><srcstatus/><internalId>1215</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_COPYERROR</srcid><srcstatus/><internalId>1285</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_286</srcid><srcstatus/><internalId>746</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1233</srcid><srcstatus/><internalId>805</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1317</srcid><srcstatus/><internalId>808</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1338</srcid><srcstatus/><internalId>811</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00128</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>452</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>143</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00129</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Service Name SecOC_CopyTxData Syntax BufReq_ReturnType SecOC_CopyTxData ( PduIdType id, const PduInfoType* info, const RetryInfoType* retry, PduLengthType* availableDataPtr ) Service ID [hex] 0x43 Sync/Async Synchronous Reentrancy Reentrant Parameters (in) id Identification of the transmitted I-PDU. info Provides the destination buffer (SduDataPtr) and the number of bytes to be copied (SduLength). If not enough transmit data is available, no data is copied by the upper layer module and BUFREQ_E_BUSY is returned. The lower layer module may retry the call. An SduLength of 0 can be used to indicate state changes in the retry parameter or to query the current amount of available data in the upper layer module. In this case, the SduDataPtr may be a NULL_PTR. retry This parameter is used to acknowledge transmitted data or to retransmit data after transmission problems. If the retry parameter is a NULL_PTR, it indicates that the transmit data can be removed from the buffer immediately after it has been copied. Otherwise, the retry parameter must point to a valid RetryInfoType element. If TpDataState indicates TP_CONFPENDING, the previously copied data must remain in the TP buffer to be available for error recovery. TP_ DATACONF indicates that all data that has been copied before this call is confirmed and can be removed from the TP buffer. Data copied by this API call is excluded and will be confirmed later. TP_DATARETRY indicates that this API call shall copy previously copied data in order to recover from an error. In this case TxTpDataCnt specifies the offset in bytes from the current data copy position. Parameters (inout) None Parameters available Indicates the remaining number of bytes that are available in the upper (out) DataPtr layer module's Tx buffer. availableDataPtr can be used by TP modules that support dynamic payload lengths (e.g. FrIsoTp) to determine the size of the following CFs. Return value BufReq_- Return- Type BUFREQ_OK: Data has been copied to the transmit buffer completely as requested. BUFREQ_E_BUSY: Request could not be fulfilled, because the required amount of Tx data is not available. The lower layer module may retry this call later on. No data has been copied. BUFREQ_E_NOT_OK: Data has not been copied. Request failed. Description This function is called to acquire the transmit data of an I-PDU segment (N-PDU). Each call to this function provides the next part of the I-PDU data unless retry-&gt;Tp DataState is TP_DATARETRY. In this case the function restarts to copy the data beginning at the offset from the current position indicated by retry-&gt;TxTpDataCnt. The size of the remaining data is written to the position indicated by availableDataPtr. Available via SecOC.h</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_TX</srcid><srcstatus/><internalId>1221</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED</srcid><srcstatus/><internalId>1495</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED_WRONGINPUT</srcid><srcstatus/><internalId>1496</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED_RETRY</srcid><srcstatus/><internalId>1497</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_405</srcid><srcstatus/><internalId>752</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_841</srcid><srcstatus/><internalId>787</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_926</srcid><srcstatus/><internalId>788</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_933</srcid><srcstatus/><internalId>789</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00129</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>453</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>144</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00130</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>SecOc_StartOfReception Service name: SecOC_StartOfReception Syntax:
            BufReq_ReturnType SecOC_StartOfReception( PduIdType id, const PduInfoType* info,
            PduLengthType TpSduLength, PduLengthType* bufferSizePtr ) Service ID[hex]: 0x46 Sync/Async:
            Synchronous Reentrancy: Reentrant id Identification of the I-PDU. info Pointer to a
            PduInfoType structure containing the payload data (without protocol information) and payload
            length of the first frame or single frame of a transport protocol I-PDU Parameters (in):
            reception. Depending on the global parameter MetaDataLength, additional bytes containing
            MetaData (e.g. the CAN ID) are appended after the payload data, increasing the length
            accordingly. If neither first/single frame data nor TpSduLength Total length of the N-SDU to
            be received. Parameters None (inout): bufferSizePtr Available receive buffer in the
            receiving module. This Parameters (out): parameter will be used to compute the Block Size
            (BS) in the transport protocol module. BufReq_ReturnType BUFREQ_OK: Connection has been
            accepted. bufferSizePtr indicates the available receive buffer; reception is continued. If
            no buffer of the requested size is available, a receive buffer size of 0 shall be indicated
            by bufferSizePtr. Return value: BUFREQ_E_NOT_OK: Connection has been rejected; reception is
            aborted. bufferSizePtr remains unchanged. BUFREQ_E_OVFL: No buffer of the required length
            can be provided; reception is aborted. bufferSizePtr remains unchanged. Description: This
            function is called at the start of receiving an N-SDU. The N-SDU might be fragmented into
            multiple N-PDUs (FF with one or more following CFs) or might consist of a single N-PDU (SF).
            (SRS_SecOC_00012)</description>
         <!-- changed: Added Depending on the global parameter MetaDataLength, additional bytes containing
                       MetaData (e.g. the CAN ID) are appended after the payload data, increasing the length
                       accordingly -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RX</srcid><srcstatus/><internalId>1208</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX</srcid><srcstatus/><internalId>1210</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_NOVERSIONINFOAPI_NOCRYPTOBITLEN</srcid><srcstatus/><internalId>1215</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_COPYERROR</srcid><srcstatus/><internalId>1285</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_256</srcid><srcstatus/><internalId>745</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1090</srcid><srcstatus/><internalId>798</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00130</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>145</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00181</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>In case SecOC_StartOfReception is called with TpSduLengthequal to 0, the SecOC module shall return BUFREQ_E_NOT_OK and no further action shall be taken.</description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1127</srcid><srcstatus/><internalId>801</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00181</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>455</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>146</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00012</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>If the SecOC module uses the Csm module asynchronously to calculate or verify the authenticator, SecOC shall provide adequate callback functions for every CsmJob to get notification about the result of the asynchronous job.</description>
         <comment>
            Incorporated Bugzilla RfC 76940.
         </comment>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/SecOC_Rx_Cfg.c_526</srcid><srcstatus/><internalId>737</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/src/SecOC_Tx_Cfg.c_395</srcid><srcstatus/><internalId>739</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_01_TP_SECUREDAREA</srcid><srcstatus/><internalId>1476</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00012</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>456</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>147</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_91006</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If SecOCQueryFreshnessValue = CFUNC and SecOCUseAuthDataFreshness = TRUE for a
            PDU configuration and freshness value length is not equal to 0, SecOC queries a function
            with the following signature, to get the current freshness for RX messages,
            where &amp;lt;SecOCFreshnessValueFuncName&amp;gt; is the name of
            the function configured by SecOCFreshnessValueFuncName.
            Service name: &amp;lt;SecOCFreshnessValueFuncName&amp;gt;
            Syntax: Std_ReturnType &amp;lt;SecOCFreshnessValueFuncNames&amp;gt;
              (
              uint16 SecOCFreshnessValueID,
              const uint8 *SecOCTruncatedFreshnessValue,
              uint32 SecOCTruncatedFreshnessValueLength,
              const uint8 *SecOCAuthDataFreshnessValue,
              uint16 SecOCAuthDataFreshnessValueLength,
              uint16 SecOCAuthVerifyAttempts,
              uint8 *SecOCFreshnessValue,
              uint32 SecOCFreshnessValueLength,
              )
            Sync/Async: Synchronous
            Reentrancy:  Reentrant
            Parameters (in):
              SecOCFreshnessValueID              Holds the identifier of the freshness value.
              SecOCTruncatedFreshnessValue       Holds the truncated freshness value that was contained in the Secured I-PDU.
              SecOCTruncatedFreshnessValueLength Holds the length in bits of the truncated freshness value.
              SecOCAuthDataFreshnessValue        The parameter holds a part of the received, not yet authenticated PDU.
              SecOCAuthDataFreshnessValueLength  This is the length value in bits that holds the freshness from the authentic PDU.
              SecOCAuthVerifyAttempts            Holds the number of authentication verify attempts of this PDU since the last reception. The value is 0 for the first attempt and incremented on every unsuccessful verification attempt.
              SecOCFreshnessValueLength          Holds the length in bits of the freshness value.
            Parameters (inout): none
            Parameters (out):  SecOCFreshnessValue  Holds the freshness value to be used for the calculation of the authenticator.
            Return value:  Std_ReturnType
             E_OK: request successful
             E_NOT_OK: request failed, a freshness value cannot be provided due to general issues for freshness or this FreshnessValueId.
             E_BUSY: The freshness information can temporarily not be provided.
            Description:  This interface is used by the SecOC to obtain the current freshness value.
         </description>
         <!-- changed: the service name is changed from SecOC_GetRxFreshnessAuthData to &amp;lt;SecOCFreshnessValueFuncNames&amp;gt -->
         <comment>
            The length parameter for the freshness values is changed from inout to in , because the length is configurable and therefore constant.
         </comment>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Rx_Cfg.h_409</srcid><srcstatus/><internalId>725</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_05_IF_FRESHNESS_AUTHDATA</srcid><srcstatus/><internalId>1299</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_06_TP_FRESHNESS_AUTHDATA</srcid><srcstatus/><internalId>1300</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00249</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91006</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>458</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>148</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00110</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          Name SecOCRxPduMainFunctionRef
          Parent Container SecOCRxPduProcessing
          Description Reference to the SecOC_MainFunctionRx this PDU belongs to. Mandatory, if multiple main functions are defined.
          Multiplicity 0..1
          Type Reference to [ SecOCMainFunctionRx ]
          Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time --
          Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time --
          Scope / Dependency scope: local
        </description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1118</srcid><srcstatus/><internalId>1064</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_4280</srcid><srcstatus/><internalId>1157</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
            <provcov>
              <linksto>SecOC.ASR21-11.ECUC_SecOC_00110</linksto>
              <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>462</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>149</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00111</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          Name SecOCTxPduMainFunctionRef
          Parent Container SecOCTxPduProcessing
          Description Reference to the SecOC_MainFunctionTx this PDU belongs to. Mandatory, if multiple main functions are defined.
          Multiplicity 0..1 Type Reference to [ SecOCMainFunctionTx ]
          Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time --
          Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time --
          Scope / Dependency scope: local
        </description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2793</srcid><srcstatus/><internalId>1114</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_4365</srcid><srcstatus/><internalId>1161</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
            <provcov>
              <linksto>SecOC.ASR21-11.ECUC_SecOC_00111</linksto>
              <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>463</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>150</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00171</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Service Name SecOC_MainFunctionRx Syntax void SecOC_MainFunctionRx ( void ) Service ID [hex] 0x06 Description This function performs the processing of the SecOC module's authentication and verification processing for the Rx path. Per configured SecOCMainFunctionRx instance one SecOC_MainFunctionRx_&lt;shortName&gt; shall be implemented. Hereby &lt;shortName&gt; is the short name of the SecOCMainFunctionRx configuration container in the ECU configuration. Available via SchM_SecOC.h</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_RXTX_MultipleMainFunc</srcid><srcstatus/><internalId>1212</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_RXTX_MultipleMainFuncBswmd</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_RXTX_MultipleMainFunc_RTE</srcid><srcstatus/><internalId>1214</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_MULTIPLE_MAINFUNC_RX_NO_INIT</srcid><srcstatus/><internalId>1232</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_MULTIPLE_MAINFUNC_RX</srcid><srcstatus/><internalId>1234</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_MULTIPLE_MAINFUNC_RX_OVERRIDE</srcid><srcstatus/><internalId>1236</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_MULTIPLE_MAINFUNC_RTE</srcid><srcstatus/><internalId>1237</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_544</srcid><srcstatus/><internalId>833</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00171</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>464</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>151</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00172</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            If the SecOC module was not previously initialized with a call to SecOC_Init,
            then a call to SecOC_MainFunctionRx shall simply return.
         </description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_SECOC_MAINFUNCTIONRX</srcid><srcstatus/><internalId>1239</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_NOINIT</srcid><srcstatus/><internalId>1284</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_551</srcid><srcstatus/><internalId>834</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00172</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>152</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00173</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            The cycle time of the SecOC_MainFunctionRx is configured by the parameter
            SecOCMainFunctionPeriodRx.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_Bswmd.arxml.m4_154</srcid><srcstatus/><internalId>1164</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00173</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00174</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            If SecOC_MainFunctionRx is scheduled, the SecOC shall firstly check if there
            are new Secured I-PDUs to be verified. If yes the SecOC module shall process
            the verification of each of the IPDUs identified as new subsequently
            in the very same main function call.
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_557</srcid><srcstatus/><internalId>835</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_CSM</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_10_IF_FRESHNESS_ZERO_MAC_FAILS</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_UNIQUEMAC</srcid><srcstatus/><internalId>1279</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_SYNCATTEMPTS</srcid><srcstatus/><internalId>1280</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_INTERNALERROR</srcid><srcstatus/><internalId>1281</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_11_IF_TP_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1282</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_TPERROR</srcid><srcstatus/><internalId>1283</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_NOINIT</srcid><srcstatus/><internalId>1284</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_COPYERROR</srcid><srcstatus/><internalId>1285</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_FREEUSEDBUFFER</srcid><srcstatus/><internalId>1286</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_CSMRETVALNOTOK</srcid><srcstatus/><internalId>1288</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_CSMCALLBACKNOTOK</srcid><srcstatus/><internalId>1289</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_CSMRESULTNOTOK</srcid><srcstatus/><internalId>1290</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_SECOCBUSY</srcid><srcstatus/><internalId>1291</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_01_TP_SKIPMACVERIF</srcid><srcstatus/><internalId>1293</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_13_IF_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_RECEPTIONVERIFYFAILURE</srcid><srcstatus/><internalId>1297</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_VER_RES_09_IF</srcid><srcstatus/><internalId>1384</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_03_TP</srcid><srcstatus/><internalId>1564</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_09_IF</srcid><srcstatus/><internalId>1565</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00174</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>467</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00175</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            For each newly successfully verified Secured I-PDU, the SecOC module shall
            immediately pass the Authentic I-PDU to the upper layer communication module by
            calling PduR_SecOC[Tp]RxIndication for the Authentic I-PDU. (SRS_SecOC_00025)
         </description>
         <!-- changed: Replaced 'PduR_SecOC[If|Tp]RxIndication' by PduR_SecOC[Tp]RxIndication -->
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1603</srcid><srcstatus/><internalId>877</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_CSM</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_10_IF_FRESHNESS_ZERO_MAC_FAILS</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_CSMRETVALNOTOK</srcid><srcstatus/><internalId>1288</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_CSMCALLBACKNOTOK</srcid><srcstatus/><internalId>1289</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_CSMRESULTNOTOK</srcid><srcstatus/><internalId>1290</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_13_IF_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_CSMMODE_IF_09_10_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1562</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_DATAIDLEN32BITS_IF_09_10</srcid><srcstatus/><internalId>1563</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_03_TP</srcid><srcstatus/><internalId>1564</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_09_IF</srcid><srcstatus/><internalId>1565</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00175</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00176</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Service Name SecOC_MainFunctionTx Syntax void SecOC_MainFunctionTx ( void ) Service ID [hex] 0x03 Description This function performs the processing of the SecOC module's authentication and verification processing for the Tx path. Per configured SecOCMainFunctionTx instance one SecOC_MainFunctionTx_&lt;shortName&gt; shall be implemented. Hereby &lt;shortName&gt; is the short name of the SecOCMainFunctionTx configuration container in the ECU configuration. Available via SchM_SecOC.h</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_RXTX_MultipleMainFunc</srcid><srcstatus/><internalId>1212</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_RXTX_MultipleMainFuncBswmd</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_RXTX_MultipleMainFunc_RTE</srcid><srcstatus/><internalId>1214</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_MULTIPLE_MAINFUNC_TX_NO_INIT</srcid><srcstatus/><internalId>1233</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_MULTIPLE_MAINFUNC_TX</srcid><srcstatus/><internalId>1235</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_415</srcid><srcstatus/><internalId>955</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00176</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>469</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00177</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            If the SecOC module was not previously initialized with a call to SecOC_Init,
            then a call to SecOC_MainFunctionTx shall simply return.
         </description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_SECOC_MAINFUNCTIONTX</srcid><srcstatus/><internalId>1240</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_422</srcid><srcstatus/><internalId>956</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00177</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>157</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00178</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            The cycle time of the SecOC_MainFunctionTx is configured by the parameter
            SecOCMainFunctionPeriodTx.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_Bswmd.arxml.m4_162</srcid><srcstatus/><internalId>1165</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00178</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>471</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>158</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00179</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            If SecOC_MainFunctionTx is scheduled, the SecOC shall firstly check if there are
            new Authentic I-PDUs to be authenticated. If yes the SecOC module shall process
            the authentication of each of the IPDUs identified as new subsequently in the very
            same main function call.
         </description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_09_16_IF_TP_INDEPENDENT_FRESHNESS</srcid><srcstatus/><internalId>1482</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_428</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00179</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>159</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00180</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            For each newly authenticated Authentic I-PDU, the SecOC module shall immediately
            trigger the transmission of the Secured I-PDU at the lower layer module by calling the
            PduR.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1097</srcid><srcstatus/><internalId>994</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_09_16_IF_TP_INDEPENDENT_FRESHNESS</srcid><srcstatus/><internalId>1482</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00180</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>160</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00137</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>Mandatory Interfaces:
            PduR_SecOCCancelTransmit
                Requests cancellation of an ongoing transmission of an I-PDU in a lower layer communication
                interface or transport protocol module.
            PduR_SecOCTransmit
                Requests transmission of an I-PDU.
            PduR_SecOCTxConfirmation
                The lower layer communication interface module confirms the transmission of an I-PDU.
            PduR_SecOCRxIndication
                Indication of a received I-PDU from a lower layer communication interface module.
         </description>
         <!-- changed: Replaced 'PduR_SecOCIfRxIndication' by PduR_SecOCRxIndication -->
         <!-- changed: Replaced 'PduR_SecOCIfTxConfirmation' by PduR_SecOCTxConfirmation -->
         <!-- changed: Removed 'Det_ReportRuntime-Error' -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_CSM</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_09_16_IF_TP_INDEPENDENT_FRESHNESS</srcid><srcstatus/><internalId>1482</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_07_08_TP_CANCELTRANSMIT</srcid><srcstatus/><internalId>1484</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_CSMMODE_IF_09_10_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1562</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_DATAIDLEN32BITS_IF_09_10</srcid><srcstatus/><internalId>1563</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_09_IF</srcid><srcstatus/><internalId>1565</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_567</srcid><srcstatus/><internalId>776</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_811</srcid><srcstatus/><internalId>786</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1097</srcid><srcstatus/><internalId>994</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00137</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>161</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00138_1</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>Optional Rx Interfaces:
             PduR_SecOCTpRxIndication
                    Called after an I-PDU has been received via the TP API, the result indicates whether the transmission
                    was successful or not.
             Csm_MacVerify
                    Verifies the given MAC by comparing if the MAC is generated with the given data.
             Csm_SignatureVerify
                    Verifies the given MAC by comparing if the signature is generated with the given data.
             PduR_SecOCCancelReceive
                    Requests cancellation of an ongoing reception of a PDU in a lower layer transport protocol module.
             PduR_SecOCTpCopyRxData
                    This function is called to provide the received data of an I-PDU segment (N-PDU) to the upper layer.
                    Each call to this function provides the next part of the I-PDU data.
                    The size of the remaining buffer is written to the position indicated by bufferSizePtr.
             PduR_SecOCTpRxIndication
                    Called after an I-PDU has been received via the TP API, the result indicates whether the transmission was successful or not.
             PduR_SecOCTpStartOf-Reception
                    This function is called at the start of receiving an N-SDU. The N-SDU might be fragmented into multiple
                    N-PDUs (FF with one or more following CFs) or might consist of a single N-PDU (SF).
                    The service shall provide the currently available maximum buffer size when invoked with TpSduLength equal to 0..
         </description>
         <!-- changed: Removed not needed optional interfaces -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_CSM</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_CSMMODE_IF_09_10_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1562</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_DATAIDLEN32BITS_IF_09_10</srcid><srcstatus/><internalId>1563</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_09_IF</srcid><srcstatus/><internalId>1565</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1603</srcid><srcstatus/><internalId>877</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00138</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>475</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>162</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00138_2</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>Optional Tx Interfaces:
             PduR_SecOCTpTxConfirmation
                    This function is called after the I-PDU has been transmitted on its network, the result indicates
                    whether the transmission was successful or not.
             Csm_SignatureGenerate
                    Uses the given data to perform the signature calculation and stores the signature in the memory location pointed by the result pointer.
         </description>
         <!-- changed: Removed not needed optional interfaces -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_09_16_IF_TP_INDEPENDENT_FRESHNESS</srcid><srcstatus/><internalId>1482</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_07_08_TP_CANCELTRANSMIT</srcid><srcstatus/><internalId>1484</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1024</srcid><srcstatus/><internalId>794</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1031</srcid><srcstatus/><internalId>796</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1059</srcid><srcstatus/><internalId>797</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00138</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>475</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>163</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00119</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Service Name SecOC_VerificationStatusCallout Syntax void SecOC_VerificationStatusCallout ( SecOC_VerificationStatusType verificationStatus ) Service ID [hex] 0x50 Sync/Async Synchronous Reentrancy Non Reentrant for the same FreshnessValueID. Reentrant for different Freshness ValueIDs Parameters (in) verification Status Data structure to bundle the status of a verification attempt for a specific Freshness Value and Data ID Parameters (inout) None Parameters (out) None Return value None Description Service is used to propagate the status of each verification attempt from the Sec OC module to other modules. This service can be configured such that: Only: "False" Verification Status is propagated to modules Both: "True" and "False" Verification Status are propagated to modules None: No Verification Status is propagated Available via SecOC_Externals.h</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_IF_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1241</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_11_IF_TP_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1282</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Rx_Cfg.h_350</srcid><srcstatus/><internalId>723</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2849</srcid><srcstatus/><internalId>949</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2867</srcid><srcstatus/><internalId>950</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00119</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>476</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>164</internalId></specobject>
      <!-- SecOC.ASR21-11.SWS_SecOC_91014; [approved not implemented yet] -->
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00141</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name VerificationStatus Comment This service realizes a notification service that is used to propagate the status of each authentication attempt from the SecOC module to the application layer. This service can be configured such that: - Only "False" Verification Status is propagated to the application layer - Both "True" and "False" Verification Status are propagated to the application layer - No Verification Status is propagated to the application layer IsService true Variation -- Data Elements verificationStatus Type SecOC_VerificationStatusType Variation --</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_IF_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1241</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_11_IF_TP_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1282</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_178</srcid><srcstatus/><internalId>1180</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00141</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>478</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>165</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00148</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            SecOC shall define a provide port for the SecOC_VerificationStatusService
            interface if the SecOCEbPropagateVerificationStatusApiVersion is not equal to NONE and
            call the generated Rte function as configured by the parameter
            SecOCVerificationStatusPropagationMode. The sender/receiver interface shall bedefined as
            standard interface.</description>
         <!-- changed: Added if the SecOCEbPropagateVerificationStatusApiVersion is not equal to NONE -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_RTE</srcid><srcstatus/><internalId>1216</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_IF_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1241</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_178</srcid><srcstatus/><internalId>1180</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4_33</srcid><srcstatus/><internalId>1190</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00148</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>166</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00142</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
          Name VerifyStatusConfiguration
          Comment Verify Status Configuration Service of SecOC
          IsService true
          Variation --
          Possible Errors 0 E_OK Operation successful
                          1 E_NOT_OK Operation failed
          Operation VerifyStatusOverride
          Comment This service provides the ability to force specific behaviour of SecOc:
                  accept or drop an I-PDU with or without performing the verification of authenticator or
                  independent of the authenticator verification result, and to force a specific result
                  for SecOC_ VerificationResultType allowing additional fault handling in the application.
                  Option SECOC_OVERRIDE_PASS_UNTIL_NOTICE, SECOC_OVERRIDE_SKIP_ UNTIL_LIMIT,
                  SECOC_OVERRIDE_PASS_UNTIL_LIMIT or SECOC_OVERRIDE_ SKIP_UNTIL_NOTICE are available
                  only if SecOCEnableForcedPassOverride is set to TRUE.
          Variation --
          Parameters
            ValueId
              Type uint16
              Direction IN
              Comment Identifier of the Value ID where override shall be applied to. If configuration
                      option SecOCOverrideStatusWithDataId is set to TRUE, this value shall provide
                      the DataID of the secured I-PDU. If Sec OCOverrideStatusWithDataId is set to FALSE,
                      this parameter shall provide the freshness value ID.
              Variation --
            overrideStatus
              Type SecOC_OverrideStatusType
              Direction IN
              Comment Defines whether verification is executed and whether the I-PDU is passed on,
                      and for how long the override is active.
              Variation --
            numberOfMessagesToOverride
              Type uint8
              Direction IN
              Comment Number of sequential VerifyStatus to override when using a specific counter for authentication verification.
                      This is only considered when OverrideStatus is equal to SECOC_OVERRIDE_DROP_UNTIL_LIMIT, SECOC_OVERRIDE_SKIP_UNTIL_LIMIT or SECOC_OVERRIDE_ PASS_UNTIL_LIMIT.
              Variation --
          Possible Errors E_OK E_NOT_OK
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_NO_INIT</srcid><srcstatus/><internalId>1411</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1412</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1413</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1414</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1415</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_IF_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1416</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_TP_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1417</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1418</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_IF_SKIP_UNTIL_LIMIT_PDU_COL</srcid><srcstatus/><internalId>1419</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_TP_SKIP_UNTIL_LIMIT_PDU_COL</srcid><srcstatus/><internalId>1420</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1421</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_BUSY</srcid><srcstatus/><internalId>1422</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_18</srcid><srcstatus/><internalId>1176</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00142</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>480</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>167</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_91002_1</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>GetTxFreshness Comment Returns the freshness value from the Most Significant Bits in the first byte in the array (SecOCFreshnessValue), in big endian format. Variation ({ecuc(SecOC/SecOCTxPduProcessing/SecOCProvideTxTruncatedFreshness Value)} == FALSE) and ({ecuc(SecOC/SecOCGeneral/SecOCQueryFreshnessValue)} == RTE) Parameters freshnessValueId Type uint16 Direction IN Comment Identifier of the freshness Variation -- freshnessValue Type SecOC_FreshnessArrayType Direction OUT Comment Freshness value Variation -- freshnessValueLength Type uint32 Direction INOUT Comment Length in bits of the freshness value Variation -- Possible Errors E_OK E_NOT_OK E_BUSY
         </description>
         <!-- changed: Added and ({ecuc(SecOC/SecOCGeneral/SecOCQueryFreshnessValue)} == RTE) -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_235</srcid><srcstatus/><internalId>1183</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1270</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91002</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>168</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_91002_2</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>GetTxFreshnessTruncData Comment This operation is used by the SecOC to obtain the freshness that corresponds to the freshnessValueId. The operation provides the freshness and also the truncated freshness that shall be placed into the Secured-IPDU. Variation ({ecuc(SecOC/SecOCTxPduProcessing/SecOCProvideTxTruncatedFreshness Value)} == TRUE) and ({ecuc(SecOC/SecOCGeneral/SecOCQueryFreshnessValue)} == RTE) Parameters freshnessValueId Type uint16 Direction IN Comment Identifier of the freshness Variation -- freshnessValue Type SecOC_FreshnessArrayType Direction OUT Comment Freshness value Variation -- freshnessValueLength Type uint32 Direction INOUT Comment Length in bits of the freshness value Variation -- truncatedFreshnessValue Type SecOC_FreshnessArrayType Direction OUT Comment The truncated freshness value that has to be placed into the Secured-IPDU Variation -- truncatedFreshnessValueLength Type uint32 Direction INOUT Comment The length in bits for the truncated freshness. Variation -- Possible Errors E_OK E_NOT_OK E_BUSY.
         </description>
         <!-- changed: Added and ({ecuc(SecOC/SecOCGeneral/SecOCQueryFreshnessValue)} == RTE) -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_263</srcid><srcstatus/><internalId>1184</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_SWCFRESHNESSINTERFACES</srcid><srcstatus/><internalId>1219</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CCDFRESHNESSINTERFACES_14_TP_TX_AUTH</srcid><srcstatus/><internalId>1230</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_14_TP_TX_AUTH</srcid><srcstatus/><internalId>1271</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91002</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>169</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_91002_3</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>GetRxFreshness Comment This interface is used by the SecOC to obtain the current freshness value. This operation provides also a part of the Authentic-PDU data if configured. Variation ({ecuc(SecOC/SecOCRxPduProcessing/SecOCUseAuthDataFreshness)} == FALSE) and ({ecuc(SecOC/SecOCGeneral/SecOCQueryFreshnessValue)} == RTE)  Parameters freshnessValueId Type uint16 Direction IN Comment Identifier of the freshness Variation -- truncatedFreshnessValue Type SecOC_FreshnessArrayType Direction IN Comment The truncated freshness value from the received Secured-IPDU Variation -- truncatedFreshnessValueLength Type uint32 Direction IN Comment Length in bits of the truncated freshness value Variation -- authVerifyAttempts Type uint16 Direction IN Comment The number of authentication verify attempts for the current PDU Variation -- freshnessValue Type SecOC_FreshnessArrayType Direction OUT Comment The freshness value for this PDU Variation -- freshnessValueLength Type uint32 Direction INOUT Comment The freshness value length in bits. Variation -- Possible Errors E_OK E_NOT_OK E_BUSY
         </description>
         <!-- changed: Added and ({ecuc(SecOC/SecOCGeneral/SecOCQueryFreshnessValue)} == RTE) -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_67</srcid><srcstatus/><internalId>1178</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1267</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_ASC43_INTEGRATION</srcid><srcstatus/><internalId>1559</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91002</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>170</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_91002_4</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>GetRxFreshnessAuthData Comment This interface is used by the SecOC to obtain the current freshness value. This operation provides also a part of the Authentic-PDU data if configured. Variation ({ecuc(SecOC/SecOCRxPduProcessing/SecOCUseAuthDataFreshness)} == TRUE) and ({ecuc(SecOC/SecOCGeneral/SecOCQueryFreshnessValue)} == RTE) Parameters freshnessValueId Type uint16 Direction IN Comment Identifier of the freshness Variation -- truncatedFreshnessValue Type SecOC_FreshnessArrayType Direction IN Comment The truncated freshness value from the received Secured-IPDU Variation -- truncatedFreshnessValueLength Type uint32 Direction IN Comment Length in bits of the truncated freshness value Variation -- authenticDataFreshnessValue Type SecOC_FreshnessArrayType Direction IN Comment The selected part of the authentic data. Variation -- authenticDataFreshnessValueLength Type uint16 Direction IN Comment The length in bits of the authentic data part. Variation -- authVerifyAttempts Type uint16 Direction IN Comment The number of authentication verify attempts for this PDU Variation -- freshnessValue Type SecOC_FreshnessArrayType Direction OUT Comment The freshness value for this PDU Variation -- freshnessValueLength Type uint32 Direction INOUT Comment The freshness value length in bits. Variation -- Possible Errors E_OK E_NOT_OK E_BUSY
         </description>
         <!-- changed: Added and ({ecuc(SecOC/SecOCGeneral/SecOCQueryFreshnessValue)} == RTE) -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_110</srcid><srcstatus/><internalId>1179</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_SWCFRESHNESSINTERFACES</srcid><srcstatus/><internalId>1219</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_06_TP_RX_VER</srcid><srcstatus/><internalId>1227</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_06_TP_RX_VER</srcid><srcstatus/><internalId>1268</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91002</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>171</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_91002_5</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>ClientServerInterface RxFreshnessManagement
            Name  RxFreshnessManagement
            Comment  Rx Freshness management for SecOC
            IsService  true
            Variation  --
            Possible Errors  0  E_OK
                             1  E_NOT_OK
                             2  E_BUSY
         </description>
         <!-- changed: Renamed FreshnessManagement by RxFreshnessManagement -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_60</srcid><srcstatus/><internalId>1177</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1267</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91002</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>172</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_91002_6</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>ClientServerInterface TxFreshnessManagement
            Name  TxFreshnessManagement
            Comment Tx Freshness management for SecOC
            IsService  true
            Variation  --
            Possible Errors  0  E_OK
                             1  E_NOT_OK
                             2  E_BUSY
         </description>
         <!-- changed: Renamed FreshnessManagement by TxFreshnessManagement -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_228</srcid><srcstatus/><internalId>1182</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1270</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91002</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>173</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_91002_7</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>SPduTxConfirmation Comment This operation is used by the SecOC to indicate that the Secured I-PDU has been initiated for transmission. Variation ({ecuc(SecOC/SecOCGeneral/SecOCQueryFreshnessValue)} == RTE) Parameters freshnessValueId Type uint16 Direction IN Comment Identifier of the freshness Variation -- Possible Errors E_OK
         </description>
         <!-- changed: Added ({ecuc(SecOC/SecOCGeneral/SecOCQueryFreshnessValue)} == RTE) -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_300</srcid><srcstatus/><internalId>1185</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1270</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00233</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>308</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>174</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00002</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Name SendDefaultAuthenticationInformation Comment Sending Default Authentication Information configuration service. IsService true Variation ({ecuc(SecOC/SecOCGeneral/SecOCDefaultAuthenticationInformation Pattern.value != NULL)}) Possible Errors 0 E_OK Operation successful 1 E_NOT_OK Operation failed Operation SendDefaultAuthenticationInformation Comment The service provides the ability to enable the sending of un-authenticated PDU to lower layer. (example: in case authentication build counter has reached the configuration value SecOCAuthenticationBuildAttempts or the query of the freshness function returns E_NOT_OK or the calculation of the authenticator has returned a non-recoverable error such as returning E_NOT_OK or KEY_FAILURE). This service is optional (the service is available only if SecOCDefaultAuthentication InformationPattern is configured). If the service is not available or the service is available but the service was called with sendDefaultAuthenticationInformation as FALSE for a given FreshnessValueID, Sec OC module shall remove the Authentic I-PDU from its internal buffer and cancel the transmission request in case the building of authentication Information failed. If the service is available and the service was called with sendDefaultAuthentication Information as TRUE for a given FreshnessValueID, SecOc will use SecOCDefault AuthenticationInformationPattern as authentication Information and will not cancel the transmission request. Variation ({ecuc(SecOC/SecOCRxPduProcessing/SecOCUseAuthDataFreshness)} == FALSE) Parameters FreshnessValueID Type uint16 Direction IN Comment ID of the Freshness Value for which sending SecOCDefault AuthenticationInformationPattern should be enabled. Variation -- sendDefaultAuthenticationInformation Type boolean Direction IN Comment FALSE - sending SecOCDefaultAuthenticationInformationPattern shall be disabled for given FreshnessValueID TRUE - sending SecOCDefaultAuthenticationInformationPattern shall be enabled for given FreshnessValueID Variation -- Possible Errors E_OK E_NOT_OK</description>
        <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_MULTIPLE_MAINFUNC_RTE_DEFAULTAUTH_FVM_NOT_OK</srcid><srcstatus/><internalId>1238</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_16_TP_DEFAULTAUTH_FVM_NOT_OK</srcid><srcstatus/><internalId>1251</internalId></linkedfrom></coveredby></needscov>
          <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_344</srcid><srcstatus/><internalId>1187</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
          <provcov>
              <linksto>SecOC.ASR21-11.SWS_SecOC_00002</linksto>
              <dstversion>1</dstversion>
          <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>175</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_91016</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          Name VerificationStatusIndication
          Comment This service realizes a notification service that is used to propagate the status
                  of an authentication attempt from the SecOC module to an SW-C through RTE.
                  This service can be configured such that: Only "False" Verification Status
                  is propagated to the application layer Both "True" and "False"
                  Verification Status are propagated to the application layer No Verification Status
                  is propagated to the application layer
          IsService true
          Variation --
          Possible Errors 0 E_OK Operation successful
                          1 E_NOT_OK Operation failed
          Operation VerifyStatus
          Comment This service provides the ability to inform the application about the result
                  of the verification attempt of a received PDU by the SecOC module.
          Variation --
          Parameters
            verificationStatus
              Type SecOC_VerificationStatusType
              Direction IN
              Comment The verificationStatus is a structure that provides details about
                      the verification status and on which DataId and FreshnessValueId the verification was performed.
              Variation --
          Possible Errors E_OK E_NOT_OK
        </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
        <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_NO_INIT</srcid><srcstatus/><internalId>1411</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1412</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1413</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1414</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1415</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_IF_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1416</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_TP_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1417</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1418</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_IF_SKIP_UNTIL_LIMIT_PDU_COL</srcid><srcstatus/><internalId>1419</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_TP_SKIP_UNTIL_LIMIT_PDU_COL</srcid><srcstatus/><internalId>1420</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1421</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_BUSY</srcid><srcstatus/><internalId>1422</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1423</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1424</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1425</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1426</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1427</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1428</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1429</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1430</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_INVALID_PARAM</srcid><srcstatus/><internalId>1431</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_192</srcid><srcstatus/><internalId>1181</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91016</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>483</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>176</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_91001_1</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>Name RxFreshnessManagement Kind RequiredPort Interface FreshnessManagement Description Port for the provision of freshness for SecOC. Variation ({ecuc(SecOC/SecOCGeneral/SecOCQueryFreshnessValue)} == RTE)</description>
         <!-- changed: Replaced FreshnessManagement by RxFreshnessManagement -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1267</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4_21</srcid><srcstatus/><internalId>1188</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91001</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>484</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>177</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_91001_2</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>Name TxFreshnessManagement Kind RequiredPort Interface FreshnessManagement Description Port for the provision of freshness for SecOC. Variation ({ecuc(SecOC/SecOCGeneral/SecOCQueryFreshnessValue)} == RTE)</description>
         <!-- changed: Replaced FreshnessManagement by TxFreshnessManagement -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1270</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4_57</srcid><srcstatus/><internalId>1192</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91001</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>484</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>178</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_91020</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Name SendDefaultAuthenticationInformation Kind ProvidedPort Interface SendDefaultAuthenticationInformation Description -- Variation ({ecuc(SecOC/SecOCGeneral/SecOCDefaultAuthenticationInformationPattern.value != NULL)})</description>
        <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_MULTIPLE_MAINFUNC_RTE_DEFAULTAUTH_FVM_NOT_OK</srcid><srcstatus/><internalId>1238</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_16_TP_DEFAULTAUTH_FVM_NOT_OK</srcid><srcstatus/><internalId>1251</internalId></linkedfrom></coveredby></needscov>
          <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4_64</srcid><srcstatus/><internalId>1193</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
          <provcov>
              <linksto>SecOC.ASR21-11.SWS_SecOC_91020</linksto>
              <dstversion>1</dstversion>
          <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>179</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_91021</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            Name VerificationStatus Kind ProvidedPort Interface VerificationStatus Description -- Variation --
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_NO_INIT</srcid><srcstatus/><internalId>1411</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1412</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1413</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1414</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1415</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_IF_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1416</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_TP_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1417</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1418</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_IF_SKIP_UNTIL_LIMIT_PDU_COL</srcid><srcstatus/><internalId>1419</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_TP_SKIP_UNTIL_LIMIT_PDU_COL</srcid><srcstatus/><internalId>1420</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1421</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_BUSY</srcid><srcstatus/><internalId>1422</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1423</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1424</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1425</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1426</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1427</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1428</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1429</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1430</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_INVALID_PARAM</srcid><srcstatus/><internalId>1431</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_178</srcid><srcstatus/><internalId>1180</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91021</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>486</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>180</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_91022</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            Name VerifyStatusConfiguration Kind ProvidedPort Interface VerifyStatusConfiguration Description -- Variation --
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_NO_INIT</srcid><srcstatus/><internalId>1411</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1412</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1413</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1414</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1415</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_IF_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1416</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_TP_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1417</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1418</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_IF_SKIP_UNTIL_LIMIT_PDU_COL</srcid><srcstatus/><internalId>1419</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_TP_SKIP_UNTIL_LIMIT_PDU_COL</srcid><srcstatus/><internalId>1420</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1421</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_BUSY</srcid><srcstatus/><internalId>1422</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1423</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1424</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1425</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1426</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1427</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1428</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1429</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1430</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_INVALID_PARAM</srcid><srcstatus/><internalId>1431</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4_27</srcid><srcstatus/><internalId>1189</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91022</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>487</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>181</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_91015</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            Name VerificationStatusNotification Kind RequiredPort Interface VerificationStatusIndication Description Port definition for the notification of the verification status for a client-Server interface. Variation --
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_NO_INIT</srcid><srcstatus/><internalId>1411</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1412</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1413</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1414</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1415</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_IF_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1416</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_TP_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1417</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1418</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_IF_SKIP_UNTIL_LIMIT_PDU_COL</srcid><srcstatus/><internalId>1419</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_TP_SKIP_UNTIL_LIMIT_PDU_COL</srcid><srcstatus/><internalId>1420</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1421</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_BUSY</srcid><srcstatus/><internalId>1422</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1423</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1424</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1425</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1426</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1427</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1428</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1429</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CANCEL</srcid><srcstatus/><internalId>1430</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_INVALID_PARAM</srcid><srcstatus/><internalId>1431</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4_40</srcid><srcstatus/><internalId>1191</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91015</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>488</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>182</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_91012</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Name SecOC_FreshnessArrayType Kind Array Element type uint8 Size SECOC_MAX_FRESHNESS_SIZE Elements Description -- Variation -- Available via Rte_SecOC_Type.h</description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_321</srcid><srcstatus/><internalId>1173</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_RX_RTE_FRESHNESS_ARRAY_LENGTH_FIRST_PDU</srcid><srcstatus/><internalId>1617</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_RTE_FRESHNESS_ARRAY_LENGTH_SECOND_PDU</srcid><srcstatus/><internalId>1618</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_RTE_FRESHNESS_ARRAY_LENGTH_FIRST_PDU</srcid><srcstatus/><internalId>1619</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_RTE_FRESHNESS_ARRAY_LENGTH_SECOND_PDU</srcid><srcstatus/><internalId>1620</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RXTX_RTE_FRESHNESS_ARRAY_LENGTH_RX_LARGER</srcid><srcstatus/><internalId>1621</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RXTX_RTE_FRESHNESS_ARRAY_LENGTH_TX_LARGER</srcid><srcstatus/><internalId>1622</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91012</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>489</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>183</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00149</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          Name SecOC_VerificationResultType
          Kind Enumeration
          Range SECOC_VERIFICATIONSUCCESS 0x00 Verification successful
                SECOC_VERIFICATIONFAILURE 0x01 Verification not successful
                SECOC_FRESHNESSFAILURE 0x02 Verification not successful because of wrong freshness value.
                SECOC_ AUTHENTICATIONBUILDFAILURE 0x03 Verification not successful because of wrong build authentication codes
                SECOC_NO_VERIFICATION 0x04 Verification has been skipped and the data has been provided to upper layer "as is". (only possible when SecOC_ VerifyStatusOverride is used)
                SECOC_VERIFICATIONFAILURE_ OVERWRITTEN 0x05 Verification failed, but the I-PDU was passed on to the upper layer due to the override status for this PDU. ( only possible when SecOC_VerifyStatus Override is used) Description Enumeration to indicate verification results. Variation -- Available via Rte_SecOC_Type.h
        </description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_176</srcid><srcstatus/><internalId>1169</internalId></linkedfrom></coveredby></needscov>
           <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_FVM_RET_VAL_BUSY_CASE1</srcid><srcstatus/><internalId>1433</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_FVM_RET_VAL_NOT_OK_CASE1</srcid><srcstatus/><internalId>1434</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_FVM_RET_VAL_BUSY_CASE2</srcid><srcstatus/><internalId>1435</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_FVM_RET_VAL_NOT_OK_CASE2</srcid><srcstatus/><internalId>1436</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</srcid><srcstatus/><internalId>1437</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_CSM_RET_VAL_NOT_OK</srcid><srcstatus/><internalId>1438</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_CSM_CALLBACK_NOT_OK</srcid><srcstatus/><internalId>1439</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
           <provcov>
              <linksto>SecOC.ASR21-11.SWS_SecOC_00149</linksto>
              <dstversion>1</dstversion>
           <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>490</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>184</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.SWS_SecOC_00160</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
          Name SecOC_VerificationStatusType
          Kind Structure
          Elements freshnessValueID Type uint16 Comment Identifier of the Freshness Value which resulted in the Verification Status
                   verificationStatus Type SecOC_VerificationResultType Comment Result of verification attempt:
                            SECOC_VERIFICATIONSUCCESS = Verification successful
                            SECOC_VERIFICATIONFAILURE = Verification not successful
                            SECOC_FRESHNESSFAILURE = Verification not successful because of wrong freshness value
                            SECOC_ AUTHENTICATIONBUILDFAILURE = Verification not successful because of wrong build authentication codes
                            SECOC_NO_VERIFICATION = No verification attempt was performed on this I-PDU and the I-PDU was passed on to the upper layer "as is".
                            SECOC_VERIFICATIONFAILURE_OVERWRITTEN = Verification failed, but the I-PDU was passed on to the upper layer due to the override status for this PDU.
                   secOCDataId Type uint16 Comment Data ID of SecOCDataId Description Data structure to bundle the status of a verification attempt for a specific Freshness Value and Data ID
         Variation --
         Available via Rte_SecOC_Type.h
        </description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_192</srcid><srcstatus/><internalId>1171</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
           <provcov>
              <linksto>SecOC.ASR21-11.SWS_SecOC_00160</linksto>
              <dstversion>1</dstversion>
           <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>491</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>185</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_00991</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          Name SecOC_OverrideStatusType
          Kind Enumeration
          Range
          SECOC_OVERRIDE_DROP_UNTIL_NOTICE   0x00     Until further notice, authenticator verification is not performed (no CSM call) I-PDU is dropped, verification result is set to SECOC_NO_VERIFICATION.
          SECOC_OVERRIDE_DROP_UNTIL_LIMIT    0x01     Until NumberOfMessagesToOverride is reached, authenticator verification is not performed (no CSM call) I- PDU is dropped, verification result is set to SECOC_NO_ VERIFICATION.
          SECOC_OVERRIDE_ CANCEL             0x02     Cancel Override of VerifyStatus.
          SECOC_OVERRIDE_PASS_UNTIL_NOTICE   0x40     Until further notice, authenticator verification is performed, I- PDU is sent to upper layer independent of verification result, verification result is set to SECOC_ VERIFICATIONFAILURE_OVERWRITTEN in case of failed verification.
          SECOC_OVERRIDE_SKIP_UNTIL_LIMIT    0x41     Until NumberOfMessagesToOverride is reached, authenticator verification is not performed, I-PDU is sent to upper layer, verification result is set to SECOC_NO_ VERIFICATION. If SecOCRxSecuredPduCollection is configured, SecOc shall process the SecOCRxAuthenticPdu without waiting for SecOCRxCryptographicPdu.
          SECOC_OVERRIDE_PASS_UNTIL_LIMIT    0x42     Until NumberOfMessagesToOverride is reached, authenticator verification is performed, I-PDU is sent to upper layer independent of verification result, verification result is set to SECOC_VERIFICATIONFAILURE_OVERWRITTEN in case of failed verification.
          SECOC_OVERRIDE_SKIP_UNTIL_NOTICE   0x43     Until further notice, authenticator verification is not performed, I-PDU is sent to upper layer, verification result is set to SECOC_NO_VERIFICATION. If SecOCRxSecured PduCollection is configured, SecOc shall process the SecOCRxAuthenticPdu without waiting for SecOCRxCryptographicPdu.
          Description Defines possibilities to override the verification status.
          Variation -- Available via Rte_SecOC_Type.h</description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_350</srcid><srcstatus/><internalId>1174</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00991</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>186</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.SWS_SecOC_CONSTR_00265</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Within the same configured SecOCRxPduProcessing, if SecOCReceptionOverflowStrategy is set to QUEUE, then SecOCRxSecuredPduCollection shall have multiplicity of 0.</description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1795</srcid><srcstatus/><internalId>1081</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
           <provcov>
              <linksto>SecOC.ASR21-11.SWS_SecOC_CONSTR_00265</linksto>
              <dstversion>1</dstversion>
           <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>187</internalId></specobject>
      <!-- SecOC.ASR21-11.SWS_SecOC_00999; [rejected] -->
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00001</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Module Name SecOC Module Description Configuration of the SecOC (SecureOnboardCommunication) module. Post-Build Variant Support true Supported Config Variants VARIANT-LINK-TIME, VARIANT-POST-BUILD, VARIANT-PRE-COMPILE</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_17</srcid><srcstatus/><internalId>1033</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00001</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>495</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>188</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00002</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCGeneral Parent Container SecOC Description Contains the general configuration parameters</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_83</srcid><srcstatus/><internalId>1034</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00002</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>496</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>189</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00098</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Name SecOCDefaultAuthenticationInformationPattern Parent Container SecOCGeneral Description The parameter describes the behaviour of SecOC when authentication build counter has reached the configuration value SecOCAuthenticationBuildAttempts, or the query of the freshness function returns E_NOT_OK or the calculation of the authenticator has returned a non-recoverable error such as returning E_NOT_OK or KEY_FAILURE. If the configuration parameter is not present, SecOC module shall remove the Authentic I-PDU from its internal buffer and cancel the transmission request If the configuration parameter is present, SecOC will use this value for each byte of Freshness Value and Authenticator when building the Authentication Information, and will not cancel the transmission request. Multiplicity 0..1 Type EcucIntegerParamDef Range 0 .. 255 Default value -- Post-Build Variant Multiplicity false Post-Build Variant Value false Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
        <needscoverage>
          <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_421</srcid><srcstatus/><internalId>1043</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
          <provcov>
              <linksto>SecOC.ASR21-11.ECUC_SecOC_00098</linksto>
              <dstversion>1</dstversion>
          <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>497</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>190</internalId></specobject>
      <!-- SecOC.ASR21-11.ECUC_SecOC_00007; [approved not implemented yet] -->
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00051</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCEnableForcedPassOverride Parent Container SecOCGeneral Description When this configuration option is set to TRUE then the functionality inside the function SecOC_VerifyStatusOverride to send I-PDUs to upper layer independent of the verification result is enabled. Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_249</srcid><srcstatus/><internalId>1039</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00051</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>191</internalId></specobject>
      <!-- SecOC.ASR21-11.ECUC_SecOC_00114; [approved not implemented yet] -->
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00052</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCIgnoreVerificationResult Parent Container SecOCGeneral Description The result of the authentication process (e.g. MAC Verify) is ignored after the first try and the SecOC proceeds like the result was a success. The calculation of the authenticator is still done, only its result will be ignored. TRUE = enabled (verification result is ignored). FALSE = disabled (verification result is NOT ignored). Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_162</srcid><srcstatus/><internalId>1037</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00052</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>501</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>192</internalId></specobject>
      <!-- SecOC.ASR21-11.ECUC_SecOC_00047; [approved not implemented yet] -->
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00099</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Name SecOCOverrideStatusWithDataId Parent Container SecOCGeneral Description This option defines if the parameter "ValueId" of the function SecOC_VerifyStatusOverride() accepts the freshness value (as a collection of one or more Secured I-PDUs to freshness) or the dataID for individual Secured I-PDUs. TRUE = Function SecOC_VerifyStatusOverride accepts SecOCDataId as parameter. FALSE = Function SecOC_VerifyStatusOverride accepts SecOCFreshnessValueId as parameter. Multiplicity 0..1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_385</srcid><srcstatus/><internalId>1042</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00099</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>503</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>193</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00112</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Name SecOCPropagateOnlyFinalVerificationStatus Parent Container SecOCGeneral Description This parameter Is used to specify if the verification status shall be reported only after the final determination of the verification status (TRUE) or on every verification attempt (FALSE). Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_193</srcid><srcstatus/><internalId>1038</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00112</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>504</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>194</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00078</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name                      SecOCQueryFreshnessValue
            Parent Container          SecOCGeneral
            Description               This parameter specifies if the freshness value shall be determined through a C- function (CD) or a software component
                                      (SW-C) or the freshness mechanism will not be used.
            Type                      EcucEnumerationParamDef
            Range                     NONE  The SecOC will not use freshness mechanism.
                                      CFUNC The SecOC queries the timestamp for every PDU to process using the
                                            C function defined by the configuration parameter
                                            SecOCFreshnessValueFuncName.
                                      RTE   The SecOC queries the timestamp for every PDU to process using the
                                            Rte service port  TimeManagement_&lt;SecOCFreshnessValueId&gt;
            Default value             CFUNC
            Post-Build Variant Value  false
            Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time --
            Scope / Dependency
         </description>
         <!-- changed: Extend the range for SecOCQueryFreshnessValue with NONE value, update the description by adding: or the freshness mechanism will not be used -->
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_86</srcid><srcstatus/><internalId>1035</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_CDDFRESHNESSINTERFACES</srcid><srcstatus/><internalId>1211</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_RTE_DATAIDLEN</srcid><srcstatus/><internalId>1217</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_RTE_NOFV</srcid><srcstatus/><internalId>1218</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_SWCFRESHNESSINTERFACES</srcid><srcstatus/><internalId>1219</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1229</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1267</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1270</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00078</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>505</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>195</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00004</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCVerificationStatusCallout Parent Container SecOCGeneral Description Entry address of the customer specific call out routine which shall be invoked in case of a verification attempt. Multiplicity 0..* Type EcucFunctionNameDef Default value -- maxLength -- minLength -- regularExpression -- Post-Build Variant Multiplicity false Post-Build Variant Value false Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_11_IF_TP_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1282</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_311</srcid><srcstatus/><internalId>1040</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00004</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>506</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>196</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00003</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCVersionInfoApi Parent Container SecOCGeneral Description If true the SecOC_GetVersionInfo API is available. Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_135</srcid><srcstatus/><internalId>1036</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00003</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>507</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>197</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00104</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Container Name SecOCMainFunctionRx Parent Container SecOC Description Each element of this container defines one instance of SecOC_MainFunctionRx. Configuration Parameters</description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_4257</srcid><srcstatus/><internalId>1156</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
           <provcov>
              <linksto>SecOC.ASR21-11.ECUC_SecOC_00104</linksto>
              <dstversion>1</dstversion>
           <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>508</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>198</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00106</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Name SecOCMainFunctionPeriodRx Parent Container SecOCMainFunctionRx Description Allows to configure the time for the respective MainFunction instance of the Rx path (as float in seconds). Multiplicity 1 Type EcucFloatParamDef Range ]0 .. INF[ Default value -- Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_4313</srcid><srcstatus/><internalId>1159</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
           <provcov>
              <linksto>SecOC.ASR21-11.ECUC_SecOC_00106</linksto>
              <dstversion>1</dstversion>
           <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>509</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>199</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00107</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Name SecOCMainFunctionRxPartitionRef Parent Container SecOCMainFunctionRx Description Reference to EcucPartition, where the according SecOC_MainFunction instance is assigned to. Multiplicity 1 Type Reference to [ EcucPartition ] Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_4284</srcid><srcstatus/><internalId>1158</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
           <provcov>
              <linksto>SecOC.ASR21-11.ECUC_SecOC_00107</linksto>
              <dstversion>1</dstversion>
           <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>510</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>200</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00105</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Container Name SecOCMainFunctionTx Parent Container SecOC Description Each element of this container defines one instance of SecOC_MainFunctionTx. Configuration Parameters</description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_4344</srcid><srcstatus/><internalId>1160</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
           <provcov>
              <linksto>SecOC.ASR21-11.ECUC_SecOC_00105</linksto>
              <dstversion>1</dstversion>
           <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>511</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>201</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00108</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Name SecOCMainFunctionPeriodTx Parent Container SecOCMainFunctionTx Description Allows to configure the time for the respective MainFunction instance of the Tx path (as float in seconds). Multiplicity 1 Type EcucFloatParamDef Range ]0 .. INF[ Default value -- Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_4398</srcid><srcstatus/><internalId>1163</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
           <provcov>
              <linksto>SecOC.ASR21-11.ECUC_SecOC_00108</linksto>
              <dstversion>1</dstversion>
           <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>512</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>202</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00109</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Name SecOCMainFunctionTxPartitionRef Parent Container SecOCMainFunctionTx Description Reference to EcucPartition, where the according SecOC_MainFunction instance is assigned to. Multiplicity 1 Type Reference to [ EcucPartition ] Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_4369</srcid><srcstatus/><internalId>1162</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00109</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>513</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>203</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00009</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCSameBufferPduCollection Parent Container SecOC Description SecOCBuffer configuration that may be used by a collection of Pdus. Post-Build Variant Multiplicity false Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Configuration Parameters</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1050</srcid><srcstatus/><internalId>1060</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00009</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>514</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>204</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00008</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCBufferLength Parent Container SecOCSameBufferPduCollection Description This parameter defines the Buffer in bytes that is used by the SecOC module. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 4294967295 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1071</srcid><srcstatus/><internalId>1061</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00008</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>515</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>205</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00011</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCRxPduProcessing Parent Container SecOC Description Contains the parameters to configure the RxPdus to be verified by the SecOC module. Configuration Parameters</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1105</srcid><srcstatus/><internalId>1062</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00011</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>516</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>206</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00082</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name SecOCAuthDataFreshnessLen
            Description The length of the external authentic PDU data in bits
            Parent Container SecOCRxPduProcessing
            Multiplicity 0|1
            Type EcucIntegerParamDef
            Range 0...64
            Default Value -
            Post-build Variant Value false
            Pre-compile time X
            Scope / Dependency
         </description>
         <!-- changed: Replaced 'Range 0...65535' by Range 0...64 -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1682</srcid><srcstatus/><internalId>1078</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_05_IF_FRESHNESS_AUTHDATA</srcid><srcstatus/><internalId>1299</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_06_TP_FRESHNESS_AUTHDATA</srcid><srcstatus/><internalId>1300</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00082</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>517</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>207</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00081</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            Name SecOCAuthDataFreshnessStartPosition
            Description This value determines the start position in bits (uint16) of the Authentic
                        PDU that shall be passed on to the Freshness SWC. The bit counting is done
                        according to TPS_SYST_01068 and the bit ordering is done according to TPS_SYST_01069.
            Multiplicity 0|1
            Type EcucIntegerParamDef
            Range 0...65535
            Default Value -
            Post-build Variant Value false
            Pre-compile time X
            Scope / Dependency
         </description>
         <comment>
          Through the configuration parameter SecOCBitCountingAndOrder we can select between:
            - SECOC_INCREASING_ORDER_MONOTONE_COUNTING_FORMAT: monotone Bit counting and increasing bit order.
            - SECOC_DECREASING_ORDER_SAWTOOTH_COUNTING_FORMAT:"sawtooth" Bit counting in accordance with TPS_SYST_01068 and  "Decreasing"  bit order in accordance with TPS_SYST_01069.
         </comment>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1716</srcid><srcstatus/><internalId>1079</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_05_IF_FRESHNESS_AUTHDATA</srcid><srcstatus/><internalId>1299</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_06_TP_FRESHNESS_AUTHDATA</srcid><srcstatus/><internalId>1300</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00081</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>518</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>208</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00079_1</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCAuthenticationBuildAttempts Parent Container SecOCRxPduProcessing Description This parameter specifies the number of authentication build attempts. Multiplicity 0..1 Type EcucIntegerParamDef Range 0 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1442</srcid><srcstatus/><internalId>1072</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_CDDFRESHNESSINTERFACES</srcid><srcstatus/><internalId>1211</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_RTE_DATAIDLEN</srcid><srcstatus/><internalId>1217</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_RTE_NOFV</srcid><srcstatus/><internalId>1218</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_SWCFRESHNESSINTERFACES</srcid><srcstatus/><internalId>1219</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1229</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1267</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1270</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00079_1</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>519</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>209</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00080</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCAuthenticationVerifyAttempts Parent Container SecOCRxPduProcessing Description This parameter specifies the number of authentication verify attempts that are to be carried out when the verification of the authentication information failed for a given Secured I-PDU. If zero is set, then only one authentication verification attempt is done. Multiplicity 0..1 Type EcucIntegerParamDef Range 0 .. 65535 Default value 0 Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1474</srcid><srcstatus/><internalId>1073</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_CDDFRESHNESSINTERFACES</srcid><srcstatus/><internalId>1211</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_RTE_DATAIDLEN</srcid><srcstatus/><internalId>1217</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_RTE_NOFV</srcid><srcstatus/><internalId>1218</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_SWCFRESHNESSINTERFACES</srcid><srcstatus/><internalId>1219</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00080</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>520</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>210</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00095</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>Name SecOCAuthInfoTruncLength Parent Container SecOCRxPduProcessing Description This parameter defines the length in bits of the authentication code to be included in the payload of the Secured I-PDU. Multiplicity 1 Type EcucIntegerParamDef Range 1 .. 65535 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <!-- changed: Replaced 'SecOCAuthInfoTruncLength' by SecOCAuthInfoTxLength -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1202</srcid><srcstatus/><internalId>1066</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00095</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>521</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>211</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00113</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Name SecOCClientServerVerificationStatusPropagationMode Parent Container SecOCRxPduProcessing Description This parameter is used to determine the propagation of the verification status through the client/server interface to an SW-C. Multiplicity 1 Type EcucEnumerationParamDef Range BOTH Both "TRUE" and "FALSE" AuthenticationStatus is propagated to SW-C FAILURE_ONLY Only "FALSE" Authentication Status is propagated to SW-C NONE No Authentication Status for this PDU is provided to SW-C Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1556</srcid><srcstatus/><internalId>1075</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00113</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>522</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>212</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00030</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>:Name SecOCDataId Description This parameter defines a numerical
            identifier for the Secured I PDU.Multiplicity 1Type EcucIntegerParamDefRange 0 ..
            4294967295Default value -Post-Build Variant Value trueValue Configuration Class Pre-compile time
            X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X
            VARIANT-POST-BUILDScope / Dependency scope: local Comment: In most cases SecOCDataId must
            be unique.</description>
         <!-- changed: Replaced 'Range 0 ..65353' by Range 0 ..4294967295 -->
         <!-- changed: Replaced 'a unique numerical identifier' by Range a numerical identifier -->
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_PBCFG_VARIANTS</srcid><srcstatus/><internalId>1222</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_CSM</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_10_IF_FRESHNESS_ZERO_MAC_FAILS</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_UNIQUEMAC</srcid><srcstatus/><internalId>1279</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_SYNCATTEMPTS</srcid><srcstatus/><internalId>1280</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_INTERNALERROR</srcid><srcstatus/><internalId>1281</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_11_IF_TP_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1282</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_TPERROR</srcid><srcstatus/><internalId>1283</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_01_TP_SKIPMACVERIF</srcid><srcstatus/><internalId>1293</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_13_IF_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_VER_RES_09_IF</srcid><srcstatus/><internalId>1384</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1232</srcid><srcstatus/><internalId>1067</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00030</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>523</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>213</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00038</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCFreshnessValueId Parent Container SecOCRxPduProcessing Description This parameter defines the Id of the Freshness Value. The Freshness Value might be a normal counter or a time value. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 65535 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_PBCFG_VARIANTS</srcid><srcstatus/><internalId>1222</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_11_IF_TP_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1282</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1281</srcid><srcstatus/><internalId>1068</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00038</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>524</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>214</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00031</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCFreshnessValueLength Parent Container SecOCRxPduProcessing Description This parameter defines the complete length in bits of the Freshness Value. As long as the key doesn't change the counter shall not overflow. The length of the counter shall be determined based on the expected life time of the corresponding key and frequency of usage of the counter. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 64 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1313</srcid><srcstatus/><internalId>1069</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_PBCFG_VARIANTS</srcid><srcstatus/><internalId>1222</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00031</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>525</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>215</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00094</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>Name SecOCFreshnessValueTxLength Parent Container SecOCRxPduProcessing Description This parameter defines the length in bits of the Freshness Value to be included in the payload of the Secured I-PDU. This length is specific to the least significant bits of the complete Freshness Counter. If the parameter is 0 no Freshness Value is included in the Secured I-PDU. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 64 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local dependency: SecOCFreshnessCounterTxLength "smaller than or equal to" SecOCFreshnessCounterLength</description>
         <!-- changed: Replaced SecOCFreshnessValueTruncLength by SecOCFreshnessValueTxLength -->
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1356</srcid><srcstatus/><internalId>1070</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_PBCFG_VARIANTS</srcid><srcstatus/><internalId>1222</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_UNIQUEMAC</srcid><srcstatus/><internalId>1279</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_SYNCATTEMPTS</srcid><srcstatus/><internalId>1280</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_INTERNALERROR</srcid><srcstatus/><internalId>1281</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_11_IF_TP_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1282</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_TPERROR</srcid><srcstatus/><internalId>1283</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_01_TP_SKIPMACVERIF</srcid><srcstatus/><internalId>1293</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_13_IF_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_03_TP</srcid><srcstatus/><internalId>1564</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00094</linksto>
               <dstversion>2</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>216</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00076</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCReceptionOverflowStrategy Parent Container SecOCRxPduProcessing Description This parameter defines the overflow strategy for receiving PDUs Multiplicity 1 Type EcucEnumerationParamDef Range QUEUE Subsequent received message will be queued REJECT Subsequent received message will be discarded REPLACE Subsequent received message will replace the currently processed message Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1756</srcid><srcstatus/><internalId>1080</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_RECSTRATEGY_REPLACE</srcid><srcstatus/><internalId>1292</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REJECT_09_IF_SECUREDPDU</srcid><srcstatus/><internalId>1467</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REJECT_17_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1468</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REJECT_19_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1469</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_09_IF_SECPDU</srcid><srcstatus/><internalId>1470</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_17_IF_SECPDUCOL</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_19_TP_SECPDUCOL</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_17_IF_SECPDUCOLWRONGCRYPTO</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_17_IF_SECPDUCOLWRONGAUTHENTIC</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_17_IF_SECPDUCOLWRONGCRYPTOANDAUTH</srcid><srcstatus/><internalId>1475</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00076</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>527</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>217</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00077</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCReceptionQueueSize Parent Container SecOCRxPduProcessing Description This parameter defines the queue size in case the overflow strategy for receiving PDUs is set to QUEUE. Multiplicity 0..1 Type EcucIntegerParamDef Range 1 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1803</srcid><srcstatus/><internalId>1082</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU</srcid><srcstatus/><internalId>1440</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_PDU_SIZE_ZERO</srcid><srcstatus/><internalId>1441</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_DYNAMICPDULENGTH_09_SECURED_PDU_IF_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</srcid><srcstatus/><internalId>1442</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_FULL</srcid><srcstatus/><internalId>1443</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_OVRFL</srcid><srcstatus/><internalId>1444</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_HALFQUE_OVRFL</srcid><srcstatus/><internalId>1445</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_FULL_EMPTY_HALF</srcid><srcstatus/><internalId>1446</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU</srcid><srcstatus/><internalId>1447</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_PARTIALCOPY</srcid><srcstatus/><internalId>1448</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_FULL</srcid><srcstatus/><internalId>1449</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_OVRFL</srcid><srcstatus/><internalId>1450</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_HALFQUE_OVRFL</srcid><srcstatus/><internalId>1451</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_FULL_EMPTY_HALF</srcid><srcstatus/><internalId>1452</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_REJECT_PDU_FROM_QUEUE</srcid><srcstatus/><internalId>1453</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_SMALL_PDU_SIZE</srcid><srcstatus/><internalId>1454</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_BIG_PDU_SIZE</srcid><srcstatus/><internalId>1455</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_FV_RET_VALUE_E_NOT_OK</srcid><srcstatus/><internalId>1456</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_CSM_RET_VALUE_E_NOT_OK</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_CSM_VER_RES_E_NOT_OK</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_CSM_CALLBACK_RET_VALUE_E_NOT_OK</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_FV_RET_VALUE_E_NOT_OK</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_CSM_RET_VALUE</srcid><srcstatus/><internalId>1461</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_CSM_VER_RES_E_NOT_OK</srcid><srcstatus/><internalId>1462</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_CSM_CALLBACK_RET_VALUE_E_NOT_OK</srcid><srcstatus/><internalId>1463</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_04_IF_SECUREDPDU_NO_METADATA</srcid><srcstatus/><internalId>1464</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_04_TP_SECUREDPDU_NO_METADATA</srcid><srcstatus/><internalId>1465</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_04_TP_SECUREDPDU_PARTIALCOPY_NO_METADATA</srcid><srcstatus/><internalId>1466</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00077</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>528</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>218</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00083</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCUseAuthDataFreshness Parent Container SecOCRxPduProcessing Description A Boolean value that indicates if a part of the Authentic-PDU shall be passed on to the SWC that verifies and generates the Freshness. If it is set to TRUE, the values SecOCAuthDataFreshnessStartPosition and SecOCAuthDataFreshnessLen must be set to specify the bit position and length within the Authentic-PDU. Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: ECU</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1651</srcid><srcstatus/><internalId>1077</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_05_IF_FRESHNESS_AUTHDATA</srcid><srcstatus/><internalId>1299</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_06_TP_FRESHNESS_AUTHDATA</srcid><srcstatus/><internalId>1300</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00083</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>529</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>219</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00046</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCVerificationStatusPropagationMode Parent Container SecOCRxPduProcessing Description This parameter is used to describe the propagation of the status of each verification attempt from the SecOC module to SWCs. Multiplicity 1 Type EcucEnumerationParamDef Range BOTH Both "True" and "False" AuthenticationStatus is propagated to SWC FAILURE_ONLY Only "False" AuthenticationStatus is propagated to SWC NONE No AuthenticationStatus is propagated to SWC Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_PBCFG_VARIANTS</srcid><srcstatus/><internalId>1222</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_11_IF_TP_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1282</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1510</srcid><srcstatus/><internalId>1074</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00046</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>530</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>220</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00048</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name SecOCRxAuthServiceConfigRef
            Description This reference is used to define which crypto service function is called for authentication (MAC based or signature based).
            Multiplicity 1
            Type Symbolic name reference to [ CsmJob ]
            Post-Build Variant Value false
         </description>
         <!-- changed: Removed If PDUs with a dynamic length are used (e.g. CanTP or Dynamic Length PDUs) a MAC algorithm has to be chosen, that is not vulnerable to length extension attack (e.g. CMAC/HMAC). -->
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp ,different types of PDU:SecuredPdu/SecuredPduCollection and different types of Verification:MAC/Signature</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RX_PDU_VERIF</srcid><srcstatus/><internalId>1209</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_CSM</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_10_IF_FRESHNESS_ZERO_MAC_FAILS</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_UNIQUEMAC</srcid><srcstatus/><internalId>1279</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_SYNCATTEMPTS</srcid><srcstatus/><internalId>1280</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_INTERNALERROR</srcid><srcstatus/><internalId>1281</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_11_IF_TP_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1282</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_TPERROR</srcid><srcstatus/><internalId>1283</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_08_IF_CsmSignatureVerify</srcid><srcstatus/><internalId>1287</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_01_TP_SKIPMACVERIF</srcid><srcstatus/><internalId>1293</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_13_IF_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_VER_RES_09_IF</srcid><srcstatus/><internalId>1384</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1158</srcid><srcstatus/><internalId>1065</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00048</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>531</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>221</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00049</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCSameBufferPduRef Parent Container SecOCRxPduProcessing Description This reference is used to collect Pdus that are using the same SecOC buffer. Multiplicity 0..1 Type Reference to [ SecOCSameBufferPduCollection ] Post-Build Variant Multiplicity false Post-Build Variant Value false Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_FRESHNESS_RETVAL_BUSY_RETRIES_NOT_EXCEEDED</srcid><srcstatus/><internalId>1253</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_FRESHNESS_RETVAL_BUSY_RETRIES_EXCEEDED</srcid><srcstatus/><internalId>1254</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_FRESHNESS_RETVAL_E_NOT_OK</srcid><srcstatus/><internalId>1255</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_MACVER_RETVAL_E_NOT_OK_RETRIES_NOT_EXCEEDED</srcid><srcstatus/><internalId>1256</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_MACVER_RETVAL_E_NOT_OK_RETRIES_EXCEEDED</srcid><srcstatus/><internalId>1257</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_MACVER_RESULT_E_NOT_OK_RETRIES_NOT_EXCEEDED</srcid><srcstatus/><internalId>1258</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_MACVER_RESULT_E_NOT_OK_RETRIES_EXCEEDED</srcid><srcstatus/><internalId>1259</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1598</srcid><srcstatus/><internalId>1076</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00049</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>532</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>222</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00041</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Choice container Name SecOCRxSecuredPduLayer Parent Container SecOCRxPduProcessing Description This container specifies the Pdu that is received by the SecOC module from the PduR. For this Pdu the Mac verification is provided. Container Choices Container Name Multiplicity Scope / Dependency SecOCRxSecuredPdu 0..1 This container specifies the Pdu that is received by the SecOC module from the PduR. For this Pdu the Mac verification is provided. SecOCRxSecuredPduCollectio n 0..1 This container specifies two Pdus that are received by the SecOC module from the PduR and a message linking between them. SecOCRxAuthenticPdu contains the original Authentic I- PDU, i.e. the secured data, and the SecOCRxCryptographicPdu contains the Authenticator, i.e. the actual Authentication Information.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1968</srcid><srcstatus/><internalId>1087</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00041</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>533</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>223</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00069</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCRxSecuredPdu Parent Container SecOCRxSecuredPduLayer Description This container specifies the Pdu that is received by the SecOC module from the PduR. For this Pdu the Mac verification is provided.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1999</srcid><srcstatus/><internalId>1088</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00069</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>534</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>224</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00093_1</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Name SecOCAuthPduHeaderLength Parent Container SecOCRxSecuredPdu Description This parameter indicates the length (in bytes) of the Secured I-PDU Header in the Secured I-PDU. The length of zero means there's no header in the PDU. Multiplicity 0..1 Type EcucIntegerParamDef Range 0 .. 4 Default value 0 Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
        <needscoverage>
         <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2039</srcid><srcstatus/><internalId>1089</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
           <provcov>
              <linksto>SecOC.ASR21-11.ECUC_SecOC_00093_1</linksto>
              <dstversion>1</dstversion>
           <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>535</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>225</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00043</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>:Name SecOCRxSecuredLayerPduId Description PDU identifier assigned by SecOC
            module. Used by PduR for SecOC_[Tp]RxIndication.Multiplicity 1Type EcucIntegerParamDef
            (Symbolic Name generated for this parameter)Range 0 .. 65535Default value -Post-Build
            Variant Value trueValue Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time
            X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILDScope / Dependency scope:
            local</description>
         <!-- changed: Replaced SecOC_[If|Tp]RxIndication by SecOC_[Tp]RxIndication -->
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_CSM</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_10_IF_FRESHNESS_ZERO_MAC_FAILS</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_UNIQUEMAC</srcid><srcstatus/><internalId>1279</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_SYNCATTEMPTS</srcid><srcstatus/><internalId>1280</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_INTERNALERROR</srcid><srcstatus/><internalId>1281</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_11_IF_TP_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1282</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_TPERROR</srcid><srcstatus/><internalId>1283</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_01_TP_SKIPMACVERIF</srcid><srcstatus/><internalId>1293</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_13_IF_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_VER_RES_09_IF</srcid><srcstatus/><internalId>1384</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_03_TP</srcid><srcstatus/><internalId>1564</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_09_IF</srcid><srcstatus/><internalId>1565</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2072</srcid><srcstatus/><internalId>1090</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00043</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>536</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>226</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00092_1</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCSecuredRxPduVerification Parent Container SecOCRxSecuredPdu Description This parameter defines whether the signature authentication or MAC verification shall be performed on this Secured I-PDU. If set to false, the SecOC module extracts the Authentic I-PDU from the Secured I-PDU without verification. Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value true Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2103</srcid><srcstatus/><internalId>1091</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00092_1</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>537</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>227</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00042</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCRxSecuredLayerPduRef Parent Container SecOCRxSecuredPdu Description Reference to the global Pdu. Multiplicity 1 Type Reference to [ Pdu ] Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2131</srcid><srcstatus/><internalId>1092</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00042</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>538</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>228</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00044</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCRxAuthenticPduLayer Parent Container SecOCRxPduProcessing Description This container specifies the Pdu that is transmitted by the SecOC module to the PduR after the Mac was verified. Configuration Parameters</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2625</srcid><srcstatus/><internalId>1108</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00044</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>539</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>229</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00075_1</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCPduType Parent Container SecOCRxAuthenticPduLayer Description This parameter defines API Type to use for communication with PduR. Multiplicity 1 Type EcucEnumerationParamDef Range SECOC_IFPDU Interface communication API SECOC_TPPDU Transport Protocol communication API Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2643</srcid><srcstatus/><internalId>1109</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RX</srcid><srcstatus/><internalId>1208</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_CSM</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_10_IF_FRESHNESS_ZERO_MAC_FAILS</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_UNIQUEMAC</srcid><srcstatus/><internalId>1279</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_SYNCATTEMPTS</srcid><srcstatus/><internalId>1280</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_INTERNALERROR</srcid><srcstatus/><internalId>1281</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_11_IF_TP_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1282</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_TPERROR</srcid><srcstatus/><internalId>1283</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_NOINIT</srcid><srcstatus/><internalId>1284</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_COPYERROR</srcid><srcstatus/><internalId>1285</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_FREEUSEDBUFFER</srcid><srcstatus/><internalId>1286</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_CSMRETVALNOTOK</srcid><srcstatus/><internalId>1288</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_CSMCALLBACKNOTOK</srcid><srcstatus/><internalId>1289</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_CSMRESULTNOTOK</srcid><srcstatus/><internalId>1290</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_15_TP_SECOCBUSY</srcid><srcstatus/><internalId>1291</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_01_TP_SKIPMACVERIF</srcid><srcstatus/><internalId>1293</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_13_IF_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_RECEPTIONVERIFYFAILURE</srcid><srcstatus/><internalId>1297</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_05_IF_FRESHNESS_AUTHDATA</srcid><srcstatus/><internalId>1299</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_06_TP_FRESHNESS_AUTHDATA</srcid><srcstatus/><internalId>1300</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_VER_RES_09_IF</srcid><srcstatus/><internalId>1384</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_CSMMODE_IF_09_10_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1562</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_DATAIDLEN32BITS_IF_09_10</srcid><srcstatus/><internalId>1563</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00075_1</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>540</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>230</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00102</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>Name SecOCRxAuthenticLayerPduId Parent Container SecOCRxAuthenticPduLayer Description PDU identifier assigned by SecOC module. Used by PduR for SecOC_TpCancelReceive. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 65535 Default value -- Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
        <needscoverage>
          <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2678</srcid><srcstatus/><internalId>1110</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
          <provcov>
              <linksto>SecOC.ASR21-11.ECUC_SecOC_00102</linksto>
              <dstversion>1</dstversion>
          <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>541</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>231</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00045</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCRxAuthenticLayerPduRef Parent Container SecOCRxAuthenticPduLayer Description Reference to the global Pdu. Multiplicity 1 Type Reference to [ Pdu ] Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2718</srcid><srcstatus/><internalId>1111</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00045</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>542</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>232</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00067</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCRxSecuredPduCollection Parent Container SecOCRxSecuredPduLayer Description This container specifies two Pdus that are received by the SecOC module from the PduR and a message linking between them. SecOCRxAuthenticPdu contains the original Authentic I-PDU, i.e. the secured data, and the SecOCRxCryptographicPdu contains the Authenticator, i.e. the actual Authentication Information. Configuration Parameters</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2161</srcid><srcstatus/><internalId>1093</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00067</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>543</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>233</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00092_2</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCSecuredRxPduVerification Parent Container SecOCRxSecuredPduCollection Description This parameter defines whether the signature authentication or MAC verification shall be performed on this Secured I-PDU. If set to false, the SecOC module extracts the Authentic I-PDU from the Secured I-PDU without verification. Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value true Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2181</srcid><srcstatus/><internalId>1094</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00092_2</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>544</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>234</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00064</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCRxCryptographicPdu Parent Container SecOCRxSecuredPduCollection Description This container specifies the Cryptographic Pdu that is received by the SecOC module from the PduR. Configuration Parameters</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2338</srcid><srcstatus/><internalId>1099</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00064</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>545</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>235</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00065</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name: SecOCRxCryptographicPduId
            Description: PDU identifier of the Cryptographic I-PDU assigned by SecOC module.
                         Used by PduR for SecOC_RxIndication
            Multiplicity:1
            Type: EcucIntegerParamDef (Symbolic Name generated for this parameter)
            Range: 0 .. 65535
            Default value: -
            Post-Build Variant Value: false
            Pre-compile time - Link time - Post-build time - scope local
         </description>
         <!-- changed: Replaced SecOC_IfRxIndication by SecOC_RxIndication -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2383</srcid><srcstatus/><internalId>1100</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00065</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>546</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>236</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00066</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCRxCryptographicPduRef Parent Container SecOCRxCryptographicPdu Description Reference to the global Pdu. Multiplicity 1 Type Reference to [ Pdu ] Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2412</srcid><srcstatus/><internalId>1101</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00066</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>547</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>237</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00061</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCRxAuthenticPdu Parent Container SecOCRxSecuredPduCollection Description This container specifies the PDU (that is received by the SecOC module from the PduR) which contains the Secured I-PDU Header and the Authentic I-PDU. Configuration Parameters</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2209</srcid><srcstatus/><internalId>1095</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00061</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>548</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>238</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00093_2</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          Name SecOCAuthPduHeaderLength
          Parent Container SecOCTxSecuredPdu
          Description This parameter indicates the length (in bytes) of the Secured I-PDU Header in the Secured I-PDU. The length of zero means there's no header in the PDU.
          Multiplicity 0..1
          Type EcucIntegerParamDef
          Range 0 .. 4
          Default value 0
          Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time --
          Scope / Dependency scope: local</description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3604</srcid><srcstatus/><internalId>1135</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00093_2</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>571</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>239</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00093_3</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          Name SecOCAuthPduHeaderLength
          Parent Container SecOCRxAuthenticPdu
          Description This parameter indicates the length (in bytes) of the Secured I-PDU Header in the Secured I-PDU. The length of zero means there's no header in the PDU.
          Multiplicity 0..1
          Type EcucIntegerParamDef
          Range 0 .. 4
          Default value 0
          Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time --
          Scope / Dependency scope: local</description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2249</srcid><srcstatus/><internalId>1096</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
           <provcov>
              <linksto>SecOC.ASR21-11.ECUC_SecOC_00093_3</linksto>
              <dstversion>1</dstversion>
           <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>549</internalId></provcov>
        </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>240</internalId></specobject>
      <specobject>
        <id>SecOC.Asr.ECUC_SecOC_00093_4</id>
        <status>approved</status>
        <source>SWS SecureOnboardCommunication, R21-11</source>
        <version>1</version>
        <description>
          Name SecOCAuthPduHeaderLength
          Parent Container SecOCTxAuthenticPdu
          Description This parameter indicates the length (in bytes) of the Secured I-PDU Header in the Secured I-PDU. The length of zero means there's no header in the PDU.
          Multiplicity 0..1
          Type EcucIntegerParamDef
          Range 0 .. 4
          Default value 0
          Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time --
          Scope / Dependency scope: local
        </description>
        <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3755</srcid><srcstatus/><internalId>1140</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00093_4</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>241</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00062</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name: SecOCRxAuthenticPduId
            Description: PDU identifier of the Authentic I-PDU assigned by SecOC module.
                         Used by PduR for SecOC_RxIndication.
            Multiplicity: 1
            Type: EcucIntegerParamDef (Symbolic Name generated for this parameter)
            Range: 0 .. 65535
            Default value: -
            Post-Build Variant Value: false
            Pre-compile time X All Variants Link time - Post-build time - scope local
         </description>
         <!-- changed: Replaced SecOC_IfRxIndication by SecOC_RxIndication -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2282</srcid><srcstatus/><internalId>1097</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00062</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>550</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>242</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00063</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCRxAuthenticPduRef Parent Container SecOCRxAuthenticPdu Description Reference to the global Pdu. Multiplicity 1 Type Reference to [ Pdu ] Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2311</srcid><srcstatus/><internalId>1098</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00063</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>551</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>243</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00012</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCTxPduProcessing Parent Container SecOC Description Contains the parameters to configure the TxPdus to be secured by the SecOC module. Configuration Parameters</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2779</srcid><srcstatus/><internalId>1112</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00012</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>552</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>244</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00079_2</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCAuthenticationBuildAttempts Parent Container SecOCTxPduProcessing Description This parameter specifies the number of authentication build attempts. Multiplicity 0..1 Type EcucIntegerParamDef Range 0 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3146</srcid><srcstatus/><internalId>1123</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_CDDFRESHNESSINTERFACES</srcid><srcstatus/><internalId>1211</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_RTE_DATAIDLEN</srcid><srcstatus/><internalId>1217</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_RTE_NOFV</srcid><srcstatus/><internalId>1218</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_SWCFRESHNESSINTERFACES</srcid><srcstatus/><internalId>1219</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1229</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1267</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1270</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00079_2</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>553</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>245</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00097</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>Name SecOCAuthInfoTruncLength Parent Container SecOCTxPduProcessing Description This parameter defines the length in bits of the authentication code to be included in the payload of the Secured I-PDU. Multiplicity 1 Type EcucIntegerParamDef Range 1 .. 65535 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <!-- changed: Replaced 'SecOCAuthInfoTruncLength' by SecOCAuthInfoTxLength -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2871</srcid><srcstatus/><internalId>1116</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_02_TP_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_CSMMODE_TP_02_03_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_DATAIDLEN32BITS_TP_02_03</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00097</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>554</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>246</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00014</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>:Name SecOCDataId Parent Container SecOCTxPduProcessing Description This parameter defines a numerical
            identifier for the Secured I PDU.Multiplicity 1Type EcucIntegerParamDefRange 0 ..
            4294967295Default value -Post-Build Variant Value trueValue Configuration Class Pre-compile
            time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X
            VARIANT-POST-BUILDScope / Dependency scope: local Comment: In most cases SecOCDataId must
            be unique.</description>
         <!-- changed: Replaced 'Range 0 ..65353' by Range 0 ..4294967295 -->
         <!-- changed: Replaced 'a unique numerical identifier' by Range a numerical identifier -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_PBCFG_VARIANTS</srcid><srcstatus/><internalId>1222</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_09_IF_AUTHPDU_DYNAMIC_LENGTH</srcid><srcstatus/><internalId>1480</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2901</srcid><srcstatus/><internalId>1117</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00014</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>555</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>247</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00021</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCFreshnessValueId Parent Container SecOCTxPduProcessing Description This parameter defines the Id of the Freshness Value. The Freshness Value might be a normal counter or a time value. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 65535 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_PBCFG_VARIANTS</srcid><srcstatus/><internalId>1222</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_09_IF_AUTHPDU_DYNAMIC_LENGTH</srcid><srcstatus/><internalId>1480</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_09_16_IF_TP_INDEPENDENT_FRESHNESS</srcid><srcstatus/><internalId>1482</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2950</srcid><srcstatus/><internalId>1118</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00021</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>556</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>248</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00015</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCFreshnessValueLength Parent Container SecOCTxPduProcessing Description This parameter defines the complete length in bits of the Freshness Value. As long as the key doesn't change the counter shall not overflow. The length of the counter shall be determined based on the expected life time of the corresponding key and frequency of usage of the counter. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 64 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2982</srcid><srcstatus/><internalId>1119</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_PBCFG_VARIANTS</srcid><srcstatus/><internalId>1222</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_01_TP_SECUREDAREA</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_10_TP_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1477</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_02_TP_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_03_04_05_TP_VERF_COUNTERS</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_09_IF_AUTHPDU_DYNAMIC_LENGTH</srcid><srcstatus/><internalId>1480</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_09_16_IF_TP_INDEPENDENT_FRESHNESS</srcid><srcstatus/><internalId>1482</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_GETVERSIONINFO</srcid><srcstatus/><internalId>1483</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_07_08_TP_CANCELTRANSMIT</srcid><srcstatus/><internalId>1484</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_CSMMODE_TP_02_03_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_DATAIDLEN32BITS_TP_02_03</srcid><srcstatus/><internalId>1599</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_PDULENGTHTYPE32BITS_01_TP</srcid><srcstatus/><internalId>1602</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00015</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>557</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>249</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00096</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>Name SecOCFreshnessValueTxLength Parent Container SecOCTxPduProcessing Description This parameter defines the length in bits of the Freshness Value to be included in the payload of the Secured I-PDU. This length is specific to the least significant bits of the complete Freshness Counter. If the parameter is 0 no Freshness Value is included in the Secured I-PDU. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 64 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local dependency: SecOCFreshnessCounterTxLength "smaller than or equal to" SecOCFreshnessCounterLength</description>
         <!-- changed: Replaced SecOCFreshnessValueTruncLength by SecOCFreshnessValueTxLength -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3026</srcid><srcstatus/><internalId>1120</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_PBCFG_VARIANTS</srcid><srcstatus/><internalId>1222</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_03_04_05_TP_VERF_COUNTERS</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00096</linksto>
               <dstversion>2</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>558</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>250</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00084</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCProvideTxTruncatedFreshnessValue Parent Container SecOCTxPduProcessing Description This parameter specifies if the Tx query freshness function provides the truncated freshness info instead of generating this by SecOC In this case, SecOC shall add this data to the Authentic PDU instead of truncating the freshness value. Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3274</srcid><srcstatus/><internalId>1126</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_14_TP_GETTXFRESHNESSTRUNCDATA</srcid><srcstatus/><internalId>1503</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00084</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>559</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>251</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00103</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCReAuthenticateAfterTriggerTransmit Parent Container SecOCTxPduProcessing Description This parameter specifies if the authentication information of the Secured PDU is updated after the successful transmission of a triggered transmission was confirmed. TRUE if the authentication information shall be updated after triggered transmission. FALSE if the authentication information shall not be updated after triggered transmission. Note: This parameter should only be set to FALSE if the upper layer SecOC_IfTransmit have the same or a higher frequency than the SecOC_TriggerTransmit calls. Multiplicity 1 Type EcucBooleanParamDef Default value true Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3303</srcid><srcstatus/><internalId>1127</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00103</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>560</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>252</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00101</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCTxPduUnusedAreasDefault Parent Container SecOCTxPduProcessing Description The AUTOSAR SecOC module fills not used areas of a transmitted Secured Pdu or a transmitted Cryptographic Pdu with this byte pattern. This attribute is mandatory to avoid undefined behavior. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 255 Default value 0 Post-Build Variant Value false Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME, VARIANT-POST- BUILD Post-build time -- Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3344</srcid><srcstatus/><internalId>1128</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00101</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>561</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>253</internalId></specobject>
      <!-- SecOC.ASR21-11.ECUC_SecOC_00085; [approved not implemented yet] -->
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00010</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCSameBufferPduRef Parent Container SecOCTxPduProcessing Description This reference is used to collect Pdus that are using the same SecOC buffer. Multiplicity 0..1 Type Reference to [ SecOCSameBufferPduCollection ] Post-Build Variant Multiplicity false Post-Build Variant Value false Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_SAMEBUFFER_09_17_IF_FRESHNESS_RETVAL_E_NOT_OK_RETRIES_NOT_EXCEEDED</srcid><srcstatus/><internalId>1260</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_SAMEBUFFER_09_17_IF_FRESHNESS_RETVAL_E_NOT_OK_RETRIES_EXCEEDED</srcid><srcstatus/><internalId>1261</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_SAMEBUFFER_09_17_IF_MACGEN_RETVAL_E_NOT_OK_RETRIES_NOT_EXCEEDED</srcid><srcstatus/><internalId>1262</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_SAMEBUFFER_09_17_IF_MACGEN_RETVAL_E_NOT_OK_RETRIES_EXCEEDED</srcid><srcstatus/><internalId>1263</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3225</srcid><srcstatus/><internalId>1125</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00010</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>563</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>254</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00013</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name SecOCTxAuthServiceConfigRef
            Description This reference is used to define which crypto service function is called for authentication (MAC based or signature based).
            Multiplicity 1
            Type Symbolic name reference to [ CsmJob ]
            Post-Build Variant Value false
         </description>
         <!-- changed: Removed If PDUs with a dynamic length are used (e.g. CanTP or Dynamic Length PDUs) a MAC algorithm has to be chosen, that is not vulnerable to length extension attack (e.g. CMAC/HMAC). -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_02_TP_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_09_16_IF_TP_INDEPENDENT_FRESHNESS</srcid><srcstatus/><internalId>1482</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_08_TP_SIGNATUREGENERATE</srcid><srcstatus/><internalId>1504</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_CSMMODE_TP_02_03_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_DATAIDLEN32BITS_TP_02_03</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2833</srcid><srcstatus/><internalId>1115</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00013</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>255</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00023</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCTxAuthenticPduLayer Parent Container SecOCTxPduProcessing Description This container specifies the Pdu that is received by the SecOC module from the PduR. For this Pdu the Mac generation is provided. Configuration Parameters</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_4132</srcid><srcstatus/><internalId>1152</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00023</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>565</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>256</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00075_2</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCPduType Parent Container SecOCTxAuthenticPduLayer Description This parameter defines API Type to use for communication with PduR. Multiplicity 1 Type EcucEnumerationParamDef Range SECOC_IFPDU Interface communication API SECOC_TPPDU Transport Protocol communication API Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_4148</srcid><srcstatus/><internalId>1153</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_03_04_05_TP_VERF_COUNTERS</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_09_IF_AUTHPDU_DYNAMIC_LENGTH</srcid><srcstatus/><internalId>1480</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_16_TP_TRUNCATE_AUTH</srcid><srcstatus/><internalId>1481</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_09_16_IF_TP_INDEPENDENT_FRESHNESS</srcid><srcstatus/><internalId>1482</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_07_08_TP_CANCELTRANSMIT</srcid><srcstatus/><internalId>1484</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_15_TP_TRANSMIT_OVERWRITE</srcid><srcstatus/><internalId>1485</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_11_TP_MACGENERATE_CSM_NOT_OK</srcid><srcstatus/><internalId>1491</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_16_TP_GETTXFRESHNESS_NOT_OK</srcid><srcstatus/><internalId>1493</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED</srcid><srcstatus/><internalId>1495</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED_WRONGINPUT</srcid><srcstatus/><internalId>1496</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_SEGMENTED_RETRY</srcid><srcstatus/><internalId>1497</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_TP_PDUR_ERRORS</srcid><srcstatus/><internalId>1498</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00075_2</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>566</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>257</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00026</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>:Name SecOCTxAuthenticLayerPduId Description PDU identifier assigned by SecOC
            module. Used by PduR for SecOC_Transmit.Multiplicity 1Type EcucIntegerParamDef (Symbolic
            Name generated for this parameter)Range 0 .. 65535Default value -Post-Build Variant Value
            trueValue Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X
            VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILDScope / Dependency scope:
            local</description>
         <!-- changed: Replaced SecOC_[If|Tp]Transmit by SecOC_Transmit -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_09_16_IF_TP_INDEPENDENT_FRESHNESS</srcid><srcstatus/><internalId>1482</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_4183</srcid><srcstatus/><internalId>1154</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00026</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>567</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>258</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00025</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCTxAuthenticLayerPduRef Parent Container SecOCTxAuthenticPduLayer Description Reference to the global Pdu. Multiplicity 1 Type Reference to [ Pdu ] Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_4220</srcid><srcstatus/><internalId>1155</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00025</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>568</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>259</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00024</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Choice container Name SecOCTxSecuredPduLayer Parent Container SecOCTxPduProcessing Description This container specifies the Pdu that is transmitted by the SecOC module to the PduR after the Mac was generated. Container Choices Container Name Multiplicity Scope / Dependency SecOCTxSecuredPdu 0..1 This container specifies one Pdu that is transmitted by the SecOC module to the PduR after the Mac was generated. This Pdu contains the cryptographic information. SecOCTxSecuredPduCollectio n 0..1 This container specifies the Pdu that is transmitted by the SecOC module to the PduR after the Mac was generated. Two separate Pdus are transmitted to the PduR: Authentic I-PDU and Cryptographic I-PDU.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3530</srcid><srcstatus/><internalId>1133</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00024</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>569</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>260</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00070</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCTxSecuredPdu Parent Container SecOCTxSecuredPduLayer Description This container specifies one Pdu that is transmitted by the SecOC module to the PduR after the Mac was generated. This Pdu contains the cryptographic information.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3564</srcid><srcstatus/><internalId>1134</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00070</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>570</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>261</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00028</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>:Name SecOCTxSecuredLayerPduId Description PDU identifier assigned by SecOC
            module. Used by PduR for confirmation (SecOC_[Tp]TxConfirmation) and for
            TriggerTransmit.Multiplicity 1Type EcucIntegerParamDef (Symbolic Name generated for this
            parameter)Range 0 .. 65535Default value -Post-Build Variant Value true Link time X
            VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILDScope / Dependency scope:
            local</description>
         <!-- changed: Replaced SecOC_[If|Tp]TxConfirmation by SecOC_[Tp]TxConfirmation -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_09_16_IF_TP_INDEPENDENT_FRESHNESS</srcid><srcstatus/><internalId>1482</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3637</srcid><srcstatus/><internalId>1136</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00028</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>572</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>262</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00027</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCTxSecuredLayerPduRef Parent Container SecOCTxSecuredPdu Description Reference to the global Pdu. Multiplicity 1 Type Reference to [ Pdu ] Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3667</srcid><srcstatus/><internalId>1137</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00027</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>573</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>263</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00071</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCTxSecuredPduCollection Parent Container SecOCTxSecuredPduLayer Description This container specifies the Pdu that is transmitted by the SecOC module to the PduR after the Mac was generated. Two separate Pdus are transmitted to the PduR: Authentic I-PDU and Cryptographic I-PDU. Configuration Parameters</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3696</srcid><srcstatus/><internalId>1138</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00071</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>574</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>264</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00072</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCTxAuthenticPdu Parent Container SecOCTxSecuredPduCollection Description This container specifies the PDU (that is transmitted by the SecOC module to the PduR) which contains the Secured I-PDU Header and the Authentic I-PDU. Configuration Parameters</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3714</srcid><srcstatus/><internalId>1139</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00072</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>575</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>265</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00055</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name: SecOCTxAuthenticPduId
            Description: PDU identifier of the Authentic I-PDU assigned by SecOC module.
                         Used by PduR for confirmation (SecOC_TxConfirmation) and for TriggerTransmit.
            Multiplicity: 1
            Type: EcucIntegerParamDef (Symbolic Name generated for this parameter)
            Range: 0 .. 65535
            Default value: -
            Post-Build Variant Value: false
            Pre-compile time X All Variants Link time - Post-build time - scope local
         </description>
         <!-- changed: Replaced SecOC_IfTxConfirmation by SecOC_TxConfirmation -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3788</srcid><srcstatus/><internalId>1141</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00055</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>266</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00056</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCTxAuthenticPduRef Parent Container SecOCTxAuthenticPdu Description Reference to the global Pdu. Multiplicity 1 Type Reference to [ Pdu ] Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3818</srcid><srcstatus/><internalId>1142</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00056</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>267</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00073</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCTxCryptographicPdu Parent Container SecOCTxSecuredPduCollection Description This container specifies the Cryptographic Pdu that is transmitted by the SecOC module to the PduR after the Mac was generated. Configuration Parameters</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3845</srcid><srcstatus/><internalId>1143</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00073</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>268</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00057</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name: SecOCTxCryptographicPduId
            Description: PDU identifier of the Cryptographic I-PDU assigned by SecOC module.
                         Used by PduR for confirmation (SecOC_TxConfirmation) and for TriggerTransmit.
            Multiplicity: 1
            Type: EcucIntegerParamDef (Symbolic Name generated for this parameter)
            Range: 0 .. 65535
            Default value: -
            Post-Build Variant Value: false
            Pre-compile time X All Variants Link time - Post-build time - scope local
         </description>
         <!-- changed: Replaced SecOC_IfTxConfirmation by SecOC_TxConfirmation -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3890</srcid><srcstatus/><internalId>1144</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00057</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>580</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>269</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00058</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Name SecOCTxCryptographicPduRef Parent Container SecOCTxCryptographicPdu Description Reference to the global Pdu. Multiplicity 1 Type Reference to [ Pdu ] Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3920</srcid><srcstatus/><internalId>1145</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00058</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>581</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>270</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00074</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCUseMessageLink Parent Container SecOCRxSecuredPduCollection, SecOCTxSecuredPduCollection Description SecOC links an Authentic I-PDU and Cryptographic I-PDU together by repeating a specific part (Message Linker) of the Authentic I-PDU in the Cryptographic I-PDU. Configuration Parameters</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2439</srcid><srcstatus/><internalId>1102</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3947</srcid><srcstatus/><internalId>1146</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00074</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>582</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>271</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00060</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name: SecOCMessageLinkLen
            Description: Length of the Message Linker inside the Authentic I-PDU in bits.
            Multiplicity: 1
            Type: EcucIntegerParamDef
            Range: 1 .. 65535
            Default value: -
            Post-Build Variant Value: false
            Pre-compile time X All Variants Link time - Post-build time - scope local
         </description>
         <!-- changed: Replaced 'Range 0 ..65535' by Range 1 ..65535 -->
         <comment>
            Note: The value 0 for this configuration parameter can be excluded because a message link
                  of length 0 would imply that the message link functionality will not be used and
                  this can be achieved by not enabling the SecOCUseMessageLink container.
         </comment>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2471</srcid><srcstatus/><internalId>1103</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3979</srcid><srcstatus/><internalId>1147</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00060</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>583</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>272</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00059</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>
            Name: SecOCMessageLinkPos
            Parent Container: SecOCUseMessageLink
            Description: The position of the Message Linker inside the Authentic I-PDU in bits.
                         The bit counting is done according to 01068 and the bit ordering is done according to TPS_SYST_01069.
            Multiplicity: 1
            Type: EcucIntegerParamDef
            Range: 0 .. 65535
            Default value: -
            Post-Build Variant Value: false
            Pre-compile time X All Variants Link time -Post-build time - scope local
         </description>
         <comment>
          Through the configuration parameter SecOCBitCountingAndOrder we can select between:
            - SECOC_INCREASING_ORDER_MONOTONE_COUNTING_FORMAT: monotone Bit counting and increasing bit order.
            - SECOC_DECREASING_ORDER_SAWTOOTH_COUNTING_FORMAT:"sawtooth" Bit counting in accordance with TPS_SYST_01068 and  "Decreasing"  bit order in accordance with TPS_SYST_01069.
         </comment>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2498</srcid><srcstatus/><internalId>1104</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_4006</srcid><srcstatus/><internalId>1148</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00059</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>584</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>273</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00086</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCTxPduSecuredArea Parent Container SecOCTxPduProcessing Description This container specifies an area in the Authentic I-Pdu that will be the input to the Authenticator generation algorithm. If this container does not exist in the configuration the complete Authentic I-Pdu will be the input to the Authenticator generation algorithm. Configuration Parameters</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_4036</srcid><srcstatus/><internalId>1149</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00086</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>585</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>274</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00088</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name: SecOCSecuredTxPduLength
            Description: The length of the ares for storing secured Pdu.
            Parent Container SecOCTxPduSecuredArea
            Multiplicity:1
            Type: EcucIntegerParamDef (Symbolic Name generated for this parameter)
            Range: 0 .. 65535
            Default value: -
            Post-Build Variant Value: true
            Pre-compile time X Link time X Post-build time X scope local
         </description>
         <!-- changed: Changed Range: 0 .. 4294967295 by Range: 0 .. 65535 -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_4071</srcid><srcstatus/><internalId>1150</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00088</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>586</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>275</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00087</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name: SecOCSecuredTxPduOffset
            Description: The Start Position of SecOCSecuredTxPduLength.
            Parent Container SecOCTxPduSecuredArea
            Multiplicity:1
            Type: EcucIntegerParamDef (Symbolic Name generated for this parameter)
            Range: 0 .. 65535
            Default value: 0
            Post-Build Variant Value: true
            Pre-compile time X Link time X Post-build time X scope local
         </description>
         <!-- changed: Changed Range: 0 .. 4294967295 by Range: 0 .. 65535 -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_4101</srcid><srcstatus/><internalId>1151</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00087</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>587</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>276</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.ECUC_SecOC_00089</id>
         <status>approved</status>
         <source>SWS SecureOnboardCommunication, R21-11</source>
         <version>1</version>
         <description>Container Name SecOCRxPduSecuredArea Parent Container SecOCRxPduProcessing Description This container specifies an area in the Authentic I-Pdu that will be the input to the Authenticator verification algorithm. If this container does not exist in the configuration the complete Authentic I-Pdu will be the input to the Authenticator verification algorithm. Configuration Parameters</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2528</srcid><srcstatus/><internalId>1105</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00089</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>588</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>277</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00091</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name: SecOCSecuredRxPduLength
            Description: This parameter defines the length (in bytes) of the area within the Pdu which is secured
            Parent Container SecOCRxPduSecuredArea
            Multiplicity:1
            Type: EcucIntegerParamDef (Symbolic Name generated for this parameter)
            Range: 0 .. 65535
            Default value: -
            Post-Build Variant Value: true
            Pre-compile time X Link time X Post-build time X scope local
         </description>
         <!-- changed: Changed Range: 0 .. 4294967295 by Range: 0 .. 65535 -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2564</srcid><srcstatus/><internalId>1106</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00091</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>589</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>278</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.ECUC_SecOC_00090</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name: SecOCSecuredRxPduOffset
            Description: This parameter defines the start position (offset in bytes) of the area within the Pdu which is secured
            Parent Container SecOCRxPduSecuredArea
            Multiplicity:1
            Type: EcucIntegerParamDef (Symbolic Name generated for this parameter)
            Range: 0 .. 65535
            Default value: 0
            Post-Build Variant Value: true
            Pre-compile time X Link time X Post-build time X scope local
         </description>
         <!-- changed: Changed Range: 0 .. 4294967295 by Range: 0 .. 65535 -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2594</srcid><srcstatus/><internalId>1107</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.ECUC_SecOC_00090</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>590</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>279</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00034_2</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            If the secured area feature is not set the SecOC module shall construct the DataToAuthenticator,
            i.e. the data that is used to calculate the Authenticator. DataToAuthenticator is formed by concatenating
            the Data Id (parameter SecOCDataId), the complete Authentic I-PDU and the complete Freshness Value corresponding
            to SecOCFreshnessValueID in the given order. The Data Id and the Freshness Value shall be encoded in Big Endian byte order for that purpose..
         </description>
         <!-- changed: Added If the secured area feature is not set -->
         <!-- Replaced: "the secured part of the Authentic I-PDU" by "the complete Authentic I-PDU" -->
         <!-- changed: Replaced the full 16 bit representation of the Data Id" by "the Data Id" -->
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_09_IF_AUTHPDU_DYNAMIC_LENGTH</srcid><srcstatus/><internalId>1480</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_26_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1520</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_27_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1521</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_28_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1522</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_27_DYN_LEN_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1552</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_27_STATIC_LEN_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1553</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_621</srcid><srcstatus/><internalId>964</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00034</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>329</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>280</internalId></specobject>
      <specobject>
         <id>SecOC.ASR430.Rx.SWS_SecOC_00236_BUSY</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            If the Rx freshness request function returns E_BUSY, the authentication build
            counter for this PDU shall be incremented. If the number of authentication attempts has
            reached SecOCAuthenticationBuildAttempts, the SecOC module shall remove the I-PDU from its
            internal buffer.
         </description>
         <comment>
            The DET report is rejected, because development error detection is not supported.
            In case of the return value E_BUSY, the authentication build counter shall be incremented.
         </comment>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1264</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1266</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1267</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1751</srcid><srcstatus/><internalId>890</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2523</srcid><srcstatus/><internalId>934</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00236</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>311</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>281</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00230</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If SecOCQueryFreshnessValue = CFUNC AND SecOCProvideTxTruncatedFreshnessValue= TRUE for a PDU configuration, SecOC calls a function named &amp;lt;SecOCFreshnessValueFuncName&amp;gt;, to get the current freshness for TX messages.</description>
         <!-- changed: Replaced SecOC_GetTxFreshnessTruncData by  &amp;lt;SecOCFreshnessValueFuncName&amp;gt -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Tx_Cfg.h_378</srcid><srcstatus/><internalId>730</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_CDDFRESHNESSINTERFACES</srcid><srcstatus/><internalId>1211</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_14_TP_GETTXFRESHNESSTRUNCDATA</srcid><srcstatus/><internalId>1503</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00230</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>305</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>282</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_91003</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>Service Name &amp;lt;SecOCFreshnessValueFuncName&amp;gt Syntax Std_ReturnType &amp;lt;SecOCFreshnessValueFuncName&amp;gt ( uint16 SecOCFreshnessValueID, uint8* SecOCFreshnessValue, uint32* SecOCFreshnessValueLength, uint8* SecOCTruncatedFreshnessValue, uint32* SecOCTruncatedFreshnessValueLength ) Service ID 0x51 [hex] Sync/Async Synchronous Reentrancy Reentrant Parameters (in) SecOCFreshness ValueID Holds the identifier of the freshness value. Parameters (inout) SecOCFreshness ValueLength Holds the length of the provided freshness in bits. SecOCTruncated FreshnessValue Length Provides the truncated freshness length configured for this freshness. The function may adapt the value if needed or can leave it unchanged if the configured length and provided length is the same. Parameters (out) SecOCFreshness Value Holds the current freshness value. SecOCTruncated FreshnessValue Holds the truncated freshness to be included into the Secured I-PDU. The parameter is optional. Return value Std_ReturnType E_OK: request successful E_NOT_OK: request failed, a freshness value cannot be provided due to general issues for freshness or this FreshnessValueId. E_BUSY: The freshness information can temporarily not be provided. Description This interface is used by the SecOC to obtain the current freshness value. The interface function provides also the truncated freshness transmitted in the secured I- PDU. Available via SecOC.h</description>
         <!-- changed: Replaced SecOC_GetTxFreshnessTruncData by  &amp;lt;SecOCFreshnessValueFuncName&amp;gt -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Tx_Cfg.h_378</srcid><srcstatus/><internalId>730</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_CDDFRESHNESSINTERFACES</srcid><srcstatus/><internalId>1211</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_14_TP_GETTXFRESHNESSTRUNCDATA</srcid><srcstatus/><internalId>1503</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91003</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>460</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>283</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00231</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If SecOCQueryFreshnessValue = CFUNC AND SecOCProvideTxTruncatedFreshnessValue= FALSE for a PDU configuration, SecOC calls a function named &amp;lt;SecOCFreshnessValueFuncName&amp;gt;, to get the current freshness for TX messages.</description>
         <!-- changed: Replaced SecOC_GetTxFreshness by &amp;lt;SecOCFreshnessValueFuncName&amp;gt; -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Tx_Cfg.h_349</srcid><srcstatus/><internalId>729</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1229</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00231</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>284</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_91004</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>Service Name &amp;lt;SecOCFreshnessValueFuncName&amp;gt; Syntax Std_ReturnType &amp;lt;SecOCFreshnessValueFuncName&amp;gt; ( uint16 SecOCFreshnessValueID, uint8* SecOCFreshnessValue, uint32* SecOCFreshnessValueLength ) Service ID [hex] 0x52 Sync/Async Synchronous Reentrancy Reentrant Parameters (in) SecOCFreshness ValueID Holds the identifier of the freshness value. Parameters (inout) SecOCFreshness ValueLength Holds the length of the provided freshness in bits. Parameters (out) SecOCFreshness Value Holds the current freshness value Return value Std_ReturnType E_OK: request successful E_NOT_OK: request failed, a freshness value cannot be provided due to general issues for freshness or this FreshnessValueId. E_BUSY: The freshness information can temporarily not be provided. Description This API returns the freshness value from the Most Significant Bits in the first byte in the array (SecOCFreshnessValue), in big endian format. Available via SecOC.h</description>
         <!-- changed: Replaced SecOC_GetTxFreshness by &amp;lt;SecOCFreshnessValueFuncName&amp;gt; -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Tx_Cfg.h_349</srcid><srcstatus/><internalId>729</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1229</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91004</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>459</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>285</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00232</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If SecOCQueryFreshnessValue = CFUNC for a PDU configuration, SecOC calls a function with the signature described in SWS_SecOC_91005 to indicate that the Secured I-PDU has been successfully initiated for transmission.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Tx_Cfg.h_413</srcid><srcstatus/><internalId>731</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1115</srcid><srcstatus/><internalId>995</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1229</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00232</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>307</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>286</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_91005</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>Service Name &amp;lt;SecOCSecuredPDUTransmittedFuncName&amp;gt; Syntax void &amp;lt;SecOCSecuredPDUTransmittedFuncName&amp;gt; ( uint16 SecOCFreshnessValueID ) Service ID [hex] 0x4d Sync/Async Synchronous Reentrancy Reentrant Parameters (in) SecOCFreshnessValueID Holds the identifier of the freshness value. Parameters None (inout) Parameters (out) None Return value None Description This interface is used by the SecOC to indicate that the Secured I-PDU has been initiated for transmission. Available via SecOC.h</description>
         <!-- changed: Replaced SecOC_SPduTxConfirmation by &amp;lt;SecOCSecuredPDUTransmittedFuncName&amp;gt; -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Tx_Cfg.h_413</srcid><srcstatus/><internalId>731</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1115</srcid><srcstatus/><internalId>995</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91005</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>287</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00233</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            If SecOCQueryFreshnessValue = RTE for a PDU configuration, with freshness value length
            not equal to 0, SecOC calls the service operation TxFreshnessManagement_SPduTxConfirmation
            to indicate that the Secured I-PDU has been successfully initiated for transmission.
         </description>
         <!-- changed: Replaced FreshnessManagement_SPduTxConfirmation by TxFreshnessManagement_SPduTxConfirmation -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1116</srcid><srcstatus/><internalId>996</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1270</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00233</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>308</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>288</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_00250</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If SecOCQueryFreshnessValue = CFUNC AND SecOCUseAuthDataFreshness = FALSE for a PDU configuration, SecOC queries a function named &amp;lt;SecOCFreshnessValueFuncNames&amp;gt;, to get the current freshness for RX messages.</description>
         <!-- changed: Replaced SecOC_GetRxFreshness by &amp;lt;SecOCFreshnessValueFuncNames&amp;gt; -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Rx_Cfg.h_368</srcid><srcstatus/><internalId>724</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_00250</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>326</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>289</internalId></specobject>
      <specobject>
         <id>SecOC.Asr.Correction.SWS_SecOC_91007</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>Service Name &amp;lt;SecOCFreshnessValueFuncNames&amp;gt; Syntax Std_ReturnType &amp;lt;SecOCFreshnessValueFuncNames&amp;gt; ( uint16 SecOCFreshnessValueID, const uint8* SecOCTruncatedFreshnessValue, uint32 SecOCTruncatedFreshnessValueLength, uint16 SecOCAuthVerifyAttempts, uint8* SecOCFreshnessValue, uint32* SecOCFreshnessValueLength ) Service ID [hex] 0x4f Sync/Async Synchronous Reentrancy Reentrant Parameters (in) SecOCFreshness ValueID Holds the identifier of the freshness value. SecOCTruncated FreshnessValue Holds the truncated freshness value that was contained in the Secured I-PDU. SecOCTruncated FreshnessValue Length Holds the length in bits of the truncated freshness value. SecOCAuthVerify Attempts Holds the number of authentication verify attempts of this PDU since the last reception. The value is 0 for the first attempt and incremented on every unsuccessful verification attempt. Parameters (inout) SecOCFreshness ValueLength Holds the length in bits of the freshness value. Parameters (out) SecOCFreshness Value Holds the freshness value to be used for the calculation of the authenticator. Return value Std_ReturnType E_OK: request successful E_NOT_OK: request failed, a freshness value cannot be provided due to general issues for freshness or this FreshnessValueId. E_BUSY: The freshness information can temporarily not be provided. Description This interface is used by the SecOC to obtain the current freshness value. Available via SecOC.h</description>
         <!-- changed: Replaced SecOC_GetRxFreshness by &amp;lt;SecOCFreshnessValueFuncNames&amp;gt; -->
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Rx_Cfg.h_368</srcid><srcstatus/><internalId>724</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         <providescoverage>
            <provcov>
               <linksto>SecOC.ASR21-11.SWS_SecOC_91007</linksto>
               <dstversion>1</dstversion>
            <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>457</internalId></provcov>
         </providescoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>290</internalId></specobject>
   </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00011</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>All SecOC data (e.g. Freshness Value, Authenticator, Data Identifier, SecOC message link data,...) that is directly or indirectly transmitted to the other side of a communication link shall be encoded in Big Endian byte order so that each SecOC module interprets the data in the same way.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00011</srcid><srcstatus/><internalId>8</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>291</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00261</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The Secured I-PDU Header shall indicate the length of the Authentic I-PDU in bytes. The length of the Header shall be configurable by the parameter SecOCAuthPduHeaderLength. Note: the SecOC supports combined usage of authentication data in a separate message (secured PDU collection) and Secured I-PDU Header. Also the SecOC covers dynamic length Authentic I-PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00261</srcid><srcstatus/><internalId>9</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>292</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00094</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the parameter SecOCFreshnessValueTruncLength is configured to a smaller length than the actual freshness value, SecOC shall include only the least significant bits of the freshness value up to SecOCFreshnessValueTruncLength within the secured I-PDU. If the parameter SecOCFreshnessValueTruncLength is configured to 0, the freshness value shall not be included in the secured I-PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00094</srcid><srcstatus/><internalId>10</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedSecOCTruncLengthToSecOCTxLength</srcid><srcstatus/><internalId>706</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedSecOCTruncLengthToSecOCTxLength -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>293</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00219</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCUseAuthDataFreshness is set to TRUE, SecOC shall use a part of the Authentic I-PDU as freshness. In this case, SecOCAuthDataFreshnessStartPosition determines the start position in bits of the freshness inside the Authentic I-PDU and SecOCAuthDataFreshnessLen determines its length in bits.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00219</srcid><srcstatus/><internalId>11</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>294</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00220</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The Freshness Manager provides or receives freshness information in interface functions as byte arrays. The freshness is always aligned to the MSB of the first byte in the array. The 15th bit of the freshness is the MSB of the 2nd byte and so on. Unused bits of the freshness array must be set to 0. The associated length information must be given in bits.</description>
      <comment>
       This requirement is not applicable, new feature which is not available
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00220</srcid><srcstatus/><internalId>12</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>295</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00221</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCQueryFreshnessValue = CFUNC AND SecOCProvideTxTruncatedFreshnessValue= TRUE for a PDU configuration, the SecOC calls the interface function SecOC_GetTxFreshnessTruncData whenever the DataToAuthenticator is constructed for the respective PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00221</srcid><srcstatus/><internalId>13</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCCalloutFunctionNames</srcid><srcstatus/><internalId>713</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCCalloutFunctionNames -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>296</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00222</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCQueryFreshnessValue = CFUNC AND SecOCProvideTxTruncatedFreshnessValue= FALSE for a PDU configuration, the SecOC calls the interface function SecOC_GetTxFreshness whenever the DataToAuthenticator is constructed for the respective PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00222</srcid><srcstatus/><internalId>14</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCCalloutFunctionNames</srcid><srcstatus/><internalId>713</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCCalloutFunctionNames -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>297</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00223</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCQueryFreshnessValue = RTE AND SecOCProvideTxTruncatedFreshnessValue= TRUE for a PDU configuration, the SecOC calls the service operation FreshnessManagement_GetTxFreshnessTruncData whenever the DataToAuthenticator is constructed for the respective PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00223</srcid><srcstatus/><internalId>15</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/FreshnessManagementInterfaceName</srcid><srcstatus/><internalId>699</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/FreshnessManagementInterfaceName -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>298</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00224</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCQueryFreshnessValue = RTE AND SecOCProvideTxTruncatedFreshnessValue= FALSE for a PDU configuration, the SecOC calls the service operation FreshnessManagement_GetTxFreshness whenever the DataToAuthenticator is constructed for the respective PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00224</srcid><srcstatus/><internalId>16</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/FreshnessManagementInterfaceName</srcid><srcstatus/><internalId>699</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/FreshnessManagementInterfaceName -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>299</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00225</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For every transmission request that is queued to SecOC an authentication build counter shall be maintained.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00225</srcid><srcstatus/><internalId>17</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>300</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00226</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Upon the initial processing of a transmission request of a secured I-PDU SecOC shall set the authentication build counter to 0.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00226</srcid><srcstatus/><internalId>18</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>301</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00227</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If either the query of the freshness function (e.g. SecOC_GetTxFreshness()) returns E_BUSY or the calculation of the authenticator (e.g. Csm_MacGenerate()) returns E_BUSY, QUEUE_FULL or any other recoverable error, the authentication build counter shall be incremented.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00227</srcid><srcstatus/><internalId>19</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/NonRecoverableError</srcid><srcstatus/><internalId>698</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/NonRecoverableError -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>302</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00228</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If building the authentication has failed and the authentication build counter has not yet reached the configuration value SecOCAuthenticationBuildAttempts, the freshness attempt and authenticator calculation shall be retried in the next call to the Tx main function.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00228</srcid><srcstatus/><internalId>20</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>303</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00229</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the authentication build counter has reached the configuration value SecOCAuthenticationBuildAttempts, or the query of the freshness function returns E_NOT_OK or the calculation of the authenticator has returned a non-recoverable error such as returning E_NOT_OK or KEY_FAILURE, the SecOC module shall use SecOCDefaultAuthenticationInformationPattern for all the bytes of Freshness Value and Authenticator to build the Authentication Information if sending SecOCDefaultAuthenticationInformationPattern is enabled by service SecOC_SendDefaultAuthenticationInformation . If sending SecOCDefaultAuthenticationInformationPattern is not enabled, the SecOc module shall remove the Authentic I-PDU from its internal buffer and cancel the transmission request.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00229</srcid><srcstatus/><internalId>21</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/NonRecoverableError</srcid><srcstatus/><internalId>698</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/NonRecoverableError -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>304</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00230</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCQueryFreshnessValue = CFUNC AND SecOCProvideTxTruncatedFreshnessValue= TRUE for a PDU configuration, SecOC calls a function named SecOC_GetTxFreshnessTruncData, to get the current freshness for TX messages.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00230</srcid><srcstatus/><internalId>282</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCCalloutFunctionNames</srcid><srcstatus/><internalId>713</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCCalloutFunctionNames -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>305</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00231</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCQueryFreshnessValue = CFUNC AND SecOCProvideTxTruncatedFreshnessValue= FALSE for a PDU configuration, SecOC calls a function named SecOC_GetTxFreshness, to get the current freshness for TX messages.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00231</srcid><srcstatus/><internalId>284</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCCalloutFunctionNames</srcid><srcstatus/><internalId>713</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCCalloutFunctionNames -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>306</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00232</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCQueryFreshnessValue = CFUNC for a PDU configuration, SecOC calls a function with the signature described in SWS_SecOC_91005 to indicate that the Secured I-PDU has been successfully initiated for transmission.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00232</srcid><srcstatus/><internalId>286</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>307</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00233</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCQueryFreshnessValue = RTE for a PDU configuration, SecOC calls the service operation FreshnessManagement_SPduTxConfirmation to indicate that the Secured I-PDU has been successfully initiated for transmission.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_91002_7</srcid><srcstatus/><internalId>174</internalId></linkedfrom><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00233</srcid><srcstatus/><internalId>288</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/FreshnessManagementInterfaceName</srcid><srcstatus/><internalId>699</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCCalloutFunctionNames -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>308</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00234</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For every processed secured I-PDU within SecOC an authentication build counter and an authentication verify attempt counter shall be maintained.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00234</srcid><srcstatus/><internalId>22</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>309</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00235</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Upon the initial processing of a received secured I-PDU, the authentication build counter and the authentication verify attempt counter shall be set to 0.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00235</srcid><srcstatus/><internalId>23</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>310</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00236</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the query of the freshness function (e.g. SecOC_GetRxFreshness()) returns E_BUSY the authentication build counter shall be incremented and no attempt for verification of authentication shall be executed.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00236</srcid><srcstatus/><internalId>24</internalId></linkedfrom><linkedfrom><srcid>SecOC.ASR430.Rx.SWS_SecOC_00236_BUSY</srcid><srcstatus/><internalId>281</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>311</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00237</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the verification of the authenticator (e.g. Csm_MacVerify()) returns E_BUSY, QUEUE_FULL or any other recoverable error, the authentication build counter shall be incremented.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00237</srcid><srcstatus/><internalId>25</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/NonRecoverableError</srcid><srcstatus/><internalId>698</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/NonRecoverableError -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>312</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00238</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the authentication build attempts have failed and the authentication build counter has not yet reached the configuration value SecOCAuthenticationBuildAttempts, the freshness attempt and the authenticator verification shall be retried in the next call to the Rx main function.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00238</srcid><srcstatus/><internalId>26</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>313</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00239</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the verification of the authenticator could be successfully executed but the verification failed (e.g. the MAC verification has failed or the key was invalid), the authentication verify attempt counter shall be incremented and the authentication build counter shall be set to 0.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00239</srcid><srcstatus/><internalId>27</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>314</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00240</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the authentication build counter has reached the configuration value SecOCAuthenticationBuildAttempts the SecOC module shall remove the Authentic I-PDU from its internal buffer and shall drop the received message. The VerificationResultType shall be set to SECOC_AUTHENTICATIONBUILDFAILURE. if SecOC_VerifyStatusOverride is used, the verification result and I-PDU are handled according to overrideStatus value.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00240</srcid><srcstatus/><internalId>28</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>315</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00256</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the query of the freshness function returns E_NOT_OK the SecOC module shall remove the Authentic I-PDU from its internal buffer and shall drop the received message. The VerificationResultType shall be set to SECOC_FRESHNESSFAILURE.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00256</srcid><srcstatus/><internalId>29</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>316</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00241</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the authentication verify attempt counter has reached the configuration value SecOCAuthenticationVerifyAttempts or the verification of the authenticator has returned a non-recoverable error such as returning E_NOT_OK or KEY_FAILURE, the SecOC module shall remove the Authentic I-PDU from its internal buffer and shall drop the received message. The VerificationResultType shall be set to SECOC_VERIFICATIONFAILURE. If SecOC_VerifyStatusOverride is used, the verification result and I-PDU are handled according to overrideStatus value.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00241</srcid><srcstatus/><internalId>30</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/NonRecoverableError</srcid><srcstatus/><internalId>698</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/NonRecoverableError -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>317</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00242</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the verification of the authenticator was successful, the VerificationResultType shall be set to SECOC_VERIFICATIONSUCCESS.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00242</srcid><srcstatus/><internalId>31</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>318</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00243</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The Freshness Management shall use the verification status callout function (SWS_SECOC_00119) to get the result of the verification of a secured I-PDU. This notification can be used as example to synchronize additional freshness attempts or can be used for counter increments.</description>
      <comment>
        This requirement is informational only.
        It describes how external the Freshness Management SWC can obtain informations about the
        success of a verification to update the internal Freshness value.
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>319</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00244</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCQueryFreshnessValue = RTE AND SecOCUseAuthDataFreshness = TRUE for a PDU configuration and the secured PDU is received completely, the SecOC calls the Rte service FreshnessManagement_GetRxFreshnessAuthData to query the current freshness. A part of the received PDU data are passed to this service operation as configured by the configuration SecOCAuthDataFreshnessStartPosition and SecOCAuthDataFreshnessLen.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00244</srcid><srcstatus/><internalId>32</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>320</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00245</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCQueryFreshnessValue = RTE AND SecOCUseAuthDataFreshness = FALSE for a PDU configuration and the secured PDU is received completely, the SecOC calls the Rte service FreshnessManagement_GetRxFreshness to query the current freshness.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00245</srcid><srcstatus/><internalId>33</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/FreshnessManagementInterfaceName</srcid><srcstatus/><internalId>699</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/FreshnessManagementInterfaceName -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>321</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00246</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCQueryFreshnessValue = CFUNC AND SecOCUseAuthDataFreshness = TRUE for a PDU configuration and the secured PDU is received completely, the SecOC calls the interface function SecOC_GetRxFreshnessAuthData to query the current freshness. A part of the received PDU data are passed to this function as configured by the configuration SecOCAuthDataFreshnessStartPosition and SecOCAuthDataFreshnessLen.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00246</srcid><srcstatus/><internalId>34</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCCalloutFunctionNames</srcid><srcstatus/><internalId>713</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCCalloutFunctionNames -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>322</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00247</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCQueryFreshnessValue = CFUNC AND SecOCUseAuthDataFreshness = FALSE for a PDU configuration and the secured PDU is received completely, the SecOC calls the interface function SecOC_GetRxFreshness to query the current freshness.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00247</srcid><srcstatus/><internalId>35</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCCalloutFunctionNames</srcid><srcstatus/><internalId>713</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCCalloutFunctionNames -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>323</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00248</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the Rx freshness request function returns E_NOT_OK, the verification of an Authentic I-PDU is considered to be failed and the authentication retry counter for this PDU shall be incremented. If the number of authentication attempts has reached SecOCAuthenticationVerifyAttempts, the SecOC module shall remove the Authentic I-PDU from its internal buffer. The failure SECOC_E_FRESHNESS_FAILURE shall be reported to the DET module.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.ASR430.Rx.SWS_SecOC_00248_NOT_OK</srcid><srcstatus/><internalId>36</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/DetNotSupported</srcid><srcstatus/><internalId>709</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/DetNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>324</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00249</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCQueryFreshnessValue = CFUNC AND SecOCUseAuthDataFreshness = TRUE for a PDU configuration, SecOC queries a function named SecOC_GetRxFreshnessAuthData, to get the current freshness for RX messages.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_91006</srcid><srcstatus/><internalId>148</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCCalloutFunctionNames</srcid><srcstatus/><internalId>713</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCCalloutFunctionNames -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>325</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00250</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCQueryFreshnessValue = CFUNC AND SecOCUseAuthDataFreshness = FALSE for a PDU configuration, SecOC queries a function named SecOC_GetRxFreshness, to get the current freshness for RX messages.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00250</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCCalloutFunctionNames</srcid><srcstatus/><internalId>713</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCCalloutFunctionNames -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>326</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00031</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>
        The creation of a Secured I-PDU and thus the authentication of an Authentic I-PDU
        consists of the following six steps:
          1. Prepare Secured I-PDU
          2. Construct Data for Authenticator
          3. Generate Authenticator
          4. Construct Secured I-PDU
          5. Increment Freshness Counter
          6. Broadcast Secured I-PDU
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00031</srcid><srcstatus/><internalId>37</internalId></linkedfrom><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00033</srcid><srcstatus/><internalId>38</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>327</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00033</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The SecOC module shall prepare the Secured I-PDU. During preparation,SecOC shall allocate the necessary buffers to hold the intermediate and final results of the authentication process.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00033</srcid><srcstatus/><internalId>38</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>328</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00034</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The SecOC module shall construct the DataToAuthenticator, i.e. the data that is used to calculate the Authenticator. DataToAuthenticator is formed by concatenating the full 16 bit representation of the Data Id (parameter SecOCDataId), the secured part of the Authentic I-PDU and the complete Freshness Value corresponding to SecOCFreshnessValueID in the given order. The Data Id and the Freshness Value shall be encoded in Big Endian byte order for that purpose.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00034_1</srcid><srcstatus/><internalId>39</internalId></linkedfrom><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00034_2</srcid><srcstatus/><internalId>280</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/UseSecureArea</srcid><srcstatus/><internalId>696</internalId></linkedfrom><linkedfrom><srcid>SecOC.R2111/Dev/SecOCDataId</srcid><srcstatus/><internalId>710</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/UseSecureArea, SecOC.R2111/Dev/SecOCDataId -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>329</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00035</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The SecOC module shall generate the Authenticator by passing DataToAuthenticator, length of DataToAuthenticator into the Authentication Algorithm corresponding to SecOCTxAuthServiceConfigRef.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00035</srcid><srcstatus/><internalId>40</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>330</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00036</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The SecOC module shall truncate the resulting Authenticator down to the number of bits specified by SecOCAuthInfoTruncLength.</description>
      <comment>
       This requirement is not applicable, the name of the paramter was changed, thus is not backward compatible
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00036</srcid><srcstatus/><internalId>41</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedSecOCTruncLengthToSecOCTxLength</srcid><srcstatus/><internalId>706</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedSecOCTruncLengthToSecOCTxLength -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>331</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00037</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The SecOC module shall construct the Secured I-PDU by adding the Secured I-PDU Header (optional), the Freshness Value (optional) and the Authenticator to the Authentic I-PDU. The scheme for the Secured I-PDU (includes the order in which the contents are structured in the Secured I-PDU) shall be compliant with below: SecuredPDU = SecuredIPDUHeader (optional) | AuthenticIPDU | FreshnessValue [SecOCFreshnessValueTruncLength] (optional) | Authenticator [SecOCAuthInfoTruncLength]</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00037</srcid><srcstatus/><internalId>42</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>332</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00040</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>
        The verification of a Secured I-PDU consists of the following six steps:
        1. Parse Authentic I-PDU, Freshness Value and Authenticator
        2. Get Freshness Value from Freshness Manager
        3. Construct Data to Authentication
        4. Verify Authentication Information
        5. Send Confirmation to Freshness Manager
        6. Pass Authentic I-PDU to upper layer
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00040</srcid><srcstatus/><internalId>43</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>333</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00203</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCRxSecuredPduCollection is used then SecOC shall not perform any verification until it has received both the Authentic I-PDU and Cryptographic I-PDU which make up the Secured I-PDU. Only after both have been received SecOC shall attempt to verify the resulting Secure I-PDU. If SecOC_VerifyStatusOverride is used, the verification result and I-PDU are handled according to overrideStatus value.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00203</srcid><srcstatus/><internalId>44</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>334</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00211</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCRxSecuredPduCollection is used then SecOC shall not attempt to verify the Secured I-PDU until it has received and buffered an Authentic I-PDU and Cryptographic I-PDU with matching Message Linker values. If SecOC_VerifyStatusOverride is used, the verification result and I-PDU are handled according to overrideStatus value.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00211</srcid><srcstatus/><internalId>45</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCMessageLinkLenRange</srcid><srcstatus/><internalId>701</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCMessageLinkLenRange -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>335</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00042</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Upon reception of a secured I-PDU, SecOC shall parse the Authentic I-PDU, the Freshness Value and the Authenticator from it.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00042</srcid><srcstatus/><internalId>46</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>336</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00046</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The SecOC module shall construct the data that is used to calculate the Authenticator (DataToAuthenticator) on the receiver side. This data is comprised of SecOCDataId| AuthenticIPDU | FreshnessVerifyValue</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00046_1</srcid><srcstatus/><internalId>47</internalId></linkedfrom><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00046_2</srcid><srcstatus/><internalId>48</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/UseSecureArea</srcid><srcstatus/><internalId>696</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/UseSecureArea -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>337</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00047</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The SecOC module shall verify the Authenticator by passing DataToAuthenticator, length of DataToAuthenticator, the Authenticator parsed from Secured I-PDU, and SecOCAuthInfoTruncLength into the authentication algorithm corresponding to SecOCRxAuthServiceConfigRef. The verification process is repeated as outlined in chapter 9.2. If SecOC_VerifyStatusOverride is used, the verification result and I-PDU are handled according to overrideStatus value.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00047</srcid><srcstatus/><internalId>49</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedSecOCTruncLengthToSecOCTxLength</srcid><srcstatus/><internalId>706</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedSecOCTruncLengthToSecOCTxLength -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>338</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00048</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The SecOC module shall report the verification status of the corresponding secured Rx-PDU as follows: If SecOCRxPduProcessing/SecOCVerificationStatusPropagationMode is set to BOTH or FAILURE_ONLY, the verification status shall be served through the call out function SecOC_VerificationStatusCallout and the SecOC_VerificationStatus interface according to its current configuration. No report will be provided if the configuration is set to NONE.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00048</srcid><srcstatus/><internalId>50</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>339</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00271</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The SecOC module shall report the verification status of the corresponding secured Rx-PDU as follows: If SecOCRxPduProcessing/SecOCClientServerVerificationStatusPropagationMode is set to BOTH or FAILURE_ONLY, the verification status shall be served through the service interface SecOC_VerificationStatusIndication according to its current configuration. No report will be provided if the configuration is set to NONE</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00271</srcid><srcstatus/><internalId>51</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>340</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00272</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the configuration item SecOCGeneral/SecOCPropagateOnlyFinalVerificationStatus is set to TRUE, then only the final status shall be reported. If this item is set to FALSE, then each individual verification status (the final one as well as all previous failed ones) shall be reported according to SWS_SecOC_00048 and SWS_SecOC_00271.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00272</srcid><srcstatus/><internalId>52</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>341</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00050</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the verification of a Secured I-PDU was successful or the status override was set accordingly, the SecOC module shall pass the Authentic I-PDU to the upper layer communication modules using the lower layer interfaces of the PduR.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00050</srcid><srcstatus/><internalId>53</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>342</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00153</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The SecOC module shall be implemented so that no other modules depend on it and that it is possible to build a system without the SecOC module if it is not needed.</description>
      <comment>This requirement is informational only. It is a requirement to other adjacent modules and cannot be verfied within the SecOC module.</comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>343</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00212</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>SecOC shall ensure that MetaData received in an authentic PDU will be present unchanged in the corresponding secured PDU, and vice versa.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00212</srcid><srcstatus/><internalId>54</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>344</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00054</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Within SecOC_Init, the module shall initialize all internal global variables and the buffers of the SecOC I-PDUs.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00054</srcid><srcstatus/><internalId>55</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>345</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00269</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The AUTOSAR SecOC module shall fill not used areas of a transmitted Secured or a transmitted Cryptographic Pdu with a value determined by configuration parameter SecOCTxPduUnusedAreasDefault (ECUC_SecOC_00101) e.g. 0xFF.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00269</srcid><srcstatus/><internalId>56</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>346</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00252</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The SecOC module shall copy the complete Authentic I-PDU to its internal memory before starting transmission of the corresponding Secured I-PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00252</srcid><srcstatus/><internalId>57</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>347</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00201</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCTxSecuredPduCollection is used, then SecOC shall transmit the Secured I-PDU as two messages: The original Authentic I-PDU and a separate Cryptographic I-PDU. The Cryptographic I-PDU shall contain all Authentication Information of the Secured I-PDU, so that the Authentic I-PDU and the Cryptographic I-PDU contain all information necessary to reconstruct the Secured I-PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00201</srcid><srcstatus/><internalId>58</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>348</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00202</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>SecOC shall transmit an Authentic I-PDU and its corresponding Cryptographic I-PDU within the same main function cycle.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00202</srcid><srcstatus/><internalId>59</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>349</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00209</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCTxSecuredPduCollection is used then SecOC shall repeat a part of the Authentic I-PDU inside the Cryptographic I-PDU as Message Linker and the Cryptographic I-PDU shall be constructed as Cryptographic I-PDU =Authentication Data | Message Linker</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00209</srcid><srcstatus/><internalId>60</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>350</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00210</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCUseMessageLink is used then SecOC shall use the value at bit position SecOCMessageLinkPos of length SecOCMessageLinkLen bits inside the Authentic I-PDU as the Message Linker.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00210</srcid><srcstatus/><internalId>61</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>351</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00270</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOCTxSecuredPduCollection is used, the SecOC shall forward the TxConfirmation to the upper layer if the SecOC_TxConfirmation was called for the Authentic I-PDU and the Cryptographic I-PDU. The reult parameter of the upper layer TxConfirmation call shall only be E_OK if the result parameters for both TxConfirmation calls were E_OK, Otherwise the result parameter shall be E_NOT_OK.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00270</srcid><srcstatus/><internalId>62</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>352</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00057</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The SecOC module shall provide sufficient buffer capacities to store the incoming Authentic I-PDU, the outgoing Secured I-PDU and all intermediate data of the authentication process according to the process described in SWS_SecOC_00031.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00057</srcid><srcstatus/><internalId>63</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>353</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00146</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The SecOC module shall provide separate buffers for the Authentic I-PDU and the Secured I-PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00146</srcid><srcstatus/><internalId>64</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>354</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00110</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Any transmission request from the upper layer communication module shall overwrite the buffer that contains the Authentic I-PDU without affecting the buffer of the respective Secured I-PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00110</srcid><srcstatus/><internalId>65</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>355</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00262</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For a Tx Secured I-PDU with SecOCAuthPduHeaderLength &gt; 0, the SecOC module shall add the Secured I-PDU Header to the Secured I-PDU with the length of the Authentic I-PDU within the Secured I-PDU, to handle dynamic Authentic I-PDU. Note: Primary purpose of this Header is to indicate the position of Freshness Value and Authenticator in Secured I-PDUs with dynamic length Authentic I-PDU.Also some buses which cannot select arbitrary length of L-PDU (e.g. CAN FD and FlexRay) require this Header, because the position of Freshness Value and Authenticator is not always at the end of the Secured I-PDU, as lower layer modules (e.g. CanIf and FrIf) may add bus-specific padding bytes after processing at SecOC (then the L-PDU containing the Secured I-PDU with padding will be: Secured I-PDU = Secured I-PDU Header | Authentic I-PDU | Freshness Value | Authenticator | Bus-specific padding).</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00262</srcid><srcstatus/><internalId>66</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>356</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00058</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The SecOC module shall allocate internal buffer capacities to store the Authentic I- PDU and the Authentication Information in a consecutive memory location.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00058</srcid><srcstatus/><internalId>67</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>357</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00060</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For transmission of Authentic I-PDUs using bus interfaces that allow ad-hoc transmission (e.g. CanIf), the SecOC module shall calculate the Authenticator in the scheduled main function according to the overall approach specified in SWS_SecOC_00031.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00060</srcid><srcstatus/><internalId>68</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>358</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00061</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For transmission of Authentic I-PDUs using bus interfaces that allow ad-hoc communication (e.g. CanIf), the SecOC module shall create the Secured I-PDU in the scheduled main function.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00061</srcid><srcstatus/><internalId>69</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>359</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00062</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The SecOC module shall provide the complete Secured I-PDU for further transmission to the destination lower layer module by triggering PduR_SecOCTransmit.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00062</srcid><srcstatus/><internalId>70</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>360</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00063</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the PDU Router module notifies the SecOC module that the destination lower layer module has either confirmed the transmission of the Secured I-PDU or reported an error during transmission by calling SecOC_[If|Tp]TxConfirmation, the SecOC module shall pass the received result of the respective Authentic I-PDU to the upper layer module by calling PduR_SecOC[If|Tp]TxConfirmation.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00063</srcid><srcstatus/><internalId>71</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>361</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00064</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For transmission of Authentic I-PDUs using bus interfaces that allow ad-hoc communication (e.g. CanIf), the SecOC module shall free the buffer that contains the Secured I-PDU if SecOC_TxConfirmation is called for the Secured I-PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00064</srcid><srcstatus/><internalId>72</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>362</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00065</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For transmission of Authentic I-PDUs using bus interfaces that allow triggered transmission (e.g. FrIf), the SecOC module shall calculate the Authenticator in the scheduled main function according to the overall approach specified in SWS_SecOC_00031.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00065</srcid><srcstatus/><internalId>73</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>363</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00066</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For transmission of Authentic I-PDUs using bus interfaces that allow triggered transmission (e.g. FrIf), the SecOC module shall create the Secured I-PDU in the scheduled main function.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00066</srcid><srcstatus/><internalId>74</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>364</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00067</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For transmission of Authentic I-PDUs using bus interfaces that allow triggered transmission (e.g. FrIf), the SecOC module shall indicate the transmission request for the complete Secured I-PDU by triggering PduR_SecOCTransmit at the PduR. The PduR is responsible to further process the request and to notify the respective lower layer module.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00067</srcid><srcstatus/><internalId>75</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>365</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00068</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>When SecOC_TriggerTransmit is called by the PduR module, the SecOC module shall copy the Secured I-PDU to the lower layer destination module.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00068</srcid><srcstatus/><internalId>76</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>366</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00150</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>When SecOC_TriggerTransmit is called by the PduR module and the SecOC module is not able to provide a Secured I-PDU to the lower layer (no Secured I-PDU available), the SecOC module shall return the call with E_NOT_OK.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00150</srcid><srcstatus/><internalId>77</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>367</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00069</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For transmission of Authentic I-PDUs using bus interfaces that allow triggered transmission (e.g. FrIf) and the transmission of the Secured I-PDU was confirmed by SecOC_TxConfirmation (successfully sent), the SecOC module shall free the buffer that contain Authentication Information and preserve the buffer that contain the Authentic I-PDU. If the parameter SecOCReAuthenticateAfterTriggerTransmit is set to true, the Authentic I-PDU shall be treated as if it has been set by the upper layer and thus shall undergo a new authentication procedure with the subsequent call of the SecOC_MainFunctionTx. Otherwise no reauthentication of the Authentic I-PDU is required.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00069</srcid><srcstatus/><internalId>78</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>368</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00253</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>In case SecOCPduType is configured to SECOC_TPPDU, then function SecOC_TpTransmit shall trigger the transmit operation for an Authentic I-PDU.</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/PduR_SecOCTpCopyTxDataNotSupported</srcid><srcstatus/><internalId>705</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/PduR_SecOCTpCopyTxDataNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>369</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00254</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>After a transmit operation for SecOCPduType of SECOC_TPPDU was triggered, the SecOC shall instruct the upper layer to copy the next part of the I-PDU to a local SecOC buffer by calling PduR_SecOCTpCopyTxData.</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/PduR_SecOCTpCopyTxDataNotSupported</srcid><srcstatus/><internalId>705</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/PduR_SecOCTpCopyTxDataNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>370</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00070</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For transmission of Authentic I-PDUs using transport protocol, the SecOC module shall calculate the Authenticator in the scheduled main function according to the overall approach specified in SWS_SecOC_00031. In case SecOCPduType is configured to SECOC_TPPDU the freshness value shall be retrieved as late as possible i.e. just in time when this part of the message will be transmitted next to the bus.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00070</srcid><srcstatus/><internalId>79</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>371</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00071</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For transmission of Authentic I-PDUs using transport protocol, the SecOC module shall create the Secured I-PDU in the scheduled main function.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00071</srcid><srcstatus/><internalId>80</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>372</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00072</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For transmission of Authentic I-PDUs using transport protocol, the SecOC module shall indicate the transmission request for the complete Secured I-PDU by triggering PduR_SecOCTransmit at the PduR. The PduR is responsible to further process the request and to notify the respective lower layer module.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00072</srcid><srcstatus/><internalId>81</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>373</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00073</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For transmission of Authentic I-PDUs using transport protocol, the SecOC module shall copy the NPDUs addressed by SecOC_CopyTxData into the buffer of the transport protocol module. After each copy process, it returns from SecOC_CopyTxData.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00073</srcid><srcstatus/><internalId>82</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>374</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00074</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For transmission of Authentic I-PDUs using transport protocol and when the lower Layer either confirms the transmission of the Secured I-PDU or signals an error during transmission by calling SecOC_TpTxConfirmation, the SecOC module shall in turn pass the received result of the Authentic I-PDU either by PduR_SecOCIfTxConfirmation in case SecOCPduType is configured to SECOC_IFPDU or by PduR_SecOCTpTxConfirmation in case SecOCPduType is configured to SECOC_TPPDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.ASR430.Tx.SWS_SecOC_00074</srcid><srcstatus/><internalId>83</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>375</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00075</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For transmission of Authentic I-PDUs using transport protocol, the SecOC module shall free the buffer that contains the Secured I-PDU only, if SecOC_TpTxConfirmation is called for the Secured I-PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00075</srcid><srcstatus/><internalId>84</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>376</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00076</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the upper layer module requests a cancelation of an ongoing transmission of the Authentic I-PDU by calling SecOC_[If|Tp]CancelTransmit, the SecOC module shall immediately inform the lower layer transport protocol module to cancel the ongoing transmission of the Secured I-PDU, stop all internal actions related to the Authentic I-PDU, and free all related buffers.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00076</srcid><srcstatus/><internalId>85</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>377</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00077</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the lower layer transport protocol module reports an error during transmission of a Secured I-PDU using the return value E_NOT_OK, the SecOC module shall not perform any error handling other than skipping the confirmation of the transmission request for the corresponding Authentic I-PDU to the upper layer module.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00077</srcid><srcstatus/><internalId>86</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>378</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00151</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the CSM module reports a recoverable error (example: E_BUSY, QUEUE_FULL) during authentication of an Authentic I-PDU , the SecOC module shall not provide a Secured I-PDU to the lower layer. It shall keep that Authentic I-PDU (if not overwritten by an incoming Authentic I-PDU of the same type) to start the authentication with the next call of the scheduled main function until the number of additional authentication attempts for that Authentic I-PDU has reached its limits.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00151</srcid><srcstatus/><internalId>87</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/NonRecoverableError</srcid><srcstatus/><internalId>698</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/NonRecoverableError -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>379</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00155</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the number of attempts for an Authentic I-PDU has reached the limit SecOCAuthenticationBuildAttempts that defines the maximum number of freshness values provided by the freshness manager, the SecOC module shall report SECOC_E_CRYPTO_FAILURE to the DET module.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/DetNotSupported</srcid><srcstatus/><internalId>709</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/DetNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>380</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00108</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the SecOC module is not able to serve any upper layer or lower layer request during transmission of an Authentic I-PDU due to an arbitrary internal error, it shall return this request with E_NOT_OK.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00108</srcid><srcstatus/><internalId>88</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>381</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00217</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the upper layer module requests a cancelation of an ongoing reception of the Authentic I-PDU by calling SecOC_TpCancelReceive, the SecOC module shall immediately inform the lower layer transport protocol module to cancel the ongoing reception of the Secured I-PDU, stop all internal actions related to the Authentic I- PDU, and free all related buffers.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00217</srcid><srcstatus/><internalId>89</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>382</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00218</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the upper layer module requests a change of parameters of the Authentic I-PDU by calling SecOC_ChangeParameter, the SecOC module shall immediately inform the lower layer transport protocol module.</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOC_ChangeParameterNotSupported</srcid><srcstatus/><internalId>708</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOC_ChangeParameterNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>383</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00260</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the upper layer transport protocol module reports BUFREQ_E_BUSY in a call to PduR_SecOCTpCopyTxData then SecOC shall retry the call in the next subsequent call of its scheduled main function.</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/PduR_SecOCTpCopyTxDataNotSupported</srcid><srcstatus/><internalId>705</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/PduR_SecOCTpCopyTxDataNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>384</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00266</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the upper layer transport protocol module reports BUFREQ_E_NOT_OK in a call to PduR_SecOCTpCopyTxData then SecOC shall immediately abort the transmission via calling PduR_SecOCTpTxConfirmation with E_NOT_OK result, shall stop all internal actions related to the Authentic I-PDU, and shall free all related buffers.</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/PduR_SecOCTpCopyTxDataNotSupported</srcid><srcstatus/><internalId>705</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/PduR_SecOCTpCopyTxDataNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>385</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00214</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>In case the SecOCReceptionOverflowStrategy is set to REPLACE, the SecOC module shall free all buffer related to a Secured I-PDU if the reception of a Secured I- PDU with the same Pdu Identifier has been initiated.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00214</srcid><srcstatus/><internalId>90</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>386</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00215</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>In case the SecOCReceptionOverflowStrategy is set to REJECT and SecOC is currently busy with the same Secured I-PDU, the SecOC module shall ignore any subsequent call of SecOC_RxIndication and return BUFREQ_E_NOT_OK for any subsequent call of SecOC_StartOfReception.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00215</srcid><srcstatus/><internalId>91</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCStartOfReceptionReturnValue</srcid><srcstatus/><internalId>693</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCStartOfReceptionReturnValue -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>387</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00204</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>SecOC shall provide separate buffers for the incoming Secured I-PDU, Cryptographic I-PDU and the resulting Authentic I-PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00204</srcid><srcstatus/><internalId>92</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>388</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00216</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>In case the SecOCReceptionOverflowStrategy is set to QUEUE and SecOC is currently busy with the same Secured I-PDU, the SecOC module shall additionally receive the Secured I-PDU and queue them for a subsequent processing after the currently processed Secured I-PDU is finalized. In case the limit which is given by SecOCReceptionQueueSize is reach any further reception shall be rejected.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00216</srcid><srcstatus/><internalId>93</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>389</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00205</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For each Secured I-PDU having SecOCRxSecuredPduCollection present in the corresponding SecOCRxSecuredPduLayer SecOC shall buffer only the last Authentic I-PDU and Cryptographic I-PDU it has received. If a buffer has already been filled with a previous I-PDU, the previous I-PDU is overwritten.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00205</srcid><srcstatus/><internalId>94</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>390</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00206</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>SecOC shall construct the Secured I-PDU immediately after it has received both the respective Authentic I-PDU and Cryptographic I-PDU. If SecOC_VerifyStatusOverride is used, the verification result and I-PDU are handled according to overrideStatus value.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00206</srcid><srcstatus/><internalId>95</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>391</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00207</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the subsequent verification of the resulting Secured I-PDU is successful, then SecOC shall clear the buffers of both the Authentic and Cryptographic I-PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00207</srcid><srcstatus/><internalId>96</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>392</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00257</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For a Secured Rx I-PDU with SecOCAuthPduHeaderLength = 0 or not configured and DynamicLength of the referred global Pdu (see ECUC_EcuC_00078) is set to FALSE, the SecOC module shall extract the Authentic I-PDU by using the configured length of the corresponding global PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00257</srcid><srcstatus/><internalId>97</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>393</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00258</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For a Secured Rx I-PDU with SecOCAuthPduHeaderLength = 0 or not configured and DynamicLength of the referred global Pdu (see ECUC_EcuC_00078) is set to TRUE, the SecOC module shall extract the Authentic I-PDU by using the length provided by the lower layer.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00258</srcid><srcstatus/><internalId>98</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>394</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00259</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For a Secured Rx I-PDU with SecOCAuthPduHeaderLength &gt; 0, the SecOC module shall extract the Authentic I-PDU using the length provided at runtime within the Secured I-PDU Header.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00259</srcid><srcstatus/><internalId>99</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>395</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00268</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>During reception of a static length (Secured / Authentic / Cryptographic) I-PDU, i.e. EcuC Parameter DynamicLength (ECUC_EcuC_00078) is set to FALSE, by means of a lower layer bus interface and when SecOC_RxIndication has been called, the SecOC module shall silently discard this I-PDU in case of the received length is smaller than the configured length.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00268</srcid><srcstatus/><internalId>100</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>396</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00078</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>During reception of an (Secured / Authentic / Cryptographic) I-PDU by means of a lower layer bus interface and when SecOC_RxIndication has been called, the SecOC module shall copy the I-PDU into the according buffer according to the minimum of received length and configured length of this I-PDU. The copied length shall then be used for all further reception processings.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00078</srcid><srcstatus/><internalId>101</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>397</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00079</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>During reception of a Secured I-PDU that is received by means of a lower layer bus interface, the SecOC module shall verify the Authenticator according to the overall approach specified in SWS_SecOC_00040. The verification shall be processed in the scheduled main function.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00079</srcid><srcstatus/><internalId>102</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>398</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00080</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>During reception of a Secured I-PDU that is received by means of a lower layer bus interface and if the verification eventually succeeds, the SecOC module shall call PduR_SecOC[If|Tp]RxIndication referencing the Authentic I-PDU that is contained in the Secured I-PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00080</srcid><srcstatus/><internalId>103</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>399</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00081</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>During reception of a Secured I-PDU that is received by means of a lower layer bus interface and if the verification fails and the SecOCIgnoreVerificationResult is configured to TRUE, the SecOC module shall call PduR_SecOC[If|Tp]RxIndication referencing the Authentic I-PDU that is contained in the Secured I-PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00081</srcid><srcstatus/><internalId>104</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>400</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00082</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>During reception of a Secured I-PDU that is received by means of a lower layer transport protocol interface and when SecOC_StartOfReception is called, the SecOC module shall provide buffer capacities to store the complete Secured I-PDU. Further it shall forward the SecOC_StartOfReception call by calling PduR_SecOCTpStartOfReception in case SecOCPduType is configured to SECOC_TPPDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00082</srcid><srcstatus/><internalId>105</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>401</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00083</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>During reception of a Secured I-PDU that is received by means of a lower layer transport protocol interface and when SecOC_CopyRxData is called, the SecOC module shall copy the NPDUs addressed by SecOC_CopyRxData into its own buffers. Finally, it returns from SecOC_CopyRxData.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00083</srcid><srcstatus/><internalId>106</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>402</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00084</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>During reception of a Secured I-PDU that is received by means of a lower layer transport protocol interface and when SecOC_TpRxIndication is called, the SecOC module shall returns SecOC_TpRxIndication without any further processing.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00084</srcid><srcstatus/><internalId>107</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>403</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00085</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>During reception of a Secured I-PDU that is received by means of a lower layer transport protocol interface and when SecOC_TpRxIndication has been called, the SecOC module shall verify the contents of the Secured I-PDU according to the process described in Section 7.1.3.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00085</srcid><srcstatus/><internalId>108</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>404</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00086</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>During reception of a Secured I-PDU that is received by means of a lower layer transport protocol interface and when the verification eventually succeeds, the SecOC module shall call PduR_SecOCIfRxIndication with references to the Authentic I-PDU contained in the Secured I-PDU in case SecOCPduType is configured to SECOC_IFPDU. In case SecOCPduType is configured to SECOC_TPPDU SecOC shall forward in advance all data to the upper layer by first calling PduR_SecOCTpCopyRxData and afterwards PduR_SecOCTpRxIndication with references to the Authentic I-PDU contained in the Secured I-PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00086</srcid><srcstatus/><internalId>109</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>405</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00088</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>During reception of a Secured I-PDU that is received by means of a lower layer transport protocol interface and when the verification fails and the SecOCIgnoreVerificationResult is configured to TRUE, the SecOC module shall call PduR_SecOCIfRxIndication with references to the Authentic I-PDU contained in the Secured I-PDU in case SecOCPduType is configured to SECOC_IFPDU. In case SecOCPduType is configured to SECOC_TPPDU SecOC shall forward in advance all data to the upper layer by first calling PduR_SecOCTpCopyRxData and afterwards PduR_SecOCTpRxIndication with references to the Authentic I-PDU contained in the Secured I-PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00088</srcid><srcstatus/><internalId>110</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>406</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00213</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>In case the SecOC frees buffers related to a Secured I-PDU (see SWS_SecOC_00087) and SecOCPduType is configured to SECOC_TPPDU the SecOC shall cancel the reception in the upper layer (negative PduR_SecOCTpRxIndication).</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00213</srcid><srcstatus/><internalId>111</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>407</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00087</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>
        The SecOC module shall free all buffer related to a Secured I-PDU either if
        1. it has passed the respective authenticated I-PDU to the PduR via PduR_SecOCIfRxIndication or PduR_SecOCTpRxIndication
        2. the verification of a Secured I-PDU eventually failed
        3. the transmission of a Secured I-PDU has been canceled by the upper or lower layer.
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00087</srcid><srcstatus/><internalId>112</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>408</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00255</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The SecOC module shall receive the complete Secured I-PDU in its internal memory before starting any copying of the corresponding Authentic I-PDU.</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/ReceivingCompleteSecuredIPDU</srcid><srcstatus/><internalId>703</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/ReceivingCompleteSecuredIPDU -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>409</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00265</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For a Rx Secured I-PDU with SecOCSecuredRxPduVerification=false, the SecOC module shall extract the Authentic I-PDU without Authentication.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00265</srcid><srcstatus/><internalId>113</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>410</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00089</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the lower layer transport protocol module reports an error by returning something else than E_OK during reception of a Secured I-PDU using SecOC_TpRxIndication, the SecOC module shall drop the Secured I-PDU and free all corresponding buffers.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00089</srcid><srcstatus/><internalId>114</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>411</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00121</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the CSM module reports an error during verification (verification attempt returns E_NOT_OK) of a Secured I-PDU, the SecOC module shall not provide the Authentic I- PDU. It shall keep the Secured I-PDU (if not overwritten by an incoming Secured I- PDU of the same type) and start the verification with the next call of the scheduled main function.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00121</srcid><srcstatus/><internalId>115</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/NonRecoverableError</srcid><srcstatus/><internalId>698</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/NonRecoverableError -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>412</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00208</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOC has received both an Authentic I-PDU and a Cryptographic PDU and the verification of the resulting Secured I-PDU fails, both the Authentic and Cryptographic I-PDU shall remain buffered and verification shall be reattempted each time new data for any of them is received.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00208</srcid><srcstatus/><internalId>116</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>413</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00109</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the SecOC module is not able to serve any upper layer or lower layer request during reception of A Secured I-PDU due to an arbitrary internal error, it shall return this request with E_NOT_OK.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00109</srcid><srcstatus/><internalId>117</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>414</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00263</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For a Rx Secured I-PDU with SecOCAuthPduHeaderLength &gt; 0 and the length of Authentic I-PDU in the Header is longer than configured length (in case of dynamic length IPdus (containing a dynamical length signal), this value indicates the maximum data length) of the Authentic I-PDU, the SecOC module shall discard the I- PDU. In such case with SecOC_StartOfReception, BUFREQ_E_NOT_OK shall be returned (see SWS_COMTYPE_00012). Note: SecOC_RxIndication has no return value.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00263</srcid><srcstatus/><internalId>118</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>415</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00264</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For a Rx Secured I-PDU with SecOCAuthPduHeaderLength &gt; 0, the SecOC module shall process Secured I-PDU Header, Authentic I-PDU (with the length specified by the Header), Freshness Value and Authenticator of the Rx Secured I- PDU. The rest of bytes in the Secured I-PDU shall be discarded.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00264</srcid><srcstatus/><internalId>119</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>416</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00267</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the upper layer transport protocol module reports BUFREQ_E_NOT_OK in a call to PduR_SecOCTpCopyRxData then SecOC shall immediately abort the reception via calling PduR_SecOCTpRxIndication with E_NOT_OK result, shall stop all internal actions related to the Secured I-PDU, and shall free all related buffers.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00267</srcid><srcstatus/><internalId>120</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>417</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00276</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>SecOCTxPduProcessings shall be processed within the MainFunction, which is referenced via SecOCTxPduMainFunctionRef (see ECUC_SecOC_00111).</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00276</srcid><srcstatus/><internalId>121</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>418</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00273</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If security event reporting has been enabled for the SecOC module (SecOCEnableSecurityEventReporting = true) the respective security events shall be reported to the IdsM via the interfaces defined in AUTOSAR_SWS_BSWGeneral.</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecurityEventReportingNotSupported</srcid><srcstatus/><internalId>707</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecurityEventReportingNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>419</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00274</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The following table lists the security events which are standardized for the SecOC together with their trigger conditions. [SWS_SecOC_00115]⌈ Name Description ID SECOC_SEV_MAC_VERIFICATION_FAILED MAC verification of a received PDU failed. 44 SECOC_SEV_FRESHNESS_NOT_AVAILABLE Faild to get freshness value from FvM. 45</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecurityEventReportingNotSupported</srcid><srcstatus/><internalId>707</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecurityEventReportingNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>420</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00275</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The following table describes the context data which shall be reported for the respective security even: Security Event Context Data SECOC_SEV_MAC_VERIFICATION_FAILED Context Data (2 Byte) DataId (2 Byte)</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecurityEventReportingNotSupported</srcid><srcstatus/><internalId>707</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecurityEventReportingNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>421</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00101</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Type of error Related error code Error value An API service was called with a NULL pointer SECOC_E_PARAM_POINTER 0x01 API service used without module initialization SECOC_E_UNINIT 0x02 Invalid I-PDU identifier SECOC_E_INVALID_PDU_SDU_ID 0x03 Crypto service failed SECOC_E_CRYPTO_FAILURE 0x04 initialization of SecOC failed SECOC_E_INIT_FAILED 0x07</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/DetNotSupported</srcid><srcstatus/><internalId>709</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/DetNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>422</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00114</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Type of error Related error code Error value NO freshness value available from the Freshness Manager SECOC_E_FRESHNESS_ FAILURE 0x08</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/DetNotSupported</srcid><srcstatus/><internalId>709</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/DetNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>423</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00311</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the parameter SecOCSecuredTxPduOffset or SecOCSecuredRxPduOffset is available, the applied Security Profile shall only consider the bytes starting with the configured offset.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00311</srcid><srcstatus/><internalId>122</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>424</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00312</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the parameter SecOCSecuredTxPduLength or SecOCSecuredRxPduLength is available, the applied Security Profile shall only consider the configured length.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00312</srcid><srcstatus/><internalId>123</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>425</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00313</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the sum of configured value of SecOCSecuredTxPduLength and SecOCSecuredTxPduOffset is longer than the PduInfoPtr-&gt;SduLength provided to SecOC_IfTransmit or SecOC_TpTransmit, this Pdu shall be discarded and E_NOT_OK shall be returned.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00313</srcid><srcstatus/><internalId>124</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>426</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00314</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the sum of configured value of SecOCSecuredRxPduLength and SecOCSecuredRxPduOffset are longer than the received Pdu length itself, this Pdu shall be discarded.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00314</srcid><srcstatus/><internalId>125</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>427</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00190</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Each Security Profile shall provide the configuration values for the authentication algorithm (parameter algorithmFamily, algorithmMode and algorithmSecondaryFamily in CryptoServicePrimitive), length of freshness Value, if applicable (parameter SecOCFreshnessValueLength), length of truncated Freshness Value (parameter SecOCFreshnessValueTruncLength), length of truncated MAC (parameter SecOCAuthInfoTruncLength), and a description of the profile.</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecurityProfileNotSupported</srcid><srcstatus/><internalId>712</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecurityProfileNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>428</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00191</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>A security profile shall be defined by the following mandatory parameters in the System Template: + algorithmFamily:String [0..1] + algorithmMode :String [0..1] + algorithmSecondaryFamily :String [0..1] + authInfoTxLength :PositiveInteger + freshnessValueLength :PositiveInteger + freshnessValueTruncLength :PositiveInteger</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecurityProfileNotSupported</srcid><srcstatus/><internalId>712</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecurityProfileNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>429</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00192</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Using the CMAC algorithm based on AES-128 according to NIST SP 800-38B to calculate the MAC, use the eight least significant bit of the freshness value as truncated freshness value and use the 24 most significant bits of the MAC as truncated MAC.</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecurityProfileNotSupported</srcid><srcstatus/><internalId>712</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecurityProfileNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>430</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00193</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Using the CMAC algorithm based on AES-128 according to NIST SP 800-38B to calculate the MAC, don't use any freshness value at all and use the 24 most significant bits of the MAC as truncated MAC. The profile shall only be used if no synchronized freshness value is established. There is no restriction to a special bus.</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecurityProfileNotSupported</srcid><srcstatus/><internalId>712</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecurityProfileNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>431</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00194</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>This profile depicts one configuration and usage of the JasPar counter base FV with Master-Slave Synchronization method. It uses the CMAC algorithm based on AES-128 according to NIST SP 800-38B Appendix-A to calculate the MAC. Use the 4 least significant bits of the freshness value as truncated freshness value and use the 28 most significant bits of the MAC as truncated MAC. Freshness Value provided to SecOC shall be constructed as described in the [UC_SecOC_00202]. The profile shall be used for CAN.</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecurityProfileNotSupported</srcid><srcstatus/><internalId>712</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecurityProfileNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>432</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00103</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>
        Module            | Header File        | Imported Type
       -------------------------------------------------------------------
        ComStack_Types    |  ComStack_Types.h  |  BufReq_ReturnType
                          |  ComStack_Types.h  |  PduIdType
                          |  ComStack_Types.h  |  PduInfoType
                          |  ComStack_Types.h  |  PduLengthType
                          |  ComStack_Types.h  |  RetryInfoType
                          |  ComStack_Types.h  |  TpDataStateType
       -------------------------------------------------------------------
        Csm               |  Rte_Csm_Type.h    |  Crypto_OperationModeType
                          |  Rte_Csm_Type.h    |  Crypto_VerifyResultType
       -------------------------------------------------------------------
        IdsM              |  IdsM_Types.h      |  IdsM_SecurityEventIdType
       -------------------------------------------------------------------
        Std               |  Std_Types.h       |  Std_ReturnType
                          |  Std_Types.h       |  Std_VersionInfoType
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00103</srcid><srcstatus/><internalId>126</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOC_ChangeParameterNotSupported</srcid><srcstatus/><internalId>708</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOC_ChangeParameterNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>433</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00104</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOC_ConfigType Kind Structure Elements implementation specific Type -- Comment The content of the configuration data structure is implementation specific. Description Configuration data structure of SecOC module Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00104</srcid><srcstatus/><internalId>127</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>434</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00162</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOC_StateType Kind Enumeration Range SECOC_UNINIT -- SecOC module is not initialized SECOC_INIT -- SecOC module is initialized Description States of the SecOC module Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00162</srcid><srcstatus/><internalId>128</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>435</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00106</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_Init Syntax void SecOC_Init ( const SecOC_ConfigType* config ) Service ID [hex] 0x01 Sync/Async Synchronous Reentrancy Non Reentrant Parameters (in) config Pointer to a selected configuration structure Parameters (inout) None Parameters (out) None Return value None Description Initializes the SecOC module. Successful initialization leads to state SecOC_ INIT. In configurations, in which SecOC is assigned to more than one partition (i.e. SecOC_MainFunctions are mapped to partitions), SecOC may provide one init function per partition. The decision on whether a single SecOC_Init() function or one per partition is provided is implementation-specific. In case a given implementation provides one SecOC_Init() function per partition, it is up to the implementation to devise a naming pattern that prevents name clashes among the different SecOC_ Init() functions (e.g., by adding a suffix containing short name the EcucPartition. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00106</srcid><srcstatus/><internalId>129</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>436</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00161</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_DeInit Syntax void SecOC_DeInit ( void ) Service ID [hex] 0x05 Sync/Async Synchronous Reentrancy Non Reentrant Parameters (in) None Parameters (inout) None Parameters (out) None Return value None Description This service stops the secure onboard communication. All buffered I-PDU are removed and have to be obtained again, if needed, after SecOC_Init has been called. By a call to SecOC_DeInit the AUTOSAR SecOC module is put into a not initialized state (SecOC_UNINIT). Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00161</srcid><srcstatus/><internalId>130</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>437</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00157</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Within SecOC_DeInit the module shall clear all internal global variables and the buffers of the SecOC I-PDUs.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00157</srcid><srcstatus/><internalId>131</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>438</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00107</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_GetVersionInfo Syntax void SecOC_GetVersionInfo ( Std_VersionInfoType* versioninfo ) Service ID [hex] 0x02 Sync/Async Synchronous Reentrancy Reentrant Parameters (in) None Parameters (inout) None Parameters (out) versioninfo Pointer to where to store the version information of this module. Return value None Description Returns the version information of this module. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00107</srcid><srcstatus/><internalId>132</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>439</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00112</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_IfTransmit Syntax Std_ReturnType SecOC_IfTransmit ( PduIdType TxPduId, const PduInfoType* PduInfoPtr ) Service ID [hex] 0x49 Sync/Async Synchronous Reentrancy Reentrant for different PduIds. Non reentrant for the same PduId. Parameters (in) TxPduId Identifier of the PDU to be transmitted PduInfoPtr Length of and pointer to the PDU data and pointer to Meta Data. Parameters (inout) None Parameters (out) None Return value Std_Return- Type E_OK: Transmit request has been accepted. E_NOT_OK: Transmit request has not been accepted. Description Requests transmission of a PDU. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00112</srcid><srcstatus/><internalId>133</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/MetaDataHandling</srcid><srcstatus/><internalId>695</internalId></linkedfrom><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces, SecOC.R2111/Dev/MetaDataHandling -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>440</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91008</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_TpTransmit Syntax Std_ReturnType SecOC_TpTransmit ( PduIdType TxPduId, const PduInfoType* PduInfoPtr ) Service ID [hex] 0x53 Sync/Async Synchronous Reentrancy Reentrant for different PduIds. Non reentrant for the same PduId. Parameters (in) TxPduId Identifier of the PDU to be transmitted PduInfoPtr Length of and pointer to the PDU data and pointer to Meta Data. Parameters (inout) None Parameters (out) None Return value Std_Return- Type E_OK: Transmit request has been accepted. E_NOT_OK: Transmit request has not been accepted. Description Requests transmission of a PDU. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00112</srcid><srcstatus/><internalId>133</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>441</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00113</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_IfCancelTransmit Syntax Std_ReturnType SecOC_IfCancelTransmit ( PduIdType TxPduId ) Service ID [hex] 0x4a Sync/Async Synchronous Reentrancy Reentrant for different PduIds. Non reentrant for the same PduId. Parameters (in) TxPduId Identification of the PDU to be cancelled. Parameters (inout) None Parameters (out) None Return value Std_Return- Type E_OK: Cancellation was executed successfully by the destination module. E_NOT_OK: Cancellation was rejected by the destination module. Description Requests cancellation of an ongoing transmission of a PDU in a lower layer communication module. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00113</srcid><srcstatus/><internalId>134</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>442</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91009</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_TpCancelTransmit Syntax Std_ReturnType SecOC_TpCancelTransmit ( PduIdType TxPduId ) Service ID [hex] 0x54 Sync/Async Synchronous Reentrancy Reentrant for different PduIds. Non reentrant for the same PduId. Parameters (in) TxPduId Identification of the PDU to be cancelled. Parameters (inout) None Parameters (out) None Return value Std_Return- Type E_OK: Cancellation was executed successfully by the destination module. E_NOT_OK: Cancellation was rejected by the destination module. Description Requests cancellation of an ongoing transmission of a PDU in a lower layer communication module. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00113</srcid><srcstatus/><internalId>134</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>443</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91010</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_TpCancelReceive Syntax Std_ReturnType SecOC_TpCancelReceive ( PduIdType RxPduId ) Service ID [hex] 0x4c Sync/Async Synchronous Reentrancy Non Reentrant Parameters (in) RxPduId Identification of the PDU to be cancelled. Parameters (inout) None Parameters (out) None Return value Std_Return- Type E_OK: Cancellation was executed successfully by the destination module. E_NOT_OK: Cancellation was rejected by the destination module. Description Requests cancellation of an ongoing reception of a PDU in a lower layer transport protocol module. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_91010</srcid><srcstatus/><internalId>135</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>444</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00122</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_VerifyStatusOverride Syntax Std_ReturnType SecOC_VerifyStatusOverride ( uint16 ValueID, SecOC_OverrideStatusType overrideStatus, uint8 numberOfMessagesToOverride ) Service ID [hex] 0x0b Sync/Async Synchronous Reentrancy Non Reentrant for the same FreshnessValueID. Reentrant for different Freshness ValueIDs Parameters (in) ValueID If SecOCOverrideStatusWithDataId is configured to FALSE, ValueID is the ID of the Freshness Value used to control the verification behaviour of all assigned Secured I-PDUs according to the override Status. If SecOCOverrideStatusWithDataId is configured to TRUE, ValueID is the DataID of a Secured I-PDU that shall be controlled by the overrideStatus. override Status Defines whether verification is executed and whether the I-PDU is passed on, and for how long the override is active. numberOf MessagesTo Override Number of sequential verification to override when using a specific counter for authentication verification. This is only considered when OverrideStatus is equal to SECOC_OVERRIDE_DROP_UNTIL_ LIMIT, SECOC_OVERRIDE_SKIP_UNTIL_LIMIT or SECOC_ OVERRIDE_PASS_UNTIL_LIMIT. Parameters (inout) None Parameters (out) None Return value Std_Return- Type E_OK: request successful E_NOT_OK: request failed Description This service provides the ability to force specific behaviour of SecOc: accept or drop an I-PDU with or without performing the verification of authenticator or independent of the authenticator verification result, and to force a specific result for SecOC_ VerificationResultType allowing additional fault handling in the application. Option SECOC_OVERRIDE_PASS_UNTIL_NOTICE, SECOC_OVERRIDE_SKIP_UNTIL_ LIMIT, SECOC_OVERRIDE_PASS_UNTIL_LIMIT or SECOC_OVERRIDE_SKIP_ UNTIL_NOTICE are available only if SecOCEnableForcedPassOverride is set to TRUE. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00122</srcid><srcstatus/><internalId>136</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>445</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91013</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_SendDefaultAuthenticationInformation Syntax Std_ReturnType SecOC_SendDefaultAuthenticationInformation ( uint16 FreshnessValueID, boolean sendDefaultAuthenticationInformation ) Service ID [hex] 0x04 Sync/Async Synchronous Reentrancy Non Reentrant for the same FreshnessValueID. Reentrant for different Freshness ValueIDs Parameters (in) FreshnessValueID ID of the Freshness Value for which sending SecOCDefault AuthenticationInformationPattern should be enabled. sendDefault Authentication Information FALSE - sending SecOCDefaultAuthenticationInformation Pattern shall be disabled for given FreshnessValueID TRUE - sending SecOCDefaultAuthenticationInformationPattern shall be enabled for given FreshnessValueID Parameters (inout) None Parameters (out) None Return value Std_ReturnType E_OK: request successful E_NOT_OK: request failed Description The service provides the ability to enable the sending of un-authenticated PDU to lower layer. (example: in case authentication build counter has reached the configuration value SecOCAuthenticationBuildAttempts or the query of the freshness function returns E_NOT_OK or the calculation of the authenticator has returned a non-recoverable error such as returning E_NOT_OK or KEY_FAILURE). This service is optional (the service is available only if SecOCDefaultAuthenticationInformation Pattern is configured). If the service is not available or the service is available but the service was called with sendDefaultAuthenticationInformation as FALSE for a given FreshnessValueID , SecOC module shall remove the Authentic I-PDU from its internal buffer and cancel the transmission request in case the building of authentication Information failed. If the service is available and the service was called with sendDefaultAuthenticationInformation as TRUE for a given FreshnessValueID , SecOc will use SecOCDefaultAuthenticationInformationPattern as authentication Information and will not cancel the transmission request. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_91013</srcid><srcstatus/><internalId>137</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>446</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00124</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_RxIndication Syntax void SecOC_RxIndication ( PduIdType RxPduId, const PduInfoType* PduInfoPtr ) Service ID [hex] 0x42 Sync/Async Synchronous Reentrancy Reentrant for different PduIds. Non reentrant for the same PduId. Parameters (in) RxPdu Id ID of the received PDU. Pdu InfoPtr Contains the length (SduLength) of the received PDU, a pointer to a buffer (SduDataPtr) containing the PDU, and the MetaData related to this PDU. Parameters (inout) None Parameters (out) None Return value None Description Indication of a received PDU from a lower layer communication interface module. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00124</srcid><srcstatus/><internalId>138</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>447</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00125</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_TpRxIndication Syntax void SecOC_TpRxIndication ( PduIdType id, Std_ReturnType result ) Service ID [hex] 0x45 Sync/Async Synchronous Reentrancy Reentrant Parameters (in) id Identification of the received I-PDU. result E_OK: The PDU was received. E_NOT_OK: Reception of the PDU failed. Parameters (inout) None Parameters (out) None Return value None Description Called after an I-PDU has been received via the TP API, the result indicates whether the transmission was successful or not. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00125</srcid><srcstatus/><internalId>139</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>448</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00126</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_TxConfirmation Syntax void SecOC_TxConfirmation ( PduIdType TxPduId, Std_ReturnType result ) Service ID [hex] 0x40 Sync/Async Synchronous Reentrancy Reentrant for different PduIds. Non reentrant for the same PduId. Parameters (in) TxPduId ID of the PDU that has been transmitted. result E_OK: The PDU was transmitted. E_NOT_OK: Transmission of the PDU failed. Parameters (inout) None Parameters (out) None Return value None Description The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00126</srcid><srcstatus/><internalId>140</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>449</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00152</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_TpTxConfirmation Syntax void SecOC_TpTxConfirmation ( PduIdType id, Std_ReturnType result ) Service ID [hex] 0x48 Sync/Async Synchronous Reentrancy Reentrant Parameters (in) id Identification of the transmitted I-PDU. result E_OK: The PDU was transmitted. E_NOT_OK: Transmission of the PDU failed. Parameters (inout) None Parameters (out) None Return value None Description This function is called after the I-PDU has been transmitted on its network, the result indicates whether the transmission was successful or not. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00152</srcid><srcstatus/><internalId>141</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>450</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00127</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_TriggerTransmit Syntax Std_ReturnType SecOC_TriggerTransmit ( PduIdType TxPduId, PduInfoType* PduInfoPtr ) Service ID [hex] 0x41 Sync/Async Synchronous Reentrancy Reentrant for different PduIds. Non reentrant for the same PduId. Parameters (in) TxPduId ID of the SDU that is requested to be transmitted. Parameters (inout) PduInfoPtr Contains a pointer to a buffer (SduDataPtr) to where the SDU data shall be copied, and the available buffer size in SduLengh. On return, the service will indicate the length of the copied SDU data in SduLength. Parameters (out) None Return value Std_- Return- Type E_OK: SDU has been copied and SduLength indicates the number of copied bytes. E_NOT_OK: No SDU data has been copied. PduInfoPtr must not be used since it may contain a NULL pointer or point to invalid data. Description Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr-&gt;SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr-&gt;SduDataPtr and update the length of the actual copied data in PduInfoPtr-&gt;SduLength. If not, it returns E_ NOT_OK without changing PduInfoPtr. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00127</srcid><srcstatus/><internalId>142</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>451</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00128</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_CopyRxData Syntax BufReq_ReturnType SecOC_CopyRxData ( PduIdType id, const PduInfoType* info, PduLengthType* bufferSizePtr ) Service ID [hex] 0x44 Sync/Async Synchronous Reentrancy Reentrant Parameters (in) id Identification of the received I-PDU. info Provides the source buffer (SduDataPtr) and the number of bytes to be copied (SduLength). An SduLength of 0 can be used to query the current amount of available buffer in the upper layer module. In this case, the SduDataPtr may be a NULL_PTR. Parameters (inout) None Parameters (out) bufferSize Ptr Available receive buffer after data has been copied. Return value BufReq_- Return- Type BUFREQ_OK: Data copied successfully BUFREQ_E_NOT_OK: Data was not copied because an error occurred. Description This function is called to provide the received data of an I-PDU segment (N-PDU) to the upper layer. Each call to this function provides the next part of the I-PDU data. The size of the remaining buffer is written to the position indicated by bufferSizePtr. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00128</srcid><srcstatus/><internalId>143</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>452</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00129</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_CopyTxData Syntax BufReq_ReturnType SecOC_CopyTxData ( PduIdType id, const PduInfoType* info, const RetryInfoType* retry, PduLengthType* availableDataPtr ) Service ID [hex] 0x43 Sync/Async Synchronous Reentrancy Reentrant Parameters (in) id Identification of the transmitted I-PDU. info Provides the destination buffer (SduDataPtr) and the number of bytes to be copied (SduLength). If not enough transmit data is available, no data is copied by the upper layer module and BUFREQ_E_BUSY is returned. The lower layer module may retry the call. An SduLength of 0 can be used to indicate state changes in the retry parameter or to query the current amount of available data in the upper layer module. In this case, the SduDataPtr may be a NULL_PTR. retry This parameter is used to acknowledge transmitted data or to retransmit data after transmission problems. If the retry parameter is a NULL_PTR, it indicates that the transmit data can be removed from the buffer immediately after it has been copied. Otherwise, the retry parameter must point to a valid RetryInfoType element. If TpDataState indicates TP_CONFPENDING, the previously copied data must remain in the TP buffer to be available for error recovery. TP_ DATACONF indicates that all data that has been copied before this call is confirmed and can be removed from the TP buffer. Data copied by this API call is excluded and will be confirmed later. TP_DATARETRY indicates that this API call shall copy previously copied data in order to recover from an error. In this case TxTpDataCnt specifies the offset in bytes from the current data copy position. Parameters (inout) None Parameters available Indicates the remaining number of bytes that are available in the upper (out) DataPtr layer module's Tx buffer. availableDataPtr can be used by TP modules that support dynamic payload lengths (e.g. FrIsoTp) to determine the size of the following CFs. Return value BufReq_- Return- Type BUFREQ_OK: Data has been copied to the transmit buffer completely as requested. BUFREQ_E_BUSY: Request could not be fulfilled, because the required amount of Tx data is not available. The lower layer module may retry this call later on. No data has been copied. BUFREQ_E_NOT_OK: Data has not been copied. Request failed. Description This function is called to acquire the transmit data of an I-PDU segment (N-PDU). Each call to this function provides the next part of the I-PDU data unless retry-&gt;Tp DataState is TP_DATARETRY. In this case the function restarts to copy the data beginning at the offset from the current position indicated by retry-&gt;TxTpDataCnt. The size of the remaining data is written to the position indicated by availableDataPtr. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00129</srcid><srcstatus/><internalId>144</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>453</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00130</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_StartOfReception Syntax BufReq_ReturnType SecOC_StartOfReception ( PduIdType id, const PduInfoType* info, PduLengthType TpSduLength, PduLengthType* bufferSizePtr ) Service ID [hex] 0x46 Sync/Async Synchronous Reentrancy Reentrant Parameters (in) id Identification of the I-PDU. info Pointer to a PduInfoType structure containing the payload data (without protocol information) and payload length of the first frame or single frame of a transport protocol I-PDU reception, and the MetaData related to this PDU. If neither first/single frame data nor MetaData are available, this parameter is set to NULL_PTR. TpSdu Length Total length of the N-SDU to be received. Parameters (inout) None Parameters buffer Available receive buffer in the receiving module. This parameter will be (out) SizePtr used to compute the Block Size (BS) in the transport protocol module. Return value BufReq_- Return- Type BUFREQ_OK: Connection has been accepted. bufferSizePtr indicates the available receive buffer; reception is continued. If no buffer of the requested size is available, a receive buffer size of 0 shall be indicated by bufferSizePtr. BUFREQ_E_NOT_OK: Connection has been rejected; reception is aborted. bufferSizePtr remains unchanged. BUFREQ_E_OVFL: No buffer of the required length can be provided; reception is aborted. bufferSizePtr remains unchanged. Description This function is called at the start of receiving an N-SDU. The N-SDU might be fragmented into multiple N-PDUs (FF with one or more following CFs) or might consist of a single N-PDU (SF). The service shall provide the currently available maximum buffer size when invoked with TpSduLength equal to 0. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00130</srcid><srcstatus/><internalId>145</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/MetaDataHandling</srcid><srcstatus/><internalId>695</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/MetaDataHandling -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>454</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00181</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>In case SecOC_StartOfReception is called with TpSduLengthequal to 0, the SecOC module shall return BUFREQ_E_NOT_OK and no further action shall be taken.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00181</srcid><srcstatus/><internalId>146</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>455</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00012</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the SecOC module uses the Csm module asynchronously to calculate or verify the authenticator, SecOC shall provide adequate callback functions for every CsmJob to get notification about the result of the asynchronous job.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00012</srcid><srcstatus/><internalId>147</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>456</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91007</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_GetRxFreshness Syntax Std_ReturnType SecOC_GetRxFreshness ( uint16 SecOCFreshnessValueID, const uint8* SecOCTruncatedFreshnessValue, uint32 SecOCTruncatedFreshnessValueLength, uint16 SecOCAuthVerifyAttempts, uint8* SecOCFreshnessValue, uint32* SecOCFreshnessValueLength ) Service ID [hex] 0x4f Sync/Async Synchronous Reentrancy Reentrant Parameters (in) SecOCFreshness ValueID Holds the identifier of the freshness value. SecOCTruncated FreshnessValue Holds the truncated freshness value that was contained in the Secured I-PDU. SecOCTruncated FreshnessValue Length Holds the length in bits of the truncated freshness value. SecOCAuthVerify Attempts Holds the number of authentication verify attempts of this PDU since the last reception. The value is 0 for the first attempt and incremented on every unsuccessful verification attempt. Parameters (inout) SecOCFreshness ValueLength Holds the length in bits of the freshness value. Parameters (out) SecOCFreshness Value Holds the freshness value to be used for the calculation of the authenticator. Return value Std_ReturnType E_OK: request successful E_NOT_OK: request failed, a freshness value cannot be provided due to general issues for freshness or this FreshnessValueId. E_BUSY: The freshness information can temporarily not be provided. Description This interface is used by the SecOC to obtain the current freshness value. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_91007</srcid><srcstatus/><internalId>290</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCCalloutFunctionNames</srcid><srcstatus/><internalId>713</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCCalloutFunctionNames -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>457</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_GetRxFreshnessAuthData Syntax Std_ReturnType SecOC_GetRxFreshnessAuthData ( uint16 SecOCFreshnessValueID, const uint8* SecOCTruncatedFreshnessValue, uint32 SecOCTruncatedFreshnessValueLength, const uint8* SecOCAuthDataFreshnessValue, uint16 SecOCAuthDataFreshnessValueLength, uint16 SecOCAuthVerifyAttempts, uint8* SecOCFreshnessValue, uint32* SecOCFreshnessValueLength ) Service ID [hex] 0x4e Sync/Async Synchronous Reentrancy Reentrant Parameters (in) SecOCFreshness ValueID Holds the identifier of the freshness value. SecOCTruncated FreshnessValue Holds the truncated freshness value that was contained in the Secured I-PDU. SecOCTruncated FreshnessValue Length Holds the length in bits of the truncated freshness value. SecOCAuthData FreshnessValue The parameter holds a part of the received, not yet authenticated PDU. The parameter is optional (see description) SecOCAuthData FreshnessValue Length This is the length value in bits that holds the freshness from the authentic PDU. The parameter is optional (see description). SecOCAuthVerify Attempts Holds the number of authentication verify attempts of this PDU since the last reception. The value is 0 for the first attempt and incremented on every unsuccessful verification attempt. Parameters (inout) SecOCFreshness ValueLength Holds the length in bits of the freshness value. Parameters (out) SecOCFreshness Value Holds the freshness value to be used for the calculation of the authenticator. Return value Std_ReturnType E_OK: request successful E_NOT_OK: request failed, a freshness value cannot be provided due to general issues for freshness or this FreshnessValueId. E_BUSY: The freshness information can temporarily not be provided. Description This interface is used by the SecOC to obtain the current freshness value. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_91006</srcid><srcstatus/><internalId>148</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCCalloutFunctionNames</srcid><srcstatus/><internalId>713</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCCalloutFunctionNames -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>458</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_GetTxFreshness Syntax Std_ReturnType SecOC_GetTxFreshness ( uint16 SecOCFreshnessValueID, uint8* SecOCFreshnessValue, uint32* SecOCFreshnessValueLength ) Service ID [hex] 0x52 Sync/Async Synchronous Reentrancy Reentrant Parameters (in) SecOCFreshness ValueID Holds the identifier of the freshness value. Parameters (inout) SecOCFreshness ValueLength Holds the length of the provided freshness in bits. Parameters (out) SecOCFreshness Value Holds the current freshness value Return value Std_ReturnType E_OK: request successful E_NOT_OK: request failed, a freshness value cannot be provided due to general issues for freshness or this FreshnessValueId. E_BUSY: The freshness information can temporarily not be provided. Description This API returns the freshness value from the Most Significant Bits in the first byte in the array (SecOCFreshnessValue), in big endian format. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_91004</srcid><srcstatus/><internalId>285</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCCalloutFunctionNames</srcid><srcstatus/><internalId>713</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCCalloutFunctionNames -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>459</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_GetTxFreshnessTruncData Syntax Std_ReturnType SecOC_GetTxFreshnessTruncData ( uint16 SecOCFreshnessValueID, uint8* SecOCFreshnessValue, uint32* SecOCFreshnessValueLength, uint8* SecOCTruncatedFreshnessValue, uint32* SecOCTruncatedFreshnessValueLength ) Service ID 0x51 [hex] Sync/Async Synchronous Reentrancy Reentrant Parameters (in) SecOCFreshness ValueID Holds the identifier of the freshness value. Parameters (inout) SecOCFreshness ValueLength Holds the length of the provided freshness in bits. SecOCTruncated FreshnessValue Length Provides the truncated freshness length configured for this freshness. The function may adapt the value if needed or can leave it unchanged if the configured length and provided length is the same. Parameters (out) SecOCFreshness Value Holds the current freshness value. SecOCTruncated FreshnessValue Holds the truncated freshness to be included into the Secured I-PDU. The parameter is optional. Return value Std_ReturnType E_OK: request successful E_NOT_OK: request failed, a freshness value cannot be provided due to general issues for freshness or this FreshnessValueId. E_BUSY: The freshness information can temporarily not be provided. Description This interface is used by the SecOC to obtain the current freshness value. The interface function provides also the truncated freshness transmitted in the secured I- PDU. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_91003</srcid><srcstatus/><internalId>283</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>460</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91005</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_SPduTxConfirmation Syntax void SecOC_SPduTxConfirmation ( uint16 SecOCFreshnessValueID ) Service ID [hex] 0x4d Sync/Async Synchronous Reentrancy Reentrant Parameters (in) SecOCFreshnessValueID Holds the identifier of the freshness value. Parameters None (inout) Parameters (out) None Return value None Description This interface is used by the SecOC to indicate that the Secured I-PDU has been initiated for transmission. Available via SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_91005</srcid><srcstatus/><internalId>287</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>461</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00110</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCRxPduMainFunctionRef Parent Container SecOCRxPduProcessing Description Reference to the SecOC_MainFunctionRx this PDU belongs to. Mandatory, if multiple main functions are defined. Multiplicity 0..1 Type Reference to [ SecOCMainFunctionRx ] Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00110</srcid><srcstatus/><internalId>149</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>462</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00111</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCTxPduMainFunctionRef Parent Container SecOCTxPduProcessing Description Reference to the SecOC_MainFunctionTx this PDU belongs to. Mandatory, if multiple main functions are defined. Multiplicity 0..1 Type Reference to [ SecOCMainFunctionTx ] Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00111</srcid><srcstatus/><internalId>150</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>463</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00171</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_MainFunctionRx Syntax void SecOC_MainFunctionRx ( void ) Service ID [hex] 0x06 Description This function performs the processing of the SecOC module's authentication and verification processing for the Rx path. Per configured SecOCMainFunctionRx instance one SecOC_MainFunctionRx_&lt;shortName&gt; shall be implemented. Hereby &lt;shortName&gt; is the short name of the SecOCMainFunctionRx configuration container in the ECU configuration. Available via SchM_SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00171</srcid><srcstatus/><internalId>151</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>464</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00172</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the SecOC module was not previously initialized with a call to SecOC_Init, then a call to SecOC_MainFunctionRx shall simply return.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00172</srcid><srcstatus/><internalId>152</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>465</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00173</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The cycle time of the SecOC_MainFunctionRx is configured by the parameter SecOCMainFunctionPeriodRx.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00173</srcid><srcstatus/><internalId>153</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>466</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00174</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOC_MainFunctionRx is scheduled, the SecOC shall firstly check if there are new Secured I-PDUs to be verified. If yes the SecOC module shall process the verification of each of the IPDUs identified as new subsequently in the very same main function call.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00174</srcid><srcstatus/><internalId>154</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>467</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00175</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For each newly successfully verified Secured I-PDU, the SecOC module shall immediately pass the Authentic I-PDU to the upper layer communication module by calling PduR_SecOC[If|Tp]RxIndicationfor the Authentic I-PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00175</srcid><srcstatus/><internalId>155</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>468</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00176</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_MainFunctionTx Syntax void SecOC_MainFunctionTx ( void ) Service ID [hex] 0x03 Description This function performs the processing of the SecOC module's authentication and verification processing for the Tx path. Per configured SecOCMainFunctionTx instance one SecOC_MainFunctionTx_&lt;shortName&gt; shall be implemented. Hereby &lt;shortName&gt; is the short name of the SecOCMainFunctionTx configuration container in the ECU configuration. Available via SchM_SecOC.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00176</srcid><srcstatus/><internalId>156</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>469</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00177</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If the SecOC module was not previously initialized with a call to SecOC_Init, then a call to SecOC_MainFunctionTx shall simply return.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00177</srcid><srcstatus/><internalId>157</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>470</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00178</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>The cycle time of the SecOC_MainFunctionTx is configured by the parameter SecOCMainFunctionPeriodTx.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00178</srcid><srcstatus/><internalId>158</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>471</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00179</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>If SecOC_MainFunctionTx is scheduled, the SecOC shall firstly check if there are new Authentic I-PDUs to be authenticated. If yes the SecOC module shall process the authentication of each of the IPDUs identified as new subsequently in the very same main function call.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00179</srcid><srcstatus/><internalId>159</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>472</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00180</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>For each newly authenticated Authentic I-PDU, the SecOC module shall immediately trigger the transmission of the Secured I-PDU at the lower layer module by calling the PduR.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00180</srcid><srcstatus/><internalId>160</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>473</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00137</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>
        | API Function                | Header File    | Description
        ------------------------------------------------------------------------------------------
        |  Det_ReportRuntimeError     |  Det.h         |  Service to report runtime errors. If a callout has been configured then this callout shall be called.
        |  PduR_SecOCCancelTransmit   |  PduR_SecOC.h  |  Requests cancellation of an ongoing transmission of a PDU in a lower layer communication module.
        |  PduR_SecOCIfRxIndication   |  PduR_SecOC.h  |  Indication of a received PDU from a lower layer communication interface module.
        |  PduR_SecOCIfTxConfirmation |  PduR_SecOC.h  |  The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU.
        |  PduR_SecOCTransmit         |  PduR_SecOC.h  |  Requests transmission of a PDU.
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00137</srcid><srcstatus/><internalId>161</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>474</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00138</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>API Function Header File Description Csm_Mac- Generate Csm.h Uses the given data to perform a MAC generation and stores the MAC in the memory location pointed to by the MAC pointer. Csm_MacVerify Csm.h Verifies the given MAC by comparing if the MAC is generated with the given data. Csm_Signature- Generate Csm.h Uses the given data to perform the signature calculation and stores the signature in the memory location pointed by the result pointer. Csm_Signature- Verify Csm.h Verifies the given MAC by comparing if the signature is generated with the given data. Det_ReportError Det.h Service to report development errors. IdsM_Set- SecurityEvent IdsM.h This API is the application interface to report security events to the Ids M. IdsM_Set- SecurityEvent- WithContextData IdsM.h This API is the application interface to report security events with context data to the IdsM. PduR_SecOC- CancelReceive PduR_ Sec OC.h Requests cancellation of an ongoing reception of a PDU in a lower layer transport protocol module. PduR_SecOC- TpCopyRxData PduR_ Sec OC.h This function is called to provide the received data of an I-PDU segment (N-PDU) to the upper layer. Each call to this function provides the next part of the I-PDU data. The size of the remaining buffer is written to the position indicated by bufferSizePtr. PduR_SecOC- TpCopyTxData PduR_ Sec OC.h This function is called to acquire the transmit data of an I-PDU segment (N-PDU). Each call to this function provides the next part of the I-PDU data unless retry-&gt;TpDataState is TP_DATARETRY. In this case the function restarts to copy the data beginning at the offset from the current position indicated by retry-&gt;TxTpDataCnt. The size of the remaining data is written to the position indicated by availableDataPtr. PduR_SecOC- TpRxIndication PduR_ Sec OC.h Called after an I-PDU has been received via the TP API, the result indicates whether the transmission was successful or not. PduR_SecOC- TpStartOf- Reception PduR_ Sec OC.h This function is called at the start of receiving an N-SDU. The N-SDU might be fragmented into multiple N-PDUs (FF with one or more following CFs) or might consist of a single N-PDU (SF). The service shall provide the currently available maximum buffer size when invoked with TpSduLength equal to 0. PduR_SecOC- TpTx- Confirmation PduR_ Sec OC.h This function is called after the I-PDU has been transmitted on its network, the result indicates whether the transmission was successful or not.</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00138_1</srcid><srcstatus/><internalId>162</internalId></linkedfrom><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00138_2</srcid><srcstatus/><internalId>163</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/DetNotSupported</srcid><srcstatus/><internalId>709</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/DetNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>475</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00119</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_VerificationStatusCallout Syntax void SecOC_VerificationStatusCallout ( SecOC_VerificationStatusType verificationStatus ) Service ID [hex] 0x50 Sync/Async Synchronous Reentrancy Non Reentrant for the same FreshnessValueID. Reentrant for different Freshness ValueIDs Parameters (in) verification Status Data structure to bundle the status of a verification attempt for a specific Freshness Value and Data ID Parameters (inout) None Parameters (out) None Return value None Description Service is used to propagate the status of each verification attempt from the Sec OC module to other modules. This service can be configured such that: Only: "False" Verification Status is propagated to modules Both: "True" and "False" Verification Status are propagated to modules None: No Verification Status is propagated Available via SecOC_Externals.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00119</srcid><srcstatus/><internalId>164</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>476</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91014</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Service Name SecOC_VerifyStatus Syntax void SecOC_VerifyStatus ( SecOC_VerificationStatusType verificationStatus ) Service ID [hex] 0x53 Sync/Async Synchronous Reentrancy Non Reentrant for the same FreshnessValueID. Reentrant for different Freshness ValueIDs Parameters (in) verification Status The verificationStatus is a structure that provides details about the verification status and on which DataId and FreshnessValueId the verification was performed. Parameters (inout) None Parameters (out) None Return value None Description This service provides the ability to inform the application about the result of the verification attempt of a received PDU by the SecOC module. Available via SecOC_Externals.h</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOC_VerifyStatusNotSupported</srcid><srcstatus/><internalId>704</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOC_VerifyStatusNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>477</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00141</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name VerificationStatus Comment This service realizes a notification service that is used to propagate the status of each authentication attempt from the SecOC module to the application layer. This service can be configured such that: Only "False" Verification Status is propagated to the application layer Both "True" and "False" Verification Status are propagated to the application layer No Verification Status is propagated to the application layer IsService true Variation -- Data Elements verificationStatus Type SecOC_VerificationStatusType Variation --</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00141</srcid><srcstatus/><internalId>165</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>478</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00148</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>SecOC shall define a provide port for the SecOC_VerificationStatusService interface and call the generated Rte function as configured by the parameter SecOCVerificationStatusPropagationMode. The sender/receiver interface shall be defined as standard interface.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_00148</srcid><srcstatus/><internalId>166</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCVerificationStatusServicePort</srcid><srcstatus/><internalId>700</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCVerificationStatusServicePort -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>479</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00142</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name VerifyStatusConfiguration Comment Verify Status Configuration Service of SecOC IsService true Variation -- Possible Errors 0 E_OK Operation successful 1 E_NOT_OK Operation failed Operation VerifyStatusOverride Comment This service provides the ability to force specific behaviour of SecOc: accept or drop an I-PDU with or without performing the verification of authenticator or independent of the authenticator verification result, and to force a specific result for SecOC_ VerificationResultType allowing additional fault handling in the application. Option SECOC_OVERRIDE_PASS_UNTIL_NOTICE, SECOC_OVERRIDE_SKIP_ UNTIL_LIMIT, SECOC_OVERRIDE_PASS_UNTIL_LIMIT or SECOC_OVERRIDE_ SKIP_UNTIL_NOTICE are available only if SecOCEnableForcedPassOverride is set to TRUE. Variation -- Parameters ValueId Type uint16 Direction IN Comment Identifier of the Value ID where override shall be applied to. If configuration option SecOCOverrideStatusWithDataId is set to TRUE, this value shall provide the DataID of the secured I-PDU. If Sec OCOverrideStatusWithDataId is set to FALSE, this parameter shall provide the freshness value ID. Variation -- overrideStatus Type SecOC_OverrideStatusType Direction IN Comment Defines whether verification is executed and whether the I-PDU is passed on, and for how long the override is active. Variation -- numberOfMessagesToOverride Type uint8 Direction IN Comment Number of sequential VerifyStatus to override when using a specific counter for authentication verification. This is only considered when OverrideStatus is equal to SECOC_OVERRIDE_DROP_UNTIL_LIMIT, SECOC_OVERRIDE_SKIP_UNTIL_LIMIT or SECOC_OVERRIDE_ PASS_UNTIL_LIMIT. Variation -- Possible Errors E_OK E_NOT_OK</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00142</srcid><srcstatus/><internalId>167</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>480</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name FreshnessManagement Comment Freshness Management for SecOC IsService true Variation -- Possible Errors 0 E_OK Operation successful 1 E_NOT_ OK Operation failed 2 E_BUSY Operation temporary failed, a freshness cannot be provided at the moment. Operation GetRxFreshness Comment This interface is used by the SecOC to obtain the current freshness value. This operation provides also a part of the Authentic-PDU data if configured. Variation ({ecuc(SecOC/SecOCRxPduProcessing/SecOCUseAuthDataFreshness)} == FALSE) Parameters freshnessValueId Type uint16 Direction IN Comment Identifier of the freshness Variation -- truncatedFreshnessValue Type SecOC_FreshnessArrayType Direction IN Comment The truncated freshness value from the received Secured-IPDU Variation -- truncatedFreshnessValueLength Type uint32 Direction IN Comment Length in bits of the truncated freshness value Variation -- authVerifyAttempts Type uint16 Direction IN Comment The number of authentication verify attempts for the current PDU Variation -- freshnessValue Type SecOC_FreshnessArrayType Direction OUT Comment The freshness value for this PDU Variation -- freshnessValueLength Type uint32 Direction INOUT Comment The freshness value length in bits. Variation -- Possible Errors E_OK E_NOT_OK E_BUSY Operation GetRxFreshnessAuthData Comment This interface is used by the SecOC to obtain the current freshness value. This operation provides also a part of the Authentic-PDU data if configured. Variation ({ecuc(SecOC/SecOCRxPduProcessing/SecOCUseAuthDataFreshness)} == TRUE) Parameters freshnessValueId Type uint16 Direction IN Comment Identifier of the freshness Variation -- truncatedFreshnessValue Type SecOC_FreshnessArrayType Direction IN Comment The truncated freshness value from the received Secured-IPDU Variation -- truncatedFreshnessValueLength Type uint32 Direction IN Comment Length in bits of the truncated freshness value Variation -- authenticDataFreshnessValue Type SecOC_FreshnessArrayType Direction IN Comment The selected part of the authentic data. Variation -- authenticDataFreshnessValueLength Type uint16 Direction IN Comment The length in bits of the authentic data part. Variation -- authVerifyAttempts Type uint16 Direction IN Comment The number of authentication verify attempts for this PDU Variation -- freshnessValue Type SecOC_FreshnessArrayType Direction OUT Comment The freshness value for this PDU Variation -- freshnessValueLength Type uint32 Direction INOUT Comment The freshness value length in bits. Variation -- Possible Errors E_OK E_NOT_OK E_BUSY Operation GetTxFreshness Comment Returns the freshness value from the Most Significant Bits in the first byte in the array (SecOCFreshnessValue), in big endian format. Variation ({ecuc(SecOC/SecOCTxPduProcessing/SecOCProvideTxTruncatedFreshness Value)} == FALSE) Parameters freshnessValueId Type uint16 Direction IN Comment Identifier of the freshness Variation -- freshnessValue Type SecOC_FreshnessArrayType Direction OUT Comment Freshness value Variation -- freshnessValueLength Type uint32 Direction INOUT Comment Length in bits of the freshness value Variation -- Possible Errors E_OK E_NOT_OK E_BUSY Operation GetTxFreshnessTruncData Comment This operation is used by the SecOC to obtain the freshness that corresponds to the freshnessValueId. The operation provides the freshness and also the truncated freshness that shall be placed into the Secured-IPDU. Variation ({ecuc(SecOC/SecOCTxPduProcessing/SecOCProvideTxTruncatedFreshness Value)} == TRUE) Parameters freshnessValueId Type uint16 Direction IN Comment Identifier of the freshness Variation -- freshnessValue Type SecOC_FreshnessArrayType Direction OUT Comment Freshness value Variation -- freshnessValueLength Type uint32 Direction INOUT Comment Length in bits of the freshness value Variation -- truncatedFreshnessValue Type SecOC_FreshnessArrayType Direction OUT Comment The truncated freshness value that has to be placed into the Secured-IPDU Variation -- truncatedFreshnessValueLength Type uint32 Direction INOUT Comment The length in bits for the truncated freshness. Variation -- Possible Errors E_OK E_NOT_OK E_BUSY Operation SPduTxConfirmation Comment This operation is used by the SecOC to indicate that the Secured I-PDU has been initiated for transmission. Variation -- Parameters freshnessValueId Type uint16 Direction IN Comment Identifier of the freshness Variation -- Possible Errors E_OK</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_91002_1</srcid><srcstatus/><internalId>168</internalId></linkedfrom><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_91002_2</srcid><srcstatus/><internalId>169</internalId></linkedfrom><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_91002_3</srcid><srcstatus/><internalId>170</internalId></linkedfrom><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_91002_4</srcid><srcstatus/><internalId>171</internalId></linkedfrom><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_91002_5</srcid><srcstatus/><internalId>172</internalId></linkedfrom><linkedfrom><srcid>SecOC.Asr.Correction.SWS_SecOC_91002_6</srcid><srcstatus/><internalId>173</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/FreshnessManagementInterfaceName</srcid><srcstatus/><internalId>699</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/FreshnessManagementInterfaceName -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>481</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SendDefaultAuthenticationInformation Comment Sending Default Authentication Information configuration service. IsService true Variation ({ecuc(SecOC/SecOCGeneral/SecOCDefaultAuthenticationInformation Pattern.value != NULL)}) Possible Errors 0 E_OK Operation successful 1 E_NOT_OK Operation failed Operation SendDefaultAuthenticationInformation Comment The service provides the ability to enable the sending of un-authenticated PDU to lower layer. (example: in case authentication build counter has reached the configuration value SecOCAuthenticationBuildAttempts or the query of the freshness function returns E_NOT_OK or the calculation of the authenticator has returned a non-recoverable error such as returning E_NOT_OK or KEY_FAILURE). This service is optional (the service is available only if SecOCDefaultAuthentication InformationPattern is configured). If the service is not available or the service is available but the service was called with sendDefaultAuthenticationInformation as FALSE for a given FreshnessValueID, Sec OC module shall remove the Authentic I-PDU from its internal buffer and cancel the transmission request in case the building of authentication Information failed. If the service is available and the service was called with sendDefaultAuthentication Information as TRUE for a given FreshnessValueID, SecOc will use SecOCDefault AuthenticationInformationPattern as authentication Information and will not cancel the transmission request. Variation ({ecuc(SecOC/SecOCRxPduProcessing/SecOCUseAuthDataFreshness)} == FALSE) Parameters FreshnessValueID Type uint16 Direction IN Comment ID of the Freshness Value for which sending SecOCDefault AuthenticationInformationPattern should be enabled. Variation -- sendDefaultAuthenticationInformation Type boolean Direction IN Comment FALSE - sending SecOCDefaultAuthenticationInformationPattern shall be disabled for given FreshnessValueID TRUE - sending SecOCDefaultAuthenticationInformationPattern shall be enabled for given FreshnessValueID Variation -- Possible Errors E_OK E_NOT_OK</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00002</srcid><srcstatus/><internalId>175</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>482</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91016</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name VerificationStatusIndication Comment This service realizes a notification service that is used to propagate the status of an authentication attempt from the SecOC module to an SW-C through RTE. This service can be configured such that: Only "False" Verification Status is propagated to the application layer Both "True" and "False" Verification Status are propagated to the application layer No Verification Status is propagated to the application layer IsService true Variation -- Possible Errors 0 E_OK Operation successful 1 E_NOT_OK Operation failed Operation VerifyStatus Comment This service provides the ability to inform the application about the result of the verification attempt of a received PDU by the SecOC module. Variation -- Parameters verificationStatus Type SecOC_VerificationStatusType Direction IN Comment The verificationStatus is a structure that provides details about the verification status and on which DataId and FreshnessValueId the verification was performed. Variation -- Possible Errors E_OK E_NOT_OK</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_91016</srcid><srcstatus/><internalId>176</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>483</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name FreshnessManagement Kind RequiredPort Interface FreshnessManagement Description Port for the provision of freshness for SecOC. Variation ({ecuc(SecOC/SecOCGeneral/SecOCQueryFreshnessValue)} == RTE)</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_91001_1</srcid><srcstatus/><internalId>177</internalId></linkedfrom><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_91001_2</srcid><srcstatus/><internalId>178</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/FreshnessManagementInterfaceName</srcid><srcstatus/><internalId>699</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/FreshnessManagementInterfaceName -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>484</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91020</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SendDefaultAuthenticationInformation Kind ProvidedPort Interface SendDefaultAuthenticationInformation Description -- Variation ({ecuc(SecOC/SecOCGeneral/SecOCDefaultAuthenticationInformationPattern.value != NULL)})</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_91020</srcid><srcstatus/><internalId>179</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>485</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91021</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name VerificationStatus Kind ProvidedPort Interface VerificationStatus Description -- Variation --</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_91021</srcid><srcstatus/><internalId>180</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>486</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91022</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name VerifyStatusConfiguration Kind ProvidedPort Interface VerifyStatusConfiguration Description -- Variation --</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_91022</srcid><srcstatus/><internalId>181</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>487</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91015</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name VerificationStatusNotification Kind RequiredPort Interface VerificationStatusIndication Description Port definition for the notification of the verification status for a client-Server interface. Variation --</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_91015</srcid><srcstatus/><internalId>182</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>488</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_91012</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOC_FreshnessArrayType Kind Array Element type uint8 Size SECOC_MAX_FRESHNESS_SIZE Elements Description -- Variation -- Available via Rte_SecOC_Type.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_91012</srcid><srcstatus/><internalId>183</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>489</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00149</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOC_VerificationResultType Kind Enumeration Range SECOC_VERIFICATIONSUCCESS 0x00 Verification successful SECOC_VERIFICATIONFAILURE 0x01 Verification not successful SECOC_FRESHNESSFAILURE 0x02 Verification not successful because of wrong freshness value. SECOC_ AUTHENTICATIONBUILDFAILURE 0x03 Verification not successful because of wrong build authentication codes SECOC_NO_VERIFICATION 0x04 Verification has been skipped and the data has been provided to upper layer "as is". (only possible when SecOC_ VerifyStatusOverride is used) SECOC_VERIFICATIONFAILURE_ OVERWRITTEN 0x05 Verification failed, but the I-PDU was passed on to the upper layer due to the override status for this PDU. ( only possible when SecOC_VerifyStatus Override is used) Description Enumeration to indicate verification results. Variation -- Available via Rte_SecOC_Type.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00149</srcid><srcstatus/><internalId>184</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>490</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00160</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOC_VerificationStatusType Kind Structure Elements freshnessValueID Type uint16 Comment Identifier of the Freshness Value which resulted in the Verification Status verificationStatus Type SecOC_VerificationResultType Comment Result of verification attempt: SECOC_VERIFICATIONSUCCESS = Verification successful SECOC_VERIFICATIONFAILURE = Verification not successful SECOC_FRESHNESSFAILURE = Verification not successful because of wrong freshness value SECOC_ AUTHENTICATIONBUILDFAILURE = Verification not successful because of wrong build authentication codes SECOC_NO_VERIFICATION = No verification attempt was performed on this I-PDU and the I-PDU was passed on to the upper layer "as is". SECOC_VERIFICATIONFAILURE_ OVERWRITTEN = Verification failed, but the I-PDU was passed on to the upper layer due to the override status for this PDU. secOCDataId Type uint16 Comment Data ID of SecOCDataId Description Data structure to bundle the status of a verification attempt for a specific Freshness Value and Data ID Variation -- Available via  Rte_SecOC_Type.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00160</srcid><srcstatus/><internalId>185</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>491</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00991</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOC_OverrideStatusType Kind Enumeration Range SECOC_ OVERRIDE_ DROP_UNTIL_ NOTICE 0x00 Until further notice, authenticator verification is not performed (no CSM call) I-PDU is dropped, verification result is set to SECOC_NO_VERIFICATION. SECOC_ OVERRIDE_ DROP_UNTIL_ LIMIT 0x01 Until NumberOfMessagesToOverride is reached, authenticator verification is not performed (no CSM call) I- PDU is dropped, verification result is set to SECOC_NO_ VERIFICATION. SECOC_ OVERRIDE_ CANCEL 0x02 Cancel Override of VerifyStatus. SECOC_ OVERRIDE_ PASS_UNTIL_ NOTICE 0x40 Until further notice, authenticator verification is performed, I- PDU is sent to upper layer independent of verification result, verification result is set to SECOC_ VERIFICATIONFAILURE_OVERWRITTEN in case of failed verification. SECOC_ OVERRIDE_ SKIP_UNTIL_ LIMIT 0x41 Until NumberOfMessagesToOverride is reached, authenticator verification is not performed, I-PDU is sent to upper layer, verification result is set to SECOC_NO_ VERIFICATION. If SecOCRxSecuredPduCollection is configured, SecOc shall process the SecOCRxAuthenticPdu without waiting for SecOCRxCryptographicPdu. SECOC_ OVERRIDE_ PASS_UNTIL_ LIMIT 0x42 Until NumberOfMessagesToOverride is reached, authenticator verification is performed, I-PDU is sent to upper layer independent of verification result, verification result is set to SECOC_VERIFICATIONFAILURE_ OVERWRITTEN in case of failed verification. SECOC_ OVERRIDE_ SKIP_UNTIL_ NOTICE 0x43 Until further notice, authenticator verification is not performed, I-PDU is sent to upper layer, verification result is set to SECOC_NO_VERIFICATION. If SecOCRxSecured PduCollection is configured, SecOc shall process the Sec OCRxAuthenticPdu without waiting for SecOCRx CryptographicPdu. Description Defines possibilities to override the verification status. Variation -- Available via Rte_SecOC_Type.h</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_00991</srcid><srcstatus/><internalId>186</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>492</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_CONSTR_00265</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Within the same configured SecOCRxPduProcessing, if SecOCReceptionOverflowStrategy is set to QUEUE, then SecOCRxSecuredPduCollection shall have multiplicity of 0.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.SWS_SecOC_CONSTR_00265</srcid><srcstatus/><internalId>187</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>493</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.SWS_SecOC_00999</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>These requirements are not applicable to this specification.</description>
      <comment>This requirement is not applicable.</comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>494</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Module Name SecOC Module Description Configuration of the SecOC (SecureOnboardCommunication) module. Post-Build Variant Support true Supported Config Variants VARIANT-LINK-TIME, VARIANT-POST-BUILD, VARIANT-PRE-COMPILE</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00001</srcid><srcstatus/><internalId>188</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>495</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCGeneral Parent Container SecOC Description Contains the general configuration parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00002</srcid><srcstatus/><internalId>189</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>496</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00098</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCDefaultAuthenticationInformationPattern Parent Container SecOCGeneral Description The parameter describes the behaviour of SecOC when authentication build counter has reached the configuration value SecOCAuthenticationBuildAttempts, or the query of the freshness function returns E_NOT_OK or the calculation of the authenticator has returned a non-recoverable error such as returning E_NOT_OK or KEY_FAILURE. If the configuration parameter is not present, SecOC module shall remove the Authentic I-PDU from its internal buffer and cancel the transmission request If the configuration parameter is present, SecOC will use this value for each byte of Freshness Value and Authenticator when building the Authentication Information, and will not cancel the transmission request. Multiplicity 0..1 Type EcucIntegerParamDef Range 0 .. 255 Default value -- Post-Build Variant Multiplicity false Post-Build Variant Value false Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00098</srcid><srcstatus/><internalId>190</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>497</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00007</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCDevErrorDetect Parent Container SecOCGeneral Description Switches the development error detection and notification on or off. TRUE = detection and notification is enabled. FALSE = detection and notification is disabled. Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/DetNotSupported</srcid><srcstatus/><internalId>709</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/DetNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>498</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00051</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCEnableForcedPassOverride Parent Container SecOCGeneral Description When this configuration option is set to TRUE then the functionality inside the function SecOC_VerifyStatusOverride to send I-PDUs to upper layer independent of the verification result is enabled. Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00051</srcid><srcstatus/><internalId>191</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>499</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00114</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCEnableSecurityEventReporting Parent Container SecOCGeneral Description Switches the reporting of security events to the IdsM: - TRUE = reporting is enabled. - FALSE = reporting is disabled. Tags: atp.Status=draft Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: ECU</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecurityEventReportingNotSupported</srcid><srcstatus/><internalId>707</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecurityEventReportingNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>500</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00052</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCIgnoreVerificationResult Parent Container SecOCGeneral Description The result of the authentication process (e.g. MAC Verify) is ignored after the first try and the SecOC proceeds like the result was a success. The calculation of the authenticator is still done, only its result will be ignored. TRUE = enabled (verification result is ignored). FALSE = disabled (verification result is NOT ignored). Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00052</srcid><srcstatus/><internalId>192</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>501</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00047</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCMaxAlignScalarType Parent Container SecOCGeneral Description The scalar type which has the maximum alignment restrictions on the given platform. This type can be e.g. uint8, uint16 or uint32. Multiplicity 1 Type EcucStringParamDef Default value -- maxLength -- minLength -- regularExpression -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCMaxAlignScalarTypeNotSupported</srcid><srcstatus/><internalId>715</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCMaxAlignScalarTypeNotSupported -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>502</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00099</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCOverrideStatusWithDataId Parent Container SecOCGeneral Description This option defines if the parameter "ValueId" of the function SecOC_VerifyStatusOverride() accepts the freshness value (as a collection of one or more Secured I-PDUs to freshness) or the dataID for individual Secured I-PDUs. TRUE = Function SecOC_VerifyStatusOverride accepts SecOCDataId as parameter. FALSE = Function SecOC_VerifyStatusOverride accepts SecOCFreshnessValueId as parameter. Multiplicity 0..1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00099</srcid><srcstatus/><internalId>193</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>503</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00112</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCPropagateOnlyFinalVerificationStatus Parent Container SecOCGeneral Description This parameter Is used to specify if the verification status shall be reported only after the final determination of the verification status (TRUE) or on every verification attempt (FALSE). Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00112</srcid><srcstatus/><internalId>194</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>504</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00078</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCQueryFreshnessValue Parent Container SecOCGeneral Description This parameter specifies if the freshness value shall be determined through a C- function (CD) or a software component (SW-C). Multiplicity 1 Type EcucEnumerationParamDef Range CFUNC The SecOC queries the freshness for every PDU to process using C function API RTE The SecOC queries the freshness for every PDU to process using the Rte service port FreshnessManagement Default value CFUNC Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00078</srcid><srcstatus/><internalId>195</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCQueryFreshnessValueNoneValue</srcid><srcstatus/><internalId>702</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCQueryFreshnessValueNoneValue -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>505</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCVerificationStatusCallout Parent Container SecOCGeneral Description Entry address of the customer specific call out routine which shall be invoked in case of a verification attempt. Multiplicity 0..* Type EcucFunctionNameDef Default value -- maxLength -- minLength -- regularExpression -- Post-Build Variant Multiplicity false Post-Build Variant Value false Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00004</srcid><srcstatus/><internalId>196</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>506</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCVersionInfoApi Parent Container SecOCGeneral Description If true the SecOC_GetVersionInfo API is available. Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00003</srcid><srcstatus/><internalId>197</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>507</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00104</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCMainFunctionRx Parent Container SecOC Description Each element of this container defines one instance of SecOC_MainFunctionRx. Configuration Parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00104</srcid><srcstatus/><internalId>198</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>508</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00106</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCMainFunctionPeriodRx Parent Container SecOCMainFunctionRx Description Allows to configure the time for the respective MainFunction instance of the Rx path (as float in seconds). Multiplicity 1 Type EcucFloatParamDef Range ]0 .. INF[ Default value -- Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00106</srcid><srcstatus/><internalId>199</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>509</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00107</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCMainFunctionRxPartitionRef Parent Container SecOCMainFunctionRx Description Reference to EcucPartition, where the according SecOC_MainFunction instance is assigned to. Multiplicity 1 Type Reference to [ EcucPartition ] Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00107</srcid><srcstatus/><internalId>200</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>510</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00105</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCMainFunctionTx Parent Container SecOC Description Each element of this container defines one instance of SecOC_MainFunctionTx. Configuration Parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00105</srcid><srcstatus/><internalId>201</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>511</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00108</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCMainFunctionPeriodTx Parent Container SecOCMainFunctionTx Description Allows to configure the time for the respective MainFunction instance of the Tx path (as float in seconds). Multiplicity 1 Type EcucFloatParamDef Range ]0 .. INF[ Default value -- Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00108</srcid><srcstatus/><internalId>202</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>512</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00109</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCMainFunctionTxPartitionRef Parent Container SecOCMainFunctionTx Description Reference to EcucPartition, where the according SecOC_MainFunction instance is assigned to. Multiplicity 1 Type Reference to [ EcucPartition ] Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00109</srcid><srcstatus/><internalId>203</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>513</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00009</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCSameBufferPduCollection Parent Container SecOC Description SecOCBuffer configuration that may be used by a collection of Pdus. Post-Build Variant Multiplicity false Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Configuration Parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00009</srcid><srcstatus/><internalId>204</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>514</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00008</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCBufferLength Parent Container SecOCSameBufferPduCollection Description This parameter defines the Buffer in bytes that is used by the SecOC module. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 4294967295 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00008</srcid><srcstatus/><internalId>205</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>515</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00011</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCRxPduProcessing Parent Container SecOC Description Contains the parameters to configure the RxPdus to be verified by the SecOC module. Configuration Parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00011</srcid><srcstatus/><internalId>206</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>516</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00082</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCAuthDataFreshnessLen Parent Container SecOCRxPduProcessing Description The length of the external authentic PDU data in bits (uint16). Multiplicity 0..1 Type EcucIntegerParamDef Range 0 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: ECU</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00082</srcid><srcstatus/><internalId>207</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/EcucParameterRange</srcid><srcstatus/><internalId>697</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/EcucParameterRange -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>517</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00081</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCAuthDataFreshnessStartPosition Parent Container SecOCRxPduProcessing Description This value determines the start position in bits (uint16) of the Authentic PDU that shall be passed on to the Freshness SWC. The bit counting is done according to TPS_SYST_01068 and the bit ordering is done according to TPS_SYST_01069. Multiplicity 0..1 Type EcucIntegerParamDef Range 0 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: ECU</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00081</srcid><srcstatus/><internalId>208</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>518</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00079_1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCAuthenticationBuildAttempts Parent Container SecOCRxPduProcessing Description This parameter specifies the number of authentication build attempts. Multiplicity 0..1 Type EcucIntegerParamDef Range 0 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00079_1</srcid><srcstatus/><internalId>209</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>519</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00080</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCAuthenticationVerifyAttempts Parent Container SecOCRxPduProcessing Description This parameter specifies the number of authentication verify attempts that are to be carried out when the verification of the authentication information failed for a given Secured I-PDU. If zero is set, then only one authentication verification attempt is done. Multiplicity 0..1 Type EcucIntegerParamDef Range 0 .. 65535 Default value 0 Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00080</srcid><srcstatus/><internalId>210</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>520</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00095</id>
      <status>approved</status>
      <version>1</version>
      <description>Name SecOCAuthInfoTruncLength Parent Container SecOCRxPduProcessing Description This parameter defines the length in bits of the authentication code to be included in the payload of the Secured I-PDU. Multiplicity 1 Type EcucIntegerParamDef Range 1 .. 65535 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00095</srcid><srcstatus/><internalId>211</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedSecOCTruncLengthToSecOCTxLength</srcid><srcstatus/><internalId>706</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedSecOCTruncLengthToSecOCTxLength -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>521</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00113</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCClientServerVerificationStatusPropagationMode Parent Container SecOCRxPduProcessing Description This parameter is used to determine the propagation of the verification status through the client/server interface to an SW-C. Multiplicity 1 Type EcucEnumerationParamDef Range BOTH Both "TRUE" and "FALSE" AuthenticationStatus is propagated to SW-C FAILURE_ONLY Only "FALSE" Authentication Status is propagated to SW-C NONE No Authentication Status for this PDU is provided to SW-C Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00113</srcid><srcstatus/><internalId>212</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>522</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00030</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCDataId Parent Container SecOCRxPduProcessing Description This parameter defines a unique numerical identifier for the Secured I- PDU. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 65535 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00030</srcid><srcstatus/><internalId>213</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCDataId</srcid><srcstatus/><internalId>710</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCDataId -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>523</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00038</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCFreshnessValueId Parent Container SecOCRxPduProcessing Description This parameter defines the Id of the Freshness Value. The Freshness Value might be a normal counter or a time value. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 65535 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00038</srcid><srcstatus/><internalId>214</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>524</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00031</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCFreshnessValueLength Parent Container SecOCRxPduProcessing Description This parameter defines the complete length in bits of the Freshness Value. As long as the key doesn't change the counter shall not overflow. The length of the counter shall be determined based on the expected life time of the corresponding key and frequency of usage of the counter. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 64 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00031</srcid><srcstatus/><internalId>215</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>525</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00094</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>2</version>
      <description>Name SecOCFreshnessValueTruncLength Parent Container SecOCRxPduProcessing Description This parameter defines the length in bits of the Freshness Value to be included in the payload of the Secured I-PDU. This length is specific to the least significant bits of the complete Freshness Counter. If the parameter is 0 no Freshness Value is included in the Secured I-PDU. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 64 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local dependency: SecOCFreshnessCounterTxLength "smaller than or equal to" SecOCFreshnessCounterLength</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00094</srcid><srcstatus/><internalId>216</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedSecOCTruncLengthToSecOCTxLength</srcid><srcstatus/><internalId>706</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedSecOCTruncLengthToSecOCTxLength -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>526</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00076</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCReceptionOverflowStrategy Parent Container SecOCRxPduProcessing Description This parameter defines the overflow strategy for receiving PDUs Multiplicity 1 Type EcucEnumerationParamDef Range QUEUE Subsequent received message will be queued REJECT Subsequent received message will be discarded REPLACE Subsequent received message will replace the currently processed message Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00076</srcid><srcstatus/><internalId>217</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>527</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00077</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCReceptionQueueSize Parent Container SecOCRxPduProcessing Description This parameter defines the queue size in case the overflow strategy for receiving PDUs is set to QUEUE. Multiplicity 0..1 Type EcucIntegerParamDef Range 1 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00077</srcid><srcstatus/><internalId>218</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>528</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00083</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCUseAuthDataFreshness Parent Container SecOCRxPduProcessing Description A Boolean value that indicates if a part of the Authentic-PDU shall be passed on to the SWC that verifies and generates the Freshness. If it is set to TRUE, the values SecOCAuthDataFreshnessStartPosition and SecOCAuthDataFreshnessLen must be set to specify the bit position and length within the Authentic-PDU. Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: ECU</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00083</srcid><srcstatus/><internalId>219</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>529</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00046</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCVerificationStatusPropagationMode Parent Container SecOCRxPduProcessing Description This parameter is used to describe the propagation of the status of each verification attempt from the SecOC module to SWCs. Multiplicity 1 Type EcucEnumerationParamDef Range BOTH Both "True" and "False" AuthenticationStatus is propagated to SWC FAILURE_ONLY Only "False" AuthenticationStatus is propagated to SWC NONE No AuthenticationStatus is propagated to SWC Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00046</srcid><srcstatus/><internalId>220</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>530</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00048</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCRxAuthServiceConfigRef Parent Container SecOCRxPduProcessing Description This reference is used to define which crypto service function is called for authentication. If PDUs with a dynamic length are used (e.g. CanTP or Dynamic Length PDUs) a MAC algorithm has to be chosen, that is not vulnerable to length extension attack (e.g. CMAC/HMAC). Multiplicity 1 Type Symbolic name reference to [ CsmJob ] Post-Build Variant Value false Scope / Dependency</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00048</srcid><srcstatus/><internalId>221</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/UsedMacAlgorith</srcid><srcstatus/><internalId>694</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/UsedMacAlgorith -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>531</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00049</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCSameBufferPduRef Parent Container SecOCRxPduProcessing Description This reference is used to collect Pdus that are using the same SecOC buffer. Multiplicity 0..1 Type Reference to [ SecOCSameBufferPduCollection ] Post-Build Variant Multiplicity false Post-Build Variant Value false Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00049</srcid><srcstatus/><internalId>222</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>532</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00041</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Choice container Name SecOCRxSecuredPduLayer Parent Container SecOCRxPduProcessing Description This container specifies the Pdu that is received by the SecOC module from the PduR. For this Pdu the Mac verification is provided. Container Choices Container Name Multiplicity Scope / Dependency SecOCRxSecuredPdu 0..1 This container specifies the Pdu that is received by the SecOC module from the PduR. For this Pdu the Mac verification is provided. SecOCRxSecuredPduCollectio n 0..1 This container specifies two Pdus that are received by the SecOC module from the PduR and a message linking between them. SecOCRxAuthenticPdu contains the original Authentic I- PDU, i.e. the secured data, and the SecOCRxCryptographicPdu contains the Authenticator, i.e. the actual Authentication Information.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00041</srcid><srcstatus/><internalId>223</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>533</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00069</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCRxSecuredPdu Parent Container SecOCRxSecuredPduLayer Description This container specifies the Pdu that is received by the SecOC module from the PduR. For this Pdu the Mac verification is provided.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00069</srcid><srcstatus/><internalId>224</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>534</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00093_1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCAuthPduHeaderLength Parent Container SecOCRxSecuredPdu Description This parameter indicates the length (in bytes) of the Secured I-PDU Header in the Secured I-PDU. The length of zero means there's no header in the PDU. Multiplicity 0..1 Type EcucIntegerParamDef Range 0 .. 4 Default value 0 Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00093_1</srcid><srcstatus/><internalId>225</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>535</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00043</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCRxSecuredLayerPduId Parent Container SecOCRxSecuredPdu Description PDU identifier assigned by SecOC module. Used by PduR for SecOC_[If|Tp]RxIndication. Multiplicity 1 Type EcucIntegerParamDef (Symbolic Name generated for this parameter) Range 0 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00043</srcid><srcstatus/><internalId>226</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>536</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00092_1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCSecuredRxPduVerification Parent Container SecOCRxSecuredPdu Description This parameter defines whether the signature authentication or MAC verification shall be performed on this Secured I-PDU. If set to false, the SecOC module extracts the Authentic I-PDU from the Secured I-PDU without verification. Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value true Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00092_1</srcid><srcstatus/><internalId>227</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>537</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00042</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCRxSecuredLayerPduRef Parent Container SecOCRxSecuredPdu Description Reference to the global Pdu. Multiplicity 1 Type Reference to [ Pdu ] Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00042</srcid><srcstatus/><internalId>228</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>538</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00044</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCRxAuthenticPduLayer Parent Container SecOCRxPduProcessing Description This container specifies the Pdu that is transmitted by the SecOC module to the PduR after the Mac was verified. Configuration Parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00044</srcid><srcstatus/><internalId>229</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>539</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00075_1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCPduType Parent Container SecOCRxAuthenticPduLayer Description This parameter defines API Type to use for communication with PduR. Multiplicity 1 Type EcucEnumerationParamDef Range SECOC_IFPDU Interface communication API SECOC_TPPDU Transport Protocol communication API Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00075_1</srcid><srcstatus/><internalId>230</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>540</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00102</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCRxAuthenticLayerPduId Parent Container SecOCRxAuthenticPduLayer Description PDU identifier assigned by SecOC module. Used by PduR for SecOC_TpCancelReceive. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 65535 Default value -- Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00102</srcid><srcstatus/><internalId>231</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>541</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00045</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCRxAuthenticLayerPduRef Parent Container SecOCRxAuthenticPduLayer Description Reference to the global Pdu. Multiplicity 1 Type Reference to [ Pdu ] Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00045</srcid><srcstatus/><internalId>232</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>542</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00067</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCRxSecuredPduCollection Parent Container SecOCRxSecuredPduLayer Description This container specifies two Pdus that are received by the SecOC module from the PduR and a message linking between them. SecOCRxAuthenticPdu contains the original Authentic I-PDU, i.e. the secured data, and the SecOCRxCryptographicPdu contains the Authenticator, i.e. the actual Authentication Information. Configuration Parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00067</srcid><srcstatus/><internalId>233</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>543</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00092_2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCSecuredRxPduVerification Parent Container SecOCRxSecuredPduCollection Description This parameter defines whether the signature authentication or MAC verification shall be performed on this Secured I-PDU. If set to false, the SecOC module extracts the Authentic I-PDU from the Secured I-PDU without verification. Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value true Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00092_2</srcid><srcstatus/><internalId>234</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>544</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00064</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCRxCryptographicPdu Parent Container SecOCRxSecuredPduCollection Description This container specifies the Cryptographic Pdu that is received by the SecOC module from the PduR. Configuration Parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00064</srcid><srcstatus/><internalId>235</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>545</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00065</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCRxCryptographicPduId Parent Container SecOCRxCryptographicPdu Description PDU identifier of the Cryptographic I-PDU assigned by SecOC module. Used by PduR for SecOC_IfRxIndication. Multiplicity 1 Type EcucIntegerParamDef (Symbolic Name generated for this parameter) Range 0 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00065</srcid><srcstatus/><internalId>236</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>546</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00066</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCRxCryptographicPduRef Parent Container SecOCRxCryptographicPdu Description Reference to the global Pdu. Multiplicity 1 Type Reference to [ Pdu ] Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00066</srcid><srcstatus/><internalId>237</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>547</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00061</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCRxAuthenticPdu Parent Container SecOCRxSecuredPduCollection Description This container specifies the PDU (that is received by the SecOC module from the PduR) which contains the Secured I-PDU Header and the Authentic I-PDU. Configuration Parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00061</srcid><srcstatus/><internalId>238</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>548</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00093_3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCAuthPduHeaderLength Parent Container SecOCRxAuthenticPdu Description This parameter indicates the length (in bytes) of the Secured I-PDU Header in the Secured I-PDU. The length of zero means there's no header in the PDU. Multiplicity 0..1 Type EcucIntegerParamDef Range 0 .. 4 Default value 0 Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00093_3</srcid><srcstatus/><internalId>240</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>549</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00062</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCRxAuthenticPduId Parent Container SecOCRxAuthenticPdu Description PDU identifier of the Authentic I-PDU assigned by SecOC module. Used by PduR for SecOC_IfRxIndication. Multiplicity 1 Type EcucIntegerParamDef (Symbolic Name generated for this parameter) Range 0 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00062</srcid><srcstatus/><internalId>242</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>550</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00063</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCRxAuthenticPduRef Parent Container SecOCRxAuthenticPdu Description Reference to the global Pdu. Multiplicity 1 Type Reference to [ Pdu ] Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00063</srcid><srcstatus/><internalId>243</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>551</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00012</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCTxPduProcessing Parent Container SecOC Description Contains the parameters to configure the TxPdus to be secured by the SecOC module. Configuration Parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00012</srcid><srcstatus/><internalId>244</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>552</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00079_2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCAuthenticationBuildAttempts Parent Container SecOCTxPduProcessing Description This parameter specifies the number of authentication build attempts. Multiplicity 0..1 Type EcucIntegerParamDef Range 0 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00079_2</srcid><srcstatus/><internalId>245</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>553</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00097</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCAuthInfoTruncLength Parent Container SecOCTxPduProcessing Description This parameter defines the length in bits of the authentication code to be included in the payload of the Secured I-PDU. Multiplicity 1 Type EcucIntegerParamDef Range 1 .. 65535 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00097</srcid><srcstatus/><internalId>246</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedSecOCTruncLengthToSecOCTxLength</srcid><srcstatus/><internalId>706</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedSecOCTruncLengthToSecOCTxLength -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>554</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00014</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCDataId Parent Container SecOCTxPduProcessing Description This parameter defines a unique numerical identifier for the Secured I- PDU. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 65535 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00014</srcid><srcstatus/><internalId>247</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCDataId</srcid><srcstatus/><internalId>710</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCDataId -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>555</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00021</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCFreshnessValueId Parent Container SecOCTxPduProcessing Description This parameter defines the Id of the Freshness Value. The Freshness Value might be a normal counter or a time value. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 65535 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00021</srcid><srcstatus/><internalId>248</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>556</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00015</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCFreshnessValueLength Parent Container SecOCTxPduProcessing Description This parameter defines the complete length in bits of the Freshness Value. As long as the key doesn't change the counter shall not overflow. The length of the counter shall be determined based on the expected life time of the corresponding key and frequency of usage of the counter. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 64 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00015</srcid><srcstatus/><internalId>249</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>557</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00096</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>2</version>
      <description>Name SecOCFreshnessValueTruncLength Parent Container SecOCTxPduProcessing Description This parameter defines the length in bits of the Freshness Value to be included in the payload of the Secured I-PDU. This length is specific to the least significant bits of the complete Freshness Counter. If the parameter is 0 no Freshness Value is included in the Secured I-PDU. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 64 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local  dependency: SecOCFreshnessCounterTxLength "smaller than or equal to" SecOCFreshnessCounterLength</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00096</srcid><srcstatus/><internalId>250</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedSecOCTruncLengthToSecOCTxLength</srcid><srcstatus/><internalId>706</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedSecOCTruncLengthToSecOCTxLength -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>558</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00084</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCProvideTxTruncatedFreshnessValue Parent Container SecOCTxPduProcessing Description This parameter specifies if the Tx query freshness function provides the truncated freshness info instead of generating this by SecOC In this case, SecOC shall add this data to the Authentic PDU instead of truncating the freshness value. Multiplicity 1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00084</srcid><srcstatus/><internalId>251</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>559</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00103</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCReAuthenticateAfterTriggerTransmit Parent Container SecOCTxPduProcessing Description This parameter specifies if the authentication information of the Secured PDU is updated after the successful transmission of a triggered transmission was confirmed. TRUE if the authentication information shall be updated after triggered transmission. FALSE if the authentication information shall not be updated after triggered transmission. Note: This parameter should only be set to FALSE if the upper layer SecOC_IfTransmit have the same or a higher frequency than the SecOC_TriggerTransmit calls. Multiplicity 1 Type EcucBooleanParamDef Default value true Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00103</srcid><srcstatus/><internalId>252</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>560</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00101</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCTxPduUnusedAreasDefault Parent Container SecOCTxPduProcessing Description The AUTOSAR SecOC module fills not used areas of a transmitted Secured Pdu or a transmitted Cryptographic Pdu with this byte pattern. This attribute is mandatory to avoid undefined behavior. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 255 Default value 0 Post-Build Variant Value false Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME, VARIANT-POST- BUILD Post-build time -- Scope / Dependency scope: local</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00101</srcid><srcstatus/><internalId>253</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>561</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00085</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCUseTxConfirmation Parent Container SecOCTxPduProcessing Description A Boolean value that indicates if the function SecOC_SPduTxConfirmation shall be called for this PDU. Multiplicity 0..1 Type EcucBooleanParamDef Default value false Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <comment>
       This requirement is not applicable, new feature which is not supported
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCUseTxConfirmationDefaultTrue</srcid><srcstatus/><internalId>714</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCUseTxConfirmationDefaultTrue -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>562</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00010</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCSameBufferPduRef Parent Container SecOCTxPduProcessing Description This reference is used to collect Pdus that are using the same SecOC buffer. Multiplicity 0..1 Type Reference to [ SecOCSameBufferPduCollection ] Post-Build Variant Multiplicity false Post-Build Variant Value false Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00010</srcid><srcstatus/><internalId>254</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>563</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00013</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCTxAuthServiceConfigRef Parent Container SecOCTxPduProcessing Description This reference is used to define which crypto service function is called for authentication. If PDUs with a dynamic length are used (e.g. CanTP or Dynamic Length PDUs) a MAC algorithm has to be chosen, that is not vulnerable to length extension attack (e.g. CMAC/HMAC). Multiplicity 1 Type Symbolic name reference to [ CsmJob ] Post-Build Variant Value false Scope / Dependency</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00013</srcid><srcstatus/><internalId>255</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/UsedMacAlgorith</srcid><srcstatus/><internalId>694</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/UsedMacAlgorith -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>564</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00023</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCTxAuthenticPduLayer Parent Container SecOCTxPduProcessing Description This container specifies the Pdu that is received by the SecOC module from the PduR. For this Pdu the Mac generation is provided. Configuration Parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00023</srcid><srcstatus/><internalId>256</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>565</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00075_2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCPduType Parent Container SecOCTxAuthenticPduLayer Description This parameter defines API Type to use for communication with PduR. Multiplicity 1 Type EcucEnumerationParamDef Range SECOC_IFPDU Interface communication API SECOC_TPPDU Transport Protocol communication API Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00075_2</srcid><srcstatus/><internalId>257</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>566</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00026</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCTxAuthenticLayerPduId Parent Container SecOCTxAuthenticPduLayer Description PDU identifier assigned by SecOC module. Used by PduR for SecOC_[If|Tp]Transmit. Multiplicity 1 Type EcucIntegerParamDef (Symbolic Name generated for this parameter) Range 0 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00026</srcid><srcstatus/><internalId>258</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>567</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00025</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCTxAuthenticLayerPduRef Parent Container SecOCTxAuthenticPduLayer Description Reference to the global Pdu. Multiplicity 1 Type Reference to [ Pdu ] Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00025</srcid><srcstatus/><internalId>259</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>568</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00024</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Choice container Name SecOCTxSecuredPduLayer Parent Container SecOCTxPduProcessing Description This container specifies the Pdu that is transmitted by the SecOC module to the PduR after the Mac was generated. Container Choices Container Name Multiplicity Scope / Dependency SecOCTxSecuredPdu 0..1 This container specifies one Pdu that is transmitted by the SecOC module to the PduR after the Mac was generated. This Pdu contains the cryptographic information. SecOCTxSecuredPduCollectio n 0..1 This container specifies the Pdu that is transmitted by the SecOC module to the PduR after the Mac was generated. Two separate Pdus are transmitted to the PduR: Authentic I-PDU and Cryptographic I-PDU.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00024</srcid><srcstatus/><internalId>260</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>569</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00070</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCTxSecuredPdu Parent Container SecOCTxSecuredPduLayer Description This container specifies one Pdu that is transmitted by the SecOC module to the PduR after the Mac was generated. This Pdu contains the cryptographic information.</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00070</srcid><srcstatus/><internalId>261</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>570</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00093_2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCAuthPduHeaderLength Parent Container SecOCTxSecuredPdu Description This parameter indicates the length (in bytes) of the Secured I-PDU Header in the Secured I-PDU. The length of zero means there's no header in the PDU. Multiplicity 0..1 Type EcucIntegerParamDef Range 0 .. 4 Default value 0 Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00093_2</srcid><srcstatus/><internalId>239</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>571</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00028</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCTxSecuredLayerPduId Parent Container SecOCTxSecuredPdu Description PDU identifier assigned by SecOC module. Used by PduR for confirmation (SecOC_[If|Tp]TxConfirmation) and for TriggerTransmit. Multiplicity 1 Type EcucIntegerParamDef (Symbolic Name generated for this parameter) Range 0 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00028</srcid><srcstatus/><internalId>262</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>572</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00027</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCTxSecuredLayerPduRef Parent Container SecOCTxSecuredPdu Description Reference to the global Pdu. Multiplicity 1 Type Reference to [ Pdu ] Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00027</srcid><srcstatus/><internalId>263</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>573</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00071</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCTxSecuredPduCollection Parent Container SecOCTxSecuredPduLayer Description This container specifies the Pdu that is transmitted by the SecOC module to the PduR after the Mac was generated. Two separate Pdus are transmitted to the PduR: Authentic I-PDU and Cryptographic I-PDU. Configuration Parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00071</srcid><srcstatus/><internalId>264</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>574</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00072</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCTxAuthenticPdu Parent Container SecOCTxSecuredPduCollection Description This container specifies the PDU (that is transmitted by the SecOC module to the PduR) which contains the Secured I-PDU Header and the Authentic I-PDU. Configuration Parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00072</srcid><srcstatus/><internalId>265</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>575</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00093_4</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCAuthPduHeaderLength Parent Container SecOCTxAuthenticPdu Description This parameter indicates the length (in bytes) of the Secured I-PDU Header in the Secured I-PDU. The length of zero means there's no header in the PDU. Multiplicity 0..1 Type EcucIntegerParamDef Range 0 .. 4 Default value 0 Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00093_4</srcid><srcstatus/><internalId>241</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>576</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00055</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCTxAuthenticPduId Parent Container SecOCTxAuthenticPdu Description PDU identifier of the Authentic I-PDU assigned by SecOC module. Used by PduR for confirmation (SecOC_IfTxConfirmation) and for TriggerTransmit. Multiplicity 1 Type EcucIntegerParamDef (Symbolic Name generated for this parameter) Range 0 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00055</srcid><srcstatus/><internalId>266</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>577</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00056</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCTxAuthenticPduRef Parent Container SecOCTxAuthenticPdu Description Reference to the global Pdu. Multiplicity 1 Type Reference to [ Pdu ] Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00056</srcid><srcstatus/><internalId>267</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>578</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00073</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCTxCryptographicPdu Parent Container SecOCTxSecuredPduCollection Description This container specifies the Cryptographic Pdu that is transmitted by the SecOC module to the PduR after the Mac was generated. Configuration Parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00073</srcid><srcstatus/><internalId>268</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>579</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00057</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCTxCryptographicPduId Parent Container SecOCTxCryptographicPdu Description PDU identifier of the Cryptographic I-PDU assigned by SecOC module. Used by PduR for confirmation (SecOC_IfTxConfirmation) and for TriggerTransmit. Multiplicity 1 Type EcucIntegerParamDef (Symbolic Name generated for this parameter) Range 0 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00057</srcid><srcstatus/><internalId>269</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/RenamedPduRInterfaces</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/RenamedPduRInterfaces -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>580</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00058</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCTxCryptographicPduRef Parent Container SecOCTxCryptographicPdu Description Reference to the global Pdu. Multiplicity 1 Type Reference to [ Pdu ] Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00058</srcid><srcstatus/><internalId>270</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>581</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00074</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCUseMessageLink Parent Container SecOCRxSecuredPduCollection, SecOCTxSecuredPduCollection Description SecOC links an Authentic I-PDU and Cryptographic I-PDU together by repeating a specific part (Message Linker) of the Authentic I-PDU in the Cryptographic I-PDU. Configuration Parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00074</srcid><srcstatus/><internalId>271</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>582</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00060</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCMessageLinkLen Parent Container SecOCUseMessageLink Description Length of the Message Linker inside the Authentic I-PDU in bits. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/SecOCMessageLinkLenRange</srcid><srcstatus/><internalId>701</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/SecOCMessageLinkLenRange -->
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00060</srcid><srcstatus/><internalId>272</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>583</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00059</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCMessageLinkPos Parent Container SecOCUseMessageLink Description The position of the Message Linker inside the Authentic I-PDU in bits. The bit counting is done according to 01068 and the bit ordering is done according to TPS_SYST_01069. Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 65535 Default value -- Post-Build Variant Value false Value Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Scope / Dependency scope: local</description>
      <comment>
        Not supported: The bit counting is done according to 01068 and the bit ordering is done according to TPS_SYST_01069.
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00059</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>584</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00086</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCTxPduSecuredArea Parent Container SecOCTxPduProcessing Description This container specifies an area in the Authentic I-Pdu that will be the input to the Authenticator generation algorithm. If this container does not exist in the configuration the complete Authentic I-Pdu will be the input to the Authenticator generation algorithm. Configuration Parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00086</srcid><srcstatus/><internalId>274</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>585</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00088</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCSecuredTxPduLength Parent Container SecOCTxPduSecuredArea Description This parameter defines the length (in bytes) of the area within the Pdu which shall be secured Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 4294967295 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00088</srcid><srcstatus/><internalId>275</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/EcucParameterRange</srcid><srcstatus/><internalId>697</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/EcucParameterRange -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>586</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00087</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCSecuredTxPduOffset Parent Container SecOCTxPduSecuredArea Description This parameter defines the start position (offset in bytes) of the area within the Pdu which shall be secured Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 4294967295 Default value 0 Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00087</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/EcucParameterRange</srcid><srcstatus/><internalId>697</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/EcucParameterRange -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>587</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00089</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Container Name SecOCRxPduSecuredArea Parent Container SecOCRxPduProcessing Description This container specifies an area in the Authentic I-Pdu that will be the input to the Authenticator verification algorithm. If this container does not exist in the configuration the complete Authentic I-Pdu will be the input to the Authenticator verification algorithm. Configuration Parameters</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.ECUC_SecOC_00089</srcid><srcstatus/><internalId>277</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>588</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00091</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCSecuredRxPduLength Parent Container SecOCRxPduSecuredArea Description This parameter defines the length (in bytes) of the area within the Pdu which is secured Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 4294967295 Default value -- Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00091</srcid><srcstatus/><internalId>278</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/EcucParameterRange</srcid><srcstatus/><internalId>697</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/EcucParameterRange -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>589</internalId></specobject>

    <specobject>
      <id>SecOC.ASR21-11.ECUC_SecOC_00090</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SecureOnboardCommunication.pdf, R21-11</source>
      <version>1</version>
      <description>Name SecOCSecuredRxPduOffset Parent Container SecOCRxPduSecuredArea Description This parameter defines the start position (offset in bytes) of the area within the Pdu which is secured Multiplicity 1 Type EcucIntegerParamDef Range 0 .. 4294967295 Default value 0 Post-Build Variant Value true Value Configuration Class Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME Post-build time X VARIANT-POST-BUILD Scope / Dependency scope: local</description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.Asr.Correction.ECUC_SecOC_00090</srcid><srcstatus/><internalId>279</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC.R2111/Dev/EcucParameterRange</srcid><srcstatus/><internalId>697</internalId></linkedfrom></coveredby></needscov> <!-- SecOC.R2111/Dev/EcucParameterRange -->
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>590</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">
      <specobject>
         <id>SecOC.EB.RxTx.ECUC_SecOC_00001</id>
         <status>approved</status>
         <version>1</version>
         <description>
            Container Name  SecOCEbGeneral
            Description     Contains the general EB specific configuration parameters of the SecOC module
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_478</srcid><srcstatus/><internalId>1044</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>591</internalId></specobject>
      <specobject>
         <id>SecOC.ASR430.ECUC_SecOC_EB_RxTx_00002</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>:Name SecOCCryptoBitLength Description: Specifies, whether the length of the authenticator can be passed to the
            cryptographic routines in bits.
            Enabled: the length of the autheticator is passed to the cryptographic
            routines in bits.
            Disabled: the length of the autheticator is passed to the cryptographic
            routines in bytes.
            Multiplicity 1
            Type EcucBooleanParamDefDefault
            Post-Build Variant Value false
            Value Configuration Class Pre-compile time X
            VARIANT-PRE-COMPILE Link time - VARIANT-LINK-TIME Post-build time -
            VARIANT-POST-BUILD Scope / Dependency scope: local</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_657</srcid><srcstatus/><internalId>1048</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>592</internalId></specobject>
      <specobject>
         <id>SecOC.EB.RxTx.SWS_SecOC_00001</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            For the Implementation Data Types, which are not clearly specified by AUTOSAR,
            the Redefinition Implementation Data Types shall be used.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_168</srcid><srcstatus/><internalId>1168</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_185</srcid><srcstatus/><internalId>1170</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>593</internalId></specobject>
      <specobject>
         <id>SecOC.EB.RxTx.SWS_SecOC_00002</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            Name            SecOCRteUsage
            Description     TRUE:  SecOC uses Rte interface, this allows the possibility to query the
                                   freshness value via RTE or to propagate the verification result via RTE
                            FALSE: SecOC doesn't use Rte interface
            Multiplicity    1
            Type            EcucBooleanParamDef.
            Default value   false
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_606</srcid><srcstatus/><internalId>1046</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>594</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00001</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            If the following conditions holds true, the SecOC module shall perform the verification
            of the Secured I-PDU in one main function:
            <ol>
               <li>The SecOC module is configured to use the Csm MacVerify in synchronous mode.</li>
               <li>The freshness value query procedure was performed successfully.</li>
               <li>The verification of the authenticator was performed successfully.</li>
            </ol>
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_567</srcid><srcstatus/><internalId>838</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_956</srcid><srcstatus/><internalId>844</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1236</srcid><srcstatus/><internalId>852</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1342</srcid><srcstatus/><internalId>859</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>595</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00001</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            If the following conditions holds true, the SecOC module shall performe the authentication
            of the I-PDU in one main function:
            <ol>
               <li>The SecOC module is configured to use the Csm MacGenerate in synchronous mode.</li>
               <li>The freshness value query procedure was performed successfully.</li>
               <li>The calculation of the authenticator was performed successfully.</li>
               <li>The SecOC_CancelTransmit service was not called by the PduR module.</li>
            </ol>
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_441</srcid><srcstatus/><internalId>960</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_665</srcid><srcstatus/><internalId>967</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_689</srcid><srcstatus/><internalId>968</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_838</srcid><srcstatus/><internalId>980</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_948</srcid><srcstatus/><internalId>986</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_989</srcid><srcstatus/><internalId>989</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_01_TP_SECUREDAREA</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_10_TP_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1477</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_PDULENGTHTYPE32BITS_01_TP</srcid><srcstatus/><internalId>1602</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>596</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00002</id>
         <status>approved</status>
         <source>EB</source>
         <version>2</version>
         <description>
            If one of the following conditions holds true, the SecOC module shall stop the verification
            of the Secured I-PDU and resume the procedure in the next scheduled main function in case of asynchronous Pdu processing:
            <ol>
               <li>The freshness value query procedure fails.</li>
               <li>The verification of the authenticator return value is not equal to E_OK.</li>
               <li>The verification of the authenticator result is not equal to SECOC_VERIFICATIONSUCCESS.</li>
               <li>The transmission of a Secured I-PDU with the same PDU identifier has been initiated
                via the SecOC_StartOfReception.</li>
            </ol>
            In case of synchronous Pdu processing, the verification shall be continued.
         </description>
         <comment>
        The procedure will be resumed if the configured maximum number of attempts has not been reached.
      </comment>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1398</srcid><srcstatus/><internalId>861</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1902</srcid><srcstatus/><internalId>904</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2509</srcid><srcstatus/><internalId>931</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2516</srcid><srcstatus/><internalId>932</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2600</srcid><srcstatus/><internalId>943</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP_SYNCATTEMPTS</srcid><srcstatus/><internalId>1280</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_10_SECUREDPDU_IFPDU_VRFY_RETVAL</srcid><srcstatus/><internalId>1566</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_03_SECUREDPDU_TPPDU_VRFY_RETVAL</srcid><srcstatus/><internalId>1567</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_10_SECUREDPDU_IFPDU_VRFY_VERRES</srcid><srcstatus/><internalId>1568</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_03_SECUREDPDU_TPPDU_VRFY_VERRES</srcid><srcstatus/><internalId>1569</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_13_SECUREDPDU_IFPDU_FRESHNESS</srcid><srcstatus/><internalId>1570</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_14_SECUREDPDU_TPPDU_FRESHNESS</srcid><srcstatus/><internalId>1571</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>597</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00002</id>
         <status>approved</status>
         <source>EB</source>
         <version>2</version>
         <description>
            If one of the following conditions holds true, the SecOC module shall stop the authentication
            of the I-PDU and resume the procedure in the next scheduled main function in case of asynchronous Pdu processing:
            <ol>
               <li>The freshness value query procedure fails.</li>
               <li>The calculation of the authenticator return value is not equal to E_OK.</li>
               <li>The SecOC_CancelTransmit service was called by the PduR module.</li>
            </ol>
            In case of synchronous Pdu processing, the verification shall be continued.
         </description>
         <comment>
            The procedure will be resumed if the configured maximum number of attempts has not been reached.
         </comment>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_784</srcid><srcstatus/><internalId>977</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_971</srcid><srcstatus/><internalId>988</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1206</srcid><srcstatus/><internalId>1003</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1238</srcid><srcstatus/><internalId>1006</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1229</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_TP_MACGENERATESTATUS</srcid><srcstatus/><internalId>1252</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1270</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_06_07_08_TP_CANCELTRANSMIT</srcid><srcstatus/><internalId>1484</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_11_TP_MACGENERATE_CSM_NOT_OK</srcid><srcstatus/><internalId>1491</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_17_SECUREDPDU_IFPDU_FRESHNESS</srcid><srcstatus/><internalId>1610</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_13_SECUREDPDU_TPPDU_FRESHNESS</srcid><srcstatus/><internalId>1611</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_17_SECUREDPDU_IFPDU_MACGEN</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_13_SECUREDPDU_TPPDU_MACGEN</srcid><srcstatus/><internalId>1613</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>598</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00003</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            If a transmit request is already pending before SecOC_TxConfirmation or SecOC_TxTpConfirmation of
            the previous request was called, the next transmit authentication shall be processed
            in the very first SecOC_MainFunctionTx call after the SecOC_TxConfirmation or SecOC_TxTpConfirmation
            was invoked.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1143</srcid><srcstatus/><internalId>1000</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_02_TP_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_CSMMODE_TP_02_03_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_DATAIDLEN32BITS_TP_02_03</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>599</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00004</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            Parameter Name: SecOCTxConfirmationTimeout
            Description: This parameter defines the period in seconds for TxConfirmation timeout.
            Multiplicity: 1
            Type: EcucFloatParamDefDefault
            Range: 0 .. 4294967295
            Default value: 0
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3412</srcid><srcstatus/><internalId>1129</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>600</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00005</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            When the lower layer does not confirm the succesful reception of the PDU and the configured confirmation timeout period is reached
            the SecOC module will trigger a transition to the idle state.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1176</srcid><srcstatus/><internalId>1002</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_02_TP_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_CSMMODE_TP_02_03_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_DATAIDLEN32BITS_TP_02_03</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>601</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00006</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            The SecOC module shall internally store the dynamic length of the provided authentic PDU
            in an intermediary buffer.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_524</srcid><srcstatus/><internalId>771</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_09_IF_AUTHPDU_DYNAMIC_LENGTH</srcid><srcstatus/><internalId>1480</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>602</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00007</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            The SecOC module shall copy the dynamic length of the provided authentic PDU from
            the intermediary buffer to a internal buffer (which is not accessible by external interface
            functions - except the SecOC_TxMainFunction) only when the corresponding authentication
            procedure is started.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_694</srcid><srcstatus/><internalId>970</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_09_IF_AUTHPDU_DYNAMIC_LENGTH</srcid><srcstatus/><internalId>1480</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>603</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00003</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            The SecOC module shall internally store the length of the received secured PDU
            in an intermediary buffer.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1336</srcid><srcstatus/><internalId>810</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>604</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00004</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            The SecOC module shall calculate and store the dynamic length of the received authentic PDU
            from the intermediary buffer to a internal buffer (which is not accessible by external
            interface functions - except the SecOC_RxMainFunction) only when the corresponding
            verification procedure is started.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2316</srcid><srcstatus/><internalId>923</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2323</srcid><srcstatus/><internalId>924</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>605</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00005</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            When the configured freshness value IDs are not unique and SecOC_VerifyStatusOverride was
            called to override the verification status for a given number of messages for a specific
            freshness value ID, the SecOC module after a verification sequence will renew
            the message counter for the related freshness value ID and for all configured PDUs with
            the same freshness value ID.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2680</srcid><srcstatus/><internalId>946</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2718</srcid><srcstatus/><internalId>947</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_DROP_UNTIL_LIMIT</srcid><srcstatus/><internalId>1387</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_18_IF_SKIP_UNTIL_NOTICE_PDU_COL_MSG_LINK</srcid><srcstatus/><internalId>1391</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_17_TP_SKIP_UNTIL_NOTICE_PDU_COL</srcid><srcstatus/><internalId>1392</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>606</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00006</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            When the configured freshness value IDs are not unique and SecOC_VerifyStatusOverride was
            called to override the verification status for a specific freshness value ID, the SecOC
            module will set the override option for all configured PDUs with the same freshness
            value ID.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_646</srcid><srcstatus/><internalId>840</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2818</srcid><srcstatus/><internalId>948</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_DROP_UNTIL_NOTICE</srcid><srcstatus/><internalId>1386</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>607</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00007</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            Name                SecOCRxShapeFuncName
            Description         This parameter specifies the name of the C API function which shall be
                                called to shape the secured PDU before the verification procedure
                                is started.
                                Secured PDU before calling the shaping function:
                                [authentic data | padding | truncated freshness value | truncated authenticator]
                                Secured PDU after calling the shaping function:
                                [authentic data | truncated freshness value | truncated authenticator]
            Multiplicity        0...1
            Type                EcucFunctionNameDef
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_770</srcid><srcstatus/><internalId>1052</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_02_IF_SHAPE_SEC_PDU_LAYOUT</srcid><srcstatus/><internalId>1298</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>608</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00008</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            Name                SecOCTxShapeFuncName
            Description         This parameter specifies the name of the C API function which shall be
                                called to shape the secured PDU before it is send to the lower layer.
                                Secured PDU before calling the shaping function:
                                [authentic data | truncated freshness value | truncated authenticator]
                                Secured PDU after calling the shaping function:
                                [authentic data | padding | truncated freshness value | truncated authenticator]
            Multiplicity        0...1
            Type                EcucFunctionNameDef
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_800</srcid><srcstatus/><internalId>1053</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_13_TP_SHAPE_SEC_PDU_LAYOUT</srcid><srcstatus/><internalId>1502</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>609</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00008</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            Name                SecOCRxUseShapeFunc
            Description:        This parameter indicates, whether the layout shaping functionality
                                its enabled or not for this PDU.
                                By enabling this, the padding added to keep a fixed length
                                of the secured PDU will be removed by the SecOC callout function
                                which name is configured in the SecOCRxShapeFuncName parameter.
                                TRUE:  The layout shapping functionality is enabled
                                FALSE: The layout shapping functionality is disabled
            Multiplicity        1
            Type                EcucBooleanParamDefDefault
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1881</srcid><srcstatus/><internalId>1083</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_02_IF_SHAPE_SEC_PDU_LAYOUT</srcid><srcstatus/><internalId>1298</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>610</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00009</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            Name                SecOCTxUseShapeFunc
            Description:        This parameter indicates, whether the layout shaping functionality
                                its enabled or not for this PDU.
                                By enabling this, the secured PDU layout will be updated
                                to keep a fixed length by adding a padding. This will be done
                                by the SecOC callout function which name is configured in the
                                SecOCTxShapeFuncName parameter.
                                TRUE:  The layout shapping functionality is enabled
                                FALSE: The layout shapping functionality is disabled
            Multiplicity        1
            Type                EcucBooleanParamDefDefault
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3451</srcid><srcstatus/><internalId>1130</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_13_TP_SHAPE_SEC_PDU_LAYOUT</srcid><srcstatus/><internalId>1502</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>611</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00009</id>
         <status>approved</status>
         <source>EB</source>
         <version>2</version>
         <description>
            Description:        If SecOCRxShapeFuncName is configuration and SecOCRxUseShapeFunc is enabled for
                                a specific PDU configuration, SecOC calls a function with the following signature,
                                to remove the padding within the secured PDU.
            Service name:       SecOCRxShapeFuncName
            Syntax:             void SecOCRxShapeFuncName
                                (
                                  PduIdType       SecOCPduID,
                                  uint8 *         SecPdu,
                                  PduLengthType * SrcSecPduLength,
                                  PduLengthType * DstSecPduLength,
                                  uint32          AuthenticatorLength
                                )
            Sync/Async:         Synchronous
            Reentrancy:         Reentrant
            Parameters (in):    SecOCPduID           Holds the identifier of the secured PDU at SecOC
                                                     or the identifier of the received authentic PDU
                                                     when the Secured PDU Collection is used.
                                AuthenticatorLength  Holds the length of the authenticator.
                                SrcSecPduLength      Holds the length of the received secured PDU.
            Parameters (inout): SecPdu               Holds the secured PDU.
                                DstSecPduLength      in:  Holds the maximum length of the secured PDU.
                                                     out: Holds the length of the secured PDU without the padding.
            Parameters (out):   none
            Return value:       void
         </description>
         <comment>
            The length parameters are holding values expressed in bytes.
         </comment>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_2282</srcid><srcstatus/><internalId>920</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_02_IF_SHAPE_SEC_PDU_LAYOUT</srcid><srcstatus/><internalId>1298</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>612</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00010</id>
         <status>approved</status>
         <source>EB</source>
         <version>2</version>
         <description>
            Description:        If SecOCTxShapeFuncName is configuration and SecOCTxUseShapeFunc is enabled for
                                a specific PDU configuration, SecOC calls a function with the following signature,
                                to add the required padding within the secured PDU to maintain a fixed layout.
            Service name:       SecOCTxShapeFuncName
            Syntax:             void SecOCTxShapeFuncName
                                (
                                  PduIdType       SecOCPduID,
                                  uint8 *         SecPdu,
                                  PduLengthType * SrcSecPduLength,
                                  PduLengthType * DstSecPduLength,
                                  uint32          AuthenticatorLength
                                )
            Sync/Async:         Synchronous
            Reentrancy:         Reentrant
            Parameters (in):    SecOCPduID           Holds the identifier of the received authentic PDU
                                                     at SecOC.
                                AuthenticatorLength  Holds the length of the authenticator.
                                SrcSecPduLength      Holds the length of the generated secured PDU.
            Parameters (inout): SecPdu               Holds the secured PDU.
                                DstSecPduLength      in:  Holds the maximum length of the secured PDU.
                                                     out: Holds the length of the secured PDU with the padding.
            Parameters (out):   none
            Return value:       void
         </description>
         <comment>
            The length parameters are holding values expressed in bytes.
         </comment>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1486</srcid><srcstatus/><internalId>1017</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_13_TP_SHAPE_SEC_PDU_LAYOUT</srcid><srcstatus/><internalId>1502</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>613</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00011</id>
         <status>approved</status>
         <source>EB</source>
         <version>2</version>
         <description>
            Name                SecOCMacGenerateStatusCallout
            Description         This parameter specifies the name of the C API function which shall be
                                called to propagated the status of the MAC Generate service.
            Multiplicity        1
            Type                EcucFunctionNameDef
         </description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_11_TP_MACGENERATE_CSM_NOT_OK</srcid><srcstatus/><internalId>1491</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_348</srcid><srcstatus/><internalId>1041</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>614</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00012</id>
         <status>approved</status>
         <source>EB</source>
         <version>2</version>
         <description>
            Name                SecOCMacGenerateStatusPropagationMode
            Description         This parameter is used to describe the propagation of the status
                                of the MAC Generate service from the SecOC module to the application.
            Multiplicity        1
            Type                EcucEnumerationParamDef
            Range               BOTH          Both negative and positive status will be propagate to SWC.
                                FAILURE_ONLY  When MAC could not be generated the status is propagated to SWC
                                NONE          No status is propagated to SWC
            Default             NONE
         </description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_11_TP_MACGENERATE_CSM_NOT_OK</srcid><srcstatus/><internalId>1491</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3177</srcid><srcstatus/><internalId>1124</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>615</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00013</id>
         <status>approved</status>
         <source>EB</source>
         <version>2</version>
         <description>
            Description:        Service is used to propagate the status of the MAC Generate from the
                                SecOC module to other modules. This service can be configured such that:
                                - Both:    Both negative and positive status will be propagated to SWC.
                                - Failure: When MAC could not be generated the status is propagated to other modules
                                - None:    No status is propagated
            Service name:       SecOCMacGenerateStatusCallout
            Syntax:             void SecOCMacGenerateStatusCallout
                                (
                                  SecOC_MacGenerateStatusType       macGenerateStatus
                                )
            Sync/Async:         Synchronous
            Parameters (in):    macGenerateStatus Data structure to bundle the status of MAC
                                                  Generate for a specific Freshness Value and Data ID
            Parameters (inout): none
            Parameters (out):   none
            Return value:       void
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Tx_Cfg.h_331</srcid><srcstatus/><internalId>728</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1743</srcid><srcstatus/><internalId>1021</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1757</srcid><srcstatus/><internalId>1022</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_TP_MACGENERATESTATUS</srcid><srcstatus/><internalId>1252</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_11_TP_MACGENERATE_CSM_NOT_OK</srcid><srcstatus/><internalId>1491</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>616</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00014</id>
         <status>approved</status>
         <source>EB</source>
         <version>2</version>
         <description>
            Name:          SecOC_MacGenerateStatusType
            Kind:          Structure
            Elements:      freshnessValueID uint16                  Identifier of the Freshness Value
                                                                    which resulted in the MAC Generate
                                                                    Status
                           Std_ReturnType   macGenerateStatus       The MAC Generate status
                           secOCDataId      SecOC_DataIdLengthType  Data ID of SecOCDataId
            Description:   Data structure to bundle the status of the MAC Generate for
                           a specific Freshness Value and Data ID.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Types.h_682</srcid><srcstatus/><internalId>736</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_254</srcid><srcstatus/><internalId>1172</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_TP_MACGENERATESTATUS</srcid><srcstatus/><internalId>1252</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_11_TP_MACGENERATE_CSM_NOT_OK</srcid><srcstatus/><internalId>1491</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>617</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00015</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            MAC Generate Status Service
            Name:          MacGenerateStatus
            Comment:       This service realizes a notification service that is used to propagate the status
                           of the MAC Generate procedure from the SecOC module to the application layer.
            IsService:     true
            Variation:     -
            Data Elements: macGenerateStatus
                           Type: SecOC_MacGenerateStatusType
         </description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_TP_MACGENERATESTATUS</srcid><srcstatus/><internalId>1252</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_330</srcid><srcstatus/><internalId>1186</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>618</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00016</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            Name                SecOCDefaultAuthenticatorValue
            Description         This parameter defines the default value for the authenticator.
                                The configured value will be set for every byte within the authenticator.
                                Parameter ENABLE: SecOC shall send secured messages with the default MAC,
                                if the MAC could not be generated, i.e. Csm_MacGenerate returns something
                                different than E_OK.
                                Parameter DISABLE: SecOC shall not send secured messages,
                                if the MAC could not be generated.
            Multiplicity        0...1
            Type                EcucIntegerParamDef
            Range               0...255
         </description>
         <comment>
            Incorporated Bugzilla RfC 80038.
         </comment>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_829</srcid><srcstatus/><internalId>1054</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_TX_DEFAULTMAC_16_TP</srcid><srcstatus/><internalId>1600</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_DEFAULTMAC_19_IF</srcid><srcstatus/><internalId>1601</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>619</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00017</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            When SecOCDefaultAuthenticatorValue is enabled and the MAC could not be generated
            the SecOC module shall send secured messages with the default configured MAC.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1267</srcid><srcstatus/><internalId>1010</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_TX_DEFAULTMAC_16_TP</srcid><srcstatus/><internalId>1600</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_DEFAULTMAC_19_IF</srcid><srcstatus/><internalId>1601</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>620</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00018</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           Name                SecOCTxSyncPduProcessing
           Description:        Specifies whether the Pdu is processed synchronously,
                                    i.e. the Pdu is processed directly without calling the main function.
                               TRUE:  Synchrounous Pdu processing is enabled
                               FALSE: Synchrounous Pdu processing is disabled
           Multiplicity        1
           Type                EcucBooleanParamDefDefault
           Default value       false
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3484</srcid><srcstatus/><internalId>1131</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>621</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00019</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           If SecOCTxSyncPduProcessing is enabled and SecOCAuthenticationBuildAttempts is greater than zero tresos shall generate a warning.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3516</srcid><srcstatus/><internalId>1132</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>622</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00021</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           If SecOCTxSyncPduProcessing is enabled SecOC_ProcessTxPduStates shall be called directly from PduR calls to SecOC interface.
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_541</srcid><srcstatus/><internalId>774</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_09_ASYNC_SECUREDPDU_IFPDU</srcid><srcstatus/><internalId>1604</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_12_ASYNC_SECUREDPDU_TPPDU</srcid><srcstatus/><internalId>1605</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_09_SECUREDPDU_IFPDU</srcid><srcstatus/><internalId>1606</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_12_SECUREDPDU_TPPDU</srcid><srcstatus/><internalId>1607</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_18_SECUREDPDU_IFPDU_COLL</srcid><srcstatus/><internalId>1608</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_22_SECUREDPDU_TPPDU_COLL</srcid><srcstatus/><internalId>1609</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_17_SECUREDPDU_IFPDU_FRESHNESS</srcid><srcstatus/><internalId>1610</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_13_SECUREDPDU_TPPDU_FRESHNESS</srcid><srcstatus/><internalId>1611</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_17_SECUREDPDU_IFPDU_MACGEN</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_13_SECUREDPDU_TPPDU_MACGEN</srcid><srcstatus/><internalId>1613</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_02_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>1614</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>623</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00022</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           SecOC_ProcessTxPduStates shall only be available if there is at least one Tx Pdu configured in SecOC.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC_Tx.h_166</srcid><srcstatus/><internalId>759</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>624</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00023</id>
         <status>approved</status>
         <source>EB</source>
         <version>2</version>
         <description>
           If SecOCTxSyncPduProcessing is enabled and state machine is not in the state where is waiting
           for the Tx confirmation, SecOC_MainFunctionTx shall have no effect on the state of the corresponding Pdu.
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_434</srcid><srcstatus/><internalId>959</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_09_ASYNC_SECUREDPDU_IFPDU</srcid><srcstatus/><internalId>1604</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_12_ASYNC_SECUREDPDU_TPPDU</srcid><srcstatus/><internalId>1605</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_09_SECUREDPDU_IFPDU</srcid><srcstatus/><internalId>1606</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_12_SECUREDPDU_TPPDU</srcid><srcstatus/><internalId>1607</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_18_SECUREDPDU_IFPDU_COLL</srcid><srcstatus/><internalId>1608</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_22_SECUREDPDU_TPPDU_COLL</srcid><srcstatus/><internalId>1609</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_17_SECUREDPDU_IFPDU_FRESHNESS</srcid><srcstatus/><internalId>1610</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_13_SECUREDPDU_TPPDU_FRESHNESS</srcid><srcstatus/><internalId>1611</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_17_SECUREDPDU_IFPDU_MACGEN</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_13_SECUREDPDU_TPPDU_MACGEN</srcid><srcstatus/><internalId>1613</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_02_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>1614</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>625</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00024</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           If SecOCTxSyncPduProcessing is disabled for all Tx Pdus corresponding code shall be disabled via compiler switch.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Tx_Cfg.h_93</srcid><srcstatus/><internalId>726</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_539</srcid><srcstatus/><internalId>773</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_432</srcid><srcstatus/><internalId>958</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_17_SECUREDPDU_IFPDU_MACGEN</srcid><srcstatus/><internalId>1612</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>626</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00025</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           If Csm mode is asynchronous, synchronous Tx Pdu processing functionality shall not be available, i.e. SecOC_MainFunctionTx has to be called in order to process Pdu states.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Tx_Cfg.h_94</srcid><srcstatus/><internalId>727</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_09_ASYNC_SECUREDPDU_IFPDU</srcid><srcstatus/><internalId>1604</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_12_ASYNC_SECUREDPDU_TPPDU</srcid><srcstatus/><internalId>1605</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>627</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00026</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           SecOC_ProcessTxPduStates shall process all states of the Pdu.
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_404</srcid><srcstatus/><internalId>954</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_09_ASYNC_SECUREDPDU_IFPDU</srcid><srcstatus/><internalId>1604</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_12_ASYNC_SECUREDPDU_TPPDU</srcid><srcstatus/><internalId>1605</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_09_SECUREDPDU_IFPDU</srcid><srcstatus/><internalId>1606</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_12_SECUREDPDU_TPPDU</srcid><srcstatus/><internalId>1607</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_18_SECUREDPDU_IFPDU_COLL</srcid><srcstatus/><internalId>1608</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_22_SECUREDPDU_TPPDU_COLL</srcid><srcstatus/><internalId>1609</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_17_SECUREDPDU_IFPDU_FRESHNESS</srcid><srcstatus/><internalId>1610</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_13_SECUREDPDU_TPPDU_FRESHNESS</srcid><srcstatus/><internalId>1611</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_17_SECUREDPDU_IFPDU_MACGEN</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_13_SECUREDPDU_TPPDU_MACGEN</srcid><srcstatus/><internalId>1613</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_02_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>1614</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>628</internalId></specobject>
      <specobject>
         <id>SecOC.EB.RxTx.SWS_SecOC_00003</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            Name            SecOCDataIdLength
            Description     This parameter defines the length of the PDU Data ID.
                            UINT8:  PDU data ID will have 8 bits
                            UINT16: PDU data ID will have 16 bits
                            UINT32: PDU data ID will have 32 bits
            Multiplicity    1
            Type            EcucEnumerationParamDef.
            Default value   UINT16
            Range           UINT8:  DataId can have the value between 0 and 255
                            UINT16: DataId can have the value between 0 and 65535
                            UINT32: DataId can have the value between 0 and 4294967295
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1078</srcid><srcstatus/><internalId>848</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_621</srcid><srcstatus/><internalId>964</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_867</srcid><srcstatus/><internalId>1055</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_RTE_DATAIDLEN</srcid><srcstatus/><internalId>1217</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_DATAIDLEN32BITS_IF_09_10</srcid><srcstatus/><internalId>1563</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_DATAIDLEN32BITS_TP_02_03</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>629</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00010</id>
         <status>approved</status>
         <source>EB</source>
         <version>2</version>
         <description>
           Name                SecOCEbPropagateVerificationStatusApiVersion
           Description:        Specifies whether the option to propagate the verification status,
                               through RTE services or C functions (defined by AUTOSAR or extended by EB),
                               is enabled or not.
                               NONE: SecOC will not propagate the verification status
                               AUTOSAR: SecOC will propagate the verification status via the AUTOSAR defined API(s)
                               EB_CUSTOM: SecOC will propagate the verification status via the custom API(s)
           Multiplicity        1
           Type                EcucEnumerationParamDef
           Default value       NONE
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_480</srcid><srcstatus/><internalId>1045</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_RTE</srcid><srcstatus/><internalId>1216</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_IF_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1241</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>630</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00011</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           Name                SecOCRxSyncPduProcessing
           Description:        Specifies whether the Pdu is processed synchronously,
                                    i.e. the Pdu is processed directly without calling the main function.
                               TRUE:  Synchrounous Pdu processing is enabled
                               FALSE: Synchrounous Pdu processing is disabled
           Multiplicity        1
           Type                EcucBooleanParamDefDefault
           Default value       false
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1917</srcid><srcstatus/><internalId>1084</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>631</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00012</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           If SecOCRxSyncPduProcessing is enabled and SecOCAuthenticationBuildAttempts is greater than zero tresos shall generate a warning.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1949</srcid><srcstatus/><internalId>1085</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>632</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00013</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           If SecOCRxSyncPduProcessing is enabled and SecOCAuthenticationVerifyAttempts is greater than zero tresos shall generate a warning.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1954</srcid><srcstatus/><internalId>1086</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>633</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00015</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           If SecOCRxSyncPduProcessing is enabled SecOC_ProcessRxPduStates shall be called directly from PduR calls to SecOC interface.
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1469</srcid><srcstatus/><internalId>816</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1629</srcid><srcstatus/><internalId>822</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_10_SECUREDPDU_IFPDU_VRFY_RETVAL</srcid><srcstatus/><internalId>1566</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_03_SECUREDPDU_TPPDU_VRFY_RETVAL</srcid><srcstatus/><internalId>1567</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_10_SECUREDPDU_IFPDU_VRFY_VERRES</srcid><srcstatus/><internalId>1568</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_03_SECUREDPDU_TPPDU_VRFY_VERRES</srcid><srcstatus/><internalId>1569</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_13_SECUREDPDU_IFPDU_FRESHNESS</srcid><srcstatus/><internalId>1570</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_14_SECUREDPDU_TPPDU_FRESHNESS</srcid><srcstatus/><internalId>1571</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_17_SECUREDPDU_IFPDU_COLL</srcid><srcstatus/><internalId>1572</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_19_SECUREDPDU_TPPDU_COLL</srcid><srcstatus/><internalId>1573</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_09_SECUREDPDU_IFPDU</srcid><srcstatus/><internalId>1574</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_12_SECUREDPDU_TPPDU</srcid><srcstatus/><internalId>1575</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_09_SECUREDPDU_IFPDU_MAIN</srcid><srcstatus/><internalId>1576</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_12_SECUREDPDU_TPPDU_MAIN</srcid><srcstatus/><internalId>1577</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>634</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00016</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           SecOC_ProcessRxPduStates shall only be available if there is at least one Rx Pdu configured in SecOC.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC_Rx.h_174</srcid><srcstatus/><internalId>757</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_945</srcid><srcstatus/><internalId>842</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>635</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00017</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           If SecOCRxSyncPduProcessing is enabled SecOC_MainFunctionRx shall have no effect on the state of the corresponding Pdu.
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_563</srcid><srcstatus/><internalId>837</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_10_SECUREDPDU_IFPDU_VRFY_RETVAL</srcid><srcstatus/><internalId>1566</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_03_SECUREDPDU_TPPDU_VRFY_RETVAL</srcid><srcstatus/><internalId>1567</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_10_SECUREDPDU_IFPDU_VRFY_VERRES</srcid><srcstatus/><internalId>1568</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_03_SECUREDPDU_TPPDU_VRFY_VERRES</srcid><srcstatus/><internalId>1569</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_13_SECUREDPDU_IFPDU_FRESHNESS</srcid><srcstatus/><internalId>1570</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_14_SECUREDPDU_TPPDU_FRESHNESS</srcid><srcstatus/><internalId>1571</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_17_SECUREDPDU_IFPDU_COLL</srcid><srcstatus/><internalId>1572</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_19_SECUREDPDU_TPPDU_COLL</srcid><srcstatus/><internalId>1573</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_09_SECUREDPDU_IFPDU</srcid><srcstatus/><internalId>1574</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_12_SECUREDPDU_TPPDU</srcid><srcstatus/><internalId>1575</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_09_SECUREDPDU_IFPDU_MAIN</srcid><srcstatus/><internalId>1576</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_12_SECUREDPDU_TPPDU_MAIN</srcid><srcstatus/><internalId>1577</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>636</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00018</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           If SecOCRxSyncPduProcessing is disabled for all Rx Pdus corresponding code shall be disabled via compiler switch.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Rx_Cfg.h_101</srcid><srcstatus/><internalId>721</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1467</srcid><srcstatus/><internalId>815</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1627</srcid><srcstatus/><internalId>821</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_561</srcid><srcstatus/><internalId>836</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_10_SECUREDPDU_IFPDU_VRFY_RETVAL</srcid><srcstatus/><internalId>1566</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_10_SECUREDPDU_IFPDU_VRFY_VERRES</srcid><srcstatus/><internalId>1568</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>637</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00019</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           If Csm mode is asynchronous, synchronous Rx Pdu processing functionality shall not be available, i.e. SecOC_MainFunctionRx has to be called in order to process Pdu states.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Rx_Cfg.h_102</srcid><srcstatus/><internalId>722</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_09_SECUREDPDU_IFPDU_MAIN</srcid><srcstatus/><internalId>1576</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_12_SECUREDPDU_TPPDU_MAIN</srcid><srcstatus/><internalId>1577</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>638</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00020</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           SecOC_ProcessRxPduStates shall process all states of the Pdu.
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_532</srcid><srcstatus/><internalId>832</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_10_SECUREDPDU_IFPDU_VRFY_RETVAL</srcid><srcstatus/><internalId>1566</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_03_SECUREDPDU_TPPDU_VRFY_RETVAL</srcid><srcstatus/><internalId>1567</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_10_SECUREDPDU_IFPDU_VRFY_VERRES</srcid><srcstatus/><internalId>1568</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_03_SECUREDPDU_TPPDU_VRFY_VERRES</srcid><srcstatus/><internalId>1569</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_13_SECUREDPDU_IFPDU_FRESHNESS</srcid><srcstatus/><internalId>1570</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_14_SECUREDPDU_TPPDU_FRESHNESS</srcid><srcstatus/><internalId>1571</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_17_SECUREDPDU_IFPDU_COLL</srcid><srcstatus/><internalId>1572</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_19_SECUREDPDU_TPPDU_COLL</srcid><srcstatus/><internalId>1573</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_09_SECUREDPDU_IFPDU</srcid><srcstatus/><internalId>1574</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_12_SECUREDPDU_TPPDU</srcid><srcstatus/><internalId>1575</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_09_SECUREDPDU_IFPDU_MAIN</srcid><srcstatus/><internalId>1576</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_12_SECUREDPDU_TPPDU_MAIN</srcid><srcstatus/><internalId>1577</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>639</internalId></specobject>
      <specobject>
         <id>SecOC.EB.RxTx.SWS_SecOC_00004</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           Name                SecOCUseSecuredArea
           Description:        Specifies whether the option to specifies an area in the Authentic I-Pdu
                               that will be the input to the Authenticator verification algorithm
                               is enabled or not.
                               TRUE:  The secured area will be available
                               FALSE: The secured area will not be available
           Multiplicity        1
           Type                EcucBooleanParamDefDefault
           Default value       false
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_630</srcid><srcstatus/><internalId>1047</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_04_IF_SECUREDAREA</srcid><srcstatus/><internalId>1294</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_13_IF_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_01_TP_SECUREDAREA</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_10_TP_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1477</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>640</internalId></specobject>
      <specobject>
         <id>SecOC.PB.Impl.Hash</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           The module post-build configuration struct shall be extended by a hash value.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Cfg.h_25</srcid><srcstatus/><internalId>716</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_var/xgen/SecOC.xgen_86</srcid><srcstatus/><internalId>1197</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>641</internalId></specobject>
      <specobject>
         <id>SecOC.EB.RelocatablePBCfg</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            In order to support post-build-time configuration data handled by relative offsets
            to the configuration start address, the container SecOCGeneral must be extended
            by the configuration parameter SecOCRelocatablePbcfgEnable.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_689</srcid><srcstatus/><internalId>1049</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC_Test_PBcfgM_Off</srcid><srcstatus/><internalId>1203</internalId></linkedfrom><linkedfrom><srcid>SecOC_Test_PBcfgM_On</srcid><srcstatus/><internalId>1204</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>642</internalId></specobject>
      <specobject>
         <id>SecOC.PB.Impl.PbcfgM.Relocatable</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            The post-build configuration shall be relocatable if SecOCRelocatablePbcfgEnable
            is set to true and if PbcfgM enabled relocatable configurations.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Cfg.h_48</srcid><srcstatus/><internalId>718</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_var/xgen/SecOC.xgen_59</srcid><srcstatus/><internalId>1194</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>643</internalId></specobject>
      <specobject>
         <id>SecOC.PB.Impl.NoPbcfgM.Relocatable</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            The post-build configuration shall be relocatable if SecOCRelocatablePbcfgEnable
            is set to true and PbcfgM is not present in the current configuration.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Cfg.h_51</srcid><srcstatus/><internalId>719</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_var/xgen/SecOC.xgen_65</srcid><srcstatus/><internalId>1195</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>644</internalId></specobject>
      <specobject>
         <id>SecOC.PB.Impl.PbCfgM</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            The PbcfgM support in the SecOC module shall be enabled only when the PbcfgM references the module.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Cfg.h_36</srcid><srcstatus/><internalId>717</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_340</srcid><srcstatus/><internalId>761</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_PBCFG_1VARIANT</srcid><srcstatus/><internalId>1206</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_PBCFG_2VARIANTS</srcid><srcstatus/><internalId>1207</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>645</internalId></specobject>
      <specobject>
       <id>SecOC.EB.RxTx.SWS_SecOC_00007</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
          The required buffer size in bytes to store the incoming/outgoing Rx/Tx PDU(s) shall
          be calculated by using the java function "getPduBufferSize" of the class XPathFunctions.
       </description>
       <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for both Rx/Tx side, different types of transmission:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
       <needscoverage>
          <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_543</srcid><srcstatus/><internalId>1023</internalId></linkedfrom></coveredby></needscov>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_PBCFG_VARIANTS</srcid><srcstatus/><internalId>1222</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_FRESHNESS_RETVAL_BUSY_RETRIES_NOT_EXCEEDED</srcid><srcstatus/><internalId>1253</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_FRESHNESS_RETVAL_BUSY_RETRIES_EXCEEDED</srcid><srcstatus/><internalId>1254</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_FRESHNESS_RETVAL_E_NOT_OK</srcid><srcstatus/><internalId>1255</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_MACVER_RETVAL_E_NOT_OK_RETRIES_NOT_EXCEEDED</srcid><srcstatus/><internalId>1256</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_MACVER_RETVAL_E_NOT_OK_RETRIES_EXCEEDED</srcid><srcstatus/><internalId>1257</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_MACVER_RESULT_E_NOT_OK_RETRIES_NOT_EXCEEDED</srcid><srcstatus/><internalId>1258</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_MACVER_RESULT_E_NOT_OK_RETRIES_EXCEEDED</srcid><srcstatus/><internalId>1259</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_SAMEBUFFER_09_17_IF_FRESHNESS_RETVAL_E_NOT_OK_RETRIES_NOT_EXCEEDED</srcid><srcstatus/><internalId>1260</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_SAMEBUFFER_09_17_IF_FRESHNESS_RETVAL_E_NOT_OK_RETRIES_EXCEEDED</srcid><srcstatus/><internalId>1261</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_SAMEBUFFER_09_17_IF_MACGEN_RETVAL_E_NOT_OK_RETRIES_NOT_EXCEEDED</srcid><srcstatus/><internalId>1262</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_SAMEBUFFER_09_17_IF_MACGEN_RETVAL_E_NOT_OK_RETRIES_EXCEEDED</srcid><srcstatus/><internalId>1263</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>646</internalId></specobject>
      <specobject>
       <id>SecOC.EB.RxTx.SWS_SecOC_00008</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
          The required buffer size in bytes to store the incoming/outgoing Rx/Tx PDU(s) shall
          be calculated by using the java function "getIntBufferSize" of the class XPathFunctions.
       </description>
       <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for both Rx/Tx side, for different types of transmission:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
       <needscoverage>
          <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_610</srcid><srcstatus/><internalId>1028</internalId></linkedfrom></coveredby></needscov>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_PBCFG_VARIANTS</srcid><srcstatus/><internalId>1222</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_FRESHNESS_RETVAL_BUSY_RETRIES_NOT_EXCEEDED</srcid><srcstatus/><internalId>1253</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_FRESHNESS_RETVAL_BUSY_RETRIES_EXCEEDED</srcid><srcstatus/><internalId>1254</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_FRESHNESS_RETVAL_E_NOT_OK</srcid><srcstatus/><internalId>1255</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_MACVER_RETVAL_E_NOT_OK_RETRIES_NOT_EXCEEDED</srcid><srcstatus/><internalId>1256</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_MACVER_RETVAL_E_NOT_OK_RETRIES_EXCEEDED</srcid><srcstatus/><internalId>1257</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_MACVER_RESULT_E_NOT_OK_RETRIES_NOT_EXCEEDED</srcid><srcstatus/><internalId>1258</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_MACVER_RESULT_E_NOT_OK_RETRIES_EXCEEDED</srcid><srcstatus/><internalId>1259</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_SAMEBUFFER_09_17_IF_FRESHNESS_RETVAL_E_NOT_OK_RETRIES_NOT_EXCEEDED</srcid><srcstatus/><internalId>1260</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_SAMEBUFFER_09_17_IF_FRESHNESS_RETVAL_E_NOT_OK_RETRIES_EXCEEDED</srcid><srcstatus/><internalId>1261</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_SAMEBUFFER_09_17_IF_MACGEN_RETVAL_E_NOT_OK_RETRIES_NOT_EXCEEDED</srcid><srcstatus/><internalId>1262</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_SAMEBUFFER_09_17_IF_MACGEN_RETVAL_E_NOT_OK_RETRIES_EXCEEDED</srcid><srcstatus/><internalId>1263</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>647</internalId></specobject>
      <specobject>
       <id>SecOC.EB.RxTx.SWS_SecOC_00009</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
          When calling "getPduBufferSize" in turn the function shall execute the helper function
          "getPduBufferSizeForSameBufferLinkPdus", "getBufferSizeForCurRxPdu" and
          "getBufferSizeForCurTxPdu".
       </description>
       <needscoverage>
          <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_563</srcid><srcstatus/><internalId>1024</internalId></linkedfrom><linkedfrom><srcid>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_579</srcid><srcstatus/><internalId>1025</internalId></linkedfrom><linkedfrom><srcid>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_585</srcid><srcstatus/><internalId>1026</internalId></linkedfrom><linkedfrom><srcid>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_601</srcid><srcstatus/><internalId>1027</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>648</internalId></specobject>
      <specobject>
       <id>SecOC.EB.RxTx.SWS_SecOC_00010</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
          When calling "getIntBufferSize" in turn the function shall execute the helper function
          "getIntBufferSizeForSameBufferLinkPdus", "getIntBufferSizeForCurRxPdu" and
          "getIntBufferSizeForCurTxPdu".
       </description>
       <needscoverage>
          <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_651</srcid><srcstatus/><internalId>1029</internalId></linkedfrom><linkedfrom><srcid>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_668</srcid><srcstatus/><internalId>1030</internalId></linkedfrom><linkedfrom><srcid>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_674</srcid><srcstatus/><internalId>1031</internalId></linkedfrom><linkedfrom><srcid>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_698</srcid><srcstatus/><internalId>1032</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>649</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00027</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           Container Name   SecOCBypassAuthenticationRoutine
           Description:     Specifies whether the ability to bypass the authentication
                            routine, is enabled or disabled.
           Multiplicity     1
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_903</srcid><srcstatus/><internalId>1056</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_00_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1578</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_01_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1579</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_02_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1580</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_03_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1581</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_04_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1582</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_05_TP_SECUREDPDU</srcid><srcstatus/><internalId>1583</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_06_IF_SECUREDPDU</srcid><srcstatus/><internalId>1584</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_07_IF_SECUREDPDU</srcid><srcstatus/><internalId>1585</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_08_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1586</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_09_TP_SECUREDPDU</srcid><srcstatus/><internalId>1587</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_10_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1588</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_11_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1589</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_12_IF_SECUREDPDU</srcid><srcstatus/><internalId>1590</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_13_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1591</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_14_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1592</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_15_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1593</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_16_IF_SECUREDPDU</srcid><srcstatus/><internalId>1594</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_17_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1595</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_18_TP_SECUREDPDU</srcid><srcstatus/><internalId>1596</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_19_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1597</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>650</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00028</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            Name            SecOCDefaultAuthenticationInfoValue
            Description     This parameter defines the default value for the authentication information.
                            The configured value will be set for every byte within the authentication information.
            Multiplicity    0...1
            Type            EcucIntegerParamDef
            Range           0...255
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_942</srcid><srcstatus/><internalId>1057</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_00_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1578</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_01_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1579</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_02_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1580</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_03_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1581</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_04_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1582</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_05_TP_SECUREDPDU</srcid><srcstatus/><internalId>1583</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_06_IF_SECUREDPDU</srcid><srcstatus/><internalId>1584</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_07_IF_SECUREDPDU</srcid><srcstatus/><internalId>1585</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_08_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1586</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_09_TP_SECUREDPDU</srcid><srcstatus/><internalId>1587</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_10_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1588</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_11_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1589</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_12_IF_SECUREDPDU</srcid><srcstatus/><internalId>1590</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_13_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1591</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_14_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1592</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_15_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1593</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_16_IF_SECUREDPDU</srcid><srcstatus/><internalId>1594</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_17_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1595</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_18_TP_SECUREDPDU</srcid><srcstatus/><internalId>1596</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_19_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1597</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>651</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00029</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
            Service name: SecOC_BypassAuthRoutine
            Syntax: Std_ReturnType SecOC_BypassAuthRoutine( boolean state )
            Sync/Async: Synchronous
            Reentrancy: Non Reentrant.
            Parameters (in): state    Provided bypass state
                                      The following state types can be used:
                                      FALSE - the bypass mechanism is turned off(also set at initialization)
                                      TRUE - the bypass mechanism is turned on
            Parameters (inout): None
            Parameters (out): None
            Return value: None
            Description: Notifies the SecOC module about the bypass mechanism status
                         (available if SecOCBypassAuthenticationRoutine = TRUE).
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1651</srcid><srcstatus/><internalId>823</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_00_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1578</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_01_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1579</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_02_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1580</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_03_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1581</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_04_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1582</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_05_TP_SECUREDPDU</srcid><srcstatus/><internalId>1583</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_06_IF_SECUREDPDU</srcid><srcstatus/><internalId>1584</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_07_IF_SECUREDPDU</srcid><srcstatus/><internalId>1585</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_08_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1586</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_09_TP_SECUREDPDU</srcid><srcstatus/><internalId>1587</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_10_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1588</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_11_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1589</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_12_IF_SECUREDPDU</srcid><srcstatus/><internalId>1590</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_13_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1591</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_14_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1592</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_15_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1593</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_16_IF_SECUREDPDU</srcid><srcstatus/><internalId>1594</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_17_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1595</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_18_TP_SECUREDPDU</srcid><srcstatus/><internalId>1596</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_19_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1597</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>652</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00030</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           If the SecOC_BypassAuthRoutine function was called to enable the bypass mechanism,
           the SecOC module shall not call the FvM to obtain the freshness value or the Csm
           to calculate the authenticator and will propagate the secured PDU with the cryptographic
           information set to SecOCDefaultAuthenticationInfoValue for all bytes of the
           freshness value and authenticator.
         </description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_597</srcid><srcstatus/><internalId>963</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_00_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1578</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_01_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1579</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_02_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1580</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_03_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1581</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_04_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1582</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_05_TP_SECUREDPDU</srcid><srcstatus/><internalId>1583</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_06_IF_SECUREDPDU</srcid><srcstatus/><internalId>1584</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_07_IF_SECUREDPDU</srcid><srcstatus/><internalId>1585</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_08_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1586</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_09_TP_SECUREDPDU</srcid><srcstatus/><internalId>1587</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_10_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1588</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_11_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1589</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_12_IF_SECUREDPDU</srcid><srcstatus/><internalId>1590</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_13_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1591</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_14_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1592</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_15_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1593</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_16_IF_SECUREDPDU</srcid><srcstatus/><internalId>1594</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_17_IF_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1595</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_18_TP_SECUREDPDU</srcid><srcstatus/><internalId>1596</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_BYPASSAUTH_19_TP_SECUREDPDUCOLLECTION</srcid><srcstatus/><internalId>1597</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>653</internalId></specobject>
      <specobject>
        <id>SecOC.EB.RxTx.SWS_SecOC_00011</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
        <description>
          Name:              SecOCCsmJobRefCallout
          Parent Container:  SecOCGeneral (Eb General Tab)
          Description:       This parameter defines the name of the callout function which shall be
                            called during the initialization phase (SecOC_Init) to retrieve the
                            Csm job ID to be used when calling the Csm authentication service.
          Multiplicity:      0...1
          Type:              EcucFunctionNameDef
        </description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_970</srcid><srcstatus/><internalId>1058</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>654</internalId></specobject>
      <specobject>
        <id>SecOC.EB.RxTx.SWS_SecOC_00012</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
        <description>
          Service name:       &lt;SecOC_CsmJobRefCallout&gt;
          Syntax:             uint32 &lt;SecOC_CsmJobRefCallout&gt;( uint32 JobId )
          Sync/Async:         Synchronous
          Reentrancy:         Non Reentrant
          Parameters (in):    JobId   The Csm job which was configured in SecOCRxAuthServiceConfigRef or SecOCTxAuthServiceConfigRef.
          Parameters (inout): None
          Parameters (out):   None
          Return value:       The Csm job ID which shall be used when calling the Csm services.
          Description:        Callout function to obtain the Csm job ID which shall be used during
                             the runtime when calling Csm authentication/verification services.
                             The function either provides a different Csm job id
                             that shall be used instead of the configured SecOCRxAuthServiceConfigRef
                             or SecOCTxAuthServiceConfigRef, or it provides the same Csm job id
                             if the configured Csm job ID is appropriate
                             (available if SecOCCsmJobRefCallout = enable).
        </description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Cfg.h_210</srcid><srcstatus/><internalId>720</internalId></linkedfrom></coveredby></needscov>
           <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_RX_DYNAMICCSMJOBID_IF_09_10_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1560</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_DYNAMICCSMJOBID_IF_02_03_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1561</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>655</internalId></specobject>
      <specobject>
        <id>SecOC.EB.Rx.SWS_SecOC_00021</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
        <description>
          If SecOCCsmJobRefCallout is enabled, the data type SecOC_RxDataType shall be extended
          by a member uint32 CsmJobIdPostDefined, that shall hold the Csm job ID for the Csm
          verification service that is set during initialization (SecOC_Init).
        </description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Types.h_403</srcid><srcstatus/><internalId>732</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>656</internalId></specobject>
      <specobject>
        <id>SecOC.EB.Tx.SWS_SecOC_00031</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
        <description>
          If SecOCCsmJobRefCallout is enabled, the data type SecOC_TxDataType shall be extended
          by a member uint32 CsmJobIdPostDefined, that shall hold the Csm job ID for the Csm
          authentication service that is set during initialization (SecOC_Init).
        </description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SecOC_Types.h_608</srcid><srcstatus/><internalId>734</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>657</internalId></specobject>
      <specobject>
        <id>SecOC.EB.Rx.SWS_SecOC_00022</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
        <description>
          If SecOCCsmJobRefCallout is enabled, when SecOC calls the function defined by
          SecOCCsmJobRefCallout for a Rx-PDU, the function shall provide the configured
          SecOCRxAuthServiceConfigRef as Csm job ID input parameter.
        </description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_484</srcid><srcstatus/><internalId>831</internalId></linkedfrom></coveredby></needscov>
           <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_RX_DYNAMICCSMJOBID_IF_09_10_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1560</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>658</internalId></specobject>
      <specobject>
        <id>SecOC.EB.Tx.SWS_SecOC_00032</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
        <description>
          If SecOCCsmJobRefCallout is enabled, when SecOC calls the function defined by
          SecOCCsmJobRefCallout for a Tx-PDU, the function shall provide the configured
          SecOCTxAuthServiceConfigRef as Csm job ID input parameter.
        </description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_355</srcid><srcstatus/><internalId>953</internalId></linkedfrom></coveredby></needscov>
           <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_TX_DYNAMICCSMJOBID_IF_02_03_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1561</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>659</internalId></specobject>
      <specobject>
        <id>SecOC.EB.Rx.SWS_SecOC_00023</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
        <description>
          If SecOCCsmJobRefCallout is enabled and if the function defined by SecOCCsmJobRefCallout
          is called for a particular Rx-PDU, it shall be stored in SecOC_RxData.CsmJobIdPostDefined.
        </description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_484</srcid><srcstatus/><internalId>831</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>660</internalId></specobject>
      <specobject>
        <id>SecOC.EB.Tx.SWS_SecOC_00033</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
        <description>
          If SecOCCsmJobRefCallout is enabled and if the function defined by SecOCCsmJobRefCallout
          is called for a particular Tx-PDU, it shall be stored in SecOC_TxData.CsmJobIdPostDefined.
        </description>
        <needscoverage>
           <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_355</srcid><srcstatus/><internalId>953</internalId></linkedfrom></coveredby></needscov>
        <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>661</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00026</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
           Name                SecOCIgnoreFvMFailures
           Description         The result of the freshness process (e.g. calling FvM function) for the RX PDU is ignored and the SecOC proceeds
                               with like the result was a success. The authentication process for the received PDU will be skipped
                               and the PDU will be forwarded to the upper layer.
                               TRUE: enabled (FvM result is ignored).
                               FALSE: disabled (FvM result is NOT ignored).
           Multiplicity        1
           Type                EcucBooleanParamDefDefault
           Default value       false
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_722</srcid><srcstatus/><internalId>1051</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>662</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00027</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
           If SecOCIgnoreFvMFailures is enabled and the authentication build counter has reached the configuration value SecOCAuthenticationBuildAttempts
           or the Rx freshness request function returns E_NOT_OK, the lower layer authentic PDU is forwarded directly to the upper layer
           without performing further verification.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1434</srcid><srcstatus/><internalId>863</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1765</srcid><srcstatus/><internalId>893</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_FVM_FAILURES_AUTH_ATTEMPS_NOT_ZERO_09_IF</srcid><srcstatus/><internalId>1378</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_FVM_FAILURES_FVM_SYNC_NOT_ZERO_13_IF</srcid><srcstatus/><internalId>1379</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_FVM_FAILURES_AUTH_ATTEMPS_ZERO_13_IF</srcid><srcstatus/><internalId>1380</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_FVM_FAILURES_17_IF</srcid><srcstatus/><internalId>1381</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_FVM_FAILURES_09_TP</srcid><srcstatus/><internalId>1382</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_FVM_FAILURES_17_TP</srcid><srcstatus/><internalId>1383</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>663</internalId></specobject>
      <specobject>
         <id>SecOC.EB.RxTx.ECUC_SecOC_00003</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name                SecOCFreshnessValueFuncName
            Description         This parameter specifies the name of the C API function which shall be
                                called to query the freshness for the current PDU.
            Multiplicity        0...1
            Type                EcucFunctionNameDef
            Value configuration class Pre-compile time
            Scope / Dependency  SecOCQueryFreshnessValue = CFUNC
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1408</srcid><srcstatus/><internalId>1071</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3078</srcid><srcstatus/><internalId>1121</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_CDDFRESHNESSINTERFACES</srcid><srcstatus/><internalId>1211</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1229</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>664</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.ECUC_SecOC_00007</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name SecOCSecuredPDUTransmittedFuncName
            Description This parameter specifies the name of the C API function which shall be called after a Secured I-PDU has been started for transmission.
            Multiplicity 0…1
            Type EcucFunctionNameDef
            Value configuration class Pre-compile time X  Post-build
            Scope / Dependency SecOCQueryFreshnessValue = CFUNC
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_3112</srcid><srcstatus/><internalId>1122</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_CDDFRESHNESSINTERFACES</srcid><srcstatus/><internalId>1211</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>665</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Rx.SWS_SecOC_00028</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            The SecOC_TpCancelReceive function shall return E_NOT_OK if the PDU id with which is called isn't currently being processed or if the PduR_SecOCStartOfReception wasn't triggered before the call.
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_610</srcid><srcstatus/><internalId>778</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_AFTER_START_OF_RECEPTION</srcid><srcstatus/><internalId>1301</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_AFTER_COPY_RX_DATA</srcid><srcstatus/><internalId>1302</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_AFTER_RX_INDICATION</srcid><srcstatus/><internalId>1303</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_DURING_ASYNC_VERIF</srcid><srcstatus/><internalId>1304</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_AFTER_MAIN</srcid><srcstatus/><internalId>1305</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_DURING_VERIFICATION</srcid><srcstatus/><internalId>1306</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>666</internalId></specobject>
      <specobject>
         <id>SecOC.EB.Tx.SWS_SecOC_00269</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            The AUTOSAR SecOC module shall fill not used bits of a transmitted Secured or a transmitted Cryptographic Pdu with the corresponding bits from
            the configuration parameter SecOCTxPduUnusedAreasDefault.
            Example:
               SecOCFreshnessValueTx         = 0011 0101 | 11        (SecOCFreshnessValueTruncLength: 10bits)
               SecOCAuthInfoTx               = 1100 1100 | 1         (SecOCAuthInfoTruncLength:       9 bits)
               SecOCTxPduUnusedAreasDefault  = 1111 1010

               Cryptographic Pdu             = 0011 0101 | 1111 0011 | 001X XXXX | XXXX XXXX | XXXX XXXX
               Cryptographic Pdu             = 0011 0101 | 1111 0011 | 0011 1010 | 1111 1010 | 1111 1010
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1455</srcid><srcstatus/><internalId>1016</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_09_IF_SECUREDIPDU_DYN_LEN_UNUSED_AREA_AUTHINFO_BITS</srcid><srcstatus/><internalId>1548</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_03_IF_SECUREDIPDU_UNUSED_AREA_FRESH_BITS</srcid><srcstatus/><internalId>1550</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_17_IF_SECUREDIPDU_UNUSED_AREA_AUTHINFO_FRESH_BITS</srcid><srcstatus/><internalId>1551</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>667</internalId></specobject>
      <specobject>
         <id>SecOC.ASR430.Rx.SWS_SecOC_00142</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>4</version>
         <description>
            Name: VerifyStatusConfiguration
            Comment: Verify Status Configuration Service of SecOC
            IsService: true
            Variation: --
            Possible Errors: 0 E_OK Operation successful
                             1 E_NOT_OK Operation failed
            Operation: Name VerifyStatusOverride
            Comments: This service provides the ability to override the VerifyStatus with "Fail" or
                      "Pass" when using a specific Freshness Value to verify authenticity of data making
                      up an I-PDU. Using this interface, VerifyStatus may be overridden
                      1. Indefinitely for received I-PDUs which use the specific Freshness Value for
                      authentication verification
                      2. For a number of sequentially received I-PDUs which use the specific Freshness
                      Value for authentication verification.
                      Additionally this service provides the ability to skip the verification
                      and directly forward the authentic I-PDU to the upper layer.
                      Note: When overriding the VerifyStatus, the CSM shall still be used to validate
                      authentication of the data making up an I-PDU. This service is optional.
            Variation --
            Parameters
              Name: freshnessValueId
                Comment: Identifier of the Freshness Value which resulted in the AuthenticationStatus
                Type: uint16
                Variation: --
                Direction IN
              Name: overrideStatus
                Comment: 0 = Override VerifyStatus to "Fail" until further notice
                         1 = Override VerifyStatus to "Fail" until NumberOfMessagesToOverride is reached
                         2 = Cancel Override of VerifyStatus
                        41 = Override VerifyStatus (eg. return value, callback result or verification result)
                             to "Pass" until is reached, only available if SecOCEnableForcedPassOverride is set to TRUE
                        43 = Override VerifyStatus to skip the verification,
                             only available if SecOCEnableForcedPassOverride is set to TRUE
                Type: uint8
                Variation: --
                Direction: IN
              Name: numberOfMessagesToOverride
                Comment: Number of sequential VerifyStatus to override when using a specific counter
                         for authentication verification. This is only considered when OverrideStatus
                         is equal to 1 or 41.
                Type: uint8
                Variation: --
                Direction: IN
         </description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_RTE</srcid><srcstatus/><internalId>1216</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_FAIL_NTIMES</srcid><srcstatus/><internalId>1242</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_PASS_NTIMES_VER_RESULT</srcid><srcstatus/><internalId>1243</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_PASS_NTIMES_RETVAL</srcid><srcstatus/><internalId>1244</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_PASS_NTIMES_CALLBACK_RESULT</srcid><srcstatus/><internalId>1245</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_24_IF_VERIFYSTATUSOVERRIDE_PASS_MULTIPDUS_SAMEFRESHID</srcid><srcstatus/><internalId>1246</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_SKIP_UNTIL_NOTICE_SECPDU</srcid><srcstatus/><internalId>1247</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_19_TP_VERIFYSTATUSOVERRIDE_SKIP_UNTIL_NOTICE_SECPDUCOL</srcid><srcstatus/><internalId>1248</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_CANCEL</srcid><srcstatus/><internalId>1249</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_WRONGINPUT</srcid><srcstatus/><internalId>1250</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_18</srcid><srcstatus/><internalId>1176</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>668</internalId></specobject>
      <specobject>
         <id>SecOC.ASR21-11.EB.Rx.SWS_SecOC_00149</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name: SecOC_VerificationResultType
            Type: Enumeration
            Range: SECOC_VERIFICATIONSUCCESS 0x00 Verification successful
                   SECOC_VERIFICATIONFAILURE 0x01 Verification not successful
                   SECOC_FRESHNESSFAILURE 0x02 Verification not successful because of wrong freshness value.
                   SECOC_ AUTHENTICATIONBUILDFAILURE 0x03 Verification not successful because of wrong build authentication codes
                   SECOC_NO_VERIFICATION 0x04 Verification has been skipped and the data has been provided to upper layer "as is". (only possible when SecOC_ VerifyStatusOverride is used)
                   SECOC_VERIFICATIONFAILURE_ OVERWRITTEN 0x05 Verification failed, but the I-PDU was passed on to the upper layer due to the override status for this PDU. ( only possible when SecOC_VerifyStatus Override is used) Description Enumeration to indicate verification results. Variation -- Available via Rte_SecOC_Type.h
                   SECOC_MACSERVICEFAILURE Mac service was rejected (only available if SecOCEbPropagateVerificationStatusApiVersion = EB_CUSTOM)
            Description: Enumeration to indicate verification results. (SRS_SecOC_00022)</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC_Rx_Int.h_203</srcid><srcstatus/><internalId>758</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1908</srcid><srcstatus/><internalId>905</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_11_IF_TP_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1282</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_CSMMODE_IF_09_10_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1562</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>669</internalId></specobject>
      <specobject>
         <id>SecOC.ASR430.Rx.SWS_SecOC_00160</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>4</version>
         <description>
            Name: SecOC_VerificationStatusType Type: Structure
            Element: uint16 freshnessValueID                          Identifier of the Freshness Value which resulted in the Verification Status
                     SecOC_VerificationResultType verificationStatus  Result of verification attempt: SECOC_VERIFICATIONSUCCESS = Verification successful SECOC_VERIFICATIONFAILURE =
                                                                      Verification not successful SECOC_FRESHNESSFAILURE = Verification not successful because of
                                                                      wrong freshness value
                     SecOC_DataIdLengthType secOCDataId               Data ID of SecOCDataId
                     Std_ReturnType verificationReturn                Return code of the verification procedure
            Description: Data structure to bundle the status of a verification attempt for a specific Freshness Value. (SRS_SecOC_00022)
         </description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX_TYPES</srcid><srcstatus/><internalId>1220</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_IF_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1241</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_11_IF_TP_VERIFICATIONSTATUS</srcid><srcstatus/><internalId>1282</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_192</srcid><srcstatus/><internalId>1171</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>670</internalId></specobject>
      <specobject>
         <id>SecOC.ASR430.Tx.SWS_SecOC_00155</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If the number of additional authentication attempts for an Authentic I-PDU has
            reached SecOCAuthenticationRetries the SecOC module shall remove the AuthenticI-PDU from its
            internal buffer.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</srcid><srcstatus/><internalId>1229</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_800</srcid><srcstatus/><internalId>979</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1259</srcid><srcstatus/><internalId>1008</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>671</internalId></specobject>
      <specobject>
         <id>SecOC.ASR430.Tx.SWS_SecOC_00078</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If the PDU Router module rejects the transmission of a I-PDU by returning E_NOT_OK
            when the PduR_SecOCTransmit is called then the SecOC module shall immediately cancel the
            ongoing transmission attempt and switch to the internal state Idle.</description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_18_IF_SECUREDPDUCOLLECTION_NOMESSAGE_WITH_TRIGGER_TRANSMIT</srcid><srcstatus/><internalId>1514</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Tx.c_1126</srcid><srcstatus/><internalId>998</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>672</internalId></specobject>
      <specobject>
         <id>SecOC.ASR430.RxTx.SWS_SecOC_00001</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>General SecOC module definitions shall be defined in
            SecOC.h.(SRS_BSW_00415)</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SecOC.h_10</srcid><srcstatus/><internalId>740</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_PBCFG_1VARIANT</srcid><srcstatus/><internalId>1206</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_PBCFG_2VARIANTS</srcid><srcstatus/><internalId>1207</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RX</srcid><srcstatus/><internalId>1208</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX</srcid><srcstatus/><internalId>1210</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_RXTX_NOVERSIONINFOAPI_NOCRYPTOBITLEN</srcid><srcstatus/><internalId>1215</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CMP_TX</srcid><srcstatus/><internalId>1221</internalId></linkedfrom><linkedfrom><srcid>TS_SecOC_StyleCheck_Src_Templates</srcid><srcstatus/><internalId>1554</internalId></linkedfrom><linkedfrom><srcid>TS_SecOC_StyleCheck_Src</srcid><srcstatus/><internalId>1555</internalId></linkedfrom><linkedfrom><srcid>TS_SecOC_StyleCheck_Plugin</srcid><srcstatus/><internalId>1556</internalId></linkedfrom><linkedfrom><srcid>TS_SecOC_StyleCheck_Generated</srcid><srcstatus/><internalId>1557</internalId></linkedfrom><linkedfrom><srcid>TS_SecOC_StyleCheck_Tests</srcid><srcstatus/><internalId>1558</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>673</internalId></specobject>
      <specobject>
         <id>SecOC.ASR430.Rx.SWS_SecOC_00111</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>Any reception process initiated from the lower layer communication module shall
            overwrite the buffer that contains the Secured I-PDU without affecting the buffer of the
            respective Authentic I-PDU.()</description>
         <furtherinfo>WRN.swuts.needscoverage.count: This requirement is applicable for different types of communication:If/Tp and different types of PDU:SecuredPdu/SecuredPduCollection.</furtherinfo>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_03_TP</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_09_IF_CSM</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_10_IF_FRESHNESS_ZERO_MAC_FAILS</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_13_IF_SECUREDAREA_LENGTH_ZERO</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_IGNORE_VER_RES_09_IF</srcid><srcstatus/><internalId>1384</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_03_TP</srcid><srcstatus/><internalId>1564</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_09_IF</srcid><srcstatus/><internalId>1565</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC.c_1191</srcid><srcstatus/><internalId>803</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1320</srcid><srcstatus/><internalId>809</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SecOC.c_1568</srcid><srcstatus/><internalId>820</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
         
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>674</internalId></specobject>
      <specobject>
         <id>SecOC.ASR430.SWS_SecOC_EB_RxTx_00003</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>If the configuration parameter SecOCCryptoBitLength is true, the SecOC shall
            set the length of the authenticator in bits upon invocations of the routines
            &lt;Csm&gt;_MacGenerate and &lt;Csm&gt;_MacVerify
         </description>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_TX_02_TP_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_CSMMODE_TP_02_03_ASYNC_AND_SYNC</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_DATAIDLEN32BITS_TP_02_03</srcid><srcstatus/><internalId>1599</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SecOC_Rx.c_1252</srcid><srcstatus/><internalId>854</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>675</internalId></specobject>
      <specobject>
         <id>SecOC.ASR430.RxTx.SWS_SecOC_00147</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>2</version>
         <description>The Secured PDUs with the same freshness value ID and direction
            must have the same freshness value length.</description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1110</srcid><srcstatus/><internalId>1063</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_2781</srcid><srcstatus/><internalId>1113</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>676</internalId></specobject>
      <specobject>
         <id>SecOC.EB.RxTx.SWS_SecOC_00029</id>
         <status>approved</status>
         <source>EB refinement</source>
         <version>1</version>
         <description>
            Name SecOCBitCountingAndOrder
            Description This parameter specifies the type of bit counting and ordering.
                        SECOC_DECREASING_ORDER_SAWTOOTH_COUNTING_FORMAT The Bit Counting will be done as "sawtooth" numbering and the order shall be "decreasing"
                          Byte Index     :       Byte 0    |        Byte 1
                               Format    : 7 6 5 4 3 2 1 0 | 15 14 13 12 11 10 9 8.
                        SECOC_INCREASING_ORDER_MONOTONE_COUNTING_FORMAT The Bit Counting will be done as "monotone" numbering and the order shall be "increasing"
                          Byte Index     :       Byte 0    |        Byte 1
                               Format    : 0 1 2 3 4 5 6 7 | 8 9 10 11 12 13 14 15.
            Multiplicity 0…1
            Value configuration class Pre-compile time X  Post-build
            Scope / Dependency NONE
            Type                EcucEnumerationParamDef
            Range               SECOC_DECREASING_ORDER_SAWTOOTH_COUNTING_FORMAT  The Bit Counting will be done as "sawtooth" numbering and the order shall be "decreasing".
                                SECOC_INCREASING_ORDER_MONOTONE_COUNTING_FORMAT  The Bit Counting will be done as "monotone" numbering and the order shall be "increasing".
            Default value       SECOC_DECREASING_ORDER_SAWTOOTH_COUNTING_FORMAT
         </description>
         <needscoverage>
            <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_1006</srcid><srcstatus/><internalId>1059</internalId></linkedfrom></coveredby></needscov>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CNF_RX_BIT_COUNTING_BIT_ORDERING</srcid><srcstatus/><internalId>1324</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_CNF_RX_SECUREDPDUCOLLECTION_WITHMESSAGELINK</srcid><srcstatus/><internalId>1325</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>677</internalId></specobject>
   </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>SecOC.EB.BSWMDInstrumentation</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The SecOC module's BSWMD shall describe the module's
        internal and external API. This also includes state variables if present.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SecOC_GenTest_BSWMD</srcid><srcstatus/><internalId>1200</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>678</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>SecOC.EB.PBCFGM101</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Service name: SecOC_IsValidConfig
        Syntax: Std_ReturnType SecOC_IsValidConfig( void* ConfigPtr )
        Sync/Async: Synchronous
        Reentrancy: Reentrant
        Parameters (in): ConfigPtr, post build configuration manager
        configuration.
        Parameters (inout): None
        Parameters (out): None
        Return value: Returns E_OK if the SecOC configuration is valid otherwise E_NOT_OK. A
        null pointer is interpreted as invalid configuration.
        Description: This function determines if the SecOC configuration is valid. This
        function can be called also before the SecOC is initialized. No error reporting
        is necessary within this function.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC_Test_IsValidConfig</srcid><srcstatus/><internalId>1201</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>679</internalId></specobject>

    <specobject>
      <id>SecOC.EB.PBCFGM102</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        A configuration is valid
        - if the platform signature in the post build configuration equals the value
          determined by the macro TS_PlatformSigIsValid.
        - if the link time signature in the post build configuration equals the link time
          signature in the link time configuration file.
        - if the compile time signature in the post build configuration equals the value of
          the macro SECOC_CFG_SIGNATURE.
        - if the compile time signature of Published information in the post build configuration
          equals the value of the macro SECOC_PUBLIC_INFO_SIGNATURE.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC_Test_IsValidConfig</srcid><srcstatus/><internalId>1201</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>680</internalId></specobject>

    <specobject>
      <id>SecOC.EB.PBCFGM104</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the compile time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          CfgSignature.
        - the SecOC_Cfg.h file shall contain the macro
          SECOC_CFG_SIGNATURE.
        - the MCG shall generate this signature value of compile time parameters. The x-path
          function asc:getConfigSignature(nodeset) shall be used to determine the signature out
          of a list of parameters. The list of compile time parameters shall determined with the
          function asc:getConfigClassNodeList(cassString).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC_Test_IsValidConfig</srcid><srcstatus/><internalId>1201</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>681</internalId></specobject>

    <specobject>
      <id>SecOC.EB.PBCFGM104_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the compile time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          PublicInfoSignature.
        - the SecOC_Cfg.h file shall contain the macro
          SECOC_PUBLIC_INFO_SIGNATURE.
        - The MCG shall generate this signature value from the list of parameters of
          configuration class 'PublishedInformation' except 'Release'. The XPath function
          asc:getConfigSignature(nodeset) shall be used to determine the signature out of the
          list of parameters. The list of parameters shall be determined with the function
          asc:getConfigClassNodeList(cassString).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC_Test_IsValidConfig</srcid><srcstatus/><internalId>1201</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>682</internalId></specobject>

    <specobject>
      <id>SecOC.EB.PBCFGM105</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the link time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          LcfgSignature.
        - the link time configuration shall contain the uint32 value
          SecOC_LcfgSignature.
        - the MCG shall generate this signature value of link time parameters. The x-path
          function asc:getConfigSignature(nodeset) shall be used to determine the signature out
          of a list of parameters. The list of link time parameters shall determined with the
          function asc:getConfigClassNodeList(cassString).
      </description>
      <comment>
        See also:
        https://infohub.automotive.elektrobit.com/display/PRJEBTRESOS/PostBuild#PostBuild-Consistencypostbuildconfig
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC_Test_IsValidConfig</srcid><srcstatus/><internalId>1201</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>683</internalId></specobject>

    <specobject>
      <id>SecOC.EB.PBCFGM106</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For Platform verification:
        - the SecOC post build configuration structure shall contain the value
          uint32 PlatformSignature. This uint32 must be the first value of the post build
          configuration structure to guarantee the correct access not disturbed by any padding
          bytes.
        - the MCG shall generate this signature for the selected target. The generator shall
          use the x-path function asc:getPlatformSignature() to determine this value.
      </description>
      <comment>
        See also:
        https://infohub.automotive.elektrobit.com/display/PRJEBTRESOS/PostBuild#PostBuild-Consistencypostbuildconfig
        https://issue.ebgroup.elektrobit.com/browse/ASCBASE-1485
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC_Test_IsValidConfig</srcid><srcstatus/><internalId>1201</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>684</internalId></specobject>

    <specobject>
      <id>SecOC.EB.PBCFGM107</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The PbcfgM support shall be enabled or disabled via the macro
        SECOC_PBCFGM_SUPPORT_ENABLED defined in the file
        SecOC_Cfg.h.
        If the PbcfgM configuration references the SecOC configuration
        the macro is set to STD_ON otherwise, or if no PbcfgM configuration is
        available it is set to STD_OFF.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC_Test_IsValidConfig</srcid><srcstatus/><internalId>1201</internalId></linkedfrom><linkedfrom><srcid>SecOC_Test_PBcfgM_Off</srcid><srcstatus/><internalId>1203</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>685</internalId></specobject>

    <specobject>
      <id>SecOC.EB.PBCFGM108</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the SecOC is referenced by the PbcfgM, the parameter regarding the
        relocatable feature, shall not be editable and the MCG shall use the configuration of
        the PbcfgM.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC_Test_PBcfgM_Off</srcid><srcstatus/><internalId>1203</internalId></linkedfrom><linkedfrom><srcid>SecOC_Test_PBcfgM_On</srcid><srcstatus/><internalId>1204</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SecOC.xdm.m4_717</srcid><srcstatus/><internalId>1050</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>686</internalId></specobject>

    <specobject>
      <id>SecOC.EB.PBCFGM110</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The SecOC_Init() function must be extended to enable the PbcgfM
        features.
        The initialization function shall obtain the SecOC configuration
        from the PbcfgM if the PbcfgM support is enabled within this SecOC
        and the initialization function is called with a null pointer.
        The validity of the configuration shall be checked by the function
        SecOC_IsValidConfig(). The validity shall be check regardless the PbcfgM
        support is enabled or not.
        If no valid configuration can be obtained the initialization function shall
        return, leaving the SecOC uninitialized.
        In the case error reporting is enabled and no valid configuration can be obtained
        an erroneous parameter shall be indicated.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC_Test_VerifyInitWithPcfgM</srcid><srcstatus/><internalId>1202</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>687</internalId></specobject>

    <specobject>
      <id>SecOC.EB.PostBuild_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The SecOC module shall compile and build an executable even in the absence
        of a post build configuration, i.e. without any post build generated .c and .h files
        available.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_CMP_RXTX</srcid><srcstatus/><internalId>1210</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>688</internalId></specobject>

    <specobject>
      <id>SecOC.EB.PbcfgM_General_3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The SecOC shall provide the following macros in the header file
        SecOC_Cfg.h:
        - SECOC_RELOCATABLE_CFG_ENABLE which is set to STD_ON
          if relocatable config shall be enabled, otherwise it's set to STD_OFF.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC_Test_PBcfgM_On</srcid><srcstatus/><internalId>1204</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>689</internalId></specobject>

    <specobject>
      <id>SecOC.EB.PbcfgM_General_6</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If PbcfgM support is enabled SecOC shall define the following macros in
        SecOC_PBCfg.c:
        - TS_PB_CFG_LAYOUT_TYPE: Shall expand to the type definition of the Postbuild
          configuration layout type (e.g. SecOC_ConstConfigLayoutType)
        - TS_PB_CFG_NAME: Shall expand to the name of the structure defining the Postbuild
          configuration layout (e.g. SecOC_ConfigLayout)
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SecOC_Test_PBcfgM_Off</srcid><srcstatus/><internalId>1203</internalId></linkedfrom><linkedfrom><srcid>SecOC_Test_PBcfgM_On</srcid><srcstatus/><internalId>1204</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>690</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>SecOC.EB.PDULENGTHTYPE001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The SecOC module shall support the following values of PduLengthType:
        [UINT32, UINT16]
      </description>
      <verifycrit>
        Use case 1 - Modules not capable of handling more than 64 kbytes of data:
          - use PduLengthType value 'UINT32' with conformance test
          - verify successful test run, verify absence of metric violations
            (MISRA-C:2012, static code analysis, compiler warnings)
        Use case 2 - Modules capable of handling more than 64 kbytes of data:
          - use conformance test which handles more than 64 kbytes of data
          - apply "boundary" tests using data length of:
            [&lt;&lt;65535,65535, 65536, &gt;131072][bytes]
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_03_TP</srcid><srcstatus/><internalId>1564</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_09_IF</srcid><srcstatus/><internalId>1565</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_PDULENGTHTYPE32BITS_01_TP</srcid><srcstatus/><internalId>1602</internalId></linkedfrom><linkedfrom><srcid>TS_SECOC_IMP_TX_PDULENGTHTYPE32BITS_17_IF</srcid><srcstatus/><internalId>1603</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>691</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>SecOC.EB.Interface.Consistency</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        The module shall provide a mechanism to guarantee consistency of interfaces and
        types between its implementation and its code stub.
       </description>
       <comment>
        The code stub of a module shall provide the same external view than the module itself.
        This is mandatory because unit test of modules test against the code stubs of
        adjacent modules. Inconsistent stubs may result in the situation that incompatible
        interfaces are not detected as unit test stage.
       </comment>
       <verifycrit>
        Create a compile test with two permutations that call all interfaces of a module
        (in both permutations).
        p0: Behave like a regular compile test; call the module generator and compile against
        the implementation of the module.
        p1: Do not generate module code and do not compile the implementation of the module.
        Instead the module shall be replaced with its own code stub.
       </verifycrit>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SecOC_VerifyCodeStub</srcid><srcstatus/><internalId>1205</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>692</internalId></specobject>

  </specobjects>
    <specobjects doctype="dev">
    <specobject>
      <id>SecOC.R2111/Dev/SecOCStartOfReceptionReturnValue</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>17</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>693</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/UsedMacAlgorith</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>39</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>531</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>694</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/MetaDataHandling</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>63</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>440</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>695</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/UseSecureArea</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>85</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>329</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>337</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>696</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/EcucParameterRange</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>123</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>586</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00087</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>587</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>589</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00090</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>590</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>517</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>697</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/NonRecoverableError</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>146</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>302</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>312</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00151</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>379</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>317</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>698</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/FreshnessManagementInterfaceName</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>171</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>298</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>299</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00245</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>321</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_91001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>484</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_91002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>308</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>699</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/SecOCVerificationStatusServicePort</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>195</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00148</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>700</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/SecOCMessageLinkLenRange</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>217</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>583</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>335</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>701</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/SecOCQueryFreshnessValueNoneValue</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>238</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>505</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>702</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/ReceivingCompleteSecuredIPDU</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>260</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00255</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>409</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>703</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/SecOC_VerifyStatusNotSupported</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>282</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_91014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>477</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>704</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/PduR_SecOCTpCopyTxDataNotSupported</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>302</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00253</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00254</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>370</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00260</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00266</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>385</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>705</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/RenamedSecOCTruncLengthToSecOCTxLength</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>333</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00094</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00095</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>521</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00096</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>558</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>554</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>331</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>706</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/SecurityEventReportingNotSupported</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>356</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00273</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>419</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00274</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>420</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00275</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>421</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>500</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>707</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/SecOC_ChangeParameterNotSupported</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>379</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00218</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>708</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/DetNotSupported</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>403</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00155</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>422</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>423</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>498</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00138</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>475</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00248</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>324</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>709</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/SecOCDataId</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>427</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>523</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>555</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>329</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>710</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/RenamedPduRInterfaces</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>486</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>361</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>377</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>399</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>405</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00087</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>408</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00081</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>440</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>442</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>449</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_91008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_91009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>443</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>401</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00313</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>426</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>536</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>567</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>546</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00062</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>550</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>580</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>572</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>711</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/SecurityProfileNotSupported</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>518</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00190</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>428</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>429</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>430</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00193</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>431</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00194</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>432</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>712</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/SecOCCalloutFunctionNames</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>545</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_91004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>459</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_91007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>457</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00222</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>297</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>305</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00250</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>326</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00246</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>322</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00247</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>323</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_00249</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.SWS_SecOC_91006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>458</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>713</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/SecOCUseTxConfirmationDefaultTrue</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>567</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00085</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>562</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>714</internalId></specobject>
    <specobject>
      <id>SecOC.R2111/Dev/SecOCMaxAlignScalarTypeNotSupported</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>589</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.ECUC_SecOC_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>502</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>715</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Cfg.h_25</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Cfg.h</sourcefile>
      <sourceline>25</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.PB.Impl.Hash</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>641</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>716</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Cfg.h_36</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Cfg.h</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.PB.Impl.PbCfgM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>645</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>717</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Cfg.h_48</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Cfg.h</sourcefile>
      <sourceline>48</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.PB.Impl.PbcfgM.Relocatable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>643</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>718</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Cfg.h_51</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Cfg.h</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.PB.Impl.NoPbcfgM.Relocatable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>644</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>719</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Cfg.h_210</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Cfg.h</sourcefile>
      <sourceline>210</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>655</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>720</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Rx_Cfg.h_101</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Rx_Cfg.h</sourcefile>
      <sourceline>101</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>637</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>721</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Rx_Cfg.h_102</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Rx_Cfg.h</sourcefile>
      <sourceline>102</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>638</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>722</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Rx_Cfg.h_350</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Rx_Cfg.h</sourcefile>
      <sourceline>350</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>723</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Rx_Cfg.h_368</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Rx_Cfg.h</sourcefile>
      <sourceline>368</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00250</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>290</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>724</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Rx_Cfg.h_409</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Rx_Cfg.h</sourcefile>
      <sourceline>409</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>725</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Tx_Cfg.h_93</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Tx_Cfg.h</sourcefile>
      <sourceline>93</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>726</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Tx_Cfg.h_94</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Tx_Cfg.h</sourcefile>
      <sourceline>94</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>627</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>727</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Tx_Cfg.h_331</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Tx_Cfg.h</sourcefile>
      <sourceline>331</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00013</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>616</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>728</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Tx_Cfg.h_349</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Tx_Cfg.h</sourcefile>
      <sourceline>349</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>284</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>285</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>729</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Tx_Cfg.h_378</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Tx_Cfg.h</sourcefile>
      <sourceline>378</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>283</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>730</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Tx_Cfg.h_413</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Tx_Cfg.h</sourcefile>
      <sourceline>413</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>286</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>287</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>731</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Types.h_403</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Types.h</sourcefile>
      <sourceline>403</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>656</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>732</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Types.h_441</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Types.h</sourcefile>
      <sourceline>441</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>733</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Types.h_608</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Types.h</sourcefile>
      <sourceline>608</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>657</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>734</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Types.h_646</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Types.h</sourcefile>
      <sourceline>646</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00225</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>735</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SecOC_Types.h_682</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/include/SecOC_Types.h</sourcefile>
      <sourceline>682</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00014</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>617</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>736</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/src/SecOC_Rx_Cfg.c_526</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/src/SecOC_Rx_Cfg.c</sourcefile>
      <sourceline>526</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>737</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/src/SecOC_Tx_Cfg.c_386</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/src/SecOC_Tx_Cfg.c</sourcefile>
      <sourceline>386</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00276</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>738</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/SecOC_Tx_Cfg.c_395</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate/src/SecOC_Tx_Cfg.c</sourcefile>
      <sourceline>395</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>739</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/SecOC.h_10</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>10</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.RxTx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>673</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>740</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SecOC.h_150</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>150</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>741</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SecOC.h_164</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>164</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>742</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SecOC.h_181</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>181</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>743</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SecOC.h_198</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>198</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>744</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SecOC.h_256</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>256</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>745</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SecOC.h_286</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>286</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>746</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SecOC.h_311</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>311</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00125</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>747</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SecOC.h_331</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>331</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>748</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SecOC.h_348</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>348</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00124</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>749</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SecOC.h_367</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>367</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>750</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SecOC.h_386</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>386</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>751</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SecOC.h_405</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>405</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>752</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SecOC.h_460</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>460</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>753</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SecOC.h_477</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>477</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00127</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>754</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SecOC.h_497</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>497</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>755</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SecOC.h_563</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC.h</sourcefile>
      <sourceline>563</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>756</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/SecOC_Rx.h_174</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC_Rx.h</sourcefile>
      <sourceline>174</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>635</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>757</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/SecOC_Rx_Int.h_203</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC_Rx_Int.h</sourcefile>
      <sourceline>203</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.EB.Rx.SWS_SecOC_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>669</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>758</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/SecOC_Tx.h_166</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/include/SecOC_Tx.h</sourcefile>
      <sourceline>166</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>624</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>759</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/SecOC.c_331</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>331</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>760</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_340</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>340</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.PB.Impl.PbCfgM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>645</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>761</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_376</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>376</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>762</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_384</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>384</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>763</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_390</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>390</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>764</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_396</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>396</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>765</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_399</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>399</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>766</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_409</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>409</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>767</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_462</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>462</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>768</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_474</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>474</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>769</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_483</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>483</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00313</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>770</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_524</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>524</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>602</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>771</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_526</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>526</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00252</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>772</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_539</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>539</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>773</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_541</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>541</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>774</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_556</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>556</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>775</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_567</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>567</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>776</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_595</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>595</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>777</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_610</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>610</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>666</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>778</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_617</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>617</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>779</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_639</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>639</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00127</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>780</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_697</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>697</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>781</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_703</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>703</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00068</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>782</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_724</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>724</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>783</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_750</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>750</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>784</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_778</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>778</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>785</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_811</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>811</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>786</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_841</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>841</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>787</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_926</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>926</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>788</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_933</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>933</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>789</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_959</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>959</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>790</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_983</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>983</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>791</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_998</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>998</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>792</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1023</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1023</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>793</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1024</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1024</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.Tx.SWS_SecOC_00074</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00138_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>794</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1030</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1030</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>795</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1031</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1031</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.Tx.SWS_SecOC_00074</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00138_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>796</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1059</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1059</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Tx.SWS_SecOC_00074</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00138_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>797</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1090</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1090</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>798</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1102</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1102</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>799</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1115</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1115</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>800</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1127</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1127</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00181</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>801</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1176</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1176</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>802</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1191</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1191</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>803</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1217</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1217</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>804</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1233</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1233</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>805</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1246</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1246</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>806</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1307</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1307</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>807</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1317</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1317</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>808</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1320</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1320</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>809</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1336</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1336</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>604</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>810</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1338</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1338</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>811</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1352</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1352</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00125</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>812</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1361</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1361</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00084</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>813</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1454</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1454</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00087</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>814</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1467</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1467</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>637</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>815</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1469</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1469</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>816</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1481</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1481</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00124</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>817</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1507</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1507</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>818</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1558</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1558</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>819</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1568</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1568</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>820</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1627</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1627</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>637</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>821</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1629</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1629</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>822</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1651</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1651</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>823</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1790</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1790</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>824</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1832</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1832</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>825</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1843</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1843</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>826</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1876</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1876</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>827</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1897</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1897</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>828</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC.c_1907</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC.c</sourcefile>
      <sourceline>1907</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>829</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_426</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>426</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>830</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_484</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>484</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>658</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>660</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>831</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_532</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>532</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>832</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_544</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>544</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00171</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>833</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_551</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>551</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00172</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>834</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_557</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>557</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>835</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_561</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>561</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>637</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>836</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_563</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>563</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>837</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_567</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>567</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>595</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>838</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_614</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>614</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>839</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_646</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>646</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>607</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>840</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_818</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>818</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>841</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_945</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>945</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>635</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>842</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_951</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>951</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00085</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>843</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_956</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>956</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>595</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>844</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_981</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>981</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>845</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1017</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1017</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00265</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>846</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1054</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1054</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>847</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1078</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1078</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00046_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00046_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>629</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>848</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1092</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1092</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00311</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00312</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>849</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1115</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1115</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>850</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1170</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1170</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>851</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1236</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1236</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>595</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>852</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1244</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1244</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00079</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>853</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1252</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1252</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.SWS_SecOC_EB_RxTx_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>675</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>854</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1266</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1266</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00079</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>855</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1293</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1293</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00151</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>856</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1318</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1318</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>857</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1333</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1333</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>858</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1342</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1342</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>595</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>859</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1389</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1389</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>860</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1398</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1398</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>861</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1411</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1411</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>862</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1434</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1434</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>663</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>863</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1449</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1449</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00242</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>864</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1463</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1463</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00081</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>865</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1476</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1476</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>866</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1478</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1478</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>867</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1499</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1499</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>868</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1510</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1510</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>869</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1512</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1512</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>870</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1536</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1536</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>871</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1546</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1546</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00087</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>872</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1547</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1547</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>873</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1561</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1561</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>874</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1595</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1595</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>875</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1602</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1602</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>876</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1603</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1603</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00138_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>877</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1604</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1604</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>878</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1627</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1627</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00081</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>879</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1637</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1637</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00207</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>880</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1645</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1645</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00087</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>881</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1657</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1657</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>882</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1689</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1689</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>883</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1696</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1696</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00245</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>884</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1697</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1697</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00247</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>885</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1714</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1714</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>886</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1715</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1715</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>887</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1716</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1716</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00246</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>888</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1750</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1750</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00236</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>889</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1751</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1751</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00236_BUSY</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>890</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1754</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1754</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>891</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1760</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1760</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>892</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1765</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1765</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>663</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>893</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1769</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1769</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>894</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1781</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1781</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>895</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1784</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1784</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>896</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1795</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1795</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00248_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>897</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1796</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1796</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00256</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>898</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1804</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1804</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>899</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1808</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1808</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00087</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>900</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1809</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1809</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>901</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1832</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1832</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>902</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1848</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1848</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>903</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1902</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1902</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>904</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1908</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1908</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR21-11.EB.Rx.SWS_SecOC_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>669</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>905</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1920</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1920</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>906</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1925</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1925</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>907</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1930</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1930</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>908</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1937</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1937</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>909</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_1954</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>1954</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>910</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2003</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2003</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>911</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2153</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2153</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>912</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2164</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2164</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>913</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2168</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2168</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00314</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>914</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2182</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2182</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00314</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>915</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2207</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2207</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>916</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2218</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2218</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>917</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2226</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2226</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00314</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>918</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2243</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2243</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00314</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>919</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2282</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2282</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00009</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>612</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>920</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2306</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2306</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>921</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2312</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2312</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>922</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2316</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2316</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>605</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>923</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2323</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2323</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>605</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>924</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2434</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2434</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>925</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2440</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2440</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00245</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>926</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2441</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2441</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00247</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>927</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2458</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2458</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>928</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2459</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2459</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>929</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2460</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2460</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00246</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>930</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2509</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2509</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>931</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2516</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2516</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>932</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2522</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2522</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00236</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>933</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2523</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2523</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00236_BUSY</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>934</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2526</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2526</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>935</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2527</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2527</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>936</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2534</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2534</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>937</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2553</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2553</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>938</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2557</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2557</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>939</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2587</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2587</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00248_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>940</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2588</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2588</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00256</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>941</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2596</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2596</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>942</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2600</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2600</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>943</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2602</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2602</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>944</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2634</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2634</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>945</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2680</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2680</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>606</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>946</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2718</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2718</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>606</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>947</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2818</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2818</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>607</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>948</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2849</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2849</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>949</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2867</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2867</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>950</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Rx.c_2884</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Rx.c</sourcefile>
      <sourceline>2884</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>951</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_319</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>319</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>952</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_355</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>355</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>659</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>661</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>953</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_404</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>404</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>628</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>954</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_415</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>415</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00176</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>955</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_422</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>422</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>956</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_428</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>428</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>957</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_432</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>432</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>958</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_434</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>434</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>959</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_441</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>441</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>960</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_490</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>490</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>961</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_550</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>550</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00069</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>962</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_597</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>597</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>963</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_621</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>621</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00034_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00034_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>629</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>964</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_636</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>636</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00311</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00312</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>965</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_662</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>662</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>966</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_665</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>665</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>967</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_689</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>689</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>968</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_692</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>692</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>969</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_694</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>694</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>603</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>970</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_715</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>715</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>971</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_721</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>721</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00222</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>972</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_722</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>722</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>973</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_738</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>738</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>974</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_739</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>739</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>975</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_777</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>777</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>976</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_784</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>784</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>977</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_791</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>791</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>978</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_800</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>800</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.Tx.SWS_SecOC_00155</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>671</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>979</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_838</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>838</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>980</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_889</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>889</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>981</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_890</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>890</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>982</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_906</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>906</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>983</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_907</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>907</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>984</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_935</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>935</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>985</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_948</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>948</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>986</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_965</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>965</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>987</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_971</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>971</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>988</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_989</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>989</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>989</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1009</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1009</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>990</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1028</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1028</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>991</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1039</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1039</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00269</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>992</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1079</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1079</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>993</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1097</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1097</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00062</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00067</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>994</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1115</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1115</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>286</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>287</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>995</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1116</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1116</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>288</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>996</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1125</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1125</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>997</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1126</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1126</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.Tx.SWS_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>672</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>998</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1137</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1137</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00075</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>84</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>999</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1143</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1143</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>599</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1000</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1154</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1154</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00069</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1001</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1176</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1176</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>601</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1002</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1206</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1206</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1003</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1226</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1226</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1004</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1229</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1229</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1005</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1238</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1238</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1006</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1246</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1246</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1007</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1259</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1259</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.Tx.SWS_SecOC_00155</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>671</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1008</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1260</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1260</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1009</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1267</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1267</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>620</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1010</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1312</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1312</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1011</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1334</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1334</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1012</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1415</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1415</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1013</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1426</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1426</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1014</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1433</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1433</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1015</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1455</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1455</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00269</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1016</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1486</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1486</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00010</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>613</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1017</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1531</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1531</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1018</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1555</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1555</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1019</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1585</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1585</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1020</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1743</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1743</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00013</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>616</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1021</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SecOC_Tx.c_1757</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/src/SecOC_Tx.c</sourcefile>
      <sourceline>1757</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00013</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>616</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1022</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_543</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java</sourcefile>
      <sourceline>543</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1023</internalId></specobject>
    <specobject>
      <id>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_563</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java</sourcefile>
      <sourceline>563</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>648</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1024</internalId></specobject>
    <specobject>
      <id>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_579</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java</sourcefile>
      <sourceline>579</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>648</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1025</internalId></specobject>
    <specobject>
      <id>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_585</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java</sourcefile>
      <sourceline>585</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>648</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1026</internalId></specobject>
    <specobject>
      <id>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_601</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java</sourcefile>
      <sourceline>601</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>648</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1027</internalId></specobject>
    <specobject>
      <id>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_610</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java</sourcefile>
      <sourceline>610</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1028</internalId></specobject>
    <specobject>
      <id>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_651</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java</sourcefile>
      <sourceline>651</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>649</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1029</internalId></specobject>
    <specobject>
      <id>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_668</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java</sourcefile>
      <sourceline>668</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>649</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1030</internalId></specobject>
    <specobject>
      <id>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_674</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java</sourcefile>
      <sourceline>674</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>649</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1031</internalId></specobject>
    <specobject>
      <id>src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java_698</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/plugin.SecOCExt.Autosar/Java/eb/tresos/secoc/xpath/XPathFunctions.java</sourcefile>
      <sourceline>698</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>649</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1032</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_17</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>17</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1033</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_83</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>83</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1034</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_86</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>86</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1035</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_135</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>135</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1036</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_162</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>162</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1037</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_193</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>193</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1038</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_249</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>249</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00051</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1039</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_311</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>311</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1040</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_348</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>348</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00011</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>614</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1041</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_385</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>385</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00099</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1042</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_421</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>421</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1043</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_478</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>478</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.ECUC_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>591</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1044</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_480</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>480</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00010</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>630</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1045</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_606</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>606</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>594</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1046</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_630</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>630</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>640</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1047</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_657</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>657</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.ECUC_SecOC_EB_RxTx_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>592</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1048</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_689</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>689</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>642</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1049</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_717</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>717</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1050</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_722</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>722</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>662</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1051</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_770</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>770</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>608</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1052</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_800</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>800</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>609</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1053</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_829</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>829</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>619</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1054</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_867</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>867</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>629</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1055</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_903</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>903</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1056</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_942</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>942</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1057</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_970</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>970</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>654</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1058</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1006</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1006</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>677</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1059</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1050</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1050</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1060</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1071</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1071</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1061</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1105</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1105</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1062</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1110</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1110</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.RxTx.SWS_SecOC_00147</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>676</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1063</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1118</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1118</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1064</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1158</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1158</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1065</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1202</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1202</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00095</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1066</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1232</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1232</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1067</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1281</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1281</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1068</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1313</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1313</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1069</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1356</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1356</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1070</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1408</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1408</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.ECUC_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>664</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1071</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1442</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1442</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1072</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1474</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1474</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1073</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1510</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1510</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1074</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1556</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1556</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1075</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1598</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1598</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1076</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1651</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1651</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1077</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1682</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1682</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1078</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1716</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1716</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00081</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1079</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1756</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1756</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1080</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1795</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1795</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_CONSTR_00265</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1081</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1803</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1803</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1082</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1881</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1881</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>610</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1083</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1917</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1917</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>631</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1084</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1949</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1949</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>632</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1085</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1954</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1954</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>633</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1086</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1968</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1968</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1087</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_1999</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>1999</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00069</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1088</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2039</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2039</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00093_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1089</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2072</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2072</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1090</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2103</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2103</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00092_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1091</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2131</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2131</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1092</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2161</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2161</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00067</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1093</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2181</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2181</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00092_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1094</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2209</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2209</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>238</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1095</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2249</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2249</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00093_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1096</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2282</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2282</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00062</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1097</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2311</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2311</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1098</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2338</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2338</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1099</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2383</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2383</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1100</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2412</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2412</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1101</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2439</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2439</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00074</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1102</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2471</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2471</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1103</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2498</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2498</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1104</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2528</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2528</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>277</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1105</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2564</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2564</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1106</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2594</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2594</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00090</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1107</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2625</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2625</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1108</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2643</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2643</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1109</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2678</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2678</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1110</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2718</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2718</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00045</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1111</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2779</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2779</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1112</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2781</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2781</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.RxTx.SWS_SecOC_00147</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>676</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1113</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2793</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2793</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1114</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2833</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2833</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1115</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2871</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2871</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1116</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2901</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2901</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1117</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2950</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2950</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1118</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_2982</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>2982</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1119</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3026</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3026</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1120</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3078</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3078</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.ECUC_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>664</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1121</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3112</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3112</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.ECUC_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>665</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1122</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3146</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3146</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1123</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3177</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3177</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00012</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>615</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1124</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3225</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3225</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1125</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3274</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3274</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00084</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1126</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3303</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3303</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1127</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3344</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3344</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1128</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3412</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3412</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>600</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1129</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3451</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3451</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>611</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1130</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3484</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3484</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>621</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1131</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3516</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3516</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>622</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1132</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3530</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3530</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1133</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3564</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3564</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1134</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3604</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3604</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00093_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1135</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3637</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3637</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1136</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3667</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3667</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1137</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3696</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3696</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1138</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3714</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3714</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1139</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3755</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3755</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00093_4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1140</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3788</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3788</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1141</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3818</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3818</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>267</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1142</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3845</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3845</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1143</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3890</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3890</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>269</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1144</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3920</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3920</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>270</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1145</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3947</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3947</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00074</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1146</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_3979</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>3979</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1147</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_4006</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>4006</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1148</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_4036</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>4036</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1149</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_4071</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>4071</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>275</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1150</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_4101</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>4101</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00087</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>276</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1151</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_4132</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>4132</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1152</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_4148</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>4148</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1153</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_4183</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>4183</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1154</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_4220</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>4220</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1155</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_4257</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>4257</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1156</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_4280</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>4280</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1157</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_4284</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>4284</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1158</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_4313</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>4313</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1159</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_4344</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>4344</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1160</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_4365</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>4365</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1161</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_4369</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>4369</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1162</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SecOC.xdm.m4_4398</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/config/SecOC.xdm.m4</sourcefile>
      <sourceline>4398</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1163</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_Bswmd.arxml.m4_154</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_Bswmd.arxml.m4</sourcefile>
      <sourceline>154</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00173</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1164</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_Bswmd.arxml.m4_162</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_Bswmd.arxml.m4</sourcefile>
      <sourceline>162</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1165</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_13</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4</sourcefile>
      <sourceline>13</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1166</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_159</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4</sourcefile>
      <sourceline>159</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1167</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_168</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4</sourcefile>
      <sourceline>168</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>593</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1168</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_176</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4</sourcefile>
      <sourceline>176</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1169</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_185</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4</sourcefile>
      <sourceline>185</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>593</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1170</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_192</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4</sourcefile>
      <sourceline>192</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00160</linksto>
          <dstversion>4</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00160</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1171</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_254</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4</sourcefile>
      <sourceline>254</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00014</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>617</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1172</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_321</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4</sourcefile>
      <sourceline>321</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1173</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_350</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4</sourcefile>
      <sourceline>350</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00991</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1174</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4_370</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_Types.arxml.m4</sourcefile>
      <sourceline>370</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1175</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_18</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4</sourcefile>
      <sourceline>18</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00142</linksto>
          <dstversion>4</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00142</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1176</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_60</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4</sourcefile>
      <sourceline>60</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1177</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_67</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4</sourcefile>
      <sourceline>67</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1178</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_110</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4</sourcefile>
      <sourceline>110</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1179</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_178</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4</sourcefile>
      <sourceline>178</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00148</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1180</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_192</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4</sourcefile>
      <sourceline>192</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1181</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_228</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4</sourcefile>
      <sourceline>228</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1182</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_235</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4</sourcefile>
      <sourceline>235</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1183</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_263</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4</sourcefile>
      <sourceline>263</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1184</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_300</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4</sourcefile>
      <sourceline>300</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1185</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_330</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4</sourcefile>
      <sourceline>330</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>618</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1186</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4_344</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_interface.arxml.m4</sourcefile>
      <sourceline>344</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1187</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4_21</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91001_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1188</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4_27</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1189</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4_33</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00148</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1190</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4_40</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1191</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4_57</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4</sourcefile>
      <sourceline>57</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91001_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1192</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4_64</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_swcd/swcd/SecOC_swc_internal.arxml.m4</sourcefile>
      <sourceline>64</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1193</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_var/xgen/SecOC.xgen_59</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_var/xgen/SecOC.xgen</sourcefile>
      <sourceline>59</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.PB.Impl.PbcfgM.Relocatable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>643</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1194</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/SecOC.xgen_65</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_var/xgen/SecOC.xgen</sourcefile>
      <sourceline>65</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.PB.Impl.NoPbcfgM.Relocatable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>644</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1195</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/SecOC.xgen_81</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_var/xgen/SecOC.xgen</sourcefile>
      <sourceline>81</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1196</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/SecOC.xgen_86</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_var/xgen/SecOC.xgen</sourcefile>
      <sourceline>86</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.PB.Impl.Hash</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>641</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1197</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/SecOC.xgen_186</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_var/xgen/SecOC.xgen</sourcefile>
      <sourceline>186</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1198</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/SecOC.xgen_212</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/src/Autosar/generate_var/xgen/SecOC.xgen</sourcefile>
      <sourceline>212</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00146</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1199</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SecOC_GenTest_BSWMD</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/common_req/SecOC_BswmdDbg_Generic_Test.h</sourcefile>
      <sourceline>1</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the BSWMD file matches the instrumented source code and all
    preprocessor macros in the Trace.h file.

    Following checks are executed:
      - ENTRY and Exit macros are balanced within Trace.h file
      - Apis descriped in BSWMD file are in balance with the ones in Trace.h file
      - ENTRY macro does match exit macro in Trace.h file
      - ENTRY macro does match exit macro in source code
      - BswModuleDescriptions does match BswModuleEntrys
      - ENTRY macro within Trace.h does match BSWMD
      - ENTRY macro within Trace.h does match source macro
      - STATE macro within Trace.h does match source macro
      - STATE macro within Trace.h does match source macro
      - GRP macro within Trace.h does match source macro
      - GRP macro within Trace.h does match source macro
      - #ifndef for macro ENTRY does work within Trace.h
      - #ifndef for macro EXIT does work within Trace.h
      - #ifndef for macro STATE does work within Trace.h
      - #ifndef for macro GRP does work within Trace.h
      - Internal functions should not be in the PROVIDED-ENTRYS section in BSWMD file
      - External functions should be in the PROVIDED-ENTRYS section in BSWMD file
      - Functions should be only once in the PROVIDED-ENTRYS section in BSWMD file
      - Functions should be only once in the BSW-MODULE-ENTRY section in BSWMD file
      - Macros should be only once in the Trace.h header file
  
Test Object: None.
Test Precondition: None.
Test Execution: None.
Test Input: None.
Test Output: 
    The file output\test\2_Script_Based_Test\resultlog.txt reports all errors.
    In case this file is empty the test is passed.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.BSWMDInstrumentation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>678</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1200</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SecOC_Test_IsValidConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/common_req/SecOC_PbcfgM_Main_Impl_Test.c</sourcefile>
      <sourceline>71</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the function SecOC_IsValidConfig() is implemented as specified.
  
Test Object: 
    SecOC_IsValidConfig()
  
Test Precondition: 
    The SecOC module is not initialized.
  
Test Execution: 
    01: Call the function SecOC_IsValidConfig() with an NULL_PTR.
    02: VP:
        The function must have returned with E_NOT_OK.
    03: Create an invalid configuration regarding the endianness and alignment.
    04: Call the function SecOC_IsValidConfig() with this invalid configuration.
    05: VP(SecOC.EB.PBCFGM106):
        The function must have returned with E_NOT_OK.
    The following 3 steps are only executed if the module has a link-time configuration:
        06: Create an invalid configuration regarding the link time configuration.
        07: Call the function SecOC_IsValidConfig() with this invalid configuration.
        08: VP(SecOC.EB.PBCFGM105):
                The function must have returned with E_NOT_OK.
    09: Create an invalid configuration regarding the compile time configuration.
    10: Call the function SecOC_IsValidConfig() with this invalid configuration.
    11: VP(SecOC.EB.PBCFGM104):
        The function must have returned with E_NOT_OK.
    12: Create an invalid configuration regarding the published information configuration.
    13: Call the function SecOC_IsValidConfig() with this invalid configuration.
    14: VP(SecOC.EB.PBCFGM104_1):
        The function must have returned with E_NOT_OK.
    15: Call the function SecOC_IsValidConfig() with a valid configuration.
    16: VP:
        The function must have returned with E_OK.
    17: VP(SecOC.EB.PBCFGM107):
        Check if SECOC_PBCFGM_SUPPORT_ENABLED is set to STD_ON.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.PBCFGM101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>679</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.PBCFGM102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.PBCFGM104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>681</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.PBCFGM104_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>682</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.PBCFGM105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>683</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.PBCFGM106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.PBCFGM107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>685</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1201</internalId></specobject>
    <specobject>
      <id>SecOC_Test_VerifyInitWithPcfgM</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/common_req/SecOC_PbcfgM_Main_Impl_Test.c</sourcefile>
      <sourceline>225</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the SecOC can be initialized via the PbcfgM.
  
Test Object: 
    SecOC_IsValidConfig()
  
Test Precondition: 
    The SecOC module must not have been initialized.
  
Test Execution: 
    01: Create an invalid configuration regarding the endianness and alignment.
    02: Call the function SecOC_Init() with this invalid configuration.
    03: VP:
        A Det call must have been performed correctly.
    04: Create an invalid configuration regarding the compile time configuration.
    05: Call the function SecOC_Init() with this invalid configuration.
    06: VP:
        A Det call must have been performed correctly.
    The following 3 steps are only executed if the module has a link-time configuration:
        07: Create an invalid configuration regarding the link time configuration.
        08: Call the function SecOC_Init() with this invalid configuration.
        09: VP:
            A Det call must have been performed correctly.
    10: Create an invalid configuration regarding the published information configuration.
    11: Call the function SecOC_Init() with this invalid configuration.
    12: VP:
        A Det call must have been performed correctly.
    13: Initialize the PbcfgM_GetConfig() stub that way that it can return a valid function.
    14: Call the function SecOC_Init() with a null pointer.
    15: VP:
        The function PbcfgM_GetConfig() must have been called once.
    16: VP:
        No Det call must have been performed.
    17: VP:
        The module internal configuration pointer SecOC_RootPtr must equal
        the pointer supplied to the initialization function
    18: PbcfgM_GetConfig shall return E_NOT_OK.
        set the configuration pointer which is returned to NULL_PTR
    19: Call SecOC_Init with NULL_PTR.
    20: VP(SecOC.EB.PBCFGM110):
        Check if Det error is reported.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.PBCFGM110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>687</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1202</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SecOC_Test_PBcfgM_Off</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/common_req/SecOC_PbcfgM_Off_Compile_Test.c</sourcefile>
      <sourceline>26</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      Verify that if PbcfgM support is disabled then SecOC_PBCfg.c shall define
      TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME.
      SECOC_PBCFGM_SUPPORT_ENABLED shall be set to STD_OFF.
      SECOC_RELOCATABLE_CFG_ENABLE shall be set to STD_OFF.
    
Test Object: None.
Test Precondition: 
      - PbcfgM configuration does not refer to module SecOC (or no config exists)
      - Include SecOC_PBcfg.c only for step 01 and 02.
      - Include SecOC_Cfg.h for step 03.
    
Test Execution: 
        01: VP(SecOC.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME exists.
        02: VP(SecOC.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME has the value
            SecOC_ConfigLayoutType and SECOC_CONFIG_NAME respectively.
        03: VP (SecOC.EB.PBCFGM107):
            Verify that SECOC_PBCFGM_SUPPORT_ENABLED is set to STD_OFF.
        04: VP(SecOC.EB.PBCFGM108, SecOC.EB.RelocatablePBCfg):
            SECOC_RELOCATABLE_CFG_ENABLE shall be STD_OFF
    
Test Input: 
    
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.PbcfgM_General_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>690</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.PBCFGM107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>685</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>642</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1203</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SecOC_Test_PBcfgM_On</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/common_req/SecOC_PbcfgM_On_Compile_Test.c</sourcefile>
      <sourceline>24</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      1.)
      Verify that SECOC_RELOCATABLE_CFG_ENABLE is defined
      in the header file SecOC_Cfg.h.
      2.)
      Verify that if PbcfgM support is enabled then SecOC_PBCfg.c shall NOT define
      TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME.
    
Test Object: None.
Test Precondition: 
        - SECOC_PBCFGM_SUPPORT_ENABLED = STD_ON
    
Test Execution: 
        ------------------------ 1.) ---------------------
        01: VP (SecOC.EB.PbcfgM_General_3,
                SecOC.EB.PBCFGM108,
                SecOC.EB.RelocatablePBCfg):
            Verify that SECOC_RELOCATABLE_CFG_ENABLE is set to STD_ON.
        ------------------------ 2.) ---------------------
        02: Include SecOC_PBcfg.c.
        03: VP(SecOC.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME exist.
    
Test Input: 
        None.
    
Test Output: 
        Binary file.
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.PbcfgM_General_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.PbcfgM_General_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>690</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>642</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1204</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SecOC_VerifyCodeStub</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/build/reqm/common_req/SecOC_VerifyStub_testspec.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the code stub of the module is consistent with the
    implementation.
  
Test Object: 
    Relocatable post-build configuration macros generation.
  
Test Precondition: 
    Permutation [VerifyStub == true]:
      - Unit test contains its own code stub
      - Module is excluded from generation and compilation
    Permutation [VerifyStub == false]:
      - unit test excludes its own code stub
  
Test Execution: 
    01: Invoke all module APIs
    02: VP(SecOC.EB.Interface.Consistency):
        Unit test compiles (implicitly tested)
  
Test Input: 
  
Test Output: 
    Test is correctly generated and compiled.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Interface.Consistency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1205</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CMP_PBCFG_1VARIANT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Compile/IN/SecOC_Cmp_PBcfg_1Variant/source/application/Tests.c</sourcefile>
      <sourceline>44</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Compile test for post build variant SecOC (1 variant configured).
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
            cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
            every PDU to process using the C function defined by the configuration parameter
            SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode. &lt;/listitem&gt;
      &lt;listitem&gt;Two post build variants are configured. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.RxTx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>673</internalId></provcov>
        <provcov>
          <linksto>SecOC.PB.Impl.PbCfgM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>645</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1206</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CMP_PBCFG_2VARIANTS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Compile/IN/SecOC_Cmp_PBcfg_2Variants/source/application/Tests.c</sourcefile>
      <sourceline>44</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Compile test for post build variant SecOC (2 variants configured).
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
            cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
            every PDU to process using the C function defined by the configuration parameter
            SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode. &lt;/listitem&gt;
      &lt;listitem&gt;Two post build variants are configured. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.RxTx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>673</internalId></provcov>
        <provcov>
          <linksto>SecOC.PB.Impl.PbCfgM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>645</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1207</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CMP_RX</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Compile/IN/SecOC_Cmp_Rx/source/application/Tests.c.m4</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Compile test for SecOC for different configuration combinations.
    This test has the following parameters permuted:
    1) Csm operating mode (CRYPTO_PROCESSING_ASYNC or CRYPTO_PROCESSING_SYNC)
    2) TP PduR APIs (SECOC_IFPDU or SECOC_TPPDU)
    3) Immediate PDU processing (enable or disable)
    4) Override status with data ID (enable or disable)
    4) Ignore verification result (enable or disable)
    5) Received data packing type (SecOCRxSecuredPdu or SecOCRxSecuredPduCollection)
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;CsmProcessingMode: CRYPTO_PROCESSING_ASYNC or CRYPTO_PROCESSING_SYNC&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType: SECOC_TPPDU or SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxSyncPduProcessing: false or true&lt;/listitem&gt;
      &lt;listitem&gt;SecOCOverrideStatusWithDataId: false or true&lt;/listitem&gt;
      &lt;listitem&gt;SecOCIgnoreVerificationResult: false or true&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer: SecOCRxSecuredPdu or SecOCRxSecuredPduCollection&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.RxTx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>673</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00124</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00125</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1208</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CMP_RX_PDU_VERIF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Compile/IN/SecOC_Cmp_RxPduVerification/source/application/Tests.c.m4</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Compile test for SecOC for different configuration combinations.
    This test has the following parameters permuted:
    1) Received data packing type (SecOCRxSecuredPdu or SecOCRxSecuredPduCollection)
    2) Secured Rx PDU verification (true or false)
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer: SecOCRxSecuredPdu or SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredRxPduVerification: true or false&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1209</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CMP_RXTX</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Compile/IN/SecOC_Cmp_RxTx/source/application/Tests.c</sourcefile>
      <sourceline>48</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Compile test for SecOC.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
            cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
            every PDU to process using the C function defined by the configuration parameter
            SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.RxTx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>673</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00124</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00125</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.PostBuild_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1210</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CMP_RXTX_CDDFRESHNESSINTERFACES</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Compile/IN/SecOC_Cmp_RxTx_CddFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>48</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Compile test for SecOC. SecOCQueryFreshnessValue configured with CFUNC.
  
Test Description: 
    Compile test for SecOC.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.ECUC_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>664</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.ECUC_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>665</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>283</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1211</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_RXTX_MultipleMainFunc</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Compile/IN/SecOC_Cmp_RxTx_MultipleMainFunc/source/application/Tests.c</sourcefile>
      <sourceline>47</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Compile test to check the correct existence of partition-specific MainFunctions
    and memory sections in SecOC.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
            cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
            every PDU to process using the C function defined by the configuration parameter
            SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00171</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00176</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1212</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_RXTX_MultipleMainFuncBswmd</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Compile/IN/SecOC_Cmp_RxTx_MultipleMainFunc_Bswmd/source/application/Tests.c</sourcefile>
      <sourceline>47</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Compile test to check the correct existence of partition-specific MainFunctions
    and memory sections in SecOC.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
            cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
            every PDU to process using the C function defined by the configuration parameter
            SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00171</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00176</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1213</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_RXTX_MultipleMainFunc_RTE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Compile/IN/SecOC_Cmp_RxTx_MultipleMainFunc_Rte/source/application/Tests.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Compile test to check the correct existence of partition-specific MainFunctions
    and memory sections in SecOC.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
            cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
            every PDU to process using the C function defined by the configuration parameter
            SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00171</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00176</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1214</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CMP_RXTX_NOVERSIONINFOAPI_NOCRYPTOBITLEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Compile/IN/SecOC_Cmp_RxTx_NoVersionInfoApi_NoCryptoBitLen/source/application/Tests.c</sourcefile>
      <sourceline>47</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Compile test for SecOC.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is disabled. The length of the authenticator is passed to the
                cryptographic routines in bytes. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.RxTx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>673</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00124</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00125</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1215</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CMP_RXTX_RTE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Compile/IN/SecOC_Cmp_RxTx_Rte/source/application/Tests.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Compile test for SecOC with activated Rte interfaces and RX PDUs.
Test Description: 
    Compile test for SecOC with some interfaces using RTE. In SecOC, the provided
    RTE ports are global, i.e. they don't depend on a particular I-PDU.
  
Test Object: 
    SecOC_VerifyStatusOverride()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00148</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00142</linksto>
          <dstversion>4</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00010</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>630</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1216</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CMP_RXTX_RTE_DATAIDLEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Compile/IN/SecOC_Cmp_RxTx_Rte_DataIDLen/source/application/Tests.c.m4</sourcefile>
      <sourceline>56</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Compile test for SecOC with activated Rte and Pdu Data ID length set to 8/16/32 bits.
  
Test Description: 
    Compile test for SecOC with activated Rte and Pdu Data ID length set to 8/16/32 bits.
    In SecOC, the provided RTE ports are global, i.e. they don't depend on a particular I-PDU.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
      &lt;listitem&gt;SecOCDataIdLength = UINT8/UINT16/UINT32&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>629</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1217</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CMP_RXTX_RTE_NOFV</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Compile/IN/SecOC_Cmp_RxTx_Rte_NoFv/source/application/Tests.c</sourcefile>
      <sourceline>43</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Compile test where no freshness value APIs are used
Test Description: 
    Compile test for SecOC which is configured not to query the freshness value,
    no callout functions shall be invoked to get the freshness.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC doesn't query the freshness value. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1218</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CMP_RXTX_SWCFRESHNESSINTERFACES</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Compile/IN/SecOC_Cmp_RxTx_SwcFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>43</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Compile test for SecOC with activated Rte and SecOCQueryFreshnessValue configured with RTE.
  
Test Description: 
    Compile test for SecOC which is configured that the external freshness is requested through the
    Rte.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1219</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CMP_RXTX_TYPES</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Compile/IN/SecOC_Cmp_RxTx_Types/source/application/Tests.c</sourcefile>
      <sourceline>37</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Compile test for SecOC.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00160</linksto>
          <dstversion>4</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1220</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CMP_TX</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Compile/IN/SecOC_Cmp_Tx/source/application/Tests.c.m4</sourcefile>
      <sourceline>37</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Compile test for SecOC for different configuration combinations.
    This test has the following parameters permuted:
    1) Csm operating mode (CRYPTO_PROCESSING_ASYNC or CRYPTO_PROCESSING_SYNC)
    2) TP PduR APIs (SECOC_IFPDU or SECOC_TPPDU)
    3) Immediate PDU processing (enable or disable)
    4) PduR cancel transmit (enable or disable)
    4) Reauthenticate after trigger transmit (enable or disable)
    5) Received data packing type (SecOCTxSecuredPdu or SecOCTxSecuredPduCollection)
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;CsmProcessingMode: CRYPTO_PROCESSING_ASYNC or CRYPTO_PROCESSING_SYNC&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType: SECOC_TPPDU or SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSyncPduProcessing: false or true&lt;/listitem&gt;
      &lt;listitem&gt;PduRCancelTransmit: false or true&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReAuthenticateAfterTriggerTransmit: false or true&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSecuredPduLayer: SecOCTxSecuredPdu or SecOCTxSecuredPduCollection&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.RxTx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>673</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1221</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_PBCFG_VARIANTS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_PBcfg_Variants/source/application/Tests.c</sourcefile>
      <sourceline>125</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module when multiple variants are used
    during the authentication and verification procedures for each variant configured.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;2 Post build variants configured &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module with the first post build variant configured.
    02. Execute the authentication and verification procedures one after the other to check
        that buffer allocation for storing PDUs and internal processing is the right one and
        the SecOC module is handling the execution as expected.
    03. DeInitialize the SecOC module.
    04. Initialize the SecOC module with the second post build variant configured.
    05. Execute the authentication and verification procedures one after the other to check
        that buffer allocation for storing PDUs and internal processing is the right one and
        the SecOC module is handling the execution as expected.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1222</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_CddFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>37</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module during the authenticator build,
    when the query for the freshness value operation returns SECOC_E_BUSY.
  
Test Object: 
    GetRxFreshness via direct function call.
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Authentication build counter and the authentication verify attempt
                counter &gt; 0. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set the GetRxFreshness and the Csm_MacVerify stubs callout functions.
    Run the verification procedure of an secured I-PDU successfully:
      b01. Execute the verification procedure.
      b02. Check that the GetRxFreshness stub was called.
      b03. Check that the Csm_MacVerify stub was called.
      b04. Check that the PduR_SecOCRxIndication stub was called.
      b05. Check that the VerificationStatus was called with
           the expected result (SECOC_VERIFICATIONSUCCESS).
    Run the verification procedure, the GetRxFreshness always returns SECOC_E_BUSY:
      c01. Set the GetRxFreshness stub return value to SECOC_E_BUSY.
      c02. Call the SecOC_RxIndication to hand over the secured I-PDU and
           to indicate the SecOC module to start the verification procedure.
      c03. Call the main function until the maximum authentication build attempts configured
           was reached.
      c04. Check that the GetRxFreshness stub was called until the threshold was reached.
      c05. Check that the Csm_MacVerify stub was not called as the authenticator build failed.
      c06. Check that the VerificationStatus was called with
           the expected result (SECOC_AUTHENTICATIONBUILDFAILURE).
    Run the verification procedure, the first query for the freshness value returns SECOC_E_BUSY:
      d01. Call the SecOC_RxIndication to hand over the secured I-PDU and
           to indicate the SecOC module to start the verification procedure.
      d02. Call the main function until the GetRxFreshness stub was called once.
      d03. Check that the GetRxFreshness stub was called once.
      d04. Check that the Csm_MacVerify stub was not called as the GetRxFreshness returns
           SECOC_E_BUSY and the retry will be triggered on the next main function.
      d05. Set the GetRxFreshness stub return value back to SECOC_E_OK.
      d06. Call the main function to retry the authentication procedure.
      d07. Check that the GetRxFreshness stub was called again.
      d08. Check that the Csm_MacVerify stub was called.
      d09. Check that the PduR_SecOCRxIndication stub was called.
      d10. Check that the VerificationStatus was called with
           the expected result (SECOC_VERIFICATIONSUCCESS).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.ECUC_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>664</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00236</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00247</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00248_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00256</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00250</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>290</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00242</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00236_BUSY</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1223</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_CddFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>140</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module during the authenticator build,
    when the query for the freshness value operation returns SECOC_E_BUSY.
  
Test Object: 
    GetRxFreshness via direct function call.
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Authentication build counter and the authentication verify attempt
                counter &gt; 0. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set the GetRxFreshness and the Csm_MacVerify stubs callout functions.
    Run the verification procedure of an secured I-PDU successfully:
      b01. Execute the verification procedure.
      b02. Check that the GetRxFreshness stub was called.
      b03. Check that the Csm_MacVerify stub was called.
      b04. Check that the PduR_SecOCRxIndication stub was called.
      b05. Check that the VerificationStatus was called with
           the expected result (SECOC_VERIFICATIONSUCCESS).
    Run the verification procedure, the GetRxFreshness returns SECOC_E_NOT_OK:
      c01. Set the GetRxFreshness stub return value to SECOC_E_NOT_OK.
      c02. Call the SecOC_RxIndication to hand over the secured I-PDU and
           to indicate the SecOC module to start the verification procedure.
      c03. Call the main function once start the verification procedure.
      c04. Check that the GetRxFreshness stub was called.
      c05. Check that the Csm_MacVerify stub was not called as the GetRxFreshness returns
           SECOC_E_NOT_OK and the verification procedure ended.
      c06. Check that the VerificationStatus was called with
           the expected result (SECOC_AUTHENTICATIONBUILDFAILURE).
      c07. Set the GetRxFreshness stub return value back to SECOC_E_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.ECUC_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>664</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00236</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00247</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00248_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00256</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00250</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>290</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00242</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00236_BUSY</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1224</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_CddFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>230</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the MAC verification result is E_NOT_OK and
    the query for freshness value operation returns SECOC_E_BUSY.
  
Test Object: 
    GetRxFreshness via direct function call.
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Authentication build counter and the authentication verify attempt
                counter &gt; 0. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set the GetRxFreshness and the Csm_MacVerify stubs callout functions.
    Run the verification procedure of an secured I-PDU successfully:
      b01. Execute the PDU reception procedure.
      b02. Check that the GetRxFreshness stub was called.
      b03. Check that the Csm_MacVerify stub was called.
      b04. Check that the PduR_SecOCTpRxIndication stub was called.
      b05. Check that the VerificationStatus was called with
           the expected result (SECOC_VERIFICATIONSUCCESS).
    Run the verification procedure, when retry attempt is initiated
    the GetRxFreshness returns SECOC_E_BUSY:
      c01. Set the GetRxFreshness stub return value for the second call
           to SECOC_E_BUSY (the retry attempt).
      c02. Set the Csm_MacVerify stub result to E_NOT_OK.
      c03. Execute the PDU reception procedure.
      c04. Call the main function once start the verification procedure.
      c05. Check that the Csm_MacVerify stub was called.
      c06. Check that the GetRxFreshness stub was called twice (second call is the retry attempt).
      c07. Check that the VerificationStatus was called
           with the expected result (SECOC_VERIFICATIONFAILURE).
      c08. Set the GetRxFreshness stub return value back to SECOC_E_OK.
      c09. Set the Csm_MacVerify stub return value back to E_OK.
      c10. Call the main function in order to retry the verification procedure.
      c11. Check that the GetRxFreshness stub was called once.
      c12. Check that the Csm_MacVerify stub was called once.
      c13. Check that the PduR_SecOCTpRxIndication stub was called once.
      c14. Check that the VerificationStatus was called with
           the expected result (SECOC_VERIFICATIONSUCCESS).
    Run the verification procedure, when the retry attempts to obtain the freshness value after
    the MAC verification failed gets the return value SECOC_E_BUSY:
      d01. Set the Csm_MacVerify stub result to E_NOT_OK.
      d02. Execute the PDU reception procedure.
      d03. Call the main function once start the verification procedure.
      d04. Check that the Csm_MacVerify stub was called.
      d05. Check that the GetRxFreshness stub was called twice.
      d06. Check that the VerificationStatus was called with
           the expected result (SECOC_VERIFICATIONFAILURE).
      d07. Set the GetRxFreshness return value to SECOC_E_BUSY.
      d08. Call the main function several times.
      d09. Check that the GetRxFreshness stub was called until the threshold is reached.
      d10. Check that the Csm_MacVerify stub was called only once as the procedure is not passing
           over the query for the freshness value.
      d11. Check that the PduR_SecOCTpRxIndication stub was not called as the verification failed.
      d12. Set the GetRxFreshness return value back to SECOC_E_OK.
      d13. Set the Csm_MacVerify stub result back to E_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.ECUC_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>664</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00236</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00247</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00248_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00256</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00250</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>290</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00242</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00236_BUSY</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1225</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_CddFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>345</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the MAC verification result is E_NOT_OK and
    the query for freshness value operation returns SECOC_E_NOT_OK.
  
Test Object: 
    GetRxFreshness via direct function call.
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Authentication build counter and the authentication verify attempt
                counter &gt; 0. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set the GetRxFreshness and the Csm_MacVerify stubs callout functions.
    Run the verification procedure of an secured I-PDU successfully:
      b01. Execute the verification procedure.
      b02. Check that the GetRxFreshness stub was called.
      b03. Check that the Csm_MacVerify stub was called.
      b04. Check that the PduR_SecOCTpRxIndication stub was called.
      b05. Check that the VerificationStatus was called with
           the expected result (SECOC_VERIFICATIONSUCCESS).
    Run the verification procedure, when retry attempt is initiated
    the GetRxFreshness returns SECOC_E_NOT_OK:
      c01. Set the GetRxFreshness stub return value for the second call
           to SECOC_E_NOT_OK (retry attempt).
      c02. Set the Csm_MacVerify stub result to E_NOT_OK.
      c03. Execute the PDU reception procedure.
      c04. Call the main function once start the verification procedure.
      c05. Check that the Csm_MacVerify stub was called.
      c06. Check that the GetRxFreshness stub was called twice (second call is the retry attempt).
      c07. Check that the VerificationStatus was called with
           the expected result (SECOC_FRESHNESSFAILURE).
      c08. Set the GetRxFreshness stub return value back to E_OK.
      c09. Set the Csm_MacVerify stub result back to E_OK.
      c10. Call the main function several times.
      c11. Check that the GetRxFreshness stub was not called as the verification procedure failed.
      c12. Check that the Csm_MacVerify stub was not called as the verification procedure failed.
      c13. Check that the PduR_SecOCTpRxIndication stub was not called with the result
            E_NOT_OK as the verification failed.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.ECUC_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>664</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00236</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00247</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00248_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00256</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00250</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>290</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00242</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00236_BUSY</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1226</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_06_TP_RX_VER</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_CddFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>442</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the GetRxFreshnessAuthData function.
  
Test Object: 
    GetRxFreshnessAuthData via RTE.
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;Authentic data sent to FvM. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set the Csm_MacVerify stub callout function.
    Run the verification procedure of an secured I-PDU successfully:
      b01. Execute the verification procedure.
      b02. Check that the GetRxFreshnessAuthData stub was called.
      b03. Check that the Csm_MacVerify stub was called.
      b04. Check that the PduR_SecOCTpRxIndication stub was called.
      b05. Check that the VerificationStatus was called with
           the expected result (SECOC_VERIFICATIONSUCCESS).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1227</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_CddFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>495</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module during the authentication procedure,
    when the query for the freshness value operation returns SECOC_E_BUSY.
  
Test Object: 
    GetTxFreshness via direct function call.
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Authentication build counter and the authentication verify attempt
                counter &gt; 0. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set the GetTxFreshness and the Csm_MacGenerate stubs callout functions.
    Run the authentication procedure of an authentic I-PDU successfully:
      b01. Execute the authentication procedure.
      b02. Check that the GetTxFreshness stub was called.
      b03. Check that the Csm_MacGenerate stub was called.
      b04. Check that PduR_SecOCTransmit stub was called.
      b05. Check that SPduTxConfirmation stub was called.
      b06. Call the SecOC_Init to reset the SecOC module for the next test sequence.
    Run the authentication procedure, the query for the freshness value always returns SECOC_E_BUSY:
      c01. Set the GetTxFreshness stub return value to SECOC_E_BUSY.
      c02. Call the SecOC_Transmit to hand over the authentic PDU and
           to indicate the SecOC module to start the authentication procedure.
      c03. Call the main function several times.
      c04. Check that the GetTxFreshness stub was called until the threshold is reached.
      c05. Check that the Csm_MacGenerate stub was not called as the query for
           the freshness value failed.
    Run the authentication procedure, the query for the freshness value initial attempt
    returns SECOC_E_BUSY:
      d01. Call the SecOC_Transmit to hand over the authentic PDU and
           to indicate the SecOC module to start the authentication procedure.
      d02. Call the main function until the GetTxFreshness stub was called once.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was not called as the GetTxFreshness returns
           SECOC_E_BUSY and the retry will be triggered on the next main function.
      d05. Set the GetTxFreshness stub return value back to SECOC_E_OK.
      d06. Call the main function to retry the authentication procedure.
      d07. Check that the GetTxFreshness stub was called again.
      d08. Check that the Csm_MacGenerate stub was called.
      d09. Check that the PduR_SecOCTransmit stub was called.
      d10. Check that SPduTxConfirmation stub was called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.ECUC_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>664</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00222</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00225</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>284</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>285</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>286</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>287</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Tx.SWS_SecOC_00155</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>671</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1228</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_CDDFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_CddFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>594</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module during the authentication procedure,
    when the query for the freshness value operation returns SECOC_E_NOT_OK.
  
Test Object: 
    GetTxFreshness via direct function call.
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Authentication build counter and the authentication verify attempt
                counter &gt; 0 &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set the GetTxFreshness stubs callout functions.
    Run the authentication procedure of an authentic I-PDU successfully:
      b01. Execute the authentication procedure.
      b02. Check that the GetTxFreshness stub was called.
      b03. Check that the Csm_MacGenerate stub was called.
      b04. Check that PduR_SecOCTransmit stub was called.
      b05. Check that SPduTxConfirmation stub was called.
      b06. Call the SecOC_Init to reset the SecOC module for the next test sequence.
    Run the authentication procedure, the query for the freshness value always
    returns SECOC_E_NOT_OK:
      c01. Set the GetTxFreshness stub return value to SECOC_E_NOT_OK.
      c02. Call the SecOC_Transmit to hand over the authentic PDU and
           to indicate the SecOC module to start the authentication procedure.
      c03. Call the main function several times.
      c04. Check that the GetTxFreshness stub was called until the threshold is reached.
      c05. Check that the Csm_MacGenerate stub was not called as the query for
           the freshness value failed.
    Run the authentication procedure, the query for the freshness value initial attempt
    returns SECOC_E_NOT_OK:
      d01. Call the SecOC_Transmit to hand over the authentic PDU and
           to indicate the SecOC module to start the authentication procedure.
      d02. Call the main function until the GetTxFreshness stub was called once.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was not called as the GetTxFreshness returns
           SECOC_E_NOT_OK and the retry will be triggered on the next main function.
      d05. Set the GetTxFreshness stub return value back to SECOC_E_OK.
      d06. Call the main function to retry the authentication procedure.
      d07. Check that the GetTxFreshness stub was called again.
      d08. Check that the Csm_MacGenerate stub was called.
      d09. Check that the PduR_SecOCTransmit stub was called.
      d10. Check that SPduTxConfirmation stub was called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.ECUC_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>664</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00222</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00225</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>284</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>285</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>286</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Tx.SWS_SecOC_00155</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>671</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1229</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_CCDFRESHNESSINTERFACES_14_TP_TX_AUTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_CddFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>693</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the GetTxFreshnessTruncData function.
  
Test Object: 
    GetTxFreshnessTruncData via RTE.
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetTxFreshnessTruncData stub callout function and the freshness value
        provided by the function.
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    05. Call SecOC_Transmit to start the authentication procedure.
    06. Call the main function in order to execute the authentication procedure.
    07. Check that the layout shaping function was called with the correct ID.
    08. Check that the GetTxFreshnessTruncData stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called once.
    14. Check that the provided Secured I-PDU is the expected one.
    15. Call SecOC_TpTxConfirmation to finished the authentication procedure.
    16. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1230</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_RXTX_CLEAR_BUFFERS_13_TP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_Clear_Buffers/source/application/Tests.c</sourcefile>
      <sourceline>77</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Testing the clearing of the Pdu buffers
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    a01: Test initialization
    a02: Check if memory clearing is correctly executed for
         SecOC_TxData[PduId].SecuredPdu.SduDataPtr on error of calling
         ExtFreshness_GetTxFreshness
    a03: Check if memory clearing is correctly executed for
         SecOC_TxData[PduId].SecuredPdu.SduDataPtr on error of calling Csm_MacGenerateStart
    a04: Check if pointer clearing is correctly executed for
         SecOC_TxData[PduId].SecuredPdu.SduDataPtr and SecOC_TxData[PduId].DataToAuthenticator
         after calling SecOC_DeInit()
    a05: Check if pointer clearing is correctly executed for
         SecOC_RxData[PduId].DataToAuthenticator after calling SecOC_DeInit()
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1231</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_MULTIPLE_MAINFUNC_RX_NO_INIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_MultipleMainFunc/source/application/Tests.c</sourcefile>
      <sourceline>174</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Pdu processing according to MainFunction association (Reception)
  
Test Description: 
    This test checks the behaviour of the SecOC module when it wasn't initialized.
  
Test Object: 
    Processing of Pdus associated to separate MainFunctions
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_09_Async is associated to SecOCMainFunctionRx_0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_11 is associated to SecOCMainFunctionRx_2&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_12_Async is associated to SecOCMainFunctionRx_1&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the stubs
    02. Set GetRxFreshness stub callout function
    03. Set Csm_MacVerify stub callout function to TS_Csm_MacVerify_Callout
    04. Prepare the secured I-PDUs that need to be authenticated
    05. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    06. Set PduR stub callout functions
    07. Initialize Pdu payloads and lengths
    08. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module
    09. Call SecOC_CopyRxData function to hand over the secured I-Pdu to the
        SecOC module and check that the operation is performed successfull
    10. Initiate reception of all Pdu
    11. Set freshness value and corresponding length (in bits)
    12. Process SecOCRxPduProcessing_12_Async, pending verification
    13. Check that the GetRxFreshness stub was called once with correct parameters
    14. Process SecOCRxPduProcessing_09_Async, pending verification
    15. Check that the GetRxFreshness stub was not called
    16. Process SecOCRxPduProcessing_12_Async
    17. Process SecOCRxPduProcessing_11
    18. Check that the GetRxFreshness stub was not called
    19. No pending events for associated Pdus
    20. No pending events for associated Pdus
    21. Process SecOCRxPduProcessing_09_Async
    22. Initialize the SecOC module and the stubs
    23. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module
    24. Call SecOC_CopyRxData function to hand over the secured I-Pdu to the
        SecOC module and check that the operation is performed successfully
    25. Initiate reception of all Pdus
    26. Set freshness value and corresponding length (in bits)
    27. Process SecOCRxPduProcessing_12_Async, pending verification
    28. Check that the GetRxFreshness stub was called once with correct parameters
    29. Check that the job ID is for Csm_MacVerify
    30. Check that the provided data and data length are the expected ones
    31. Check that the provided MAC and MAC length are the expected ones
    32. Set freshness value and corresponding length (in bits)
    33. Process SecOCRxPduProcessing_09_Async, pending verification
    34. Check that the GetRxFreshness stub was called once with correct parameters
    35. Check that the job ID is for Csm_MacVerify
    36. Check that the provided data and data length are the expected ones
    37. Check that the provided MAC and MAC length are the expected ones
    38. Callback for SecOCRxPduProcessing_12_Async
    39. Process SecOCRxPduProcessing_12_Async
    40. Check that the PduR stubs are called once and the authenticated I-Pdu is
        the expected one
    41. Process SecOCRxPduProcessing_11
    42. Check that the GetRxFreshness stub was called once with correct parameters
    43. Check that the job ID is for Csm_MacVerify
    44. Check that the provided data and data length are the expected ones
    45. Check that the provided MAC and MAC length are the expected ones
    46. No pending events for associated Pdus
    47. Callback for SecOCRxPduProcessing_09_Async
    48. No pending events for associated Pdus
    49. Process SecOCRxPduProcessing_09_Async
    50. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one
    51. Callback for SecOCRxPduProcessing_11
    52. No pending events for associated Pdus
    53. Process SecOCRxPduProcessing_11
    54. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one
    55. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00171</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1232</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_MULTIPLE_MAINFUNC_TX_NO_INIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_MultipleMainFunc/source/application/Tests.c</sourcefile>
      <sourceline>563</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Pdu processing according to MainFunction association (Transmission)
  
Test Description: 
    This test checks the behaviour of the SecOC module when it wasn't initialized.
  
Test Object: 
    Processing of Pdus associated to separate MainFunctions
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_05 is associated to SecOCMainFunctionTx_0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_17 is associated to SecOCMainFunctionTx_1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_24 is associated to SecOCMainFunctionTx_2&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_24 has a ConfirmationTimeout of 4 main function calls&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU payloads
    03. Set the PduR_SecOCTransmit stub callout function
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function
    05. Set Csm_MacGenerate stub callout function and the MAC value provided by the function
    06. Call SecOC_Transmit to start the authentication procedure
    07. Call the main function in order to finish the authentication procedure
    08. Run main functions, no pending requests
    09. Initialize the SecOC module and the stubs
    10. Call SecOC_Transmit to start the authentication procedure
    11. Call the main function in order to finish the authentication procedure
    12. Check that the job ID is for Csm_MacGenerate
    13. Check that the provided data and data length are the expected ones
    14. Check that the output buffer length is the expected one
    15. Run main functions, no pending requests
    16. If the SecOC module is configured to use the Csm module in asynchronous the callback
        is required to continue the execution
    17. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU
    18. Check that the provided authentic PDU length and data are the expected ones
    19. Check that the provided cryptographic PDU length and data are the expected ones
    20. Call the SecOC_TxTpConfirmation to simulate that
        the authentic PDU was received successfully
    21. Call the SecOC_TxTpConfirmation to simulate that
        the cryptographic PDU was received successfully
    22. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
        to confirm to the upper layer that the transmission was successful
    23. Call SecOC_Transmit to start the authentication procedure
    24. Call the main function in order to finish the authentication procedure
    25. Check that the job ID is for Csm_MacGenerate
    26. Call SecOC_Transmit to start the authentication procedure
    27. No pending event, nothing happens
    28. Call the main function in order to finish the authentication procedure
    29. Check that the job ID is for Csm_MacGenerate
    30. Call SecOC_Transmit to start the authentication procedure
    31. Call the main function in order to finish the authentication procedure
    32. Check that the job ID is for Csm_MacGenerate
    33. If the SecOC module is configured to use the Csm module in asynchronous the callback
        is required to continue the execution
    34. No pending event, nothing happens
    35. Set the PduR_SecOCTransmit stub callout function
    36. Call the main function in order to finish the authentication procedure
    37. Check that the provided PDU is the expected one
    38. Set the PduR_SecOCTransmit stub callout function
    39. Call the main function in order to finish the authentication procedure
    40. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU
    41. Call the main function in order to finish the authentication procedure
    42. If the SecOC module is configured to use the Csm module in asynchronous the callback
        is required to continue the execution
    43. Call the main function in order to finish the authentication procedure
    44. Check that the PduR_SecOCTransmit stub was called a number of times equal to the calls to SecOCTransmit
    45. Confirmation timeout occurs for SecOCTxPduProcessing_24
    46. Check that the PduR_SecOCTpTxConfirmation stub was not called
    47. Run all main functions for ten times
    48. Call SecOC_TxConfirmation
    49. Check that the PduR confirmation stub is called once and the Pdu id is
        the expected one.
    50. Call SecOC_TxConfirmation
    51. Check that the PduR confirmation stub is called once and the Pdu id is
        the expected one.
    52. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00276</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00176</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1233</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_MULTIPLE_MAINFUNC_RX</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_MultipleMainFunc/source/application/Tests.c</sourcefile>
      <sourceline>901</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Pdu processing according to MainFunction association (Reception)
  
Test Description: 
    This test checks that MainFunctions process only the PDUs associated to them.
  
Test Object: 
    Processing of Pdus associated to separate MainFunctions
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_09_Async is associated to SecOCMainFunctionRx_0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_11 is associated to SecOCMainFunctionRx_2&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_12_Async is associated to SecOCMainFunctionRx_1&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Set GetRxFreshness stub callout function
    03. Set Csm_MacVerify stub callout function to TS_Csm_MacVerify_Callout
    04. Prepare the secured I-PDUs that need to be authenticated
    05. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    06. Set PduR stub callout functions
    07. Initialize Pdu payloads and lengths
    08. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module
    09. Call SecOC_CopyRxData function to hand over the secured I-Pdu to the
        SecOC module and check that the operation is performed successfully
    10. Initiate reception of all Pdus
    11. Set freshness value and corresponding length (in bits)
    12. Process SecOCRxPduProcessing_12_Async, pending verification
    13. Check that the GetRxFreshness stub was called once with correct parameters
    14. Check that the job ID is for Csm_MacVerify
    15. Check that the provided data and data length are the expected ones
    16. Check that the provided MAC and MAC length are the expected ones
    17. Set freshness value and corresponding length (in bits)
    18. Process SecOCRxPduProcessing_09_Async, pending verification
    19. Check that the GetRxFreshness stub was called once with correct parameters
    20. Check that the job ID is for Csm_MacVerify
    21. Check that the provided data and data length are the expected ones
    22. Check that the provided MAC and MAC length are the expected ones
    23. Callback for SecOCRxPduProcessing_12_Async
    24. Process SecOCRxPduProcessing_12_Async
    25. Check that the PduR stubs are called once and the authenticated I-Pdu is
        the expected one
    26. Set freshness value and corresponding length (in bits)
    27. Process SecOCRxPduProcessing_11
    28. Check that the GetRxFreshness stub was called once with correct parameters
    29. Check that the job ID is for Csm_MacVerify
    30. Check that the provided data and data length are the expected ones
    31. Check that the provided MAC and MAC length are the expected ones
    32. No pending events for associated Pdus
    33. Callback for SecOCRxPduProcessing_09_Async
    34. No pending events for associated Pdus
    35. Process SecOCRxPduProcessing_09_Async
    36. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one
    37. Callback for SecOCRxPduProcessing_11
    38. No pending events for associated Pdus
    39. Process SecOCRxPduProcessing_11
    40. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one
    41. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00171</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1234</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_MULTIPLE_MAINFUNC_TX</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_MultipleMainFunc/source/application/Tests.c</sourcefile>
      <sourceline>1210</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Pdu processing according to MainFunction association (Transmission)
  
Test Description: 
    This test checks that MainFunctions process only the Pdus associated to them.
  
Test Object: 
    Processing of Pdus associated to separate MainFunctions
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_05 is associated to SecOCMainFunctionTx_0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_17 is associated to SecOCMainFunctionTx_1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_24 is associated to SecOCMainFunctionTx_2&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_24 has a ConfirmationTimeout of 4 main function calls&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU payloads
    03. Set the PduR_SecOCTransmit stub callout function
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function
    05. Set Csm_MacGenerate stub callout function and the MAC value provided by the function
    06. Call SecOC_Transmit to start the authentication procedure
    07. Call the main function in order to finish the authentication procedure
    08. Check that the job ID is for Csm_MacGenerate
    09. Check that the provided data and data length are the expected ones
    10. Check that the output buffer length is the expected one
    11. Run main functions, no pending requests
    12. If the SecOC module is configured to use the Csm module in asynchronous the callback
        is required to continue the execution
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU
    14. Check that the provided authentic PDU length and data are the expected ones
    15. Check that the provided cryptographic PDU length and data are the expected ones
    16. Call the SecOC_TxTpConfirmation to simulate that
        the authentic PDU was received successfully
    17. Call the SecOC_TxTpConfirmation to simulate that
        the cryptographic PDU was received successfully
    18. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
        to confirm to the upper layer that the transmission was successful
    19. Call SecOC_Transmit to start the authentication procedure
    20. Call the main function in order to finish the authentication procedure
    21. Check that the job ID is for Csm_MacGenerate
    22. Call SecOC_Transmit to start the authentication procedure
    23. No pending event, nothing happens
    24. Call the main function in order to finish the authentication procedure
    25. Check that the job ID is for Csm_MacGenerate
    26. Call SecOC_Transmit to start the authentication procedure
    27. Call the main function in order to finish the authentication procedure
    28. Check that the job ID is for Csm_MacGenerate
    29. If the SecOC module is configured to use the Csm module in asynchronous the callback
        is required to continue the execution
    30. No pending event, nothing happens
    31. Set the PduR_SecOCTransmit stub callout function
    32. Call the main function in order to finish the authentication procedure
    33. Check that the provided PDU is the expected one
    34. Set the PduR_SecOCTransmit stub callout function
    35. Call the main function in order to finish the authentication procedure
    36. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU
    37. Call the main function in order to finish the authentication procedure
    38. If the SecOC module is configured to use the Csm module in asynchronous the callback
        is required to continue the execution
    39. Call the main function in order to finish the authentication procedure
    40. Check that the PduR_SecOCTransmit stub was called a number of times equal to the calls to SecOCTransmit
    41. Confirmation timeout occurs for SecOCTxPduProcessing_24
    42. Check that the PduR_SecOCTpTxConfirmation stub was not called
    43. Run all main functions for ten times
    44. Call SecOC_TxConfirmation
    45. Check that the PduR confirmation stub is called once and the Pdu id is
        the expected one.
    46. Call SecOC_TxConfirmation
    47. Check that the PduR confirmation stub is called once and the Pdu id is
        the expected one.
    48. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00276</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00176</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1235</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_MULTIPLE_MAINFUNC_RX_OVERRIDE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_MultipleMainFunc/source/application/Tests.c</sourcefile>
      <sourceline>1531</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Pdu processing according to MainFunction association (Reception)
  
Test Description: 
    This test checks that MainFunctions process only the PDUs associated to them.
  
Test Object: 
    Processing of Pdus associated to separate MainFunctions when override status is used
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_09_Async is associated to SecOCMainFunctionRx_0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_11 is associated to SecOCMainFunctionRx_2&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_12_Async is associated to SecOCMainFunctionRx_1&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Set GetRxFreshness stub callout function
    03. Set Csm_MacVerify stub callout function to TS_Csm_MacVerify_Callout
    04. Prepare the secured I-PDUs that need to be authenticated
    05. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    06. Set PduR stub callout functions
    07. Initialize Pdu payloads and lengths
    08. Call SecOC_VerifyStatusOverride to skip the verification of the secured PDUs
    09. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module
    10. Call SecOC_CopyRxData function to hand over the secured I-Pdu to the
        SecOC module and check that the operation is performed successfully
    11. Initiate reception of all Pdus
    12. Process SecOCRxPduProcessing_12_Async, pending verification
    13. Check that the GetRxFreshness stub was called once with correct parameters
    14. Check that the PduR stubs are called once and the authenticated I-Pdu is
        the expected one
    15. Process SecOCRxPduProcessing_09_Async, pending verification
    16. Check that the GetRxFreshness stub was called once with correct parameters
    17. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one
    18. Process SecOCRxPduProcessing_11
    19. Check that the GetRxFreshness stub was called once with correct parameters
    20. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one
    21. Call SecOC_VerifyStatusOverride to re-enable the verification of the secured PDUs
    22. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00171</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1236</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_MULTIPLE_MAINFUNC_RTE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_MultipleMainFunc_Rte/source/application/Tests.c</sourcefile>
      <sourceline>163</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test checks that mainfunctions process only the PDUs associated to them when Rte is being used.
  
Test Object: 
    Processing of Pdus associated to separate mainfunctions
  
Test Precondition: 
    Multiple mainfunctions configured
    Rte = enabled
  
Test Execution: 
    01. Initialize SecOC and the testing environment
    02. Pass the Rx PDU which shall be processed by using mainfunction 0
    03. Pass another Rx PDU which shall be processed by using mainfunction 1
    04. Call mainfunction 0 to verify the associated received Rx PDU
    05. Check main function Rx 0 calls correct RTE API
    06. Check that the PduR stub is called once and the verified PDU is the expected one
    07. Call mainfunction 1 to verify the associated received Rx PDU
    08. Check main function Rx 1 calls correct RTE API
    09. Check that the PduR stub is called once and the verified PDU is the expected one
    10. Pass the Tx PDU which shall be processed by using mainfunction 0
    11. Pass the Tx PDU which shall be processed by using mainfunction 1
    12. Setup the required MAC to create the secured PDU
    13. Call mainfunction 0 to authenticate the associated received Tx PDU
    14. Check main function Tx 0 calls correct RTE API
    15. Check that the PduR stub is called once and the authenticated PDU is the expected one
    16. Setup the required MAC to create the secured PDU
    17. Call mainfunction 1 to authenticate the associated received Tx PDU
    18. Check main function Tx 1 calls correct RTE API
    19. Check that the PduR stub is called once and the authenticated PDU is the expected one
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00171</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1237</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_MULTIPLE_MAINFUNC_RTE_DEFAULTAUTH_FVM_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_MultipleMainFunc_Rte/source/application/Tests.c</sourcefile>
      <sourceline>335</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module when SecOC_SendDefaultAuthenticationInformation
    was called to enable the bypass mechanism and FvM returns a negative value and the verification
    fails.
  
Test Object: 
    SecOC_SendDefaultAuthenticationInformation
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;Multiple mainfunctions configured&lt;/listitem&gt;
      &lt;listitem&gt;Rte = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern = 0xA5U&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize SecOC and the testing environment
    02. Set GetTxFreshness stub return value to E_NOT_OK
    03. Call SecOC_SendDefaultAuthenticationInformation to enable the bypass mechanism
    04. Pass the Tx PDU which shall be processed by using mainfunction 0
    05. Pass the Tx PDU which shall be processed by using mainfunction 1
    06. Call mainfunction 0 to authenticate the associated received Tx PDU
    07. Check that the PduR stub is called once and the authenticated PDU is the expected one
    08. Call mainfunction 1 to authenticate the associated received Tx PDU
    09. Check that the PduR stub is called once and the authenticated PDU is the expected one
    10. Call SecOC_SendDefaultAuthenticationInformation again to disable the bypass mechanism
    11. Pass the Tx PDU which shall be processed by using mainfunction 0
    12. Pass the Tx PDU which shall be processed by using mainfunction 1
    13. Call mainfunction 0 to authenticate the associated received Tx PDU
    14. Check that the PduR stub was not called
    15. Call mainfunction 1 to authenticate the associated received Tx PDU
    16. Check that the PduR stub was not called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1238</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_RXTX_RTEINTERFACES_SECOC_MAINFUNCTIONRX</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_RteInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>144</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Calls the SecOC_MainFunctionRx with uninitialized SecOC. The expectation is that
    the function returns without any side effects. Therefore this test is executed
    before any other test.
  
Test Object: 
    SecOC_MainFunctionRx()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    a01: Call the SecOC Rx main function several times.
    a02: Check that no other API is called by the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00172</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1239</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_RTEINTERFACES_SECOC_MAINFUNCTIONTX</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_RteInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>205</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Calls the SecOC_MainFunctionTx with uninitialized SecOC. The expectation is that
    the function returns without any side effects. Therefore this test is executed
    before any other test.
  
Test Object: 
    SecOC_MainFunctionTx()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    a01: Call the SecOC Tx main function several times.
    a02: Check that no other API is called by the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1240</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_IF_VERIFICATIONSTATUS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_RteInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>266</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test if the VerificationStatus service interface is correctly updated for Non-TP RX PDUs
  
Test Object: 
    SecOC_RxIndication()
    Sender-Receiver Interface VerificationStatus
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Part a) Successful authentication of an RX PDU, propagation mode NONE
    a01. Initialize SecOC.
    a02. Prepare the secured PDU that needs to be handover for verification.
    a03. Call the SecOC_RxIndication with valid data but wrong PDU ID.
    a04. Call the main function several times.
    a05. Check that the PduR was not called as the verification request was not accepted.
    a06. Call the SecOC_RxIndication to handover the secured PDU (propagation mode NONE).
    a07. Execute the verification procedure.
    a08. Check that the Csm_MacVerify stub was called once.
    a09. Check that SecOC called the PduR_SecOCRxIndication to handover the authentic PDU.
    a10. Verify that the SecOC has not written to its VerificationStatus port
         (by checking the RTE IsUpdated flag).

    Part b) Failed authentication of an RX PDU, propagation mode NONE
    b01. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_NOT_OK.
    b02. Call the SecOC_RxIndication to handover the secured PDU (propagation mode NONE).
    b03. Execute the verification procedure.
    b04. Check that the Csm_MacVerify stub was called once.
    b05. Check if Authentic Pdu was indicated to PduR if SECOC_IGNORE_VER_RESULT is enabled.
         Check if Authentic Pdu was NOT indicated to PduR if SECOC_IGNORE_VER_RESULT is disabled.
    b06. Verify that the SecOC has not written to its VerificationStatus port
         (by checking the RTE IsUpdated flag).
    b07. Set the Csm_MacVerify stub verification result back to CRYPTO_E_VER_OK.

    Part c) Successful authentication of an RX PDU, propagation mode BOTH
    c01. Prepare the secured PDU that needs to be handover for verification.
    c02. Call the SecOC_RxIndication to handover the secured PDU (propagation mode BOTH).
    c03. Execute the verification procedure.
    c04. Check that the Csm_MacVerify stub was called once.
    c05. Check that SecOC called the PduR_SecOCRxIndication to handover the authentic PDU.
    c06: Verify that the SecOC has written the correct value to its VerificationStatus port.
         Check if the verification status and the data Id are the expected ones.

    Part d) Failed authentication of an RX PDU, propagation mode BOTH
    d01. Call the SecOC_RxIndication to handover the secured PDU (propagation mode BOTH).
    d02. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_NOT_OK.
    d03. Execute the verification procedure.
    d04. Check that the Csm_MacVerify stub was called once.
    d05. Check if Authentic Pdu was indicated to PduR if SECOC_IGNORE_VER_RESULT is enabled.
         Check if Authentic Pdu was NOT indicated to PduR if SECOC_IGNORE_VER_RESULT is disabled.
    d06. Verify that the SecOC has written to its VerificationStatus port
         (by checking the RTE IsUpdated flag).
    d07. Set the Csm_MacVerify stub verification result back to CRYPTO_E_VER_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00160</linksto>
          <dstversion>4</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00148</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00010</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>630</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1241</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_FAIL_NTIMES</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_RteInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>512</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the operation VerifyStatusOverride of RTE client-server interface
    VerifyStatusConfiguration using a predefined number of received secured PDUs
    when the verification status is set to be overridden to fail.
  
Test Object: 
    SecOC_VerifyStatusOverride()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    a01: Initialize SecOC by calling SecOC_Init()
    a02: Simulate a successful reception of a secured PDU for plausibility
    a03: Check if the SecOC successfully indicates the reception of the authentic PDU
         to the upper layer
    a04: Call VerifyStatusOverride() to override the status for the next five messages
    a05: Simulate the reception of 5 valid secured PDUs and check if they are successfully dropped
    a06: Simulate the reception of 1 valid secured PDU and check if it is accepted
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00142</linksto>
          <dstversion>4</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1242</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_PASS_NTIMES_VER_RESULT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_RteInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>621</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the operation VerifyStatusOverride of RTE client-server interface
    VerifyStatusConfiguration using a predefined number of received secured PDUs
    when the verification status is set to be overridden to pass.
  
Test Object: 
    SecOC_VerifyStatusOverride()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    a01: Initialize the SecOC module and the stubs
    a02: Prepare the secure PDU payload
    a03: Simulate a successful reception via IF
    a04: Check that the Csm_MacVerify stub was called by the SecOC module
    a05: Check that the PduR_SecOCRxIndication stub was called by the SecOC as result of
         the successful verification
    a06: Set the verification result of the Csm_MacVerify stub to CRYPTO_E_VER_NOT_OK
    a07: Call VerifyStatusOverride() to override the status for the next five messages to pass
    a08: Simulate the reception of 5 invalid secured PDUs and check that they were pass to the upper
         layer as the VerifyStatus was overridden
    a09: Set the verification result of the Csm_MacVerify stub back to CRYPTO_E_VER_OK
    a10: Generate the next secured PDU payload
    a11: Simulate the reception of 1 valid secured PDU
    a12: Check that the Csm_MacVerify stub was called by the SecOC module
    a13: Check that the PduR_SecOCRxIndication stub was called by the SecOC as result of
         the successful verification
    a14: De-initialize the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00142</linksto>
          <dstversion>4</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1243</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_PASS_NTIMES_RETVAL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_RteInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>757</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the operation VerifyStatusOverride of RTE client-server interface
    VerifyStatusConfiguration using a predefined number of received secured PDUs
    when the verification status (in this case the return value) is set to be overridden to pass.
  
Test Object: 
    SecOC_VerifyStatusOverride()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    a01: Initialize the SecOC module and the stubs
    a02: Prepare the secure PDU payload
    a03: Simulate a successful reception via IF
    a04: Check that the Csm_MacVerify stub was called by the SecOC module
    a05: Check that the PduR_SecOCRxIndication stub was called by the SecOC as result of
         the successful verification
    a06: Set the return value of the Csm_MacVerify stub to E_NOT_OK
    a07: Call VerifyStatusOverride() to override the status for the next five messages to pass
    a08: Simulate the reception of 5 invalid secured PDUs and check that they were pass to the upper
         layer as the VerifyStatus was overridden
    a09: Set the return value of the Csm_MacVerify stub back to E_OK
    a10: Generate the next secured PDU payload
    a11: Simulate the reception of 1 valid secured PDU
    a12: Check that the Csm_MacVerify stub was called by the SecOC module
    a13: Check that the PduR_SecOCRxIndication stub was not called by the SecOC as result of
         the verification was not successful
    a14: Set the return value of the Csm_MacVerify stub back to E_NOT_OK
    a15: Generate the next secured PDU payload
    a16: Simulate the reception of 1 valid secured PDU
    a17: Check that the Csm_MacVerify stub was called by the SecOC module
    a18: Check that the PduR_SecOCRxIndication stub was called by the SecOC as result of
         the successful verification
    a19: Set the return value of the Csm_MacVerify stub back to E_OK
    a20: De-initialize the SecOC module and stop the RTE
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00142</linksto>
          <dstversion>4</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1244</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_PASS_NTIMES_CALLBACK_RESULT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_RteInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>921</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the operation VerifyStatusOverride of RTE client-server interface
    VerifyStatusConfiguration using a predefined number of received secured PDUs
    when the verification status (in this case the callback result) is set to be overridden to pass.
  
Test Object: 
    SecOC_VerifyStatusOverride()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    a01: Initialize the SecOC module and the stubs
    a02: Prepare the secure PDU payload
    a03: Simulate a successful reception via IF
    a04: Check that the Csm_MacVerify stub was called by the SecOC module
    a05: Check that the PduR_SecOCRxIndication stub was called by the SecOC as result of
         the successful verification
    a06: Call VerifyStatusOverride() to override the status for the next five messages to pass
    a07: Execute the verification of 5 invalid secured PDUs and check that they were pass to the upper
         layer as the VerifyStatus was overridden
    a08: Generate the next secured PDU payload
    a09: Simulate the reception of 1 valid secured PDU
    a10: Check that the Csm_MacVerify stub was called by the SecOC module
    a11: Check that the PduR_SecOCRxIndication stub was called by the SecOC as result of
         the successful verification
    a12: Simulate a successful reception via IF
    a13: Call the main function once to start the verification
    a14: Call the Csm callback
    a15: Call the main function once to finish the verification
    a16: Check that the Csm_MacVerify stub was called by the SecOC module
    a17: Check if the PduR_SecOCRxIndication stub was called or not (based on the ignored option)
    a18: De-initialize the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00142</linksto>
          <dstversion>4</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1245</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_24_IF_VERIFYSTATUSOVERRIDE_PASS_MULTIPDUS_SAMEFRESHID</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_RteInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>1103</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the operation VerifyStatusOverride of RTE client-server interface
    VerifyStatusConfiguration using a predefined number of received secured PDUs
    when the verification status is set to be overridden to pass and
    the PDUs sent to SecOC have different IDs but same freshness ID.
  
Test Object: 
    SecOC_VerifyStatusOverride()
  
Test Precondition: 
    verification done by CSM,
    Freshness Value truncated
    Authenticator truncated
  
Test Execution: 
    a01. Initialize the SecOC module and the stubs.
    a02. Prepare the secure PDUs payload.
    a03. Set Csm_MacVerify stub callout function to NULL_PTR and
         the verification result to CRYPTO_E_VER_NOT_OK.
    a04. Prepare the the secured I-PDU that needs to be authenticated.
    b01. Call SecOC_VerifyStatusOverride in order to override the verification result to pass
         for the next 2 PDUs sent to SecOC with the specified freshness ID.
    b02. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
         and the verification procedure can be started.
    b03. Call the main function in order to execute the verification procedure.
    b04. Check that the Csm_MacVerify stub was called once.
    b05. Check that the PduR_SecOCRxIndication stub was called once as the verification
         result was overridden to pass.
    b06. Call the SecOC_RxIndication to hand over the next PDU with the same freshness ID
         and to start the verification procedure.
    b07. Call the main function in order to execute the verification procedure.
    b08. Check that the Csm_MacVerify stub was called once.
    b09. Check that the PduR_SecOCRxIndication stub was called once.
    c01. Set Csm_MacVerify stub verification result back to CRYPTO_E_VER_OK.
    c02. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
         and the verification procedure can be started.
    c03. Call the main function in order to execute the verification procedure.
    c04. Check that the Csm_MacVerify stub was called once.
    c05. Check that the PduR_SecOCRxIndication stub was called once.
    c06: De-initialize the SecOC module and stop the RTE.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00142</linksto>
          <dstversion>4</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1246</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_SKIP_UNTIL_NOTICE_SECPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_RteInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>1271</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the operation VerifyStatusOverride of RTE client-server interface
    VerifyStatusConfiguration when the override status is set to skip the verification and
    several secured PDUs are sent to the SecOC module.
  
Test Object: 
    SecOC_VerifyStatusOverride(), overrideStatus = SECOC_OVERRIDESTATUS_SKIP_UNTIL_NOTICE
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCEbPropagateVerificationStatusApiVersion = AUTOSAR&lt;/listitem&gt;
      &lt;listitem&gt;SecOCEnableForcedPassOverride = TRUE&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set PduR_SecOCRxIndication stub callout function.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    07. Call SecOC_VerifyStatusOverride in order to skip the verification procedure
        for the next 20 PDUs sent to SecOC.
    08. Execute the Rx procedure for 20 PDUs and check that the authentic PDU is directly
        forwarded to the upper layer without the verification procedure.
    09. Call SecOC_VerifyStatusOverride in order to cancel the override.
    10. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started.
    11. Call the main function in order to start the verification procedure.
    12. Check that the GetRxFreshness stub was called once.
    13. Check that the Csm_MacVerify stub was called once.
    14. Check that the job ID is for Csm_MacVerify.
    15. Check that the provided data and data length are the expected ones.
    16. Check that the provided MAC and MAC length are the expected ones.
    17. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module uses the Csm service in the
        asynchronous mode).
    18. Call the main function in order to finish the verification procedure.
    19. Check that the PduR_SecOCRxIndication stub was called once.
    20. Check that the authenticated I-PDU is the expected one.
    21. Verify that the SecOC has written the correct value to its VerificationStatus port.
        Check if the verification status and the data Id are the expected ones.
    22. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00142</linksto>
          <dstversion>4</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1247</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_RTEINTERFACES_19_TP_VERIFYSTATUSOVERRIDE_SKIP_UNTIL_NOTICE_SECPDUCOL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_RteInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>1551</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the operation VerifyStatusOverride of RTE client-server interface
    VerifyStatusConfiguration when the the override status is set to skip the verification and
    several authentic PDUs are sent from the lower layer without the corresponding cryptographic
    PDUs to the SecOC module.
  
Test Object: 
    SecOC_VerifyStatusOverride(), overrideStatus = SECOC_OVERRIDESTATUS_SKIP_UNTIL_NOTICE
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCEbPropagateVerificationStatusApiVersion = AUTOSAR&lt;/listitem&gt;
      &lt;listitem&gt;SecOCEnableForcedPassOverride = TRUE&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the authentic PDU and the cryptographic PDU.
    03. Set PduR_SecOCTpCopyRxData stub callout function.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Prepare the authentic and cryptographic I-PDUs that need to be sent to SecOC.
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    07. Call SecOC_VerifyStatusOverride in order to skip the verification procedure
        for the next PDUs sent to SecOC.
    08. Execute the Rx procedure for 20 PDUs and check that the authentic PDU is directly
        forwarded to the upper layer without the verification procedure.
    09. Call SecOC_VerifyStatusOverride in order to cancel the override.
    10. Call the SecOC_StartOfReception again and check that the request was
        accepted by the SecOC module.
    11. Call the SecOC_CopyRxData again to hand over the authentic PDU to the SecOC module and
        check that operation was successfully performed.
    12. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU
        was sent and the verification procedure can be started.
    13. Call the main function in order to start the verification procedure.
    14. Check that the GetRxFreshness stub was not called as SecOC waits for the cryptographic PDU.
    15. Call the SecOC_StartOfReception again and check that the request was
        accepted by the SecOC module.
    16. Call the SecOC_CopyRxData again to hand over the cryptographic PDU to the SecOC module and
        check that operation was successfully performed.
    17. Call the SecOC_TpRxIndication to notify the SecOC module that the cryptographic PDU
        was sent and the verification procedure can be started.
    18. Call the main function in order to start the verification procedure.
    19. Check that the upper layer was called with the expected PDU ID and length.
    20. Check that the GetRxFreshness stub was called once.
    21. Check that the Csm_MacVerify stub was called once.
    22. Check that the job ID is for Csm_MacVerify.
    23. Check that the provided data and data length are the expected ones.
    24. Check that the provided MAC and MAC length are the expected ones.
    25. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module uses the Csm service in the
        asynchronous mode).
    26. Call the main function in order to finish the verification procedure.
    27. Check that the authenticated I-PDU is the expected one.
    28. Check that the upper layer was called with the expected PDU ID and operation result.
    29. Verify that the SecOC has written the correct value to its VerificationStatus port.
         Check if the verification status and the data Id are the expected ones.
    30. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00142</linksto>
          <dstversion>4</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1248</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_CANCEL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_RteInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>1936</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the operation VerifyStatusOverride of RTE client-server interface
    VerifyStatusConfiguration, including cancellation of the override status.
  
Test Object: 
    SecOC_VerifyStatusOverride()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    a01: Initialize SecOC by calling SecOC_Init()
    a02: Simulate a successful reception of a secured PDU for plausibility
    a03: Check if the SecOC successfully indicates the reception of the authentic PDU
         to the upper layer
    a04: Call VerifyStatusOverride() to override the status for an unlimited number of PDUs
    a05: Simulate the reception of 2 valid secured PDU and check if they are successfully dropped
    a06: Call VerifyStatusOverride() to cancel the override
    a07: Simulate the reception of 1 valid secured PDU and check if it is accepted
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00142</linksto>
          <dstversion>4</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1249</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_RTEINTERFACES_09_IF_VERIFYSTATUSOVERRIDE_WRONGINPUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_RteInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>2047</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the operation VerifyStatusOverride of RTE client-server interface
    VerifyStatusConfiguration, including cancellation of the override status.
  
Test Object: 
    SecOC_VerifyStatusOverride()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    a01: Call the API with valid values, but with uninitialized module.
    a02: Chekf if the API returns E_NOT_OK
    a03: Initialize SecOC by calling SecOC_Init()
    a04: Call VerifyStatusOverride with a wrong freshness counter ID
    a05: Check if the API returns E_NOT_OK
    a06: Call VerifyStatusOverride with an invalid overrideStatus
    a07: Check if the API returns E_NOT_OK
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00142</linksto>
          <dstversion>4</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1250</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_RTEINTERFACES_16_TP_DEFAULTAUTH_FVM_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_RteInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>2126</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module when SecOC_SendDefaultAuthenticationInformation
    was called to enable the bypass mechanism and FvM returns a negative value and the verification
    fails.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;One mainfunction configured&lt;/listitem&gt;
      &lt;listitem&gt;Rte = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern = 0xA5U&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Set the GetTxRefreshness stub return value to E_NOT_OK
    03. Initialize PDU Payload
    04. Call SecOC_SendDefaultAuthenticationInformation to enable the bypass mechanism
    05. Call SecOC_Transmit to start the authentication procedure
    06. Call the main function several times in order to reach the max retries attempts
    07. Check that the GetTxFreshness stub was called the max retries
    08. Check that the Csm_MacGenerate stub was not called
    09. Check that the PduR_SecOCTransmit stub was called once
    10. Check that the provided Secured I-PDU is the expected one
    11. Call SecOC_TpTxConfirmation to finish the authentication procedure
    12. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result
    13. Call SecOC_SendDefaultAuthenticationInformation again to disable the bypass mechanism
    14. Call SecOC_Transmit to start the authentication procedure
    15. Call the main function in order to execute the authentication procedure
    16. Check that the GetTxFreshness stub was called the max retries
    17. Check that the Csm_MacGenerate stub was not called
    18. Check that the PduR_SecOCTransmit stub was not called
    19. Set GetTxFreshness stub return value back to E_OK
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1251</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_RTEINTERFACES_11_TP_MACGENERATESTATUS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_RteInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>2266</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC during the authentication of an Authentic I-PUD when
    the Csm module returns E_NOT_OK.
    Furthermore is tested if the callout functions are called to indicate that the MAC could not
    be generated.
  
Test Object: 
    SecOC_Init()
    SecOC_Transmit()
    SecOC_CsmMacGenerateCallback()
    SecOC_MacGenerateStatusCallout()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMacGenerateStatusPropagationMode = FAILURE_ONLY&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Call SecOC_Transmit to start the authentication procedure.
    04. Set the Csm_MacGenerate stub return value to E_NOT_OK.
    05. Call the main function once.
    06. Check that the callout function to indicate the MAC Generate status was not called.
    07. Call the main function several times.
    08. Check that the Csm_MacGenerate stub was called the maximum number of retries configured.
    09. Check that the PduR_SecOCTransmit stub was not called.
    10. Check that the callout function to indicate the MAC Generate status was called.
    11. Read from the Rte service the provided data by the callout function.
    12. Check that the provided data by the callout is the expected one.
    13. Reset MacGenerate stub, deinitialize SecOC and stop the Rte.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00151</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00013</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>616</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00014</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>617</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>618</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1252</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_FRESHNESS_RETVAL_BUSY_RETRIES_NOT_EXCEEDED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SameBuffer/source/application/Tests.c</sourcefile>
      <sourceline>237</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct reception
    of a secured I-PDU when the PDU is configured to use the same buffer PDU collection
    and the maximum authentication build attempts were not reached.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx1&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set Csm_MacVerify stub callout function as TS_Csm_MacVerify.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Prepare the secured I-PDU that needs to be verified.
    06. Set PduR_SecOCRxIndication stub callout function.
    07. Execute the verification procedure for the PDUs with ID 15 and 03.
    08. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDUs were send
        and the verification procedure can be started.
    09. Set the GetRxFreshness stub return value to BUSY.
    10. Call the main function in order to start the verification procedure.
    11. Check that the GetRxFreshness stub was called once.
    12. Check that the Csm_MacVerify stub was not called.
    13. Call the main function once in order to start the retry attempt for
        the verification procedure.
    14. Check that the GetRxFreshness stub was called twice.
    15. Check that the Csm_MacVerify stub was called once.
    16. Check that the provided data and data length are the expected ones.
    17. Check that the provided MAC and MAC length are the expected ones.
    18. Check that the PduR_SecOCRxIndication stub was called once.
    19. Check that the authenticated I-PDU is the expected one.
    20. Execute the verification procedure for the PDUs with ID 03 and 17.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1253</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_FRESHNESS_RETVAL_BUSY_RETRIES_EXCEEDED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SameBuffer/source/application/Tests.c</sourcefile>
      <sourceline>426</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct reception
    of a secured I-PDU when the PDU is configured to use the same buffer PDU collection
    and the maximum authentication build attempts were reached.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx1&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set Csm_MacVerify stub callout function as TS_Csm_MacVerify.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Prepare the secured I-PDU that needs to be verified.
    06. Set PduR_SecOCRxIndication stub callout function.
    07. Execute the verification procedure for the PDUs with ID 15 and 03.
    08. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDUs were send
        and the verification procedure can be started.
    09. Set the GetRxFreshness stub return value to BUSY.
    10. Call the main function in order to start the verification procedure.
    11. Check that the GetRxFreshness stub was called once.
    12. Check that the Csm_MacVerify stub was not called.
    13. Execute the verification procedure for the PDU with ID 17.
    14. Call the main function several times.
    15. Check that the GetRxFreshness stub was called until the retries threshold was reached.
    16. Check that the PduR_SecOCRxIndication stub was not called.
    17. Set the GetRxFreshness stub return value to E_OK.
    18. Execute the verification procedure for the PDUs with ID 03, 15 and 17.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1254</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_FRESHNESS_RETVAL_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SameBuffer/source/application/Tests.c</sourcefile>
      <sourceline>578</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct reception
    of a secured I-PDU when the PDU is configured to use the same buffer PDU collection
    and freshness value function returns E_NOT_OK.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx1&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set Csm_MacVerify stub callout function as TS_Csm_MacVerify.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Prepare the secured I-PDU that needs to be verified.
    06. Set PduR_SecOCRxIndication stub callout function.
    07. Execute the verification procedure for the PDUs with ID 15 and 03.
    08. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDUs were
        and the verification procedure can be started.
    09. Set the GetRxFreshness stub return value to E_NOT_OK.
    10. Call the main function in order to start the verification procedure.
    11. Check that the GetRxFreshness stub was called once.
    12. Check that the Csm_MacVerify stub was not called.
    13. Set the GetRxFreshness stub return value back to E_OK.
    14. Execute the verification procedure for the PDU with ID 17.
    15. Call the main function several times.
    16. Check that the GetRxFreshness stub was not called.
    17. Check that the PduR_SecOCRxIndication stub was not called.
    18. Execute the verification procedure for the PDUs with ID 15, 03 and 17.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1255</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_MACVER_RETVAL_E_NOT_OK_RETRIES_NOT_EXCEEDED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SameBuffer/source/application/Tests.c</sourcefile>
      <sourceline>730</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct reception
    of a secured I-PDU when the PDU is configured to use the same buffer PDU collection
    and the maximum verification attempts were not reached.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx1&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set Csm_MacVerify stub callout function as TS_Csm_MacVerify.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Prepare the secured I-PDU that needs to be verified.
    06. Set PduR_SecOCRxIndication stub callout function.
    07. Execute the verification procedure for the PDUs with ID 15 and 03.
    08. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDUs were send
        and the verification procedure can be started.
    09. Set the Csm_MacVerify stub return value to E_NOT_OK.
    10. Call the main function in order to start the verification procedure.
    11. Check that the GetRxFreshness stub was called once.
    12. Check that the Csm_MacVerify stub was called once.
    13. Execute the verification procedure for the PDU with ID 17.
    14. Set the Csm_MacVerify stub return value back to E_OK.
    15. Call the main function once in order to start the retry attempt for the verification procedure.
    16. Check that the GetRxFreshness stub was called twice.
    17. Check that the provided data and data length are the expected ones.
    18. Check that the provided MAC and MAC length are the expected ones.
    19. Check that the PduR_SecOCRxIndication stub was called once.
    20. Check that the authenticated I-PDU is the expected one.
    21. Execute the verification procedure for the PDUs with ID 03, 15 and 17.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1256</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_MACVER_RETVAL_E_NOT_OK_RETRIES_EXCEEDED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SameBuffer/source/application/Tests.c</sourcefile>
      <sourceline>907</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct reception
    of a secured I-PDU when the PDU is configured to use the same buffer PDU collection
    and the maximum verification attempts were reached.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx1&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set Csm_MacVerify stub callout function as TS_Csm_MacVerify.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Prepare the secured I-PDU that needs to be verified.
    06. Set PduR_SecOCRxIndication stub callout function.
    07. Execute the verification procedure for the PDUs with ID 15 and 03.
    08. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDUs were send
        and the verification procedure can be started.
    09. Set the Csm_MacVerify stub return value to E_NOT_OK.
    10. Call the main function in order to start the verification procedure.
    11. Check that the GetRxFreshness stub was called once.
    12. Check that the Csm_MacVerify stub was called once.
    13. Execute the verification procedure for the PDU with ID 17.
    14. Call the main function several times.
    15. Check that the CsmJob_MACVerify stub was called until the retries threshold was reached.
    16. Check that the provided data and data length are the expected ones.
    17. Check that the provided MAC and MAC length are the expected ones.
    18. Check that the PduR_SecOCRxIndication stub was called once.
    19. Set the Csm_MacVerify stub return value back to E_OK.
    20. Execute the verification procedure for the PDUs with ID 03, 15 and 17.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1257</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_MACVER_RESULT_E_NOT_OK_RETRIES_NOT_EXCEEDED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SameBuffer/source/application/Tests.c</sourcefile>
      <sourceline>1075</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct reception
    of a secured I-PDU when the PDU is configured to use the same buffer PDU collection
    and the maximum verification attempts were not reached.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx1&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set Csm_MacVerify stub callout function as TS_Csm_MacVerify.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Prepare the secured I-PDU that needs to be verified.
    06. Set PduR_SecOCRxIndication stub callout function.
    07. Execute the verification procedure for the PDUs with ID 15 and 03.
    08. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDUs were send
        and the verification procedure can be started.
    09. Set the Csm_MacVerify stub result to CRYPTO_E_VER_NOT_OK.
    10. Call the main function in order to start the verification procedure.
    11. Check that the GetRxFreshness stub was called twice.
    12. Check that the Csm_MacVerify stub was called once.
    13. Execute the verification procedure for the PDU with ID 17.
    14. Set the Csm_MacVerify stub return value back to CRYPTO_E_VER_OK.
    15. Call the main function.
    16. Check that the Csm_MacVerify stub was called twice.
    17. Check that the GetRxFreshness stub was called once.
    18. Check that the PduR_SecOCRxIndication stub was called once.
    19. Check that the authenticated I-PDU is the expected one.
    20. Execute the verification procedure for the PDUs with ID 03, 15 and 17.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1258</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_SAMEBUFFER_03_15_17_IF_MACVER_RESULT_E_NOT_OK_RETRIES_EXCEEDED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SameBuffer/source/application/Tests.c</sourcefile>
      <sourceline>1237</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct reception
    of a secured I-PDU when the PDU is configured to use the same buffer PDU collection
    and the maximum verification attempts were reached.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_20: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_14: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_15: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCRxPduProcessing_17: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Rx1&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set Csm_MacVerify stub callout function as TS_Csm_MacVerify.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Prepare the secured I-PDU that needs to be verified.
    06. Set PduR_SecOCRxIndication stub callout function.
    07. Execute the verification procedure for the PDUs with ID 15 and 03.
    08. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDUs were send
        and the verification procedure can be started.
    09. Set the Csm_MacVerify stub result to CRYPTO_E_VER_NOT_OK.
    10. Call the main function in order to start the verification procedure.
    11. Check that the GetRxFreshness stub was called twice.
    12. Check that the Csm_MacVerify stub was called once.
    13. Execute the verification procedure for the PDU with ID 17.
    14. Call the main function several times.
    15. Check that the GetRxFreshness stub was called until the retries threshold was reached.
    16. Check that the Csm_MacVerify stub was called until the retries threshold was reached.
    17. Check that the PduR_SecOCRxIndication stub was not called.
    18. Set the Csm_MacVerify stub return value back to CRYPTO_E_VER_OK.
    19. Execute the verification procedure for the PDUs with ID 03, 15 and 17.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1259</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_SAMEBUFFER_09_17_IF_FRESHNESS_RETVAL_E_NOT_OK_RETRIES_NOT_EXCEEDED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SameBuffer/source/application/Tests.c</sourcefile>
      <sourceline>1393</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct transition
    of a secured I-PDU when the PDU is configured to use the same buffer PDU collection
    and the maximum authentication build attempts were not reached.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_01: SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_01: SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_01: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Tx1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_09: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_09: SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_09: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Tx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_13: SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_13: SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_13: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Tx1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_17: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_17: SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_17: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Tx0&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    05. Execute the authentication procedure for the PDUs with ID 01, 06 and 09.
    06. Set the GetTxFreshness stub return value to E_NOT_OK.
    07. Call SecOC_Transmit to start the authentication procedure.
    08. Call SecOC_Transmit and check that the request is rejected
        as the required internal buffer is already being used.
    09. Call the main function in order to start the authentication procedure.
    10. Check that the GetTxFreshness stub was called once.
    11. Check that the Csm_MacGenerate stub was not called.
    12. Initialize the second PDU Payload.
    13. Call SecOC_Transmit and check that the request is accepted
        as the required internal buffer is already being used.
    14. Execute the authentication procedure for the PDU with ID 13.
    15. Call the main function once.
    16. Check that the GetTxFreshness stub was called again.
    17. Check that the Csm_MacGenerate stub was not called.
    18. Set the GetTxFreshness stub return value to E_OK.
    19. Call the main function once.
    20. Check that the GetTxFreshness stub was called once.
    21. Check that the Csm_MacGenerate stub was called once.
    22. Check that the provided data and data length are the expected ones.
    23. Check that the output buffer length is the expected one.
    24. Check that the PduR_SecOCTransmit stub was called once.
    25. Check that the provided Secured I-PDU is the expected one.
    26. Call the SecOC_TxConfirmation to simulate that the secured PDU
        was received successfully.
    27. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID.
    28. Execute the authentication procedure for the PDUs with ID 01, 06, 09 and 13.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1260</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_SAMEBUFFER_09_17_IF_FRESHNESS_RETVAL_E_NOT_OK_RETRIES_EXCEEDED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SameBuffer/source/application/Tests.c</sourcefile>
      <sourceline>1596</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct transition
    of a secured I-PDU when the PDU is configured to use the same buffer PDU collection
    and the maximum authentication build attempts were reached.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_01: SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_01: SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_01: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Tx1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_09: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_09: SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_09: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Tx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_13: SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_13: SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_13: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Tx1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_17: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_17: SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_17: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Tx0&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    05. Execute the authentication procedure for the PDUs with ID 01, 06 and 09.
    06. Set the GetTxFreshness stub return value to E_NOT_OK.
    07. Call SecOC_Transmit to start the authentication procedure.
    08. Call the main function in order to start the authentication procedure.
    09. Check that the GetTxFreshness stub was called once.
    10. Check that the Csm_MacGenerate stub was not called.
    11. Initialize the second PDU Payload.
    12. Call SecOC_Transmit and check that the request is rejected
        as the required internal buffer is already being used.
    13. Execute the authentication procedure for the PDU with ID 13.
    14. Call the main function several times.
    15. Check that the GetTxFreshness stub was called until the threshold was reached.
    16. Check that the Csm_MacGenerate stub was not called.
    17. Check that the PduR_SecOCTransmit stub was not called.
    18. Set the GetTxFreshness stub return value back to E_OK.
    19. Execute the authentication procedure for the PDUs with ID 01, 06, 09 and 13.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1261</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_SAMEBUFFER_09_17_IF_MACGEN_RETVAL_E_NOT_OK_RETRIES_NOT_EXCEEDED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SameBuffer/source/application/Tests.c</sourcefile>
      <sourceline>1747</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct transition
    of a secured I-PDU when the PDU is configured to use the same buffer PDU collection
    and the maximum authentication build attempts were not reached.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_01: SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_01: SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_01: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Tx1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_09: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_09: SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_09: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Tx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_13: SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_13: SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_13: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Tx1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_17: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_17: SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_17: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Tx0&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    05. Execute the authentication procedure for the PDUs with ID 01, 06 and 09.
    06. Set the Csm_MacGenerate stub return value to E_NOT_OK.
    07. Call SecOC_Transmit to start the authentication procedure.
    08. Call the main function in order to start the authentication procedure.
    09. Check that the GetTxFreshness stub was called once.
    10. Check that the Csm_MacGenerate stub was called once.
    11. Initialize the second PDU Payload.
    12. Call SecOC_Transmit and check that the request is accepted
        as the required internal buffer is already being used.
    13. Execute the authentication procedure for the PDU with ID 13.
    14. Call the main function in order to start the authentication procedure.
    15. Check that the Csm_MacGenerate stub was called again.
    16. Set the Csm_MacGenerate stub return value to E_OK.
    17. Call the main function once.
    18. Check that the GetTxFreshness stub was called once.
    19. Check that the Csm_MacGenerate stub was called once.
    20. Check that the provided data and data length are the expected ones.
    21. Check that the output buffer length is the expected one.
    22. Check that the PduR_SecOCTransmit stub was called once.
    23. Check that the provided Secured I-PDU is the expected one.
    24. Call the SecOC_TxConfirmation to simulate that the secured PDU
        was received successfully.
    25. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID.
    26. Execute the authentication procedure for the PDUs with ID 01, 06, 09 and 13.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1262</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_SAMEBUFFER_09_17_IF_MACGEN_RETVAL_E_NOT_OK_RETRIES_EXCEEDED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SameBuffer/source/application/Tests.c</sourcefile>
      <sourceline>1939</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct transition
    of a secured I-PDU when the PDU is configured to use the same buffer PDU collection
    and the maximum authentication build attempts were reached.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_01: SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_01: SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_01: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Tx1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_09: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_09: SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_09: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Tx0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_13: SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_13: SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_13: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Tx1&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_17: SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_17: SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxPduProcessing_17: SecOCSameBufferPduRef = SecOCSameBufferPduCollection_Tx0&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    05. Execute the authentication procedure for the PDUs with ID 01, 06 and 09.
    06. Set the Csm_MacGenerate stub return value to E_NOT_OK.
    07. Call SecOC_Transmit to start the authentication procedure.
    08. Call the main function in order to start the authentication procedure.
    09. Check that the GetTxFreshness stub was called once.
    10. Check that the Csm_MacGenerate stub was called once.
    11. Initialize the second PDU Payload.
    12. Call SecOC_Transmit and check that the request is rejected
        as the required internal buffer is already being used.
    13. Execute the authentication procedure for the PDU with ID 13.
    14. Call the main function several times.
    15. Check that the GetTxFreshness stub was called once.
    16. Check that the Csm_MacGenerate stub was called until the threshold was reached.
    17. Check that the provided data and data length are the expected ones.
    18. Check that the output buffer length is the expected one.
    19. Check that the PduR_SecOCTransmit stub was not called.
    20. Set the Csm_MacGenerate stub return value back to E_OK.
    21. Execute the authentication procedure for the PDUs with ID 01, 06, 09 and 13.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1263</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_BUSY</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SwcFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>38</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module during the authenticator build,
    when the query for the freshness value operation returns SECOC_E_BUSY.
  
Test Object: 
    GetRxFreshness via RTE.
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;Authentication build counter and the authentication verify attempt
                counter &gt; 0. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set the GetRxFreshness and the Csm_MacVerify stubs callout functions.
    Run the verification procedure of an secured I-PDU successfully:
      b01. Execute the verification procedure.
      b02. Check that the GetRxFreshness stub was called.
      b03. Check that the Csm_MacVerify stub was called.
      b04. Check that the PduR_SecOCRxIndication stub was called.
      b05. Check that the VerificationStatus was called with
           the expected result (SECOC_VERIFICATIONSUCCESS).
    Run the verification procedure, the GetRxFreshness always returns SECOC_E_BUSY:
      c01. Set the GetRxFreshness stub return value to SECOC_E_BUSY.
      c02. Call the SecOC_RxIndication to hand over the secured I-PDU and
           to indicate the SecOC module to start the verification procedure.
      c03. Call the main function until the maximum authentication build attempts configured
           was reached.
      c04. Check that the GetRxFreshness stub was called until the threshold was reached.
      c05. Check that the Csm_MacVerify stub was not called as the authenticator build failed.
      c06. Check that the VerificationStatus was called with
           the expected result (SECOC_AUTHENTICATIONBUILDFAILURE).
    Run the verification procedure, the first query for the freshness value returns SECOC_E_BUSY:
      d01. Call the SecOC_RxIndication to hand over the secured I-PDU and
           to indicate the SecOC module to start the verification procedure.
      d02. Call the main function until the GetRxFreshness stub was called once.
      d03. Check that the GetRxFreshness stub was called once.
      d04. Check that the Csm_MacVerify stub was not called as the GetRxFreshness returns
           SECOC_E_BUSY and the retry will be triggered on the next main function.
      d05. Set the GetRxFreshness stub return value back to SECOC_E_OK.
      d06. Call the main function to retry the authentication procedure.
      d07. Check that the GetRxFreshness stub was called again.
      d08. Check that the Csm_MacVerify stub was called.
      d09. Check that the PduR_SecOCRxIndication stub was called.
      d10. Check that the VerificationStatus was called with
           the expected result (SECOC_VERIFICATIONSUCCESS).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00236</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00245</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00248_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00256</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91001_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00242</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00236_BUSY</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1264</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_11_IF_RX_AUTHBUILD_RETVAL_NOTOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SwcFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>141</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module during the authenticator build,
    when the query for the freshness value operation returns SECOC_E_BUSY.
  
Test Object: 
    GetRxFreshness via RTE.
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;Authentication build counter and the authentication verify attempt
                counter &gt; 0. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set the GetRxFreshness and the Csm_MacVerify stubs callout functions.
    Run the verification procedure of an secured I-PDU successfully:
      b01. Execute the verification procedure.
      b02. Check that the GetRxFreshness stub was called.
      b03. Check that the Csm_MacVerify stub was called.
      b04. Check that the PduR_SecOCRxIndication stub was called.
      b05. Check that the VerificationStatus was called with
           the expected result (SECOC_VERIFICATIONSUCCESS).
    Run the verification procedure, the GetRxFreshness returns SECOC_E_NOT_OK:
      c01. Set the GetRxFreshness stub return value to SECOC_E_NOT_OK.
      c02. Call the SecOC_RxIndication to hand over the secured I-PDU and
           to indicate the SecOC module to start the verification procedure.
      c03. Call the main function once start the verification procedure.
      c04. Check that the GetRxFreshness stub was called.
      c05. Check that the Csm_MacVerify stub was not called as the GetRxFreshness returns
           SECOC_E_NOT_OK and the verification procedure ended.
      c06. Check that the VerificationStatus was called with
           the expected result (SECOC_AUTHENTICATIONBUILDFAILURE).
      c07. Set the GetRxFreshness stub return value back to SECOC_E_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00236</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00245</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00248_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00256</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91001_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00242</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00236_BUSY</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1265</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_BUSY</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SwcFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>231</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the MAC verification result is E_NOT_OK and
    the query for freshness value operation returns SECOC_E_BUSY.
  
Test Object: 
    GetRxFreshness via RTE.
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;Authentication build counter and the authentication verify attempt
                counter &gt; 0. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set the GetRxFreshness and the Csm_MacVerify stubs callout functions.
    Run the verification procedure of an secured I-PDU successfully:
      b01. Execute the PDU reception procedure.
      b02. Check that the GetRxFreshness stub was called.
      b03. Check that the Csm_MacVerify stub was called.
      b04. Check that the PduR_SecOCTpRxIndication stub was called.
      b05. Check that the VerificationStatus was called with
           the expected result (SECOC_VERIFICATIONSUCCESS).
    Run the verification procedure, when retry attempt is initiated
    the GetRxFreshness returns SECOC_E_BUSY:
      c01. Set the GetRxFreshness stub return value for the second call
           to SECOC_E_BUSY (the retry attempt).
      c02. Set the Csm_MacVerify stub result to E_NOT_OK.
      c03. Execute the PDU reception procedure.
      c04. Call the main function once start the verification procedure.
      c05. Check that the Csm_MacVerify stub was called.
      c06. Check that the GetRxFreshness stub was called twice (second call is the retry attempt).
      c07. Check that the VerificationStatus was called
           with the expected result (SECOC_VERIFICATIONFAILURE).
      c08. Set the GetRxFreshness stub return value back to SECOC_E_OK.
      c09. Set the Csm_MacVerify stub return value back to E_OK.
      c10. Call the main function in order to retry the verification procedure.
      c11. Check that the GetRxFreshness stub was called once.
      c12. Check that the Csm_MacVerify stub was called once.
      c13. Check that the PduR_SecOCTpRxIndication stub was called once.
      c14. Check that the VerificationStatus was called with
           the expected result (SECOC_VERIFICATIONSUCCESS).
    Run the verification procedure, when the retry attempts to obtain the freshness value after
    the MAC verification failed gets the return value SECOC_E_BUSY:
      d01. Set the Csm_MacVerify stub result to E_NOT_OK.
      d02. Execute the PDU reception procedure.
      d03. Call the main function once start the verification procedure.
      d04. Check that the Csm_MacVerify stub was called.
      d05. Check that the GetRxFreshness stub was called twice.
      d06. Check that the VerificationStatus was called with
           the expected result (SECOC_VERIFICATIONFAILURE).
      d07. Set the GetRxFreshness return value to SECOC_E_BUSY.
      d08. Call the main function several times.
      d09. Check that the GetRxFreshness stub was called until the threshold is reached.
      d10. Check that the Csm_MacVerify stub was called only once as the procedure is not passing
           over the query for the freshness value.
      d11. Check that the PduR_SecOCRxIndication stub was not called as the verification failed.
      d12. Set the GetRxFreshness return value back to SECOC_E_OK.
      d13. Set the Csm_MacVerify stub result back to E_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00236</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00245</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00248_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00256</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91001_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00242</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00236_BUSY</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1266</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_08_TP_RX_VERFAILED_RETVAL_NOTOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SwcFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>346</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the MAC verification result is E_NOT_OK and
    the query for freshness value operation returns SECOC_E_NOT_OK.
  
Test Object: 
    GetRxFreshness via RTE.
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;Authentication build counter and the authentication verify attempt
                counter &gt; 0. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set the GetRxFreshness and the Csm_MacVerify stubs callout functions.
    Run the verification procedure of an secured I-PDU successfully:
      b01. Execute the verification procedure.
      b02. Check that the GetRxFreshness stub was called.
      b03. Check that the Csm_MacVerify stub was called.
      b04. Check that the PduR_SecOCTpRxIndication stub was called.
      b05. Check that the VerificationStatus was called with
           the expected result (SECOC_VERIFICATIONSUCCESS).
    Run the verification procedure, when retry attempt is initiated
    the GetRxFreshness returns SECOC_E_NOT_OK:
      c01. Set the GetRxFreshness stub return value for the second call
           to SECOC_E_NOT_OK (retry attempt).
      c02. Set the Csm_MacVerify stub result to E_NOT_OK.
      c03. Execute the PDU reception procedure.
      c04. Call the main function once start the verification procedure.
      c05. Check that the Csm_MacVerify stub was called.
      c06. Check that the GetRxFreshness stub was called twice (second call is the retry attempt).
      c07. Check that the VerificationStatus was called with
           the expected result (SECOC_FRESHNESSFAILURE).
      c08. Set the GetRxFreshness stub return value back to E_OK.
      c09. Set the Csm_MacVerify stub result back to E_OK.
      c10. Call the main function several times.
      c11. Check that the GetRxFreshness stub was not called as the verification procedure failed.
      c12. Check that the Csm_MacVerify stub was not called as the verification procedure failed.
      c13. Check that the PduR_SecOCTpRxIndication stub was not called with the result
            E_NOT_OK as the verification failed.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00245</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00248_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00256</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91001_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00242</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00236_BUSY</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1267</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_06_TP_RX_VER</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SwcFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>439</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the GetRxFreshnessAuthData function.
  
Test Object: 
    GetRxFreshnessAuthData via RTE.
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;Authentic data sent to FvM. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set the Csm_MacVerify stub callout function.
    Run the verification procedure of an secured I-PDU successfully:
      b01. Execute the verification procedure.
      b02. Check that the GetRxFreshnessAuthData stub was called.
      b03. Check that the Csm_MacVerify stub was called.
      b04. Check that the PduR_SecOCTpRxIndication stub was called.
      b05. Check that the VerificationStatus was called with
           the expected result (SECOC_VERIFICATIONSUCCESS).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1268</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_BUSY</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SwcFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>492</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module during the authentication procedure,
    when the query for the freshness value operation returns SECOC_E_BUSY.
  
Test Object: 
    GetTxFreshness via RTE.
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;Authentication build counter and the authentication verify attempt
                counter &gt; 0. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set the GetTxFreshness and the Csm_MacGenerate stubs callout functions.
    Run the authentication procedure of an authentic I-PDU successfully:
      b01. Execute the authentication procedure.
      b02. Check that the GetTxFreshness stub was called.
      b03. Check that the Csm_MacGenerate stub was called.
      b04. Check that PduR_SecOCTransmit stub was called.
      b05. Check that SPduTxConfirmation stub was called.
      b06. Call the SecOC_Init to reset the SecOC module for the next test sequence.
    Run the authentication procedure, the query for the freshness value always returns SECOC_E_BUSY:
      c01. Set the GetTxFreshness stub return value to SECOC_E_BUSY.
      c02. Call the SecOC_Transmit to hand over the authentic PDU and
           to indicate the SecOC module to start the authentication procedure.
      c03. Call the main function several times.
      c04. Check that the GetTxFreshness stub was called until the threshold is reached.
      c05. Check that the Csm_MacGenerate stub was not called as the query for
           the freshness value failed.
    Run the authentication procedure, the query for the freshness value initial attempt
    returns SECOC_E_BUSY:
      d01. Call the SecOC_Transmit to hand over the authentic PDU and
           to indicate the SecOC module to start the authentication procedure.
      d02. Call the main function until the GetTxFreshness stub was called once.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was not called as the GetTxFreshness returns
           SECOC_E_BUSY and the retry will be triggered on the next main function.
      d05. Set the GetTxFreshness stub return value back to SECOC_E_OK.
      d06. Call the main function to retry the authentication procedure.
      d07. Check that the GetTxFreshness stub was called again.
      d08. Check that the Csm_MacGenerate stub was called.
      d09. Check that the PduR_SecOCTransmit stub was called.
      d10. Check that SPduTxConfirmation stub was called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00225</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>288</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91001_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1269</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_07_TP_TX_AUTHFAILED_RETVAL_NOTOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SwcFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>590</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module during the authentication procedure,
    when the query for the freshness value operation returns SECOC_E_NOT_OK.
  
Test Object: 
    GetTxFreshness via RTE.
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;Authentication build counter and the authentication verify attempt
                counter &gt; 0. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set the GetTxFreshness stubs callout functions.
    Run the authentication procedure of an authentic I-PDU successfully:
      b01. Execute the authentication procedure.
      b02. Check that the GetTxFreshness stub was called.
      b03. Check that the Csm_MacGenerate stub was called.
      b04. Check that PduR_SecOCTransmit stub was called.
      b05. Check that SPduTxConfirmation stub was called.
      b06. Call the SecOC_Init to reset the SecOC module for the next test sequence.
    Run the authentication procedure, the query for the freshness value always
    returns SECOC_E_NOT_OK:
      c01. Set the GetTxFreshness stub return value to SECOC_E_NOT_OK.
      c02. Call the SecOC_Transmit to hand over the authentic PDU and
           to indicate the SecOC module to start the authentication procedure.
      c03. Call the main function several times.
      c04. Check that the GetTxFreshness stub was called until the threshold is reached.
      c05. Check that the Csm_MacGenerate stub was not called as the query for
           the freshness value failed.
    Run the authentication procedure, the query for the freshness value initial attempt
    returns SECOC_E_NOT_OK:
      d01. Call the SecOC_Transmit to hand over the authentic PDU and
           to indicate the SecOC module to start the authentication procedure.
      d02. Call the main function until the GetTxFreshness stub was called once.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was not called as the GetTxFreshness returns
           SECOC_E_NOT_OK and the retry will be triggered on the next main function.
      d05. Set the GetTxFreshness stub return value back to SECOC_E_OK.
      d06. Call the main function to retry the authentication procedure.
      d07. Check that the GetTxFreshness stub was called again.
      d08. Check that the Csm_MacGenerate stub was called.
      d09. Check that the PduR_SecOCTransmit stub was called.
      d10. Check that SPduTxConfirmation stub was called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00225</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00079_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>288</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91001_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1270</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RXTX_SWCFRESHNESSINTERFACES_14_TP_TX_AUTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_RxTx_SwcFreshnessInterfaces/source/application/Tests.c</sourcefile>
      <sourceline>689</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the GetTxFreshnessTruncData function.
  
Test Object: 
    GetTxFreshnessTruncData via RTE.
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetTxFreshnessTruncData stub callout function and the freshness value
        provided by the function.
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    05. Call SecOC_Transmit to start the authentication procedure.
    06. Call the main function in order to execute the authentication procedure.
    07. Check that the layout shaping function was called with the correct ID.
    08. Check that the GetTxFreshnessTruncData stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called once.
    14. Check that the provided Secured I-PDU is the expected one.
    15. Call SecOC_TpTxConfirmation to finished the authentication procedure.
    16. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1271</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_12_TP_61BITFRESHNESSVALUE_DYNAMICLEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>39</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via TP
Test Description: 
    This test case checks the correct reception and verification of an secured I-Pdu
    via transport protocol when the freshness value length is not a multiple of 8 and
    the freshness value is not truncated.
    This test also checks if the SecOC correctly handles the "merged byte" which contains
    the freshness value and the authenticator if the freshness value length is not a multiple
    of 8.
    This test also check if the SecOC correctly handles the dynamic length of the authentic part
    from the secured PDU when the StartOfReception is called again (the same ID, different payload)
    before ongoing procedure is finished.
  
Test Object: 
    SecOC_StartOfReception,
    SecOC_CopyRxData,
    SecOC_TpRxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Tp. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    07. Set PduR_SecOCTpCopyRxData stub callout function.
    08. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module.
    09. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was successfully performed.
    10. Call the SecOC_TpRxIndication to notify the SecOC module that the first Secured I-PDU
        was send and the verification procedure can be started.
    11. Call the main function in order to start the verification procedure.
    12. Check that the upper layer was called with the expected PDU ID and length.
    13. Check that the GetRxFreshness stub was called once.
    14. Check that the Csm_MacVerify stub was called once.
    15. Check that the job ID is for Csm_MacVerify.
    16. Check that the provided data and data length are the expected ones.
    17. Check that the provided MAC and MAC length are the expected ones.
    18. Prepare the next secured I-PDU that needs to be authenticated, the authentic part is
        smaller than the maximum configured value.
    19. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module for the second secured PDU.
    20. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    21. Call the main function in order to finish the verification procedure.
    22. Check that the authenticated I-PDU is the expected one.
    23. Check that the upper layer was called with the expected PDU ID and operation result.
    24. Set the length of the second PDU.
    25. Call the SecOC_StartOfReception for the second secured PDU (with smaller authentic data
        size) and check that the request was accepted by the SecOC module.
    26. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was successfully performed.
    27. Call the SecOC_TpRxIndication to notify the SecOC module that the second Secured I-PDU
        was send and the verification procedure can be started.
    28. Call the main function in order to start the verification procedure.
    29. Check that the upper layer was called with the expected PDU ID and length.
    30. Check that the GetRxFreshness stub was called once.
    31. Check that the Csm_MacVerify stub was called once.
    32. Check that the job ID is for Csm_MacVerify.
    33. Check that the provided data and data length are the expected ones.
    34. Check that the provided MAC and MAC length are the expected ones.
    35. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    36. Call the main function in order to finish the verification procedure.
    37. Check that the authenticated I-PDU is the expected one.
    38. Check that the upper layer was called with the expected PDU ID and operation result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00085</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00046_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>595</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>604</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>605</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1272</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_03_TP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>170</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via TP
Test Description: 
    This test case checks the correct reception and verification of an secured I-Pdu via transport
    protocol. It also checks if the SecOC retries the verification if the crypto modules return
    BUSY.
  
Test Object: 
    SecOC_StartOfReception,
    SecOC_CopyRxData,
    SecOC_TpRxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Tp. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    07. Set PduR_SecOCTpCopyRxData stub callout function.
    08. Call the SecOC_StartOfReception with an invalid PDU ID and check that the request
        was not accepted by the SecOC module.
    09. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module.
    10. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was successfully performed.
    11. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    12. Call the main function several times until the Csm_MacVerify was called three times,
        all the attempts were rejected by Csm stub by returning CRYPTO_E_BUSY.
    13. Check that the upper layer was called with the expected PDU ID and length.
    14. Check that the GetRxFreshness stub was called once.
    15. Check that the Csm_MacVerify stub was called once.
    16. Check that the job ID is for Csm_MacVerify.
    17. Check that the provided data and data length are the expected ones.
    18. Check that the provided MAC and MAC length are the expected ones.
    19. Call the main function in order to retry the verification.
    20. Call the main function in order to finish the verification procedure.
    21. Check that the Csm_MacVerify stub was called once.
    22. Check that the job ID is for Csm_MacVerify.
    23. Check that the provided data and data length are the expected ones.
    24. Check that the provided MAC and MAC length are the expected ones.
    25. Check that the authenticated I-PDU is the expected one.
    26. Check that the upper layer was called with the expected PDU ID and operation result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00085</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00046_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1273</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_14_TP_12BITFRESHNESSVALUE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>273</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via TP
Test Description: 
    This test case checks the correct reception and verification of an secured I-Pdu via transport
    protocol if the freshness value length is not a multiple of 8.
    It also checks if the SecOC retries the verification if the crypto modules return
    BUSY.
  
Test Object: 
    SecOC_StartOfReception,
    SecOC_CopyRxData,
    SecOC_TpRxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Tp. &lt;/listitem&gt;
      &lt;listitem&gt;Freshness value truncated. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    07. Set PduR_SecOCTpCopyRxData stub callout function.
    08. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module.
    09. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and
        check that operation was successfully performed.
    10. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    11. Call the main function several times until the Csm_MacVerify was called twice,
        as the first attempt was rejected by Csm stub by returning CRYPTO_E_BUSY.
    12. Check that the upper layer was called with the expected PDU ID and length.
    13. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    14. Check that the GetRxFreshness stub was called once.
    15. Check that the Csm_MacVerify stub was called twice.
    16. Check that the job ID is for Csm_MacVerify.
    17. Check that the provided data and data length are the expected ones.
    18. Check that the provided MAC and MAC length are the expected ones.
    19. Call the main function in order to finish the verification procedure.
    20. Check that the authenticated I-PDU is the expected one.
    21. Check that the upper layer was called with the expected PDU ID and operation result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00085</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00046_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1274</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>374</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via TP
Test Description: 
    This test case checks the correct reception and verification of an secured I-Pdu via transport
    protocol if the freshness value length is not a multiple of 8.
    It also checks if the SecOC retries the verification if the crypto modules return
    BUSY.
  
Test Object: 
    SecOC_StartOfReception,
    SecOC_CopyRxData,
    SecOC_TpRxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Tp. &lt;/listitem&gt;
      &lt;listitem&gt;Freshness value truncated. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    07. Set PduR_SecOCTpCopyRxData stub callout function.
    08. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module.
    09. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and
        check that operation was successfully performed.
    10. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    11. Call the main function several times until the Csm_MacVerify was called twice,
        as the first attempt was rejected by Csm stub by returning CRYPTO_E_BUSY.
    12. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    13. Check that the upper layer was called with the expected PDU ID and operation result.
    14. Check that the GetRxFreshness stub was called once.
    15. Check that the Csm_MacVerify stub was called twice.
    16. Check that the job ID is for Csm_MacVerify.
    17. Check that the provided data and data length are the expected ones.
    18. Check that the provided MAC and MAC length are the expected ones.
    19. Call the main function in order to finish the verification procedure.
    20. Check that the authenticated I-PDU is the expected one.
    21. Check that the upper layer was called with the expected PDU ID and operation result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00085</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00046_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1275</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_14_TP_TPSDULENGTHZERO_ZEROSECPDULEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>474</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via TP
Test Description: 
    This test case checks the correct reception and verification of an secured I-Pdu via transport
    protocol if the freshness value length is not a multiple of 8.
    It also checks if the SecOC retries the verification if the crypto modules return
    BUSY.
  
Test Object: 
    SecOC_StartOfReception,
    SecOC_CopyRxData,
    SecOC_TpRxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Tp. &lt;/listitem&gt;
      &lt;listitem&gt;Freshness value truncated. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    07. Set PduR_SecOCTpCopyRxData stub callout function.
    08. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module.
    09. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and
        check that operation was successfully performed.
    10. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    11. Call the main function several times until the Csm_MacVerify was called twice,
        as the first attempt was rejected by Csm stub by returning CRYPTO_E_BUSY.
    12. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    13. Check that the GetRxFreshness stub was not called .
    14. Check that the Csm_MacVerify stub was not called .
    15. Check that the upper layer stub was not called .

  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00085</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00046_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1276</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_09_IF_CSM</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>569</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    This test case checks the correct reception and verification of an secured I-Pdu via Interface.
    CSM Module is used to calculate the MAC. SecOCFreshnessValue is not truncated.
  
Test Object: 
    SecOC_RxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Interface. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    03. Set Csm_MacVerify stub callout function to NULL_PTR.
    04. Prepare the secured I-PDU that needs to be authenticated.
    05. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    06. Set PduR_SecOCRxIndication stub callout function.
    07. Initialize the authentic PDU with Length smaller than the sum of
        Freshness value truncated and the Authentic Info truncated and Check that
        the GetRxFreshness and Csm_MacVerify stubs were not called.
    08. Initialize PDU Payload.
    09. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    10. Call the main function in order to start the verification procedure.
    11. Check that the GetRxFreshness stub was called once.
    12. Check that the Csm_MacVerify stub was called once.
    13. Check that the job ID is for Csm_MacVerify.
    14. Check that the provided data and data length are the expected ones.
    15. Check that the provided MAC and MAC length are the expected ones.
    16. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    17. Call the main function in order to finish the verification procedure.
    18. Check that the PduR_SecOCRxIndication stub was called once.
    19. Check that the authenticated I-PDU is the expected one.
    20. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00079</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00046_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00138_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1277</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_10_IF_FRESHNESS_ZERO_MAC_FAILS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>663</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    This test case checks the correct reception and verification of an secured I-Pdu via Interface
    when freshness value lenght is configured with value 0 and the MAC verification was executed
    but the result was not equal CRYPTO_E_VER_OK.
  
Test Object: 
    SecOC_RxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Interface. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function to NULL_PTR and
        the verification result to CRYPTO_E_VER_NOT_OK
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    07. Set PduR_SecOCRxIndication stub callout function.
    08. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    09. Call the main function in order to start the verification procedure.
    10. Check that the GetRxFreshness stub was not called as the PDU freshness length
        is configured with the value 0.
    11. Check that the Csm_MacVerify stub was called once.
    12. Check that the job ID is for Csm_MacVerify.
    13. Check that the provided data and data length are the expected ones.
    14. Check that the provided MAC and MAC length are the expected ones.
    15. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    16. Call the main function several times.
    17. Check that the PduR_SecOCRxIndication stub was not called as the verification result was
        a negative one and the freshness value is not used.
    18. Check that the GetRxFreshness stub was not called as the PDU freshness length
        is configured with the value 0, the MAC verification failed.
    19. Set Csm_MacVerify stub verification result back to CRYPTO_E_VER_OK.
    20. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    21. Call the main function in order to start the verification procedure.
    22. Check that the GetRxFreshness stub was not called as the PDU freshness length
        is configured with the value 0.
    23. Check that the Csm_MacVerify stub was called once.
    24. Check that the job ID is for Csm_MacVerify.
    25. Check that the provided data and data length are the expected ones.
    26. Check that the provided MAC and MAC length are the expected ones.
    27. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    28. Call the main function in order to finish the verification procedure.
    29. Check that the PduR_SecOCRxIndication stub was called once.
    30. Check that the authenticated I-PDU is the expected one.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00046_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1278</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_03_TP_UNIQUEMAC</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>770</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test MAC verification on receiver side is unique
Test Description: 
    This test case checks if the Mac verification of each received message is performed exactly
    once.
  
Test Object: 
    SecOC_StartOfReception,
    SecOC_CopyRxData,
    SecOC_TpRxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via TP. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function to NULL_PTR.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    07. Call SecOC_TpRxIndication before SecOC_StartOfReception.
    08. Call the main function several times.
    09. Check that the GetRxFreshness and the Csm_MacVerify stub were not called.
    10. Call the SecOC_StartOfReception and check that the request was accepted.
    11. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and
        check that operation was successfully performed.
    12. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    13. Call the main function until the Csm_MacVerify stub is called,
        the attempt was rejected by Csm stub by returning CRYPTO_E_BUSY.
    14. Check that the upper layer was called with the expected PDU ID and length.
    15. Check that the GetRxFreshness stub was called once.
    16. Check that the Csm_MacVerify stub was called once.
    17. Check that the job ID is for Csm_MacVerify.
    18. Check that the provided data and data length are the expected ones.
    19. Check that the provided MAC and MAC length are the expected ones.
    20. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    21. Call the main function in order to finish the verification procedure.
    22. Check that the authenticated I-PDU is the expected one.
    23. Check that the upper layer was called with the expected PDU ID and operation result.
    24. Call the main function several times.
    25. Check that the GetRxFreshness and the Csm_MacVerify stubs were not called again.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1279</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_03_TP_SYNCATTEMPTS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>861</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test of  SecOCFreshnessCounterSyncAttempts
Test Description: 
    This test case checks if the Mac verification is performed as often as
    SecOCFreshnessCounterSyncAttempts is configured.
  
Test Object: 
    SecOC_StartOfReception,
    SecOC_CopyRxData,
    SecOC_TpRxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via TP. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness length provided by the function.
    04. Set Csm_MacVerify stub callout function to NULL_PTR.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    07. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module.
    08. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and
        check that operation was successfully performed.
    09. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    10. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_NOT_OK to simulate
        that the authentication of the secured I-PDU failed.
    11. Execute the retry procedure until the maximum number of attempts has been reached.
     a. Prepare the next freshness value provided for the SecOC module.
     b. Call the main function until the Csm_MacVerify stub was called once.
     c. Prepare the comparison data with the new freshness value,
        expected when the Csm_MacVerify is called by the SecOC module.
     d. Check that the provided data and data length are the expected ones.
     e. Check that the verify attempt counter value is the expected one.
     f. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    12. Check that the upper layer was called with the expected PDU ID and length.
    13. Check that the GetRxFreshness stub was called until the threshold is reached.
    14. Check that the Csm_MacVerify stub was called until the threshold is reached.
    15. Check that the job ID is for Csm_MacVerify.
    16. Set the Csm_MacVerify stub verification result back to CRYPTO_E_VER_NOT_OK.
    17. Call the main function several times.
    18. Check that the upper layer was called with the expected PDU ID and operation result.
    19. Check that the Csm_MacVerify and the GetRxFreshness stubs were not called again.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1280</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_03_TP_INTERNALERROR</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>957</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test SecOC internal error
Test Description: 
    This test case checks if SecOC_CopyRxData returns E_NOT_OK if it is called out of sequence,
    i.e. if SecOC_StartOfReception has not been called before.
  
Test Object: 
    SecOC_CopyRxData
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via TP. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and
        check that operation was rejected as the StartOfReception was not called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1281</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_03_11_IF_TP_VERIFICATIONSTATUS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>1021</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test SecOCVerificationStatusCallout
Test Description: 
    This test case checks if SecOCVerificationStatusCallout works as configured.
  
Test Object: 
    Ts_SecOC_VerificationStatusCallback_01,
    Ts_SecOC_VerificationStatusCallback_02
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
      &lt;listitem&gt;SecOCVerificationStatusCallout is configured as BOTH.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payloads.
      a03. Set GetRxFreshness stub callout function and the freshness value provided by the function
           for the PDU ID 11.
      a04. Set Csm_MacVerify stub callout function.
      a05. Prepare the secured I-PDU 11 that needs to be authenticated.
      a06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
           module for the authentication of the secured PDU ID 11.
      a07. Prepare the secured I-PDU 3 that needs to be authenticated.
      a08. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
           module for the authentication of the secured PDU ID 3.
    Test sequence with the end result SECOC_VERIFICATIONSUCCESS:
      b01. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
           and the verification procedure can be started.
      b02. Call the main function until the Csm_MacVerify stub was called.
      b03. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
           the verification was successful (if the SecOC module use the Csm service in the
           asynchronous mode).
      b04. Check that the GetRxFreshness stub was called once.
      b05. Check that the Csm_MacVerify stub was called once.
      b06. Check that the job ID is for Csm_MacVerify.
      b07. Call the main function until the PduR_SecOCRxIndication stub was called,
           the verification procedure was finished.
      b08. Check that the PduR_SecOCRxIndication stub was called once.
      b09. Check that the VerificationStatus was called with the expected ID and result.
    Test sequence with the end result SECOC_VERIFICATIONFAILURE:
      c01. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
           and the verification procedure can be started.
      c02. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_NOT_OK to simulate
           that the authentication of the secured I-PDU failed.
      c03. Call the main function until the Csm_MacVerify stub was called.
      c04. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
           the verification was finished (if the SecOC module use the Csm service in the
           asynchronous mode).
      c05. Check that the GetRxFreshness stub was called once.
      c06. Check that the Csm_MacVerify stub was called once.
      c07. Check that the job ID is for Csm_MacVerify.
      c08. Call the main function several times.
      c09. Check that the GetRxFreshness and the Csm_MacVerify stubs were not called again.
      c10. Check that the VerificationStatus was called with the expected ID and result.
      c11. Set the Csm_MacVerify stub verification result back to CRYPTO_E_VER_OK.
    Test sequence with the end result SECOC_FRESHNESSFAILURE:
      d01. Set the VerificationStatus callback flags to FALSE.
      d02. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
           and the verification procedure can be started.
      d03. Set the GetRxFreshness stub return value to E_NOT_OK.
      d04. Call the main function until the VerificationStatus was called by the SecOC module.
      d05. Check that the GetRxFreshness stub was called once.
      d06. Check that the Csm_MacVerify stub was not called.
      d07. Check that the VerificationStatus was called with the expected ID and result.
      d08. Set the GetRxFreshness stub return value back to E_OK.
    Test sequence with the end result SECOC_FRESHNESSFAILURE_2:
      e01. Set the VerificationStatus callback flags to FALSE.
      e02. Call the SecOC_StartOfReception and check that the request was accepted
           by the SecOC module.
      e03. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and
           check that operation was successfully performed.
      e04. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
           and the verification procedure can be started.
      e05. Set the Csm_MacVerify stub return value to E_NOT_OK.
      e06. Call the main function until the VerificationStatus was called by the SecOC module.
      e07. Check that the upper layer was called with the expected PDU ID and length.
      e08. Check that the GetRxFreshness stub was called once.
      e09. Check that the Csm_MacVerify stub was called once.
      e10. Check that the VerificationStatus was called with the expected ID and result.
      e11. Set the Csm_MacVerify stub return value back to E_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00160</linksto>
          <dstversion>4</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.EB.Rx.SWS_SecOC_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>669</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1282</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_03_TP_TPERROR</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>1154</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test Tp error of wrong message reception
Test Description: 
    This test case checks if SecOC stops verification and drop the received I-Pdu, in case, if the
    lower layer transport protocol returns with anything else than E_OK.
  
Test Object: 
    SecOC_StartOfReception,
    SecOC_CopyRxData,
    SecOC_TpRxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via TP. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    07. Set PduR_SecOCTpCopyRxData stub callout function.
    08. Call the SecOC_StartOfReception and check that the request was rejected by the SecOC module
        with the return value BUFREQ_E_OVFL as the SduLength.
    09. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module.
    10. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and
        check that operation was rejected with the return value BUFREQ_E_NOT_OK as the SduLength
        is larger that the expected length of the PDU.
    11. Prepare the PDU for the authentication with an valid SduLength.
    12. Call the SecOC_Init to reset the SecOC module for the next test sequence.
    13. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module.
    14. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was successfully performed.
    15. Call the SecOC_TpRxIndication with a wrong ID.
    16. Call the main function several times.
    17. Check that the GetRxFreshness and the Csm_MacVerify stub were not called.
    18. Call the SecOC_TpRxIndication with the result E_NOT_OK to notify the SecOC module
        that an error was encountered during the transmission of the Secured I-PDU.
    19. Call the main function several times.
    20. Check that the GetRxFreshness and the Csm_MacVerify stub were not called.
    21. Call the SecOC_StartOfReception and check that the request was accepted
        by the SecOC module.
    22. Call the SecOC_CopyRxData with a wrong ID and check that the operation
        was not successful.
    23. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was successfully performed.
    24. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    25. Call the main function in order to start the verification procedure.
    26. Check that the upper layer was called with the expected PDU ID and length.
    27. Check that the GetRxFreshness stub was called once.
    28. Check that the Csm_MacVerify stub was called once.
    29. Check that the job ID is for Csm_MacVerify.
    30. Check that the provided data and data length are the expected ones.
    31. Check that the provided MAC and MAC length are the expected ones.
    35. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    33. Call the main function in order to finish the verification procedure.
    34. Check that the authenticated I-PDU is the expected one.
    35. Check that the upper layer was called with the expected PDU ID and operation result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1283</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_09_IF_NOINIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>1263</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test SecOC_MainFunctionRx return
Test Description: 
    This test case checks if the SecOC_MainFunctionRx simply returns if there was no
    Sec_Init before. This test case checks if SecOC_CopyRxData fail if SecOC is not yet initialized.
  
Test Object: 
    SecOC_RxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Interface. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. De-initialize the SecOC module and initialize the stubs.
    02. Initialize the authentic PDU with Length 0 and  Check that the
     GetRxFreshness and Csm_MacVerify stubs were not called.
    03. Initialize PDU Payload.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    07. Call the main function several times.
    08. Check that the GetRxFreshness and the ExtFreshness stubs were not called.
    09. Call the SecOC_StartOfReception and check that the request was rejected by the SecOC module.
    10. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and
        check that the operation was rejected by the SecOC module.
    11. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    12. Call the SecOC_CsmMacVerCallback and check that the operation was rejected
        by the SecOC module.
    13. Call the main function several times.
    14. Check that the GetRxFreshness and the ExtFreshness stubs were not called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00172</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1284</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_03_TP_COPYERROR</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>1338</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test Tp error of wrong message reception
Test Description: 
    This test case checks if SecOC rejects calls of functions (eg. SecOC_StartOfReception,
    SecOC_CopyRxData) if the input data is invalid or the call sequence is wrong.
  
Test Object: 
    SecOC_StartOfReception,
    SecOC_CopyRxData,
    SecOC_TpRxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via TP. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    07. Call the SecOC_StartOfReception and check that the request was accepted
        by the SecOC module.
    08. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and
        check that operation was rejected with the return value BUFREQ_E_NOT_OK
        as the info parameter is set to NULL_PTR.
    09. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and
        check that operation was rejected with the return value BUFREQ_E_NOT_OK
        as the bufferSizePtr is set to NULL_PTR.
    10. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was successfully performed.
    11. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    12. Call the main function until the Csm_MacVerify is called once,
        attempt that is rejected by the Csm module.
    13. Check that the upper layer was called with the expected PDU ID and length.
    14. Check that the GetRxFreshness stub was called once.
    15. Check that the Csm_MacVerify stub was called once.
    16. Check that the job ID is for Csm_MacVerify.
    17. Call the SecOC_StartOfReception with the same configuration ID and
        check that the request was not accepted by the SecOC module.
    18. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was not successfully performed.
    19. Call the SecOC_Init to reset the module for the next test sequence.
    20. Call the SecOC_StartOfReception and check that the request was accepted
        by the SecOC module.
    21. Prepare the PDU Payload with the SduLength equal to 0 and SduDataPtr as NULL_PTR.
    22. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module
        and check that the operation was accepted.
    23. Check that the SecOC module provided the expected length for the available buffer size.
    24. Call the SecOC_Init to reset the module for the next test sequence.
    25. Call the SecOC_StartOfReception and check that the request was accepted
        by the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1285</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_03_TP_FREEUSEDBUFFER</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>1437</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test SecOC frees all buffer with Csm
Test Description: 
    Tests if the SecOC module frees all buffer after a internal error (eg. MAC verification fails)
    or another transmission of a Secured I-PDU with the same Pdu Identifier has been initiated via
    SecOC_StartOfReception.
  
Test Object: 
    SecOC_RxVerifivationStart,
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via TP. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set GetRxFreshness stub callout function and the freshness value provided
           by the function.
      a04. Set Csm_MacVerify stub callout function.
      a05. Prepare the secured I-PDU that needs to be authenticated.
      a06. Prepare the comparison data expected when the Csm_MacVerify is called
           by the SecOC module.
      a07. Set PduR_SecOCRxIndication stub callout function.
    Execute the verification procedure successfully:
      b01. Call TS_IntSimulateSegReception to hand over the secured I-PDU to the SecOC module and
           and check that the operation was successfully performed.
      b02. Call the main function in order to start the verification procedure.
      b03. Check that the upper layer was called with the expected PDU ID and length.
      b04. Check that the GetRxFreshness stub was called once.
      b05. Check that the Csm_MacVerify stub was called once.
      b06. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
           the verification was successful (if the SecOC module use the Csm service in the
           asynchronous mode).
      b07. Call the main function in order to finish the verification procedure.
      b08. Check that the authenticated I-PDU is the expected one.
      b09. Check that the upper layer was called with the expected PDU ID and operation result.
      b10. Call the SecOC_StartOfReception with the same configuration ID
           to obtain the SecOC module available buffer size.
      b11. Check that the SecOC internal buffer was freed up after the authenticated I-PDU
           was passed to the PduR.
      b12. Call the SecOC_Init to reset the SecOC module for the next test sequence.
    Execute the verification procedure that fails as the Csm_MacVerify returns E_NOT_OK:
      c01. Set the Csm_MacVerify stub return value to E_NOT_OK.
      c02. Call TS_IntSimulateSegReception to hand over the secured I-PDU to the SecOC module and
           and check that the operation was successfully performed.
      c03. Call the main function in order to start the verification procedure.
      c04. Check that the upper layer was called with the expected PDU ID and length.
      c05. Check that the GetRxFreshness stub was called once.
      c06. Check that the Csm_MacVerify stub was called once.
      c07. Call the main function several times.
      c08. Check that the upper layer was called with the expected PDU ID and operation result.
      c09. Call the SecOC_StartOfReception with the same configuration ID
           to obtain the SecOC module available buffer size.
      c10. Check that the SecOC internal buffer was freed up after the authentication of
           the secured I-PDU failed.
      c11. Set the Csm_MacVerify stub return value back to E_OK and reset the call counter.
      c12. Call the SecOC_Init to reset the SecOC module for the next test sequence.
    Execute the verification procedure that is canceled by the PduR:
      d01. Call the SecOC_StartOfReception and check that the request was accepted
           by the SecOC module.
      d02. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
           check that operation was successfully performed.
      d03. Call the main function several times.
      d04. Check that the GetRxFreshness and the Csm_MacVerify stub were not called.
      d05. Call the SecOC_StartOfReception with the same configuration ID
           to obtain the SecOC module available buffer size.
      d06. Check that the SecOC internal buffer was freed up after the transmission was canceled
           when the SecOC_TpRxIndication was called with the result E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00087</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1286</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_08_IF_CsmSignatureVerify</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>1550</sourceline>
      <version>1</version>
      <description>Test Synopsis: Test SecOC SignatureVerify service
Test Description: 
    This test case checks the SecOC execution when CSM Signature Verify service is used.
  
Test Object: 
    Csm_SignatureVerify
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;The SecOCRxAuthServiceConfigRef is referencing a configured job which has CsmSignatureVerify as a primitive.&lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
    01. Initialize the SecOC module and the stubs
    02. Set GetRxFreshness stub callout function and the freshness value provided by the function
    03. Set Csm_SignatureVerify stub callout function to TS_Csm_SignatureVerify_Callout
    04. Prepare the secured I-PDU that needs to be authenticated
    05. Prepare the comparison data expected when the Csm_SignatureVerify is called
        by the SecOC module
    06. Set PduR_SecOCRxIndication stub callout function
    07. Initialize PDU Payload
    08. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started
    09. Call the main function in order to start the verification procedure
        for all queued PDUs
    10. Check that the GetRxFreshness stub was called once
    11. Check that the Csm_SignatureVerify stub was called once
    12. Check that the job ID is for Csm_SignatureVerify
    13. Check that the provided data and data length are the expected ones
    14. Check that the provided Signature and Signature length are the expected ones
    15. Check that the PduR_SecOCRxIndication stub was called once
    16. Check that the authenticated I-PDU is the expected one
    17. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1287</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_15_TP_CSMRETVALNOTOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>1612</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test SECOC_FRESHNESSFAILURE
Test Description: 
    This test case checks the SecOC execution when CSM stub return value is not ok.
  
Test Object: 
    SecOC_StartOfReception,
    SecOC_CopyRxData,
    SecOC_TpRxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via TP. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set Csm_MacVerify stub callout function as NULL_PTR.
      a04. Set GetRxFreshness stub callout function and the freshness value provided
           by the function.
      a05. Prepare the secured I-PDU that needs to be authenticated.
    Execute the verification procedure during which the Csm_MacVerify stub returns E_NOT_OK
    for the first attemp:
      b01. Call the SecOC_StartOfReception and check that the request was accepted
           by the SecOC module.
      b02. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
           check that operation was successfully performed.
      b03. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
           and the verification procedure can be started.
      b04. Set the Csm_MacVerify stub return value to E_NOT_OK.
      b05. Call the main function in order to start the verification procedure.
      b06. Check that the upper layer was called with the expected PDU ID and length.
      b07. Check that the GetRxFreshness stub was called once.
      b08. Check that the Csm_MacVerify stub was called once.
      b09. Set the Csm_MacVerify stub return value back to E_OK.
      b10. Call the main function once in order to start the retry attempt for
           the verification procedure.
      b11. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
           the verification was successful (if the SecOC module use the Csm service in the
           asynchronous mode).
      b12. Call the main function until the PduR_SecOCRxIndication stub is called.
      b13. Check that the Csm_MacVerify stub was called again.
      b14. Check that the authenticated I-PDU is the expected one.
      b15. Check that the upper layer was called with the expected PDU ID and operation result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1288</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_15_TP_CSMCALLBACKNOTOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>1701</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test SECOC_FRESHNESSFAILURE
Test Description: 
    This test case checks the SecOC execution when CSM stub callback value is not ok.
  
Test Object: 
    SecOC_StartOfReception,
    SecOC_CopyRxData,
    SecOC_TpRxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via TP. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set Csm_MacVerify stub callout function as NULL_PTR.
      a04. Set GetRxFreshness stub callout function and the freshness value provided
           by the function.
      a05. Prepare the secured I-PDU that needs to be authenticated.
    Execute the verification procedure during which the Csm_MacVerify callback result is E_NOT_OK
    for the first attemp:
      b01. Call the SecOC_StartOfReception and check that the request was accepted
           by the SecOC module.
      b02. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
           check that operation was successfully performed.
      b03. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
           and the verification procedure can be started.
      b04. Call the main function in order to start the verification procedure.
      b05. Check that the upper layer was called with the expected PDU ID and length.
      b06. Call the SecOC_CopyRxData during the processing the PDU and check that the request
           was rejected.
      b07. Check that the ExtFreshness stub was called again.
      b08. Check that the Csm_MacVerify stub was called again.
      b09. Call the SecOC_CsmMacVerCallback with the result to E_NOT_OK to indicate that
           the verification failed.
      b10. Call the main function in order to process the Csm callback result.
      b11. Call the main function start the verification retry.
      b12. Check that the Csm_MacVerify stub was called again.
      b13. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
           the verification was successful.
      b14. Call the main function until the PduR_SecOCTpRxIndication stub is called.
      b15. Check that the authenticated I-PDU is the expected one.
      b16. Check that the upper layer was called with the expected PDU ID and operation result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1289</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_15_TP_CSMRESULTNOTOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>1791</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test SECOC_FRESHNESSFAILURE
Test Description: 
    This test case checks the SecOC execution when CSM stub result value is not ok.
  
Test Object: 
    SecOC_StartOfReception,
    SecOC_CopyRxData,
    SecOC_TpRxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via TP. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set Csm_MacVerify stub callout function as NULL_PTR.
      a04. Set GetRxFreshness stub callout function and the freshness value provided
           by the function.
      a05. Prepare the secured I-PDU that needs to be authenticated.
   Execute the verification procedure during which the stub verification result is CRYPTO_E_VER_NOT_OK
   for the first attempt:
      b01. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_NOT_OK.
      b02. Call the SecOC_StartOfReception and check that the request was accepted
           by the SecOC module.
      b03. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
           check that operation was successfully performed.
      b04. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
           and the verification procedure can be started.
      b05. Set the Csm_MacVerify stub return value to CRYPTO_E_VER_NOT_OK.
      b06. Call the main function in order to start the verification procedure.
      b07. Check that the upper layer was called with the expected PDU ID and length.
      b08. Check that the Csm_MacVerify stub was called once.
      b10. Call the main function until the PduR_SecOCRxIndication stub is called.
      b11. Check that the Csm_MacVerify stub was called once.
      b12. Check that the authenticated I-PDU is the expected one.
      b13. Check that the upper layer was called with the expected PDU ID and operation result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1290</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_15_TP_SECOCBUSY</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>1874</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test SECOC_FRESHNESSFAILURE
Test Description: 
    This test case checks the SecOC execution when CSM is BUSY in the
    verification process.
  
Test Object: 
    SecOC_StartOfReception,
    SecOC_CopyRxData,
    SecOC_TpRxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via TP. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set Csm_MacVerify stub callout function as NULL_PTR.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module.
    07. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was successfully performed.
    08. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    09. Set the Csm_MacVerify stub return value to E_NOT_OK (handled by SecOC module as busy).
    10. Call the main function until the Csm stub was called three times.
    11. Check that the upper layer was called with the expected PDU ID and length.
    12. Check that the GetRxFreshness stub was called once.
    13. Check that the Csm_MacVerify stub was called three times.
    14. Check that the VerificationStatus was called with the expected ID and
        result (SECOC_FRESHNESSFAILURE).
    15. Set the Csm_MacVerify stub return value back to E_OK.
    16. Call the main function until the Csm stub is called again.
    17. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    18. Check that the Csm_MacVerify stub was called again.
    19. Call the main function until the PduR_SecOCTpRxIndication was called.
    20. Check that the authenticated I-PDU is the expected one.
    21. Check that the upper layer was called with the expected PDU ID and operation result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1291</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_15_TP_RECSTRATEGY_REPLACE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>1957</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via TP
Test Description: 
    This test case checks the behavior of the SecOC module is busy processing a secured PDU
    and it receives a second secured PDU with the same ID.
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = REPLACE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set Csm_MacVerify stub callout function as NULL_PTR.
      a04. Set GetRxFreshness stub callout function and the freshness value provided
           by the function.
      a05. Prepare the secured I-PDU that needs to be authenticated.
    Execute the verification procedure during which the Csm_MacVerify callback result is E_NOT_OK
    for the first attemp:
      b01. Call the SecOC_StartOfReception and check that the request was accepted
           by the SecOC module.
      b02. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
           check that operation was successfully performed.
      b03. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was sent
           and the verification procedure can be started.
      b04. Call the main function in order to start the verification procedure.
      b05. Check that the upper layer was called with the expected PDU ID and length.
      b06. Check that the ExtFreshness stub was called.
      b07. Check that the Csm_MacVerify stub was called.
      b08. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
           the verification was successful.
      b09. Call the SecOC_StartOfReception and check that the request was accepted
           by the SecOC module.
      b10. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
           check that operation was successfully performed.
      b11. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was sent
           and the verification procedure can be started.
      b12. Call the main function in order to restart the verification procedure.
      b13. Check that the upper layer was called with the expected PDU ID and length.
      b14. Check that the ExtFreshness stub was again called.
      b15. Check that the Csm_MacVerify stub was again called.
      b16. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
           the verification was successful.
      b17. Call the main function until the PduR_SecOCTpRxIndication stub is called.
      b18. Check that the authenticated I-PDU is the expected one.
      b19. Check that the upper layer was called with the expected PDU ID and operation result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1292</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_01_TP_SKIPMACVERIF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>2036</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test Test if the MAC verification is skipped
Test Description: 
    This test checks if the authentic PDU is extracted from the secured PDU and pass to the upper
    layer without performing the MAC verification.
  
Test Object: 
    SecOC_StartOfReception,
    SecOC_CopyRxData,
    SecOC_TpRxIndication,
    SkipVerification
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredRxPduVerification = false &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set Csm_MacVerify stub callout function to NULL_PTR.
    04. Set GetRxFreshness stub callout function to NULL_PTR.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Set PduR_SecOCRxIndication stub callout function.
    07. Set the callout function for reporting the verification result flag to false.
    08. Call the SecOC_StartOfReception and check that the request was accepted
        by the SecOC module.
    09. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and
        check that operation was successfully performed.
    10. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    11. Call the main function in order to start the verification procedure.
    12. Check that the upper layer was called with the expected PDU ID and length.
    13. Check that the GetRxFreshness stub was not called.
    14. Check that the Csm_MacVerify stub was not called.
    15. Check that the authenticated I-PDU is the expected one.
    16. Check that the upper layer was called with the expected PDU ID and operation result.
    17. Check that the callout function for reporting the verification result was not called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00265</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1293</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_04_IF_SECUREDAREA</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>2119</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    This test case checks the correct reception and verification of an secured I-Pdu via Interface.
    Csm Module is used to verify the MAC.
    In this test is used the secured area for Pdu.
  
Test Object: 
    SecOC_RxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Interface. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU with valid Payload data but an invalid lenght value.
    03. Set Csm_MacVerify stub callout function to NULL_PTR
    04. Prepare the secured I-PDU that needs to be authenticated
    05. Prepare the comparation data expected when the Csm_MacVerify is called
        by the SecOC module
    06. Set PduR_SecOCRxIndication stub callout function
    07. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started
    08. Call the main function several time
    09. Check that the GetRxFreshness stub was not called
    10. Check that the Csm_MacVerify stub was not called
    11. Initialize PDU Payload with correct value
    12. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started
    13. Call the main function in order to start the verification procedure
    14. Check that the GetRxFreshness stub was called once
    15. Check that the Csm_MacVerify stub was called once
    16. Check that the job ID is for Csm_MacVerify
    17. Check that the provided data and data length are the expected ones
    18. Check that the provided MAC and MAC length are the expected ones
    19. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode)
    20. Call the main function in order to finish the verification procedure
    21. Check that the PduR_SecOCRxIndication stub was called once
    22. Check that the authenticated I-PDU is the expected one
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00314</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00046_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00311</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00312</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>640</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1294</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_13_IF_SECUREDAREA_LENGTH_ZERO</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>2205</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    This test case checks the correct reception and verification of an secured I-Pdu via Interface.
    CSM Module is used to calculate the MAC. SecOCFreshnessValue is truncated.
    In this test is used the secured area for Pdu.
  
Test Object: 
    SecOC_RxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Interface. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function to NULL_PTR.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparation data expected when the Csm_MacVerify is called by the SecOC module.
    07. Set PduR_SecOCRxIndication stub callout function.
    08. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    09. Call the main function in order to start the verification procedure.
    10. Check that the GetRxFreshness stub was not called as the PDU freshness length
        is configured with the value 0.
    11. Check that the Csm_MacVerify stub was called once.
    12. Check that the job ID is for Csm_MacVerify.
    13. Check that the provided data and data length are the expected ones.
    14. Check that the provided MAC and MAC length are the expected ones.
    15. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    16. Call the main function in order to finish the verification procedure.
    17. Check that the PduR_SecOCRxIndication stub was called once.
    18. Check that the authenticated I-PDU is the expected one.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00046_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>640</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1295</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_12_TP_SECUREDAREA_61BITFRESHNESSVALUE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>2295</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via TP
Test Description: 
    This test case checks the correct reception and verification of an secured I-Pdu
    via transport protocol when the freshness value length is not a multiple of 8 and
    the freshness value is not truncated.
    This test also checks if the SecOC correctly handles the "merged byte" which contains
    the freshness value and the authenticator if the freshness value length is not a multiple
    of 8.
    In this test is used the secured area for Pdu.
  
Test Object: 
    SecOC_StartOfReception,
    SecOC_CopyRxData,
    SecOC_TpRxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via TP. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparation data expected when the Csm_MacVerify is called
        by the SecOC module.
    07. Set PduR_SecOCRxIndication stub callout function.
    08. VP(SecOC.Asr.SWS_SecOC_00181):
        Call the SecOC_StartOfReception with length equal to 0 and check that the
        request was not accepted by the SecOC module.
    09. Call the SecOC_StartOfReception with wrong iD and check that the
        request was not accepted by the SecOC module.
    10. Call the SecOC_StartOfReception with invalid length and check that the
        request was not accepted by the SecOC module.
    11. Initialize PDU Payload with the correct length.
    12. Call the SecOC_StartOfReception and check that the request was accepted
        by the SecOC module.
    13. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was successfully performed.
    14. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    15. Call the main function in order to start the verification procedure.
    16. Check that the upper layer was called with the expected PDU ID and length
    17. Check that the GetRxFreshness stub was called once.
    21. Check that the Csm_MacVerify stub was called once.
    22. Check that the job ID is for Csm_MacVerify.
    23. Check that the provided data and data length are the expected ones.
    24. Check that the provided MAC and MAC length are the expected ones.
    25. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    26. Call the main function in order to finish the verification procedure.
    27. Check that the authenticated I-PDU is the expected one.
    28. Check that the upper layer was called with the expected PDU ID and operation result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00085</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00046_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>595</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00181</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1296</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_09_IF_RECEPTIONVERIFYFAILURE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>2409</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test SECOC_FRESHNESSFAILURE
Test Description: 
    This test case checks whether the SecOC module will not start the verification
    procedure if the SecOC_RxIndication is called with invalid inputs and whether
    verification procedure is stopped when the MacVerify request is rejected by the Csm module.
  
Test Object: 
    SecOC_Rxindication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Interface. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload with correct data but invalid length.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function as NULL_PTR.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    07. Call the SecOC_RxIndication with NULL_PTR as payload and check that
        GetRxFreshness stub and the Csm_MacVerify were not called.
    08. Call the SecOC_RxIndication with a wrong PDU ID and check that the
        GetRxFreshness stub and the Csm_MacVerify were not called.
    09. Call the SecOC_RxIndication with a wrong PDU ID and check that the
        GetRxFreshness stub and the Csm_MacVerify were not called.
    10. Set the PDU Payload with a Length equal to the sum
        of truncated Authentic and truncated Freshness value in byte.
    11. Call the SecOC_RxIndication and check that GetRxFreshness stub and
        the Csm_MacVerify were not called.
    12. Set the length of PDU Payload to correct correct Pdu length.
    13. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    14. Set the Csm_MacVerify stub return value to E_NOT_OK (handled by SecOC module as busy).
    15. Call the main function until the Csm stub was called once.
    16. Check that the GetRxFreshness stub was called once.
    17. Check that the Csm_MacVerify stub was called once.
    18. Set the Csm_MacVerify stub return value back to E_OK.
    19. Call the main function until the Csm stub is called again.
    20. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    21. Check that the Csm_MacVerify stub was called again.
    22. Call the main function until the PduR_SecOCRxIndication was called.
    23. Check that the PduR_SecOCRxIndication stub was called once.
    24. Check that the authenticated I-PDU is the expected one.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1297</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_02_IF_SHAPE_SEC_PDU_LAYOUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>2498</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test if the SecOC handles correctly secured PDU with padding
Test Description: 
    This test case checks if the SecOC module executes the verification procedure correctly
    when the secured PDU contains padding.
  
Test Object: 
    secured PDU with padding
  
Test Precondition: 
    SecOCRxShapeFuncName = Ts_SecOC_RxShapeSecPdu
    SecOCRxUseShapeFunc = enable
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function to NULL_PTR.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    07. Set the padding length that needs to be removed from the secured PDU.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU
        was send and the verification procedure can be started.
    10. Call the main function in order to start the verification procedure.
    11. Check that the layout shaping function was called with the correct ID.
    12. Check that the GetRxFreshness stub was called once.
    13. Check that the Csm_MacVerify stub was called once.
    14. Check that the job ID is for Csm_MacVerify.
    15. Check that the provided data and data length are the expected ones.
    16. Check that the provided MAC and MAC length are the expected ones.
    17. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    18. Call the main function in order to finish the verification procedure.
    19. Check that the authenticated I-PDU is the expected one.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>608</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>610</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00009</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>612</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1298</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_05_IF_FRESHNESS_AUTHDATA</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>2562</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Tests the GetRxFreshnessAuthData function
Test Description: 
    This test case checks the correct reception and verification of an secured I-Pdu
    when the GetRxFreshnessAuthData is used.
  
Test Object: 
    SecOC_GetRxFreshnessAuthData
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOCUseAuthDataFreshness = true &lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthDataFreshnessLen = 17 &lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthDataFreshnessStartPosition = 20 &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetRxFreshnessAuthData stub callout function and the freshness value provided
        by the function.
    03. Set Csm_MacVerify stub callout function to NULL_PTR and
        the verification result to CRYPTO_E_VER_NOT_OK.
    04. Prepare the secured I-PDU that needs to be authenticated.
    05. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    06. Set PduR_SecOCRxIndication stub callout function.
    07. Initialize PDU Payload.
    08. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    09. Call the main function in order to start the verification procedure.
    10. Check that the GetRxFreshnessAuthData stub was called (once for asynchronous and
        twice for synchronous mode).
    11. Check that the PDU part provided through the freshness API is the expected one.
    12. Check that the Csm_MacVerify stub was called once.
    13. Check that the job ID is for Csm_MacVerify.
    14. Check that the provided data and data length are the expected ones.
    15. Check that the provided MAC and MAC length are the expected ones.
    16. Call the SecOC_CsmMacVerCallback with the result set to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    17. Check that the PduR_SecOCRxIndication stub was not called as the verification result was
        a negative one and the freshness value is not used.
    18. Set Csm_MacVerify stub verification result back to CRYPTO_E_VER_OK.
    19. Call the SecOC_CsmMacVerCallback with the result set to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    20. Call the main function in order to finish the verification procedure.
    21. Check that the GetRxFreshnessAuthData stub was called once (only for asynchronous mode).
    22. Check that the Csm_MacVerify stub was called once.
    23. Check that the PduR_SecOCRxIndication stub was called once.
    24. Check that the authenticated I-PDU is the expected one.
    25. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00081</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00246</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1299</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_06_TP_FRESHNESS_AUTHDATA</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>2646</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Tests the GetRxFreshnessAuthData function
Test Description: 
    This test case checks the correct reception and verification of an secured I-Pdu
    when the GetRxFreshnessAuthData is used.
  
Test Object: 
    SecOC_GetRxFreshnessAuthData
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOCUseAuthDataFreshness = true &lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthDataFreshnessLen = 64 &lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthDataFreshnessStartPosition = 0 &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetRxFreshnessAuthData stub callout function and the freshness value provided
        by the function.
    03. Set Csm_MacVerify stub callout function to NULL_PTR.
    04. Prepare the secured I-PDU that needs to be authenticated.
    05. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    06. Initialize PDU Payload.
    07. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module.
    08. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was successfully performed.
    09. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    10. Call the main function in order to start the verification procedure.
    11. Check that the upper layer was called with the expected PDU ID and length.
    12. Check that the GetRxFreshnessAuthData stub was called.
    13. Check that the PDU part provided through the freshness API is the expected one.
    14. Check that the Csm_MacVerify stub was called once.
    15. Check that the job ID is for Csm_MacVerify.
    16. Check that the provided data and data length are the expected ones.
    17. Check that the provided MAC and MAC length are the expected ones.
    18. Call the SecOC_CsmMacVerCallback with the result set to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    19. Call the main function in order to finish the verification procedure.
    20. Check that the authenticated I-PDU is the expected one.
    21. Check that the upper layer was called with the expected PDU ID and operation result.
    22. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00081</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00246</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1300</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_AFTER_START_OF_RECEPTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>2723</sourceline>
      <version>1</version>
      <description>Test Synopsis: Tests SecOC_TpCancelReceive function
Test Description: 
    This test case checks the correct behavior incase SecOC_TpCancelReceive request is received after SecOC_StartOfReception.
  
Test Object: 
    SecOC_TpCancelReceive
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Tp. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacVerify stub callout function
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    07. Set PduR_SecOCTpCopyRxData stub callout function
    08. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module
    09. Call SecOC_TpCancelReceive function after SecOC_StartOfReception call and check that the return value is E_OK
    10. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and check that operation was not accepted due to the cancel receive request
    11. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send and the verification procedure can be started
    12. Call the main function several times
    13. Check that the upper layer was not called due to the cancel receive request
    14. Call the SecOC_CsmMacVerCallback with the result set to E_OK to indicate that the verification was successful
       (if the SecOC module uses the Csm service in the asynchronous mode)
    15. Check that the GetRxFreshness stub was not called due to the cancel receive request
    16. Check that the Csm_MacVerify stub was not called due to the cancel receive request
    17. Check that the PduR_SecOCTpCopyRxData was not called due to the cancel receive request
    18. Check that the PduR_SecOCTpRxIndication was not called due to the cancel receive request
    19. Check that the PduR_SecOCCancelReceive is called with the correct id
    20. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>666</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1301</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_AFTER_COPY_RX_DATA</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>2788</sourceline>
      <version>1</version>
      <description>Test Synopsis: Tests SecOC_TpCancelReceive function
Test Description: 
    This test case checks the correct behavior incase SecOC_TpCancelReceive request is received after SecOC_CopyRxData.
  
Test Object: 
    SecOC_TpCancelReceive
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Tp. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacVerify stub callout function
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    07. Set PduR_SecOCTpCopyRxData stub callout function
    08. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module
    19. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and check that operation was successfully performed
    10. Call SecOC_TpCancelReceive function after SecOC_CopyRxData call and check that the return value is E_OK
    11. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send and the verification procedure can be started
    12. Call the main function several times
    13. Check that the upper layer was not called due to cancel receive request
    14. Call the SecOC_CsmMacVerCallback with the result set to E_OK to indicate that the verification was successful
       (if the SecOC module uses the Csm service in the asynchronous mode)
    15. Check that the GetRxFreshness stub was not called due to the cancel receive request
    16. Check that the Csm_MacVerify stub was not called due to the cancel receive request
    17. Check that the PduR_SecOCTpCopyRxData was not called due to the  cancel receive request
    18. Check that the PduR_SecOCTpRxIndication was not called due to the cancel receive request
    19. Check that the PduR_SecOCCancelReceive is called with the correct id
    20. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>666</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1302</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_AFTER_RX_INDICATION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>2853</sourceline>
      <version>1</version>
      <description>Test Synopsis: Tests SecOC_TpCancelReceive function
Test Description: 
    This test case checks the correct behavior incase SecOC_TpCancelReceive request is received after SecOC_TpRxIndication.
  
Test Object: 
    SecOC_TpCancelReceive
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Tp. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacVerify stub callout function
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    07. Set PduR_SecOCTpCopyRxData stub callout function
    08. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module
    09. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and check that operation was successfully performed
    10. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send and the verification procedure can be started
    11. Call SecOC_TpCancelReceive function after SecOC_TpRxIndication call and check that the return value is E_OK
    12. Call the main function several times
    13. Check that the upper layer was not called due to the cancel receive request
    14. Call the SecOC_CsmMacVerCallback with the result set to E_OK to indicate that the verification was successful
       (if the SecOC module uses the Csm service in the asynchronous mode)
    15. Check that the GetRxFreshness stub was not called due to the cancel receive request
    16. Check that the Csm_MacVerify stub was not called due to the cancel receive request
    17. Check that the PduR_SecOCTpCopyRxData was not called due to the cancel receive request
    18. Check that the PduR_SecOCTpRxIndication was not called due to the cancel receive request
    19. Check that the PduR_SecOCCancelReceive is called with the correct id
    20. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>666</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1303</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_DURING_ASYNC_VERIF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>2919</sourceline>
      <version>1</version>
      <description>Test Synopsis: Tests SecOC_TpCancelReceive function
Test Description: 
    This test case checks the correct behavior incase SecOC_TpCancelReceive request is received after during async verification.
  
Test Object: 
    SecOC_TpCancelReceive
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Tp. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Call SecOC_TpCancelReceive before SecOC init, request should not be accepted and E_NOT_OK is returned
    02. Initialize the SecOC module and the stubs
    03. Initialize PDU Payload
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function
    05. Set Csm_MacVerify stub callout function
    06. Prepare the secured I-PDU that needs to be authenticated
    07. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    08. Set PduR_SecOCTpCopyRxData stub callout function
    09. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module
    10. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and check that operation was successfully performed
    11. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send and the verification procedure can be started
    12. Call the main function several times until the Csm_MacVerify was called twice, as the first attempt was rejected by Csm stub by returning CRYPTO_E_BUSY
    13. Check that the upper layer was called with the expected PDU ID and length
    14. Call the SecOC_CsmMacVerCallback with the result set to E_OK to indicate that the verification was successful
       (if the SecOC module uses the Csm service in the asynchronous mode)
    15. Check that the GetRxFreshness stub was called once
    16. Check that the Csm_MacVerify stub was called twice
    17. Check that the job ID is for CsmConf_CsmJob_CsmJob_MACVerify_Async if the Csm is configured to process jobs asynchronous
    18. Check that the provided data and data length are the expected ones
    19. Check that the provided MAC and MAC length are the expected ones
    20. Call SecOC_TpCancelReceive after main functions, with invalid PDU ID, request should not be accepted and E_NOT_OK should be returned
    21. Call SecOC_TpCancelReceive after main functions, and before verification is finished and check that E_OK is returned
    22. Call the main function in order to finish the verification procedure
    23. Check that PduR_SecOCTpCopyRxData is not called
    24. Check that the upper layer was called with the expected PDU ID and operation result
    25. Check that the PduR_SecOCCancelReceive is called with the correct id
    26. Call the SecOC_DeInit to reset the SecOC module
    27. Call SecOC_TpCancelReceive after SecOC_DeInit, request should not be accepted and E_NOT_OK should be returned.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>666</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1304</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_AFTER_MAIN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>2992</sourceline>
      <version>1</version>
      <description>Test Synopsis: Tests SecOC_TpCancelReceive function
Test Description: 
    This test case checks the correct behavior incase SecOC_TpCancelReceive request is received after SecOC_MainFunctionRx calls.
  
Test Object: 
    SecOC_TpCancelReceive
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Tp. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacVerify stub callout function
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    07. Set PduR_SecOCTpCopyRxData stub callout function
    08. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module
    09. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and check that operation was successfully performed
    10. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send and the verification procedure can be started
    11. Call the main function several times until the Csm_MacVerify was called twice, as the first attempt was rejected by Csm stub by returning CRYPTO_E_BUSY
    12. Check that the upper layer was called with the expected PDU ID and length
    13. Call the SecOC_CsmMacVerCallback with the result set to E_OK to indicate that the verification was successful
       (if the SecOC module uses the Csm service in the asynchronous mode)
    14. Check that the GetRxFreshness stub was called once
    15. Check that the Csm_MacVerify stub was called twice
    16. Check that the job ID is for CsmConf_CsmJob_CsmJob_MACVerify_Async if the Csm is configured to process jobs asynchronous
    17. Check that the job ID is for CsmConf_CsmJob_CsmJob_MACVerify if the Csm is configured to process jobs synchronous
    18. Check that the provided data and data length are the expected ones
    19. Check that the provided MAC and MAC length are the expected ones
    20. Call the main function in order to finish the verification procedure
    21. Call SecOC_TpCancelReceive after main functions, check that request not accepted and check the the return value is E_NOT_OK
    22. Check that the authenticated I-PDU is the expected one
    23. Check that the upper layer was called with the expected PDU ID and operation result
    24. Check that the PduR_SecOCCancelReceive is not called
    25. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>666</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1305</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_14_TP_CANCEL_RECEIVE_DURING_VERIFICATION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>3062</sourceline>
      <version>1</version>
      <description>Test Synopsis: Tests SecOC_TpCancelReceive function
Test Description: 
    This test case checks the correct behavior incase SecOC_TpCancelReceive request is received during verification step.
  
Test Object: 
    SecOC_TpCancelReceive
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Tp. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacVerify stub callout function
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    07. Set PduR_SecOCTpCopyRxData stub callout function
    08. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module
    09. Call the SecOC_CopyRxData to hand over the secured I-PDU to the SecOC module and check that operation was successfully performed
    10. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send and the verification procedure can be started
    11. Call the main function
    12. Call SecOC_TpCancelReceive after main functions, check that request accepted and check the the return value is E_OK
    13. Check that the upper layer was called with the expected PDU ID and length
    14. Call the SecOC_CsmMacVerCallback with the result set to E_OK to indicate that the verification was successful
       (if the SecOC module uses the Csm service in the asynchronous mode)
    15. Check that the GetRxFreshness stub was called once
    16. Check that the Csm_MacVerify stub was called twice
    17. Check that the job ID is for CsmConf_CsmJob_CsmJob_MACVerify_Async if the Csm is configured to process jobs asynchronous
    18. Check that the job ID is for CsmConf_CsmJob_CsmJob_MACVerify if the Csm is configured to process jobs synchronous
    19. Check that the provided data and data length are the expected ones
    20. Check that the provided MAC and MAC length are the expected ones
    21. Call the main function in order to finish the verification procedure
    22. Check that the upper layer was called with the expected PDU ID and operation result
    23. Check that the PduR_SecOCCancelReceive is called with the correct id
    24. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>666</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1306</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_17_IF_SECUREDPDUCOLLECTION_NOMESSAGE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>3133</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    This test case checks the correct reception and verification of Authentic I-Pdu
    and cryptographic I-Pdu via Interface.
    CSM Module is used to calculate the MAC.
  
Test Object: 
    SecOC_RxIndication
  
Test Precondition: 
    transmission via Interface,
    verification done by CSM,
    Authenticator not truncated
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the cryptographic PDU and the authentic PDU.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function to NULL_PTR.
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
    05. Initialize PDU Payload with the authentic PDU that needs to be sent.
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    07. Set PduR_SecOCRxIndication stub callout function.
    08. Call the SecOC_RxIndication to hand over the authentic PDU.
    09. Call the main function several times.
    10. Check that the GetRxFreshness and Csm_MacVerify stubs were not called as the verification
        procedure has not yet begun (the cryptographic PDU was not received by SecOC).
    11. Call the SecOC_RxIndication to hand over the authentic PDU.
    12. Call the main function in order to start the verification procedure.
    13. Check that the GetRxFreshness stub was called once.
    14. Check that the Csm_MacVerify stub was called once.
    15. Check that the job ID is for Csm_MacVerify.
    16. Check that the provided data and data length are the expected ones.
    17. Check that the provided MAC and MAC length are the expected ones.
    18. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    19. Call the main function in order to finish the verification procedure.
    20. Check that the PduR_SecOCRxIndication stub was called once.
    21. Check that the authenticated I-PDU is the expected one.
    22. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00207</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1307</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_18_IF_SECUREDPDUCOLLECTION_WITHMESSAGE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>3206</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    This test case checks the correct reception and verification of Authentic I-Pdu
    and cryptographic I-Pdu with Message Linker via Interface.
    Also this test checks the correctness of the data length for both authentic
    and cryptographic PDUs.
    CSM Module is used to calculate the MAC.
  
Test Object: 
    SecOC_RxIndication
  
Test Precondition: 
    transmission via Interface,
    verification done by CSM,
    Authenticator not truncated,
    SecOCMessageLinkLen = 12,
    SecOCMessageLinkPos = 4
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize the authentic PDU with length 0 and the correct data.
      a03. Initialize the cryptographic PDU with length 0 and the correct data.
      a04. Set GetRxFreshness stub callout function and the freshness value
          provided by the function.
      a05. Set Csm_MacVerify stub callout function to NULL_PTR.
      a06. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
      a07. Prepare the comparison data expected when the Csm_MacVerify is called
          by the SecOC module.
      a08. Set PduR_SecOCRxIndication stub callout function.
    Test sequence with incorrect length value:
      b01. Call the SecOC_RxIndication to notify the SecOC module that the authentic
          PDU with length 0 was send.
      b02. Call the main function several times and check that the
          GetRxFreshness Stub and MacVerify Stub were not called.
      b03. Call the SecOC_RxIndication to notify the SecOC module that the
          cryptographic PDU with length 0 was send.
      b04. Call the main function several times check that the
          GetRxFreshness Stub and MacVerify Stub were not called.
      b05. Initialize the length of the cryptographic PDU with the correct value
          that needs to be sent.
      b06. Call the SecOC_RxIndication to notify the SecOC module that the
          cryptographic PDU with correct length was send.
      b07. Call the main function several times and check that the
          GetRxFreshness Stub and MacVerify Stub were not called.
      b08. Call the SecOC_RxIndication again to hand over the authentic PDU with
          the wrong length.
      b09. Call the main function several times and check that the
          GetRxFreshness Stub and MacVerify Stub were not called
          (the authentic PDU was not received by SecOC).
    Test sequence with correct length value:
      c01. Initialize the length of the authentic PDU with the correct value
          that needs to be sent.
      c02. Call the SecOC_RxIndication to hand over the authentic PDU.
      c03. Call the main function in order to start the verification procedure.
      c04. Check that the GetRxFreshness stub was called once.
      c05. Check that the Csm_MacVerify stub was called once.
      c06. Check that the job ID is for Csm_MacVerify.
      c07. Check that the provided data and data length are the expected ones.
      c08. Check that the provided MAC and MAC length are the expected ones.
      c09. Call the SecOC_CsmMacVerCallback with the result to E_OK to
          indicate that the verification was successful (if the SecOC module
          use the Csm service in the asynchronous mode)
      c10. Call the main function in order to finish the verification procedure.
      c11. Check that the PduR_SecOCRxIndication stub was called once.
      c12. Check that the authenticated I-PDU is the expected one.
      c13. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1308</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_NOMESSAGE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>3303</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test reception and verification of Authentic I-Pdu and cryptographic I-Pdu via TP.
  
Test Description: 
    This test case checks the correct reception and verification of Authentic I-Pdu
    and cryptographic I-Pdu without Message Linker via transport protocol.
    This test also checks if there are failures during the transmission of
    the cryptographic I-PDU.
    CSM Module is used to calculate the MAC.
  
Test Object: 
    SecOC_StartOfReception
    SecOC_CopyRxData
    SecOC_TpRxIndication
  
Test Precondition: 
    transmission via TP,
    verification done by CSM,
    Authenticator not truncated
    No Message linker
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize the cryptographic PDU.
      a03. Initialize the authentic PDU.
      a04. Set GetRxFreshness stub callout function and the freshness value provided
            by the function.
      a05. Set Csm_MacVerify stub callout function.
      a06. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
      a07. Prepare the comparison data expected when the Csm_MacVerify is called
           by the SecOC module.
      a08. Set PduR_SecOCRxIndication stub callout function.
    Test sequence with failures during the transmission of the cryptographic I-PDU:
      b01. Call the SecOC_StartOfReception and check that the request was accepted
           by the SecOC module.
      b02. Call the SecOC_CopyRxData with a wrong id and check that the operation
           was not successful.
      b03. Call the SecOC_CopyRxData again to hand over the secured I-Pdu to the
           SecOC module and check that operation was successfully performed.
      b04. Call the SecOC_TpRxIndication with the result E_NOT_OK to notify the
           SecOC module that an error was encountered during the transmission
           of the I-PDUs and and the verification procedure will be canceled.
      b05. Call the main function several times.
      b06. Check that the GetRxFreshness and the Csm_MacVerify stub were not called.
    Test sequence with correct length value:
      c01. Call the SecOC_StartOfReception again and check that the request was
           accepted by the SecOC module.
      c02. Call the SecOC_CopyRxData again to hand over the secured I-Pdu to the SecOC module and
           check that operation was successfully performed.
      c03. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
           and the verification procedure can be started
      c04. Call the main function in order to start the verification procedure.
      c05. Check that the upper layer was called with the expected PDU ID and length.
      c06. Check that the GetRxFreshness stub was called once.
      c07. Check that the Csm_MacVerify stub was called once.
      c08. Check that the job ID is for Csm_MacVerify.
      c09. Check that the provided data and data length are the expected ones.
      c10. Check that the provided MAC and MAC length are the expected ones.
      c11. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
           the verification was successful (if the SecOC module use the Csm service in the
           asynchronous mode).
      c12. Call the main function in order to finish the verification procedure.
      c13. Check that the authenticated I-PDU is the expected one.
      c14. Check that the upper layer was called with the expected PDU ID and operation result.
      c15. Call the SecOC_DeInit to reset the SecOC module.
 
Test Input: None.
Test Output: 
 &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1309</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_WITHMESSAGE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>3401</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test reception and verification of Authentic I-Pdu and cryptographic I-Pdu via TP
  
Test Description: 
    This test case checks the correct reception and verification of Authentic I-Pdu
    and cryptographic I-Pdu with Message Linker via transport protocol.
    CSM Module is used to calculate the MAC.
  
Test Object: 
    SecOC_StartOfReception
    SecOC_CopyRxData
    SecOC_TpRxIndication
  
Test Precondition: 
    transmission via TP,
    verification done by CSM,
    Authenticator not truncated,
    SecOCMessageLinkLen = 16,
    SecOCMessageLinkPos = 4
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload with the authentic PDU that needs to be sent.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function to NULL_PTR.
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    07. Set PduR_SecOCRxIndication stub callout function.
    08. Call the SecOC_StartOfReception and check that the request was accepted
        by the SecOC module.
    09. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC
        module and check that operation was successfully performed.
    10. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started
    11. Call the main function in order to start the verification procedure.
    12. Check that the upper layer was called with the expected PDU ID and length.
    13. Check that the GetRxFreshness stub was called once.
    14. Check that the Csm_MacVerify stub was called once.
    15. Check that the job ID is for Csm_MacVerify.
    16. Check that the provided data and data length are the expected ones.
    17. Check that the provided MAC and MAC length are the expected ones.
    18. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    19. Call the main function in order to finish the verification procedure.
    20. Check that the authenticated I-PDU is the expected one.
    21. Check that the upper layer was called with the expected PDU ID and operation result.
    22. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1310</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_WITHMESSAGE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>3481</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test reception and verification of Authentic I-Pdu and cryptographic I-Pdu via TP
  
Test Description: 
    This test case checks the correct reception and verification of Authentic I-Pdu
    and cryptographic I-Pdu with Message Linker via transport protocol.
    CSM Module is used to calculate the MAC.
  
Test Object: 
    SecOC_StartOfReception
    SecOC_CopyRxData
    SecOC_TpRxIndication
  
Test Precondition: 
    transmission via TP,
    verification done by CSM,
    Authenticator not truncated,
    SecOCMessageLinkLen = 16,
    SecOCMessageLinkPos = 4
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload with the authentic PDU and Cryptographic PDu that need to be sent
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacVerify stub callout function
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call the SecOC_StartOfReception and check that the request was accepted
        by the SecOC module
    09. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was successfully performed
    10. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started
    11. Call the main function in order to start the verification procedure
    12. Check that the GetRxFreshness stub was not called
    13. Check that the Csm_MacVerify stub was not called
    14. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode)
    15. Call the main function in order to finish the verification procedure
    16. Check that the upper layer was called with the expected PDU ID and operation result
    17. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1311</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>3556</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test reception and verification of Authentic I-Pdu and cryptographic I-Pdu via TP.
  
Test Description: 
    This test case checks the correct reception and verification of Authentic I-Pdu
    and cryptographic I-Pdu without Message Linker via transport protocol.
    This test also checks if there are failures during the transmission of
    the cryptographic I-PDU.
    CSM Module is used to calculate the MAC.
  
Test Object: 
    SecOC_StartOfReception
    SecOC_CopyRxData
    SecOC_TpRxIndication
  
Test Precondition: 
    transmission via TP,
    verification done by CSM,
    Authenticator not truncated
    No Message linker
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize the cryptographic PDU.
      a03. Initialize the authentic PDU.
      a04. Set GetRxFreshness stub callout function and the freshness value provided
            by the function.
      a05. Set Csm_MacVerify stub callout function.
      a06. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
      a07. Prepare the comparison data expected when the Csm_MacVerify is called
           by the SecOC module.
      a08. Set PduR_SecOCRxIndication stub callout function.
    Test sequence with failures during the transmission of the cryptographic I-PDU:
      b01. Call the SecOC_StartOfReception and check that the request was accepted
           by the SecOC module.
      b02. Call the SecOC_CopyRxData again to hand over the secured I-Pdu to the
           SecOC module and check that operation was successfully performed.
      b03. Call the SecOC_TpRxIndication with the result E_NOT_OK to notify the
           SecOC module that an error was encountered during the transmission
           of the I-PDUs and and the verification procedure will be canceled.
      b04. Call the main function several times.
      b05. Check that the GetRxFreshness and the Csm_MacVerify stub were not called.
    Test sequence with correct length value:
      c01. Call the SecOC_StartOfReception again and check that the request was
           accepted by the SecOC module.
      c02. Check that the upper layer was called with the expected PDU ID and length.
      c03. Call the SecOC_CopyRxData again to hand over the secured I-Pdu to the SecOC module and
           check that operation was successfully performed.
      c04. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
           and the verification procedure can be started
      c05. Call the main function in order to start the verification procedure.
      c06. Check that the GetRxFreshness stub was called once.
      c07. Check that the Csm_MacVerify stub was called once.
      c08. Check that the job ID is for Csm_MacVerify.
      c09. Check that the provided data and data length are the expected ones.
      c10. Check that the provided MAC and MAC length are the expected ones.
      c11. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
           the verification was successful (if the SecOC module use the Csm service in the
           asynchronous mode).
      c12. Call the main function in order to finish the verification procedure.
      c13. Check that the authenticated I-PDU is the expected one.
      c14. Check that the upper layer was called with the expected PDU ID and operation result.
      c15. Call the SecOC_DeInit to reset the SecOC module.
 
Test Input: None.
Test Output: 
 &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1312</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_ZEROPDULEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>3652</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test reception and verification of Authentic I-Pdu and cryptographic I-Pdu via TP.
  
Test Description: 
    This test case checks the correct reception and verification of Authentic I-Pdu
    and cryptographic I-Pdu without Message Linker via transport protocol.
    This test also checks if there are failures during the transmission of
    the cryptographic I-PDU.
    CSM Module is used to calculate the MAC.
  
Test Object: 
    SecOC_StartOfReception
    SecOC_CopyRxData
    SecOC_TpRxIndication
  
Test Precondition: 
    transmission via TP,
    verification done by CSM,
    Authenticator not truncated
    No Message linker
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize the cryptographic PDU.
      a03. Initialize the authentic PDU.
      a04. Set GetRxFreshness stub callout function and the freshness value provided
            by the function.
      a05. Set Csm_MacVerify stub callout function.
      a06. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
      a07. Prepare the comparison data expected when the Csm_MacVerify is called
           by the SecOC module.
      a08. Set PduR_SecOCRxIndication stub callout function.
    Test sequence with failures during the transmission of the cryptographic I-PDU:
      b01. Call the SecOC_StartOfReception and check that the request was accepted
           by the SecOC module.
      b02. Call the SecOC_CopyRxData again to hand over the secured I-Pdu to the
           SecOC module and check that operation was successfully performed.
      b03. Call the SecOC_TpRxIndication with the result E_NOT_OK to notify the
           SecOC module that an error was encountered during the transmission
           of the I-PDUs and and the verification procedure will be canceled.
      b04. Call the main function several times.
      b05. Check that the GetRxFreshness and the Csm_MacVerify stub were not called.
    Test sequence with correct length value:
      c01. Call the SecOC_StartOfReception again and check that the request was
           accepted by the SecOC module.
      c02. Call the SecOC_CopyRxData again to hand over the secured I-Pdu to the SecOC module and
           check that operation was successfully performed.
      c03. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
           and the verification procedure can be started
      c04. Call the main function in order to start the verification procedure.
      c05. Check that the GetRxFreshness stub was not called.
      c06. Check that the Csm_MacVerify stub was not called.
      c07. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
           the verification was successful (if the SecOC module use the Csm service in the
           asynchronous mode).
      c08. Call the main function in order to finish the verification procedure.
      c09. Check that the upper layer was not called.
      c10. Call the SecOC_DeInit to reset the SecOC module.
 
Test Input: None.
Test Output: 
 &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1313</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_19_TP_SECUREDPDUCOLLECTION_TPSDULENGTHZERO_SMALLERPDUSIZETHANCFGED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>3743</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test reception and verification of Authentic I-Pdu and cryptographic I-Pdu via TP.
  
Test Description: 
    This test case checks the correct reception and verification of Authentic I-Pdu
    and cryptographic I-Pdu without Message Linker via transport protocol in case
    the given length is smaller than the configured one.
    This test also checks if there are failures during the transmission of
    the cryptographic I-PDU.
    CSM Module is used to calculate the MAC.
  
Test Object: 
    SecOC_TpRxIndication
  
Test Precondition: 
    transmission via TP,
    verification done by CSM,
    Authenticator not truncated
    No Message linker
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs
      a02. Initialize the cryptographic PDU
      a03. Initialize the authentic PDU
      a04. Set GetRxFreshness stub callout function and the freshness value provided by the
           function
      a05. Set Csm_MacVerify stub callout function
      a06. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
      a07. Prepare the comparison data expected when the Csm_MacVerify is called
           by the SecOC module
      a08. Set PduR_SecOCRxIndication stub callout function
    Test sequence with failurecaused by the smaller than the configured length PDU:
      b01. Call the SecOC_StartOfReception with smaller Authentic and Crypto PDU length than
           configured and
      b02. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
           check that operation was successfully performed
           check that the request was accepted by the SecOC module
      b03. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was
           send and the verification procedure can be started
      b04. Call the main function in order to start the verification procedure
      b05. Check that the GetRxFreshness and the Csm_MacVerify stub were not called
    Test sequence with correct length value:
      c01. Call the SecOC_StartOfReception with Authentic and Crypto PDU length equal to the
           configured length
           and check that the request was accepted by the SecOC module
      c02. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
           check that operation was successfully performed
      c03. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was
           send and the verification procedure can be started
      c04. Call the main function in order to start the verification procedure
      c05. Check that the upper layer was called with the expected PDU ID and length
      c06. Check that the GetRxFreshness stub was called once
      c07. Check that the Csm_MacVerify stub was called once
      c08. Check that the job ID is for Csm_MacVerify
      c09. Check that the provided data and data length are the expected ones
      c10. Check that the provided MAC and MAC length are the expected ones
      c11. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
           the verification was successful (if the SecOC module use the Csm service in the
           asynchronous mode)
      c12. Call the main function in order to finish the verification procedure
      c13. Check that the authenticated I-PDU is the expected one
      c14. Check that the upper layer was called with the expected PDU ID and operation result
      c15. Call the SecOC_DeInit to reset the SecOC module
 
Test Input: None.
Test Output: 
 &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1314</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_TPCOPYRXDATA_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>3838</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test the negative behavior when calling the TpCopyRxData.
  
Test Description: 
    This test case checks the behavior after the correct reception and verification of the received
    PDUs when the upper layer call of PduR_SecOCTpCopyRxData is rejected.
  
Test Object: 
    PduR_SecOCTpCopyRxData
  
Test Precondition: 
    transmission via TP,
    verification done by CSM,
    SecOCMessageLinkLen = 16,
    SecOCMessageLinkPos = 4
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload with the authentic PDU and Cryptographic PDu that need to be sent.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function.
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    07. Set PduR_SecOCRxIndication stub callout function.
    08. Call the SecOC_StartOfReception and check that the request was accepted
        by the SecOC module.
    09. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was successfully performed.
    10. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    11. Call the main function in order to start the verification procedure.
    12. Check that the upper layer was called with the expected PDU ID and length.
    13. Check that the GetRxFreshness stub was called once.
    14. Check that the Csm_MacVerify stub was called once.
    15. Check that the job ID is for Csm_MacVerify.
    16. Check that the provided data and data length are the expected ones.
    17. Check that the provided MAC and MAC length are the expected ones.
    18. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    19. Call the main function in order to finish the verification procedure.
    20. Check that the authenticated I-PDU is the expected one.
    21. Check that the upper layer was called with the expected PDU ID and operation result.
    22. Set the TS_PduR_SecOCTpCopyRxData return value back to BUFREQ_OK.
    23. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1315</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_17_IF_SECUREDPDUCOLLECTION_NOMESSAGE_VERIFYFAIL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>3915</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test reception and verification of Authentic I-Pdu and cryptographic I-Pdu
  
Test Description: 
    This test case checks if verification will be reattempted each time new data
    for any of Authentic I-PDU and a Cryptographic I-PDU is received when the
    verification of the resulting Secured I-PDU fails. In this case both Authentic
    and Cryptographic I-PDU shall remain buffered.
  
Test Object: 
    SecOC_RxIndication
  
Test Precondition: 
    transmission via Interface,
    verification done by CSM,
    Authenticator not truncated
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload with the authentic PDU that needs to be sent.
      a03. Initialize PDU Payload with the cryptographic PDU that needs to be sent.
      a04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
      a05. Set Csm_MacVerify stub callout function to NULL_PTR.
      a06. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
      a07. Prepare the comparison data expected when the Csm_MacVerify is called
           by the SecOC module.
      a08. Set PduR_SecOCRxIndication stub callout function.
    Test sequence with the end result SECOC_VERIFICATIONFAILURE:
      b01. Call the SecOC_RxIndication to hand over the authentic PDU.
      b02. Call the main function several times.
      b03. Check that the GetRxFreshness and Csm_MacVerify stubs were not called as the verification
           procedure has not yet begun (the cryptographic PDU was not received by SecOC).
      b04. Call the SecOC_RxIndication to hand over the Cryptographic PDU.
      b05. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_NOT_OK to simulate
           that the authentication of the secured I-PDU failed.
      b06. Call the main function until the Csm_MacVerify stub was called.
    Test sequence with the end result SECOC_VERIFICATIONSUCCESS:
      c01. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
           the verification was finished (if the SecOC module use the Csm service in the
           asynchronous mode)
      c02. Check that the GetRxFreshness stub was called once.
      c03. Check that the Csm_MacVerify stub was called once.
      c04. Check that the job ID is for Csm_MacVerify.
      c05. Call the main function several times.
      c06. Check that the GetRxFreshness and the Csm_MacVerify stubs were not called again.
      c07. Set the Csm_MacVerify stub verification result back to CRYPTO_E_VER_OK.
      c08. Prepare cryptographic I-PDUs that needs to be sent to SecOC again.
      c09. Call the SecOC_RxIndication to hand over the Cryptographic PDU.
      c10. Call the main function in order to start the verification procedure.
      c11. Check that the GetRxFreshness stub was called once.
      c12. Check that the Csm_MacVerify stub was called once.
      c13. Check that the job ID is for Csm_MacVerify.
      c14. Check that the provided data and data length are the expected ones.
      c15. Check that the provided MAC and MAC length are the expected ones.
      c16. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
           the verification was successful (if the SecOC module use the Csm service in the
           asynchronous mode).
      c17. Call the main function in order to finish the verification procedure.
      c18. Check that the PduR_SecOCRxIndication stub was called once.
      c19. Check that the authenticated I-PDU is the expected one.
      c20. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1316</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_21_IF_SECUREDPDUCOLLECTION_WRONGMESSAGE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>4008</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test of SecOCFreshnessCounterSyncAttempts
Test Description: 
    This test case checks the verification of authentic and cryptographic PDU
    with the wrong message link. In this test the sum of the length of the Freshness
    Value truncated and the MAC is a multiple of 8.
  
Test Object: 
    SecOC_RxIndication,
    Csm_MacVerify
  
Test Precondition: 
    transmission via Interface,
    verification done by CSM,
    SecOCFreshnessValue = 0,
    Authenticator not truncated,
    SecOCMessageLinkLen = 16,
    SecOCMessageLinkPos = 8
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload with the authentic PDU and Cryptographic PDu that
        need to be sent.
    03. Set Csm_MacVerify stub callout function.
    04. Prepare the authentic I-PDU and cryptographic I-PDU with the wrong message
        link that needs to be sent to SecOC.
    05. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    06. Set PduR_SecOCRxIndication stub callout function.
    07. Call the SecOC_RxIndication to hand over the authentic PDU.
    08. Call the main function several times.
    09. Check that the GetRxFreshness and Csm_MacVerify stubs were not called as the verification
        procedure has not yet begun (the cryptographic PDU was not received by SecOC).
    10. Call the SecOC_RxIndication to hand over the cryptographic PDU.
    11. Call the main function in order to start the verification procedure.
    12. Check that the Csm_MacVerify stub was not called because of the wrong
        cryptographic I-PDU.
    13. Prepare the cryptographic I-PDU with the correct message link.
    14. Call the SecOC_RxIndication again to hand over the authentic and the
        correct cryptographic PDUs.
    15. Call the main function in order to start the verification procedure.
    16. Check that the job ID is for Csm_MacVerify.
    17. check that the Csm_MacVerify stub was called once.
    18. Check that the provided data and data length are the expected ones.
    19. Check that the provided MAC and MAC length are the expected ones.
    20. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    21. Call the main function in order to finish the verification procedure.
    22. Check that the PduR_SecOCRxIndication stub was called once.
    23. Check that the authenticated I-PDU is the expected one.
    24. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1317</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_23_IF_SECUREDPDUCOLLECTION_WRONGMESSAGE2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>4089</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    This test case checks the verification of authentic and cryptographic PDU
    with the wrong message link. In this test the sum of the length of the Freshness
    Value truncated and the MAC is not a multiple of 8.
  
Test Object: 
    SecOC_RxIndication
  
Test Precondition: 
    transmission via Interface,
    verification done by CSM,
    Authenticator not truncated,
    SecOCMessageLinkLen = 13,
    SecOCMessageLinkPos = 4,
    MAC Length = 28,
    Freshness Value Truncated = 32
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the authentic and cryptographic PDUs.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function to NULL_PTR.
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    07. Set PduR_SecOCRxIndication stub callout function.
    08. Call the SecOC_RxIndication to hand over the authentic PD.
    09. Call the main function several times.
    10. Check that the GetRxFreshness and Csm_MacVerify stubs were not called as the verification
        procedure has not yet begun (the cryptographic PDU was not received by SecOC).
    11. Call the SecOC_RxIndication to hand over the cryptographic PDU.
    12. Call the main function in order to start the verification procedure.
    13. Check that the Csm_MacVerify stub was not called because of the wrong
        cryptographic I-PDU.
    14. Prepare the cryptographic I-PDU with the correct message link.
    15. Call the SecOC_RxIndication again to hand over the authentic and the
        correct cryptographic PDUs.
    16. Call the main function in order to start the verification procedure.
    17. Check that the GetRxFreshness stub was called once.
    18. Check that the job ID is for Csm_MacVerify.
    19. check that the Csm_MacVerify stub was called once.
    20. Check that the provided data and data length are the expected ones.
    21. Check that the provided MAC and MAC length are the expected ones.
    22. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    23. Call the main function in order to finish the verification procedure.
    24. Check that the PduR_SecOCRxIndication stub was called once.
    25. Check that the authenticated I-PDU is the expected one.
    26. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1318</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_26_IF_SHAPE_NOMESSAGE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>4170</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test checks the combination of secured PDU collection and fixed PDU layout.
Test Description: 
    This test case checks the behavior of SecOC, when the secured PDU collection(no message link
    used) it's used with the fixed PDU layout enabled.
  
Test Object: 
    secured PDU collection with padding
  
Test Precondition: 
    transmission via Interface,
    verification done by CSM,
    SecOCRxShapeFuncName = Ts_SecOC_RxShapeSecPdu
    SecOCRxUseShapeFunc = enable
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the cryptographic PDU and the authentic PDU.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function to NULL_PTR.
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
    05. Initialize PDU Payload with the authentic PDU that needs to be sent.
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    07. Set PduR_SecOCRxIndication stub callout function.
    08. Call the SecOC_RxIndication to hand over the authentic PDU.
    09. Call the main function several times.
    10. Check that the GetRxFreshness and Csm_MacVerify stubs were not called as the verification
        procedure has not yet begun (the cryptographic PDU was not received by SecOC).
    11. Call the SecOC_RxIndication to hand over the cryptographic PDU.
    12. Call the main function in order to start the verification procedure.
    13. Check that the GetRxFreshness stub was called once.
    14. Check that the Csm_MacVerify stub was called once.
    15. Check that the job ID is for Csm_MacVerify.
    16. Check that the provided data and data length are the expected ones.
    17. Check that the provided MAC and MAC length are the expected ones.
    18. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    19. Call the main function in order to finish the verification procedure.
    20. Check that the PduR_SecOCRxIndication stub was called once.
    21. Check that the authenticated I-PDU is the expected one.
    22. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00207</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1319</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_25_IF_SHAPE_WITHMESSAGE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>4243</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test checks the combination of secured PDU collection and fixed PDU layout.
Test Description: 
    This test case checks the behavior of SecOC, when the secured PDU collection(message link
    used) it's used with the fixed PDU layout enabled.
  
Test Object: 
    secured PDU collection with padding
  
Test Precondition: 
    transmission via Interface,
    verification done by CSM,
    SecOCMessageLinkLen = 12,
    SecOCMessageLinkPos = 4
    SecOCRxShapeFuncName = Ts_SecOC_RxShapeSecPdu
    SecOCRxUseShapeFunc = enable
  
Test Execution: 
      01. Initialize the SecOC module and the stubs.
      02. Initialize the authentic(with wrong data length) and cryptographic PDUs.
      03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
      04. Set Csm_MacVerify stub callout function to NULL_PTR.
      05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
      06. Prepare the comparison data expected when the Csm_MacVerify is called
          by the SecOC module.
      07. Set PduR_SecOCRxIndication stub callout function.
      08. Call the SecOC_RxIndication again to hand over the authentic and the
          correct cryptographic PDUs.
      09. Call the main function in order to start the verification procedure.
      10. Check that the GetRxFreshness stub was not called.
      11. check that the Csm_MacVerify stub was not called.
      12. Set the authentic PDU with correct value.
      13. Call the SecOC_RxIndication again to hand over the authentic and the
          correct cryptographic PDUs.
      14. Call the main function in order to start the verification procedure.
      15. Check that the GetRxFreshness stub was called once.
      16. Check that the job ID is for Csm_MacVerify.
      17. check that the Csm_MacVerify stub was called once.
      18. Check that the provided data and data length are the expected ones.
      19. Check that the provided MAC and MAC length are the expected ones.
      20. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
          the verification was successful (if the SecOC module use the Csm service in the
          asynchronous mode).
      21. Call the main function in order to finish the verification procedure.
      22. Check that the PduR_SecOCRxIndication stub was called once.
      23. Check that the authenticated I-PDU is the expected one.
      24. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1320</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_WRONGMESSAGE3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>4319</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test reception and verification of Authentic I-Pdu and cryptographic I-Pdu via TP.
  
Test Description: 
    This test case checks the correct reception  via transport protocol and verification of
    Authentic I-Pdu and cryptographic I-Pdu when the Message Link is invalid.
  
Test Object: 
    invalid message link
  
Test Precondition: 
    transmission via TP,
    verification done by CSM,
    SecOCMessageLinkLen = 16,
    SecOCMessageLinkPos = 4
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload with the authentic PDU and Cryptographic PDu that need to be sent.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function.
    05. Prepare the authentic I-PDU and cryptographic I-PDU with the wrong message
        link that needs to be sent to SecOC.
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    07. Call the SecOC_StartOfReception and check that the request was accepted
        by the SecOC module.
    08. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was successfully performed.
    09. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    10. Call the main function in order to start the verification procedure.
    11. Check that the GetRxFreshness stub was not call.
    12. Check that the Csm_MacVerify stub was not call.
    13. Prepare the cryptographic I-PDU with the correct message link.
    14. Call the SecOC_StartOfReception and check that the request was accepted
        by the SecOC module.
    15. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was successfully performed.
    16. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    17. Call the main function in order to start the verification procedure.
    18. Check that the upper layer was called with the expected PDU ID and length.
    19. Check that the GetRxFreshness stub was called once.
    20. Check that the Csm_MacVerify stub was called once.
    21. Check that the job ID is for Csm_MacVerify.
    22. Check that the provided data and data length are the expected ones.
    23. Check that the provided MAC and MAC length are the expected ones.
    24. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    25. Call the main function in order to finish the verification procedure.
    26. Check that the authenticated I-PDU is the expected one.
    27. Check that the upper layer was called with the expected PDU ID and operation result.
    28. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1321</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_20_TP_SECUREDPDUCOLLECTION_STARTOFRECEPTION_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>4404</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test the negative behavior when calling the StartOfReception.
  
Test Description: 
    This test case checks the behavior after the correct reception and verification of the received
    PDUs when the upper layer call of PduR_SecOCStartOfReception is rejected.
  
Test Object: 
    PduR_SecOCStartOfReception
  
Test Precondition: 
    transmission via TP,
    verification done by CSM,
    SecOCMessageLinkLen = 16,
    SecOCMessageLinkPos = 4
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set the PduR_SecOCStartOfReception stub return value to BUFREQ_E_NOT_OK.
    03. Initialize PDU Payload with the authentic PDU and Cryptographic PDu that need to be sent.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacVerify stub callout function.
    06. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Call the SecOC_StartOfReception and check that the request was accepted
        by the SecOC module.
    10. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was successfully performed.
    11. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    12. Call the main function in order to start the verification procedure.
    13. Check that the upper layer was called with the expected PDU ID and length.
    14. Check that the GetRxFreshness stub was not called.
    15. Check that the Csm_MacVerify stub was not called.
    16. Set the PduR_SecOCStartOfReception stub return value back to BUFREQ_OK.
    17. Call the SecOC_StartOfReception and check that the request was accepted
        by the SecOC module.
    18. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was successfully performed.
    19. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    20. Call the main function in order to start the verification procedure.
    21. Check that the upper layer was called with the expected PDU ID and length.
    22. Check that the GetRxFreshness stub was called once.
    23. Check that the Csm_MacVerify stub was called once.
    24. Check that the job ID is for Csm_MacVerify.
    25. Check that the provided data and data length are the expected ones.
    26. Check that the provided MAC and MAC length are the expected ones.
    27. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    28. Call the main function in order to finish the verification procedure.
    29. Check that the authenticated I-PDU is the expected one.
    30. Check that the upper layer was called with the expected PDU ID and operation result.
    31. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1322</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_AS421_27_IF_SECUREDPDUCOLLECTION_SECUREDAREA</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_AS421/source/application/Tests.c</sourcefile>
      <sourceline>4492</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test checks the combination of secured PDU collection and secured area.
Test Description: 
    This test case checks the behavior of SecOC, when the secured PDU collection(no message link
    used) it's used with secured area.
  
Test Object: 
    secured PDU collection with secured area
  
Test Precondition: 
    transmission via Interface,
    verification done by CSM,
    Authenticator not truncated
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the cryptographic PDU and the authentic PDU.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function to NULL_PTR.
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
    05. Initialize PDU Payload with the authentic PDU that needs to be sent.
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    07. Set PduR_SecOCRxIndication stub callout function.
    08. Call the SecOC_RxIndication to hand over the authentic PDU.
    09. Call the main function several times.
    10. Check that the GetRxFreshness and Csm_MacVerify stubs were not called as the verification
        procedure has not yet begun (the cryptographic PDU was not received by SecOC).
    11. Call the SecOC_RxIndication to hand over the authentic PDU.
    12. Call the SecOC_RxIndication to hand over the authentic and cryptographic PDUs.
    13. Call the main function in order to start the verification procedure.
    14. Check that the GetRxFreshness stub was called once.
    15. Check that the Csm_MacVerify stub was called once.
    16. Check that the job ID is for Csm_MacVerify.
    17. Check that the provided data and data length are the expected ones.
    18. Check that the provided MAC and MAC length are the expected ones.
    19. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode).
    20. Call the main function in order to finish the verification procedure.
    21. Check that the PduR_SecOCRxIndication stub was called once.
    22. Check that the authenticated I-PDU is the expected one.
    23. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00207</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1323</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_RX_BIT_COUNTING_BIT_ORDERING</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_BitCountingBitOrdering/source/application/Tests.c.m4</sourcefile>
      <sourceline>196</sourceline>
      <version>1</version>
      <description>Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    This test case checks the correct reception and verification of an secured I-Pdu via Interface.
    Different values for Authentic Data Freshness Length and Authentic Data Freshness Start Position
    are provided to test corner cases.
    Csm Module is used to verify the MAC.
    In this test is used the secured area for Pdu.
  
Test Object: 
    SecOC_RxIndication
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.2.1 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to
                the cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Transmission via Interface. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator truncated. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
      &lt;listitem&gt;Authentic Bit Counting And Order In Byte Format = SECOC_DECREASING_ORDER_SAWTOOTH_COUNTING_FORMAT.&lt;/listitem&gt;
      &lt;listitem&gt;Authentic Data Freshness Length = \-::-/m4_ifelse(PM_AuthDataFreshnessStartPositionAndLengthCases,CASE_AUTH_DATA_FRESHNESS_START_POSITION_0_LENGTH_20,20,m4_ifelse(PM_AuthDataFreshnessStartPositionAndLengthCases,CASE_AUTH_DATA_FRESHNESS_START_POSITION_0_LENGTH_2,2,m4_ifelse(PM_AuthDataFreshnessStartPositionAndLengthCases,CASE_AUTH_DATA_FRESHNESS_START_POSITION_1_LENGTH_6,6,m4_ifelse(PM_AuthDataFreshnessStartPositionAndLengthCases,CASE_AUTH_DATA_FRESHNESS_START_POSITION_19_LENGTH_12,12,m4_ifelse(PM_AuthDataFreshnessStartPositionAndLengthCases,CASE_AUTH_DATA_FRESHNESS_START_POSITION_7_LENGTH_32,32,4))))).&lt;/listitem&gt;
      &lt;listitem&gt;Authentic Data Freshness Start Position = \-::-/m4_ifelse(PM_AuthDataFreshnessStartPositionAndLengthCases,CASE_AUTH_DATA_FRESHNESS_START_POSITION_0_LENGTH_20,0,m4_ifelse(PM_AuthDataFreshnessStartPositionAndLengthCases,CASE_AUTH_DATA_FRESHNESS_START_POSITION_0_LENGTH_2,0,m4_ifelse(PM_AuthDataFreshnessStartPositionAndLengthCases,CASE_AUTH_DATA_FRESHNESS_START_POSITION_1_LENGTH_6,1,m4_ifelse(PM_AuthDataFreshnessStartPositionAndLengthCases,CASE_AUTH_DATA_FRESHNESS_START_POSITION_19_LENGTH_12,19,m4_ifelse(PM_AuthDataFreshnessStartPositionAndLengthCases,CASE_AUTH_DATA_FRESHNESS_START_POSITION_7_LENGTH_32,7,11))))).&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU with valid Payload data but an invalid lenght value.
    03. Set Csm_MacVerify stub callout function to NULL_PTR
    04. Prepare the secured I-PDU that needs to be authenticated
    05. Prepare the comparation data expected when the Csm_MacVerify is called
        by the SecOC module
    06. Set PduR_SecOCRxIndication stub callout function
    07. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started
    08. Call the main function several time
    09. Check that the GetRxFreshness stub was not called
    10. Check that the Csm_MacVerify stub was not called
    11. Initialize PDU Payload with correct value
    12. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started
    13. Call the main function in order to start the verification procedure
    14. Check that the GetRxFreshness stub was called once
    15. Check that the Csm_MacVerify stub was called once
    16. Check that the job ID is for Csm_MacVerify
    17. Check that the provided data and data length are the expected ones
    18. Check that the provided MAC and MAC length are the expected ones
    19. Call the main function in order to finish the verification procedure
    20. Check that the PduR_SecOCRxIndication stub was called once
    21. Check that the authenticated I-PDU is the expected one
    22. Check that AuthDatFreshness value matches expected AuthDataFreshness value.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>677</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1324</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_SECUREDPDUCOLLECTION_WITHMESSAGELINK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_BitCountingBitOrdering/source/application/Tests.c.m4</sourcefile>
      <sourceline>403</sourceline>
      <version>1</version>
      <description>Test Synopsis: Test reception and verification of an secured I-Pdu with via IF
Test Description: 
    This test case checks the correct reception and verification of Authentic I-Pdu
    and cryptographic I-Pdu with Message Linker via Interface.
    Different message linker length and start position values are provided to test corner cases.
    Also this test checks the correctness of the data length for both authentic
    and cryptographic PDUs.
    CSM Module is used to calculate the MAC.
  
Test Object: 
    SecOC_RxIndication
  
Test Precondition: 
    transmission via Interface,
    verification done by CSM,
    Authenticator not truncated,
    SecOCMessageLinkLen = \-::-/m4_ifelse(PM_MessageLinkStartPositionAndLengthCases,CASE_MESSAGE_LINK_START_POSITION_0_LENGTH_20,20,2),
    SecOCMessageLinkPos = 0
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the authentic PDU with length 0 and the correct data.
    03. Initialize the cryptographic PDU with length 0 and the correct data.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacVerify stub callout function to NULL_PTR.
    06. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Call the SecOC_RxIndication to notify the SecOC module that the authentic
        PDU with length 0 was send.
    10. Call the main function several times and check that the
        GetRxFreshness Stub and MacVerify Stub were not called.
    11. Call the SecOC_RxIndication to notify the SecOC module that the cryptographic
        PDU with length 0 was send.
    12. Call the main function several times check that the
        GetRxFreshness Stub and MacVerify Stub were not called.
    13. Initialize the length of the cryptographic PDU with the correct value
        that needs to be sent.
    14. Call the SecOC_RxIndication to notify the SecOC module that the
        cryptographic PDU with correct length was sent.
    15. Call the main function several times and check that the
        GetRxFreshness Stub and MacVerify Stub were not called.
    16. Call the SecOC_RxIndication again to hand over the authentic PDU with
        the wrong length.
    17. Call the main function several times and check that the
        GetRxFreshness Stub and MacVerify Stub were not called
        (the authentic PDU was not received by SecOC).
    18. Initialize the length of the authentic PDU with the correct value
        that needs to be sent.
    19. Call the SecOC_RxIndication to hand over the authentic PDU.
    20. Call the main function in order to start the verification procedure.
    21. Check that the GetRxFreshness stub was called once.
    22. Check that the Csm_MacVerify stub was called once.
    23. Check that the job ID is for Csm_MacVerify.
    24. Check that the provided data and data length are the expected ones.
    25. Check that the provided MAC and MAC length are the expected ones.
    26. Call the main function in order to finish the verification procedure.
    27. Check that the PduR_SecOCRxIndication stub was called once.
    28. Check that the authenticated I-PDU is the expected one.
    29. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>677</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1325</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>184</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the secured I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRXSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received secured PDU length that is bigger than the configured secured PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the secured I-PDU that needs to be authenticated
    08. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called once
    14. Check that the job ID is for Csm_MacVerify
    15. Check that the PduR_SecOCRxIndication stub was called once
    16. Check that the authenticated I-PDU is the expected one
    17. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1326</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>327</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the secured I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRXSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received secured PDU length that is the same as the configured secured PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the secured I-PDU that needs to be authenticated
    08. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called once
    14. Check that the job ID is for Csm_MacVerify
    15. Check that the PduR_SecOCRxIndication stub was called once
    16. Check that the authenticated I-PDU is the expected one
    17. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1327</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>470</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the secured I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRXSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received secured PDU length that is smaller than the configured secured PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the secured I-PDU that needs to be authenticated
    08. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called once
    14. Check that the job ID is for Csm_MacVerify
    15. Check that the PduR_SecOCRxIndication stub was called once
    16. Check that the authenticated I-PDU is the expected one
    17. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1328</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_TP_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>613</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the secured I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRXSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received secured PDU length that is bigger than the configured secured PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the secured I-PDU that needs to be authenticated
    08. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_StartOfReception for the secured PDU and check if the request was accepted
        by the SecOC module
    11. Call the SecOC_TpRxIndication with result set to E_NOT_OK
    12. Call the main function
    13. Check that the GetRxFreshness stub was not called
    14. Check that the Csm_MacVerify stub was not called
    15. Check that the PduR_SecOCRxIndication stub was not called
    16. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1329</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_TP_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>759</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the secured I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRXSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received secured PDU length that is the same as the configured secured PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the secured I-PDU that needs to be authenticated
    08. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_StartOfReception for the secured PDU and check if the request was accepted
        by the SecOC module
    11. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was called once
    15. Check that the job ID is for Csm_MacVerify
    16. Check that the PduR_SecOCRxIndication stub was called once
    17. Check that the authenticated I-PDU is the expected one
    18. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1330</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_TP_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>923</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the secured I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRXSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received secured PDU length that is smaller than the configured secured PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the secured I-PDU that needs to be authenticated
    08. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_StartOfReception for the secured PDU and check if the request was accepted
        by the SecOC module
    11. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was called once
    15. Check that the job ID is for Csm_MacVerify
    16. Check that the PduR_SecOCRxIndication stub was called once
    17. Check that the authenticated I-PDU is the expected one
    18. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1331</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>1087</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received authentic PDU length that is bigger than the configured authentic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called once
    14. Check that the job ID is for Csm_MacVerify
    15. Check that the PduR_SecOCRxIndication stub was called once
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1332</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>1246</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received authentic PDU length that is the same as the configured authentic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called once
    14. Check that the job ID is for Csm_MacVerify
    15. Check that the PduR_SecOCRxIndication stub was called once
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1333</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>1405</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received authentic PDU length that is smaller than the configured authentic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called once
    14. Check that the job ID is for Csm_MacVerify
    15. Check that the PduR_SecOCRxIndication stub was called once
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1334</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_TP_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>1564</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received authentic PDU length that is bigger than the configured authentic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_StartOfReception for the authentic PDU and check if the request was accepted
        by the SecOC module
    11. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1335</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_TP_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>1690</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received authentic PDU length that is the same as the configured authentic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_StartOfReception for the authentic PDU and check if the request was accepted
        by the SecOC module
    11. Call the SecOC_StartOfReception for the cryptographic PDU and check that the request was accepted
        by the SecOC module
    12. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and
        check that operation was successfully performed
    13. Call the SecOC_CopyRxData again to hand over the cryptographic PDU to
        the SecOC module and check that operation was successfully performed
    14. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU
        was sent and the verification procedure can be started
    15. Call the SecOC_TpRxIndication to notify the SecOC module that the cryptographic
        PDU was sent and the verification procedure can be started
    16. Call the main function and execute the verification procedure
    17. Check that the PduR_SecOCRxIndication stub was called once
    18. Check that the GetRxFreshness stub was called once
    19. Check that the Csm_MacVerify stub was called once
    20. Check that the job ID is for Csm_MacVerify
    21. Check that the provided data and data length are the expected ones
    22. Check that the provided MAC and MAC length are the expected ones
    23. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1336</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_TP_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>1908</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received authentic PDU length that is smaller than the configured authentic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_StartOfReception for the authentic PDU and check if the request was accepted
        by the SecOC module
    11. Call the SecOC_StartOfReception for the cryptographic PDU and check that the request was accepted
        by the SecOC module
    12. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and
        check that operation was successfully performed
    13. Call the SecOC_CopyRxData again to hand over the cryptographic PDU to
        the SecOC module and check that operation was successfully performed
    14. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU
        was sent and the verification procedure can be started
    15. Call the SecOC_TpRxIndication to notify the SecOC module that the cryptographic
        PDU was sent and the verification procedure can be started
    16. Call the main function and execute the verification procedure
    17. Check that the PduR_SecOCRxIndication stub was called once
    18. Check that the GetRxFreshness stub was called once
    19. Check that the Csm_MacVerify stub was called once
    20. Check that the job ID is for Csm_MacVerify
    21. Check that the provided data and data length are the expected ones
    22. Check that the provided MAC and MAC length are the expected ones
    23. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1337</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_IF_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>2126</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received cryptographic PDU length that is bigger than the configured cryptographic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was not called
    13. Check that the Csm_MacVerify stub was not called
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1338</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_IF_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>2265</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received cryptographic PDU length that is the same as the configured cryptographic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called once
    14. Check that the job ID is for Csm_MacVerify
    15. Check that the PduR_SecOCRxIndication stub was called once
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1339</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_IF_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>2424</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received cryptographic PDU length that is smaller than the configured cryptographic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was not called
    13. Check that the Csm_MacVerify stub was not called
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1340</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_TP_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>2563</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received cryptographic PDU length that is bigger than the configured cryptographic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started
    11. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1341</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_TP_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>2689</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received cryptographic PDU length that is the same as the configured cryptographic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_StartOfReception for the authentic PDU and check if the request was accepted
        by the SecOC module
    11. Call the SecOC_StartOfReception for the cryptographic PDU and check that the request was accepted
       by the SecOC module
    12. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and
        check that operation was successfully performed
    13. Call the SecOC_CopyRxData again to hand over the cryptographic PDU to
        the SecOC module and check that operation was successfully performed
    14. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU
        was sent and the verification procedure can be started
    15. Call the SecOC_TpRxIndication to notify the SecOC module that the cryptographic
        PDU was sent and the verification procedure can be started
    16. Call the main function and execute the verification procedure
    17. Check that the PduR_SecOCRxIndication stub was called once
    18. Check that the GetRxFreshness stub was called once
    19. Check that the Csm_MacVerify stub was called once
    20. Check that the job ID is for Csm_MacVerify
    21. Check that the provided data and data length are the expected ones
    22. Check that the provided MAC and MAC length are the expected ones
    23. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1342</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_TP_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>2907</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRXSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received cryptographic PDU length that is smaller than the configured cryptographic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started
    11. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1343</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_IF_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>3035</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the secured I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the PDU load
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    09. Call the main function and execute the verification procedure
    10. Check that the GetRxFreshness stub was called once
    11. Check that the Csm_MacVerify stub was called once
    12. Check that the job ID is for Csm_MacVerify
    13. Check that the PduR_SecOCRxIndication stub was called once
    14. Check that the authenticated I-PDU is the expected one
    15. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1344</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_IF_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>3173</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the secured I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the PDU load
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    09. Call the main function and execute the verification procedure
    10. Check that the GetRxFreshness stub was called once
    11. Check that the Csm_MacVerify stub was called once
    12. Check that the job ID is for Csm_MacVerify
    13. Check that the PduR_SecOCRxIndication stub was called once
    14. Check that the authenticated I-PDU is the expected one
    15. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1345</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_IF_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>3311</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the secured I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the PDU load
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    09. Call the main function and execute the verification procedure
    10. Check that the GetRxFreshness stub was not called
    11. Check that the Csm_MacVerify stub was not called
    12. Check that the PduR_SecOCRxIndication stub was not called
    13. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1346</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_TP_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>3436</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the secured I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the PDU load
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call the SecOC_StartOfReception for the secured PDU and check if the request was accepted
        by the SecOC module
    09. Call the SecOC_TpRxIndication with result set to E_NOT_OK
    10. Call the main function
    11. Check that the GetRxFreshness stub was not called
    12. Check that the Csm_MacVerify stub was not called
    13. Check that the PduR_SecOCRxIndication stub was not called
    14. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1347</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_TP_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>3579</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the secured I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the PDU load
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call the SecOC_StartOfReception for the secured PDU and check if the request was accepted
        by the SecOC module
    09. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started
    10. Call the main function and execute the verification procedure
    11. Check that the GetRxFreshness stub was called once
    12. Check that the Csm_MacVerify stub was called once
    13. Check that the job ID is for Csm_MacVerify
    14. Check that the PduR_SecOCRxIndication stub was called once
    15. Check that the authenticated I-PDU is the expected one
    16. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1348</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_13_SECURED_PDU_TP_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>3741</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the secured I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the PDU load
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call the SecOC_StartOfReception for the secured PDU and check if the request was accepted
        by the SecOC module
    09. Call the SecOC_TpRxIndication with the result set to E_NOT_OK
    10. Call the main function
    11. Check that the GetRxFreshness stub was not called
    12. Check that the Csm_MacVerify stub was not called
    13. Check that the PduR_SecOCRxIndication stub was not called
    14. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1349</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_IF_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>3884</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the static authentic PDU test buffer
    03. Test a received authentic PDU length that is bigger than the configured authentic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called once
    14. Check that the job ID is for Csm_MacVerify
    15. Check that the PduR_SecOCRxIndication stub was called once
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1350</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_IF_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>4043</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the static authentic PDU test buffer
    03. Test a received authentic PDU length that is the same as the configured authentic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called once
    14. Check that the job ID is for Csm_MacVerify
    15. Check that the PduR_SecOCRxIndication stub was called once
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1351</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_IF_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>4202</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the static authentic PDU test buffer
    03. Test a received authentic PDU length that is smaller than the configured authentic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was not called
    13. Check that the Csm_MacVerify stub was not called
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1352</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_TP_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>4341</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the static authentic PDU test buffer
    03. Test a received authentic PDU length that is bigger than the configured authentic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_StartOfReception for the authentic PDU and check if the request was accepted
        by the SecOC module
    11. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1353</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_TP_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>4467</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the static authentic PDU test buffer
    03. Test a received authentic PDU length that is the same as the configured authentic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_StartOfReception for the authentic PDU and check if the request was accepted
        by the SecOC module
    11. Call the SecOC_StartOfReception for the cryptographic PDU and check that the request was accepted
        by the SecOC module
    12. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and
        check that operation was successfully performed
    13. Call the SecOC_CopyRxData again to hand over the cryptographic PDU to
        the SecOC module and check that operation was successfully performed
    14. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU
        was sent and the verification procedure can be started
    15. Call the SecOC_TpRxIndication to notify the SecOC module that the cryptographic
        PDU was sent and the verification procedure can be started
    16. Call the main function and execute the verification procedure
    17. Check that the PduR_SecOCRxIndication stub was called once
    18. Check that the GetRxFreshness stub was called once
    19. Check that the Csm_MacVerify stub was called once
    20. Check that the job ID is for Csm_MacVerify
    21. Check that the provided data and data length are the expected ones
    22. Check that the provided MAC and MAC length are the expected ones
    23. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1354</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_AUTH_PDU_TP_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>4685</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the static authentic PDU test buffer
    03. Test a received authentic PDU length that is smaller than the configured authentic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_StartOfReception for the authentic PDU and check if the request was accepted
        by the SecOC module
    11. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1355</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_IF_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>4811</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the static crypto PDU test buffer
    03. Test a received cryptographic PDU length that is bigger than the configured cryptographic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was not called
    13. Check that the Csm_MacVerify stub was not called
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1356</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_IF_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>4950</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the static crypto PDU test buffer
    03. Test a received cryptographic PDU length that is the same as the configured cryptographic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called once
    14. Check that the job ID is for Csm_MacVerify
    15. Check that the PduR_SecOCRxIndication stub was called once
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1357</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_IF_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>5109</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the static crypto PDU test buffer
    03. Test a received cryptographic PDU length that is smaller than the configured cryptographic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was not called
    13. Check that the Csm_MacVerify stub was not called
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1358</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_TP_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>5248</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the static crypto PDU test buffer
    03. Test a received cryptographic PDU length that is bigger than the configured cryptographic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started
    11. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1359</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_TP_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>5374</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the static crypto PDU test buffer
    03. Test a received cryptographic PDU length that is the same as the configured cryptographic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_StartOfReception for the authentic PDU and check if the request was accepted
        by the SecOC module
    11. Call the SecOC_StartOfReception for the cryptographic PDU and check that the request was accepted
       by the SecOC module
    12. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and
        check that operation was successfully performed
    13. Call the SecOC_CopyRxData again to hand over the cryptographic PDU to
        the SecOC module and check that operation was successfully performed
    14. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU
        was sent and the verification procedure can be started
    15. Call the SecOC_TpRxIndication to notify the SecOC module that the cryptographic
        PDU was sent and the verification procedure can be started
    16. Call the main function and execute the verification procedure
    17. Check that the PduR_SecOCRxIndication stub was called once
    18. Check that the GetRxFreshness stub was called once
    19. Check that the Csm_MacVerify stub was called once
    20. Check that the job ID is for Csm_MacVerify
    21. Check that the provided data and data length are the expected ones
    22. Check that the provided MAC and MAC length are the expected ones
    23. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1360</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_23_CRYPTO_PDU_TP_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>5592</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception of the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_TPPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the static crypto PDU test buffer
    03. Test a received cryptographic PDU length that is smaller than the configured cryptographic PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to NULL_PTR
    07. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    09. Set PduR_SecOCRxIndication stub callout function
    10. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started
    11. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1361</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_24_PDU_HDR_EQUALS_ZERO</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>5720</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length and secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and equal to 0&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the dynamic secured PDU test buffer.
    03. Use a received secured PDU length that contains a PDU header.
    04. Initialize the PDU load.
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    06. Set Csm_MacVerify stub callout function to NULL_PTR.
    07. Prepare the secured I-PDU that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
         by the SecOC module.
    09. Set PduR_SecOCRxIndication stub callout function.
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
         and the verification procedure can be started.
    11. Call the main function and execute the verification procedure.
    12. Check that the GetRxFreshness stub was called once.
    13. Check that the Csm_MacVerify stub was called once.
    14. Check that the job ID is for Csm_MacVerify.
    15. Check that the provided data and data length are the expected ones
    16. Check that the provided MAC and MAC length are the expected ones
    17. Check that the PduR_SecOCRxIndication stub was called once
    18. Check that the authenticated I-PDU is the expected one.
    19. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1362</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_BIGGER_THAN_AUTHENTIC_DATA_LENGTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>5909</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length and secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the secured PDU test buffer.
    03. Use a received secured PDU length that contains a PDU header.
    04. Initialize the PDU load.
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    06. Set Csm_MacVerify stub callout function to NULL_PTR.
    07. Prepare the secured I-PDU that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
         by the SecOC module.
    09. Set PduR_SecOCRxIndication stub callout function.
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
         and the verification procedure can be started.
    11. Call the main function and execute the verification procedure.
    12. Check that the GetRxFreshness stub was not called.
    13. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1363</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_EQUALS_AUTHENTIC_DATA_LENGTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>6065</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length and secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the dynamic secured PDU test buffer.
    03. Initialize the PDU load.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacVerify stub callout function to NULL_PTR.
    06. Prepare the secured I-PDU that needs to be authenticated.
    07. Prepare the comparison data expected when the Csm_MacVerify is called
         by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
         and the verification procedure can be started.
    10. Call the main function and execute the verification procedure.
    11. Check that the GetRxFreshness stub was called once.
    12. Check that the Csm_MacVerify stub was called once.
    13. Check that the job ID is for Csm_MacVerify.
    14. Check that the provided data and data length are the expected ones
    15. Check that the provided MAC and MAC length are the expected ones
    16. Check that the PduR_SecOCRxIndication stub was called once
    17. Check that the authenticated I-PDU is the expected one.
    18. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1364</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH_RECV_LEN_EQUAL_CFG_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>6226</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length and secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the dynamic secured PDU test buffer.
    03. Use a received secured PDU length that contains a PDU header.
    04. Initialize the PDU load.
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    06. Set Csm_MacVerify stub callout function to NULL_PTR.
    07. Prepare the secured I-PDU that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
         by the SecOC module.
    09. Set PduR_SecOCRxIndication stub callout function.
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
         and the verification procedure can be started.
    11. Call the main function and execute the verification procedure.
    12. Check that the GetRxFreshness stub was called once.
    13. Check that the Csm_MacVerify stub was called once.
    14. Check that the job ID is for Csm_MacVerify.
    15. Check that the provided data and data length are the expected ones
    16. Check that the provided MAC and MAC length are the expected ones
    17. Check that the PduR_SecOCRxIndication stub was called once
    18. Check that the authenticated I-PDU is the expected one.
    19. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1365</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_09_PDU_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>6390</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length and secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the dynamic secured PDU test buffer.
    03. Use a received secured PDU length that contains a PDU header.
    04. Initialize the PDU load.
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    06. Set Csm_MacVerify stub callout function to NULL_PTR.
    07. Prepare the secured I-PDU that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
         by the SecOC module.
    09. Set PduR_SecOCRxIndication stub callout function.
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
         and the verification procedure can be started.
    11. Call the main function and execute the verification procedure.
    12. Check that the GetRxFreshness stub was not called.
    13. Check that the Csm_MacVerify stub was not called.
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1366</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_04_PDU_AUTHENTIC_DATA_LENGTH_SMALLER_THAN_SECURED_AREA</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>6556</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Secured area and secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;secured area = enabled and not equal to zero&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the dynamic secured PDU test buffer.
    03. Use a received secured PDU length that contains a PDU header.
    04. Initialize the PDU load.
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    06. Set Csm_MacVerify stub callout function to NULL_PTR.
    07. Prepare the secured I-PDU that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
         by the SecOC module.
    09. Set PduR_SecOCRxIndication stub callout function.
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
         and the verification procedure can be started.
    11. Call the main function and execute the verification procedure.
    12. Check that the GetRxFreshness stub was not called.
    13. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1367</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_26_PDU_COL_HDR_EQUAL_ZERO</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>6702</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length and secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and equal to 0&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the authentic PDU test buffer.
    03. Use a received authentic PDU length that contains a PDU header.
    04. Initialize the PDU load.
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    06. Set Csm_MacVerify stub callout function to NULL_PTR.
    07. Prepare the authentic I-PDU that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
         by the SecOC module.
    09. Set PduR_SecOCRxIndication stub callout function.
    10. Call the SecOC_RxIndication to hand over the authentic PDU.
    11. Call the SecOC_RxIndication to hand over the cryptographic PDU.
    12. Call the main function and execute the verification procedure.
    13. Check that the GetRxFreshness stub was called once.
    14. Check that the Csm_MacVerify stub was called once.
    15. Check that the job ID is for Csm_MacVerify.
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Check that the PduR_SecOCRxIndication stub was called once.
    19. Check that the authenticated I-PDU is the expected one.
    20. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1368</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_BIGGER_THAN_AUTHENTIC_DATA_LENGTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>6895</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length and secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the authentic secured PDU test buffer.
    03. Use a received authentic PDU length that contains a PDU header.
    04. Initialize the PDU load.
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    06. Set Csm_MacVerify stub callout function to NULL_PTR.
    07. Prepare the secured I-PDU that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
         by the SecOC module.
    09. Set PduR_SecOCRxIndication stub callout function.
    10. Call the SecOC_RxIndication to hand over the authentic PDU.
    11. Call the SecOC_RxIndication to hand over the cryptographic PDU.
    12. Call the main function and execute the verification procedure.
    13. Check that the GetRxFreshness stub was not called.
    14. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1369</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_EQUALS_AUTHENTIC_DATA_LENGTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>7058</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length and secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the authentic PDU test buffer.
    03. Use a received authentic PDU length that contains a PDU header.
    04. Initialize the PDU load.
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    06. Set Csm_MacVerify stub callout function to NULL_PTR.
    07. Prepare the secured I-PDU that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
         by the SecOC module.
    09. Set PduR_SecOCRxIndication stub callout function.
    10. Call the SecOC_RxIndication to hand over the authentic PDU.
    11. Call the SecOC_RxIndication to hand over the cryptographic PDU.
    12. Call the main function and execute the verification procedure.
    13. Check that the GetRxFreshness stub was called once.
    14. Check that the Csm_MacVerify stub was called once.
    15. Check that the job ID is for Csm_MacVerify.
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Check that the PduR_SecOCRxIndication stub was called once.
    19. Check that the authenticated I-PDU is the expected one.
    20. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1370</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH_RECV_LEN_EQUAL_CFG_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>7225</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length and secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the authentic PDU test buffer.
    03. Initialize the PDU load.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacVerify stub callout function to NULL_PTR.
    06. Prepare the secured I-PDU that needs to be authenticated.
    07. Prepare the comparison data expected when the Csm_MacVerify is called
         by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Call the SecOC_RxIndication to hand over the authentic PDU.
    10. Call the SecOC_RxIndication to hand over the cryptographic PDU.
    11. Call the main function and execute the verification procedure.
    12. Check that the GetRxFreshness stub was called once.
    13. Check that the Csm_MacVerify stub was called once.
    14. Check that the job ID is for Csm_MacVerify.
    15. Check that the provided data and data length are the expected ones.
    16. Check that the provided MAC and MAC length are the expected ones.
    17. Check that the PduR_SecOCRxIndication stub was called once.
    18. Check that the authenticated I-PDU is the expected one.
    19. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1371</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_17_PDU_COL_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>7392</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length and secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the authentic PDU test buffer.
    03. Use a received authentic PDU length that contains a PDU header.
    04. Initialize the PDU load.
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    06. Set Csm_MacVerify stub callout function to NULL_PTR.
    07. Prepare the secured I-PDU that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
         by the SecOC module.
    09. Set PduR_SecOCRxIndication stub callout function.
    10. Call the SecOC_RxIndication to hand over the authentic PDU.
    11. Call the SecOC_RxIndication to hand over the cryptographic PDU.
    12. Call the main function and execute the verification procedure.
    13. Check that the GetRxFreshness stub was called once.
    14. Check that the Csm_MacVerify stub was called once.
    15. Check that the job ID is for Csm_MacVerify.
    16. Check that the provided data and data length are the expected ones.
    17. Check that the provided MAC and MAC length are the expected ones.
    18. Check that the PduR_SecOCRxIndication stub was called once.
    19. Check that the authenticated I-PDU is the expected one.
    20. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1372</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_27_PDU_COL_PDU_AUTHENTIC_DATA_LENGTH_SMALLER_THAN_SECURED_AREA</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>7602</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length and secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;Secured area = enabled and not equal to 0&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the authentic PDU test buffer.
    03. Use a received authentic PDU length that contains a PDU header.
    04. Initialize the PDU load.
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    06. Set Csm_MacVerify stub callout function to NULL_PTR.
    07. Prepare the secured I-PDU that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
         by the SecOC module.
    09. Set PduR_SecOCRxIndication stub callout function.
    10. Call the SecOC_RxIndication to hand over the authentic PDU.
    11. Call the SecOC_RxIndication to hand over the cryptographic PDU.
    12. Call the main function and execute the verification procedure.
    13. Check that the GetRxFreshness stub was not called.
    14. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1373</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_PDU_LENGTH_SMALLER_THAN_MSG_LINK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>7765</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length and secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;Secured area = enabled and not equal to 0&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the authentic PDU test buffer.
    03. Use a received authentic PDU length that contains a PDU header.
    04. Initialize the PDU load.
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    06. Set Csm_MacVerify stub callout function to NULL_PTR.
    07. Prepare the secured I-PDU that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
         by the SecOC module.
    09. Set PduR_SecOCRxIndication stub callout function.
    10. Call the SecOC_RxIndication to hand over the authentic PDU.
    11. Call the SecOC_RxIndication to hand over the cryptographic PDU.
    12. Call the main function and execute the verification procedure.
    13. Check that the GetRxFreshness stub was not called.
    14. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1374</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_HDR_VALUE_BIGGER_THAN_AUTHENTIC_DATA_LENGTH_MESSAGELINK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>7935</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length and secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the authentic PDU test buffer.
    03. Initialize the PDU load.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacVerify stub callout function to NULL_PTR.
    06. Prepare the secured I-PDU that needs to be authenticated.
    07. Prepare the comparison data expected when the Csm_MacVerify is called
         by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Call the SecOC_RxIndication to hand over the authentic PDU.
    10. Call the SecOC_RxIndication to hand over the cryptographic PDU.
    11. Call the main function and execute the verification procedure.
    12. Check that the GetRxFreshness stub was not called.
    13. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1375</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_HDR_VALUE_SMALLER_THAN_AUTHENTIC_DATA_LENGTH_MESSAGELINK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>8067</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length and secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the dynamic authentic PDU test buffer.
    03. Initialize the PDU load.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacVerify stub callout function to NULL_PTR.
    06. Prepare the secured I-PDU that needs to be authenticated.
    07. Prepare the comparison data expected when the Csm_MacVerify is called
         by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Call the SecOC_RxIndication to hand over the authentic PDU.
    10. Call the SecOC_RxIndication to hand over the cryptographic PDU.
    11. Call the main function and execute the verification procedure.
    12. Check that the GetRxFreshness stub was not called.
    13. Check that the Csm_MacVerify stub was not  called.
    14. Check that the PduR_SecOCRxIndication stub was not called.
    15. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1376</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_DYNAMICPDULENGTH_18_PDU_COL_HDR_VALUE_EQUALS_AUTHENTIC_DATA_LENGTH_MESSAGELINK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>8210</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length and secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the authentic PDU test buffer.
    03. Initialize the PDU load.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacVerify stub callout function to NULL_PTR.
    06. Prepare the secured I-PDU that needs to be authenticated.
    07. Prepare the comparison data expected when the Csm_MacVerify is called
         by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Call the SecOC_RxIndication to hand over the authentic PDU.
    10. Call the SecOC_RxIndication to hand over the cryptographic PDU.
    11. Call the main function and execute the verification procedure.
    12. Check that the GetRxFreshness stub was called once.
    13. Check that the Csm_MacVerify stub was called once.
    14. Check that the job ID is for Csm_MacVerify.
    15. Check that the provided data and data length are the expected ones
    16. Check that the provided MAC and MAC length are the expected ones
    17. Check that the PduR_SecOCRxIndication stub was called once.
    18. Check that the authenticated I-PDU is the expected one.
    19. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1377</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_RX_IGNORE_FVM_FAILURES_AUTH_ATTEMPS_NOT_ZERO_09_IF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_IgnoreFVMFailures/source/application/Tests.c</sourcefile>
      <sourceline>123</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks if SecOC passes the authentic PDU to the upper layer when its configured
    to use the CSM services in the asynchronous mode and the ignore FVM failures feature is enabled.
  
Test Object: 
    Ignore FVM failures feature
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore FVM Failures is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function to NULL_PTR.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    07. Set PduR_SecOCRxIndication stub callout function.
    Part a: FVM returns E_NOT_OK
      a08. Set the return value of TS_GetRxFreshness to E_NOT_OK
      a09. Call the SecOC_RxIndication to hand over the secured PDU to SecOC and to notify that
           the verification procedure can be started
      a10. Call the main function in order to execute the verification procedure
      a11. Check that the GetRxFreshness stub was called once
      a12. Check that the Csm_MacVerify stub was  not calledcalled once
      a13. Check that the PduR_SecOCRxIndication stub was called even if the FVM
           result was a negative one
      a14. Check that the authenticated I-PDU is the expected one
    Part b: FVM returns TS_SECOC_E_BUSY
      b08. Set the return value of TS_GetRxFreshness to TS_SECOC_E_BUSY
      b09. Call the SecOC_RxIndication to hand over the secured PDU to SecOC and to notify that
           the verification procedure can be started
      b10. Call the main function in order to execute the verification procedure
      b11. Check that the GetRxFreshness stub was called twice
      b12. Check that the Csm_MacVerify stub was not called
      b13. Check that the PduR_SecOCRxIndication stub was not called
      b14. Call the SecOC_RxIndication to hand over the secured PDU to SecOC and to notify that
           the verification procedure can be started
      b15. Call the main function in order to execute the verification procedure
      b15. Check that the GetRxFreshness stub was called twice
      b17. Check that the Csm_MacVerify stub was not called
      b18. Check that the PduR_SecOCRxIndication stub was called even if the FVM
           result was a negative one
      b19. Check that the authenticated I-PDU is the expected one
    Part c: FVM returns E_OK
      c08. Set the return value of TS_GetRxFreshness to E_NOT_OK
      c09. Call the SecOC_RxIndication to hand over the secured PDU to SecOC and to notify that
           the verification procedure can be started
      c10. Call the main function in order to execute the verification procedure
      c11. Check that the GetRxFreshness stub was called once
      c12. Check that the Csm_MacVerify stub was called once
      c13. Check that the job ID is for Csm_MacVerify
      c14. Check that the provided data and data length are the expected ones
      c15. Check that the provided MAC and MAC length are the expected ones
      c16. Check that the PduR_SecOCRxIndication stub was called even if the FVM
           result was a negative one
      c17. Check that the authenticated I-PDU is the expected one
    Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>663</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1378</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_IGNORE_FVM_FAILURES_FVM_SYNC_NOT_ZERO_13_IF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_IgnoreFVMFailures/source/application/Tests.c</sourcefile>
      <sourceline>437</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks if SecOC passes the authentic PDU to the upper layer when its configured
    to use the CSM services in the asynchronous mode and the ignore FVM failures feature is enabled.
  
Test Object: 
    Ignore FVM failures feature
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore FVM Failures is enabled. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the PDU load
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Set TS_GetRxFreshness_Result to E_OK
    09. Set TS_GetRxFreshness_Result to E_NOT_OK
    10. Call the SecOC_RxIndication to hand over the secured PDU to SecOC and to notify that
        the verification procedure can be started
    11. Call the main function in order to execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called twice
    14. Check that the job ID is for Csm_MacVerify
    15. Check that the provided data and data length are the expected ones
    16. Check that the provided MAC and MAC length are the expected ones
    17. Check that the PduR_SecOCRxIndication stub was not called
    18. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>663</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1379</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_IGNORE_FVM_FAILURES_AUTH_ATTEMPS_ZERO_13_IF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_IgnoreFVMFailures/source/application/Tests.c</sourcefile>
      <sourceline>610</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks if SecOC passes the authentic PDU to the upper layer when its configured
    to use the CSM services in the asynchronous mode and the ignore FVM failures feature is enabled.
  
Test Object: 
    Ignore FVM failures feature
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore FVM Failures is enabled. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the PDU load
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Set the return value of TS_GetRxFreshness to TS_SECOC_E_BUSY
    09. Call the SecOC_RxIndication to hand over the secured PDU to SecOC and to notify that
        the verification procedure can be started
    10. Call the main function in order to execute the verification procedure
    11. Check that the GetRxFreshness stub was called once
    12. Check that the Csm_MacVerify stub was not called
    13. Check that the PduR_SecOCRxIndication stub was called
    14. Check that the authenticated I-PDU is the expected one
    15. Set TS_GetRxFreshness_Result to E_OK
    16. Call the SecOC_RxIndication to hand over the secured PDU to SecOC and to notify that
        the verification procedure can be started
    17. Call the main function in order to execute the verification procedure
    18. Check that the GetRxFreshness stub was called once
    19. Check that the Csm_MacVerify stub was called once
    20. Check that the job ID is for Csm_MacVerify
    21. Check that the provided data and data length are the expected ones
    22. Check that the provided MAC and MAC length are the expected ones
    23. Check that the PduR_SecOCRxIndication stub was called
    24. Check that the authenticated I-PDU is the expected one
    25. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>663</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1380</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_IGNORE_FVM_FAILURES_17_IF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_IgnoreFVMFailures/source/application/Tests.c</sourcefile>
      <sourceline>834</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks if SecOC passes the authentic PDU to the upper layer when its configured
    to use the CSM services in the asynchronous mode and the ignore FVM failures feature is enabled.
  
Test Object: 
    Ignore FVM failures feature
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore FVM Failures is enabled. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    07. Set PduR_SecOCRxIndication stub callout function
      Part a: FVM returns E_NOT_OK
      a08. Set the return value of TS_GetRxFreshness to E_NOT_OK
      a09. Call the SecOC_RxIndication to hand over the authentic PDU
      a10. Call the SecOC_RxIndication to hand over the cryptographic PDU
      a11. Call the main function in order to execute the verification procedure
      a12. Check that the GetRxFreshness stub was called once
      a13. Check that the Csm_MacVerify stub was not called
      a14. Check that the PduR_SecOCRxIndication stub was called once
      a15. Check that the authenticated I-PDU is the expected one
      Part b: FVM returns TS_SECOC_E_BUSY
      b08. Set the return value of TS_GetRxFreshness to TS_SECOC_E_BUSY
      b09. Call the SecOC_RxIndication to hand over the authentic PDU
      b10. Call the SecOC_RxIndication to hand over the cryptographic PDU
      b11. Call the main function in order to execute the verification procedure
      b12. Check that the GetRxFreshness stub was called twice
      b13. Check that the Csm_MacVerify stub was not called
      b14. Check that the PduR_SecOCRxIndication stub was not called
      b15. Call the SecOC_RxIndication to hand over the authentic PDU
      b16. Call the SecOC_RxIndication to hand over the cryptographic PDU
      b17. Call the main function in order to execute the verification procedure
      b18. Check that the GetRxFreshness stub was called twice
      b19. Check that the Csm_MacVerify stub was not called
      b20. Check that the PduR_SecOCRxIndication stub was called even if the FVM
          result was a negative one
      b21. Check that the authenticated I-PDU is the expected one
      Part c: FVM returns E_OK
      c08. Set the return value of TS_GetRxFreshness to E_OK
      c09. Call the SecOC_RxIndication to hand over the authentic PDU
      c10. Call the SecOC_RxIndication to hand over the cryptographic PDU
      c11. Call the main function in order to execute the verification procedure
      c12. Check that the GetRxFreshness stub was called once
      c13. Check that the Csm_MacVerify stub was called once
      c14. Check that the job ID is for Csm_MacVerify
      c15. Check that the provided data and data length are the expected ones
      c16. Check that the provided MAC and MAC length are the expected ones
      c17. Check that the PduR_SecOCRxIndication stub was called once
      c18. Check that the authenticated I-PDU is the expected one
    Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>663</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1381</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_IGNORE_FVM_FAILURES_09_TP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_IgnoreFVMFailures/source/application/Tests.c</sourcefile>
      <sourceline>1124</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks if SecOC passes the authentic PDU to the upper layer when its configured
    to use the CSM services in the asynchronous mode and the ignore FVM failures feature is enabled.
  
Test Object: 
    Ignore FVM failures feature
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore FVM Failures is enabled. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function to NULL_PTR.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    07. Set PduR_SecOCRxIndication stub callout function.
    Part a: FVM returns E_NOT_OK
      a08. Set the return value of TS_GetRxFreshness to E_NOT_OK
      a09. Call the SecOC_StartOfReception for the secured PDU and check if the request was accepted
           by the SecOC module
      a10. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
           and the verification procedure can be started
      a11. Call the main function in order to execute the verification procedure
      a12. Check that the GetRxFreshness stub was called once
      a13. Check that the Csm_MacVerify stub was  not called
      a14. Check that the PduR_SecOCRxIndication stub was called even if the FVM
           result was a negative one
      a15. Check that the authenticated I-PDU is the expected one
    Part b: FVM returns TS_SECOC_E_BUSY
      b08. Set the return value of TS_GetRxFreshness to TS_SECOC_E_BUSY
      b09. Call the SecOC_StartOfReception for the secured PDU and check if the request was accepted
           by the SecOC module
      b10. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
           and the verification procedure can be started
      b11. Call the main function in order to execute the verification procedure
      b12. Check that the GetRxFreshness stub was called twice
      b13. Check that the Csm_MacVerify stub was not called
      b14. Check that the PduR_SecOCRxIndication stub was not called
      b15. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
           and the verification procedure can be started
      b16. Call the main function in order to execute the verification procedure
      b17. Check that the GetRxFreshness stub was called twice
      b18. Check that the Csm_MacVerify stub was not called
      b19. Check that the PduR_SecOCRxIndication stub was called even if the FVM
           result was a negative one
      b20. Check that the authenticated I-PDU is the expected one
    Part c: FVM returns E_OK
      c08. Set the return value of TS_GetRxFreshness to E_OK
      c09. Call the SecOC_StartOfReception for the secured PDU and check if the request was accepted
           by the SecOC module
      c10. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
           and the verification procedure can be started
      c11. Call the main function in order to execute the verification procedure
      c12. Check that the GetRxFreshness stub was called once
      c13. Check that the Csm_MacVerify stub was called once
      c14. Check that the job ID is for Csm_MacVerify
      c15. Check that the provided data and data length are the expected ones
      c16. Check that the provided MAC and MAC length are the expected ones
      c17. Check that the PduR_SecOCRxIndication stub was called even if the FVM
           result was a negative one
      c18. Check that the authenticated I-PDU is the expected one
    Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>663</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1382</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_IGNORE_FVM_FAILURES_17_TP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_IgnoreFVMFailures/source/application/Tests.c</sourcefile>
      <sourceline>1500</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks if SecOC passes the authentic PDU to the upper layer when its configured
    to use the CSM services in the asynchronous mode and the ignore FVM failures feature is enabled.
  
Test Object: 
    Ignore FVM failures feature
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore FVM Failures is enabled. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function to NULL_PTR.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    07. Set PduR_SecOCRxIndication stub callout function.
    Part a: FVM returns E_NOT_OK
      a08. Set the return value of TS_GetRxFreshness to E_NOT_OK
      a09. Call the SecOC_StartOfReception for the authentic PDU and check if the request was accepted
           by the SecOC module
      a10. Call the SecOC_StartOfReception for the cryptographic PDU and check that the request was accepted
           by the SecOC module
      a11. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and
           check that operation was successfully performed
      a12. Call the SecOC_CopyRxData again to hand over the cryptographic PDU to
           the SecOC module and check that operation was successfully performed
      a13. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU
           was sent and the verification procedure can be started
      a14. Call the SecOC_TpRxIndication to notify the SecOC module that the cryptographic
           PDU was sent and the verification procedure can be started
      a15. Call the main function in order to execute the verification procedure
      a16. Check that the GetRxFreshness stub was called once
      a17. Check that the Csm_MacVerify stub was  not called
      a18. Check that the PduR_SecOCRxIndication stub was called even if the FVM
           result was a negative one
      a19. Check that the authenticated I-PDU is the expected one
    Part b: FVM returns TS_SECOC_E_BUSY
      b08. Set the return value of TS_GetRxFreshness to TS_SECOC_E_BUSY
      b09. Call the SecOC_StartOfReception for the authentic PDU and check if the request was accepted
           by the SecOC module
      b10. Call the SecOC_StartOfReception for the cryptographic PDU and check that the request was accepted
           by the SecOC module
      b11. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and
           check that operation was successfully performed
      b12. Call the SecOC_CopyRxData again to hand over the cryptographic PDU to
           the SecOC module and check that operation was successfully performed
      b13. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU
           was sent and the verification procedure can be started
      b14. Call the SecOC_TpRxIndication to notify the SecOC module that the cryptographic
           PDU was sent and the verification procedure can be started
      b15. Call the main function in order to execute the verification procedure
      b16. Check that the GetRxFreshness stub was called twice
      b17. Check that the Csm_MacVerify stub was not called
      b18. Check that the PduR_SecOCRxIndication stub was not called
      b19. Call the SecOC_TpRxIndication to hand over the authentic PDU
      b20. Call the SecOC_TpRxIndication to hand over the cryptographic PDU
      b21. Call the main function in order to execute the verification procedure
      b22. Check that the GetRxFreshness stub was called twice
      b23. Check that the Csm_MacVerify stub was not called
      b24. Check that the PduR_SecOCRxIndication stub was called even if the FVM
           result was a negative one
      b25. Check that the authenticated I-PDU is the expected one
    Part c: FVM returns E_OK
      c08. Set the return value of TS_GetRxFreshness to E_OK
      c09. Call the SecOC_StartOfReception for the authentic PDU and check if the request was accepted
           by the SecOC module
      c10. Call the SecOC_StartOfReception for the cryptographic PDU and check that the request was accepted
           by the SecOC module
      c11. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and
           check that operation was successfully performed
      c12. Call the SecOC_CopyRxData again to hand over the cryptographic PDU to
           the SecOC module and check that operation was successfully performed
      c13. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU
           was sent and the verification procedure can be started
      c14. Call the SecOC_TpRxIndication to notify the SecOC module that the cryptographic
           PDU was sent and the verification procedure can be started
      c15. Call the main function in order to execute the verification procedure
      c16. Check that the GetRxFreshness stub was called once
      c17. Check that the Csm_MacVerify stub was called once
      c18. Check that the job ID is for Csm_MacVerify
      c19. Check that the provided data and data length are the expected ones
      c20. Check that the provided MAC and MAC length are the expected ones
      c21. Check that the PduR_SecOCRxIndication stub was called even if the FVM
           result was a negative one
      c22. Check that the authenticated I-PDU is the expected one
    Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>663</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1383</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_RX_IGNORE_VER_RES_09_IF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_IgnoreVerRes/source/application/Tests.c</sourcefile>
      <sourceline>118</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks if SecOC pass the authentic PDU to the upper layer when its configured
    to use the CSM services in the asynchronous mode and the ignore verification result is enabled.
  
Test Object: 
    Ignore verification result feature
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function to NULL_PTR.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    07. Set PduR_SecOCRxIndication stub callout function.
    08. Call the SecOC_RxIndication to hand over the secured PDU to SecOC and to notify that
        the verification procedure can be started.
    09. Call the main function in order to execute the verification procedure.
    10. Check that the GetRxFreshness stub was called once.
    11. Check that the Csm_MacVerify stub was called once.
    12. Check that the job ID is for Csm_MacVerify.
    13. Check that the provided data and data length are the expected ones.
    14. Check that the provided MAC and MAC length are the expected ones.
    15. Call the SecOC_CsmMacVerCallback with the result to E_NOT_OK to indicate that
        the verification failed.
    16. Call the main function in order to finish the verification procedure.
    17. Check that the PduR_SecOCRxIndication stub was called even if the callback
        result was a negative one.
    18. Check that the authenticated I-PDU is the expected one.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00046_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00081</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1384</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_NO_INIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>131</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "drop until notice". Until further notice,
    no verification is performed (No CSM call) and PDUs are dropped.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride and check that the result is E_NOT_OK as the SecOC module
        isn't initialized
    09. Initialize the SecOC module and the stubs
    10. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and drop the
        PDU for the next 5 PDUs.
    11. Execute the Rx procedure for 5 PDUs and check that the PDUs are dropped
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was not called as the verification result was
        overridden and the PDU was dropped
        f. Check that the verification status was propagated
    12. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    13. Call the main function and execute the verification procedure
    14. Check that the GetRxFreshness stub was called once
    15. Check that the Csm_MacVerify stub was called once
    16. Check that the job ID is for Csm_MacVerify
    17. Check that the provided data and data length are the expected ones
    18. Check that the provided MAC and MAC length are the expected ones
    19. Check that the PduR_SecOCRxIndication stub was called once
    20. Check that the authenticated I-PDU is the expected one
    21. Check that the verification status was propagated
    22. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1385</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_DROP_UNTIL_NOTICE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>372</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "drop until notice". Until further notice,
    no verification is performed (No CSM call) and PDUs are dropped.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and drop the
        PDU until further notice.
    09. Execute the Rx procedure for 20 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was not called as the verification result was
        overridden and the PDU was dropped
        f. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was called once
    15. Check that the job ID is for Csm_MacVerify
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Check that the PduR_SecOCRxIndication stub was called once
    19. Check that the authenticated I-PDU is the expected one
    20. Check that the verification status was propagated
    21. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>607</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1386</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_DROP_UNTIL_LIMIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>606</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "drop until limit". Until the limit is reached,
    no verification is performed (No CSM call) and PDUs are dropped.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and drop the
        PDU for the next 5 PDUs.
    09. Execute the Rx procedure for 5 PDUs and check that the PDUs are dropped
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was not called as the verification result was
        overridden and the PDU was dropped
        f. Check that the verification status was propagated
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called once
    14. Check that the job ID is for Csm_MacVerify
    15. Check that the provided data and data length are the expected ones
    16. Check that the provided MAC and MAC length are the expected ones
    17. Check that the PduR_SecOCRxIndication stub was called once
    18. Check that the authenticated I-PDU is the expected one
    19. Check that the verification status was propagated
    20. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>606</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1387</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_DROP_UNTIL_LIMIT_CANCEL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>831</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "drop until limit". Until the limit is reached,
    no verification is performed (No CSM call) and PDUs are dropped.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and drop the
        next 20 PDUs.
    09. Execute the Rx procedure for 5 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was not called as the verification result was
        overridden and the PDU was dropped
        f. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was called once
    15. Check that the job ID is for Csm_MacVerify
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Check that the PduR_SecOCRxIndication stub was called once
    19. Check that the authenticated I-PDU is the expected one
    20. Check that the verification status was propagated
    21. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1388</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_SKIP_UNTIL_NOTICE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>1067</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until notice". Until further notice,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the PDU to the upper layer until further notice.
    09. Execute the Rx procedure for 20 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was called once
    15. Check that the job ID is for Csm_MacVerify
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Check that the PduR_SecOCRxIndication stub was called once
    19. Check that the authenticated I-PDU is the expected one
    20. Check that the verification status was propagated
    21. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1389</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_17_IF_SKIP_UNTIL_NOTICE_PDU_COL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>1298</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until notice". Until further notice,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the cryptographic PDU and the authentic PDU
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function for the PDU ID 17
    04. Set Csm_MacVerify stub callout function
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the PDU to the upper layer until further notice.
    09. Execute the Rx procedure for 20 PDUs
        a. Call the SecOC_RxIndication to hand over the authentic PDU
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call the SecOC_RxIndication to hand over the cryptographic PDU
    11. Call the main function in order to start the verification procedure
    12. Check that the GetRxFreshness stub was not called
    13. Check that the Csm_MacVerify stub was not called
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Call the SecOC_RxIndication to hand over the authentic PDU
    16. Call the main function in order to start the verification procedure
    17. Check that the GetRxFreshness stub was not called
    18. Check that the Csm_MacVerify stub was not called
    19. Check that the PduR_SecOCRxIndication stub was called once
    20. Check that the authenticated I-PDU is the expected one
    21. Check that the verification status was propagated
    22. Call SecOC_VerifyStatusOverride in order to cancel the override
    23. Call the SecOC_RxIndication to hand over the authentic PDU
    24. Call the main function in order to start the verification procedure
    25. Check that the GetRxFreshness stub was not called
    26. Check that the Csm_MacVerify stub was not called
    27. Check that the PduR_SecOCRxIndication stub was not called
    28. Call the SecOC_RxIndication to hand over the cryptographic PDU
    29. Call the main function and execute the verification procedure
    30. Check that the GetRxFreshness stub was called once
    31. Check that the Csm_MacVerify stub was called once
    32. Check that the job ID is for Csm_MacVerify
    33. Check that the provided data and data length are the expected ones
    34. Check that the provided MAC and MAC length are the expected ones
    35. Check that the PduR_SecOCRxIndication stub was called once
    36. Check that the verification status was propagated
    37. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1390</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_18_IF_SKIP_UNTIL_NOTICE_PDU_COL_MSG_LINK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>1599</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until notice". Until further notice,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the cryptographic PDU and the authentic PDU
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function for the PDU ID 18
    04. Set Csm_MacVerify stub callout function
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the PDU to the upper layer until further notice.
    09. Execute the Rx procedure for 20 PDUs
        a. Call the SecOC_RxIndication to hand over the authentic PDU
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call the SecOC_RxIndication to hand over the cryptographic PDU
    11. Call the main function in order to start the verification procedure
    12. Check that the GetRxFreshness stub was not called
    13. Check that the Csm_MacVerify stub was not called
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Call the SecOC_RxIndication to hand over the authentic PDU
    16. Call the main function in order to start the verification procedure
    17. Check that the GetRxFreshness stub was not called
    18. Check that the Csm_MacVerify stub was not called
    19. Check that the PduR_SecOCRxIndication stub was called once
    20. Check that the authenticated I-PDU is the expected one
    21. Check that the verification status was propagated
    22. Call SecOC_VerifyStatusOverride in order to cancel the override
    23. Call the SecOC_RxIndication to hand over the authentic PDU
    24. Call the main function in order to start the verification procedure
    25. Check that the GetRxFreshness stub was not called
    26. Check that the Csm_MacVerify stub was not called
    27. Check that the PduR_SecOCRxIndication stub was not called
    28. Call the SecOC_RxIndication to hand over the cryptographic PDU
    29. Call the main function and execute the verification procedure
    30. Check that the GetRxFreshness stub was called once
    31. Check that the Csm_MacVerify stub was called once
    32. Check that the job ID is for Csm_MacVerify
    33. Check that the provided data and data length are the expected ones
    34. Check that the provided MAC and MAC length are the expected ones
    35. Check that the PduR_SecOCRxIndication stub was called once
    36. Check that the verification status was propagated
    37. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>606</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1391</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_17_TP_SKIP_UNTIL_NOTICE_PDU_COL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>1904</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via TP
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until notice". Until further notice,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the cryptographic PDU and the authentic PDU
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the PDU to the upper layer until further notice.
    09. Execute the Rx procedure for 20 PDUs
        a. Call the SecOC_StartOfReception for the authentic PDUand check that the request was
        accepted by the SecOC module
        b. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and check
        that operation was successfully performed
        c. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU was sent
        and the verification procedure can be started
        d. Call the main function in order to start the verification procedure
        e. Check that the GetRxFreshness stub was not called
        f. Check that the Csm_MacVerify stub was not called
        g. Check that the PduR_SecOCRxIndication stub was called once
        h. Check that the verification status was propagated
    10. Call the reception APIs to hand over the cryptographic PDU fully and partially the authentic PDU
    11. Call the main function in order to start the verification procedure
    12. Check that the GetRxFreshness stub was not called
    13. Check that the Csm_MacVerify stub was not called
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Call the reception API to finalize the hand over of the authentic PDU
    16. Call the main function in order to start the verification procedure
    17. Check that the GetRxFreshness stub was not called
    18. Check that the Csm_MacVerify stub was not called
    19. Check that the PduR_SecOCRxIndication stub was called once
    20. Check that the authenticated I-PDU is the expected one
    21. Check that the verification status was propagated
    22. Call SecOC_VerifyStatusOverride in order to cancel the override
    23. Call the SecOC_StartOfReception for the authentic PDU and check that the request was
        accepted by the SecOC module
    24. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and check
        that operation was successfully performed
    25. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU was sent
        and the verification procedure can be started
    26. Call the main function and execute the verification procedure
    27. Check that the PduR_SecOCRxIndication stub was not called
    28. Call the SecOC_StartOfReception for the cryptographic PDU and check that the request was
        accepted by the SecOC module
    29. Call the SecOC_CopyRxData again to hand over the cryptographic PDU to the SecOC module
        and check that operation was successfully performed
    30. Call the SecOC_TpRxIndication to notify the SecOC module that the cryptographic PDU was
        sent and the verification procedure can be started
    31. Call the main function and execute the verification procedure
    32. Check that the GetRxFreshness stub was called once
    33. Check that the Csm_MacVerify stub was called once
    34. Check that the job ID is for Csm_MacVerify
    35. Check that the provided data and data length are the expected ones
    36. Check that the provided MAC and MAC length are the expected ones
    37. Check that the PduR_SecOCRxIndication stub was called once
    38. Check that the verification status was propagated
    39. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>606</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1392</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_18_TP_SKIP_UNTIL_NOTICE_PDU_COL_MSG_LINK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>2313</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via TP
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until notice". Until further notice,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the cryptographic PDU and the authentic PDU
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the PDU to the upper layer until further notice.
    09. Execute the Rx procedure for 20 PDUs
        a. Call the SecOC_StartOfReception for the authentic PDUand check that the request was
        accepted by the SecOC module
        b. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and check
        that the operation was successfully performed
        c. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU was sent
        and the verification procedure can be started
        d. Call the main function in order to start the verification procedure
        e. Check that the GetRxFreshness stub was not called
        f. Check that the Csm_MacVerify stub was not called
        g. Check that the PduR_SecOCRxIndication stub was called once
        h. Check that the verification status was propagated
    10. Call the reception APIs to hand over the cryptographic PDU fully and partially the authentic PDU
    11. Call the main function in order to start the verification procedure
    12. Check that the GetRxFreshness stub was not called
    13. Check that the Csm_MacVerify stub was not called
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Call the reception API to finalize the hand over of the authentic PDU
    16. Call the main function in order to start the verification procedure
    17. Check that the GetRxFreshness stub was not called
    18. Check that the Csm_MacVerify stub was not called
    19. Check that the PduR_SecOCRxIndication stub was called once
    20. Check that the authenticated I-PDU is the expected one
    21. Check that the verification status was propagated
    22. Call SecOC_VerifyStatusOverride in order to cancel the override
    23. Call the SecOC_StartOfReception for the authentic PDU and check that the request was
        accepted by the SecOC module
    24. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and check
        that operation was successfully performed
    25. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU was sent
        and the verification procedure can be started
    26. Call the main function and execute the verification procedure
    27. Check that the PduR_SecOCRxIndication stub was not called
    28. Call the SecOC_StartOfReception for the cryptographic PDU and check that the request was
        accepted by the SecOC module
    29. Call the SecOC_CopyRxData again to hand over the cryptographic PDU to the SecOC module
        and check that operation was successfully performed
    30. Call the SecOC_TpRxIndication to notify the SecOC module that the cryptographic PDU was
        sent and the verification procedure can be started
    31. Call the main function and execute the verification procedure
    32. Check that the GetRxFreshness stub was called once
    33. Check that the Csm_MacVerify stub was called once
    34. Check that the job ID is for Csm_MacVerify
    35. Check that the provided data and data length are the expected ones
    36. Check that the provided MAC and MAC length are the expected ones
    37. Check that the PduR_SecOCRxIndication stub was called once
    38. Check that the verification status was propagated
    39. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1393</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_SKIP_UNTIL_LIMIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>2724</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until limit". Until the limit is reached,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the next 5 PDUs to the upper layer.
    09. Execute the Rx procedure for 5 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called once
    14. Check that the job ID is for Csm_MacVerify
    15. Check that the provided data and data length are the expected ones
    16. Check that the provided MAC and MAC length are the expected ones
    17. Check that the PduR_SecOCRxIndication stub was called once
    18. Check that the authenticated I-PDU is the expected one
    19. Check that the verification status was propagated
    20. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1394</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_17_IF_SKIP_UNTIL_LIMIT_PDU_COL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>2945</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until limit". Until the limit is reached,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the cryptographic PDU and the authentic PDU
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function for the PDU ID 11
    04. Set Csm_MacVerify stub callout function
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the next 5 PDUs to the upper layer.
    09. Execute the Rx procedure for 5 PDUs
        a. Call the SecOC_RxIndication to hand over the authentic PDU
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to hand over the authentic PDU
    12. Call the main function in order to start the verification procedure
    13. Check that the PduR_SecOCRxIndication stub was not called
    14. Call the SecOC_RxIndication to hand over the cryptographic PDU
    15. Call the main function and execute the verification procedure
    16. Check that the GetRxFreshness stub was called once
    17. Check that the Csm_MacVerify stub was called once
    18. Check that the job ID is for Csm_MacVerify
    19. Check that the provided data and data length are the expected ones
    20. Check that the provided MAC and MAC length are the expected ones
    21. Check that the PduR_SecOCRxIndication stub was called once
    22. Check that the verification status was propagated
    23. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1395</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_18_IF_SKIP_UNTIL_LIMIT_PDU_COL_MSG_LINK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>3176</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until limit". Until the limit is reached,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the cryptographic PDU and the authentic PDU
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function for the PDU ID 18
    04. Set Csm_MacVerify stub callout function
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the next 5 PDUs to the upper layer.
    09. Execute the Rx procedure for 5 PDUs
        a. Call the SecOC_RxIndication to hand over the authentic PDU
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call the SecOC_RxIndication to hand over the authentic PDU
    11. Call the main function in order to start the verification procedure
    12. Check that the PduR_SecOCRxIndication stub was not called
    13. Call the SecOC_RxIndication to hand over the cryptographic PDU
    14. Call the main function and execute the verification procedure
    15. Check that the GetRxFreshness stub was called once
    16. Check that the Csm_MacVerify stub was called once
    17. Check that the job ID is for Csm_MacVerify
    18. Check that the provided data and data length are the expected ones
    19. Check that the provided MAC and MAC length are the expected ones
    20. Check that the PduR_SecOCRxIndication stub was called once
    21. Check that the verification status was propagated
    22. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1396</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_17_TP_SKIP_UNTIL_LIMIT_PDU_COL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>3400</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via TP
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until notice". Until further notice,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the cryptographic PDU and the authentic PDU
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the next 5 PDUs to the upper layer.
    09. Execute the Rx procedure for 5 PDUs
        a. Call the SecOC_StartOfReception for the authentic PDUand check that the request was
        accepted by the SecOC module
        b. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and check
        that operation was successfully performed
        c. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU was sent
        and the verification procedure can be started
        d. Call the main function in order to start the verification procedure
        e. Check that the GetRxFreshness stub was not called
        f. Check that the Csm_MacVerify stub was not called
        g. Check that the PduR_SecOCRxIndication stub was called once
        h. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_StartOfReception for the authentic PDU and check that the request was
        accepted by the SecOC module
    12. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and check
        that operation was successfully performed
    13. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU was sent
        and the verification procedure can be started
    14. Call the main function and execute the verification procedure
    15. Check that the PduR_SecOCRxIndication stub was not called
    16. Call the SecOC_StartOfReception for the cryptographic PDU and check that the request was
        accepted by the SecOC module
    17. Call the SecOC_CopyRxData again to hand over the cryptographic PDU to the SecOC module
        and check that operation was successfully performed
    18. Call the SecOC_TpRxIndication to notify the SecOC module that the cryptographic PDU was
        sent and the verification procedure can be started
    19. Call the main function and execute the verification procedure
    20. Check that the GetRxFreshness stub was called once
    21. Check that the Csm_MacVerify stub was called once
    22. Check that the job ID is for Csm_MacVerify
    23. Check that the provided data and data length are the expected ones
    24. Check that the provided MAC and MAC length are the expected ones
    25. Check that the PduR_SecOCRxIndication stub was called once
    26. Check that the verification status was propagated
    27. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1397</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_18_TP_SKIP_UNTIL_LIMIT_PDU_COL_MSG_LINK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>3720</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via TP
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until notice". Until further notice,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the cryptographic PDU and the authentic PDU
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the next 5 PDUs to the upper layer.
    09. Execute the Rx procedure for 5 PDUs
        a. Call the SecOC_StartOfReception for the authentic PDUand check that the request was
        accepted by the SecOC module
        b. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and check
        that the operation was successfully performed
        c. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU was sent
        and the verification procedure can be started
        d. Call the main function in order to start the verification procedure
        e. Check that the GetRxFreshness stub was not called
        f. Check that the Csm_MacVerify stub was not called
        g. Check that the PduR_SecOCRxIndication stub was called once
        h. Check that the verification status was propagated
    10. Call the SecOC_StartOfReception for the authentic PDU and check that the request was
        accepted by the SecOC module
    11. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and check
        that operation was successfully performed
    12. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU was sent
        and the verification procedure can be started
    13. Call the main function and execute the verification procedure
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Call the SecOC_StartOfReception for the cryptographic PDU and check that the request was
        accepted by the SecOC module
    16. Call the SecOC_CopyRxData again to hand over the cryptographic PDU to the SecOC module
        and check that the operation was successfully performed
    17. Call the SecOC_TpRxIndication to notify the SecOC module that the cryptographic PDU was
        sent and the verification procedure can be started
    18. Call the main function and execute the verification procedure
    19. Check that the GetRxFreshness stub was called once
    20. Check that the Csm_MacVerify stub was called once
    21. Check that the job ID is for Csm_MacVerify
    22. Check that the provided data and data length are the expected ones
    23. Check that the provided MAC and MAC length are the expected ones
    24. Check that the PduR_SecOCRxIndication stub was called once
    25. Check that the verification status was propagated
    26. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1398</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_SKIP_UNTIL_LIMIT_CANCEL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>4033</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until limit". Until the limit is reached,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the next 20 PDUs to the upper layer.
    09. Execute the Rx procedure for 5 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was called once
    15. Check that the job ID is for Csm_MacVerify
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Check that the PduR_SecOCRxIndication stub was called once
    19. Check that the authenticated I-PDU is the expected one
    20. Check that the verification status was propagated
    21. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1399</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_BUSY</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>4262</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until notice". Until further notice,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to perform the verification procedure and
        forward the PDU to the upper layer until further notice even if the verification fails.
    09. Execute the Rx procedure for 20 PDUs
        a. Set the GetRxFreshness stub return to SECOC_E_BUSY
        b. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        c. Call the main function and execute the verification procedure
        d. Check that the GetRxFreshness stub was called until the threshold was reached
        e. Check that the Csm_MacVerify stub was not called
        f. Check that the PduR_SecOCRxIndication stub was not called
        g. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub until the threshold was reached
    14. Check that the Csm_MacVerify stub was not called
    15. Check that the PduR_SecOCRxIndication stub was not called
    16. Set the GetRxFreshness stub return to SECOC_E_OK
    17. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    18. Call the main function and execute the verification procedure
    19. Check that the GetRxFreshness stub was called once
    20. Check that the Csm_MacVerify stub was called once
    21. Check that the job ID is for Csm_MacVerify
    22. Check that the provided data and data length are the expected ones
    23. Check that the provided MAC and MAC length are the expected ones
    24. Check that the PduR_SecOCRxIndication stub was called once
    25. Check that the authenticated I-PDU is the expected one
    26. Check that the verification status was propagated
    27. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1400</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>4525</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until notice". Until further notice,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to perform the verification procedure and
        forward the PDU to the upper layer until further notice even if the verification fails.
    09. Execute the Rx procedure for 20 PDUs
        a. Set the GetRxFreshness stub return to SECOC_E_NOT_OK
        b. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        c. Call the main function and execute the verification procedure
        d. Check that the GetRxFreshness stub was called once
        e. Check that the Csm_MacVerify stub was not called
        f. Check that the PduR_SecOCRxIndication stub was not called
        g. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was not called
    15. Check that the PduR_SecOCRxIndication stub was not called
    16. Set the GetRxFreshness stub return to SECOC_E_OK
    17. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    18. Call the main function and execute the verification procedure
    19. Check that the GetRxFreshness stub was called once
    20. Check that the Csm_MacVerify stub was called once
    21. Check that the job ID is for Csm_MacVerify
    22. Check that the provided data and data length are the expected ones
    23. Check that the provided MAC and MAC length are the expected ones
    24. Check that the PduR_SecOCRxIndication stub was called once
    25. Check that the authenticated I-PDU is the expected one
    26. Check that the verification status was propagated
    27. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1401</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>4788</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until notice". Until further notice,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to perform the verification procedure and
        forward the PDU to the upper layer until further notice even if the verification fails.
    09. Execute the Rx procedure for 20 PDUs
        a. Set the Csm_MacVerify stub return value to E_OK
        b. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_NOT_OK
        c. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        d. Call the main function and execute the verification procedure
        e. Check that the GetRxFreshness stub was called once
        f. Check that the Csm_MacVerify stub was called once
        g. Check that the PduR_SecOCRxIndication stub was called once
        h. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called until the threshold was reached
    14. Check that the Csm_MacVerify stub was called until the threshold was reached
    15. Check that the PduR_SecOCRxIndication stub was not called
    16. Check that the verification status was propagated
    17. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_OK
    18. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    19. Call the main function and execute the verification procedure
    20. Check that the GetRxFreshness stub was called once
    21. Check that the Csm_MacVerify stub was called once
    22. Check that the job ID is for Csm_MacVerify
    23. Check that the provided data and data length are the expected ones
    24. Check that the provided MAC and MAC length are the expected ones
    25. Check that the PduR_SecOCRxIndication stub was called once
    26. Check that the authenticated I-PDU is the expected one
    27. Check that the verification status was propagated
    28. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1402</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>5070</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until notice". Until further notice,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to perform the verification procedure and
        forward the PDU to the upper layer until further notice even if the verification fails.
    09. Execute the Rx procedure for 20 PDUs
        a. Set the Csm_MacVerify stub return value to E_NOT_OK
        b. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        c. Call the main function and execute the verification procedure
        d. Check that the GetRxFreshness stub was called once
        e. Check that the Csm_MacVerify stub was called once
        f. Check that the PduR_SecOCRxIndication stub was called once
        g. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called until the threshold was reached
    14. Check that the Csm_MacVerify stub was called until the threshold was reached
    15. Check that the PduR_SecOCRxIndication stub was not called
    16. Check that the verification status was propagated
    17. Set the Csm_MacVerify stub return value to E_OK
    18. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    19. Call the main function and execute the verification procedure
    20. Check that the GetRxFreshness stub was called once
    21. Check that the Csm_MacVerify stub was called once
    22. Check that the job ID is for Csm_MacVerify
    23. Check that the provided data and data length are the expected ones
    24. Check that the provided MAC and MAC length are the expected ones
    25. Check that the PduR_SecOCRxIndication stub was called once
    26. Check that the authenticated I-PDU is the expected one
    27. Check that the verification status was propagated
    28. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1403</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_NOTICE_CSM_CALLBACK_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>5343</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until notice". Until further notice,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to perform the verification procedure and
        forward the PDU to the upper layer until further notice even if the verification fails.
    09. Execute the Rx procedure for 20 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function and execute the verification procedure
        c. Check that the GetRxFreshness stub was called once
        d. Check that the Csm_MacVerify stub was called once
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was called until the threshold was reached
    15. Check that the PduR_SecOCRxIndication stub was not called
    16. Check that the verification status was propagated
    17. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    18. Call the main function and execute the verification procedure
    19. Check that the GetRxFreshness stub was called once
    20. Check that the Csm_MacVerify stub was called once
    21. Check that the job ID is for Csm_MacVerify
    22. Check that the provided data and data length are the expected ones
    23. Check that the provided MAC and MAC length are the expected ones
    24. Check that the PduR_SecOCRxIndication stub was called once
    25. Check that the authenticated I-PDU is the expected one
    26. Check that the verification status was propagated
    27. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1404</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>5604</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until limit". Until the limit is reached,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to perform the verification procedure and
        forward the PDU to the upper layer for the next 5 PDUs even if the verification fails.
    09. Execute the Rx procedure for 5 PDUs
        a. Set the Csm_MacVerify stub return value to E_OK
        b. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_NOT_OK
        c. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        d. Call the main function and execute the verification procedure
        e. Check that the GetRxFreshness stub was called once
        f. Check that the Csm_MacVerify stub was called once
        g. Check that the PduR_SecOCRxIndication stub was called once
        h. Check that the verification status was propagated
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called until the threshold was reached
    13. Check that the Csm_MacVerify stub was called until the threshold was reached
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Check that the verification status was propagated
    16. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_OK
    17. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    18. Call the main function and execute the verification procedure
    19. Check that the GetRxFreshness stub was called once
    20. Check that the Csm_MacVerify stub was called once
    21. Check that the job ID is for Csm_MacVerify
    22. Check that the provided data and data length are the expected ones
    23. Check that the provided MAC and MAC length are the expected ones
    24. Check that the PduR_SecOCRxIndication stub was called once
    25. Check that the authenticated I-PDU is the expected one
    26. Check that the verification status was propagated
    27. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1405</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>5879</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until limit". Until the limit is reached,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to perform the verification procedure and
        forward the PDU to the upper layer for the next 5 PDUs even if the verification fails.
    09. Execute the Rx procedure for 5 PDUs
        a. Set the Csm_MacVerify stub return value to E_NOT_OK
        b. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        c. Call the main function and execute the verification procedure
        d. Check that the GetRxFreshness stub was called once
        e. Check that the Csm_MacVerify stub was called once
        f. Check that the PduR_SecOCRxIndication stub was called once
        g. Check that the verification status was propagated
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called until the threshold was reached
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Check that the verification status was propagated
    16. Set the Csm_MacVerify stub return value to E_OK
    17. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    18. Call the main function and execute the verification procedure
    19. Check that the GetRxFreshness stub was called once
    20. Check that the Csm_MacVerify stub was called once
    21. Check that the job ID is for Csm_MacVerify
    22. Check that the provided data and data length are the expected ones
    23. Check that the provided MAC and MAC length are the expected ones
    24. Check that the PduR_SecOCRxIndication stub was called once
    25. Check that the authenticated I-PDU is the expected one
    26. Check that the verification status was propagated
    27. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1406</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_LIMIT_CSM_CALLBACK_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>6145</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until limit". Until the limit is reached,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to perform the verification procedure and
        forward the PDU to the upper layer for the next 5 PDUs even if the verification fails.
    09. Execute the Rx procedure for 5 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function and execute the verification procedure
        c. Check that the GetRxFreshness stub was called once
        d. Check that the Csm_MacVerify stub was called once
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called until the threshold was reached
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Check that the verification status was propagated
    16. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    17. Call the main function and execute the verification procedure
    18. Check that the GetRxFreshness stub was called once
    19. Check that the Csm_MacVerify stub was called once
    20. Check that the job ID is for Csm_MacVerify
    21. Check that the provided data and data length are the expected ones
    22. Check that the provided MAC and MAC length are the expected ones
    23. Check that the PduR_SecOCRxIndication stub was called once
    24. Check that the authenticated I-PDU is the expected one
    25. Check that the verification status was propagated
    26. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1407</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_PASS_UNTIL_LIMIT_CANCEL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>6399</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until limit". Until the limit is reached,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the next 20 PDUs to the upper layer.
    09. Execute the Rx procedure for 5 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function and execute the verification procedure
        c. Check that the GetRxFreshness stub was called once
        d. Check that the Csm_MacVerify stub was called once
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was called once
    15. Check that the job ID is for Csm_MacVerify
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Check that the PduR_SecOCRxIndication stub was called once
    19. Check that the authenticated I-PDU is the expected one
    20. Check that the verification status was propagated
    21. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1408</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_09_IF_INVALID_PARAM</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>6636</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with invalid parameters.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride with an invalid value ID and check that the request was
        rejected
    09. Call SecOC_VerifyStatusOverride with an invalid overrideStatus value and check that the
        request was rejected
    10. Execute the verification procedure for 3 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started
        b. Call the main function and execute the verification procedure
        c. Check that the GetRxFreshness stub was called once
        d. Check that the Csm_MacVerify stub was called once
        e. Check that the job ID is for Csm_MacVerify
        f. Check that the provided data and data length are the expected ones
        g. Check that the provided MAC and MAC length are the expected ones
        h. Check that the PduR_SecOCRxIndication stub was called once
        i. Check that the authenticated I-PDU is the expected one
        j. Check that the verification status was propagated
    11. Call SecOC_VerifyStatusOverride in order to cancel the override
    12. Call SecOC_VerifyStatusOverride again in order to cancel the override
    13. Execute the verification procedure for 3 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started
        b. Call the main function and execute the verification procedure
        c. Check that the GetRxFreshness stub was called once
        d. Check that the Csm_MacVerify stub was called once
        e. Check that the job ID is for Csm_MacVerify
        f. Check that the provided data and data length are the expected ones
        g. Check that the provided MAC and MAC length are the expected ones
        h. Check that the PduR_SecOCRxIndication stub was called once
        i. Check that the authenticated I-PDU is the expected one
        j. Check that the verification status was propagated
    14. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1409</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_24_PROP_SET_TO_FAILURE_ONLY</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>6929</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Tests the verification status propagation mechanism
Test Description: 
    Tests the behavior of the SecOC module, the verification status propagation mechanism
    when the propagation status is set to NONE.
  
Test Object: 
    SecOC_VerificationStatusCallout
  
Test Precondition: 
    SecOCVerificationStatusPropagationMode = FAILURE_ONLY
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    09. Call the main function and execute the verification procedure
    10. Check that the GetRxFreshness stub was called once
    11. Check that the Csm_MacVerify stub was called once
    12. Check that the job ID is for Csm_MacVerify
    13. Check that the provided data and data length are the expected ones
    14. Check that the provided MAC and MAC length are the expected ones
    15. Check that the PduR_SecOCRxIndication stub was called once
    16. Check that the authenticated I-PDU is the expected one
    17. Check that the callback function to propagate the verification status hasn't been called
    18. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1410</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_NO_INIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>128</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "drop until notice". Until further notice,
    no verification is performed (No CSM call) and PDUs are dropped.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride and check that the result is E_NOT_OK as the SecOC module
        isn't initialized
    09. Initialize the SecOC module and the stubs
    10. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and drop the
        PDU for the next 5 PDUs.
    11. Execute the Rx procedure for 5 PDUs and check that the PDUs are dropped
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was not called as the verification result was
        overridden and the PDU was dropped
        f. Check that the verification status was propagated
    12. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    13. Call the main function and execute the verification procedure
    14. Check that the GetRxFreshness stub was called once
    15. Check that the Csm_MacVerify stub was called once
    16. Check that the job ID is for Csm_MacVerify
    17. Check that the provided data and data length are the expected ones
    18. Check that the provided MAC and MAC length are the expected ones
    19. Check that the PduR_SecOCRxIndication stub was called once
    20. Check that the authenticated I-PDU is the expected one
    21. Check that the verification status was propagated
    22. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00142</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1411</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_NOTICE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>376</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "drop until notice". Until further notice,
    no verification is performed (No CSM call) and PDUs are dropped.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and drop the
        PDU until further notice.
    09. Execute the Rx procedure for 20 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was not called as the verification result was
        overridden and the PDU was dropped
        f. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was called once
    15. Check that the job ID is for Csm_MacVerify
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Check that the PduR_SecOCRxIndication stub was called once
    19. Check that the authenticated I-PDU is the expected one
    20. Check that the verification status was propagated
    21. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00142</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1412</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_LIMIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>617</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "drop until limit". Until the limit is reached,
    no verification is performed (No CSM call) and PDUs are dropped.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and drop the
        PDU for the next 5 PDUs.
    09. Execute the Rx procedure for 5 PDUs and check that the PDUs are dropped
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was not called as the verification result was
        overridden and the PDU was dropped
        f. Check that the verification status was propagated
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called once
    14. Check that the job ID is for Csm_MacVerify
    15. Check that the provided data and data length are the expected ones
    16. Check that the provided MAC and MAC length are the expected ones
    17. Check that the PduR_SecOCRxIndication stub was called once
    18. Check that the authenticated I-PDU is the expected one
    19. Check that the verification status was propagated
    20. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00142</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1413</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_DROP_UNTIL_LIMIT_CANCEL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>849</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "drop until limit". Until the limit is reached,
    no verification is performed (No CSM call) and PDUs are dropped.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and drop the
        next 20 PDUs.
    09. Execute the Rx procedure for 5 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was not called as the verification result was
        overridden and the PDU was dropped
        f. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was called once
    15. Check that the job ID is for Csm_MacVerify
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Check that the PduR_SecOCRxIndication stub was called once
    19. Check that the authenticated I-PDU is the expected one
    20. Check that the verification status was propagated
    21. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00142</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1414</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_NOTICE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>1093</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until notice". Until further notice,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the PDU to the upper layer until further notice.
    09. Execute the Rx procedure for 20 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was called once
    15. Check that the job ID is for Csm_MacVerify
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Check that the PduR_SecOCRxIndication stub was called once
    19. Check that the authenticated I-PDU is the expected one
    20. Check that the verification status was propagated
    21. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00142</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1415</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_IF_SKIP_UNTIL_NOTICE_PDU_COL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>1332</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until notice". Until further notice,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the cryptographic PDU and the authentic PDU
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function for the PDU ID 17
    04. Set Csm_MacVerify stub callout function
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the PDU to the upper layer until further notice.
    09. Execute the Rx procedure for 20 PDUs
        a. Call the SecOC_RxIndication to hand over the authentic PDU
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call the SecOC_RxIndication to hand over the cryptographic PDU
    11. Call the main function in order to start the verification procedure
    12. Check that the GetRxFreshness stub was not called
    13. Check that the Csm_MacVerify stub was not called
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Call the SecOC_RxIndication to hand over the authentic PDU
    16. Call the main function in order to start the verification procedure
    17. Check that the GetRxFreshness stub was not called
    18. Check that the Csm_MacVerify stub was not called
    19. Check that the PduR_SecOCRxIndication stub was called once
    20. Check that the authenticated I-PDU is the expected one
    21. Check that the verification status was propagated
    22. Call SecOC_VerifyStatusOverride in order to cancel the override
    23. Call the SecOC_RxIndication to hand over the authentic PDU
    24. Call the main function in order to start the verification procedure
    25. Check that the GetRxFreshness stub was not called
    26. Check that the Csm_MacVerify stub was not called
    27. Check that the PduR_SecOCRxIndication stub was not called
    28. Call the SecOC_RxIndication to hand over the cryptographic PDU
    29. Call the main function and execute the verification procedure
    30. Check that the GetRxFreshness stub was called once
    31. Check that the Csm_MacVerify stub was called once
    32. Check that the job ID is for Csm_MacVerify
    33. Check that the provided data and data length are the expected ones
    34. Check that the provided MAC and MAC length are the expected ones
    35. Check that the PduR_SecOCRxIndication stub was called once
    36. Check that the verification status was propagated
    37. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00142</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1416</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_TP_SKIP_UNTIL_NOTICE_PDU_COL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>1642</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via TP
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until notice". Until further notice,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the cryptographic PDU and the authentic PDU
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the PDU to the upper layer until further notice.
    09. Execute the Rx procedure for 20 PDUs
        a. Call the SecOC_StartOfReception for the authentic PDUand check that the request was
        accepted by the SecOC module
        b. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and check
        that operation was successfully performed
        c. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU was sent
        and the verification procedure can be started
        d. Call the main function in order to start the verification procedure
        e. Check that the GetRxFreshness stub was not called
        f. Check that the Csm_MacVerify stub was not called
        g. Check that the PduR_SecOCRxIndication stub was called once
        h. Check that the verification status was propagated
    10. Call the reception APIs to hand over the cryptographic PDU fully and partially the authentic PDU
    11. Call the main function in order to start the verification procedure
    12. Check that the GetRxFreshness stub was not called
    13. Check that the Csm_MacVerify stub was not called
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Call the reception API to finalize the hand over of the authentic PDU
    16. Call the main function in order to start the verification procedure
    17. Check that the GetRxFreshness stub was not called
    18. Check that the Csm_MacVerify stub was not called
    19. Check that the PduR_SecOCRxIndication stub was called once
    20. Check that the authenticated I-PDU is the expected one
    21. Check that the verification status was propagated
    22. Call SecOC_VerifyStatusOverride in order to cancel the override
    23. Call the SecOC_StartOfReception for the authentic PDU and check that the request was
        accepted by the SecOC module
    24. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and check
        that operation was successfully performed
    25. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU was sent
        and the verification procedure can be started
    26. Call the main function and execute the verification procedure
    27. Check that the PduR_SecOCRxIndication stub was not called
    28. Call the SecOC_StartOfReception for the cryptographic PDU and check that the request was
        accepted by the SecOC module
    29. Call the SecOC_CopyRxData again to hand over the cryptographic PDU to the SecOC module
        and check that operation was successfully performed
    30. Call the SecOC_TpRxIndication to notify the SecOC module that the cryptographic PDU was
        sent and the verification procedure can be started
    31. Call the main function and execute the verification procedure
    32. Check that the GetRxFreshness stub was called once
    33. Check that the Csm_MacVerify stub was called once
    34. Check that the job ID is for Csm_MacVerify
    35. Check that the provided data and data length are the expected ones
    36. Check that the provided MAC and MAC length are the expected ones
    37. Check that the PduR_SecOCRxIndication stub was called once
    38. Check that the verification status was propagated
    39. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00142</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1417</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_LIMIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>2060</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until limit". Until the limit is reached,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the next 5 PDUs to the upper layer.
    09. Execute the Rx procedure for 5 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called once
    14. Check that the job ID is for Csm_MacVerify
    15. Check that the provided data and data length are the expected ones
    16. Check that the provided MAC and MAC length are the expected ones
    17. Check that the PduR_SecOCRxIndication stub was called once
    18. Check that the authenticated I-PDU is the expected one
    19. Check that the verification status was propagated
    20. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00142</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1418</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_IF_SKIP_UNTIL_LIMIT_PDU_COL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>2289</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until limit". Until the limit is reached,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the cryptographic PDU and the authentic PDU
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function for the PDU ID 11
    04. Set Csm_MacVerify stub callout function
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the next 5 PDUs to the upper layer.
    09. Execute the Rx procedure for 5 PDUs
        a. Call the SecOC_RxIndication to hand over the authentic PDU
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to hand over the authentic PDU
    12. Call the main function in order to start the verification procedure
    13. Check that the PduR_SecOCRxIndication stub was not called
    14. Call the SecOC_RxIndication to hand over the cryptographic PDU
    15. Call the main function and execute the verification procedure
    16. Check that the GetRxFreshness stub was called once
    17. Check that the Csm_MacVerify stub was called once
    18. Check that the job ID is for Csm_MacVerify
    19. Check that the provided data and data length are the expected ones
    20. Check that the provided MAC and MAC length are the expected ones
    21. Check that the PduR_SecOCRxIndication stub was called once
    22. Check that the verification status was propagated
    23. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00142</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1419</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_17_TP_SKIP_UNTIL_LIMIT_PDU_COL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>2528</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via TP
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until notice". Until further notice,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the cryptographic PDU and the authentic PDU
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the next 5 PDUs to the upper layer.
    09. Execute the Rx procedure for 5 PDUs
        a. Call the SecOC_StartOfReception for the authentic PDUand check that the request was
        accepted by the SecOC module
        b. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and check
        that operation was successfully performed
        c. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU was sent
        and the verification procedure can be started
        d. Call the main function in order to start the verification procedure
        e. Check that the GetRxFreshness stub was not called
        f. Check that the Csm_MacVerify stub was not called
        g. Check that the PduR_SecOCRxIndication stub was called once
        h. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_StartOfReception for the authentic PDU and check that the request was
        accepted by the SecOC module
    12. Call the SecOC_CopyRxData to hand over the authentic PDU to the SecOC module and check
        that operation was successfully performed
    13. Call the SecOC_TpRxIndication to notify the SecOC module that the authentic PDU was sent
        and the verification procedure can be started
    14. Call the main function and execute the verification procedure
    15. Check that the PduR_SecOCRxIndication stub was not called
    16. Call the SecOC_StartOfReception for the cryptographic PDU and check that the request was
        accepted by the SecOC module
    17. Call the SecOC_CopyRxData again to hand over the cryptographic PDU to the SecOC module
        and check that operation was successfully performed
    18. Call the SecOC_TpRxIndication to notify the SecOC module that the cryptographic PDU was
        sent and the verification procedure can be started
    19. Call the main function and execute the verification procedure
    20. Check that the GetRxFreshness stub was called once
    21. Check that the Csm_MacVerify stub was called once
    22. Check that the job ID is for Csm_MacVerify
    23. Check that the provided data and data length are the expected ones
    24. Check that the provided MAC and MAC length are the expected ones
    25. Check that the PduR_SecOCRxIndication stub was called once
    26. Check that the verification status was propagated
    27. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00142</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1420</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_SKIP_UNTIL_LIMIT_CANCEL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>2856</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "skip until limit". Until the limit is reached,
    no verification is performed (No CSM call) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the next 20 PDUs to the upper layer.
    09. Execute the Rx procedure for 5 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function in order to start the verification procedure
        c. Check that the GetRxFreshness stub was not called
        d. Check that the Csm_MacVerify stub was not called
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was called once
    15. Check that the job ID is for Csm_MacVerify
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Check that the PduR_SecOCRxIndication stub was called once
    19. Check that the authenticated I-PDU is the expected one
    20. Check that the verification status was propagated
    21. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00142</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1421</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_BUSY</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>3093</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until notice". Until further notice,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to perform the verification procedure and
        forward the PDU to the upper layer until further notice even if the verification fails.
    09. Execute the Rx procedure for 20 PDUs
        a. Set the GetRxFreshness stub return to SECOC_E_BUSY
        b. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        c. Call the main function and execute the verification procedure
        d. Check that the GetRxFreshness stub was called until the threshold was reached
        e. Check that the Csm_MacVerify stub was not called
        f. Check that the PduR_SecOCRxIndication stub was not called
        g. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub until the threshold was reached
    14. Check that the Csm_MacVerify stub was not called
    15. Check that the PduR_SecOCRxIndication stub was not called
    16. Check that the verification status was propagated
    17. Set the GetRxFreshness stub return to SECOC_E_OK
    18. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    19. Call the main function and execute the verification procedure
    20. Check that the GetRxFreshness stub was called once
    21. Check that the Csm_MacVerify stub was called once
    22. Check that the job ID is for Csm_MacVerify
    23. Check that the provided data and data length are the expected ones
    24. Check that the provided MAC and MAC length are the expected ones
    25. Check that the PduR_SecOCRxIndication stub was called once
    26. Check that the authenticated I-PDU is the expected one
    27. Check that the verification status was propagated
    28. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00142</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1422</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_FVM_RET_VAL_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>3367</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until notice". Until further notice,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to perform the verification procedure and
        forward the PDU to the upper layer until further notice even if the verification fails.
    09. Execute the Rx procedure for 20 PDUs
        a. Set the GetRxFreshness stub return to SECOC_E_NOT_OK
        b. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        c. Call the main function and execute the verification procedure
        d. Check that the GetRxFreshness stub was called once
        e. Check that the Csm_MacVerify stub was not called
        f. Check that the PduR_SecOCRxIndication stub was not called
        g. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was not called
    15. Check that the PduR_SecOCRxIndication stub was not called
    16. Check that the verification status was propagated
    17. Set the GetRxFreshness stub return to SECOC_E_OK
    18. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    19. Call the main function and execute the verification procedure
    20. Check that the GetRxFreshness stub was called once
    21. Check that the Csm_MacVerify stub was called once
    22. Check that the job ID is for Csm_MacVerify
    23. Check that the provided data and data length are the expected ones
    24. Check that the provided MAC and MAC length are the expected ones
    25. Check that the PduR_SecOCRxIndication stub was called once
    26. Check that the authenticated I-PDU is the expected one
    27. Check that the verification status was propagated
    28. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1423</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>3640</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until notice". Until further notice,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to perform the verification procedure and
        forward the PDU to the upper layer until further notice even if the verification fails.
    09. Execute the Rx procedure for 20 PDUs
        a. Set the Csm_MacVerify stub return value to E_OK
        b. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_NOT_OK
        c. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        d. Call the main function and execute the verification procedure
        e. Check that the GetRxFreshness stub was called once
        f. Check that the Csm_MacVerify stub was called once
        g. Check that the PduR_SecOCRxIndication stub was called once
        h. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called until the threshold was reached
    14. Check that the Csm_MacVerify stub was called until the threshold was reached
    15. Check that the PduR_SecOCRxIndication stub was not called
    16. Check that the verification status was propagated
    17. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_OK
    18. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    19. Call the main function and execute the verification procedure
    20. Check that the GetRxFreshness stub was called once
    21. Check that the Csm_MacVerify stub was called once
    22. Check that the job ID is for Csm_MacVerify
    23. Check that the provided data and data length are the expected ones
    24. Check that the provided MAC and MAC length are the expected ones
    25. Check that the PduR_SecOCRxIndication stub was called once
    26. Check that the authenticated I-PDU is the expected one
    27. Check that the verification status was propagated
    28. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1424</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_RET_VAL_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>3930</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until notice". Until further notice,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to perform the verification procedure and
        forward the PDU to the upper layer until further notice even if the verification fails.
    09. Execute the Rx procedure for 20 PDUs
        a. Set the Csm_MacVerify stub return value to E_NOT_OK
        b. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        c. Call the main function and execute the verification procedure
        d. Check that the GetRxFreshness stub was called once
        e. Check that the Csm_MacVerify stub was called once
        f. Check that the PduR_SecOCRxIndication stub was called once
        g. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called until the threshold was reached
    14. Check that the Csm_MacVerify stub was called until the threshold was reached
    15. Check that the PduR_SecOCRxIndication stub was not called
    16. Check that the verification status was propagated
    17. Set the Csm_MacVerify stub return value to E_OK
    18. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    19. Call the main function and execute the verification procedure
    20. Check that the GetRxFreshness stub was called once
    21. Check that the Csm_MacVerify stub was called once
    22. Check that the job ID is for Csm_MacVerify
    23. Check that the provided data and data length are the expected ones
    24. Check that the provided MAC and MAC length are the expected ones
    25. Check that the PduR_SecOCRxIndication stub was called once
    26. Check that the authenticated I-PDU is the expected one
    27. Check that the verification status was propagated
    28. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1425</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_NOTICE_CSM_CALLBACK_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>4211</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of a secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until notice". Until further notice,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to perform the verification procedure and
        forward the PDU to the upper layer until further notice even if the verification fails.
    09. Execute the Rx procedure for 20 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function and execute the verification procedure
        c. Check that the GetRxFreshness stub was called once
        d. Check that the Csm_MacVerify stub was called once
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was called until the threshold was reached
    15. Check that the PduR_SecOCRxIndication stub was not called
    16. Check that the verification status was propagated
    17. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    18. Call the main function and execute the verification procedure
    19. Check that the GetRxFreshness stub was called once
    20. Check that the Csm_MacVerify stub was called once
    21. Check that the job ID is for Csm_MacVerify
    22. Check that the provided data and data length are the expected ones
    23. Check that the provided MAC and MAC length are the expected ones
    24. Check that the PduR_SecOCRxIndication stub was called once
    25. Check that the authenticated I-PDU is the expected one
    26. Check that the verification status was propagated
    27. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1426</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>4480</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until limit". Until the limit is reached,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to perform the verification procedure and
        forward the PDU to the upper layer for the next 5 PDUs even if the verification fails.
    09. Execute the Rx procedure for 5 PDUs
        a. Set the Csm_MacVerify stub return value to E_OK
        b. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_NOT_OK
        c. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        d. Call the main function and execute the verification procedure
        e. Check that the GetRxFreshness stub was called once
        f. Check that the Csm_MacVerify stub was called once
        g. Check that the PduR_SecOCRxIndication stub was called once
        h. Check that the verification status was propagated
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called until the threshold was reached
    13. Check that the Csm_MacVerify stub was called until the threshold was reached
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Check that the verification status was propagated
    16. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_OK
    17. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    18. Call the main function and execute the verification procedure
    19. Check that the GetRxFreshness stub was called once
    20. Check that the Csm_MacVerify stub was called once
    21. Check that the job ID is for Csm_MacVerify
    22. Check that the provided data and data length are the expected ones
    23. Check that the provided MAC and MAC length are the expected ones
    24. Check that the PduR_SecOCRxIndication stub was called once
    25. Check that the authenticated I-PDU is the expected one
    26. Check that the verification status was propagated
    27. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1427</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_RET_VAL_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>4763</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until limit". Until the limit is reached,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to perform the verification procedure and
        forward the PDU to the upper layer for the next 5 PDUs even if the verification fails.
    09. Execute the Rx procedure for 5 PDUs
        a. Set the Csm_MacVerify stub return value to E_NOT_OK
        b. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        c. Call the main function and execute the verification procedure
        d. Check that the GetRxFreshness stub was called once
        e. Check that the Csm_MacVerify stub was called once
        f. Check that the PduR_SecOCRxIndication stub was called once
        g. Check that the verification status was propagated
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called until the threshold was reached
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Check that the verification status was propagated
    16. Set the Csm_MacVerify stub return value to E_OK
    17. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    18. Call the main function and execute the verification procedure
    19. Check that the GetRxFreshness stub was called once
    20. Check that the Csm_MacVerify stub was called once
    21. Check that the job ID is for Csm_MacVerify
    22. Check that the provided data and data length are the expected ones
    23. Check that the provided MAC and MAC length are the expected ones
    24. Check that the PduR_SecOCRxIndication stub was called once
    25. Check that the authenticated I-PDU is the expected one
    26. Check that the verification status was propagated
    27. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1428</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CSM_CALLBACK_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>5037</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until limit". Until the limit is reached,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to perform the verification procedure and
        forward the PDU to the upper layer for the next 5 PDUs even if the verification fails.
    09. Execute the Rx procedure for 5 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function and execute the verification procedure
        c. Check that the GetRxFreshness stub was called once
        d. Check that the Csm_MacVerify stub was called once
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was called until the threshold was reached
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Check that the verification status was propagated
    16. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    17. Call the main function and execute the verification procedure
    18. Check that the GetRxFreshness stub was called once
    19. Check that the Csm_MacVerify stub was called once
    20. Check that the job ID is for Csm_MacVerify
    21. Check that the provided data and data length are the expected ones
    22. Check that the provided MAC and MAC length are the expected ones
    23. Check that the PduR_SecOCRxIndication stub was called once
    24. Check that the authenticated I-PDU is the expected one
    25. Check that the verification status was propagated
    26. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1429</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_PASS_UNTIL_LIMIT_CANCEL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>5299</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with the overrideStatus parameter set to "pass until limit". Until the limit is reached,
    verification is performed (CSM is called) and PDUs are forwarded to the upper layer.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride in order to skip the verification procedure and forward
        the next 20 PDUs to the upper layer.
    09. Execute the Rx procedure for 5 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
        b. Call the main function and execute the verification procedure
        c. Check that the GetRxFreshness stub was called once
        d. Check that the Csm_MacVerify stub was called once
        e. Check that the PduR_SecOCRxIndication stub was called once
        f. Check that the verification status was propagated
    10. Call SecOC_VerifyStatusOverride in order to cancel the override
    11. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    12. Call the main function and execute the verification procedure
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was called once
    15. Check that the job ID is for Csm_MacVerify
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Check that the PduR_SecOCRxIndication stub was called once
    19. Check that the authenticated I-PDU is the expected one
    20. Check that the verification status was propagated
    21. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1430</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_09_IF_INVALID_PARAM</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>5543</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    Tests the behavior of the SecOC module after SecOC_VerifyStatusOverride was called
    with invalid parameters.
  
Test Object: 
    SecOC_VerifyStatusOverride
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call SecOC_VerifyStatusOverride with an invalid value ID and check that the request was
        rejected
    09. Call SecOC_VerifyStatusOverride with an invalid overrideStatus value and check that the
        request was rejected
    10. Execute the verification procedure for 3 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started
        b. Call the main function and execute the verification procedure
        c. Check that the GetRxFreshness stub was called once
        d. Check that the Csm_MacVerify stub was called once
        e. Check that the job ID is for Csm_MacVerify
        f. Check that the provided data and data length are the expected ones
        g. Check that the provided MAC and MAC length are the expected ones
        h. Check that the PduR_SecOCRxIndication stub was called once
        i. Check that the authenticated I-PDU is the expected one
        j. Check that the verification status was propagated
    11. Call SecOC_VerifyStatusOverride in order to cancel the override
    12. Call SecOC_VerifyStatusOverride again in order to cancel the override
    13. Execute the verification procedure for 3 PDUs
        a. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started
        b. Call the main function and execute the verification procedure
        c. Check that the GetRxFreshness stub was called once
        d. Check that the Csm_MacVerify stub was called once
        e. Check that the job ID is for Csm_MacVerify
        f. Check that the provided data and data length are the expected ones
        g. Check that the provided MAC and MAC length are the expected ones
        h. Check that the PduR_SecOCRxIndication stub was called once
        i. Check that the authenticated I-PDU is the expected one
        j. Check that the verification status was propagated
    14. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1431</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_OVERRIDE_VERIFYSTATUS440_RTE_24_PROP_SET_TO_FAILURE_ONLY</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Override_VerifyStatus440_Rte/source/application/Tests.c</sourcefile>
      <sourceline>5843</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Tests the verification status propagation mechanism
Test Description: 
    Tests the behavior of the SecOC module, the verification status propagation mechanism
    when the propagation status is set to NONE.
  
Test Object: 
    SecOC_VerificationStatusCallout
  
Test Precondition: 
    SecOCVerificationStatusPropagationMode = FAILURE_ONLY
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    09. Call the main function and execute the verification procedure
    10. Check that the GetRxFreshness stub was called once
    11. Check that the Csm_MacVerify stub was called once
    12. Check that the job ID is for Csm_MacVerify
    13. Check that the provided data and data length are the expected ones
    14. Check that the provided MAC and MAC length are the expected ones
    15. Check that the PduR_SecOCRxIndication stub was called once
    16. Check that the authenticated I-PDU is the expected one
    17. Check that the callback function to propagate the verification status hasn't been called
    18. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1432</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_FVM_RET_VAL_BUSY_CASE1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Propagate_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>118</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Tests the verification status propagation mechanism
Test Description: 
    Tests the behavior of the SecOC module, the verification status propagation mechanism
    when FvM always returns SECOC_E_BUSY.
  
Test Object: 
    SecOC_VerificationStatusCallout
  
Test Precondition: 
    SecOCEbPropagateVerificationStatusApiVersion = SECOC_API_VERSION_20_11
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Set the GetRxFreshness stub return to SECOC_E_BUSY
    09. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    10. Call the main function and execute the verification procedure
    11. Check that the GetRxFreshness stub was called until the threshold was reached
    12. Check that the Csm_MacVerify stub was not called
    13. Check that the PduR_SecOCRxIndication stub was not called
    14. Check that the propagated verification is the expected one
    15. Set the GetRxFreshness stub return to SECOC_E_OK
    16. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    17. Call the main function and execute the verification procedure
    18. Check that the GetRxFreshness stub was called once
    19. Check that the Csm_MacVerify stub was called once
    20. Check that the job ID is for Csm_MacVerify
    21. Check that the provided data and data length are the expected ones
    22. Check that the provided MAC and MAC length are the expected ones
    23. Check that the PduR_SecOCRxIndication stub was called once
    24. Check that the authenticated I-PDU is the expected one
    25. Check that the propagated verification is the expected one
    26. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1433</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_FVM_RET_VAL_NOT_OK_CASE1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Propagate_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>319</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Tests the verification status propagation mechanism
Test Description: 
    Tests the behavior of the SecOC module, the verification status propagation mechanism
    when FvM always returns SECOC_E_NOT_OK.
  
Test Object: 
    SecOC_VerificationStatusCallout
  
Test Precondition: 
    SecOCEbPropagateVerificationStatusApiVersion = SECOC_API_VERSION_20_11
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Set the GetRxFreshness stub return to SECOC_E_NOT_OK
    09. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    10. Call the main function and execute the verification procedure
    11. Check that the GetRxFreshness stub was called once
    12. Check that the Csm_MacVerify stub was not called
    13. Check that the PduR_SecOCRxIndication stub was not called
    14. Check that the propagated verification is the expected one
    15. Set the GetRxFreshness stub return to SECOC_E_OK
    16. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    17. Call the main function and execute the verification procedure
    18. Check that the GetRxFreshness stub was called once
    19. Check that the Csm_MacVerify stub was called once
    20. Check that the job ID is for Csm_MacVerify
    21. Check that the provided data and data length are the expected ones
    22. Check that the provided MAC and MAC length are the expected ones
    23. Check that the PduR_SecOCRxIndication stub was called once
    24. Check that the authenticated I-PDU is the expected one
    25. Check that the propagated verification is the expected one
    26. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1434</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_FVM_RET_VAL_BUSY_CASE2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Propagate_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>520</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Tests the verification status propagation mechanism
Test Description: 
    Tests the behavior of the SecOC module, the verification status propagation mechanism
    when FvM always returns SECOC_E_BUSY after the first verification failed.
  
Test Object: 
    SecOC_VerificationStatusCallout
  
Test Precondition: 
    SecOCEbPropagateVerificationStatusApiVersion = SECOC_API_VERSION_20_11
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Set the GetRxFreshness stub to return SECOC_E_BUSY after first call
    09. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_NOT_OK
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called until the threshold was reached
    13. Check that the Csm_MacVerify stub was not called
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Check that the propagated verification is the expected one
    16. Set the GetRxFreshness stub to return SECOC_E_OK
    17. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_OK
    18. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    19. Call the main function and execute the verification procedure
    20. Check that the GetRxFreshness stub was called once
    21. Check that the Csm_MacVerify stub was called once
    22. Check that the job ID is for Csm_MacVerify
    23. Check that the provided data and data length are the expected ones
    24. Check that the provided MAC and MAC length are the expected ones
    25. Check that the PduR_SecOCRxIndication stub was called once
    26. Check that the authenticated I-PDU is the expected one
    27. Check that the propagated verification is the expected one
    28. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1435</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_FVM_RET_VAL_NOT_OK_CASE2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Propagate_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>737</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Tests the verification status propagation mechanism
Test Description: 
    Tests the behavior of the SecOC module, the verification status propagation mechanism
    when FvM always returns SECOC_E_NOT_OK after the first verification failed.
  
Test Object: 
    SecOC_VerificationStatusCallout
  
Test Precondition: 
    SecOCEbPropagateVerificationStatusApiVersion = SECOC_API_VERSION_20_11
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Set the GetRxFreshness stub to return SECOC_E_NOT_OK after the first call
    09. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_NOT_OK
    10. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    11. Call the main function and execute the verification procedure
    12. Check that the GetRxFreshness stub was called once
    13. Check that the Csm_MacVerify stub was not called
    14. Check that the PduR_SecOCRxIndication stub was not called
    15. Check that the propagated verification is the expected one
    16. Set the GetRxFreshness stub return to SECOC_E_OK
    17. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_OK
    18. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    19. Call the main function and execute the verification procedure
    20. Check that the GetRxFreshness stub was called once
    21. Check that the Csm_MacVerify stub was called once
    22. Check that the job ID is for Csm_MacVerify
    23. Check that the provided data and data length are the expected ones
    24. Check that the provided MAC and MAC length are the expected ones
    25. Check that the PduR_SecOCRxIndication stub was called once
    26. Check that the authenticated I-PDU is the expected one
    27. Check that the propagated verification is the expected one
    28. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1436</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_CSM_RET_VAL_OK_CRYPTO_VER_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Propagate_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>954</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Tests the verification status propagation mechanism
Test Description: 
    Tests the behavior of the SecOC module, the verification status propagation mechanism
    when Csm return result is CRYPTO_E_VER_NOT_OK.
  
Test Object: 
    SecOC_VerificationStatusCallout
  
Test Precondition: 
    SecOCEbPropagateVerificationStatusApiVersion = SECOC_API_VERSION_20_11
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_NOT_OK
    09. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    10. Call the main function and execute the verification procedure
    11. Check that the GetRxFreshness stub was called until the threshold was reached
    12. Check that the Csm_MacVerify stub was called until the threshold was reached
    13. Check that the PduR_SecOCRxIndication stub was not called
    14. Check that the propagated verification is the expected one
    15. Set the Csm_MacVerify stub verification result to CRYPTO_E_VER_OK
    16. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    17. Call the main function and execute the verification procedure
    18. Check that the GetRxFreshness stub was called once
    19. Check that the Csm_MacVerify stub was called once
    20. Check that the job ID is for Csm_MacVerify
    21. Check that the provided data and data length are the expected ones
    22. Check that the provided MAC and MAC length are the expected ones
    23. Check that the PduR_SecOCRxIndication stub was called once
    24. Check that the authenticated I-PDU is the expected one
    25. Check that the propagated verification is the expected one
    26. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1437</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_CSM_RET_VAL_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Propagate_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>1167</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Tests the verification status propagation mechanism
Test Description: 
    Tests the behavior of the SecOC module, the verification status propagation mechanism
    when Csm return value is E_NOT_OK.
  
Test Object: 
    SecOC_VerificationStatusCallout
  
Test Precondition: 
    SecOCEbPropagateVerificationStatusApiVersion = SECOC_API_VERSION_20_11
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Set the Csm_MacVerify stub return value to E_NOT_OK
    09. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    10. Call the main function and execute the verification procedure
    11. Check that the GetRxFreshness stub was called once
    12. Check that the Csm_MacVerify stub was called until the threshold was reached
    13. Check that the PduR_SecOCRxIndication stub was not called
    14. Check that the propagated verification is the expected one
    15. Set the Csm_MacVerify stub return value to E_OK
    16. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    17. Call the main function and execute the verification procedure
    18. Check that the GetRxFreshness stub was called once
    19. Check that the Csm_MacVerify stub was called once
    20. Check that the job ID is for Csm_MacVerify
    21. Check that the provided data and data length are the expected ones
    22. Check that the provided MAC and MAC length are the expected ones
    23. Check that the PduR_SecOCRxIndication stub was called once
    24. Check that the authenticated I-PDU is the expected one
    25. Check that the propagated verification is the expected one
    26. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1438</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_PROPAGATE_VERIFYSTATUS440_09_IF_CSM_CALLBACK_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_Propagate_VerifyStatus440/source/application/Tests.c</sourcefile>
      <sourceline>1381</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Tests the verification status propagation mechanism
Test Description: 
    Tests the behavior of the SecOC module, the verification status propagation mechanism
    when Csm callback value is E_NOT_OK.
  
Test Object: 
    SecOC_VerificationStatusCallout
  
Test Precondition: 
    SecOCEbPropagateVerificationStatusApiVersion = SECOC_API_VERSION_20_11
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetRxFreshness stub callout function and the freshness value provided by the
        function
    04. Set Csm_MacVerify stub callout function to NULL_PTR
    05. Prepare the secured I-PDU that needs to be authenticated
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC
        module
    07. Set PduR_SecOCRxIndication stub callout function
    08. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    09. Call the main function and execute the verification procedure
    10. Check that the GetRxFreshness stub was called once
    11. Check that the Csm_MacVerify stub was called until the threshold was reached
    12. Check that the PduR_SecOCRxIndication stub was not called
    13. Check that the propagated verification is the expected one
    14. Call the SecOC_RxIndication to notify the SecOC module that the secured I-PDU was sent
        and the verification procedure can be started
    15. Call the main function and execute the verification procedure
    16. Check that the GetRxFreshness stub was called once
    17. Check that the Csm_MacVerify stub was called once
    18. Check that the job ID is for Csm_MacVerify
    19. Check that the provided data and data length are the expected ones
    20. Check that the provided MAC and MAC length are the expected ones
    21. Check that the PduR_SecOCRxIndication stub was called once
    22. Check that the authenticated I-PDU is the expected one
    23. Check that the propagated verification is the expected one
    24. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1439</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>220</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is lower than the queue size
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    03. Set Csm_MacVerify stub callout function to TS_Csm_MacVerify_Callout.
    04. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    05. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    06. Prepare the secured I-PDU that needs to be authenticated.
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Initialize PDU Payload.
    10. Call the SecOC_RxIndication TS_SECOC_IF_QUEUE_SIZE/2 times.
    11. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started.
    12. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    13. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    14. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
       for all queued PDUs.
    15. Check that the GetRxFreshness stub was called once.
    16. Check that the Csm_MacVerify stub was called once.
    17. Check that the job ID is for Csm_MacVerify.
    18. Check that the provided data and data length are the expected ones.
    19. Check that the provided MAC and MAC length are the expected ones.
    20. Check that the PduR_SecOCRxIndication stub was called once.
    21. Check that the authenticated I-PDU is the expected one.
    22. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    23. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    24. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    25. Reset the output metadata buffer
    26. Reset the main function counter.
    27. Call again the main function.
    28. Check that the GetRxFreshness stub was not called as there are no PDUs left in the queue
    29. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1440</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_PDU_SIZE_ZERO</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>447</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the size of the received PDU is zero
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    03. Set Csm_MacVerify stub callout function to TS_Csm_MacVerify_Callout.
    04. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    05. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    06. Prepare the secured I-PDU that needs to be authenticated.
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Initialize PDU Payload with a PDU length of zero.
    10. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started.
    11. Call the main function.
    12. Check that the GetRxFreshness stub was not called.
    13. Check that the Csm_MacVerify stub was not called.
    14. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called.
    15. Initialize PDU Payload with corect PDU length
    16. Call the SecOC_RxIndication
    17. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    18. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    19. Call the main function
    20. Check that the GetRxFreshness stub was called once
    21. Check that the Csm_MacVerify stub was called once
    22. Check that the job ID is for Csm_MacVerify
    23. Check that the provided data and data length are the expected ones
    24. Check that the provided MAC and MAC length are the expected ones
    25. Check that the PduR_SecOCRxIndication stub was called once
    26. Check that the authenticated I-PDU is the expected one
    27. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    28. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    29. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    30. Reset the output metadata buffer
    31. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1441</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_DYNAMICPDULENGTH_09_SECURED_PDU_IF_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>673</sourceline>
      <version>1</version>
      <description>Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue, the dynamic PDU length is enabled and the received secured PDU buffer is smaller than the configured length.
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the dynamic secured PDU test buffer
    03. Test a received secured PDU length that is smaller than the configured secured PDU length
    04. Initialize the PDU load
    05. Set GetRxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacVerify stub callout function to TS_Csm_MacVerify_Callout
    07. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    08. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    09. Prepare the secured I-PDU that needs to be authenticated
    10. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    11. Set PduR_SecOCRxIndication stub callout function
    12. Call the SecOC_RxIndication TS_SECOC_IF_QUEUE_SIZE times in order to fill the queue
    13. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started
    14. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    15. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    16. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
        for all queued PDUs
    17. Check that the GetRxFreshness stub was called once
    18. Check that the Csm_MacVerify stub was called once
    19. Check that the job ID is for Csm_MacVerify
    20. Check that the provided data and data length are the expected ones
    21. Check that the provided MAC and MAC length are the expected ones
    22. Check that the PduR_SecOCRxIndication stub was called once
    23. Check that the authenticated I-PDU is the expected one
    24. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    25. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    26. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    27. Reset the output metadata buffer
    28. Reset the main function counter
    29. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1442</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_FULL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>901</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is equal to the queue size
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    03. Set Csm_MacVerify stub callout function to TS_Csm_MacVerify_Callout.
    04. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    05. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    06. Prepare the secured I-PDU that needs to be authenticated
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Initialize PDU Payload.
    10. Call the SecOC_RxIndication TS_SECOC_IF_QUEUE_SIZE times in order to fill the queue.
    11. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started.
    12. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    13. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    14. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
       for all queued PDUs.
    15. Check that the GetRxFreshness stub was called once.
    16. Check that the Csm_MacVerify stub was called once.
    17. Check that the job ID is for Csm_MacVerify.
    18. Check that the provided data and data length are the expected ones.
    19. Check that the provided MAC and MAC length are the expected ones.
    20. Check that the PduR_SecOCRxIndication stub was called once.
    21. Check that the authenticated I-PDU is the expected one.
    22. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    23. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    24. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    25. Reset the output metadata buffer
    26. Reset the main function counter
    27. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1443</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_OVRFL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>1119</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is higher than the queue size
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    03. Set Csm_MacVerify stub callout function to TS_Csm_MacVerify_Callout.
    04. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    05. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    06. Prepare the secured I-PDU that needs to be authenticated.
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Initialize PDU Payload.
    10. Call the SecOC_RxIndication TS_SECOC_IF_QUEUE_SIZE times in order to fill the queue.
    11. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started.
    12. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    13. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    14. Check that the EcuC_CopyMetaDataTypeToPdu stub was not called
    15. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
       for all queued PDUs.
    16. Check that the GetRxFreshness stub was called once.
    17. Check that the Csm_MacVerify stub was called once.
    18. Check that the job ID is for Csm_MacVerify.
    19. Check that the provided data and data length are the expected ones.
    20. Check that the provided MAC and MAC length are the expected ones.
    21. Check that the PduR_SecOCRxIndication stub was called once.
    22. Check that the authenticated I-PDU is the expected one.
    23. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    24. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    25. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    26. Reset the output metadata buffer
    27. Reset the main function counter.
    28. Call again the main function
    29. Check that the GetRxFreshness stub was not called as the last PDU was rejected because
        the queue was already full
    30. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1444</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_HALFQUE_OVRFL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>1353</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs will be lower then the queue size. After some PDUs
    will be procesed overflow the queue then empty and fill it
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    03. Set Csm_MacVerify stub callout function to TS_Csm_MacVerify_Callout.
    04. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    05. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    06. Prepare the secured I-PDU that needs to be authenticated
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Initialize PDU Payload.
    10. Call the SecOC_RxIndication TS_SECOC_IF_QUEUE_SIZE/2 times in order to fill the queue.
    11. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started.
    12. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    13. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    14. Call the main function once
    15. Check that the GetRxFreshness stub was called once.
    16. Check that the Csm_MacVerify stub was called once.
    17. Check that the job ID is for Csm_MacVerify.
    18. Check that the provided data and data length are the expected ones.
    19. Check that the provided MAC and MAC length are the expected ones.
    20. Check that the PduR_SecOCRxIndication stub was called once.
    21. Check that the authenticated I-PDU is the expected one.
    18. Call the SecOC_RxIndication TS_SECOC_IF_QUEUE_SIZE times in order to overfill the queue
    19. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started
    20. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
        for all queued PDU
    21. Check that the GetRxFreshness stub was called once.
    22. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    23. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    24. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    25. Reset the output metadata buffer
    26. Call the SecOC_RxIndication TS_SECOC_IF_QUEUE_SIZE times in order to overfill the queue
    27. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started
    28. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    29. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    30. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
        for all queued PDUs
    31. Check that the GetRxFreshness stub was called once
    32. Check that the Csm_MacVerify stub was called once.
    33. Check that the job ID is for Csm_MacVerify.
    34. Check that the provided data and data length are the expected ones.
    35. Check that the provided MAC and MAC length are the expected ones.
    36. Check that the PduR_SecOCRxIndication stub was called once.
    37. Check that the authenticated I-PDU is the expected one.
    38. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    39. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    40. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    41. Reset the output metadata buffer
    42. Reset the main function counter
    43. Call again the main function.
    44. Check that the GetRxFreshness stub was not called as there are no PDUs left in the queue.
    45. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1445</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_FULL_EMPTY_HALF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>1681</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs will be equal to the queue size. After all PDUs
    will be procesed see if the queue can still be filled.
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    03. Set Csm_MacVerify stub callout function to TS_Csm_MacVerify_Callout.
    04. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    05. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    06. Prepare the secured I-PDU that needs to be authenticated.
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Initialize PDU Payload.
    10. Call the SecOC_RxIndication TS_SECOC_IF_QUEUE_SIZE times in order to fill the queue.
    11. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started.
    12. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    13. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    14. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
       for all queued PDUs.
    15. Check that the GetRxFreshness stub was called once
    16. Check that the Csm_MacVerify stub was called once
    17. Check that the job ID is for Csm_MacVerify.
    18. Check that the provided data and data length are the expected ones.
    19. Check that the provided MAC and MAC length are the expected ones.
    20. Check that the PduR_SecOCRxIndication stub was called once.
    21. Check that the authenticated I-PDU is the expected one.
    22. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    23. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    24. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    25. Reset the output metadata buffer
    26. Reset the main function counter
    27. Call the SecOC_RxIndication TS_SECOC_IF_QUEUE_SIZE/2 times
    28. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started
    29. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    30. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    31. Call again the main function
    32. Check that the GetRxFreshness stub was called once
    33. Check that the Csm_MacVerify stub was called once
    34. Check that the job ID is for Csm_MacVerify
    35. Check that the provided data and data length are the expected ones
    36. Check that the provided MAC and MAC length are the expected ones
    37. Check that the PduR_SecOCRxIndication stub was called once
    38. Check that the authenticated I-PDU is the expected one
    39. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    40. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    41. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    42. Reset the output metadata buffer
    43. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1446</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>1987</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is lower than the queue size
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize Pdu payload and length.
    03. Set freshness value and corresponding length (in bits).
    04. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    05. Set PduR_SecOCRxIndication_Stub stub callout function.
    06. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    07. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    08. Prepare the secured I-Pdu that needs to be authenticated.
    09. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    10. Call the SecOC_StartOfReception and SecOC_CopyRxData TS_SECOC_TP_QUEUE_SIZE/2 times.
    11. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    12. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started.
    13. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    14. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    15. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
        for all queued PDUs.
    16. Check that the upper layer was called with the expected PDU ID and length.
    17. Check that the GetRxFreshness stub was called once.
    18. Check that the Csm_MacVerify stub was called once.
    19. Check that the job ID is for Csm_MacVerify.
    20. Check that the provided data and data length are the expected ones.
    21. Check that the provided MAC and MAC length are the expected ones.
    22. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    23. Check that the PduR stub is called once with the expected Pdu id and
        operation result.
    24. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    25. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    26. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    27. Reset the output metadata buffer
    28. Reset the main function counter.
    29. Call the main function in order to start the verification procedure.
    30. Check that all stubs have been called once.
    31. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1447</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_PARTIALCOPY</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>2296</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is lower than the queue size
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize Pdu payload and length.
    03. Set freshness value and corresponding length (in bits).
    04. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    05. Set PduR_SecOCRxIndication_Stub stub callout function.
    06. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    07. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    08. Prepare the secured I-Pdu that needs to be authenticated
    09. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    10. Call the SecOC_StartOfReception and SecOC_CopyRxData TS_SECOC_TP_QUEUE_SIZE/2 times
    11. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module
    12. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started
    13. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    14. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    15. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
        for all queued PDUs
    16. Check that the upper layer was called with the expected PDU ID and length
    17. Check that the GetRxFreshness stub was called once
    18. Check that the Csm_MacVerify stub was called once
    19. Check that the job ID is for Csm_MacVerify
    20. Check that the provided data and data length are the expected ones
    21. Check that the provided MAC and MAC length are the expected ones
    22. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one
    23. Check that the PduR stub is called once with the expected Pdu id and
        operation result
    24. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    25. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    26. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    27. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    28. Reset the output metadata buffer
    29. Reset the main function counter
    30. Call the main function in order to start the verification procedure
    31. Check that all stubs have been called once
    32. Call the SecOC_StartOfReception with 1-byte payload
    33. Call SecOC_CopyRxData function to hand over one byte of the secured I-Pdu to the
        SecOC module and check that the operation is performed successfully
    34. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        wrongly and the PDU should be discarded
    35. Call the main function in order to start the verification procedure
    36. Check that stubs have not been called
    37. Check that the EcuC_CopyMetaDataTypeToPdu stub was not called
    38. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1448</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_FULL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>2682</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is equal to the queue size.
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize Pdu payload and length.
    03. Set freshness value and corresponding length (in bits).
    04. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    05. Set PduR_SecOCRxIndication_Stub stub callout function.
    06. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    07. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    08. Prepare the secured I-Pdu that needs to be authenticated.
    09. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    10. Call the SecOC_StartOfReception and SecOC_CopyRxData TS_SECOC_TP_QUEUE_SIZE times
    11. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    12. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started
    13. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    14. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    15. Call the main function TS_CounterSecOCMFCRx times to start the verification procedure
        for all queued PDUs
    16. Check that the upper layer was called with the expected PDU ID and length
    17. Check that the GetRxFreshness stub was called once
    18. Check that the Csm_MacVerify stub was called once
    19. Check that the job ID is for Csm_MacVerify
    20. Check that the provided data and data length are the expected ones
    21. Check that the provided MAC and MAC length are the expected ones
    22. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    23. Check that the PduR stub is called once with the expected Pdu id and
        operation result.
    24. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    25. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    26. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    27. Reset the output metadata buffer
    28. Reset the main function counter
    29. Call the main function in order to start the verification procedure
    30. Check that the GetRxFreshness stub was not called again as there are no more PDUs in the queue
    31. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1449</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_OVRFL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>2979</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is higher than the queue size
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize Pdu payload and length
    03. Set freshness value and corresponding length (in bits)
    04. Set ExtFreshness_GetRxFreshness_Stub callout function and result
    05. Set PduR_SecOCRxIndication_Stub stub callout function
    06. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    07. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    08. Prepare the secured I-Pdu that needs to be authenticated
    09. Prepare the comparison data expected when the Csm_MacVerify is called
       by the SecOC module
    10. Call the SecOC_StartOfReception and SecOC_CopyRxData TS_SECOC_TP_QUEUE_SIZE + 1U times
    11. Call the SecOC_StartOfReception function to notify the SecOC module
      that the verification can be started and check that the request is
      accepted by the SecOC module
    12. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
       and the verification procedure can be started
    13. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    14. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    15. Check that the EcuC_CopyMetaDataTypeToPdu stub was not called
    16. Call the main function TS_CounterSecOCMFCRx times to start the verification procedure
       for all queued PDUs
    17. Check that the upper layer was called with the expected PDU ID and length
    18. Check that the GetRxFreshness stub was called once
    19. Check that the Csm_MacVerify stub was called once
    20. Check that the job ID is for Csm_MacVerify
    21. Check that the provided data and data length are the expected ones
    22. Check that the provided MAC and MAC length are the expected ones
    23. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    24. Check that the PduR stub is called once with the expected Pdu id and
        operation result.
    25. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    26. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    27. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    28. Reset the output metadata buffer
    39. Reset the main function counter
    30. Call the main function in order to start the verification procedure
    31. Check that the GetRxFreshness stub was not called again as the last PDU was dropped as
        the queue was already full
    32. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1450</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_HALFQUE_OVRFL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>3297</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is higher than the queue size
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize Pdu payload and length
    03. Set freshness value and corresponding length (in bits)
    04. Set ExtFreshness_GetRxFreshness_Stub callout function and result
    05. Set PduR_SecOCRxIndication_Stub stub callout function
    06. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    07. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    08. Prepare the secured I-Pdu that needs to be authenticated
    09. Prepare the comparison data expected when the Csm_MacVerify is called
       by the SecOC module
    10. Call the SecOC_StartOfReception and SecOC_CopyRxData TS_SECOC_TP_QUEUE_SIZE/2 times
    11. Call the SecOC_StartOfReception function to notify the SecOC module
      that the verification can be started and check that the request is
      accepted by the SecOC module
    12. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
       and the verification procedure can be started
    13. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    14. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    15. Call the main function once
    16. Check that the upper layer was called with the expected PDU ID and length
    17. Check that the GetRxFreshness stub was called once
    18. Check that the Csm_MacVerify stub was called once
    19. Check that the job ID is for Csm_MacVerify
    20. Check that the provided data and data length are the expected ones
    21. Check that the provided MAC and MAC length are the expected ones
    22. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one
    23. Check that the PduR stub is called once with the expected Pdu id and
        operation result
    24. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    25. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    26. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    27. Reset the output metadata buffer
    28. Call the SecOC_RxIndication TS_SECOC_IF_QUEUE_SIZE times in order to overfill the queue
    29. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    30. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
       and the verification procedure can be started
    31. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    32. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    33. Check that the EcuC_CopyMetaDataTypeToPdu stub was not called
    34. Call the main function TS_CounterSecOCMFCRx times to start the verification procedure
        for all queued PDUs
    35. Check that the upper layer was called with the expected PDU ID and length
    36. Check that the GetRxFreshness stub was called once
    37. Check that the Csm_MacVerify stub was called once
    38. Check that the job ID is for Csm_MacVerify
    39. Check that the provided data and data length are the expected ones
    40. Check that the provided MAC and MAC length are the expected ones
    41. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one
    42. Check that the PduR stub is called once with the expected Pdu id and
        operation result.
    43. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    44. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    45. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    46. Reset the output metadata buffer
    47. Reset the main function counter
    48. Call the main function in order to start the verification procedure
    49. Check that the GetRxFreshness stub was not called again as the last PDU was dropped as
        the queue was already full
    50. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1451</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_FULL_EMPTY_HALF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>3762</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is higher than the queue size
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize Pdu payload and length
    03. Set freshness value and corresponding length (in bits)
    04. Set ExtFreshness_GetRxFreshness_Stub callout function and result
    05. Set PduR_SecOCRxIndication_Stub stub callout function
    06. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    07. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    08. Prepare the secured I-Pdu that needs to be authenticated
    09. Prepare the comparison data expected when the Csm_MacVerify is called
       by the SecOC module
    10. Call the SecOC_StartOfReception and SecOC_CopyRxData TS_SECOC_TP_QUEUE_SIZE + 1U times
    11. Call the SecOC_StartOfReception function to notify the SecOC module
      that the verification can be started and check that the request is
      accepted by the SecOC module
    12. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
       and the verification procedure can be started
    13. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    14. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    15. Check that the EcuC_CopyMetaDataTypeToPdu stub was not called
    16. Call the main function TS_CounterSecOCMFCRx times to start the verification procedure
       for all queued PDUs
    17. Check that the upper layer was called with the expected PDU ID and length
    18. Check that the GetRxFreshness stub was called once
    19. Check that the Csm_MacVerify stub was called once
    20. Check that the job ID is for Csm_MacVerify
    21. Check that the provided data and data length are the expected ones
    22. Check that the provided MAC and MAC length are the expected ones
    23. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    24. Check that the PduR stub is called once with the expected Pdu id and
        operation result.
    25. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    26. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    27. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    28. Reset the output metadata buffer
    29. Reset the main function counter
    30. Call the SecOC_StartOfReception and SecOC_CopyRxData TS_SECOC_TP_QUEUE_SIZE/2 times
    31. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    32. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started
    33. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    34. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    35. Call the main function once
    36. Check that the upper layer was called with the expected PDU ID and length
    37. Check that the GetRxFreshness stub was called once
    38. Check that the Csm_MacVerify stub was called once
    39. Check that the job ID is for Csm_MacVerify
    40. Check that the provided data and data length are the expected ones
    41. Check that the provided MAC and MAC length are the expected ones
    42. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    43. Check that the PduR stub is called once with the expected Pdu id and
        operation result
    44. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    45. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    46. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    47. Reset the output metadata buffer
    48. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1452</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_REJECT_PDU_FROM_QUEUE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>4214</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is higher than the queue size
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize Pdu payload and length.
    03. Set freshness value and corresponding length (in bits).
    04. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    05. Set PduR_SecOCRxIndication_Stub stub callout function.
    06. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    07. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    08. Prepare the secured I-Pdu that needs to be authenticated.
    09. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    10. Call the SecOC_StartOfReception and SecOC_CopyRxData TS_SECOC_TP_QUEUE_SIZE + 2U/2 times.
    11. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    12. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started.
    13. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    14. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    15. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
        for all queued PDUs
    16. Check that the upper layer was called with the expected PDU ID and length
    17. Check that the GetRxFreshness stub was called once
    18. Check that the Csm_MacVerify stub was called once
    19. Check that the job ID is for Csm_MacVerify
    20. Check that the provided data and data length are the expected ones
    21. Check that the provided MAC and MAC length are the expected ones
    22. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one
    23. Check that the PduR stub is called once with the expected Pdu id and
        operation result
    24. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    25. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    26. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    27. Reset the output metadata buffer
    28. Reset the main function counter
    29. Call the main function in order to start the verification procedure
    30. Check that all stubs have been called once
    31. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1453</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_SMALL_PDU_SIZE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>4528</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is higher than the queue size
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize Pdu payload and length
    03. Set freshness value and corresponding length (in bits)
    04. Set ExtFreshness_GetRxFreshness_Stub callout function and result
    05. Set PduR_SecOCRxIndication_Stub stub callout function
    06. Prepare the secured I-Pdu that needs to be authenticated
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    08. Call the SecOC_StartOfReception and SecOC_CopyRxData TS_SECOC_TP_QUEUE_SIZE times
    09. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module
        VP: Check that if Pdu_Rx_12_securedInfo.SduLength is smaller than the size of PDU
            BUFREQ_OK is returned
    10. Call SecOC_CopyRxData function to hand over the secured I-Pdu to the
        SecOC module and check that the operation fails as Pdu_Rx_12_securedInfo.SduLength
        is smaller than the size of PDU
    11. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started
    12. Check that the EcuC_CopyMetaDataTypeToPdu stub was not called
    13. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
        for all queued PDUs
    14. Check that the upper layer was called with the expected PDU ID and length
    15. Check that the GetRxFreshness stub was called once
    16. Check that the Csm_MacVerify stub was called once
    17. Check that the job ID is for Csm_MacVerify
    18. Check that the EcuC_CopyMetaDataTypeToPdu stub was not called
    19. Reset the main function counter
    20. Call the main function in order to start the verification procedure
    21. Check that no stub have been called as there are no more PDUs to process
    22. Check that the EcuC_CopyMetaDataTypeToPdu stub was not called
    23. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1454</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_BIG_PDU_SIZE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>4829</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is higher than the queue size
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize Pdu payload and length
    03. Set freshness value and corresponding length (in bits)
    04. Set ExtFreshness_GetRxFreshness_Stub callout function and result
    05. Set PduR_SecOCRxIndication_Stub stub callout function
    06. Prepare the secured I-Pdu that needs to be authenticated
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    08. Call the SecOC_StartOfReception and SecOC_CopyRxData TS_SECOC_TP_QUEUE_SIZE times
    09. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module
        VP: Check that if Pdu_Rx_12_securedInfo.SduLength is bigger than the size of PDU
            BUFREQ_E_OVFL is returned
    10. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started
    11. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
        for all queued PDUs
    12. Check that the upper layer was called with the expected PDU ID and length
    13. Check that the GetRxFreshness stub was called once
    14. Check that the Csm_MacVerify stub was called once
    15. Check that the job ID is for Csm_MacVerify
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one
    19. Check that the PduR stub is called once with the expected Pdu id and
        operation result
    20. Reset the main function counter
    21. Call the main function in order to start the verification procedure
    22. Check that no stub have been called as there are no more PDUs to process
    23. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
    24. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1455</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_FV_RET_VALUE_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>5203</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and return value of Csm_MacVerify is set to E_NOT_OK
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    03. Set Csm_MacVerify stub callout function to TS_Csm_MacVerify_Callout.
    04. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    05. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    06. Prepare the secured I-PDU that needs to be authenticated.
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Initialize PDU Payload.
    10. Call the SecOC_RxIndication for double the TS_SECOC_IF_QUEUE_SIZE times.
    11. For the first two PDus call set the TS_GetRxFreshness_Result stub return value to E_NOT_OK.
    12. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started.
    13. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    14. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    15. Call SecOC_MainFunctionRx_SecOCMainFunctionRx_0 once
    16. Check that the GetRxFreshness stub was called once
    17. Check that the Csm_MacVerify stub was not called
    18. Check that the PduR_SecOCRxIndication stub was not called
    19. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
    20. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started.
    21. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    22. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    23. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
        for all queued PDUs.
    24. Set the TS_GetRxFreshness_Result return value to E_NOT_OK for the first 2 PDUs for the
        rest set it to E_OK
    25. Check that the GetRxFreshness stub was called once.
    26. Check that the Csm_MacVerify and PduR_SecOCRxIndicationstub have not been called.
    27. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
    28. Check that the Csm_MacVerify stub was called once
    29. Check that the job ID is for Csm_MacVerify
    30. Check that the provided data and data length are the expected ones.
    31. Check that the provided MAC and MAC length are the expected ones.
    32. Check that the PduR_SecOCRxIndication stub was called once.
    33. Check that the authenticated I-PDU is the expected one.
    34. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    35. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    36. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    37. Reset the output metadata buffer
    38. Reset the main function counter.
    39. Set the TS_GetRxFreshness_Result value to E_NOT_OK and call the main function once.
    40. Check that the GetRxFreshness has been called
    41. Check that the Csm_MacVerify_Stub and PduR_SecOCRxIndication_Stub have not been called
    42. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
    43. Set the TS_GetRxFreshness_Result value back to E_OK and call the main function once
    44. Check that the GetRxFreshness stub was not called as there are no PDUs left in the queue.
    45. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1456</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_CSM_RET_VALUE_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>5533</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and return value of Csm_MacVerify is set to E_NOT_OK
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetRxFreshness stub callout function and the freshness value provided by the
        function.
    03. Set Csm_MacVerify stub callout function to NULL_PTR.
    04. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    05. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    06. Prepare the secured I-PDU that needs to be authenticated.
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Initialize PDU Payload.
    10. Call the SecOC_RxIndication for double the TS_SECOC_IF_QUEUE_SIZE times.
    11. Set the Csm_MacVerify stub return value to E_NOT_OK.
    12. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was
        sent and the verification procedure can be started.
    13. Call SecOC_MainFunctionRx_SecOCMainFunctionRx_0 once.
    14. Check that the GetRxFreshness stub was called once.
    15. Check that the Csm_MacVerify stub was called once.
    16. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    17. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    18. Check that the job ID is for Csm_MacVerify.
    19. Check that the provided data and data length are the expected ones.
    20. Check that the provided MAC and MAC length are the expected ones.
    21. Check that the PduR_SecOCRxIndication stub was not called  as the return value of
        Csm_MacVerify_Stub was E_NOT_OK.
    22. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU  was
        sent and the verification procedure can be started.
    23. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    24. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    25. Call the main function TS_CounterSecOCMFCRx in order to start the verification
        procedure for all queued PDUs.
    26. Set the Csm_MacVerify_Stub to E_NOT_OK for the first 2 PDUs for the rest set it to E_OK.
    27. Check that the GetRxFreshness stub was called once.
    28. Check that the Csm_MacVerify stub was called once.
    29. Check that the job ID is for Csm_MacVerify.
    30. Check that the provided data and data length are the expected ones.
    31. Check that the provided MAC and MAC length are the expected ones.
    32. Check that the PduR_SecOCRxIndication result:
        a. Check that the PduR_SecOCRxIndication stub was not called  as the return value of
           Csm_MacVerify_Stub was E_NOT_OK.
        b. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
        a. Check that the PduR_SecOCRxIndication stub was called once.
        b. Check that the authenticated I-PDU is the expected one
        c. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
        d. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
        e. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
        f. Reset the output metadata buffer
    33. Reset the main function counter.
    34. Set the Csm_MacVerify stub return value to E_NOT_OK and call the main function once.
    35. Check that the GetRxFreshness and Csm_MacVerify stub have been called once.
    36. Check that the PduR_SecOCRxIndication_Stub has not been called as the PDU has been dropped.
    37. Set the Csm_MacVerify stub return value back to E_OK and call the main function once.
    38. Check that the GetRxFreshness stub was not called as there are no PDUs left in the queue.
    39. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
    40. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1457</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_CSM_VER_RES_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>5885</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and verification result of Csm_MacVerify is set to E_NOT_OK
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    03. Set Csm_MacVerify stub callout function to NULL_PTR.
    04. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    05. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    06. Prepare the secured I-PDU that needs to be authenticated.
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Initialize PDU Payload.
    10. Call the SecOC_RxIndication for double the TS_SECOC_IF_QUEUE_SIZE times.
    11. For the first two PDus call set the Csm_MacVerify_Stub.verifyPtr_Out value to E_NOT_OK.
    12. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started.
    13. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    14. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    15. Call SecOC_MainFunctionRx_SecOCMainFunctionRx_0 once.
    16. Check that the GetRxFreshness stub was called once.
    17. Check that the Csm_MacVerify stub was called once.
    18. Check that the job ID is for Csm_MacVerify.
    19. Check that the provided data and data length are the expected ones.
    20. Check that the provided MAC and MAC length are the expected ones.
    21. Check that the PduR_SecOCRxIndication stub was not called  as the verification result of
        Csm_MacVerify_Stub was E_NOT_OK.
    22. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
    23. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started.
    24. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    25. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    26. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
        or all queued PDUs.
    27. Set the Csm_MacVerify_Stub.verifyPtr_Out return value to E_NOT_OK for the first 2 PDUs
        for the rest set it to E_OK
    28. Check that the GetRxFreshness stub was called once.
    29. Check that the Csm_MacVerify stub was called once.
    30. Check that the job ID is for Csm_MacVerify.
    31. Check that the provided data and data length are the expected ones.
    32. Check that the provided MAC and MAC length are the expected ones.
    33. Check the PduR_SecOCRxIndication result:
        a. Check that the PduR_SecOCRxIndication stub was not called  as the return value of
           Csm_MacVerify_Stub was E_NOT_OK.
        b. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
        a. Check that the PduR_SecOCRxIndication stub was called once.
        b. Check that the authenticated I-PDU is the expected one
        c. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
        d. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
        e. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
        f. Reset the output metadata buffer
    34. Reset the main function counter.
    35. Set the Csm_MacVerify_Stub.verifyPtr_Out value to E_NOT_OK and call the main function once.
    36. Check that the GetRxFreshness and Csm_MacVerify stub have been called once.
    37. Check that the PduR_SecOCRxIndication_Stub has not been called as the PDU has been dropped.
    38. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
    39. Set the Csm_MacVerify_Stub.verifyPtr_Out value back to E_OK and call the main function once.
    40. Check that the GetRxFreshness stub was not called as there are no PDUs left in the queue.
    41. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
    42. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1458</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_09_IF_SECUREDPDU_CSM_CALLBACK_RET_VALUE_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>6248</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and return value of Csm_MacVerify is set to E_NOT_OK
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    03. Set Csm_MacVerify stub callout function to NULL_PTR.
    04. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    05. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    06. Prepare the secured I-PDU that needs to be authenticated.
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    08. Set PduR_SecOCRxIndication stub callout function.
    09. Initialize PDU Payload.
    10. Call the SecOC_RxIndication for double the TS_SECOC_IF_QUEUE_SIZE + 2U times.
    11. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started.
    12. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    13. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    14. Call SecOC_MainFunctionRx_SecOCMainFunctionRx_0.
    15. Check that the GetRxFreshness stub was called once
    16. Check that the Csm_MacVerify stub was called once
    17. Check that the job ID is for Csm_MacVerify
    18. Check that the provided data and data length are the expected ones
    19. Check that the provided MAC and MAC length are the expected ones
    20. Check that the PduR_SecOCRxIndication stub was not called  as the return value of
        SecOC_CsmMacVerCallback was E_NOT_OK.
    21. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
    22. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started.
    23. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    24. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    25. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
        for all queued PDUs.
    26. Call SecOC_MainFunctionRx_SecOCMainFunctionRx_0
    27. Check that the GetRxFreshness stub was called once.
    28. Check that the Csm_MacVerify stub was called once.
    29. Check that the job ID is for Csm_MacVerify.
    30. Check that the provided data and data length are the expected ones.
    31. Check that the provided MAC and MAC length are the expected ones.
    32. Check that the PduR_SecOCRxIndication stub was not called  as the return value of
        SecOC_CsmMacVerCallback was E_NOT_OK
    33. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
    34. Check that the PduR_SecOCRxIndication stub was called once.
    35. Check that the authenticated I-PDU is the expected one.
    36. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    37. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    38. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    39. Reset the output metadata buffer
    40. Reset the main function counter.
    41. Call the main function.
    42. Check that the GetRxFreshness and Csm_MacVerify stub have been called once.
    43. Check that the PduR_SecOCRxIndication_Stub has not been called as the PDU has been dropped.
    44. Set the Csm_MacVerify stub return value back to E_OK and call the main function once.
    45. Check that the GetRxFreshness stub was not called as there are no PDUs left in the queue.
    46. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1459</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_FV_RET_VALUE_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>6592</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is lower than the queue size
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize Pdu payload and length.
    03. Set freshness value and corresponding length (in bits).
    04. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    05. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    06. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    07. Set PduR_SecOCRxIndication_Stub stub callout function.
    08. Prepare the secured I-Pdu that needs to be authenticated.
    09. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    10. Call the SecOC_StartOfReception and SecOC_CopyRxData TS_SECOC_TP_QUEUE_SIZE + 2U times.
    11. For the first two PDus call set the TS_GetRxFreshness_Result to E_NOT_OK .
    12. Call the SecOC_StartOfReception function to notify the SecOC module that the verification
         can be started and check that the request is accepted by the SecOC module.
    13. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent and the
        verification procedure can be started.
    14. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    15. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    16. Call SecOC_MainFunctionRx_SecOCMainFunctionRx_0 once.
    17. Check that the upper layer was called with the expected PDU ID and length.
    18. Check that the GetRxFreshness stub was called once.
    19. Check that the Csm_MacVerify stub was not called.
    20. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    21. Check that the PduR_SecOCTpRxIndication_Stub has been called once
        PduR_SecOCTpCopyRxData_Stub hasn't been called.
    22. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    23. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started.
    24. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    25. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    26. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
        for all queued PDUs.
    27. Set the TS_GetRxFreshness_Result verification result to E_NOT_OK for the first 2 PDUs for
        the rest set it to E_OK.
    28. Check that the upper layer was called with the expected PDU ID and length.
    29. Check that the GetRxFreshness stub was called once.
    30. Check that the PduR_SecOCTpRxIndication_Stub has been called once
        Csm_MacVerify and PduR_SecOCTpCopyRxData_Stub haven't been called.
    31. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
    32. Check that the Csm_MacVerify stub was called once.
    33. Check that the job ID is for Csm_MacVerify.
    34. Check that the provided data and data length are the expected ones.
    35. Check that the provided MAC and MAC length are the expected ones.
    36. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    37. Check that the PduR stub is called once with the expected Pdu id and
        operation result.
    38. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    39. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    40. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    41. Reset the output metadata buffer
    42. Set the TS_GetRxFreshness_Result to E_NOT_OK and call the main function once
    43. Check that all stubs have been called once except the PduR_SecOCTpCopyRxData_Stub stub.
    44. Set the TS_GetRxFreshness_Result to E_OK and call the main function once.
    45. Check that none of the stubs have been called.
    46. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1460</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_CSM_RET_VALUE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>7016</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is lower than the queue size
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize Pdu payload and length.
    03. Set freshness value and corresponding length (in bits).
    04. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    05. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    06. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    07. Set PduR_SecOCRxIndication_Stub stub callout function.
    08. Prepare the secured I-Pdu that needs to be authenticated
    09. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    10. Call the SecOC_StartOfReception and SecOC_CopyRxData TS_SECOC_TP_QUEUE_SIZE + 2U times.
    11. For the first two PDus call set the Csm_MacVerify stub return value to E_NOT_OK.
    12. Call the SecOC_StartOfReception function to notify the SecOC module that the verification
         can be started and check that the request is accepted by the SecOC module.
    13. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent and the
        verification procedure can be started.
    14. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    15. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    16. Call SecOC_MainFunctionRx_SecOCMainFunctionRx_0 once.
    17. Check that the upper layer was called with the expected PDU ID and length.
    18. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    19. Check that the GetRxFreshness stub was called once.
    20. Check that the Csm_MacVerify stub was called once.
    21. Check that the job ID is for Csm_MacVerify.
    22. Check that the provided data and data length are the expected ones.
    23. Check that the provided MAC and MAC length are the expected ones.
    24. Check that the PduR_SecOCTpRxIndication_Stub has been called once
        PduR_SecOCTpCopyRxData_Stub hasn't been called.
    25. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    26. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started.
    27. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    28. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    29. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
        for all queued PDUs.
    30. Set the Csm_MacVerify_Stub to E_NOT_OK for the first 2 PDUs for the rest set it to E_OK.
    31. Check that the upper layer was called with the expected PDU ID and length.
    32. Check that the GetRxFreshness stub was called once.
    33. Check that the Csm_MacVerify stub was called once.
    34. Check that the job ID is for Csm_MacVerify.
    35. Check that the provided data and data length are the expected ones.
    36. Check that the provided MAC and MAC length are the expected ones.
    37. Check that the PduR_SecOCTpRxIndication_Stub has been called once
        PduR_SecOCTpCopyRxData_Stub hasn't been called.
    38. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
    39. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    40. Check that the PduR stub is called once with the expected Pdu id and
        operation result.
    41. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    42. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    43. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    44. Reset the output metadata buffer
    45. Set the Csm_MacVerify stub return value to E_NOT_OK and call the main function once.
    46. Check that all stubs have been called once except the PduR_SecOCTpCopyRxData_Stub stub.
    47. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
    48. Set the Csm_MacVerify stub return value to E_OK and call the main function once
    49. Check that none of the stubs have been called
    50. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1461</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_CSM_VER_RES_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>7465</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is lower than the queue size
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize Pdu payload and length.
    03. Set freshness value and corresponding length (in bits).
    04. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    05. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    06. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    07. Set PduR_SecOCRxIndication_Stub stub callout function
    08. Prepare the secured I-Pdu that needs to be authenticated
    09. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    10. Call the SecOC_StartOfReception and SecOC_CopyRxData TS_SECOC_TP_QUEUE_SIZE + 2U times.
    11. For the first two PDus call set the Csm_MacVerify verification result to E_NOT_OK.
    12. Call the SecOC_StartOfReception function to notify the SecOC module that the verification
         can be started and check that the request is accepted by the SecOC module.
    13. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent and the
        verification procedure can be started.
    14. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    15. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    16. Call SecOC_MainFunctionRx_SecOCMainFunctionRx_0 once.
    17. Check that the upper layer was called with the expected PDU ID and length.
    18. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    19. Check that the GetRxFreshness stub was called once.
    20. Check that the Csm_MacVerify stub was called once.
    21. Check that the job ID is for Csm_MacVerify.
    22. Check that the provided data and data length are the expected ones.
    23. Check that the provided MAC and MAC length are the expected ones.
    24. Check that the PduR_SecOCTpRxIndication_Stub has been called once
        PduR_SecOCTpCopyRxData_Stub hasn't been called.
    25. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    26. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started.
    27. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    28. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    29. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
        for all queued PDUs
    30. Set the Csm_MacVerify verification result to E_NOT_OK for the first 2 PDUs for the rest
        set it to E_OK
    31. Check that the upper layer was called with the expected PDU ID and lengt
    32. Check that the GetRxFreshness stub was called once.
    33. Check that the Csm_MacVerify stub was called once.
    34. Check that the job ID is for Csm_MacVerify.
    35. Check that the provided data and data length are the expected ones.
    36. Check that the provided MAC and MAC length are the expected ones.
    37. Check that the PduR_SecOCTpRxIndication_Stub has been called once
        PduR_SecOCTpCopyRxData_Stub hasn't been called.
    38. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
    39. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    40. Check that the PduR stub is called once with the expected Pdu id and
        operation result.
    41. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    42. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    43. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    44. Reset the output metadata buffer
    45. Set the Csm_MacVerify stub verification result to E_NOT_OK and call the main function once
    46. Check that all stubs have been called once except the PduR_SecOCTpCopyRxData_Stub stub.
    47. Set the Csm_MacVerify stub verification result to E_NOT_OK and call the main function once.
    48. Check that none of the stubs have been called.
    49. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1462</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_12_TP_SECUREDPDU_CSM_CALLBACK_RET_VALUE_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>7918</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is lower than the queue size
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize Pdu payload and length.
    03. Set freshness value and corresponding length (in bits).
    04. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    05. Set EcuC_CopyMetaDataTypeFromPdu stub callout function to TS_EcuC_SetMetaData_Callout
    06. Set EcuC_CopyMetaDataTypeToPdu stub callout function to TS_EcuC_GetMetaData_Callout
    07. Set PduR_SecOCRxIndication_Stub stub callout function.
    08. Prepare the secured I-Pdu that needs to be authenticated.
    09. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    10. Call the SecOC_StartOfReception and SecOC_CopyRxData TS_SECOC_TP_QUEUE_SIZE +2U times.
    11. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    12. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started.
    13. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    14. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    15. Call SecOC_MainFunctionRx_SecOCMainFunctionRx_0.
    16. Check that the upper layer was called with the expected PDU ID and length.
    17. Check that the GetRxFreshness stub was called once.
    18. Check that the Csm_MacVerify stub was called once.
    19. Check that the job ID is for Csm_MacVerify.
    20. Check that the provided data and data length are the expected ones.
    21. Check that the provided MAC and MAC length are the expected ones.
    22. Check that the PduR_SecOCTpRxIndication_Stub has been called once
        PduR_SecOCTpCopyRxData_Stub hasn't been called.
    23. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    24. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    25. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started.
    26. Check that the EcuC_CopyMetaDataTypeToPdu stub was called once
    27. Check that the PDU ID is for EcuC_CopyMetaDataTypeToPdu
    28. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
        for all queued PDUs.
    29. Call SecOC_MainFunctionRx_SecOCMainFunctionRx_0.
    30. Check that the upper layer was called with the expected PDU ID and length.
    31. Check that the GetRxFreshness stub was called once.
    32. Check that the Csm_MacVerify stub was called once.
    33. Check that the job ID is for Csm_MacVerify.
    34. Check that the provided data and data length are the expected ones.
    35. Check that the provided MAC and MAC length are the expected ones.
    36. Check that the PduR_SecOCTpRxIndication_Stub has been called once
        PduR_SecOCTpCopyRxData_Stub hasn't been called.
    37. Check that the EcuC_CopyMetaDataTypeFromPdu stub was not called
    38. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    39. Check that the PduR stub is called once with the expected Pdu id and
        operation result.
    40. Check that the EcuC_CopyMetaDataTypeFromPdu stub was called once
    41. Check that the PDU ID is for EcuC_CopyMetaDataTypeFromPdu
    42. Check that the PDU info is for EcuC_CopyMetaDataTypeFromPdu
    43. Reset the output metadata buffer
    44. Call the main function
    45. Check that all stubs have been called once except the PduR_SecOCTpCopyRxData_Stub stub.
    46. Set the Csm_MacVerify stub return value to E_NOT_OK and call the main function once.
    47. Check that none of the stubs have been called.
    48. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1463</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_04_IF_SECUREDPDU_NO_METADATA</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>8363</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the secured I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is lower than the queue size and no meta data
    is being used
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set Csm_MacVerify stub callout function to NULL_PTR
    04. Prepare the secured I-PDU that needs to be authenticated
    05. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    06. Set PduR_SecOCRxIndication stub callout function
    07. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started
    08. Call the main function in order to start the verification procedure
    09. Check that the GetRxFreshness stub was not called
    10. Check that the Csm_MacVerify stub was called once
    11. Check that the job ID is for Csm_MacVerify
    12. Check that the provided data and data length are the expected ones
    13. Check that the provided MAC and MAC length are the expected ones
    14. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode)
    15. Call the main function in order to finish the verification procedure
    16. Check that the PduR_SecOCRxIndication stub was called once
    17. Check that the authenticated I-PDU is the expected one
    18. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1464</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_04_TP_SECUREDPDU_NO_METADATA</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>8512</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the secured I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is lower than the queue size and no meta data
    is being used
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set Csm_MacVerify stub callout function to NULL_PTR
    04. Prepare the secured I-PDU that needs to be authenticated
    05. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    06. Set PduR_SecOCRxIndication stub callout function
    07. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module
    08. Call the SecOC_TpRxIndication to notify the SecOC module that the PDU was sent
        wrongly and the PDU should be discarded
    09. Call the main function in order to start the verification procedure
    10. Check that the GetRxFreshness stub was not called
    11. Check that the Csm_MacVerify stub was not called
    12. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module
    13. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started
    14. Call the main function in order to start the verification procedure
    15. Check that the GetRxFreshness stub was not called
    16. Check that the Csm_MacVerify stub was called once
    17. Check that the job ID is for Csm_MacVerify
    18. Check that the provided data and data length are the expected ones
    19. Check that the provided MAC and MAC length are the expected ones
    20. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
        the verification was successful (if the SecOC module use the Csm service in the
        asynchronous mode)
    21. Call the main function in order to finish the verification procedure
    22. Check that the PduR_SecOCRxIndication stub was called once
    23. Check that the authenticated I-PDU is the expected one
    24. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1465</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_QUEUE_04_TP_SECUREDPDU_PARTIALCOPY_NO_METADATA</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyQueue/source/application/Tests.c</sourcefile>
      <sourceline>8715</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the secured I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when the Reception overflow strategy is
    set to queue and the number of received PDUs is lower than the queue size and no meta data
    is being used
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = QUEUE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set Csm_MacVerify stub callout function to NULL_PTR
    04. Prepare the secured I-PDU that needs to be authenticated
    05. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module
    06. Set PduR_SecOCRxIndication stub callout function
    07. Call the SecOC_StartOfReception and SecOC_CopyRxData TS_SECOC_TP_QUEUE_SIZE + 2U times
    08. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module
    09. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started
    10. Call the main function TS_CounterSecOCMFCRx in order to start the verification procedure
        for all queued PDUs
    11. Check that the GetRxFreshness stub was not called
    12. Check that the Csm_MacVerify stub was called once
    13. Check that the job ID is for Csm_MacVerify
    14. Check that the provided data and data length are the expected ones
    15. Check that the provided MAC and MAC length are the expected ones
    16. Check that the PduR_SecOCRxIndication stub was called once
    17. Check that the authenticated I-PDU is the expected one
    18. Execute the verification procedure
    19. Check that all stubs have been called once
    20. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1466</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_REJECT_09_IF_SECUREDPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyReject/source/application/Tests.c</sourcefile>
      <sourceline>136</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    This test case checks the behavior of the SecOC module when it is busy processing a secured
    PDU and it receives a second secured PDU with the same ID.
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = REJECT&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    03. Prepare the secured I-PDU that needs to be authenticated.
    04. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    05. Set PduR_SecOCRxIndication stub callout function.
    06. Initialize PDU Payload.
    07. Set the Csm_MacVerify stub return value to E_NOT_OK.
    08. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started.
    09. Call the main function in order to start the verification procedure.
    10. Check that the GetRxFreshness stub was called once.
    11. Check that the Csm_MacVerify stub was called once.
    12. Check that the job ID is for Csm_MacVerify.
    13. Check that the provided data and data length are the expected ones.
    14. Check that the provided MAC and MAC length are the expected ones.
    15. Set the Csm_MacVerify stub return value to E_OK.
    16. Call the SecOC_RxIndication to hand over a new Secured PDU.
    17. Call the main function in order to continue the verification procedure.
    18. Check that the GetRxFreshness stub was not called.
    19. Check that the Csm_MacVerify stub was called again for the first Secured PDU.
    20. Check that the PduR_SecOCRxIndication stub was called once for the first Secured PDU.
    21. Check that the authenticated I-PDU is the expected one.
    22. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1467</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_REJECT_17_IF_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyReject/source/application/Tests.c</sourcefile>
      <sourceline>309</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when it is busy processing
    the authentic/cryptographic I-PDU and it receives a second set of
    the authentic/cryptographic I-PDU with the same IDs.
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = REJECT&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the cryptographic PDU and the authentic PDU.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
    05. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    06. Set PduR_SecOCRxIndication stub callout function.
    07. Call the SecOC_RxIndication to hand over the authentic PDU and cryptographic PDU.
    08. Set the Csm_MacVerify stub return value to E_NOT_OK.
    09. Call the main function in order to start the verification procedure.
    10. Check that the GetRxFreshness stub was called once.
    11. Check that the Csm_MacVerify stub was called once.
    12. Set the Csm_MacVerify stub return value to E_OK.
    13. Call the SecOC_RxIndication to hand over a new authentic PDU and cryptographic PDU.
    14. Call the main function in order to continue the verification procedure.
    15. Check that the GetRxFreshness stub was not called.
    16. Check that the Csm_MacVerify stub was called again for the first pair of PDUs received.
    17. Check that the job ID is for Csm_MacVerify.
    18. Check that the provided data and data length are the expected ones.
    19. Check that the provided MAC and MAC length are the expected ones.
    20. Check that the PduR_SecOCRxIndication stub was called once for the first pair of PDUs received.
    21. Check that the authenticated I-PDU is the expected one.
    22. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1468</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_REJECT_19_TP_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyReject/source/application/Tests.c</sourcefile>
      <sourceline>485</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when it is busy processing
    the authentic/cryptographic I-PDU and it receives a second set of
    the authentic/cryptographic I-PDU with the same IDs.
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = REJECT&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the cryptographic PDU.
    03. Initialize the authentic PDU.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    07. Set PduR_SecOCTpCopyRxData stub callout function.
    08. Call the SecOC_StartOfReception to hand over the authentic PDU and cryptographic PDU
    09. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started.
    10. Set the Csm_MacVerify stub return value to E_NOT_OK.
    11. Call the main function in order to start the verification procedure.
    12. Check that the upper layer was called with the expected PDU ID and length.
    13. Check that the GetRxFreshness stub was called once.
    14. Check that the Csm_MacVerify stub was called once.
    15. Check that the job ID is for Csm_MacVerify.
    16. Check that the provided data and data length are the expected ones.
    17. Check that the provided MAC and MAC length are the expected ones.
    18. Set the Csm_MacVerify stub return value to E_OK.
    19. Call the SecOC_StartOfReception to hand over a new authentic PDU and cryptographic PDU
        and check that the requests were rejected.
    20. Call the main function in order to continue the verification procedure.
    21. Check that the upper layer was not called.
    22. Check that the GetRxFreshness stub was not called.
    23. Check that the Csm_MacVerify stub was called again for the first pair of received PDUs.
    24. Check that the authenticated I-PDU is the expected one.
    25. Check that the upper layer was called once with the expected result.
    26. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1469</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_09_IF_SECPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyReplace/source/application/Tests.c</sourcefile>
      <sourceline>174</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    This test case checks the behavior of the SecOC module when it is busy processing a secured PDU
    and it receives a second secured PDU with the same ID.
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = REPLACE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    03. Set Csm_MacVerify stub callout function to TS_Csm_MacVerify_Callout.
    04. Prepare the secured I-PDU that needs to be authenticated.
    05. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    06. Set PduR_SecOCRxIndication stub callout function.
    07. Initialize PDU Payload.
    08. Set the Csm_MacVerify stub return value to E_NOT_OK.
    09. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be started.
    10. Call the main function in order to start the verification procedure.
    11. Check that the GetRxFreshness stub was called once.
    12. Check that the Csm_MacVerify stub was called once.
    13. Check that the job ID is for Csm_MacVerify.
    14. Check that the provided data and data length are the expected ones.
    15. Check that the provided MAC and MAC length are the expected ones.
    16. Set the Csm_MacVerify stub return value to E_OK.
    17. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was sent
        and the verification procedure can be restarted.
    18. Call the main function in order to restart the verification procedure.
    19. Check that the GetRxFreshness stub was called once.
    20. Check that the Csm_MacVerify stub was called once.
    21. Check that the PduR_SecOCRxIndication stub was called once.
    22. Check that the authenticated I-PDU is the expected one.
    23. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1470</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_17_IF_SECPDUCOL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyReplace/source/application/Tests.c</sourcefile>
      <sourceline>365</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when it is busy processing
    the authentic/cryptographic I-PDU and it receives a second set of
    the authentic/cryptographic I-PDU with the same IDs.
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = REPLACE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the cryptographic PDU and the authentic PDU.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function to NULL_PTR.
    05. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
    06. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    07. Set PduR_SecOCRxIndication stub callout function.
    08. Call the SecOC_RxIndication to hand over the authentic PDU.
    09. Call the SecOC_RxIndication to hand over the cryptographic PDU.
    10. Set the GetRxFreshness stub return value to TS_SECOC_E_BUSY.
    11. Call the main function in order to start the verification procedure.
    12. Check that the GetRxFreshness stub was called once.
    13. Check that the Csm_MacVerify stub was called once.
    14. Set the GetRxFreshness stub return value to E_OK.
    15. Call the SecOC_RxIndication to hand over the authentic PDU.
    16. Call the SecOC_RxIndication to hand over the cryptographic PDU.
    17. Call the main function in order to restart the verification procedure.
    18. Check that the GetRxFreshness stub was called once.
    19. Check that the Csm_MacVerify stub was called once.
    20. Check that the job ID is for Csm_MacVerify.
    21. Check that the provided data and data length are the expected ones.
    22. Check that the provided MAC and MAC length are the expected ones.
    23. Check that the PduR_SecOCRxIndication stub was called once.
    24. Check that the authenticated I-PDU is the expected one.
    25. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1471</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_19_TP_SECPDUCOL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyReplace/source/application/Tests.c</sourcefile>
      <sourceline>560</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when it is busy processing
    the authentic/cryptographic I-PDU and it receives a second set of
    the authentic/cryptographic I-PDU with the same IDs.
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = REPLACE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize the cryptographic PDU.
    03. Initialize the authentic PDU.
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacVerify stub callout function.
    06. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC.
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    08. Set PduR_SecOCTpCopyRxData stub callout function.
    09. Call the SecOC_StartOfReception and check that the request was
        accepted by the SecOC module.
    10. Call the SecOC_CopyRxData again to hand over the PDUs to the SecOC module and
        check that operation was successfully performed.
    11. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started.
    12. Set the Csm_MacVerify stub return value to E_NOT_OK.
    13. Call the main function in order to start the verification procedure.
    14. Check that the upper layer was called with the expected PDU ID and length.
    15. Check that the GetRxFreshness stub was called once.
    16. Check that the Csm_MacVerify stub was called once.
    17. Check that the job ID is for Csm_MacVerify.
    18. Check that the provided data and data length are the expected ones.
    19. Check that the provided MAC and MAC length are the expected ones.
    20. Set the Csm_MacVerify stub return value to E_OK.
    21. Call the SecOC_StartOfReception again and check that the request was
        accepted by the SecOC module.
    22. Call the SecOC_CopyRxData again to hand over the PDUs to the SecOC module and
        check that operation was successfully performed.
    23. Call the SecOC_TpRxIndication to notify the SecOC module that the PDUs were sent
        and the verification procedure can be started.
    24. Call the main function in order to restart the verification procedure.
    25. Check that the upper layer was called with the expected PDU ID and operation result
        as the verification will be restarted for the received PDUs.
    26. Check that the GetRxFreshness stub was called once.
    27. Check that the Csm_MacVerify stub was called once.
    28. Check that the authenticated I-PDU is the expected one.
    29. Check that the upper layer was called twice, once to cancel the old request
        and once for the new request.
    30. Call the SecOC_DeInit to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1472</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_17_IF_SECPDUCOLWRONGCRYPTO</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyReplace/source/application/Tests.c</sourcefile>
      <sourceline>822</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when it is busy processing
    the authentic/cryptographic I-PDU and it receives a second set of
    the authentic/cryptographic I-PDU with the same IDs.
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = REPLACE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the cryptographic PDU
    03. Initialize the authentic PDU
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function
    05. Set Csm_MacVerify stub callout function to NULL_PTR
    06. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    08. Set PduR_SecOCRxIndication stub callout function
    09. Call the SecOC_RxIndication to hand over the authentic PDU
    10. Call the SecOC_RxIndication to hand over the cryptographic PDU
    11. Set the Csm_MacVerify stub return value to E_NOT_OK to mimic that one of the PDUs is not correct
    12. Call the main function in order to start the verification procedure
    13. Check that the GetRxFreshness stub was called twice once for the wrong PDU and once for the right one
    14. Check that the Csm_MacVerify stub was called twice
    15. Check that the job ID is for Csm_MacVerify
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Check that the PduR_SecOCRxIndication stub was called once
    19. Check that the authenticated I-PDU is the expected one
    20. Call the SecOC_RxIndication to hand over the authentic PDU
    21. Call the main function in order to start the verification procedure
    22. Check that the GetRxFreshness stub was not called
    23. Check that the Csm_MacVerify stub was not called
    24. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1473</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_17_IF_SECPDUCOLWRONGAUTHENTIC</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyReplace/source/application/Tests.c</sourcefile>
      <sourceline>1006</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when it is busy processing
    the authentic/cryptographic I-PDU and it receives a second set of
    the authentic/cryptographic I-PDU with the same IDs.
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = REPLACE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the cryptographic PDU
    03. Initialize the authentic PDU
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function
    05. Set Csm_MacVerify stub callout function to NULL_PTR
    06. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    08. Set PduR_SecOCRxIndication stub callout function
    09. Call the SecOC_RxIndication to hand over the authentic PDU
    10. Call the SecOC_RxIndication to hand over the cryptographic PDU
    11. Set the Csm_MacVerify stub return value to E_NOT_OK to mimic that one of the PDUs is not correct
    12. Call the main function in order to start the verification procedure
    13. Check that the GetRxFreshness stub was called twice once for the wrong PDU and once for the right one
    14. Check that the Csm_MacVerify stub was called twice
    15. Check that the job ID is for Csm_MacVerify
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Check that the PduR_SecOCRxIndication stub was called once
    19. Check that the authenticated I-PDU is the expected one
    20. Call the SecOC_RxIndication to hand over the authentic PDU
    21. Call the main function in order to start the verification procedure
    22. Check that the GetRxFreshness stub was not called
    23. Check that the Csm_MacVerify stub was not called
    24. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1474</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_RX_RECSTRATEGY_REPLACE_17_IF_SECPDUCOLWRONGCRYPTOANDAUTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Rx_ReceptionStrategyReplace/source/application/Tests.c</sourcefile>
      <sourceline>1190</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification the authentic/cryptographic I-PDU via TP
Test Description: 
    This test case checks the behavior of the SecOC module when it is busy processing
    the authentic/cryptographic I-PDU and it receives a second set of
    the authentic/cryptographic I-PDU with the same IDs.
  
Test Object: 
    Reception overflow strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCRxSecuredPduLayer = SecOCRxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCReceptionOverflowStrategy = REPLACE&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the cryptographic PDU
    03. Initialize the authentic PDU
    04. Set GetRxFreshness stub callout function and the freshness value provided by the function
    05. Set Csm_MacVerify stub callout function to NULL_PTR
    06. Prepare the authentic and cryptographic I-PDUs that needs to be sent to SecOC
    07. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module
    08. Set PduR_SecOCRxIndication stub callout function
    09. Call the SecOC_RxIndication to hand over the authentic PDU
    10. Call the SecOC_RxIndication to hand over the cryptographic PDU
    11. Set the Csm_MacVerify stub return value to E_NOT_OK to mimic that one of the PDUs is not correct
    12. Call the main function in order to start the verification procedure
    13. Check that the GetRxFreshness stub was called twice once for the wrong PDU and once for the right one
    14. Check that the Csm_MacVerify stub was called twice
    15. Check that the job ID is for Csm_MacVerify
    16. Check that the provided data and data length are the expected ones
    17. Check that the provided MAC and MAC length are the expected ones
    18. Check that the PduR_SecOCRxIndication stub was called once
    19. Check that the authenticated I-PDU is the expected one
    20. Call the SecOC_RxIndication to hand over the authentic PDU
    21. Call the main function in order to start the verification procedure
    22. Check that the GetRxFreshness stub was not called
    23. Check that the Csm_MacVerify stub was not called
    24. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1475</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_TX_01_TP_SECUREDAREA</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>228</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct transmission
    of a Secured I-PDU via transport protocol when the PDU is configured to
    use the SecureArea.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU with valid Payload data nad an invalid length.
    03. Set GetTxFreshness and Csm_MacGenerate stubs
    04. Call SecOC_Transmit to start the authentication procedure
    05. Call the main function several time
    06. Check that the GetRxFreshness stub was not called
    07. Check that the Csm_MacGenerate stub was not called
    08. set the length of PDU to an invalid length value.
    09. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    10. Call SecOC_Transmit to start the authentication procedure.
    11. Call the main function several times.
    12. Check that the GetRxFreshness stub was not called.
    13. Check that the Csm_MacGenerate stub was not called.
    14. Set the length of PDU Payload to correct value.
    15. Call SecOC_Transmit to start the authentication procedure.
    16. Call the main function in order to finish the authentication procedure.
    17. Check that the GetTxFreshness stub was called once.
    18. Check that the Csm_MacGenerate stub was called once.
    19. Check that the job ID is for Csm_MacGenerate.
    20. Check that the provided data and data length are the expected ones.
    21. Check that the output buffer length is the expected one.
    22. Check that the PduR_SecOCTransmit stub was called once.
    23. Check that the provided PDU is the expected one.
    24. Call SecOC_TpTxConfirmation to finished the authentication procedure.
    25. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00034_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00311</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00312</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00313</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>640</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1476</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_10_TP_SECUREDAREA_LENGTH_ZERO</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>434</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct transmission
    of a Secured I-PDU via transport protocol when the PDU is configured to
    use the SecureArea.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU with valid Payload data but an invalid length value.
    03. Set GetTxFreshness and Csm_MacGenerate stubs
    04. Call SecOC_Transmit to start the authentication procedure
    05. Call the main function in order to finish the authentication procedure
    06. Check that the GetTxFreshness stub was called once
    07. Check that the Csm_MacGenerate stub was called once
    08. Check that the job ID is for Csm_MacGenerate
    09. Check that the provided data and data length are the expected ones
    10. Check that the output buffer length is the expected one
    11. Check that the PduR_SecOCTransmit stub was called once
    12. Check that the provided PDU is the expected one
    13. Call SecOC_TpTxConfirmation to finished the authentication procedure
    14. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00034_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00311</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00312</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00313</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>640</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1477</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_02_TP_CONFIRMATION_TIMEOUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>592</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test checks if the SecOC module will prepare the Secured I-PDU.
    During preparation SecOC will allocate the necessary buffers to hold
    the intermediate and final results of the authentication process.
    The SecOC module will truncate the resulting Authenticator down to the number of bits
    specified by SecOCAuthInfoTxLength.
    Furthermore it will check if the SecOC module will trigger a transition to Tx Idle state
    when the Secured PDU was sent to the lower layer and the confirmation was not received from
    lower layer and the configured timeout period was exceeded.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    05. Call SecOC_Transmit to start the authentication procedure.
    06. Call the main function in order to finish the authentication procedure.
    07. Check that the GetTxFreshness stub was called once.
    08. Check that the Csm_MacGenerate stub was called once.
    09. Check that the job ID is for Csm_MacGenerate.
    10. Check that the provided data and data length are the expected ones.
    11. Check that the output buffer length is the expected one.
    12. Check that the PduR_SecOCTransmit stub was called once.
    13. Check that the provided Secured I-PDU is the expected one.
    14. Call the main function several times to trigger the timeout.
    15. Set GetTxFreshness stub freshness value provided by the function.
    16. Call SecOC_Transmit to start the authentication procedure for the same PDU ID with new payload.
    17. Call the main function in order to finish the authentication procedure.
    18. Check that the GetTxFreshness stub was called once.
    19. Check that the Csm_MacGenerate stub was called once.
    20. Check that the job ID is for Csm_MacGenerate.
    21. Check that the output buffer length is the expected one.
    22. Check that the PduR_SecOCTransmit stub was called once.
    23. Check that the provided Secured I-PDU is the expected one.
    24. Call SecOC_TpTxConfirmation to finished the authentication procedure.
    25. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.SWS_SecOC_EB_RxTx_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>675</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>599</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>601</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1478</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_03_04_05_TP_VERF_COUNTERS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>827</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the correct update of the following counters step by step in the
    transmit process using the Csm module services.
      - GetTxFreshness
      - Csm_MacGenerate
      - PduR_SecOCTransmit
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Reset the SecOC module.
    02. Initialize the SecOC module and the stubs.
    03. Initialize PDU Payload.
    04. Call SecOC_Transmit to start the authentication procedure.
    05. Call the main function in order to finish the authentication procedure.
    06. Check that the GetTxFreshness and the SPduTxConfirmation stus were called once.
    07. Check that the Csm_MacGenerate stub was called once.
    08. Check that the PduR_SecOCTransmit stub was called once.
    09. Call SecOC_TpTxConfirmation to finished the authentication procedure.
    10. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result.
    11. Set the new PDU Payload.
    12. Call SecOC_Transmit to start the authentication procedure.
    13. Call the main function in order to finish the authentication procedure.
    14. Check that the GetTxFreshness and the SPduTxConfirmation stubs was not called
        as the PDU freshness length is configured with the value 0.
    15. Check that the Csm_MacGenerate stub was called once.
    16. Check that the job ID is for Csm_MacGenerate.
    17. Check that the PduR_SecOCTransmit stub was called once.
    18. Call SecOC_TpTxConfirmation to finished the authentication procedure.
    19. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result.
    20. Set the new PDU Payload.
    21. Call SecOC_Transmit to start the authentication procedure.
    22. Call the main function in order to finish the authentication procedure.
    23. Check that the GetTxFreshness and the SPduTxConfirmation stubs was not called
        as the PDU freshness length is configured with the value 0.
    24. Check that the Csm_MacGenerate stub was called once.
    25. Check that the job ID is for Csm_MacGenerate.
    26. Check that the PduR_SecOCTransmit stub was called once.
    27. Call SecOC_TpTxConfirmation to finished the authentication procedure.
    28. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Tx.SWS_SecOC_00074</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1479</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_09_IF_AUTHPDU_DYNAMIC_LENGTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>1068</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the correct generation of a Secured PDU for a transmission,
    furthermore checks if the dynamic length of the provided authentic PDU is handled correctly.
  
Test Object: 
    SocOC_Transmit()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    05. Call SecOC_Transmit to start the authentication procedure.
    06. Prepare the next PDU Payload.
    07. For asynchronous Csm mode:
      a. Call the main function until the Csm_MacGenerate stub was called.
      b. Invoke the Csm callback notification with the value E_OK.
      c. Call SecOC_Transmit to handover the next authentic PDU (same ID but different data,
         especially different length).
      d. Call the main function once in order to finish the first authentication procedure.
        For synchronous Csm mode:
      a. Call the main function once in order to process the authentication for the first PDU sent.
      b. Call SecOC_Transmit to handover the next authentic PDU (same ID but different data,
         especially different length).
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called once.
    14. Check that the provided Secured I-PDU is the expected one.
    15. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully.
    16. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID.
    17. Call the main function in order to proceed with the authentication procedure for the second
        PDU sent.
    18. Check that the GetTxFreshness stub was called once.
    19. Check that the Csm_MacGenerate stub was called once.
    20. Check that the job ID is for Csm_MacGenerate.
    21. Check that the provided data and data length are the expected ones.
    22. Check that the output buffer length is the expected one.
    23. Check that the PduR_SecOCTransmit stub was called once.
    24. Check that the provided Secured I-PDU is the expected one.
    25. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully.
    26. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID.
    27. Call the SecOC_TxConfirmation to simulate that the secured PDU was not received successfully.
    28. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID and result value.
    29. Call the main function once in order to trigger a transition to the idle state.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00034_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00062</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>602</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>603</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1480</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_16_TP_TRUNCATE_AUTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>1354</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The SecOC module shall truncate the resulting Authenticator down to the
    number of bits specified by SecOCAuthInfoTxLength.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    05. Call SecOC_Transmit to start the authentication procedure.
    06. Call the main function in order to finish the authentication procedure.
    07. Check that the GetTxFreshness stub was called once.
    08. Check that the Csm_MacGenerate stub was called once.
    09. Check that the job ID is for Csm_MacGenerate.
    10. Check that the provided data and data length are the expected ones.
    11. Check that the output buffer length is the expected one.
    12. Check that the PduR_SecOCTransmit stub was called once.
    13. Check that the provided Secured I-PDU is the expected one.
    14. Call SecOC_TpTxConfirmation to finished the authentication procedure.
    15. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1481</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_09_16_IF_TP_INDEPENDENT_FRESHNESS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>1522</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests if the SecOC maintains independent freshness counter values independently from each other.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payloads.
    03. Call SecOC_Transmit to start the authentication procedure for the PDU ID 16.
    04. Call SecOC_Transmit to start the authentication procedure for the PDU ID 9.
    05. Call the main function in order to finish the authentication procedure.
    06. Check that the GetTxFreshness stub was called twice.
    07. Check that the Csm_MacGenerate stub was called twice.
    08. Check that the PduR_SecOCTransmit stub was called once.
    09. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully.
    10. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID.
    11. Check that the PduR_SecOCTransmit stub was called once.
    12. Call SecOC_TpTxConfirmation to finished the authentication procedure.
    13. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result.
    14. Repeat the authentication procedure 200000 times for the PDU ID 16 and PDU ID 9.
    15. Check that the GetTxFreshness stub was called 400000 times.
    16. Check that the Csm_MacGenerate stub was called 400000 times.
    17. Check that the PduR_SecOCTransmit stub were called 400000 times.
    18. Check that the PduR_SecOCTxConfirmation and the PduR_SecOCTpTxConfirmation stubs were
        called 200000 times.
    19. Set the SecOC module as not initialized.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00138_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1482</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_GETVERSIONINFO</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>1783</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the API SecOC_GetVersionInfo.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
   01. Initialize the SecOC module and the stubs.
   02. Call SecOC_GetVersionInfo with a Null Pointer argument.
   03. Call SecOC_GetVersionInfo with a pointer to a valid structure.
   04. Check that the version info is correct.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1483</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_06_07_08_TP_CANCELTRANSMIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>1855</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests if the cancellation of a transmission is correctly handled by the SecOC. The SecOC
    should immediately inform the lower layer about a cancellation request.
  
Test Object: 
    SecOC_CancelTransmit()
    SecOC_Transmit()
    SecOC_MainFunctionTx_SecOCMainFunctionTx_0()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
     01. De-Initialize the SecOC module and initialize the stubs.
     02. Initialize PDU Payloads.
     03. Call the SecOC_CancelTransmit with valid PDU ID before the SecOC_Transmit was called
         and check that the return value is E_NOT_OK.
     04. Call the SecOC_CancelTransmit with invalid PDU ID before the SecOC_Transmit was called
         and check that the return value is E_NOT_OK.
     05. Initialize the SecOC module.
     06. Call the SecOC_CancelTransmit with valid PDU ID before the SecOC_Transmit was called
         and check that the return value is E_NOT_OK.
     07. Set GetTxFreshness and Csm_MacGenerate stubs.
     08. Call SecOC_Transmit to start the authentication procedure.
     09. Call the main function in order to finish the authentication procedure.
     10. Check that the GetTxFreshness stub was called once.
     11. Check that the Csm_MacGenerate stub was called once.
     12. Check that the job ID is for Csm_MacGenerate.
     13. Check that the provided data and data length are the expected ones.
     14. Check that the output buffer length is the expected one.
     15. Check that the PduR_SecOCTransmit stub was called once.
     16. Check that the provided PDU is the expected one.
     17. Call the SecOC_CancelTransmit and check that the return value is E_OK.
     18. Check that the PduR_SecOCCancelTransmit stub was called once with the correct PDU ID.
     19. Set Csm_SignatureGenerate stub callout function and the Signature value provided by the function
     20. Set the Csm_SignatureGenerate stub return value to E_NOT_OK.
     21. Call SecOC_Transmit to start the authentication procedure.
     22. Call the main function once in order to start the authentication procedure.
     23. Check that the GetTxFreshness stub was called once.
     24. Check that the Csm_SignatureGenerate stub was called once.
     25. Check that the job ID is for Csm_SignatureGenerate.
     26. Check that the provided data and data length are the expected ones.
     27. Check that the output buffer length is the expected one.
     28. Call the SecOC_CancelTransmit to stop the authentication procedure.
     29. Check that the PduR_SecOCCancelTransmit was called with the expected PDU ID.
     30. Call the main function several times.
     31. Check that the GetTxFreshness and the Csm_SignatureGenerate stubs were not called again.
     32. Set the Csm_SignatureGenerate stub return value to E_OK.
     33. Set the GetTxFreshness stub callout function to NULL_PTR.
     34. Set the GetTxFreshness stub return value to E_NOT_OK.
     35. Call SecOC_Transmit to start the authentication procedure.
     36. Call the main function once in order to start the authentication procedure.
     37. Check that the GetTxFreshness stub was called once.
     38. Check that the Csm_SignatureGenerate stub was not called.
     39. Call the SecOC_CancelTransmit to stop the authentication procedure.
     40. Check that the PduR_SecOCCancelTransmit was called with the expected PDU ID.
     41. Call the main function several times.
     42. Check that the GetTxFreshness and the Csm_SignatureGenerate stubs were not called again.
     43. Set the GetTxFreshness stub return value to E_OK.
     44. Call SecOC_Transmit to start the authentication procedure.
     45. Call the main function once in order to start the authentication procedure.
     46. Check that the GetTxFreshness stub was called once.
     47. Check that the Csm_SignatureGenerate stub was called once.
     48. Call the SecOC_CancelTransmit to stop the authentication procedure.
     49. Call the SecOC_CsmSigGenCallback to indicate that the result for
         authentication procedure is available
     50. Check that the PduR_SecOCCancelTransmit was called with the expected PDU ID.
     51. Call the main function several times.
     52. Check that the GetTxFreshness and the Csm_SignatureGenerate stubs were not called again.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00138_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1484</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_15_TP_TRANSMIT_OVERWRITE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>2184</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test tests if the call to SecOC_Transmit during an ongoing authentication or transmission
    of an I-PDU is accepted. The call shall overwrite the buffer of the authentic I-PDU without
    overwriting the buffer of the currently generated secured I-PDU.
  
Test Object: 
    SecOC_Transmit()
    SecOC_MainFunctionTx_SecOCMainFunctionTx_0()
    SecOC_Init()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC Module and the stubs.
    02. Initialize PDU Payloads.
    03. Call the SecOC_Transmit with an authentic I-PDU and call SecOC_MainFunctionTx_SecOCMainFunctionTx_0 several times.
    04. Call the SecOC_Transmit again with different content data.
    05. Call the SecOC_MainFunctionTx_SecOCMainFunctionTx_0 and the SecOC_CopyTxData several times until the first I-PDU
        has been sent. Check if the content which was given to PduR_SecOCTransmit matches with
        the first authentic I-PDU.
    06. Call the SecOC_TpTxConfirmation.
    07. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result.
    08. Call the SecOC_Transmit with an authentic I-PDU and call SecOC_MainFunctionTx_SecOCMainFunctionTx_0 several times.
    09. Call the SecOC_MainFunctionTx_SecOCMainFunctionTx_0 and the SecOC_CopyTxData several times until the second I-PDU
        has been sent. Check if the content which was given to PduR_SecOCTransmit matches with
        the second authentic I-PDU.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1485</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_16_TP_DEFAULTAUTH_NO_INIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>2330</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module when SecOC_SendDefaultAuthenticationInformation
    was called to enable the bypass mechanism and the module was not yet initialized.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern = 0xA5U&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Call the SecOC_DeInit to reset the SecOC module
    02. Call SecOC_SendDefaultAuthenticationInformation and check that the request
        was rejected because SecOC was not initialized
    03. Initialize the SecOC module and the stubs
    04. Set the GetTxRefreshness stub return value to E_NOT_OK
    05. Initialize PDU Payload
    06. Call SecOC_SendDefaultAuthenticationInformation to enable the bypass mechanism
    07. Call SecOC_Transmit to start the authentication procedure
    08. Call the main function once in order to execute the authentication procedure
    09. Check that the GetTxFreshness stub was called once
    10. Check that the Csm_MacGenerate stub was not called
    11. Check that the PduR_SecOCTransmit stub was called once
    12. Check that the provided Secured I-PDU is the expected one
    13. Call SecOC_TpTxConfirmation to finish the authentication procedure
    14. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result
    15. Call SecOC_SendDefaultAuthenticationInformation again to disable the bypass mechanism
    16. Call SecOC_Transmit to start the authentication procedure
    17. Call the main function in order to execute the authentication procedure
    18. Check that the GetTxFreshnessTruncData stub was called once
    19. Check that the PduR_SecOCTransmit stub was not called
    20. Set the GetTxRefreshness stub return value back E_OK
    21. Set GetTxFreshness stub callout function and the freshness value provided by the function
    22. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    23. Call SecOC_Transmit to start the authentication procedure
    24. Call the main function in order to finish the authentication procedure
    25. Check that the GetTxFreshness stub was called once
    26. Check that the Csm_MacGenerate stub was called once
    27. Check that the job ID is for Csm_MacGenerate
    28. Check that the provided data and data length are the expected ones
    29. Check that the output buffer length is the expected one
    30. Check that the PduR_SecOCTransmit stub was called once
    31. Check that the provided Secured I-PDU is the expected one
    32. Call SecOC_TpTxConfirmation to finish the authentication procedure
    33. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1486</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_16_TP_DEFAULTAUTH_INVALID_FVM_ID</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>2581</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module when SecOC_SendDefaultAuthenticationInformation
    was called to enable the bypass mechanism and the used freshness value ID was the wrong one.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern = 0xA5U&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Set the GetTxRefreshness stub return value to E_NOT_OK
    03. Initialize PDU Payload
    04. Call SecOC_SendDefaultAuthenticationInformation and check that the request was rejected because freshness ID is invalid
    05. Call SecOC_SendDefaultAuthenticationInformation to enable the bypass mechanism
    06. Call SecOC_Transmit to start the authentication procedure
    07. Call the main function once in order to execute the authentication procedure
    08. Check that the GetTxFreshness stub was called once
    09. Check that the Csm_MacGenerate stub was not called
    10. Check that the PduR_SecOCTransmit stub was called once
    11. Check that the provided Secured I-PDU is the expected one
    12. Call SecOC_TpTxConfirmation to finish the authentication procedure
    13. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result
    14. Call SecOC_SendDefaultAuthenticationInformation again to disable the bypass mechanism
    15. Call SecOC_Transmit to start the authentication procedure
    16. Call the main function in order to execute the authentication procedure
    17. Check that the GetTxFreshnessTruncData stub was called once
    18. Check that the PduR_SecOCTransmit stub was not called
    19. Set the GetTxRefreshness stub return value back E_OK
    20. Set GetTxFreshness stub callout function and the freshness value provided by the function
    21. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    22. Call SecOC_Transmit to start the authentication procedure
    23. Call the main function in order to finish the authentication procedure
    24. Check that the GetTxFreshness stub was called once
    25. Check that the Csm_MacGenerate stub was called once
    26. Check that the job ID is for Csm_MacGenerate
    27. Check that the provided data and data length are the expected ones
    28. Check that the output buffer length is the expected one
    29. Check that the PduR_SecOCTransmit stub was called once
    30. Check that the provided Secured I-PDU is the expected one
    31. Call SecOC_TpTxConfirmation to finish the authentication procedure
    32. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1487</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_16_TP_DEFAULTAUTH_FVM_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>2828</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module when SecOC_SendDefaultAuthenticationInformation
    was called to enable the bypass mechanism and FvM returns a negative value and the verification
    fails.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern = 0xA5U&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Set the GetTxRefreshness stub return value to E_NOT_OK
    03. Initialize PDU Payload
    04. Call SecOC_SendDefaultAuthenticationInformation to enable the bypass mechanism
    05. Call SecOC_Transmit to start the authentication procedure
    06. Call the main function once in order to execute the authentication procedure
    07. Check that the GetTxFreshness stub was called once
    08. Check that the Csm_MacGenerate stub was not called
    09. Check that the PduR_SecOCTransmit stub was called once
    10. Check that the provided Secured I-PDU is the expected one
    11. Call SecOC_TpTxConfirmation to finish the authentication procedure
    12. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result
    13. Call SecOC_SendDefaultAuthenticationInformation again to disable the bypass mechanism
    14. Call SecOC_Transmit to start the authentication procedure
    15. Call the main function in order to execute the authentication procedure
    16. Check that the GetTxFreshnessTruncData stub was called once
    17. Check that the PduR_SecOCTransmit stub was not called
    18. Set the GetTxRefreshness stub return value back E_OK
    19. Set GetTxFreshness stub callout function and the freshness value provided by the function
    20. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    21. Call SecOC_Transmit to start the authentication procedure
    22. Call the main function in order to finish the authentication procedure
    23. Check that the GetTxFreshness stub was called once
    24. Check that the Csm_MacGenerate stub was called once
    25. Check that the job ID is for Csm_MacGenerate
    26. Check that the provided data and data length are the expected ones
    27. Check that the output buffer length is the expected one
    28. Check that the PduR_SecOCTransmit stub was called once
    29. Check that the provided Secured I-PDU is the expected one
    30. Call SecOC_TpTxConfirmation to finish the authentication procedure
    31. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1488</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_16_TP_DEFAULTAUTH_CSM_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>3072</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module when SecOC_SendDefaultAuthenticationInformation
    was called to enable the bypass mechanism and Csm returns a negative value and the verification
    fails.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern = 0xA5U&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    05. Set the Csm_MacGenerate stub return value to E_NOT_OK
    06. Call SecOC_SendDefaultAuthenticationInformation to enable the bypass mechanism
    07. Call SecOC_Transmit to start the authentication procedure
    08. Call the main function in order to execute the authentication procedure
    09. Check that the GetTxFreshness stub was called once
    10. Check that the Csm_MacGenerate stub was called once
    11. Check that the job ID is for Csm_MacGenerate
    12. Check that the provided data and data length are the expected ones
    13. Check that the output buffer length is the expected one
    14. Check that the PduR_SecOCTransmit stub was called once
    15. Check that the provided Secured I-PDU is the expected one
    16. Call SecOC_TpTxConfirmation to finish the authentication procedure
    17. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result
    18. Call SecOC_SendDefaultAuthenticationInformation again to disable the bypass mechanism
    19. Call SecOC_Transmit to start the authentication procedure
    20. Call the main function in order to execute the authentication procedure
    21. Check that the GetTxFreshness stub was called once
    22. Check that the Csm_MacGenerate stub was called once
    23. Check that the PduR_SecOCTransmit stub was not called
    24. Set the Csm_MacGenerate stub return value back to E_OK
    25. Call SecOC_Transmit to start the authentication procedure
    26. Call the main function in order to finish the authentication procedure
    27. Check that the GetTxFreshness stub was called once
    28. Check that the Csm_MacGenerate stub was called once
    29. Check that the job ID is for Csm_MacGenerate
    30. Check that the provided data and data length are the expected ones
    31. Check that the output buffer length is the expected one
    32. Check that the PduR_SecOCTransmit stub was called once
    33. Check that the provided Secured I-PDU is the expected one
    34. Call SecOC_TpTxConfirmation to finish the authentication procedure
    35. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1489</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_16_TP_DEFAULTAUTH_CSM_CALLBACK_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>3338</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module when SecOC_SendDefaultAuthenticationInformation
    was called to enable the bypass mechanism and Csm callback returns
    a negative value and the verification fails.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern = 0xA5U&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSecuredPduLayer = SecOCTxSecuredPdu&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    05. Call SecOC_SendDefaultAuthenticationInformation to enable the bypass mechanism
    06. Call SecOC_Transmit to start the authentication procedure
    07. Call the main function in order to execute the authentication procedure
    08. Call Csm callback with result set to E_NOT_OK
    09. Check that the GetTxFreshness stub was called once
    10. Check that the Csm_MacGenerate stub was called once
    11. Check that the job ID is for Csm_MacGenerate
    12. Check that the provided data and data length are the expected ones
    13. Check that the output buffer length is the expected one
    14. Check that the PduR_SecOCTransmit stub was called once
    15. Check that the provided Secured I-PDU is the expected one
    16. Call SecOC_TpTxConfirmation to finish the authentication procedure
    17. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result
    18. Call SecOC_SendDefaultAuthenticationInformation again to disable the bypass mechanism
    19. Call SecOC_Transmit to start the authentication procedure
    20. Call the main function in order to finish the authentication procedure
    21. Call Csm callback with result set to E_NOT_OK
    22. Check that the GetTxFreshness stub was called once
    23. Check that the Csm_MacGenerate stub was called once
    24. Check that the PduR_SecOCTransmit stub was not called
    25. Call SecOC_Transmit to start the authentication procedure
    26. Call the main function in order to finish the authentication procedure
    27. Check that the GetTxFreshness stub was called once
    28. Check that the Csm_MacGenerate stub was called once
    29. Check that the job ID is for Csm_MacGenerate
    30. Check that the provided data and data length are the expected ones
    31. Check that the output buffer length is the expected one
    32. Check that the PduR_SecOCTransmit stub was called once
    33. Check that the provided Secured I-PDU is the expected one
    34. Call SecOC_TpTxConfirmation to finish the authentication procedure
    35. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1490</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_11_TP_MACGENERATE_CSM_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>3605</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC during the authentication of an Authentic I-PUD when
    the Csm module returns E_NOT_OK.
    Furthermore is tested if the callout functions are called to indicate that the MAC Generate
    failed.
  
Test Object: 
    SecOC_Init()
    SecOC_Transmit()
    SecOC_CsmMacGenerateCallback()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Call SecOC_Transmit to start the authentication procedure.
    04. Set the Csm_MacGenerate stub return value to E_NOT_OK.
    05. Call the main function several times.
    06. Check that the GetTxFreshness stub was called once.
    07. Check that the Csm_MacGenerate stub was called once.
    08. Check that the PduR_SecOCTransmit stub was not called.
    09. Check that the callout function where invoked to indicate that the MAC Generate failed.
    10. Set the Csm_MacGenerate stub return value to E_OK.
    11. Call SecOC_Transmit to start the authentication procedure.
    12. Call the main function and the callback until the maximum authentication
        attempts is reached.
    13. Call the main function several times.
    14. Check that the GetTxFreshness stub was called once.
    15. Check that the Csm_MacGenerate stub was called the maximum number of retries configured.
    16. Check that the PduR_SecOCTransmit stub was not called.
    17. Check that the callout function where invoked to indicate that the MAC Generate failed.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00151</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00011</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>614</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00012</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>615</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00013</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>616</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00014</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>617</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1491</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_09_IF_RE_AUTHENTICATION_ENABLED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>3778</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC when the Re-Authentication after transmision option is enabled.
    If the option is enabled then SecOC can do the authentication of the same Pdu without
    having to call before the transmit service.
  
Test Object: 
    SecOCReAuthenticateAfterTriggerTransmit
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCReAuthenticateAfterTriggerTransmit is enabled. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    05. Call SecOC_Transmit to start the authentication procedure
    06. Call the main function
    07. Check that the GetTxFreshness stub was called once
    08. Check that the Csm_MacGenerate stub was called once
    09. Check that the job ID is for Csm_MacGenerate
    10. Check that the provided data and data length are the expected ones
    11. Check that the output buffer length is the expected one
    12. Check that the PduR_SecOCTransmit stub was called once
    13. Check that the provided Secured I-PDU is the expected one
    14. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
    15. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID
    16. Call the main function again to see if the PDU is processed without calling before the SecOC_Transmit
        because the SecOCReAuthenticateAfterTriggerTransmit is enabled
    17. Check that the GetTxFreshness stub was called once
    18. Check that the Csm_MacGenerate stub was called once
    19. Check that the job ID is for Csm_MacGenerate
    20. Check that the provided data and data length are the expected ones
    21. Check that the output buffer length is the expected one
    22. Check that the PduR_SecOCTransmit stub was called once
    23. Check that the provided Secured I-PDU is the expected one
    24. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
    25. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID
    26. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00069</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1492</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_16_TP_GETTXFRESHNESS_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>3971</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the authentication procedure when
    GetTxFreshness return something different that E_OK.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set the GetTxRefreshness stub return value to E_NOT_OK.
    03. Initialize PDU Payload.
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function once in order to start the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was not called.
    10. Set the GetTxRefreshness stub return value back to E_OK.
    11. Call SecOC_Transmit to start the authentication procedure.
    12. Call the main function in order to finish the authentication procedure.
    13. Check that the GetTxFreshness stub was called once.
    14. Check that the Csm_MacGenerate stub was called once.
    15. Check that the job ID is for Csm_MacGenerate.
    16. Check that the provided data and data length are the expected ones.
    17. Check that the output buffer length is the expected one.
    18. Check that the PduR_SecOCTransmit stub was called once.
    19. Check that the provided Secured I-PDU is the expected one.
    20. Call SecOC_TpTxConfirmation to finish the authentication procedure.
    21. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1493</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_03_16_17_IF_TP_WRONGINPUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>4161</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the SecOC module APIs for robustness against wrong input data or
    out of sequence calls of the API.
  
Test Object: 
    SecOC_DeInit()
    SecOC_TxConfirmation()
    SecOC_TpTxConfirmation()
    SecOC_TriggerTransmit()
    SecOC_Transmit()
    SecOC_CsmMacGenCallback()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. De-initialize the SecOC module.
    02. Call the SecOC_TxConfirmation with an invalid PDU ID
    03. Call the SecOC_TpTxConfirmation with an valid PDU ID and with the result equal to E_NOT_OK.
    04. Call the SecOC_TpTxConfirmation with an invalid PDU ID and with the result equal to E_OK.
    05. Call the SecOC_TpTxConfirmation with an invalid PDU ID and with
        the result equal to E_NOT_OK.
    06. Call the SecOC_Transmit with an invalid PDU ID but with an valid data and check that
        the return value is equal to E_NOT_OK.
    07. Call the SecOC_Transmit with an valid PDU ID and content data and check if that
        the return value is equal to E_NOT_OK.
    08. Call the SecOC_TriggerTransmit with an valid PDU ID and check that the return value is
        equal to E_NOT_OK.
    09. Call the SecOC_CsmMacGenCallback with an valid job content and with the result equal
        to E_OK and check that the return value is E_NOT_OK.
    10. Initialize the SecOC module.
    11. Call the SecOC_TxConfirmation with an invalid PDU ID.
    12. Call the SecOC_TpTxConfirmation with an invalid PDU ID and with the result equal to E_OK.
    13. Call the SecOC_TpTxConfirmation with an invalid PDU ID and with
        the result equal to E_NOT_OK.
    14. Call the SecOC_Transmit with an invalid PDU ID but valid content data and check that
        the return value is E_NOT_OK.
    15. Call the SecOC_Transmit with an valid PDU ID but with a null pointer for the content data
        and check that the return value is E_NOT_OK.
    16. Call the SecOC_TriggerTransmit with an invalid ID and check that
        the return value is E_NOT_OK.
    17. Call the SecOC_TriggerTransmit with a valid parameters but in a wrong sequence and
        check that the return value is E_NOT_OK.
    18. Call the SecOC_TriggerTransmit with an valid PDU ID but NULL_PTR for PduInfoPtr and
        check that the return value E_NOT_OK.
    19. Call the SecOC_Transmit with an invalid PDU ID length and check if that
        the return value is equal to E_NOT_OK.
    20. Call the SecOC_Transmit with an invalid PDU ID length and check if that
        the return value is equal to E_NOT_OK.
    21. Call the SecOC_Init with an invalid value for the internal buffer size and
        and check that the SecOC_Transmit request is rejected as the init failed.
    22. Call the SecOC_Init with an invalid value for the Pdu buffer size and
        and check that the SecOC_Transmit request is rejected as the init failed.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00127</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1494</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_06_TP_SEGMENTED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>4402</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test checks if the transport protocol based transmission of a PDU works correctly
    if the lower layer segments the PDU into several N-PDUs.
  
Test Object: 
    SecOC_Transmit()
    SecOC_CopyTxData()
    SecOC_TpTxConfirmation()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Prepare the buffer where the Secured PDU will be stored.
    04. Set GetTxFreshness and Csm_MacGenerate stubs.
    05. Call SecOC_Transmit to start the authentication procedure.
    06. Call the main function in order to finish the authentication procedure.
    07. Check that the GetTxFreshness stub was called once.
    08. Check that the Csm_MacGenerate stub was called once.
    09. Check that the job ID is for Csm_MacGenerate.
    10. Check that the provided data and data length are the expected ones.
    11. Check that the output buffer length is the expected one.
    12. Check that the PduR_SecOCTransmit stub was called once.
    13. Check that the SecOC module called the PduR_SecOCTransmit stub with the correct
        PDU ID and content data.
    14. Call SecOC_CopyTxData in a loop to copy chunks of the secured PDU, without retry.
        Check for each chunk if it is processed correctly by the SecOC.
    15. Call the SecOC_TpTxConfirmation with the result equal to E_NOT_OK to simulate
        that the error during transmission was encountered.
    16. Check that the SecOC module does not confirm the transmission of the Secured I-PDU
        by calling the PduR_SecOCTpTxConfirmation stub with E_NOT_OK.
    17. Call the main function once in order to trigger a transition to the idle state.
    18. Prepare the buffer where the Secured PDU will be stored.
    19. Call SecOC_Transmit to start the authentication procedure.
    20. Call the main function in order to finish the authentication procedure.
    21. Check that the GetTxFreshness stub was called once.
    22. Check that the Csm_MacGenerate stub was called once.
    23. Check that the job ID is for Csm_MacGenerate.
    24. Check that the provided data and data length are the expected ones.
    25. Check that the output buffer length is the expected one.
    26. Check that the PduR_SecOCTransmit stub was called once.
    27. Check that the SecOC module called the PduR_SecOCTransmit stub with the correct
        PDU ID and content data.
    28. Call SecOC_CopyTxData in a loop to copy chunks of the secured PDU, without retry.
        Check for each chunk if it is processed correctly by the SecOC.
    29. Call the SecOC_TpTxConfirmation with the result equal to E_NOT_OK to simulate
        that the error during transmission was encountered.
    30. Check that the SecOC module does not confirm the transmission of the Secured I-PDU
        by calling the PduR_SecOCTpTxConfirmation stub.
    31. Call the SecOC_TpTxConfirmation with the result equal to E_OK to simulate
        that the transmission was successful.
    32. Check that the PduR_SecOCTpTxConfirmation stub was called with the expected PDU ID.
    33. Call the main function once in order to trigger a transition to the idle state.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Tx.SWS_SecOC_00074</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1495</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_06_TP_SEGMENTED_WRONGINPUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>4698</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test checks if the transport protocol based transmission of a PDU works safely if
    the lower layer calls the API with wrong input or with wrong sequence.
  
Test Object: 
    SecOC_Transmit()
    SecOC_CopyTxData()
    SecOC_TpTxConfirmation()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Freshness value truncated to 0 bit. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated (length 32 byte). &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. De-initialize the SecOC module and initialize the stubs.
    02. Initialize PDU Payload.
    03. Prepare the buffer where the Secured PDU will be stored.
    04. Call SecOC_CopyTxData with valid buffer information and check
        that the return value is BUFREQ_E_NOT_OK as the module is in uninitialized state.
    05. Initialize the SecOC module.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the PduR_SecOCTransmit stub was called once.
    12. Call the SecOC_CopyTxData with the info parameter set to NULL_PTR and
        check that the return value is BUFREQ_E_NOT_OK.
    13. Call the SecOC_CopyTxData with invalid PDU ID and
        check that the return value is  BUFREQ_E_NOT_OK.
    14. Call the SecOC_CopyTxData with the availableData parameter set to NULL_PTR and
        check that the return value is BUFREQ_E_NOT_OK.
    15. Call the SecOC_CopyTxData with the PduLength parameter set with an exceeding length
        of the secured PDU and check that the return value is BUFREQ_E_BUSY.
    16. Call the SecOC_CopyTxData with correct Pdu Length but with data = NULL_PTR
        and check that the return value is BUFREQ_E_NOT_OK.
    17. Initialize the SecOC module to reset the internal ongoing execution.
    18. Call the SecOC_CopyTxData when no transmission has been requested before and
        check that the return value is BUFREQ_E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Tx.SWS_SecOC_00074</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1496</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_06_TP_SEGMENTED_RETRY</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>4902</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test checks if the transport protocol based transmission of a PDU works correctly if
    the lower layer segments the PDU into several N-PDUs and wants to retry transmission of
    a N-PDU several times.
  
Test Object: 
    SecOC_Transmit()
    SecOC_CopyTxData()
    SecOC_TpTxConfirmation()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;Freshness value truncated to 0 bit. &lt;/listitem&gt;
      &lt;listitem&gt;Authenticator not truncated (length 32 byte). &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Prepare the buffer where the Secured PDU will be stored.
    04. Prepare the retry info for the segmented transfer protocol.
    05. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called once.
    14. Check that transmitted PDU is the expected one.
    15. Call the SecOC_CopyTxData in a loop to copy half of the secured PDU, with
        TpDataState = TP_CONFPENDING.  Check for each chunk if it is processed correctly
        by the SecOC module.
    16. Request a retry of the transmission of the previously transmitted chunk and
        check if the retry request is handled correctly (correct data, length, availableData).
    17. Request a retry of the transmission of an arbitrary data sequence and
        check if the retry request is handled correctly (correct data, length, availableData).
    18. Request a retry of the transmission of more data that has actually been requested before
        and check that the request is rejected by the SecOC module.
    19. Complete the transmission, confirm (no buffering necessary) and check for each chunk
        that it is processed correctly by the SecOC module.
    20. Call the SecOC_TpTxConfirmation with the result equal to E_OK to simulate
        that the transmission was successful.
    21. Check that the PduR_SecOCTpTxConfirmation stub was called with the expected PDU ID.
    22. Call the main function once in order to trigger a transition to the idle state.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Tx.SWS_SecOC_00074</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1497</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_06_TP_PDUR_ERRORS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>5165</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test checks if the transport protocol based transmission of a PDU works correctly
    if the lower layer (PduR) returns errors on the call to PduR_SecOCTransmit.
  
Test Object: 
    SecOC_Transmit()
    SecOC_TpTxConfirmation()
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Call SecOC_Transmit to start the authentication procedure.
    04. Set the PduR_SecOCTransmit stub return value to E_NOT_OK.
    05. Call the main function in order to finish the authentication procedure.
    06. Check that the GetTxFreshness stub was called once.
    07. Check that the Csm_MacGenerate stub was called once.
    08. Check that the job ID is for Csm_MacGenerate.
    09. Check that the PduR_SecOCTransmit stub was called once.
    10. Check that the transmitted PDU is the expected one.
    11. Call the SecOC_TpTxConfirmation to finish the transmission procedure.
    12. Check that the PduR_SecOCTpTxConfirmation stub was called once.
    13. Set the PduR_SecOCTransmit stub return value to E_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Tx.SWS_SecOC_00074</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1498</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_12_TP_TRUNCATED_FREESHNESS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>5295</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
     Tests the behavior of the SecOC module during the transmission of the Authentic I-PDU
     and if the resulted truncated freshness value from the resulted Secured I-PDU is
     the expected one.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    05. Call SecOC_Transmit to start the authentication procedure.
    06. Call the main function in order to finish the authentication procedure.
    07. Check that the GetTxFreshness stub was called once.
    08. Check that the Csm_MacGenerate stub was called once.
    09. Check that the job ID is for Csm_MacGenerate.
    10. Check that the PduR_SecOCTransmit stub was called once.
    11. Call the SecOC_TxConfirmation to simulate that the transmission was successful.
    12. Check that the PduR_SecOCTxConfirmation stub was called with the valid ID and result
    13. Call the main function once in order to trigger a transition to the idle state.
    14. Call SecOC_Transmit to start the authentication procedure.
    15. Call the main function in order to finish the authentication procedure.
    16. Check that the GetTxFreshness stub was called once.
    17. Check that the Csm_MacGenerate stub was called once.
    18. Check that the job ID is for Csm_MacGenerate.
    19. Check that the PduR_SecOCTransmit stub was called once.
    20. Call the SecOC_TxConfirmation to simulate that the transmission was successful.
    21. Check that the PduR_SecOCTxConfirmation stub was called with the valid ID and result.
    22. Call the main function once in order to trigger a transition to the idle state.
    23. Check that the final truncated freshness is expected one.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1499</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_17_IF_TRIGGER_TRANSMIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>5490</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the correct transmission of a secured I-Pdu using
    the triggered transmission.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enable and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength smaller than (8 - (SecOCFreshnessValueTxLength%8))&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set the PduR_SecOCTransmit stub callout function
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    06. Call SecOC_Transmit to start the authentication procedure
    07. Call the main function in order to finish the authentication procedure
    08. Check that the GetTxFreshness stub was called once
    09. Check that the Csm_MacGenerate stub was called once
    10. Check that the job ID is for Csm_MacGenerate
    11. Check that the PduR_SecOCTransmit stub was called once
    12. Initialize PDU Payload
    13. Set GetTxFreshness stub callout function and the freshness value provided by the function
    14. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    15. Call SecOC_Transmit to start the authentication procedure
    16. Call the main function in order to finish the authentication procedure
    17. Check that the GetTxFreshness stub was called once
    18. Check that the Csm_MacGenerate stub was called once
    19. Check that the job ID is for Csm_MacGenerate
    20. Check that the provided data and data length are the expected ones
    21. Check that the output buffer length is the expected one
    22. Call the SecOC_TriggerTransmit with the secured PDU length set for a different PDU
        and check that the return value is E_NOT_OK
    23. Call the SecOC_TriggerTransmit with the secured PDU and check that the return value is E_OK
    24. Check that the expected secured PDU was transmitted
    25. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
    26. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID
    27. Call the SecOC_TriggerTransmit with an invalid length and check the return value is E_NOT_OK
    28. Call the SecOC_TriggerTransmit with the secured PDU and check that the return value is E_OK
    29. Check that the expected secured PDU was transmitted
    30. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
    31. Check that the PduR_SecOCTxConfirmation stub was called with the valid ID and result
    32. Call the main function once in order to trigger a transition to the idle state
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00067</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00068</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1500</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_17_IF_MACGENERATESTATUS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>5818</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the correct transmission of a secured I-Pdu using
    the triggered transmission.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is used enabled and disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength smaller than (8 - (SecOCFreshnessValueTxLength%8))&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    a01. Initialize the SecOC module and the stubs
    a02. Initialize PDU Payload
    a03. Set the PduR_SecOCTransmit stub callout function
    a04. Set GetTxFreshness stub callout function and the freshness value provided by the function
    a05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    b01. Call SecOC_Transmit to start the authentication procedure
    b02. Call the main function in order to process the authentication request
    b03. Check that the GetTxFreshness stub was called once
    b04. Check that the Csm_MacGenerate stub was called once
    b05. Check that the PduR_SecOCTransmit stub was not called
    b06. Check that the MAC generate status was propagated with the expected values
    b07. Set the Csm_MacGenerate stub back to E_OK
    c01. Call SecOC_Transmit to start the authentication procedure
    c02. Call the main function/Csm callback in order to execute the authentication procedure
    c03. Check that the GetTxFreshness stub was called once
    c04. Check that the Csm_MacGenerate stub was called once
    c05. Check that the PduR_SecOCTransmit stub was not called
    c06. Check that the MAC generate status was propagated with the expected values
    d01. Call SecOC_Transmit to start the authentication procedure
    d02. Call the main function/Csm callback in order to execute the authentication procedure
    d03. Check that the GetTxFreshness stub was called once
    d04. Check that the Csm_MacGenerate stub was called once
    d05. Check that the PduR_SecOCTransmit stub was called once
    d06. Check that the MAC generate status was propagated with the expected values
    d07. Call the SecOC_TriggerTransmit with the secured PDU and check that
         the return value is E_OK
    d08. Check that the expected secured PDU was transmitted
    d09. Call the SecOC_TxConfirmation to simulate that the secured PDU
         was received successfully
    d10. Check that the PduR_SecOCTxConfirmation stub was called with the valid ID and result
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1501</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_13_TP_SHAPE_SEC_PDU_LAYOUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>6086</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks if the SecOC module generates correctly the secured PDU with the
    required padding to keep a fixed layout by calling the callout function.
  
Test Object: None.
Test Precondition: 
    SecOCTxShapeFuncName = Ts_SecOC_TxShapeSecPdu
    SecOCTxUseShapeFunc = enable
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    05. Call SecOC_Transmit to start the authentication procedure.
    06. Call the main function in order to execute the authentication procedure.
    07. Check that the layout shaping function was called with the correct ID.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called once.
    14. Check that the provided Secured I-PDU is the expected one.
    15. Call SecOC_TpTxConfirmation to finished the authentication procedure.
    16. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>609</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>611</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00010</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>613</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1502</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_14_TP_GETTXFRESHNESSTRUNCDATA</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>6245</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks if the SecOC module generates correctly the secured PDU with the
    required padding to keep a fixed layout by calling the callout function.
  
Test Object: None.
Test Precondition: 
    SecOCProvideTxTruncatedFreshnessValue = true,
    SecOCQueryFreshnessValue = CFUNC
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetTxFreshnessTruncData stub callout function and the freshness value
        provided by the function.
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    05. Call SecOC_Transmit to start the authentication procedure.
    06. Call the main function in order to execute the authentication procedure.
    07. Check that the layout shaping function was called with the correct ID.
    08. Check that the GetTxFreshnessTruncData stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called once.
    14. Check that the provided Secured I-PDU is the expected one.
    15. Call SecOC_TpTxConfirmation to finish the authentication procedure.
    16. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00084</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>283</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1503</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_08_TP_SIGNATUREGENERATE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>6400</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC during the authentication of an Authentic I-PUD when
    the Csm_SignatureGenerate service is being used.
  
Test Object: 
    Csm_SignatureGenerate
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;The SecOCTxAuthServiceConfigRef is referencing a configured job which has CsmSignatureGenerate as a primitive.&lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
      01. Initialize the SecOC module and the stubs
      02. Initialize PDU Payload
      03. Set GetTxFreshness stub callout function and the freshness value provided by the function
      04. Set Csm_SignatureGenerate stub callout function and the Signature value provided by the function
      05. Call SecOC_Transmit to start the authentication procedure
      06. Call the main function in order to execute the authentication procedure
      07. Check that the GetTxFreshness stub was called once
      08. Check that the Csm_SignatureGenerate stub was called once
      09. Check that the job ID is for Csm_SignatureGenerate
      10. Check that the provided data and data length are the expected ones
      11. Check that the output buffer length is the expected one
      12. Check that the PduR_SecOCTransmit stub was called once
      13. Check that the provided Secured I-PDU is the expected one
      14. Call the SecOC_TpTxConfirmation to simulate that the secured PDU was received successfully
      15. Check that the PduR_SecOCTpTxConfirmation_Stub stub was called with the expected ID
      16. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1504</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_18_IF_SECUREDPDUCOLLECTION_DEFAULTAUTH_FVM_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>6546</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module when SecOC_SendDefaultAuthenticationInformation
    was called to enable the bypass mechanism and FvM returns a negative value and the verification
    fails.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern = 0xA5U&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
      01. Initialize the SecOC module and the stubs
      02. Initialize PDU Payload
      03. Set the PduR_SecOCTransmit stub callout function
      04. Set GetTxFreshnessTruncData stub return value to E_NOT_OK
      05. Call SecOC_SendDefaultAuthenticationInformation to enable the bypass mechanism
      06. Call SecOC_Transmit to start the authentication procedure
      07. Call the main function in order to execute the authentication procedure
      08. Check that the GetTxFreshnessTruncData stub was called once
      09. Check that the Csm_MacGenerate stub was not called
      10. Check that the PduR_SecOCTransmit stub was called twice,
          once for the authentic PDU and once for the cryptographic PDU
      11. Check that the provided authentic PDU length and data are the expected ones
      12. Check that the provided cryptographic PDU length and data are the expected ones
      13. Call the SecOC_TxConfirmation to simulate that
          the authentic PDU was received successfully
      14. Call the SecOC_TxConfirmation to simulate that
          the cryptographic PDU was received successfully
      15. Check that the PduR_SecOCTxConfirmation was called by the SecOC module to confirm
          to the upper layer that the transmission was successful
      16. Call SecOC_SendDefaultAuthenticationInformation again to disable the bypass mechanism
      17. Call SecOC_Transmit to start the authentication procedure
      18. Call the main function in order to execute the authentication procedure
      19. Check that the GetTxFreshnessTruncData stub was called once
      20. Check that the Csm_MacGenerate stub was not called
      21. Check that the PduR_SecOCTransmit stub was not called
      22. Set GetTxFreshnessTruncData stub return value back to E_OK
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1505</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_18_IF_SECUREDPDUCOLLECTION_DEFAULTAUTH_CSM_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>6707</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module when SecOC_SendDefaultAuthenticationInformation
    was called to enable the bypass mechanism and Csm returns a negative value and the verification
    fails.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern = 0xA5U&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set the PduR_SecOCTransmit stub callout function
    04. Set GetTxFreshnessTruncData stub callout function and the freshness value provided by the function
    05. Set Csm_MacGenerate stub callout function and the MAC value provided by the function
    06. Set Csm_MacGenerate stub return value to E_NOT_OK
    07. Call SecOC_SendDefaultAuthenticationInformation to enable the bypass mechanism
    08. Call SecOC_Transmit to start the authentication procedure
    09. Call the main function in order to execute the authentication procedure
    10. Check that the GetTxFreshnessTruncData stub was called once
    11. Check that the Csm_MacGenerate stub was called once
    12. Check that the job ID is for Csm_MacGenerate
    13. Check that the provided data and data length are the expected ones
    14. Check that the output buffer length is the expected one
    15. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU
    16. Check that the provided authentic PDU length and data are the expected ones
    17. Check that the provided cryptographic PDU length and data are the expected ones
    18. Call the SecOC_TxConfirmation to simulate that
        the authentic PDU was received successfully
    19. Call the SecOC_TxConfirmation to simulate that
        the cryptographic PDU was received successfully
    20. Check that the PduR_SecOCTxConfirmation was called by the SecOC module to confirm
        to the upper layer that the transmission was successful
    21. Call SecOC_SendDefaultAuthenticationInformation again to disable the bypass mechanism
    22. Call SecOC_Transmit to start the authentication procedure
    23. Call the main function in order to execute the authentication procedure
    24. Check that the GetTxFreshnessTruncData stub was called once
    25. Check that the GetTxFreshnessTruncData stub was called once
    26. Check that the GetTxFreshnessTruncData stub was not called
    27. Set Csm_MacGenerate stub return value back to E_OK
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1506</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_16_18_IF_TP_SECUREDPDUCOLLECTION_DEFAULTAUTH_FVM_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>6903</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module when SecOC_SendDefaultAuthenticationInformation
    was called to enable the bypass mechanism(enabled for multiple freshness value IDs) and
    FvM returns a negative value and the verification fails.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInformationPattern = 0xA5U&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set the PduR_SecOCTransmit stub callout function
    04. Set GetTxFreshness and GetTxFreshnessTruncData stub return value to E_NOT_OK
    05. Call SecOC_SendDefaultAuthenticationInformation to enable the bypass mechanism
    06. Call SecOC_Transmit to start the authentication procedure
    07. Call the main function in order to finish the authentication procedure
    08. Check that the GetTxFreshnessTruncData stub was called once
    09. Check that the Csm_MacGenerate stub was not called
    10. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU
    11. Check that the provided authentic PDU length and data are the expected ones
    12. Check that the provided cryptographic PDU length and data are the expected ones
    13. Call the SecOC_TxConfirmation to simulate that
        the authentic PDU was received successfully
    14. Call the SecOC_TxConfirmation to simulate that
        the cryptographic PDU was received successfully
    15. Check that the PduR_SecOCTxConfirmation was called by the SecOC module to confirm
        to the upper layer that the transmission was successful
    16. Initialize PDU Payload
    17. Call SecOC_Transmit to start the authentication procedure
    18. Call the main function once in order to execute the authentication procedure
    19. Check that the GetTxFreshness stub was called once
    20. Check that the Csm_MacGenerate stub was not called
    21. Check that the PduR_SecOCTransmit stub was called once
    22. Check that the provided Secured I-PDU is the expected one
    23. Call SecOC_TpTxConfirmation to finish the authentication procedure
    24. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result
    25. Call SecOC_SendDefaultAuthenticationInformation again to disable the bypass mechanism
    26. Call SecOC_Transmit to start the authentication procedure
    27. Call the main function in order to finish the authentication procedure
    28. Check that the GetTxFreshness stub was called once
    29. Check that the Csm_MacGenerate stub was not called
    30. Check that the PduR_SecOCTransmit stub was not called
    31. Set GetTxRefreshness and GetTxFreshnessTruncData stub return value back to E_OK
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1507</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_18_IF_SECUREDPDUCOLLECTION_NOMESSAGELINK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>7124</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the transmission of the authentic PDU and the corresponding
    cryptographic PDU (with no message link) via interface after a successful
    authentication procedure.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
    SecOCMessageLinkLen = 0
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshnessTruncData stub callout function and the freshness value
        provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshnessTruncData stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU.
    14. Check that the provided authentic PDU length and data are the expected ones.
    15. Check that the provided cryptographic PDU length and data are the expected ones.
    16. Call the SecOC_TxConfirmation to simulate that the authentic PDU was received successfully.
    17. Call the SecOC_TxConfirmation to simulate that
        the cryptographic PDU was received successfully.
    18. Check that the PduR_SecOCTxConfirmation was called by the SecOC module to confirm
        to the upper layer that the transmission was successful.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1508</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_19_IF_SECUREDPDUCOLLECTION_WITHMESSAGELINK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>7297</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the transmission of the authentic PDU and the corresponding
    cryptographic PDU (with message link) via interface after a successful
    authentication procedure.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
    SecOCMessageLinkLen = 8
    SecOCMessageLinkPos = 8
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU.
    14. Check that the provided authentic PDU length and data are the expected ones.
    15. Check that the provided cryptographic PDU length and data are the expected ones.
    16. Call the SecOC_TxConfirmation to simulate that the authentic PDU was received successfully.
    17. Call the SecOC_TxConfirmation to simulate that
        the cryptographic PDU was received successfully.
    18. Check that the PduR_SecOCTxConfirmation was called by the SecOC module to confirm
        to the upper layer that the transmission was successful.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1509</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_20_IF_SECUREDPDUCOLLECTION_WITHTRUNCATION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>7473</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the transmission of the authentic PDU and the corresponding
    cryptographic PDU (with message link) via interface after a successful
    authentication procedure.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
    SecOCMessageLinkLen = 15
    SecOCMessageLinkPos = 1
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU.
    14. Check that the provided authentic PDU length and data are the expected ones.
    15. Check that the provided cryptographic PDU length and data are the expected ones.
    16. Call the SecOC_TxConfirmation to simulate that
        the cryptographic PDU was received successfully.
    17. Call the SecOC_TxConfirmation to simulate that the authentic PDU was received successfully.
    18. Check that the PduR_SecOCTxConfirmation was called by the SecOC module to confirm
        to the upper layer that the transmission was successful.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1510</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_21_TP_SECUREDPDUCOLLECTION_NOMESSAGELINK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>7644</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the transmission of the authentic PDU and the
    corresponding cryptographic PDU (with no message link)
    via transport protocol after a successful authentication procedure.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
    SecOCMessageLinkLen = 0
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU.
    14. Check that the provided authentic PDU length and data are the expected ones.
    15. Check that the provided cryptographic PDU length and data are the expected ones.
    16. Call the SecOC_TpTxConfirmation to simulate that the authentic PDU was
        received successfully.
    17. Call the SecOC_TpTxConfirmation to simulate that the cryptographic PDU
        was received successfully.
    18. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
        to confirm to the upper layer that the transmission was successful.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1511</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_22_TP_SECUREDPDUCOLLECTION_WITHMESSAGELINK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>7824</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the transmission of the authentic PDU and the
    corresponding cryptographic PDU (with message link)
    via transport protocol after a successful authentication procedure.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
    SecOCMessageLinkLen = 8
    SecOCMessageLinkPos = 8
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU.
    14. Check that the provided authentic PDU length and data are the expected ones.
    15. Check that the provided cryptographic PDU length and data are the expected ones.
    16. Call SecOC_CopyTxData with valid buffer information and check
        that the return value is BUFREQ_OK.
    17. Check that the provided authentic PDU length and data are the expected ones.
    18. Call SecOC_CopyTxData with valid buffer information and check
        that the return value is BUFREQ_OK.
    19. Check that the provided cryptographic PDU length and data are the expected ones.
    20. Call the SecOC_TpTxConfirmation to simulate that the cryptographic PDU
        was received successfully.
    21. Call the SecOC_TpTxConfirmation to simulate that the authentic PDU was
        received successfully.
    22. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module to confirm
        to the upper layer that the transmission was successful.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1512</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_23_TP_SECUREDPDUCOLLECTION_WITHTRUNCATION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>8065</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the transmission of the authentic PDU and the
    corresponding cryptographic PDU (with message link)
    via transport protocol after a successful authentication procedure.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
    SecOCMessageLinkLen = 15
    SecOCMessageLinkPos = 1
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU.
    14. Check that the provided authentic PDU length and data are the expected ones.
    15. Check that the provided cryptographic PDU length and data are the expected ones.
    16. Call the SecOC_TpTxConfirmation to simulate that the authentic PDU was received successfully.
    17. Call the SecOC_TpTxConfirmation to simulate that
        the cryptographic PDU was received successfully.
    18. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
        to confirm to the upper layer that the transmission was successful.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1513</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_18_IF_SECUREDPDUCOLLECTION_NOMESSAGE_WITH_TRIGGER_TRANSMIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>8246</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the authentication and the correct transmission of the
    authentic PDU and the corresponding cryptographic PDU using triggered transmission
    (with no message link). It checks also if the transport protocol based transmission
    of a PDU works correctly if the lower layer (PduR) returns errors on the call
    to PduR_SecOCTransmit.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshnessTruncData stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Set the PduR_SecOCTransmit stub return value to E_NOT_OK.
    08. Call the main function in order to finish the authentication procedure.
    09. Check that the GetTxFreshnessTruncData stub was called once.
    10. Check that the Csm_MacGenerate stub was called once.
    11. Check that the Csm_MacGenerate stub was called once.
    12. Check that the PduR_SecOCTransmit stub was called only once
        for authentic PDU
    13. Call SecOC_Transmit to start the authentication procedure.
    14. Set the PduR_SecOCTransmit stub return value to E_NOT_OK.
    15. Call the main function in order to finish the authentication procedure.
    16. Check that the GetTxFreshnessTruncData stub was called once.
    17. Check that the Csm_MacGenerate stub was called once.
    18. Check that the job ID is for Csm_MacGenerate.
    19. Check that the PduR_SecOCTransmit stub was called twice.
    20.  Call the SecOC_TriggerTransmit with the authentic PDU and check that
         the return value is E_OK.
    21. Check that the expected authentic PDU was transmitted.
    22. Call the SecOC_TriggerTransmit with the cryptographic PDU and check that
        the return value is E_OK.
    23. Check that the expected cryptographic PDU was transmitted.
    24. Call the SecOC_TxConfirmation to simulate that the authentic PDU was received successfully.
    25. Call the SecOC_TxConfirmation to simulate that the cryptographic PDU was received successfully.
    26. Check that the PduR_SecOCTxConfirmation was called by the SecOC module to confirm
        to the upper layer that the transmission was successful.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Tx.SWS_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>672</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1514</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_21_TP_SECUREDPDUCOLLECTION_CONFIRMATION_AUTH_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>8478</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   This test case checks that the SecOC module does not confirm the transmission
   of the Secured I-PDU if the transmission of authentic PDU was not successful.
 
Test Object: None.
Test Precondition: 
   transmission via Tp,
   SecOCMessageLinkLen = 0
 
Test Execution: 
   01. Initialize the SecOC module and the stubs.
   02. Initialize PDU Payload.
   03. Set the PduR_SecOCTransmit stub callout function.
   04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
   05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
   06. Call SecOC_Transmit to start the authentication procedure.
   07. Call the main function in order to finish the authentication procedure.
   08. Check that the GetTxFreshness stub was called once.
   09. Check that the Csm_MacGenerate stub was called once.
   10. Check that the job ID is for Csm_MacGenerate.
   11. Check that the provided data and data length are the expected ones.
   12. Check that the output buffer length is the expected one.
   13. Check that the PduR_SecOCTransmit stub was called twice,
       once for the authentic PDU and once for the cryptographic PDU.
   14. Check that the provided authentic PDU length and data are the expected ones.
   15. Check that the provided cryptographic PDU length and data are the expected ones.
   16. Call the SecOC_TpTxConfirmation with the result equal to E_NOT_OK to simulate
       that an error during transmission of authentic PDU was encountered.
   17. Call the SecOC_TpTxConfirmation with the result equal to E_OK to simulate
       that the transmission of cryptographic PDU was successful.
   18. Check that the SecOC module does not confirm the transmission of the Secured I-PDU
       by calling the PduR_SecOCTxConfirmation stub.
 
Test Input: None.
Test Output: 
 &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1515</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_21_TP_SECUREDPDUCOLLECTION_CONFIRMATION_CRYPTO_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>8656</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks that the SecOC module does not confirm the transmission
    of the Secured I-PDU if the transmission of cryptographic PDU was not successful
  
Test Object: None.
Test Precondition: 
    transmission via Tp,
    SecOCMessageLinkLen = 0
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU.
    14. Check that the provided authentic PDU length and data are the expected ones.
    15. Check that the provided cryptographic PDU length and data are the expected ones.
    16. Call the SecOC_TpTxConfirmation with the result equal to E_NOT_OK to simulate
        that an error during transmission the of cryptographic PDU was encountered.
    17. Call the SecOC_TpTxConfirmation with the result equal to E_OK to simulate
        that the transmission of authentic PDU was successful.
    18. Check that the SecOC module does not confirm the transmission of the Secured I-PDU
        by calling the PduR_SecOCTxConfirmation stub.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1516</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_21_TP_SECUREDPDUCOLLECTION_CONFIRMATION_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>8834</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks that the SecOC module does not confirm the transmission
    of the Secured I-PDU if the transmission of authentic and cryptographic PDU
    was not successful.
  
Test Object: None.
Test Precondition: 
    transmission via Tp,
    SecOCMessageLinkLen = 0
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU.
    14. Check that the provided authentic PDU length and data are the expected ones.
    15. Check that the provided cryptographic PDU length and data are the expected ones.
    16. Call the SecOC_TpTxConfirmation with the result equal to E_NOT_OK to simulate
        that an error during transmission the of cryptographic PDU was encountered.
    17. Call the SecOC_TpTxConfirmation with the result equal to E_NOT_OK to simulate
        that an error during transmission the of authentic PDU was encountered.
    18. Check that the SecOC module does not confirm the transmission of the Secured I-PDU
        by calling the PduR_SecOCTxConfirmation stub.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1517</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_24_TP_SHAPE_NOMESSAGELINK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>9013</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the behavior of SecOC, when the secured PDU collection(no message link
    used) it's used with the fixed PDU layout enabled.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
    SecOCMessageLinkLen = 0
    SecOCTxShapeFuncName = Ts_SecOC_TxShapeSecPdu
    SecOCTxUseShapeFunc = enable
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload.
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the MAC value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU.
    14. Check that the provided authentic PDU length and data are the expected ones.
    15. Check that the provided cryptographic PDU length and data are the expected ones.
    16. Call the SecOC_TxTpConfirmation to simulate that the authentic PDU was received successfully.
    17. Call the SecOC_TxTpConfirmation to simulate that the cryptographic PDU was received
        successfully.
    18. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
        to confirm to the upper layer that the transmission was successful.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1518</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_25_TP_SHAPE_WITHMESSAGELINK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>9193</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the behavior of SecOC, when the secured PDU collection(message link
    used) it's used with the fixed PDU layout enabled.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
    SecOCMessageLinkLen = 8
    SecOCMessageLinkPos = 8
    SecOCTxShapeFuncName = Ts_SecOC_TxShapeSecPdu
    SecOCTxUseShapeFunc = enable
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU.
    14. Check that the provided authentic PDU length and data are the expected ones.
    15. Check that the provided cryptographic PDU length and data are the expected ones.
    16. Call SecOC_CopyTxData with valid buffer information and check
        that the return value is BUFREQ_OK.
    17. Check that the provided authentic PDU length and data are the expected ones.
    18. Call SecOC_CopyTxData with valid buffer information and check
        that the return value is BUFREQ_OK.
    19. Check that the provided cryptographic PDU length and data are the expected ones.
    20. Call the SecOC_TpTxConfirmation to simulate that the cryptographic PDU
        was received successfully.
    21. Call the SecOC_TpTxConfirmation to simulate that the authentic PDU was
        received successfully.
    22. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module to confirm
        to the upper layer that the transmission was successful.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1519</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_26_TP_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>9435</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct transmission
    of a Secured I-PDU via transport protocol when the PDU is configured to
    use the SecureArea.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 63(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 54(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 28(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 2(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 4(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 7(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 7(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 16(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU.
    14. Check that the provided authentic PDU length and data are the expected ones.
    15. Check that the provided cryptographic PDU length and data are the expected ones.
    16. Call SecOC_CopyTxData with valid buffer information and check
        that the return value is BUFREQ_OK.
    17. Check that the provided authentic PDU length and data are the expected ones.
    18. Call SecOC_CopyTxData with valid buffer information and check
        that the return value is BUFREQ_OK.
    19. Check that the provided cryptographic PDU length and data are the expected ones.
    20. Call the SecOC_TpTxConfirmation to simulate that the cryptographic PDU
        was received successfully.
    21. Call the SecOC_TpTxConfirmation to simulate that the authentic PDU was
        received successfully.
    22. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module to confirm
        to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00034_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00034_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1520</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_27_TP_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>9683</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct transmission
    of a Secured I-PDU via transport protocol when the PDU is configured to
    use the SecureArea.
    Test also checks that the unused area of the cryptographic PDU is filled with value
    provided by configuration parameter SecOCTxPduUnusedAreasDefault.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 116(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 45(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 13(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 18(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 1(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 22(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 22(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 17(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU.
    14. Check that the provided authentic PDU length and data are the expected ones.
    15. Check that the provided cryptographic PDU length and data are the expected ones.
    16. Call SecOC_CopyTxData with valid buffer information and check
        that the return value is BUFREQ_OK.
    17. Check that the provided authentic PDU length and data are the expected ones.
    18. Call SecOC_CopyTxData with valid buffer information and check
        that the return value is BUFREQ_OK.
    19. Check that the provided cryptographic PDU length and data are the expected ones.
    20. Call the SecOC_TpTxConfirmation to simulate that the cryptographic PDU
        was received successfully.
    21. Call the SecOC_TpTxConfirmation to simulate that the authentic PDU was
        received successfully.
    22. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module to confirm
        to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00034_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00034_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1521</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_28_TP_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx/source/application/Tests.c</sourcefile>
      <sourceline>9934</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct transmission
    of a Secured I-PDU via transport protocol when the PDU is configured to
    use the SecureArea.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 100(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 43(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 26(bits)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 18(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 18(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 32(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU.
    14. Check that the provided authentic PDU length and data are the expected ones.
    15. Check that the provided cryptographic PDU length and data are the expected ones.
    16. Call SecOC_CopyTxData with valid buffer information and check
        that the return value is BUFREQ_OK.
    17. Check that the provided authentic PDU length and data are the expected ones.
    18. Call SecOC_CopyTxData with valid buffer information and check
        that the return value is BUFREQ_OK.
    19. Check that the provided cryptographic PDU length and data are the expected ones.
    20. Call the SecOC_TpTxConfirmation to simulate that the cryptographic PDU
        was received successfully.
    21. Call the SecOC_TpTxConfirmation to simulate that the authentic PDU was
        received successfully.
    22. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module to confirm
        to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00034_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00034_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1522</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>196</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test transmission of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTXSecuredPduLayer = SecOCTXSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the authentic PDU test buffer
    03. Test an authentic PDU length that is bigger than the configured  PDU length
    04. Initialize PDU Payload
    05. Set GetTxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    07. Call SecOC_Transmit to start the authentication procedure
    08. Call the main function in order to execute the authentication procedure
    09. Check that the GetTxFreshness stub was not called
    10. Check that the Csm_MacGenerate stub was not called
    11. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1523</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>304</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test transmission of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTXSecuredPduLayer = SecOCTXSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the authentic PDU test buffer
    03. Test an authentic PDU length that is equal to the configured PDU length
    04. Initialize PDU Payload
    05. Set GetTxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    07. Call SecOC_Transmit to start the authentication procedure
    08. Call the main function in order to execute the authentication procedure
    09. Check that the GetTxFreshness stub was called once
    10. Check that the Csm_MacGenerate stub was called once
    11. Check that the job ID is for Csm_MacGenerate
    12. Check that the provided data and data length are the expected ones
    13. Check that the output buffer length is the expected one
    14. Check that the PduR_SecOCTransmit stub was called once
    15. Check that the provided Secured I-PDU is the expected one
    16. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
    17. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID
    18. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1524</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>456</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test transmission of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTXSecuredPduLayer = SecOCTXSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Test an authentic PDU length that is smaller than the configured  PDU length
    03. Initialize the authentic PDU test buffer
    04. Initialize PDU Payload
    05. Set GetTxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    07. Call SecOC_Transmit to start the authentication procedure
    08. Call the main function in order to execute the authentication procedure
    09. Check that the GetTxFreshness stub was called once
    10. Check that the Csm_MacGenerate stub was called once
    11. Check that the job ID is for Csm_MacGenerate
    12. Check that the provided data and data length are the expected ones
    13. Check that the output buffer length is the expected one
    14. Check that the PduR_SecOCTransmit stub was called once
    15. Check that the provided Secured I-PDU is the expected one
    16. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
    17. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID
    18. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1525</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>608</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test transmission of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTXSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the authentic PDU test buffer
    03. Test an authentic PDU length that is equal to the configured PDU length
    04. Initialize PDU Payload
    05. Set the PduR_SecOCTransmit stub callout function
    06. Set GetTxFreshness stub callout function and the freshness value provided by the function
    07. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    08. Call SecOC_Transmit to start the authentication procedure
    09. Call the main function in order to execute the authentication procedure
    10. Check that the GetTxFreshness stub was not called
    11. Check that the Csm_MacGenerate stub was not called
    12. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1526</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>719</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test transmission of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTXSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Test an authentic PDU length that is equal to the configured PDU length
    03. Initialize the authentic PDU test buffer
    04. Initialize PDU Payload
    05. Set the PduR_SecOCTransmit stub callout function
    06. Set GetTxFreshness stub callout function and the freshness value provided by the function
    07. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    08. Call SecOC_Transmit to start the authentication procedure
    09. Call the main function in order to execute the authentication procedure
    10. Check that the GetTxFreshness stub was called once
    11. Check that the Csm_MacGenerate stub was called once
    12. Check that the job ID is for Csm_MacGenerate
    13. Check that the provided data and data length are the expected ones
    14. Check that the output buffer length is the expected one
    15. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU
    16. Check that the provided authentic PDU length and data are the expected ones
    17. Check that the provided cryptographic PDU length and data are the expected ones
    18. Call the SecOC_TxConfirmation to simulate that
        the authentic PDU was received successfully
    19. Call the SecOC_TxConfirmation to simulate that
        the cryptographic PDU was received successfully
    20. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
        to confirm to the upper layer that the transmission was successful
    21. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1527</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_DYNAMIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>908</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test transmission of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTXSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Test an authentic PDU length that is smaller than the configured  PDU length
    03. Initialize the authentic PDU test buffer
    04. Initialize PDU Payload
    05. Set the PduR_SecOCTransmit stub callout function
    06. Set GetTxFreshness stub callout function and the freshness value provided by the function
    07. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    08. Call SecOC_Transmit to start the authentication procedure
    09. Call the main function in order to execute the authentication procedure
    10. Check that the GetTxFreshness stub was called once
    11. Check that the Csm_MacGenerate stub was called once
    12. Check that the job ID is for Csm_MacGenerate
    13. Check that the provided data and data length are the expected ones
    14. Check that the output buffer length is the expected one
    15. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU
    16. Check that the provided authentic PDU length and data are the expected ones
    17. Check that the provided cryptographic PDU length and data are the expected ones
    18. Call the SecOC_TxConfirmation to simulate that
        the authentic PDU was received successfully
    19. Call the SecOC_TxConfirmation to simulate that
        the cryptographic PDU was received successfully
    20. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
        to confirm to the upper layer that the transmission was successful
    21. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1528</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_DYN_RECEIVED_LEN_BIGGER_THAN_CONFIG_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>1097</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the transmission of the authentic PDU and the
    corresponding cryptographic PDU (with message link)
    via transport protocol after a successful authentication procedure.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
    SecOCMessageLinkLen = 8
    SecOCMessageLinkPos = 8
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the authentic PDU test buffer
    03. Test an authentic PDU length that is bigger than the configured  PDU length
    04. Initialize PDU Payload
    05. Set the PduR_SecOCTransmit_Stub stub callout function
    06. Set GetTxFreshness stub callout function and the freshness value provided by the function
    07. Set Csm_MacGenerate stub callout function and the MAC value provided by the function
    08. Call SecOC_Transmit to start the authentication procedure
    09. Call the main function in order to finish the authentication procedure
    10. Check that the GetTxFreshness stub was not called
    11. Check that the Csm_MacGenerate stub was not called
    12. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1529</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_DYN_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>1204</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the transmission of the authentic PDU and the
    corresponding cryptographic PDU (with message link)
    via transport protocol after a successful authentication procedure.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
    SecOCMessageLinkLen = 8
    SecOCMessageLinkPos = 8
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the authentic PDU test buffer
    03. Test an authentic PDU length that is equal to the configured  PDU length
    04. Initialize PDU Payload
    05. Set the PduR_SecOCTransmit_Stub stub callout function
    06. Set GetTxFreshness stub callout function and the freshness value provided by the function
    07. Set Csm_MacGenerate stub callout function and the MAC value provided by the function
    08. Call SecOC_Transmit to start the authentication procedure
    09. Call the main function in order to finish the authentication procedure
    10. Check that the GetTxFreshness stub was called once
    11. Check that the Csm_MacGenerate stub was called once
    12. Check that the job ID is for Csm_MacGenerate
    13. Check that the provided data and data length are the expected ones
    14. Check that the output buffer length is the expected one
    15. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU
    16. Check that the provided authentic PDU length and data are the expected ones
    17. Check that the provided cryptographic PDU length and data are the expected ones
    18. Call the SecOC_TxConfirmation to simulate that
        the authentic PDU was received successfull
    19. Call the SecOC_TxConfirmation to simulate that
        the cryptographic PDU was received successfully
    20. Check that the PduR_SecOCTxConfirmation_Stub was called by the SecOC module
        to confirm to the upper layer that the transmission was successful
    21. Call the SecOC_DeInit to reset the SecOC modul
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1530</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_DYN_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>1384</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the transmission of the authentic PDU and the
    corresponding cryptographic PDU (with message link)
    via transport protocol after a successful authentication procedure.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
    SecOCMessageLinkLen = 8
    SecOCMessageLinkPos = 8
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the authentic PDU test buffer
    03. Test an authentic PDU length that is smaller than the configured  PDU length
    04. Initialize PDU Payload
    05. Set the PduR_SecOCTransmit_Stub stub callout function
    06. Set GetTxFreshness stub callout function and the freshness value provided by the function
    07. Set Csm_MacGenerate stub callout function and the MAC value provided by the function
    08. Call SecOC_Transmit to start the authentication procedure
    09. Call the main function in order to finish the authentication procedure
    10. Check that the GetTxFreshness stub was not called
    11. Check that the Csm_MacGenerate stub was not called
    12. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1531</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>1493</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test transmission of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTXSecuredPduLayer = SecOCTXSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    05. Call SecOC_Transmit to start the authentication procedure
    06. Call the main function in order to execute the authentication procedure
    07. Check that the GetTxFreshness stub was not called
    08. Check that the Csm_MacGenerate stub was not called
    09. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1532</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>1588</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test transmission of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTXSecuredPduLayer = SecOCTXSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    05. Call SecOC_Transmit to start the authentication procedure
    06. Call the main function in order to execute the authentication procedure
    07. Check that the GetTxFreshness stub was called once
    08. Check that the Csm_MacGenerate stub was called once
    09. Check that the job ID is for Csm_MacGenerate
    10. Check that the provided data and data length are the expected ones
    11. Check that the output buffer length is the expected one
    12. Check that the PduR_SecOCTransmit stub was called once
    13. Check that the provided Secured I-PDU is the expected one
    14. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
    15.  Check that the PduR_SecOCTxConfirmation stub was called with the expected ID
    16. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1533</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_02_SECURED_PDU_IF_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>1723</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test transmission of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTXSecuredPduLayer = SecOCTXSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = false&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    05. Call SecOC_Transmit to start the authentication procedure
    06. Call the main function in order to execute the authentication procedure
    07. Check that the GetTxFreshness stub was not called
    08. Check that the Csm_MacGenerate stub was not called
    09. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1534</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>1818</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test transmission of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTXSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set the PduR_SecOCTransmit stub callout function
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    06. Call SecOC_Transmit to start the authentication procedure
    07. Call the main function in order to execute the authentication procedure
    08. Check that the GetTxFreshness stub was not called
    09. Check that the Csm_MacGenerate stub was not called
    10. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1535</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>1920</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test transmission of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTXSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set the PduR_SecOCTransmit stub callout function
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    06. Call SecOC_Transmit to start the authentication procedure
    07. Call the main function in order to execute the authentication procedure
    08. Check that the GetTxFreshness stub was called once
    09. Check that the Csm_MacGenerate stub was called once
    10. Check that the job ID is for Csm_MacGenerate
    11. Check that the provided data and data length are the expected ones
    12. Check that the output buffer length is the expected one
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU
    14. Check that the provided authentic PDU length and data are the expected ones
    15. Check that the provided cryptographic PDU length and data are the expected ones
    16. Call the SecOC_TxConfirmation to simulate that
        the authentic PDU was received successfully
    17. Call the SecOC_TxConfirmation to simulate that
        the cryptographic PDU was received successfully
    18. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
        to confirm to the upper layer that the transmission was successful
    19. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1536</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_18_AUTH_PDU_IF_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>2095</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test transmission of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the Dynamic length is disabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTXSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = disabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set the PduR_SecOCTransmit stub callout function
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    06. Call SecOC_Transmit to start the authentication procedure
    07. Call the main function in order to execute the authentication procedure
    08. Check that the GetTxFreshness stub was not called
    09. Check that the Csm_MacGenerate stub was not called
    10. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1537</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_STATIC_RECEIVED_LEN_BIGGER_THAN_CONFIG_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>2198</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the transmission of the authentic PDU and the corresponding
    cryptographic PDU (with message link) via interface after a successful
    authentication procedure.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
    SecOCMessageLinkLen = 8
    SecOCMessageLinkPos = 8
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set the PduR_SecOCTransmit_Stub stub callout function
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function
    05. Set Csm_MacGenerate stub callout function and the MAC value provided by the function
    06. Call SecOC_Transmit to start the authentication procedure
    07. Call the main function in order to finish the authentication procedure
    08. Check that the GetTxFreshness stub was not called
    09. Check that the Csm_MacGenerate stub was not called
    10. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1538</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_STATIC_RECEIVED_LEN_EQUALS_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>2296</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the transmission of the authentic PDU and the corresponding
    cryptographic PDU (with message link) via interface after a successful
    authentication procedure.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
    SecOCMessageLinkLen = 8
    SecOCMessageLinkPos = 8
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set the PduR_SecOCTransmit_Stub stub callout function
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function
    05. Set Csm_MacGenerate stub callout function and the MAC value provided by the function
    06. Call SecOC_Transmit to start the authentication procedure
    07. Call the main function in order to finish the authentication procedure
    08. Check that the GetTxFreshness stub was called once
    09. Check that the Csm_MacGenerate stub was called once
    10. Check that the job ID is for Csm_MacGenerate
    11. Check that the provided data and data length are the expected ones
    12. Check that the output buffer length is the expected one
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU
    14. Check that the provided authentic PDU length and data are the expected ones
    15. Check that the provided cryptographic PDU length and data are the expected ones
    16. Call the SecOC_TxConfirmation to simulate that
        the authentic PDU was received successfull
    17. Call the SecOC_TxConfirmation to simulate that
        the cryptographic PDU was received successfully
    18. Check that the PduR_SecOCTxConfirmation_Stub was called by the SecOC module
        to confirm to the upper layer that the transmission was successful
    19. Call the SecOC_DeInit to reset the SecOC modul
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1539</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_19_AUTH_PDU_IF_MESSLINK_STATIC_RECEIVED_LEN_SMALLER_THAN_CONFIGURED_LEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>2467</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the transmission of the authentic PDU and the corresponding
    cryptographic PDU (with message link) via interface after a successful
    authentication procedure.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
    SecOCMessageLinkLen = 8
    SecOCMessageLinkPos = 8
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU Payload
    03. Set the PduR_SecOCTransmit_Stub stub callout function
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function
    05. Set Csm_MacGenerate stub callout function and the MAC value provided by the function
    06. Call SecOC_Transmit to start the authentication procedure
    07. Call the main function in order to finish the authentication procedure
    08. Check that the GetTxFreshness stub was not called
    09. Check that the Csm_MacGenerate stub was not called
    10. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1540</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_09_PDU_HDR_IF_EQUAL_LENGTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>2566</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test transmission of the authenticI-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTXSecuredPduLayer = SecOCTXSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the PDU load
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    05. Call SecOC_Transmit to start the authentication procedure
    06. Call the main function in order to execute the authentication procedure
    07. Check that the GetTxFreshness stub was called once
    08. Check that the Csm_MacGenerate stub was called once
    09. Check that the job ID is for Csm_MacGenerate
    10. Check that the provided data and data length are the expected ones
    11. Check that the output buffer length is the expected one
    12. Check that the PduR_SecOCTransmit stub was called once
    13. Check that the provided Secured I-PDU is the expected one
    14. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
    15. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID
    16. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1541</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_09_PDU_HDR_IF_SMALLER_LENGTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>2700</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test transmission of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTXSecuredPduLayer = SecOCTXSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Use an authentic PDU length that contains a PDU header
    03. Initialize the PDU load
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    a06. Call SecOC_Transmit to start the authentication procedure
    a07. Call the main function in order to execute the authentication procedure
    a08. Check that the GetTxFreshness stub was called once
    a09. Check that the Csm_MacGenerate stub was called once
    a10. Check that the job ID is for Csm_MacGenerate
    a11. Check that the provided data and data length are the expected ones
    a12. Check that the output buffer length is the expected one
    a13. Check that the PduR_SecOCTransmit stub was called once
    a14. Check that the provided Secured I-PDU is the expected one
    a15. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
    a16. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID
    b06. Call SecOC_Transmit to start the authentication procedure
    b07. Call the main function in order to execute the authentication procedure
    b08. Check that the GetTxFreshness stub was called once
    b09. Check that the Csm_MacGenerate stub was called once
    ab. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1542</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_21_PDU_COL_HDR_IF_EQUAL_LENGTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>2860</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test transmission of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTXSecuredPduLayer = SecOCTXSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize the PDU load
    03. Set the PduR_SecOCTransmit stub callout function
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    06. Call SecOC_Transmit to start the authentication procedure
    07. Call the main function in order to execute the authentication procedure
    08. Check that the GetTxFreshness stub was called once
    09. Check that the Csm_MacGenerate stub was called once
    10. Check that the job ID is for Csm_MacGenerate
    11. Check that the provided data and data length are the expected ones
    12. Check that the output buffer length is the expected one
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU
    14. Check that the provided authentic PDU length and data are the expected ones
    15. Check that the provided cryptographic PDU length and data are the expected ones
    16. Call the SecOC_TxConfirmation to simulate that
        the authentic PDU was received successfully
    17. Call the SecOC_TxConfirmation to simulate that
        the cryptographic PDU was received successfully
    18. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
        to confirm to the upper layer that the transmission was successful
    19. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1543</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_21_PDU_COL_HDR_IF_SMALLER_LENGTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>3041</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test transmission of the authentic/cryptographic I-PDU via IF
Test Description: 
    This test case checks the behavior of the SecOC module when the secured Header is enabled
  
Test Object: 
    Dynamic length strategy
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTXSecuredPduLayer = SecOCTXSecuredPdu&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthPduHeaderLength = enabled and not equal to 0&lt;/listitem&gt;
      &lt;listitem&gt;DynamicLength = enabled&lt;/listitem&gt;
      &lt;listitem&gt;SecOCPduType = SECOC_IFPDU&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Use an authentic PDU length that contains a PDU header
    03. Initialize the PDU load
    04. Set the PduR_SecOCTransmit_Stub stub callout function
    05. Set GetTxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    a07. Call SecOC_Transmit to start the authentication procedure
    a08. Call the main function in order to execute the authentication procedure
    a09. Check that the GetTxFreshness stub was called once
    a10. Check that the Csm_MacGenerate stub was called once
    a11. Check that the job ID is for Csm_MacGenerate
    a12. Check that the provided data and data length are the expected ones
    a13. Check that the output buffer length is the expected one
    a14. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU
    a15. Check that the provided authentic PDU length and data are the expected ones
    a16. Check that the provided cryptographic PDU length and data are the expected ones
    a17. Call the SecOC_TxConfirmation to simulate that
        the authentic PDU was received successfully
    a18. Call the SecOC_TxConfirmation to simulate that
        the cryptographic PDU was received successfully
    a19. Check that the PduR_SecOCTpTxConfirmation_Stub was called by the SecOC module
        to confirm to the upper layer that the transmission was successful
    b07. Call SecOC_Transmit to start the authentication procedure
    b08. Call the main function in order to finish the authentication procedure
    b09. Check that the GetTxFreshness stub was called once
    b10. Check that the Csm_MacGenerate stub was called once
    ab. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1544</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_22_PDU_COL_MESSLINK_HDR_IF_EQUAL_LENGTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>3241</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the transmission of the authentic PDU and the
    corresponding cryptographic PDU (with message link)
    via transport protocol after a successful authentication procedure.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
    SecOCMessageLinkLen = 8
    SecOCMessageLinkPos = 8
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Test an authentic PDU length that is equal to the configured PDU length
    03. Initialize PDU Payload
    04. Set the PduR_SecOCTransmit stub callout function
    05. Set GetTxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacGenerate stub callout function and the MAC value provided by the function
    07. Call SecOC_Transmit to start the authentication procedure
    08. Call the main function in order to finish the authentication procedure
    09. Check that the GetTxFreshness stub was called once
    10. Check that the Csm_MacGenerate stub was called once
    11. Check that the job ID is for Csm_MacGenerate
    12. Check that the provided data and data length are the expected ones
    13. Check that the output buffer length is the expected one
    14. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU
    15. Check that the provided authentic PDU length and data are the expected ones
    16. Check that the provided cryptographic PDU length and data are the expected ones
    17. Call the SecOC_TxConfirmation to simulate that
        the authentic PDU was received successfully
    18. Call the SecOC_TxConfirmation to simulate that
        the cryptographic PDU was received successfully
    19. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
        to confirm to the upper layer that the transmission was successful
    20. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1545</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_DYNAMICPDULENGTH_22_PDU_COL_MESSLINK_HDR_IF_SMALLER_LENGTH</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_DynamicPDULength/source/application/Tests.c</sourcefile>
      <sourceline>3421</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the transmission of the authentic PDU and the corresponding
    cryptographic PDU (with message link) via interface after a successful
    authentication procedure.
  
Test Object: None.
Test Precondition: 
    SecOCTxSecuredPdu = SecOCTxSecuredPduCollection
    SecOCMessageLinkLen = 8
    SecOCMessageLinkPos = 8
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Use an authentic PDU length that contains a PDU header
    03. Initialize the PDU load
    04. Set the PduR_SecOCTransmit_Stub stub callout function
    05. Set GetTxFreshness stub callout function and the freshness value provided by the function
    06. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
    a07. Call SecOC_Transmit to start the authentication procedure
    a08. Call the main function in order to execute the authentication procedure
    a09. Check that the GetTxFreshness stub was called once
    a10. Check that the Csm_MacGenerate stub was called once
    a11. Check that the job ID is for Csm_MacGenerate
    a12. Check that the provided data and data length are the expected ones
    a13. Check that the output buffer length is the expected one
    a14. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU
    a15. Check that the provided authentic PDU length and data are the expected ones
    a16. Check that the provided cryptographic PDU length and data are the expected ones
    a17. Call the SecOC_TxConfirmation to simulate that
        the authentic PDU was received successfully
    a18. Call the SecOC_TxConfirmation to simulate that
        the cryptographic PDU was received successfully
    a19. Check that the PduR_SecOCTpTxConfirmation_Stub was called by the SecOC module
        to confirm to the upper layer that the transmission was successful
    b07. Call SecOC_Transmit to start the authentication procedure
    b08. Call the main function in order to finish the authentication procedure
    b09. Check that the GetTxFreshness stub was called once
    b10. Check that the Csm_MacGenerate stub was called once
    b11. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
         to confirm to the upper layer that the transmission was successful
    ab. Call the SecOC_DeInit to reset the SecOC module
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1546</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_15_IF_SECUREDIPDU_DYN_LEN_UNUSED_AREA_BYTES</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_UnusedDefaultArea/source/application/Tests.c</sourcefile>
      <sourceline>295</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the correct generation of a Secured PDU for a transmission,
    Test checks that the unused area of the Secured PDU is filled with value
    provided by configuration parameter SecOCTxPduUnusedAreasDefault.
    In this test case all the lengths in bits are multiple of 8 i.e. a whole byte.
  
Test Object: 
    SecOCTxPduUnusedAreasDefault
    SecOC_TxData
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result option is activated in the configuration and set to false. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    03. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.

    04. 1st Scenario:
        Total secured PDU size: 72 Bytes
        Authentic PDU size:     30 Byte
        Freshness value size:   08 Bytes
        Authenticator size:     32 Bytes
        Unused area default:     2 Bytes
        4a. Initialize 1st PDU Payload.
        4b. Call SecOC_Transmit to start the authentication procedure.
        4c. Call the main function in order to proceed with the authentication procedure for the 1st PDU sent
        4d. Check that the GetTxFreshness stub was called once
        4e. Check that the Csm_MacGenerate stub was called once
        4f. Check that the job ID is for Csm_MacGenerate
        4g. Check that the provided data and data length are the expected ones.
        4h. Check that the output buffer length is the expected one
        4i. Check that the PduR_SecOCTransmit stub was called once.
        4j. Check that the provided Secured I-PDU is the expected one with last 2 bytes unused area default pattern.
        4k. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
        4l. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID

    05. 2nd Scenario:
        Total secured PDU size: 72 Bytes
        Authentic PDU size:     30 Byte
        Freshness value size:   08 Bytes
        Authenticator size:     32 Bytes
        Unused area default:    00 Byte
        5a. Initialize 2nd PDU Payload.
        5b. Call SecOC_Transmit to start the authentication procedure.
        5c. Call the main function in order to proceed with the authentication procedure for the 2nd PDU sent
        5d. Check that the GetTxFreshness stub was called once
        5e. Check that the Csm_MacGenerate stub was called once
        5f. Check that the job ID is for Csm_MacGenerate
        5g. Check that the provided data and data length are the expected ones
        5h. Check that the output buffer length is the expected one
        5i. Check that the PduR_SecOCTransmit stub was called once
        5j. Check that the provided Secured I-PDU is the expected one with 0 byte unused area default pattern
        5k. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
        5l. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID

    06. Call the SecOC_TxConfirmation to simulate that the secured PDU was not received successfully
    07. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID and result value
    08. Call the main function once in order to trigger a transition to the idle state
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00269</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1547</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_09_IF_SECUREDIPDU_DYN_LEN_UNUSED_AREA_AUTHINFO_BITS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_UnusedDefaultArea/source/application/Tests.c</sourcefile>
      <sourceline>601</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the correct generation of a Secured PDU for a transmission,
    Test checks that the unused area of the Secured PDU is filled with value
    provided by configuration parameter SecOCTxPduUnusedAreasDefault.
    In this test case AuthInfoTxLength in bits is not a multiple of 8.
  
Test Object: 
    SecOCTxPduUnusedAreasDefault
    SecOC_TxData
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result option is activated in the configuration and set to false. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    03. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.

    04. 1st Scenario:
        Total secured PDU size: 10 Bytes
        Authentic PDU size:      2 Byte
        Freshness value size:    4 Bytes
        Authenticator size:     12 Bits
        Unused area default:    20 Bits
        4a. Initialize 1st PDU Payload.
        4b. Call SecOC_Transmit to start the authentication procedure.
        4c. Call the main function in order to proceed with the authentication procedure for the 1st PDU sent
        4d. Check that the GetTxFreshness stub was called once
        4e. Check that the Csm_MacGenerate stub was called once
        4f. Check that the job ID is for Csm_MacGenerate
        4g. Check that the provided data and data length are the expected ones.
        4h. Check that the output buffer length is the expected one
        4i. Check that the PduR_SecOCTransmit stub was called once.
        4j. Check that the provided Secured I-PDU is the expected one with last 20 bits unused area default pattern.
        4k. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
        4l. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID

    05. 2nd Scenario:
        Total secured PDU size: 10 Bytes
        Authentic PDU size:     04 Byte
        Freshness value size:   04 Bytes
        Authenticator size:     12 Bits
        Unused area default:    04 Bits
        5a. Initialize 2nd PDU Payload.
        5b. Call SecOC_Transmit to start the authentication procedure.
        5c. Call the main function in order to proceed with the authentication procedure for the 2nd PDU sent
        5d. Check that the GetTxFreshness stub was called once
        5e. Check that the Csm_MacGenerate stub was called once
        5f. Check that the job ID is for Csm_MacGenerate
        5g. Check that the provided data and data length are the expected ones
        5h. Check that the output buffer length is the expected one
        5i. Check that the PduR_SecOCTransmit stub was called once
        5j. Check that the provided Secured I-PDU is the expected one with last 04 bits unused area default pattern
        5k. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
        5l. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID

    06. Call the SecOC_TxConfirmation to simulate that the secured PDU was not received successfully
    07. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID and result value
    08. Call the main function once in order to trigger a transition to the idle state
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00269</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00269</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1548</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_15_IF_SECUREDIPDU_STATIC_LEN_UNUSED_AREA_BYTES</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_UnusedDefaultArea/source/application/Tests.c</sourcefile>
      <sourceline>902</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the correct generation of a Secured PDU for a transmission,
    Test checks that the unused area of the Secured PDU is filled with value
    provided by configuration parameter SecOCTxPduUnusedAreasDefault.
    In this test case all the lengths in bits are multiple of 8 i.e. a whole byte.
  
Test Object: 
    SecOCTxPduUnusedAreasDefault
    SecOC_TxData
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result option is activated in the configuration and set to false. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    03. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.

    04. 1st Scenario:
        Total secured PDU size: 72 Bytes
        Authentic PDU size:     30 Byte
        Freshness value size:   08 Bytes
        Authenticator size:     32 Bytes
        Unused area default:     2 Bytes
        4a. Initialize 1st PDU Payload.
        4b. Call SecOC_Transmit to start the authentication procedure.
        4c. Call the main function in order to proceed with the authentication procedure for the 1st PDU sent
        4d. Check that the GetTxFreshness stub was called once
        4e. Check that the Csm_MacGenerate stub was called once
        4f. Check that the job ID is for Csm_MacGenerate
        4g. Check that the provided data and data length are the expected ones.
        4h. Check that the output buffer length is the expected one
        4i. Check that the PduR_SecOCTransmit stub was called once.
        4j. Check that the provided Secured I-PDU is the expected one with last 2 bytes unused area default pattern.
        4k. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
        4l. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID

    05. 2nd Scenario:
        Total secured PDU size: 72 Bytes
        Authentic PDU size:     30 Byte
        Freshness value size:   08 Bytes
        Authenticator size:     32 Bytes
        Unused area default:    00 Byte
        5a. Initialize 2nd PDU Payload.
        5b. Call SecOC_Transmit to start the authentication procedure.
        5c. Call the main function in order to proceed with the authentication procedure for the 2nd PDU sent
        5d. Check that the GetTxFreshness stub was called once
        5e. Check that the Csm_MacGenerate stub was called once
        5f. Check that the job ID is for Csm_MacGenerate
        5g. Check that the provided data and data length are the expected ones
        5h. Check that the output buffer length is the expected one
        5i. Check that the PduR_SecOCTransmit stub was called once
        5j. Check that the provided Secured I-PDU is the expected one with 0 byte unused area default pattern
        5k. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
        5l. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID

    06. Call the SecOC_TxConfirmation to simulate that the secured PDU was not received successfully
    07. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID and result value
    08. Call the main function once in order to trigger a transition to the idle state
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00269</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1549</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_03_IF_SECUREDIPDU_UNUSED_AREA_FRESH_BITS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_UnusedDefaultArea/source/application/Tests.c</sourcefile>
      <sourceline>1207</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the correct generation of a Secured PDU for a transmission,
    Test checks that the unused area of the Secured PDU is filled with value
    provided by configuration parameter SecOCTxPduUnusedAreasDefault.
    In this test case FreshnessValueTxLength in bits is not a multiple of 8.
  
Test Object: 
    SecOCTxPduUnusedAreasDefault
    SecOC_TxData
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result option is activated in the configuration and set to false. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    03. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.

    04. 1st Scenario:
        Total secured PDU size: 31 Bytes
        Authentic PDU size:     10 Byte
        Freshness value size:   17 Bits
        Authenticator size:     16 Bytes
        Unused area default:    23 Bits
        4a. Initialize 1st PDU Payload.
        4b. Call SecOC_Transmit to start the authentication procedure.
        4c. Call the main function in order to proceed with the authentication procedure for the 1st PDU sent
        4d. Check that the GetTxFreshness stub was called once
        4e. Check that the Csm_MacGenerate stub was called once
        4f. Check that the job ID is for Csm_MacGenerate
        4g. Check that the provided data and data length are the expected ones.
        4h. Check that the output buffer length is the expected one
        4i. Check that the PduR_SecOCTransmit stub was called once.
        4j. Check that the provided Secured I-PDU is the expected one with last 23 bits unused area default pattern.
        4k. Call the SecOC_TpTxConfirmation to simulate that the secured PDU was received successfully
        4l. Check that the PduR_SecOCTpTxConfirmation stub was called with the expected ID

    05. 2nd Scenario:
        Total secured PDU size: 31 Bytes
        Authentic PDU size:     12 Byte
        Freshness value size:   17 Bits
        Authenticator size:     16 Bytes
        Unused area default:    07 Bits
        5a. Initialize 2nd PDU Payload.
        5b. Call SecOC_Transmit to start the authentication procedure.
        5c. Call the main function in order to proceed with the authentication procedure for the 2nd PDU sent
        5d. Check that the GetTxFreshness stub was called once
        5e. Check that the Csm_MacGenerate stub was called once
        5f. Check that the job ID is for Csm_MacGenerate
        5g. Check that the provided data and data length are the expected ones
        5h. Check that the output buffer length is the expected one
        5i. Check that the PduR_SecOCTransmit stub was called once
        5j. Check that the provided Secured I-PDU is the expected one with last 07 bits unused area default pattern
        5k. Call the SecOC_TpTxConfirmation to simulate that the secured PDU was received successfully
        5l. Check that the PduR_SecOCTpTxConfirmation stub was called with the expected ID

    06. 3rd Scenario:
        Total secured PDU size: 31 Bytes
        Authentic PDU size:      9 Byte
        Freshness value size:   17 Bits
        Authenticator size:     16 Bytes
        Unused area default:    31 Bits
        6a. Initialize 3rd PDU Payload.
        6b. Call SecOC_Transmit to start the authentication procedure.
        6c. Call the main function in order to proceed with the authentication procedure for the 3rd PDU sent
        6d. Check that the GetTxFreshness stub was called once
        6e. Check that the Csm_MacGenerate stub was called once
        6f. Check that the job ID is for Csm_MacGenerate
        6g. Check that the provided data and data length are the expected ones
        6h. Check that the output buffer length is the expected one
        6i. Check that the PduR_SecOCTransmit stub was called once
        6j. Check that the provided Secured I-PDU is the expected one with last 31 bits unused area default pattern
        6k. Call the SecOC_TpTxConfirmation to simulate that the secured PDU was received successfully
        6l. Check that the PduR_SecOCTpTxConfirmation stub was called with the expected ID

    07. Call the SecOC_TpTxConfirmation to simulate that the secured PDU was not received successfully
    08. Check that the PduR_SecOCTpTxConfirmation stub was called with the expected ID and result value
    09. Call the main function once in order to trigger a transition to the idle state
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00269</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00269</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1550</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_17_IF_SECUREDIPDU_UNUSED_AREA_AUTHINFO_FRESH_BITS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_UnusedDefaultArea/source/application/Tests.c</sourcefile>
      <sourceline>1621</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case checks the correct generation of a Secured PDU for a transmission,
    Test checks that the unused area of the Secured PDU is filled with value
    provided by configuration parameter SecOCTxPduUnusedAreasDefault.
    In this test case both FreshnessValueTxLength and AuthInfoTxLength in bits is not a multiple of 8.
  
Test Object: 
    SecOCTxPduUnusedAreasDefault
    SecOC_TxData
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured  TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on CFUNC. SecOC queries the freshness for
                every PDU to process using the C function defined by the configuration parameter
                SecOCFreshnessValueFuncName. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result option is activated in the configuration and set to false. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous and Asynchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    03. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.

    04. 1st Scenario:
        Total secured PDU size: 03 Bytes
        Authentic PDU size:     01 Byte
        Freshness value size:   02 Bits
        Authenticator size:     05 Bits
        Unused area default:    09 Bits
        4a. Initialize 1st PDU Payload.
        4b. Call SecOC_Transmit to start the authentication procedure.
        4c. Call the main function in order to proceed with the authentication procedure for the 1st PDU sent
        4d. Check that the GetTxFreshness stub was called once
        4e. Check that the Csm_MacGenerate stub was called once
        4f. Check that the job ID is for Csm_MacGenerate
        4g. Check that the provided data and data length are the expected ones.
        4h. Check that the output buffer length is the expected one
        4i. Check that the PduR_SecOCTransmit stub was called once.
        4j. Check that the provided Secured I-PDU is the expected one with last 09 bits unused area default pattern.
        4k. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
        4l. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID

    05. 2nd Scenario:
        Total secured PDU size: 03 Bytes
        Authentic PDU size:     02 Byte
        Freshness value size:   02 Bits
        Authenticator size:     05 Bits
        Unused area default:    01 Bit
        5a. Initialize 2nd PDU Payload.
        5b. Call SecOC_Transmit to start the authentication procedure.
        5c. Call the main function in order to proceed with the authentication procedure for the 2nd PDU sent
        5d. Check that the GetTxFreshness stub was called once
        5e. Check that the Csm_MacGenerate stub was called once
        5f. Check that the job ID is for Csm_MacGenerate
        5g. Check that the provided data and data length are the expected ones
        5h. Check that the output buffer length is the expected one
        5i. Check that the PduR_SecOCTransmit stub was called once
        5j. Check that the provided Secured I-PDU is the expected one with last 01 bit unused area default pattern
        5k. Call the SecOC_TxConfirmation to simulate that the secured PDU was received successfully
        5l. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID

    06. Call the SecOC_TxConfirmation to simulate that the secured PDU was not received successfully
    07. Check that the PduR_SecOCTxConfirmation stub was called with the expected ID and result value
    08. Call the main function once in order to trigger a transition to the idle state
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00269</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00269</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1551</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_27_DYN_LEN_TP_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_UnusedDefaultArea/source/application/Tests.c</sourcefile>
      <sourceline>1938</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct transmission
    of a Secured I-PDU via transport protocol when the PDU is configured to
    use the SecureArea.
    Test also checks that the unused area of the cryptographic PDU is filled with value
    provided by configuration parameter SecOCTxPduUnusedAreasDefault.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 116(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 45(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 13(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 18(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 1(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 22(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 22(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 17(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU.
    14. Check that the provided authentic PDU length and data are the expected ones.
    15. Check that the provided cryptographic PDU length and data are the expected ones.
    16. Call SecOC_CopyTxData with valid buffer information and check
        that the return value is BUFREQ_OK.
    17. Check that the provided authentic PDU length and data are the expected ones.
    18. Call SecOC_CopyTxData with valid buffer information and check
        that the return value is BUFREQ_OK.
    19. Check that the provided cryptographic PDU length and data are the expected ones.
    20. Call the SecOC_TpTxConfirmation to simulate that the cryptographic PDU
        was received successfully.
    21. Call the SecOC_TpTxConfirmation to simulate that the authentic PDU was
        received successfully.
    22. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module to confirm
        to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00034_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00034_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1552</internalId></specobject>
    <specobject>
      <id>TS_SECOC_CNF_TX_UNUSED_DEF_AREA_27_STATIC_LEN_TP_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Conformance/IN/SecOC_Cnf_Tx_UnusedDefaultArea/source/application/Tests.c</sourcefile>
      <sourceline>2194</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct transmission
    of a Secured I-PDU via transport protocol when the PDU is configured to
    use the SecureArea.
    Test also checks that the unused area of the cryptographic PDU is filled with value
    provided by configuration parameter SecOCTxPduUnusedAreasDefault.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 116(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 45(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 13(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 18(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 1(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 22(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 22(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 17(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxSecuredPduLayer = SecOCTxSecuredPduCollection&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was called once.
    09. Check that the Csm_MacGenerate stub was called once.
    10. Check that the job ID is for Csm_MacGenerate.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the output buffer length is the expected one.
    13. Check that the PduR_SecOCTransmit stub was called twice,
        once for the authentic PDU and once for the cryptographic PDU.
    14. Check that the provided authentic PDU length and data are the expected ones.
    15. Check that the provided cryptographic PDU length and data are the expected ones.
    16. Call SecOC_CopyTxData with valid buffer information and check
        that the return value is BUFREQ_OK.
    17. Check that the provided authentic PDU length and data are the expected ones.
    18. Call SecOC_CopyTxData with valid buffer information and check
        that the return value is BUFREQ_OK.
    19. Check that the provided cryptographic PDU length and data are the expected ones.
    20. Call the SecOC_TpTxConfirmation to simulate that the cryptographic PDU
        was received successfully.
    21. Call the SecOC_TpTxConfirmation to simulate that the authentic PDU was
        received successfully.
    22. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module to confirm
        to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00034_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00034_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1553</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SecOC_StyleCheck_Src_Templates</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Generic/IN/SecOC_Gen_StyleChecks/source/application/testspec.h.m4</sourcefile>
      <sourceline>23</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
      Checking the template files
    
Test Description: 
      This test checks the template files in generate/include and generate/src.
      Only rule BSWM_C_003 and C_STYLE_302 are relevant for this test because the
      other rules are tested with the generated files.
    
Test Object: None.
Test Precondition: 
      none
    
Test Execution: 
    
Test Input: None.
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.RxTx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>673</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1554</internalId></specobject>
    <specobject>
      <id>TS_SecOC_StyleCheck_Src</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Generic/IN/SecOC_Gen_StyleChecks/source/application/testspec.h.m4</sourcefile>
      <sourceline>52</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
      Checking the static files
    
Test Description: 
      This test checks the static files in include and src.
      The ruleset cryptostack is used to check all valid rules.
      C_STYLE_CRYPTO_013 is excluded because of an issue
      in the style checker.
    
Test Object: None.
Test Precondition: 
      none
    
Test Execution: 
    
Test Input: None.
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.RxTx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>673</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1555</internalId></specobject>
    <specobject>
      <id>TS_SecOC_StyleCheck_Plugin</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Generic/IN/SecOC_Gen_StyleChecks/source/application/testspec.h.m4</sourcefile>
      <sourceline>83</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
      Checking the plugin files.
    
Test Description: 
      This test checks the static files in includes and src in the plugin directory.
      The ruleset cryptostack is used to check all valid rules.
      C_STYLE_504, C_STYLE_CRYPTO_013 and BSWM_C_003 are excluded.
    
Test Object: None.
Test Precondition: 
      none
    
Test Execution: 
    
Test Input: None.
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.RxTx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>673</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1556</internalId></specobject>
    <specobject>
      <id>TS_SecOC_StyleCheck_Generated</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Generic/IN/SecOC_Gen_StyleChecks/source/application/testspec.h.m4</sourcefile>
      <sourceline>113</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
      Checking the generated files
    
Test Description: 
      This test checks the generated files in include and src.
      The ruleset cryptostack is used to check all valid rules.
      The rules BSWM_C_003 and C_STYLE_302 are excluded because they are already checked in 
      with the template files. 
      prefix are expected and allowed.
    
Test Object: None.
Test Precondition: 
      none
    
Test Execution: 
    
Test Input: None.
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.RxTx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>673</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1557</internalId></specobject>
    <specobject>
      <id>TS_SecOC_StyleCheck_Tests</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Generic/IN/SecOC_Gen_StyleChecks/source/application/testspec.h.m4</sourcefile>
      <sourceline>144</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
      Checking the test files
    
Test Description: 
      This test checks the static files in the test application folders.
      The ruleset cryptostack is used to check all valid rules.
      C_STYLE_CRYPTO_004 is excluded because section comments are not mandatory.
      prefix are expected and allowed.
    
Test Object: None.
Test Precondition: 
      none
    
Test Execution: 
    
Test Input: None.
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.ASR430.RxTx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>673</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1558</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_IMP_ASC43_INTEGRATION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Asc43_Integration/source/application/Tests.c</sourcefile>
      <sourceline>143</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check a normal transmission and a reception process with RTE being turned on
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC is using Autosar 4.0.3 version to interact with the PduR. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured RX and TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Version Info API is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Crypto Bit Length is enabled. The length of the authenticator is passed to the
                cryptographic routines in bits. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Query Freshness Value usage is set on RTE. SecOC queries the freshness for
                every PDU to process using the Rte service port RxFreshnessManagement_ or
                TxFreshnessManagement_. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Ignore Verification Result is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Forced Pass Override is disabled. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
      &lt;listitem&gt;CSM services are enabled and used in Synchronous mode.&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
     a01: Initialize the receiving data and SecOc
     a02: Call SecOC_StartOfReception
     a03: Call SecOC_CopyRxData
     a04: Call SecOC_TpRxIndication
     a05: Call SecOC_MainFunctionRx until PduR_SecOCRxIndication_Stub is called.
     a06: Initialize the sending data
     a07: Call SecOC_Transmit
     a08: Call SecOC_MainFunctionTx until PduR_SecOCTransmit_Stub is called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_91002_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1559</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_IMP_RX_DYNAMICCSMJOBID_IF_09_10_ASYNC_AND_SYNC</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_RxTx_DynamicCsmJobId/source/application/Tests.c</sourcefile>
      <sourceline>145</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test the behavior when SecOCCsmJobRefCallout is enabled
Test Description: 
    This test case checks the behavior of SecOC, if the correct Csm job ID is used
    when the SecOCCsmJobRefCallout is enabled.
  
Test Object: 
    SecOC handling of the Csm job ID set via callout
  
Test Precondition: 
    SecOCCsmJobRefCallout = TS_SecOCCsmJobRefCallout
  
Test Execution: 
    Prepare and init phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize the first PDU Payload.
      a03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
      a04. Set Csm_MacVerify stub callout function to NULL_PTR.
      a05. Set PduR_SecOCRxIndication stub callout function
      a06. Prepare the secured I-PDUs that needs to be authenticated.
      a07. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.

    Successful execution of the verification with synchronous Csm service:
      b01. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
           and the verification procedure can be started.
      b02. Call the main function in order to execute the verification procedure.
      b03. Check that the GetRxFreshness stub was called once.
      b04. Check that the Csm_MacVerify stub was called once.
      b05. Check that the job ID is for Csm_MacVerify synchronous processing.
      b06. Check that the provided data and data length are the expected ones.
      b07. Check that the provided MAC and MAC length are the expected ones.
      b08. Check that the PduR_SecOCRxIndication stub was called once.
      b09. Check that the authenticated I-PDU is the expected one.
      b10. Check that the verification status was propagated with the expected values.

    Successful execution of the verification with asynchronous Csm service:
      c01. Prepare the second PDU Payload.
      c02. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
           and the verification procedure can be started.
      c03. Call the main function in order to start the verification procedure.
      c04. Check that the GetRxFreshness stub was not called as the PDU freshness length
           is configured with the value 0.
      c05. Check that the Csm_MacVerify stub was called once.
      c06. Check that the job ID is for Csm_MacVerify asynchronous processing.
      c07. Check that the provided data and data length are the expected ones.
      c08. Check that the provided MAC and MAC length are the expected ones.
      c09. Call the SecOC_CsmMacVerCallback with the result set to E_OK to indicate that
           the verification was successful.
      c10. Call the main function in order to finish the verification procedure.
      c11. Check that the PduR_SecOCRxIndication stub was called once.
      c12. Check that the authenticated I-PDU is the expected one.
      c13. Check that the verification status was propagated with the expected values.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>655</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>658</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1560</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_DYNAMICCSMJOBID_IF_02_03_ASYNC_AND_SYNC</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_RxTx_DynamicCsmJobId/source/application/Tests.c</sourcefile>
      <sourceline>408</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test the behavior when SecOCCsmJobRefCallout is enabled
Test Description: 
    This test case checks the behavior of SecOC, if the correct Csm job ID is used
    when the SecOCCsmJobRefCallout is enabled.
  
Test Object: 
    SecOC handling of the Csm job ID set via callout
  
Test Precondition: 
    SecOCCsmJobRefCallout = TS_SecOCCsmJobRefCallout
  
Test Execution: 
    Prepare and init phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Prepare the first PDU Payload that will be send.
      a03. Set GetTxFreshness stub callout function and the freshness value provided by the function
           for the first PDU send.
      a04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
           for the first PDU send.
    Successful execution of the authentication with synchronous Csm service:
      b01. Call SecOC_Transmit to start the authentication procedure.
      b02. Call the main function once in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called once.
      b05. Check that the job ID is for Csm_MacGenerate.
      b06. Check that the provided data and data length are the expected ones.
      b07. Check that the output buffer length is the expected one.
      b08. Check that the PduR_SecOCTransmit stub was called once.
      b09. Check that the provided Secured I-PDU is the expected one.
      b10. Call SecOC_TpTxConfirmation to finished the authentication procedure.
      b11. Check that the PduR_SecOCTpTxConfirmation stub was called once.
    Successful execution of the authentication with synchronous Csm service:
      c01. Prepare the second PDU Payload that will be send.
      c02. Set the freshness value provided by the function for the second PDU.
      c03. Set the Mac value provided by the function for the second PDU.
      c04. Call SecOC_Transmit to start the authentication procedure.
      c05. Call the main function in order to start the authentication procedure.
      c06. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
           the authentication was successful.
      c07. Call the main function once in order to finish the authentication procedure.
      c06. Check that the GetTxFreshness stub was called once.
      c07. Check that the Csm_MacGenerate stub was called once.
      c09. Check that the job ID is for Csm_MacGenerate.
      c10. Check that the provided data and data length are the expected ones.
      c11. Check that the output buffer length is the expected one.
      c12. Check that the PduR_SecOCTransmit stub was called once.
      c13. Check that the provided Secured I-PDU is the expected one.
      c14. Call SecOC_TpTxConfirmation to finished the authentication procedure.
      c15. Check that the PduR_SecOCTpTxConfirmation stub was called once.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>655</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>659</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1561</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_IMP_RX_CSMMODE_IF_09_10_ASYNC_AND_SYNC</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Rx_CsmMode/source/application/Tests.c</sourcefile>
      <sourceline>97</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test handling of the Csm processing mode
Test Description: 
    This test case checks if the SecOC module is handling the Csm processing mode (synchronous or
    asynchronous) correctly based on the configuration of every PDU independently and
    it is reporting the verification status accordingly.
  
Test Object: 
    SecOC handling of the Csm processing type
  
Test Precondition: 
    Csm mode both synchronous and asynchronous used
  
Test Execution: 
    Prepare and init phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize the first PDU Payload.
      a03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
      a04. Set Csm_MacVerify stub callout function to NULL_PTR.
      a05. Set PduR_SecOCRxIndication stub callout function
      a06. Prepare the secured I-PDUs that needs to be authenticated.
      a07. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.

    Failed execution of the verification with synchronous Csm service:
      b01. Simulate that the mac verification request is rejected
      b02. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
           and the verification procedure can be started.
      b03. Call the main function in order to execute the verification procedure.
      b04. Check that the GetRxFreshness stub was called once.
      b05. Check that the Csm_MacVerify stub was called once.
      b06. Check that the job ID is for Csm_MacVerify synchronous processing.
      b07. Check that the provided data and data length are the expected ones.
      b08. Check that the provided MAC and MAC length are the expected ones.
      b09. Check that the PduR_SecOCRxIndication stub was not called.
      b10. Check that the verification status was propagated with the expected values.

    Successful execution of the verification with synchronous Csm service:
      c01. Simulate that the mac verification request was accepted
      c02. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
           and the verification procedure can be started.
      c03. Call the main function in order to execute the verification procedure.
      c04. Check that the GetRxFreshness stub was called once.
      c05. Check that the Csm_MacVerify stub was called once.
      c06. Check that the job ID is for Csm_MacVerify synchronous processing.
      c07. Check that the provided data and data length are the expected ones.
      c08. Check that the provided MAC and MAC length are the expected ones.
      c09. Check that the PduR_SecOCRxIndication stub was called once.
      c10. Check that the authenticated I-PDU is the expected one.
      c11. Check that the verification status was propagated with the expected values.

    Failed execution of the verification with asynchronous Csm service:
      d01. Prepare the second PDU Payload.
      d02. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
           and the verification procedure can be started.
      d03. Call the main function in order to start the verification procedure.
      d04. Check that the GetRxFreshness stub was not called as the PDU freshness length
           is configured with the value 0.
      d05. Check that the Csm_MacVerify stub was called once.
      d06. Check that the job ID is for Csm_MacVerify asynchronous processing.
      d07. Check that the provided data and data length are the expected ones.
      d08. Check that the provided MAC and MAC length are the expected ones.
      d09. Call the SecOC_CsmMacVerCallback with the result set to E_NOT_OK to indicate that
           the verification failed.
      d10. Call the main function in order to finish the verification procedure.
      d11. Check that the PduR_SecOCRxIndication stub was not called.
      d12. Check that the verification status was propagated with the expected values.

    Failed execution of the verification with asynchronous Csm service:
      e01. Prepare the second PDU Payload.
      e02. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
           and the verification procedure can be started.
      e03. Call the main function in order to start the verification procedure.
      e04. Check that the GetRxFreshness stub was not called as the PDU freshness length
           is configured with the value 0.
      e05. Check that the Csm_MacVerify stub was called once.
      e06. Check that the job ID is for Csm_MacVerify.
      e07. Check that the provided data and data length are the expected ones.
      e08. Check that the provided MAC and MAC length are the expected ones.
      e09. Call the SecOC_CsmMacVerCallback with the result set to E_OK to indicate that
           the verification was successful.
      e10. Call the main function in order to finish the verification procedure.
      e11. Check that the PduR_SecOCRxIndication stub was called once.
      e12. Check that the authenticated I-PDU is the expected one.
      e13. Check that the verification status was propagated with the expected values.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00079</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00046_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00138_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR21-11.EB.Rx.SWS_SecOC_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>669</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1562</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_IMP_RX_DATAIDLEN32BITS_IF_09_10</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Rx_DataIDLen32bits/source/application/Tests.c</sourcefile>
      <sourceline>112</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test handling the 32 bits Pdu Data ID length.
Test Description: 
    This test case checks if the Rx side of the SecOC module is handling correct the Pdu Data ID
    length, when this is set to 32 bits.
  
Test Object: 
    SecOC handling of the 32 bits Pdu Data ID length
  
Test Precondition: 
    Pdu Data ID length set to 32 bits.
  
Test Execution: 
    a01. Initialize the SecOC module and the stubs.
    a02. Initialize the first PDU Payload.
    a03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    a04. Set Csm_MacVerify stub callout function to NULL_PTR.
    a05. Set PduR_SecOCRxIndication stub callout function
    a06. Prepare the secured I-PDUs that needs to be authenticated.
    a07. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    b01. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
         and the verification procedure can be started.
    b02. Call the main function in order to execute the verification procedure.
    b03. Check that the GetRxFreshness stub was called once.
    b04. Check that the Csm_MacVerify stub was called once.
    b05. Check that the job ID is for Csm_MacVerify.
    b06. Check that the provided data and data length are the expected ones.
    b07. Check that the provided MAC and MAC length are the expected ones.
    b08. Check that the PduR_SecOCRxIndication stub was called once.
    b09. Check that the authenticated I-PDU is the expected one.
    c01. Prepare the second PDU Payload.
    c02. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
         and the verification procedure can be started.
    c03. Call the main function in order to start the verification procedure.
    c04. Check that the GetRxFreshness stub was not called as the PDU freshness length
         is configured with the value 0.
    c05. Check that the Csm_MacVerify stub was called once.
    c06. Check that the job ID is for Csm_MacVerify.
    c07. Check that the provided data and data length are the expected ones.
    c08. Check that the provided MAC and MAC length are the expected ones.
    c09. Call the SecOC_CsmMacVerCallback with the result to E_OK to indicate that
         the verification was successful.
    c10. Call the main function in order to finish the verification procedure.
    c11. Check that the PduR_SecOCRxIndication stub was called once.
    c12. Check that the authenticated I-PDU is the expected one.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00075_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00079</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00046_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00138_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>629</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1563</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_03_TP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Rx_PduLengthType32bits/source/application/Tests.c</sourcefile>
      <sourceline>139</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via TP
Test Description: 
    This test case checks the correct reception and verification of a secured I-Pdu via transport
    protocol when the PduLengthType is configured as uint32.
  
Test Object: 
    SecOC_StartOfReception,
    SecOC_CopyRxData,
    SecOC_TpRxIndication
  
Test Precondition: 
    transmission via Tp,
    verification done by CSM,
    PduLengthType = uint32
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload. Length will be set with wrong length.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    07. Set PduR_SecOCTpCopyRxData stub callout function.
    08. Call the SecOC_StartOfReception with an invalid PDU length and check that the request
        was not accepted by the SecOC module.
    09. Set PDU length with correct value.
    10. Call the SecOC_StartOfReception and check that the request was accepted by the SecOC module.
    11. Call the SecOC_CopyRxData to hand over the secured I-Pdu to the SecOC module and
        check that operation was successfully performed.
    12. Call the SecOC_TpRxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    13. Call the main function several times until the Csm_MacVerify was called three times,
        all the attempts were rejected by Csm stub by returning CRYPTO_E_BUSY.
    14. Check that the upper layer was called with the expected PDU ID and length.
    15. Check that the GetRxFreshness stub was called once.
    16. Check that the Csm_MacVerify stub was called once.
    17. Check that the job ID is for Csm_MacVerify.
    18. Check that the provided data and data length are the expected ones.
    19. Check that the provided MAC and MAC length are the expected ones.
    20. Check that the authenticated I-PDU is the expected one.
    21. Check that the upper layer was called with the expected PDU ID and operation result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00085</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>691</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1564</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_RX_PDULENGTHTYPE32BITS_09_IF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Rx_PduLengthType32bits/source/application/Tests.c</sourcefile>
      <sourceline>357</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test reception and verification of an secured I-Pdu via IF
Test Description: 
    This test case checks the correct reception and verification of a secured I-Pdu via Interface
    when the PduLengthType is configured as uint32
  
Test Object: 
    SecOC_RxIndication
  
Test Precondition: 
    transmission via Interface,
    verification done by CSM,
    SecOCFreshnessCounter not truncated,
    Authenticator truncated
    PduLengthType = uint32
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload. Length will be set with wrong length.
    03. Set GetRxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacVerify stub callout function to NULL_PTR.
    05. Prepare the secured I-PDU that needs to be authenticated.
    06. Prepare the comparison data expected when the Csm_MacVerify is called by the SecOC module.
    07. Set PduR_SecOCRxIndication stub callout function.
    08. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    09. Call the main function in order to start the verification procedure.
    10. Check that the job ID is for Csm_MacVerify.
    11. Check that the provided data and data length are the expected ones.
    12. Check that the provided MAC and MAC length are the expected ones.
    13. Check that the PduR_SecOCRxIndication stub was called once.
    14. Check that the authenticated I-PDU is the expected one.
    15. Set PDU length with correct value.
    16. Call the SecOC_RxIndication to notify the SecOC module that the Secured I-PDU was send
        and the verification procedure can be started.
    17. Call the main function in order to start the verification procedure.
    18. Check that the job ID is for Csm_MacVerify.
    19. Check that the provided data and data length are the expected ones.
    20. Check that the provided MAC and MAC length are the expected ones.
    21. Check that the PduR_SecOCRxIndication stub was called once.
    22. Check that the authenticated I-PDU is the expected one.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.Rx.SWS_SecOC_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00079</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00138_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>691</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1565</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_10_SECUREDPDU_IFPDU_VRFY_RETVAL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Rx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>168</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchronous Pdu processing of a secured I-Pdu via IF in case of
    multiple verification attempts
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    synchronously, i.e. main function does not have to be called, and multiple
    verification attempts are needed as the return value of the Csm service is negative.
  
Test Object: 
    Synchronous Pdu processing with multiple verification attempts
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Rx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCRX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Check whether code is enabled for synchronous pdu processing.
    02. Clear test variables.
    03. Initialize the SecOC module and the stubs.
    04. Initialize Pdu payload and length.
    05. Set freshness value and corresponding length (in bits).
    06. Set Csm_MacVerify_Stub stub callout function.
    07. Set PduR_SecOCRxIndication_Stub stub callout function.
    08. Prepare the secured I-Pdu that needs to be authenticated.
    09. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    10. Set Csm_MacVerify_Stub stub return value such that verification fails.
    11. Call SecOC_RxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    12. Call SecOC_MainFunctionRx function multiple times to process
        verification (including verification retries) if test case is run
        asynchronously.
    13. Check that the freshness stub is not called since freshness value
        length is zero.
    14. Check that the verification stub is called for each configured
        verification attempt with expected job, data, MAC and corresponding
        lengths.
    15. Check that the PduR stub is not called.
    16. Set Csm_MacVerify_Stub stub return value such that verification will be
        successful if Csm is not busy during retries.
    17. Set the number of retries for which Csm is busy such that it exceeds
        the available configured retry attempts.
    18. Call SecOC_RxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    19. Call SecOC_MainFunctionRx function multiple times to process
        verification (including verification retries) if test case is run
        asynchronously.
    20. Check that the freshness stub is not called since freshness value
        length is zero.
    21. Check that the verification stub is called for each configured
        verification attempt with expected job, data, MAC and corresponding
        lengths.
    22. Check that the PduR stub is not called.
    23. Set the number of retries for which Csm is busy such that it does not
        exceed the available configured retry attempts.
    24. Call SecOC_RxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    25. Call SecOC_MainFunctionRx function multiple times to process
        verification (including verification retries) if test case is run
        asynchronously.
    26. Check that the freshness stub is not called since freshness value
        length is zero.
    27. Check that the verification stub is called for each executed
        verification attempt with expected job, data, MAC and corresponding
        lengths.
    28. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    29. Run the SecOC_MainFunctionRx function multiple times to show that it
        has no effect in case of synchronous Pdu processing.
    30. Check that the freshness stub is not called.
    31. Check that the verification stub is not called.
    32. Check that the PduR stub is not called.
    33. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>637</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1566</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_03_SECUREDPDU_TPPDU_VRFY_RETVAL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Rx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>579</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchronous Pdu processing of a secured I-Pdu via TP in case of
    multiple verification attempts
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    synchronously, i.e. main function does not have to be called, and multiple
    verification attempts are needed as the return value of the Csm service is negative.
  
Test Object: 
    Synchronous Pdu processing with multiple verification attempts
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Rx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCRX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu collection payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    06. Set Csm_MacVerify_Stub stub callout function.
    07. Set PduR_SecOCTpCopyRxData_Stub stub callout function and result.
    08. Prepare the secured I-Pdu that needs to be authenticated.
    09. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    10. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    11. Call SecOC_CopyRxData function to hand over the secured I-Pdu to the
        SecOC module and check that the operation is performed successfully.
    12. Set Csm_MacVerify_Stub stub return value such that verification fails.
    13. Call SecOC_TpRxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    14. Call SecOC_MainFunctionRx function multiple times to process
        verification (including verification retries) if test case is run
        asynchronously.
    15. Check that the PduR stub is called once with expected Pdu id and
        corresponding length.
    16. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    17. Check that the verification stub is called for each configured
        verification attempt with expected job, data, MAC and corresponding
        lengths.
    18. Check that the PduR stub is not called.
    19. Check that the PduR stub is called once and result is E_NOT_OK, since
        verification failed.
    20. Set Csm_MacVerify_Stub stub return value such that verification will be
        successful if Csm is not busy during retries.
    21. Set the number of retries for which Csm is busy such that it exceeds
        the available configured retry attempts.
    22. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    23. Call SecOC_CopyRxData function to hand over the secured I-Pdu to the
        SecOC module and check that the operation is performed successfully.
    24. Call SecOC_TpRxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    25. Call SecOC_MainFunctionRx function multiple times to process
        verification (including verification retries) if test case is run
        asynchronously.
    26. Check that the PduR stub is called once with expected Pdu id and
        corresponding length.
    27. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    28. Check that the verification stub is called for each configured
        verification attempt with expected job, data, MAC and corresponding
        lengths.
    29. Check that the PduR stub is not called.
    30. Check that the PduR stub is called once and result is E_NOT_OK, since
        verification failed.
    31. Set the number of retries for which Csm is busy such that it does not
        exceed the available configured retry attempts.
    32. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    33. Call SecOC_CopyRxData function to hand over the secured I-Pdu to the
        SecOC module and check that the operation is performed successfully.
    34. Call SecOC_TpRxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    35. Call SecOC_MainFunctionRx function multiple times to process
        verification (including verification retries) if test case is run
        asynchronously.
    36. Check that the PduR stub is called once with expected Pdu id and
        corresponding length.
    37. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    38. Check that the verification stub is called for each executed
        verification attempt with expected job, data, MAC and corresponding
        lengths.
    39. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    40. Check that the PduR stub is called once with the expected Pdu id and
        operation result.
    41. Run the SecOC_MainFunctionRx function multiple times to show that it
        has no effect in case of synchronous Pdu processing.
    42. Check that the freshness stub is not called.
    43. Check that the verification stub is not called.
    44. Check that the PduR stubs are not called.
    45. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1567</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_10_SECUREDPDU_IFPDU_VRFY_VERRES</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Rx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>1202</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchronous Pdu processing of a secured I-Pdu via IF in case of
    multiple verification attempts
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    synchronously, i.e. main function does not have to be called, and multiple
    verification attempts are needed as the operation result of the Csm service is negative.
  
Test Object: 
    Synchronous Pdu processing with multiple verification attempts
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Rx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCRX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Check whether code is enabled for synchronous pdu processing.
    02. Clear test variables.
    03. Initialize the SecOC module and the stubs.
    04. Initialize Pdu payload and length.
    05. Set freshness value and corresponding length (in bits).
    06. Set Csm_MacVerify_Stub stub callout function.
    07. Set PduR_SecOCRxIndication_Stub stub callout function.
    08. Prepare the secured I-Pdu that needs to be authenticated.
    09. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    10. Set Csm_MacVerify_Stub stub operation result such that verification fails.
    11. Call SecOC_RxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    12. Call SecOC_MainFunctionRx function multiple times to process
        verification (including verification retries) if test case is run
        asynchronously.
    13. Check that the freshness stub is not called since freshness value
        length is zero.
    14. Check that the verification stub is called for each configured
        verification attempt with expected job, data, MAC and corresponding
        lengths.
    15. Check that the PduR stub is not called.
    16. Set Csm_MacVerify_Stub stub operation result such that verification will be successful.
    17. Call SecOC_RxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    18. Call SecOC_MainFunctionRx function multiple times asynchronously.
    19. Check that the freshness stub is not called since freshness value
        length is zero.
    20. Check that the verification stub is called for each executed
        verification attempt with expected job, data, MAC and corresponding
        lengths.
    21. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    22. Run the SecOC_MainFunctionRx function multiple times to show that it
        has no effect in case of synchronous Pdu processing.
    23. Check that the freshness stub is not called.
    24. Check that the verification stub is not called.
    25. Check that the PduR stub is not called.
    26. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>637</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1568</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_03_SECUREDPDU_TPPDU_VRFY_VERRES</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Rx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>1522</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchronous Pdu processing of a secured I-Pdu via TP in case of
    multiple verification attempts
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    synchronously, i.e. main function does not have to be called, and multiple
    verification attempts are needed as the operation result of the Csm service is negative.
  
Test Object: 
    Synchronous Pdu processing with multiple verification attempts
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Rx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCRX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu collection payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    06. Set Csm_MacVerify_Stub stub callout function.
    07. Set PduR_SecOCTpCopyRxData_Stub stub callout function and result.
    08. Prepare the secured I-Pdu that needs to be authenticated.
    09. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    10. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    11. Call SecOC_CopyRxData function to hand over the secured I-Pdu to the
        SecOC module and check that the operation is performed successfully.
    12. Set Csm_MacVerify_Stub stub operation result such that verification fails.
    13. Call SecOC_TpRxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    14. Call SecOC_MainFunctionRx function multiple times to process
        verification (including verification retries) if test case is run
        asynchronously.
    15. Check that the PduR stub is called once with expected Pdu id and
        corresponding length.
    16. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    17. Check that the verification stub is called for each configured
        verification attempt with expected job, data, MAC and corresponding
        lengths.
    18. Check that the PduR stub is not called.
    19. Check that the PduR stub is called once and result is E_NOT_OK, since
        verification failed.
    20. Set Csm_MacVerify_Stub stub operation result such that verification will be successful.
    21. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    22. Call SecOC_CopyRxData function to hand over the secured I-Pdu to the
        SecOC module and check that the operation is performed successfully.
    23. Call SecOC_TpRxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    24. Call SecOC_MainFunctionRx function multiple times.
    25. Check that the PduR stub is called once with expected Pdu id and
        corresponding length.
    26. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    27. Check that the verification stub is called with expected job, data,
        MAC and corresponding lengths.
    28. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    29. Check that the PduR stub is called once with the expected Pdu id and
        operation result.
    30. Run the SecOC_MainFunctionRx function multiple times to show that it
        has no effect in case of synchronous Pdu processing.
    31. Check that the freshness stub is not called.
    32. Check that the verification stub is not called.
    33. Check that the PduR stubs are not called.
    34. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1569</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_13_SECUREDPDU_IFPDU_FRESHNESS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Rx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>1987</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchronous Pdu processing of a secured I-Pdu via IF in case of
    multiple freshness attempts
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    synchronously, i.e. main function does not have to be called, and multiple
    freshness attempts are needed.
  
Test Object: 
    Synchronous Pdu processing with multiple freshness attempts
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Rx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCRX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetRxFreshness_Stub stub callout function.
    06. Set PduR_SecOCRxIndication_Stub stub callout function.
    07. Prepare the secured I-Pdu that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    09. Set the number of retries for which freshness callout returns busy such
        that it exceeds the available configured retry attempts.
    10. Call SecOC_RxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    11. Call SecOC_MainFunctionRx function multiple times to process
        verification (including verification retries) if test case is run
        asynchronously.
    12. Check that the freshness stub is called for each configured
        freshness attempt with expected freshness value id and length (in
        bits).
    13. Check that the verification stub is not called.
    14. Check that the PduR stub is not called.
    15. Set ExtFreshness_GetRxFreshness_Stub stub result such that verification
        will be successful if Csm is not busy during retries.
    16. Set the number of retries for which freshness callout returns busy such
        that it does not exceed the available configured retry attempts.
    17. Set Csm_MacVerify_Stub stub result such that verification will be
        successful if Csm is not busy during retries.
    18. Call SecOC_RxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    19. Call SecOC_MainFunctionRx function multiple times to process
        verification (including verification retries) if test case is run
        asynchronously.
    20. Check that the freshness stub is called for each executed
        freshness attempt with expected freshness value id and length (in
        bits).
    21. Check that the verification stub is called once with expected job,
        data, MAC and corresponding lengths.
    22. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    23. Run the SecOC_MainFunctionRx function multiple times to show that it
        has no effect in case of synchronous Pdu processing.
    24. Check that the freshness stub is not called.
    25. Check that the verification stub is not called.
    26. Check that the PduR stub is not called.
    27. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1570</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_14_SECUREDPDU_TPPDU_FRESHNESS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Rx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>2318</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchronous Pdu processing of a secured I-Pdu via TP in case of
    multiple freshness attempts
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    synchronously, i.e. main function does not have to be called, and multiple
    freshness attempts are needed.
  
Test Object: 
    Synchronous Pdu processing with multiple freshness attempts
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Rx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCRX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    06. Set Csm_MacVerify_Stub stub callout function and result.
    07. Set PduR_SecOCTpCopyRxData_Stub stub callout function and result.
    08. Prepare the secured I-Pdu that needs to be authenticated.
    09. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    10. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    11. Call SecOC_CopyRxData function to hand over the secured I-Pdu to the
        SecOC module and check that the operation is performed successfully.
    12. Set the number of retries for which freshness callout returns busy such
        that it exceeds the available configured retry attempts.
    13. Call SecOC_TpRxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    14. Call SecOC_MainFunctionRx function multiple times to process
        verification (including verification retries) if test case is run
        asynchronously.
    15. Check that the PduR stub is called once with expected Pdu id and
        corresponding length.
    16. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    17. Check that the verification stub is not called.
    18. Check that the PduR stub is not called.
    19. Check that the PduR stub is called once and result is E_NOT_OK, since
        verification failed.
    20. Set the number of retries for which freshness callout returns busy such
        that it does not exceed the available configured retry attempts.
    21. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    22. Call SecOC_CopyRxData function to hand over the secured I-Pdu to the
        SecOC module and check that the operation is performed successfully.
    23. Call SecOC_TpRxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    24. Call SecOC_MainFunctionRx function multiple times to process
        verification (including verification retries) if test case is run
        asynchronously.
    25. Check that the PduR stub is called once with expected Pdu id and
        corresponding length.
    26. Check that the freshness stub is called for each executed freshness
        attempt with the expected freshness value id and length (in bits).
    27. Check that the verification stub is called once with the expected job,
        data, MAC and corresponding lengths.
    28. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    29. Check that the PduR stub is called once with the expected Pdu id and
        operation result.
    30. Run the SecOC_MainFunctionRx function multiple times to show that it
        has no effect in case of synchronous Pdu processing.
    31. Check that the freshness stub is not called.
    32. Check that the verification stub is not called.
    33. Check that the PduR stubs are not called.
    34. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1571</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_17_SECUREDPDU_IFPDU_COLL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Rx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>2750</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchronous Pdu processing of a secured I-Pdu collection via IF
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    collection synchronously, i.e. main function does not have to be called, and
    whether asynchronous processing is still working.
  
Test Object: 
    Synchronous Pdu collection processing
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Rx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCRX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu collection payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    06. Set PduR_SecOCRxIndication_Stub stub callout function and result.
    07. Prepare the secured I-Pdu that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    09. Call the SecOC_RxIndication function to notify the SecOC module that
        the authentic I-Pdu is sent.
    10. Call the SecOC_RxIndication function to notify the SecOC module that
        the secured I-Pdu is sent and the verification procedure can be
        started.
    11. Call SecOC_MainFunctionRx function once to process verification if
        test case is run asynchronously.
    12. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    13. Check that the verification stub is called once with the expected job,
        data, MAC and corresponding lengths.
    14. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    15. Run the SecOC_MainFunctionRx function multiple times to show that it
        has no effect in case of synchronous Pdu processing.
    16. Check that the freshness stub is not called.
    17. Check that the verification stub is not called.
    18. Check that the PduR stub is not called.
    19. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1572</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_19_SECUREDPDU_TPPDU_COLL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Rx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>3012</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchronous Pdu processing of a secured I-Pdu collection via TP
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    collection synchronously, i.e. main function does not have to be called, and
    whether asynchronous processing is still working.
  
Test Object: 
    Synchronous Pdu collection processing
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Rx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCRX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu collection payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    06. Set PduR_SecOCTpCopyRxData_Stub stub callout function and result.
    07. Prepare the secured I-Pdu that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    09. Call the SecOC_StartOfReception function to notify the SecOC module
        that the authentic Pdu arrived and check that the request is accepted
        by the SecOC module.
    10. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    11. Call SecOC_CopyRxData function to hand over the authentic I-Pdu to the
        SecOC module and check that the operation is performed successfully.
    12. Call SecOC_CopyRxData function to hand over the secured I-Pdu to the
        SecOC module and check that the operation is performed successfully.
    13. Call SecOC_TpRxIndication function to notify the SecOC module that the
        authentic I-Pdu is sent.
    14. Call SecOC_TpRxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    15. Call SecOC_MainFunctionRx function once to process verification if
        test case is run asynchronously.
    16. Check that the PduR stub is called once with expected Pdu id and
        corresponding length.
    17. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    18. Check that the verification stub is called once with the expected job,
        data, MAC and corresponding lengths.
    19. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    20. Check that the PduR stub is called once with the expected Pdu id and
        operation result.
    21. Run the SecOC_MainFunctionRx function multiple times to show that it
        has no effect in case of synchronous Pdu processing.
    22. Check that the freshness stub is not called.
    23. Check that the verification stub is not called.
    24. Check that the PduR stubs are not called.
    25. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1573</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_09_SECUREDPDU_IFPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Rx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>3364</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchronous Pdu processing of a secured I-Pdu via IF
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    synchronously, i.e. main function does not have to be called, and whether
    asynchronous processing is still working.
  
Test Object: 
    Synchronous Pdu processing
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Rx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCRX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    06. Set PduR_SecOCRxIndication_Stub stub callout function.
    07. Prepare the secured I-Pdu that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    09. Call the SecOC_RxIndication function to notify the SecOC module that
        the secured I-Pdu is sent and the verification procedure can be started.
    10. Call SecOC_MainFunctionRx function once to process verification if
        test case is run asynchronously.
    11. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    12. Check that the verification stub is called once with the expected job,
        data, MAC and corresponding lengths.
    13. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    14. Run the SecOC_MainFunctionRx function multiple times to show that it
         has no effect in case of synchronous Pdu processing.
    15. Check that the freshness stub is not called.
    16. Check that the verification stub is not called.
    17. Check that the PduR stub is not called.
    18. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1574</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_12_SECUREDPDU_TPPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Rx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>3621</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchronous Pdu processing of a secured I-Pdu via TP
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    synchronously, i.e. main function does not have to be called, and whether
    asynchronous processing is still working.
  
Test Object: 
    Synchronous Pdu processing
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Rx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCRX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    06. Set PduR_SecOCRxIndication_Stub stub callout function.
    07. Prepare the secured I-Pdu that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    09. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    10. Check that the PduR stub is called once with expected Pdu id and
        corresponding length.
    11. Call SecOC_CopyRxData function to hand over the secured I-Pdu to the
        SecOC module and check that the operation is performed successfully.
    12. Call SecOC_TpRxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    13. Call SecOC_MainFunctionRx function once to process verification if
        test case is run asynchronously.
    14. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    15. Check that the verification stub is called once with the expected job,
        data, MAC and corresponding lengths.
    16. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    17. Check that the PduR stub is called once with the expected Pdu id and
        operation result.
    18. Run the SecOC_MainFunctionRx function multiple times to show that it
        has no effect in case of synchronous Pdu processing.
    19. Check that the freshness stub is not called.
    20. Check that the verification stub is not called.
    21. Check that the PduR stub is not called.
    22. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1575</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_09_SECUREDPDU_IFPDU_MAIN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Rx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>3933</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test asynchronous Pdu processing of a secured I-Pdu via IF if configuration
    contains Pdus which are processed synchronously
  
Test Description: 
    This test case checks that the asynchronous processing of a Pdu will still
    be working if synchronous Pdu processing exists in the configuration and
    whether synchronous Pdu processing will be ignored ignored if Csm is run
    asynchronously.
  
Test Object: 
    Asynchronous Pdu processing
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Rx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is asynchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCRX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    06. Set PduR_SecOCRxIndication_Stub stub callout function.
    07. Prepare the secured I-Pdu that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    09. Call the SecOC_RxIndication function to notify the SecOC module that
        the secured I-Pdu is sent and the verification procedure can be
        started.
    10. Check that the freshness stub is not called (since processing is
        asynchronous and SecOC_MainFunctionRx function was not called yet.
    11. Check that the verification stub is not called (since processing is
        asynchronous and SecOC_MainFunctionRx function was not called yet.
    12. Check that the PduR stub is not called (since processing is
        asynchronous and SecOC_MainFunctionRx function was not called yet.
    13. Call SecOC_MainFunctionRx function once to process verification.
    14. Call callback notification and SecOC_MainFunctionRx function in case of
        asynchronous Csm processing.
    15. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    16. Check that the verification stub is called once with the expected job,
        data, MAC and corresponding lengths.
    17. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    18. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>638</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1576</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_RX_SYNCPDUPROCESSING_12_SECUREDPDU_TPPDU_MAIN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Rx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>4213</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test asynchronous Pdu processing of a secured I-Pdu via TP if configuration
    contains Pdus which are processed synchronously
  
Test Description: 
    This test case checks that the asynchronous processing of a Pdu will still
    be working if synchronous Pdu processing exists in the configuration and
    whether synchronous Pdu processing will be ignored ignored if Csm is run
    asynchronously.
  
Test Object: 
    Asynchronous Pdu processing
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Rx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is asynchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCRX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetRxFreshness_Stub callout function and result.
    06. Set PduR_SecOCTpCopyRxData_Stub stub callout function and result.
    07. Prepare the secured I-Pdu that needs to be authenticated.
    08. Prepare the comparison data expected when the Csm_MacVerify is called
        by the SecOC module.
    09. Call the SecOC_StartOfReception function to notify the SecOC module
        that the verification can be started and check that the request is
        accepted by the SecOC module.
    10. Call SecOC_CopyRxData function to hand over the secured I-Pdu to the
        SecOC module and check that the operation is performed successfully.
    11. Call SecOC_TpRxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    12. Check that the freshness stub is not called.
    13. Check that the verification stub is not called.
    14. Check that the PduR stubs are not called.
    15. Call SecOC_MainFunctionRx function once to process verification.
    16. Check that the PduR stub is called once with expected Pdu id and
        corresponding length.
    17. Call callback notification and SecOC_MainFunctionRx function in case of
        asynchronous Csm processing.
    18. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    19. Check that the verification stub is called once with the expected job,
        data, MAC and corresponding lengths.
    20. Check that the PduR stub is called once and the authenticated I-Pdu is
        the expected one.
    21. Check that the PduR stub is called once with the expected Pdu id and
        operation result.
    22. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>638</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Rx.SWS_SecOC_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1577</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_00_IF_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>120</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 52(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 63(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 27(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 4(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 24(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 32(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 32(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 11(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkLen = 9(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkPos = 199(bits)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      b06. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      b07. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
      b08. Call the main function.
      b09. Check that the PduR_SecOCTransmit stub was not called.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      c07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      c08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
      c09. Call the main function.
      c10. Check that the PduR_SecOCTransmit stub was not called.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      d07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      d08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
      d09. Call the main function.
      d10. Check that the PduR_SecOCTransmit stub was not called.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1578</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_01_TP_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>498</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 90(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 46(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 35(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 1(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 11(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 13(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 13(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 16(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkLen = 0(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkPos = 0(bits)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      b06. Call the SecOC_TxTpConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      b07. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      c07. Call the SecOC_TxTpConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      c08. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      d07. Call the SecOC_TxTpConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      d08. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1579</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_02_IF_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>855</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 43(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 53(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 27(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 2(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 19(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 25(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 25(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 9(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkLen = 0(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkPos = 0(bits)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      b06. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      b07. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      c07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      c08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      d07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      d08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1580</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_03_IF_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>1209</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 15(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 37(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 35(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 2(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 18(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 22(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 22(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 7(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkLen = 0(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkPos = 0(bits)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      b06. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      b07. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      c07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      c08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      d07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      d08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1581</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_04_IF_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>1563</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 13(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 47(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 33(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 4(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 6(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 11(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 11(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 6(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkLen = 0(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkPos = 0(bits)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      b06. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      b07. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      c07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      c08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      d07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      d08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1582</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_05_TP_SECUREDPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>1917</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 85(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 15(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 12(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 0(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 0(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 28(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;secured PDU = 41(bytes)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      b06. Call SecOC_TpTxConfirmation to indicate the secured PDU was received successfully.
      b07. Check that the PduR_SecOCTpTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      c07. Call SecOC_TpTxConfirmation to indicate the secured PDU was received successfully.
      c08. Check that the PduR_SecOCTpTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      d07. Call SecOC_TpTxConfirmation to indicate the secured PDU was received successfully.
      d08. Check that the PduR_SecOCTpTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1583</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_06_IF_SECUREDPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>2166</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 104(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 64(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 7(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 8(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 19(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 31(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;secured PDU = 45(bytes)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      b06. Call SecOC_TxConfirmation to indicate the secured PDU was received successfully.
      b07. Check that the PduR_SecOCTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      c07. Call SecOC_TxConfirmation to indicate the secured PDU was received successfully.
      c08. Check that the PduR_SecOCTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      d07. Call SecOC_TxConfirmation to indicate the secured PDU was received successfully.
      d08. Check that the PduR_SecOCTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1584</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_07_IF_SECUREDPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>2412</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 75(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 60(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 10(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 0(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 0(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 7(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;secured PDU = 18(bytes)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      b06. Call SecOC_TxConfirmation to indicate the secured PDU was received successfully.
      b07. Check that the PduR_SecOCTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      c07. Call SecOC_TxConfirmation to indicate the secured PDU was received successfully.
      c08. Check that the PduR_SecOCTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      d07. Call SecOC_TxConfirmation to indicate the secured PDU was received successfully.
      d08. Check that the PduR_SecOCTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1585</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_08_IF_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>2658</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 113(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 57(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 48(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 7(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 2(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 10(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 10(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 24(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkLen = 24(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkPos = 23(bits)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      b06. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      b07. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      c07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      c08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      d07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      d08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1586</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_09_TP_SECUREDPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>3012</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 87(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 53(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 46(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 0(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 0(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 5(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;secured PDU = 22(bytes)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      b06. Call SecOC_TpTxConfirmation to indicate the secured PDU was received successfully.
      b07. Check that the PduR_SecOCTpTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      c07. Call SecOC_TpTxConfirmation to indicate the secured PDU was received successfully.
      c08. Check that the PduR_SecOCTpTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      d07. Call SecOC_TpTxConfirmation to indicate the secured PDU was received successfully.
      d08. Check that the PduR_SecOCTpTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1587</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_10_IF_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>3261</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 92(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 58(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 37(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 6(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 8(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 24(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 24(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 29(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkLen = 96(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkPos = 41(bits)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      b06. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      b07. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      c07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      c08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      d07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      d08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1588</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_11_IF_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>3615</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 90(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 37(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 30(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 0(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 0(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 3(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 3(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 15(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkLen = 0(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkPos = 0(bits)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      b06. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      b07. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      c07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      c08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      d07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      d08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1589</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_12_IF_SECUREDPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>3969</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 88(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 41(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 28(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 1(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 7(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 9(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;secured PDU = 24(bytes)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      b06. Call SecOC_TxConfirmation to indicate the secured PDU was received successfully.
      b07. Check that the PduR_SecOCTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      c07. Call SecOC_TxConfirmation to indicate the secured PDU was received successfully.
      c08. Check that the PduR_SecOCTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      d07. Call SecOC_TxConfirmation to indicate the secured PDU was received successfully.
      d08. Check that the PduR_SecOCTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1590</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_13_TP_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>4215</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 72(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 62(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 44(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 0(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 0(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 2(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 2(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 15(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkLen = 0(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkPos = 0(bits)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      b06. Call the SecOC_TxTpConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      b07. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      c07. Call the SecOC_TxTpConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      c08. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      d07. Call the SecOC_TxTpConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      d08. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1591</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_14_IF_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>4572</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 83(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 53(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 53(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 8(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 3(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 19(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 19(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 17(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkLen = 0(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkPos = 0(bits)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      b06. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      b07. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      c07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      c08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      d07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      d08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1592</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_15_TP_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>4926</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 96(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 44(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 16(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 7(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 6(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 28(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 28(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 14(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkLen = 0(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkPos = 0(bits)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      b06. Call the SecOC_TxTpConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      b07. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      c07. Call the SecOC_TxTpConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      c08. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      d07. Call the SecOC_TxTpConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      d08. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1593</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_16_IF_SECUREDPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>5283</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 70(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 21(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 16(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 5(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 14(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 28(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;secured PDU = 39(bytes)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      b06. Call SecOC_TxConfirmation to indicate the secured PDU was received successfully.
      b07. Check that the PduR_SecOCTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      c07. Call SecOC_TxConfirmation to indicate the secured PDU was received successfully.
      c08. Check that the PduR_SecOCTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      d07. Call SecOC_TxConfirmation to indicate the secured PDU was received successfully.
      d08. Check that the PduR_SecOCTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1594</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_17_IF_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>5529</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 56(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 30(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 7(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 1(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 9(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 11(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 11(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 8(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkLen = 0(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkPos = 0(bits)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      b06. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      b07. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      c07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      c08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      d07. Call the SecOC_TxConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      d08. Check that the PduR_SecOCTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1595</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_18_TP_SECUREDPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>5883</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 101(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 64(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 36(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 1(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 22(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 24(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;secured PDU = 42(bytes)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      b06. Call SecOC_TpTxConfirmation to indicate the secured PDU was received successfully.
      b07. Check that the PduR_SecOCTpTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      c07. Call SecOC_TpTxConfirmation to indicate the secured PDU was received successfully.
      c08. Check that the PduR_SecOCTpTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected secured PDU.
      d07. Call SecOC_TpTxConfirmation to indicate the secured PDU was received successfully.
      d08. Check that the PduR_SecOCTpTxConfirmation stub was called to indicate that
           the authentic PDU was process successfully.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1596</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_BYPASSAUTH_19_TP_SECUREDPDUCOLLECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_BypassAuth/source/application/Tests.c</sourcefile>
      <sourceline>6132</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the bypass mechanism is turned on.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticationInfoValue = 0xA7&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength = 79(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueLength = 64(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCFreshnessValueTxLength = 41(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduLength = 0(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCSecuredTxPduOffset = 0(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authentic PDU = 22(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;authenticated PDU = 22(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;cryptographic PDU = 15(bytes)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkLen = 0(bits)&lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkPos = 0(bits)&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module.
      a02. Initialize the authentic PDU.
      a03. Set the PduR, Csm and Freshness stubs.
    Execute the authentication procedure when the bypass mechanism set to
    disabled by default after init phase:
      b01. Call SecOC_Transmit to hand over the authentic PDU.
      b02. Call the main function in order to execute the authentication procedure.
      b03. Check that the GetTxFreshness stub was called once.
      b04. Check that the Csm_MacGenerate stub was called with the expected data.
      b05. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      b06. Call the SecOC_TxTpConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      b07. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was enabled:
      c01. Call bypass function in order to enable the mechanism
      c02. Call SecOC_Transmit to hand over the authentic PDU.
      c03. Call the main function in order to execute the authentication procedure.
      c04. Check that the GetTxFreshness stub was not called.
      c05. Check that the Csm_MacGenerate stub was not called.
      c06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      c07. Call the SecOC_TxTpConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      c08. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
    Execute the authentication procedure when the bypass mechanism was disabled back:
      d01. Call bypass function in order to enable the mechanism
      d02. Call SecOC_Transmit to hand over the authentic PDU.
      d03. Call the main function in order to execute the authentication procedure.
      d03. Check that the GetTxFreshness stub was called once.
      d04. Check that the Csm_MacGenerate stub was called with the expected data.
      d06. Check that the PduR_SecOCTransmit stub was called with the expected
           authentic PDU and cryptographic PDU.
      d07. Call the SecOC_TxTpConfirmation to simulate that the authentic PDU and
           the cryptographic PDU were received successfully.
      d08. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module
           to confirm to the upper layer that the transmission was successful.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1597</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_IMP_TX_CSMMODE_TP_02_03_ASYNC_AND_SYNC</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_CsmMode/source/application/Tests.c</sourcefile>
      <sourceline>104</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test handling of the Csm processing mode
Test Description: 
    This test case checks if the SecOC module is handling the Csm processing mode (synchronous or
    asynchronous) correctly base on the configuration of every PDU independently when both Csm
    processing modes are used.
  
Test Object: 
    SecOC handling of the Csm processing type
  
Test Precondition: 
    Csm mode both synchronous and asynchronous used
  
Test Execution: 
    a01. Initialize the SecOC module and the stubs.
    a02. Prepare the first PDU Payload that will be send.
    a03. Set GetTxFreshness stub callout function and the freshness value provided by the function
         for the first PDU send.
    a04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
         for the first PDU send.
    b01. Call SecOC_Transmit to start the authentication procedure.
    b02. Call the main function once in order to execute the authentication procedure.
    b03. Check that the GetTxFreshness stub was called once.
    b04. Check that the Csm_MacGenerate stub was called once.
    b05. Check that the job ID is for Csm_MacGenerate.
    b06. Check that the provided data and data length are the expected ones.
    b07. Check that the output buffer length is the expected one.
    b08. Check that the PduR_SecOCTransmit stub was called once.
    b09. Check that the provided Secured I-PDU is the expected one.
    b10. Call SecOC_TpTxConfirmation to finished the authentication procedure.
    b11. Check that the PduR_SecOCTpTxConfirmation stub was called once.
    c01. Prepare the second PDU Payload that will be send.
    c02. Set the freshness value provided by the function for the second PDU.
    c03. Set the Mac value provided by the function for the second PDU.
    c04. Call SecOC_Transmit to start the authentication procedure.
    c05. Call the main function in order to start the authentication procedure.
    c06. Call the SecOC_CsmMacGenCallback with the result to E_OK to indicate that
         the verification was successful.
    c07. Call the main function once in order to finish the authentication procedure.
    c06. Check that the GetTxFreshness stub was called once.
    c07. Check that the Csm_MacGenerate stub was called once.
    c09. Check that the job ID is for Csm_MacGenerate.
    c10. Check that the provided data and data length are the expected ones.
    c11. Check that the output buffer length is the expected one.
    c12. Check that the PduR_SecOCTransmit stub was called once.
    c13. Check that the provided Secured I-PDU is the expected one.
    c14. Call SecOC_TpTxConfirmation to finished the authentication procedure.
    c15. Check that the PduR_SecOCTpTxConfirmation stub was called once.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.SWS_SecOC_EB_RxTx_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>675</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>599</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>601</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1598</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_IMP_TX_DATAIDLEN32BITS_TP_02_03</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_DataIDLen32bits/source/application/Tests.c</sourcefile>
      <sourceline>130</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test handling the 32 bits Pdu Data ID length.
Test Description: 
    This test case checks if the Tx side of the SecOC module is handling correct the Pdu Data ID
    length, when this is set to 32 bits.
  
Test Object: 
    SecOC handling of the 32 bits Pdu Data ID length
  
Test Precondition: 
    Pdu Data ID length set to 32 bits.
  
Test Execution: 
    a01. Initialize the SecOC module and the stubs.
    a02. Prepare the first PDU Payload that will be send.
    a03. Set GetTxFreshness stub callout function and the freshness value provided by the function
         for the first PDU send.
    a04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function
         for the first PDU send.
    b01. Call SecOC_Transmit to start the authentication procedure.
    b02. Call the main function once in order to execute the authentication procedure.
    b03. Check that the GetTxFreshness stub was called once.
    b04. Check that the Csm_MacGenerate stub was called once.
    b05. Check that the job ID is for Csm_MacGenerate.
    b06. Check that the provided data and data length are the expected ones.
    b07. Check that the output buffer length is the expected one.
    b08. Check that the PduR_SecOCTransmit stub was called once.
    b09. Check that the provided Secured I-PDU is the expected one.
    b10. Call SecOC_TpTxConfirmation to finished the authentication procedure.
    b11. Check that the PduR_SecOCTpTxConfirmation stub was called once.
    c01. Prepare the second PDU Payload that will be send.
    c02. Set the freshness value provided by the function for the second PDU.
    c03. Set the Mac value provided by the function for the second PDU.
    c04. Call SecOC_Transmit to start the authentication procedure.
    c05. Call the main function in order to start the authentication procedure.
    c06. Call the SecOC_CsmMacGenCallback with the result to E_OK to indicate that
         the verification was successful.
    c07. Call the main function once in order to finish the authentication procedure.
    c06. Check that the GetTxFreshness stub was called once.
    c07. Check that the Csm_MacGenerate stub was called once.
    c09. Check that the job ID is for Csm_MacGenerate.
    c10. Check that the provided data and data length are the expected ones.
    c11. Check that the output buffer length is the expected one.
    c12. Check that the PduR_SecOCTransmit stub was called once.
    c13. Check that the provided Secured I-PDU is the expected one.
    c14. Call SecOC_TpTxConfirmation to finished the authentication procedure.
    c15. Check that the PduR_SecOCTpTxConfirmation stub was called once.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.ECUC_SecOC_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
        <provcov>
          <linksto>SecOC.ASR430.SWS_SecOC_EB_RxTx_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>675</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>599</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>601</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.RxTx.SWS_SecOC_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>629</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1599</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_IMP_TX_DEFAULTMAC_16_TP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_DefaultMac/source/application/Tests.c</sourcefile>
      <sourceline>95</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the default MAC value is enabled and the MAC could
    not be generated and the request return value is E_NOT_OK or the callback result is E_NOT_OK.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticatorValue enable and the default value set to 0xEB. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    Execute the authentication procedure when the Csm_MacGenerate return value is E_NOT_OK:
      b01. Set Csm_MacGenerate stub return value to E_NOT_OK.
      b02. Call SecOC_Transmit to start the authentication procedure.
      b03. Call the main function in order to finish the authentication procedure.
      b04. Check that the GetTxFreshness stub was called once.
      b05. Check that the Csm_MacGenerate stub was called once.
      b06. Check that the job ID is for Csm_MacGenerate.
      b07. Check that the provided data and data length are the expected ones.
      b08. Check that the output buffer length is the expected one.
      b09. Check that the PduR_SecOCTransmit stub was called once.
      b10. Check that the provided Secured I-PDU is the expected one.
      b11. Call SecOC_TpTxConfirmation to finished the authentication procedure.
      b12. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module to confirm
           to the upper layer that the transmission was successful.
      b13. Check that the callout function where invoked to indicate that the MAC Generate failed.
      b14. Set Csm_MacGenerate stub return value back to E_OK.
    Execute the authentication procedure when the Csm_MacGenerate callback result is E_NOT_OK:
      c01. Call SecOC_Transmit to start the authentication procedure.
      c02. Call the main function in order to start the authentication procedure.
      c03. Call the callback with the result set to E_NOT_OK.
      c04. Call the main function in order to finish the authentication procedure.
      c05. Check that the GetTxFreshness stub was called once.
      c06. Check that the Csm_MacGenerate stub was called once.
      c07. Check that the job ID is for Csm_MacGenerate.
      c08. Check that the provided data and data length are the expected ones.
      c09. Check that the output buffer length is the expected one.
      c10. Check that the PduR_SecOCTransmit stub was called once.
      c11. Check that the provided Secured I-PDU is the expected one.
      c12. Call SecOC_TpTxConfirmation to finished the authentication procedure.
      c13. Check that the PduR_SecOCTpTxConfirmation was called by the SecOC module to confirm
           to the upper layer that the transmission was successful.
      c14. Check that the callout function where invoked to indicate that the MAC Generate failed.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>619</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>620</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1600</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_DEFAULTMAC_19_IF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_DefaultMac/source/application/Tests.c</sourcefile>
      <sourceline>345</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Tests the behavior of the SecOC module when the default MAC value is enabled and the MAC could
    not be generated and the request return value is E_NOT_OK or the callback result is E_NOT_OK.
    Furthermore the secured PDU collection is used in this test sequence.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;Secured PDU collection enabled. &lt;/listitem&gt;
      &lt;listitem&gt;SecOCMessageLinkLen = 8, SecOCMessageLinkPos = 8 &lt;/listitem&gt;
      &lt;listitem&gt;SecOCDefaultAuthenticatorValue enable and the default value set to 0xEB. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Initialization phase:
      a01. Initialize the SecOC module and the stubs.
      a02. Initialize PDU Payload.
      a03. Set the PduR_SecOCTransmit stub callout function.
    Execute the authentication procedure when the Csm_MacGenerate return value is E_NOT_OK:
      b01. Set Csm_MacGenerate stub return value to E_NOT_OK.
      b02. Call SecOC_Transmit to start the authentication procedure.
      b03. Call the main function in order to finish the authentication procedure.
      b04. Check that the GetTxFreshness stub was called once.
      b05. Check that the Csm_MacGenerate stub was called once.
      b06. Check that the job ID is for Csm_MacGenerate.
      b07. Check that the provided data and data length are the expected ones.
      b08. Check that the output buffer length is the expected one.
      b09. Check that the PduR_SecOCTransmit stub was called twice,
           once for the authentic PDU and once for the cryptographic PDU.
      b10. Check that the provided authentic PDU length and data are the expected ones.
      b11. Check that the provided cryptographic PDU length and data are the expected ones.
      b12. Call the SecOC_TxConfirmation to simulate that
           the authentic PDU was received successfully.
      b13. Call the SecOC_TxConfirmation to simulate that
           the cryptographic PDU was received successfully.
      b14. Check that the PduR_SecOCTxConfirmation was called by the SecOC module to confirm
           to the upper layer that the transmission was successful.
      b15. Check that the callout function where invoked to indicate that the MAC Generate failed.
      b16. Set Csm_MacGenerate stub return value back to E_OK.
    Execute the authentication procedure when the Csm_MacGenerate callback result is E_NOT_OK:
      c01. Call SecOC_Transmit to start the authentication procedure.
      c02. Call the main function in order to start the authentication procedure.
      c03. Call the callback with the result set to E_NOT_OK.
      c04. Call the main function in order to finish the authentication procedure.
      c05. Check that the GetTxFreshness stub was called once.
      c06. Check that the Csm_MacGenerate stub was called once.
      c07. Check that the job ID is for Csm_MacGenerate.
      c08. Check that the provided data and data length are the expected ones.
      c09. Check that the output buffer length is the expected one.
      c10. Check that the PduR_SecOCTransmit stub was called twice,
           once for the authentic PDU and once for the cryptographic PDU.
      c11. Check that the provided authentic PDU length and data are the expected ones.
      c12. Check that the provided cryptographic PDU length and data are the expected ones.
      c13. Call the SecOC_TxConfirmation to simulate that
           the authentic PDU was received successfully.
      c14. Call the SecOC_TxConfirmation to simulate that
           the cryptographic PDU was received successfully.
      c15. Check that the PduR_SecOCTxConfirmation was called by the SecOC module to confirm
           to the upper layer that the transmission was successful.
      c16. Check that the callout function where invoked to indicate that the MAC Generate failed .
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>619</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>620</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1601</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_IMP_TX_PDULENGTHTYPE32BITS_01_TP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_PduLengthType32bits/source/application/Tests.c</sourcefile>
      <sourceline>112</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct transmission of a Secured I-PDU via
    transport protocol when the PduLengthType is configured to uint32.
  
Test Object: None.
Test Precondition: 
    PduLengthType = uint32
  
Test Execution: 
    01. Initialize the SecOC module and the stubs
    02. Initialize PDU with valid Payload data but an invalid length value(32bits length)
    03. Set GetTxFreshness and Csm_MacGenerate stubs
    04. Call SecOC_Transmit to start the authentication procedure
    05. Call the main function several time
    06. Check that the GetTxFreshness stub was not called
    07. Check that the Csm_MacGenerate stub were not called
    08. Initialize PDU Payload with correct value
    09. Call SecOC_Transmit to start the authentication procedure
    10. Call the main function in order to finish the authentication procedure
    11. Check that the GetTxFreshness stub was called once
    12. Check that the Csm_MacGenerate stub was called once
    13. Check that the job ID is for Csm_MacGenerate
    14. Check that the provided data and data length are the expected ones
    15. Check that the output buffer length is the expected one
    16. Check that the PduR_SecOCTransmit stub was called once
    17. Check that the provided PDU length is the expected one
    18. Call the SecOC_TpTxConfirmation to simulate that the secured PDU was received successfully
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.ECUC_SecOC_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00034_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00311</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00312</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00313</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>691</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1602</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_PDULENGTHTYPE32BITS_17_IF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_PduLengthType32bits/source/application/Tests.c</sourcefile>
      <sourceline>257</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test the behavior of the SecOC module during the correct transmission of a Secured I-PDU via
    interface (trigger transmit) when the PduLengthType is configured to uint32.
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;PduLengthType = uint32&lt;/listitem&gt;
      &lt;listitem&gt;SecOCAuthInfoTxLength smaller than (8 - (SecOCFreshnessValueTxLength%8))&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU with valid Payload data but an invalid length value(32bits length).
    03. Set the PduR_SecOCTransmit stub callout function.
    04. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    05. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    06. Call SecOC_Transmit to start the authentication procedure.
    07. Call the main function in order to finish the authentication procedure.
    08. Check that the GetTxFreshness stub was not called.
    09. Check that the Csm_MacGenerate stub was not called.
    10. Initialize PDU Payload with correct value.
    11. Call SecOC_Transmit to start the authentication procedure.
    12. Call the main function in order to finish the authentication procedure.
    13. Check that the GetTxFreshness stub was called once.
    14. Check that the Csm_MacGenerate stub was called once.
    15. Check that the job ID is for Csm_MacGenerate.
    16. Check that the PduR_SecOCTransmit stub was called once.
    17. Call the SecOC_TriggerTransmit with the secured PDU and check that
        the return value is E_OK.
    18. Check that the expected secured PDU was transmitted.
    19. Call the SecOC_TxConfirmation to simulate that the secured PDU
        was received successfully.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00067</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00068</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>691</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1603</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_09_ASYNC_SECUREDPDU_IFPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>178</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test asynchrnonous Pdu processing of an authentic I-Pdu via IF if
    configuration contains Pdus which are processed synchronously
  
Test Description: 
    This test case checks that the asynchronous processing of a Pdu will still
    be working if synchronous Pdu processing exists in the configuration and
    whether synchronous Pdu processing will be ignored if Csm is run
    asynchronously.
  
Test Object: 
    Asynchronous Pdu processing
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Tx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is asynchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCTX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu payload and length.
    04. Call the SecOC_Transmit function and check whether the request is
        accepted by the SecOC module.
    05. Check that the freshness stub is not called (since processing is
        asynchronous and SecOC_MainFunctionTx function was not called yet.
    06. Check that the Mac generation stub is not called (since processing is
        asynchronous and SecOC_MainFunctionTx function was not called yet.
    07. Check that the PduR stub is not called (since processing is
        asynchronous and SecOC_MainFunctionTx function was not called yet.
    08. Call SecOC_MainFunctionTx function once to process authenticationication.
    09. Call callback notification and SecOC_MainFunctionTx function in case of
        asynchronous Csm processing.
    10. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    11. Check that the Mac generation stub is called once with the expected
        job, data and corresponding lengths.
    12. Check that the PduR stub is called once and the secured I-Pdu is the
        expected one.
    13. Call SecOC_TxConfirmation function.
    14. Check that the PduR confirmation stub is called once and the Pdu id is
        the expected one.
    15. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>627</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>628</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1604</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_12_ASYNC_SECUREDPDU_TPPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>372</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test asynchrnonous Pdu processing of an authentic I-Pdu via TP if
    configuration contains Pdus which are processed synchronously
  
Test Description: 
    This test case checks that the asynchronous processing of a Pdu will still
    be working if synchronous Pdu processing exists in the configuration and
    whether synchronous Pdu processing will be ignored if Csm is run
    asynchronously.
  
Test Object: 
    Asynchronous Pdu processing
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Tx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is asynchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCTX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetTxFreshness_Stub callout function and result.
    06. Set Csm_MacGenerate_Stub stub callout function and result.
    07. Call the SecOC_Transmit function and check whether the request is
        accepted by the SecOC module.
    08. Check that the freshness stub is not called (since processing is
        asynchronous and SecOC_MainFunctionTx function was not called yet.
    09. Check that the Mac generation stub is not called (since processing is
        asynchronous and SecOC_MainFunctionTx function was not called yet.
    10. Check that the PduR stub is not called (since processing is
        asynchronous and SecOC_MainFunctionTx function was not called yet.
    11. Call SecOC_MainFunctionTx function once to process authentication.
    12. Call callback notification and SecOC_MainFunctionTx function in case of
        asynchronous Csm processing.
    13. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    14. Check that the Mac generation stub is called once with the expected
        job, data and corresponding lengths.
    15. Check that PduR transmission stub is called once with expected Pdu id
        and data.
    16. Call SecOC_TpTxConfirmation function.
    17. Check that the PduR confirmation stub is called once and the Pdu id is
        the expected one.
    18. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>627</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>628</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1605</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_09_SECUREDPDU_IFPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>600</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchrnonous Pdu processing of an authentic I-Pdu via IF
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    synchronously, i.e. main function does not have to be called, and whether
    asynchronous processing is still working.
  
Test Object: 
    Synchronous Pdu processing
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Tx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCTX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu payload and length.
    04. Call the SecOC_Transmit function and check whether the request is
        accepted by the SecOC module.
    05. Call SecOC_MainFunctionTx function once to process authentication.
    06. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    07. Check that the Mac generation stub is called once with the expected
        job, data and corresponding lengths.
    08. Check that the PduR stub is called once and the secured I-Pdu is the
        expected one.
    09. Run the SecOC_MainFunctionTx function multiple times to show that it
        has no effect in case of synchronous Pdu processing.
    10. Check that the freshness stub is not called.
    11. Check that the Mac generation stub is not called.
    12. Check that the PduR transmission stub is not called.
    13. Call SecOC_TxConfirmation function.
    14. Check that the PduR confirmation stub is called once and the Pdu id is
        the expected one.
    15. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>628</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1606</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_12_SECUREDPDU_TPPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>758</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchrnonous Pdu processing of an authentic I-Pdu via TP
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    synchronously, i.e. main function does not have to be called, and whether
    asynchronous processing is still working.
  
Test Object: 
    Synchronous Pdu processing
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Tx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCTX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetTxFreshness_Stub callout function and result.
    06. Set Csm_MacGenerate_Stub stub callout function and result.
    07. Call the SecOC_Transmit function and check whether the request is
        accepted by the SecOC module.
    08. Call SecOC_MainFunctionTx function once to process authentication if
        test case is run asynchronously.
    09. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    10. Check that the Mac generation stub is called once with the expected
        job, data and corresponding lengths.
    11. Check that PduR transmission stub is called once with expected Pdu id
        and data.
    12. Call SecOC_TpTxConfirmation function.
    13. Check that the PduR confirmation stub is called once and the Pdu id is
        the expected one.
    14. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>628</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1607</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_18_SECUREDPDU_IFPDU_COLL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>948</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchrnonous Pdu processing of an authentic I-Pdu collection via IF
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    collection synchronously, i.e. main function does not have to be called, and
    whether asynchronous processing is still working.
  
Test Object: 
    Synchronous Pdu collection processing
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Tx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCTX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu collection payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetTxFreshnessTruncData_Stub stub callout function.
    06. Set Csm_MacGenerate_Stub stub callout function and result.
    07. Set PduR_SecOCTransmit_Stub stub callout function.
    08. Call the SecOC_Transmit function and check whether the request is
        accepted by the SecOC module.
    09. Call SecOC_MainFunctionTx function once to process authentication if
        test case is run asynchronously.
    10. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    11. Check that the Mac generation stub is called once with the expected
        job, data and corresponding lengths.
    12. Check that the PduR stub is called twice and the I-Pdu collection is
        the expected one.
    13. Call SecOC_TxConfirmation function.
    14. Check that the PduR confirmation stub is called once and the Pdu id is
        the expected one.
    15. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>628</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1608</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_22_SECUREDPDU_TPPDU_COLL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>1188</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchrnonous Pdu processing of an authentic I-Pdu collection via TP
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    collection synchronously, i.e. main function does not have to be called, and
    whether asynchronous processing is still working.
  
Test Object: 
    Synchronous Pdu collection processing
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Tx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCTX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu collection payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetTxFreshness_Stub callout function.
    06. Set Csm_MacGenerate_Stub stub callout function and result.
    07. Set PduR_SecOCTransmit_Stub stub callout function.
    08. Call the SecOC_Transmit function and check whether the request is
        accepted by the SecOC module.
    09. Call SecOC_MainFunctionTx function once to process authentication if
        test case is run asynchronously.
    10. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    11. Check that the Mac generation stub is called once with the expected
        job, data and corresponding lengths.
    12. Check that PduR transmission stub is called once with expected Pdu id
        and data.
    13. Call SecOC_CopyTxData function for authentic Pdu and check that the
        request is accepted by the SecOC module.
    14. Check the length and data of the authentic N-Pdu.
    15. Call SecOC_CopyTxData function for secured Pdu and check that the
        request is accepted by the SecOC module.
    16. Check the length and data of the secured N-Pdu.
    17. Call the SecOC_TpTxConfirmation function.
    18. Check that the PduR confirmation stub is called once and the Pdu id is
        the expected one.
    19. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>628</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1609</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_17_SECUREDPDU_IFPDU_FRESHNESS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>1495</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchrnonous Pdu processing of an authentic I-Pdu via IF in case of
    multiple freshness attempts
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    synchronously, i.e. main function does not have to be called, and multiple
    freshness attempts are needed.
  
Test Object: 
    Synchronous Pdu processing with multiple freshness attempts
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Tx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCTX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetTxFreshness_Stub callout function.
    06. Set Csm_MacGenerate_Stub stub callout function and result.
    07. Set PduR_SecOCTransmit_Stub stub callout function.
    08. Set the number of retries for which freshness callout returns busy such
        that it exceeds the available configured retry attempts.
    09. Call the SecOC_Transmit function and check whether the request is
        accepted by the SecOC module.
    10. Call SecOC_MainFunctionTx function multiple times to process
        authentication (including authentication retries) if test case is run
        asynchronously.
    11. Check that the freshness stub is called for each configured
        freshness attempt with expected freshness value id and length (in
        bits).
    12. Check that the Mac generation stub is not called.
    13. Check that the PduR stub is not called.
    14. Set the number of retries for which freshness callout returns busy such
        that it does not exceed the available configured retry attempts.
    15. Call the SecOC_Transmit function and check whether the request is
        accepted by the SecOC module.
    16. Call SecOC_MainFunctionTx function multiple times to process
        authentication (including authentication retries) if test case is run
        asynchronously.
    17. Check that the freshness stub is called for each executed
        freshness attempt with expected freshness value id and length (in
        bits).
    18. Check that the Mac generation stub is called once with the expected
        job, data and corresponding lengths.
    19. Check that PduR transmission stub is called once with expected Pdu id
        and data.
    20. Call SecOC_TriggerTransmit function and check whether the request is
        accepted by the SecOC module.
    21. Check whether expected data is used for the triggered transmission.
    22. Call SecOC_TxConfirmation function.
    23. Check that the PduR confirmation stub is called once and the Pdu id is
        the expected one.
    24. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>628</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1610</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_13_SECUREDPDU_TPPDU_FRESHNESS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>1792</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchrnonous Pdu processing of an authentic I-Pdu via TP in case of
    multiple freshness attempts
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    synchronously, i.e. main function does not have to be called, and multiple
    freshness attempts are needed.
  
Test Object: 
    Synchronous Pdu processing with multiple freshness attempts
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Tx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCTX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetTxFreshness_Stub callout function.
    06. Set Csm_MacGenerate_Stub stub callout function and result.
    07. Set the number of retries for which freshness callout returns busy
        such that it exceeds the available configured retry attempts.
    08. Call the SecOC_Transmit function and check whether the request is
        accepted by the SecOC module.
    09. Call SecOC_MainFunctionTx function multiple times to process
        authentication (including authentication retries) if test case is run
        asynchronously.
    10. Check that the freshness stub is called for each configured
        freshness attempt with expected freshness value id and length (in
        bits).
    11. Check that the Mac generation stub is not called.
    12. Check that the PduR stub is not called.
    13. Set the number of retries for which freshness callout returns busy such
        that it does not exceed the available configured retry attempts.
    14. Call the SecOC_Transmit function and check whether the request is
        accepted by the SecOC module.
    15. Call SecOC_MainFunctionTx function multiple times to process
        authentication (including authentication retries) if test case is run
        asynchronously.
    16. Check that the freshness stub is called for each executed
        freshness attempt with expected freshness value id and length (in
        bits).
    17. Check that the Mac generation stub is called once with the expected
        job, data and corresponding lengths.
    18. Check that PduR transmission stub is called once with expected Pdu id
        and data.
    19. Call SecOC_TpTxConfirmation function.
    20. Check that the PduR confirmation stub is called once and the Pdu id is
        the expected one.
    21. Call SecOC_MainFunctionTx function multiple times to call shaping
        function and make sure other stubs are not called.
    22. Check Pdu id of shaping.
    23. Check that the freshness stub is not called.
    24. Check that the Mac generation stub ist not called.
    25. Check that the PduR stub ist not called.
    26. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>628</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1611</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_17_SECUREDPDU_IFPDU_MACGEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>2115</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchrnonous Pdu processing of an authentic I-Pdu via IF in case of
    multiple Mac generation attempts
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    synchronously, i.e. main function does not have to be called, and multiple
    authentication attempts are needed.
  
Test Object: 
    Synchronous Pdu processing with multiple authentication attempts
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Tx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCTX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Check whether code is enabled for synchronous pdu processing.
    02. Clear test variables.
    03. Initialize the SecOC module and the stubs.
    04. Initialize Pdu payload and length.
    05. Set freshness value and corresponding length (in bits).
    06. Set ExtFreshness_GetTxFreshness_Stub callout function.
    07. Set Csm_MacGenerate_Stub stub callout function.
    08. Set PduR_SecOCTransmit_Stub stub callout function.
    09. Set Csm_MacGenerate_Stub stub result such that authentication fails.
    10. Call the SecOC_Transmit function and check whether the request is
        accepted by the SecOC module.
    11. Call SecOC_MainFunctionTx function multiple times to process
        authentication (including authentication retries) if test case is run
        asynchronously.
    12. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    13. Check that the Mac generation stub is called for each configured
        Mac generation attempt with expected job, data and corresponding
        lengths.
    14. Check that the PduR stub is not called.
    15. Set TS_Csm_MacGenerate_Stub stub result such that Mac generation will
        be successful if Csm is not busy during retries.
    16. Set the number of retries for which Csm is busy such that it does not
        exceed the available configured retry attempts.
    17. Call the SecOC_Transmit function and check whether the request is
        accepted by the SecOC module.
    18. Call SecOC_MainFunctionTx function multiple times to process
        authentication (including authentication retries) if test case is run
        asynchronously.
    19. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    20. Check that the Mac generation stub is called for each executed
        Mac generation attempt with expected job, data and corresponding
        lengths.
    21. Check that PduR transmission stub is called once with expected Pdu id
        and data.
    22. Call SecOC_TriggerTransmit function and check whether the request is
        accepted by the SecOC module.
    23. Check whether expected data is used for the triggered transmission.
    24. Call SecOC_TxConfirmation function.
    25. Check that the PduR confirmation stub is called once and the Pdu id is
        the expected one.
    26. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>628</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1612</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_13_SECUREDPDU_TPPDU_MACGEN</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>2424</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test synchrnonous Pdu processing of an authentic I-Pdu via TP in case of
    multiple authentication attempts
  
Test Description: 
    This test case checks the behavior of the SecOC module processing a Pdu
    synchronously, i.e. main function does not have to be called, and multiple
    Mac generation attempts are needed.
  
Test Object: 
    Synchronous Pdu processing with multiple authentication attempts
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;At least one Tx Pdu is configured&lt;/listitem&gt;
      &lt;listitem&gt;Csm job is synchronous&lt;/listitem&gt;
      &lt;listitem&gt;
        SecOCTX_SYNCPDUPROCESSING is true (depending on yml parameter)
      &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Clear test variables.
    02. Initialize the SecOC module and the stubs.
    03. Initialize Pdu payload and length.
    04. Set freshness value and corresponding length (in bits).
    05. Set ExtFreshness_GetTxFreshness_Stub callout function.
    06. Set Csm_MacGenerate_Stub stub callout function.
    07. Set Csm_MacGenerate_Stub stub result such that authentication fails.
    08. Call the SecOC_Transmit function and check whether the request is
        accepted by the SecOC module.
    09. Call SecOC_MainFunctionTx function multiple times to process
        authentication (including authentication retries) if test case is run
        asynchronously.
    10. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    11. Check that the Mac generation stub is called for each configured
        Mac generation attempt with expected job, data and corresponding
        lengths.
    12. Check that the PduR stub is not called.
    13. Set TS_Csm_MacGenerate_Stub stub result such that Mac generation will
        be successful if Csm is not busy during retries.
    14. Set the number of retries for which Csm is busy such that it exceeds
        the available configured retry attempts.
    15. Call the SecOC_Transmit function and check whether the request is
        accepted by the SecOC module.
    16. Call SecOC_MainFunctionTx function multiple times to process
        authentication (including authentication retries) if test case is run
        asynchronously.
    17. Check that the freshness stub is called for each executed
        freshness attempt with expected freshness value id and length (in
        bits).
    18. Check that the Mac generation stub is called for each configured
        Mac generation attempt with expected job, data and corresponding
        lengths.
    19. Check that PduR transmission stub is called once with expected Pdu id
        and data.
    20. Set the number of retries for which Csm is busy such that it does not
        exceed the available configured retry attempts.
    21. Call the SecOC_Transmit function and check whether the request is
        accepted by the SecOC module.
    22. Call SecOC_MainFunctionTx function multiple times to process
        authentication (including authentication retries) if test case is run
        asynchronously.
    23. Check that the freshness stub is called once with the expected
        freshness value id and length (in bits).
    24. Check that the Mac generation stub is called for each executed
        Mac generation attempt with expected job, data and corresponding
        lengths.
    25. Check that PduR transmission stub is called once with expected Pdu id
        and data.
    26. Call SecOC_TpTxConfirmation function.
    27. Check that the PduR confirmation stub is called once and the Pdu id is
        the expected one.
    28. Call SecOC_MainFunctionTx function multiple times to call shaping
        function and make sure other stubs are not called.
    29. Check Pdu id of shaping.
    30. Check that the freshness stub is not called.
    31. Check that the Mac generation stub ist not called.
    32. Check that the PduR stub ist not called.
    33. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00002</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>628</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1613</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_SYNCPDUPROCESSING_02_CONFIRMATION_TIMEOUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Tx_SyncPduProcessing/source/application/Tests.c</sourcefile>
      <sourceline>2801</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test checks if the SecOC module will trigger a transition to Tx Idle state
    when the Secured PDU was sent to the lower layer and the confirmation was not received from
    lower layer and the configured timeout period was exceeded (when synchronous processing
    within the PduR API is being used).
  
Test Object: None.
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOCTX_SYNCPDUPROCESSING = true&lt;/listitem&gt;
      &lt;listitem&gt;SecOCTxConfirmationTimeout &gt; 0&lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize PDU Payload.
    03. Set GetTxFreshness stub callout function and the freshness value provided by the function.
    04. Set Csm_MacGenerate stub callout function and the Mac value provided by the function.
    05. Call SecOC_Transmit to start the authentication procedure.
    06. Check that the GetTxFreshness stub was called once.
    07. Check that the Csm_MacGenerate stub was called once.
    08. Check that the job ID is for Csm_MacGenerate.
    09. Check that the provided data and data length are the expected ones.
    10. Check that the output buffer length is the expected one.
    11. Check that the PduR_SecOCTransmit stub was called once.
    12. Check that the provided Secured I-PDU is the expected one.
    13. Call the main function several times to trigger the timeout.
    14. Check that the PduR_SecOCTpTxConfirmation stub was not called.
    15. Set GetTxFreshness stub freshness value provided by the function.
    16. Call SecOC_Transmit to start the authentication procedure for the same PDU ID with new payload.
    17. Check that the GetTxFreshness stub was called once.
    18. Check that the Csm_MacGenerate stub was called once.
    19. Check that the job ID is for Csm_MacGenerate.
    20. Check that the output buffer length is the expected one.
    21. Check that the PduR_SecOCTransmit stub was called once.
    22. Check that the provided Secured I-PDU is the expected one.
    23. Call SecOC_TpTxConfirmation to finish the authentication procedure.
    24. Check that the PduR_SecOCTpTxConfirmation stub was called with the valid ID and result.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
        <provcov>
          <linksto>SecOC.EB.Tx.SWS_SecOC_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>628</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1614</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_IMP_WITHOUT_RX_PDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Without_RxPdus/source/application/Tests.c</sourcefile>
      <sourceline>46</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test SecOC module without configured Rx Pdus.
  
Test Description: 
    This test case checks the behavior of the SecOC module processing without configured Rx Pdus.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize Pdu payload and length.
    03. Call SecOC_RxIndication function to notify the SecOC module that the
        secured I-Pdu is sent and the verification procedure can be started.
    04. Call SecOC_CancelTransmit function to cancel the transmit.
    05. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00124</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1615</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_IMP_WITHOUT_TX_PDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Imp_Without_TxPdus/source/application/Tests.c</sourcefile>
      <sourceline>53</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
    Test SecOC module without configured Tx Pdus.
  
Test Description: 
    This test case checks the behavior of the SecOC module processing without configured Tx Pdus.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01. Initialize the SecOC module and the stubs.
    02. Initialize Pdu payload and length.
    03. Call SecOC_Transmit function.
    04. Call SecOC_CancelTransmit function to cancel the transmit.
    05. Call the SecOC_StartOfReception and check that the request was accepted
        by the SecOC module
    06. Call SecOC_TpCancelReceive, check that request accepted and check the the return value is E_OK.
    07. Call SecOC_TriggerTransmit function.
    08. Call SecOC_TxConfirmation function.
    09. Call the SecOC_RxIndication to notify the SecOC module that the authentic I-PDU and the cryptographic
        PDUs were sent and the verification procedure can be started.
    10. Call the main function and execute the verification procedure.
    11. Check that the GetRxFreshness and the ExtFreshness stubs were called.
    12. Call the SecOC_DeInit function to reset the SecOC module.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_00127</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
        <provcov>
          <linksto>SecOC.Asr.Correction.SWS_SecOC_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1616</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SECOC_IMP_RX_RTE_FRESHNESS_ARRAY_LENGTH_FIRST_PDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Impl_RxTx_Rte_FreshnessArrayLen/source/application/Tests.c</sourcefile>
      <sourceline>59</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Implementation test for SecOC when Rte interfaces are enabled.
Test Description: 
    This test checks that SecOC_FreshnessArrayType is generated with the maximum SecOCFreshnessValueLength.
    Only RX pdus are present, and SecOC_FreshnessArrayType should be generated with the maximum
    SecOCFreshnessValueLength of the Rx PDUs.
  
Test Object: 
    SecOC_FreshnessArrayType
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration and check SecOC_FreshnessArrayType is generated
    with correct length
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1617</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_RX_RTE_FRESHNESS_ARRAY_LENGTH_SECOND_PDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Impl_RxTx_Rte_FreshnessArrayLen/source/application/Tests.c</sourcefile>
      <sourceline>110</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Implementation test for SecOC when Rte interfaces are enabled.
Test Description: 
    This test checks that SecOC_FreshnessArrayType is generated with the maximum SecOCFreshnessValueLength.
    Only RX pdus are present, and SecOC_FreshnessArrayType should be generated with the maximum
    SecOCFreshnessValueLength of the Rx PDUs.
  
Test Object: 
    SecOC_FreshnessArrayType
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration and check SecOC_FreshnessArrayType is generated
    with correct length
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1618</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_RTE_FRESHNESS_ARRAY_LENGTH_FIRST_PDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Impl_RxTx_Rte_FreshnessArrayLen/source/application/Tests.c</sourcefile>
      <sourceline>161</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Implementation test for SecOC when Rte interfaces are enabled.
Test Description: 
    This test checks that SecOC_FreshnessArrayType is generated with the maximum SecOCFreshnessValueLength.
    Only TX pdus are present, and SecOC_FreshnessArrayType should be generated with the maximum
    SecOCFreshnessValueLength of the Tx PDUs.
  
Test Object: 
    SecOC_FreshnessArrayType
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration and check SecOC_FreshnessArrayType is generated
    with correct length
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1619</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_TX_RTE_FRESHNESS_ARRAY_LENGTH_SECOND_PDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Impl_RxTx_Rte_FreshnessArrayLen/source/application/Tests.c</sourcefile>
      <sourceline>212</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Implementation test for SecOC when Rte interfaces are enabled.
Test Description: 
    This test checks that SecOC_FreshnessArrayType is generated with the maximum SecOCFreshnessValueLength.
    Only TX pdus are present, and SecOC_FreshnessArrayType should be generated with the maximum
    SecOCFreshnessValueLength of the Tx PDUs.
  
Test Object: 
    SecOC_FreshnessArrayType
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration and check SecOC_FreshnessArrayType is generated
    with correct length
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1620</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_RXTX_RTE_FRESHNESS_ARRAY_LENGTH_RX_LARGER</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Impl_RxTx_Rte_FreshnessArrayLen/source/application/Tests.c</sourcefile>
      <sourceline>263</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Implementation test for SecOC when Rte interfaces are enabled.
Test Description: 
    This test checks that SecOC_FreshnessArrayType is generated with the maximum SecOCFreshnessValueLength.
    RX and TX pdus are present, and SecOC_FreshnessArrayType should be generated with the maximum
    SecOCFreshnessValueLength of the Rx or Tx PDUs (in this case Rx).
  
Test Object: 
    SecOC_FreshnessArrayType
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration and check SecOC_FreshnessArrayType is generated
    with correct length
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1621</internalId></specobject>
    <specobject>
      <id>TS_SECOC_IMP_RXTX_RTE_FRESHNESS_ARRAY_LENGTH_TX_LARGER</id>
      <status>approved</status>
      <source>EB test case specification (asc_SecOC)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SecOC/test/ts5/Implementation/IN/SecOC_Impl_RxTx_Rte_FreshnessArrayLen/source/application/Tests.c</sourcefile>
      <sourceline>315</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Implementation test for SecOC when Rte interfaces are enabled.
Test Description: 
    This test checks that SecOC_FreshnessArrayType is generated with the maximum SecOCFreshnessValueLength.
    RX and TX pdus are present, and SecOC_FreshnessArrayType should be generated with the maximum
    SecOCFreshnessValueLength of the Rx or Tx PDUs (in this case Tx).
  
Test Object: 
    SecOC_FreshnessArrayType
  
Test Precondition: 
    &lt;itemizedlist&gt;
      &lt;listitem&gt;SecOC Secured RX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;SecOC Secured TX Pdus are configured and used. &lt;/listitem&gt;
      &lt;listitem&gt;RTE usage is enabled. &lt;/listitem&gt;
    &lt;/itemizedlist&gt;
  
Test Execution: 
    Compile SecOC module with the given configuration and check SecOC_FreshnessArrayType is generated
    with correct length
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SecOC.Asr.SWS_SecOC_91012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1622</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
