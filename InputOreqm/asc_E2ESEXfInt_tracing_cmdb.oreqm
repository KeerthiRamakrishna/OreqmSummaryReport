<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_E2ESEXfInt_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfInt/config/AutoCoreReqM2RulesExtended.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfInt/build/reqm/ReqM2_OldCImporter/reqm_TCS_LEGACY.reqm</commandline>
    <timestamp>Mon Jun 17 22:08:42 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfInt/config/AutoCoreReqM2RulesExtended.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_E2ESEXfInt_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfInt/build/reqm/ReqM2_OldCImporter/reqm_TCS_LEGACY.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <regex>SwRS</regex>
      <regex>SwRS.top</regex>
      <regex>SwRS.fea</regex>
      <regex>SwAD</regex>
      <regex>SwAD.alloc</regex>
      <regex>SwTS</regex>
      <regex>tcs</regex>
      <regex>dsn</regex>      
      <regex>dev</regex>
	  <regex>req</regex>
      <regex>man</regex>
      <regex>src</regex>
      <regex>safetymanual</regex>      
	  <regex>CREQS</regex>	
	  <regex>CDOCS</regex>	  	  
    </regexs>
  </doctypes>
    <rules>

    <rule>
      <name>BSW_REQM2_001</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <!--<rule>
      <name>BSW_REQM2_002</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='req') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>-->
	<rule>
      <name>BSW_REQM2_002_1</name>
      <description>Status status=rejected is only allowed for requirements (req) and customer requirements (CREQS). How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype!='req') and (./status='rejected')) and ((../@doctype!='CREQS') and (./status='rejected'))]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>BSW_REQM2_003</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>BSW_REQM2_004</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only" 
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>BSW_REQM2_005</name>
      <description>Requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following 
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' -->
          <condition>substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>BSW_REQM2_008</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn') and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>BSW_REQM2_006</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf") shall have a comment or rationale that
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>BSW_REQM2_007</name>
      <description>The release attribute shall not be used. Rationale: We see only a use case for future
        planning, which is maintained in Jira. We don't want duplication of data to ReqM, past data
        is difficult to maintain and the benefit for having this is not clear. How to fix: remove
        release attribute.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject/releases/release</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>BSW_REQM2_100_E2E</name>
      <description>Requirements can be covered only by req, dev, dsn, src, tcs, safetymanual, man, or CREQS</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req')]</applyto>
          <condition>(./needscoverage/needsobj="req" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="man" or ./needscoverage/needsobj="safetymanual" or ./needscoverage/needsobj="CREQS" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>BSW_REQM2_101</name>
      <description>Design elemenents can only be covered by dsn, src, tcs, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn')]</applyto>
          <condition>(./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <!--<rule>
      <name>BSW_REQM2_102</name>
      <description>Specification objects of type dev, tcs, man, src shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev') or (../@doctype='tcs') or (../@doctype='man')
            or (../@doctype='src')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>-->
	
	<rule>
      <name>BSW_REQM2_102_1</name>
      <description>Specification objects of type tcs, man, src shall not need/receive coverage. Deviations shall be linked to the CREQS by needs coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs') or (../@doctype='man')
            or (../@doctype='src')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

	<rule>
      <name>E2E_REQM2_100</name>
      <description>Component top level requirements shall be covered by features</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='SwRS.top')]</applyto>
          <condition>(./needscoverage/needsobj="SwRS.fea" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
	
	<rule>
      <name>E2E_REQM2_110</name>
      <description>All CREQS in state approved shall have at least one provide coverage to a specobject not of type CDOCS</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='CREQS') and (./status='approved')]</applyto>													
		  <condition>(count(./providescoverage/provcov/linksto)&gt;1)</condition>
         <!-- <condition>((./status='approved') and (count(./providescoverage/provcov/linksto)>1)))</condition>-->
        </conditioncheck>
      </conditionchecks>
    </rule>
	
  </rules>
  </configuration>
  <specdocument>
    <specobjects doctype="SwTS">
    <specobject>
      <id>TS_E2ESEXf_Delegate_050000</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_Delegate.c</sourcefile>
      <sourceline>5</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Indication of E2E error states
Test Description: 
    &lt;para&gt;
      This test verifies the error states of related AUTOSAR SWC.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: None.
Test Execution: &lt;/programlisting&gt;
  This test is fulfilled by the following E2ESM module tests:
&lt;para&gt;
    TS_E2ESM_ConTest_01000_SMCheck_DEINITtoDEINIT
&lt;/para&gt;
&lt;para&gt;
    TS_E2ESM_ConTest_01001_SMCheck_NODATAtoNODATA
&lt;/para&gt;
&lt;para&gt;
    TS_E2ESM_ConTest_01002_SMCheck_NODATAtoINIT
&lt;/para&gt;
&lt;para&gt;
    TS_E2ESM_ConTest_01003_SMCheck_INITtoINIT
&lt;/para&gt;
&lt;para&gt;
    TS_E2ESM_ConTest_01004_SMCheck_INITtoVALID
&lt;/para&gt;
&lt;para&gt;
    TS_E2ESM_ConTest_01005_SMCheck_INITtoINVALID
&lt;/para&gt;
&lt;para&gt;
    TS_E2ESM_ConTest_01006_SMCheck_VALIDtoVALID
&lt;/para&gt;
&lt;para&gt;
    TS_E2ESM_ConTest_01007_SMCheck_VALIDtoINVALID_MaxErrorExceeded
&lt;/para&gt;
&lt;para&gt;
    TS_E2ESM_ConTest_01008_SMCheck_VALIDtoINVALID_MinOkNotReached
&lt;/para&gt;
&lt;para&gt;
    TS_E2ESM_ConTest_01009_SMCheck_INVALIDtoINVALID_MaxErrorExceeded
&lt;/para&gt;
&lt;para&gt;
    TS_E2ESM_ConTest_01010_SMCheck_INVALIDtoINVALID_MinOkNotReached
&lt;/para&gt;
&lt;para&gt;
    TS_E2ESM_ConTest_01011_SMCheck_INVALIDtoVALID
&lt;/para&gt;
&lt;para&gt;
    TS_E2ESM_ConTest_01012_SMCheckInit_DEINITtoNODATA
&lt;/para&gt;
&lt;para&gt;
    TS_E2ESM_ConTest_01013_SMCheckInit_NODATAtoNODATA
&lt;/para&gt;
&lt;para&gt;
    TS_E2ESM_ConTest_01014_SMCheckInit_INITtoNODATA
&lt;/para&gt;
&lt;para&gt;
    TS_E2ESM_ConTest_01015_SMCheckInit_VALIDtoNODATA
&lt;/para&gt;
&lt;para&gt;
    TS_E2ESM_ConTest_01016_SMCheckInit_INVALIDtoNODATA
&lt;/para&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000093</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_Delegate_050010</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_Delegate.c</sourcefile>
      <sourceline>80</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Indication of version information errors
Test Description: 
    &lt;para&gt;
    This test verifies the version information of the called transformers
    SomeIpXf, E2EXf and ComXf.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: None.
Test Execution: &lt;/programlisting&gt;
  This test is fulfilled by the following SomeIpXf, E2EXf and ComXf modules tests:
  &lt;para&gt;
    TS_E2EXF_CON_01001_GetVersionInfo
  &lt;/para&gt;
  &lt;para&gt;
    TS_COMXF_CON_01004_ComXfGetVersionInfo
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_03010_ParamNull_GetVersionInfo
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_04001_GetVersionInfo
  &lt;/para&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE.safetyanalysis.GetVersionInfo.Sequence</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_Delegate_050020</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_Delegate.c</sourcefile>
      <sourceline>117</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Indication of E2ESEXf internal errors
Test Description: 
    &lt;para&gt;
      This test verifies the SomeIpXf, E2EXf and ComXf internal errors are indicated to the caller.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: None.
Test Execution: &lt;/programlisting&gt;
  This test is fulfilled by the following SomeIpXf, E2EXf and ComXf modules tests:
  &lt;para&gt;
    TS_SOMEIPXF_CON_24011_ParamNull_transformerId_Buffer
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_24012_ParamNull_transformerId_BufferLength
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_24013_ParamNull_Inv_transformerId_Buffer
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_24021_ParamInvalid_Inv_transformerId_BufferLength
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2EXf_CON_01101_IOValidParamCheck
  &lt;/para&gt;
  &lt;para&gt;
    TS_COMXF_CON_01153_Err_Det_Pointer
  &lt;/para&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_Delegate_050030</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_Delegate.c</sourcefile>
      <sourceline>159</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Indication of deinitialization errors
Test Description: 
    &lt;para&gt;
    This test verifies the deinitialization of the transformers E2EXf and ComXf.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: None.
Test Execution: &lt;/programlisting&gt;
  This test is fulfilled by the following E2EXf and ComXf modules tests:
  &lt;para&gt;
    TS_E2EXF_CON_01004_DeInitialization
  &lt;/para&gt;
  &lt;para&gt;
    TS_COMXF_CON_01150_Err_Det_Uninit
  &lt;/para&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE.safetyanalysis.Deinitialization.Sequence</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_Delegate_050040</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_Delegate.c</sourcefile>
      <sourceline>189</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: A Transformer providing both safety and QM code
Test Description: 
    &lt;para&gt;
    This test verifies the safety and QM code of SomeIp transformer.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: None.
Test Execution: &lt;/programlisting&gt;
  This test is fulfilled by the following SomeIpXf, ComXf and E2EXf module tests:
  &lt;para&gt;
    SomeIpXf_ComTest_13_SR_MemoryPartitions
  &lt;/para&gt;
  &lt;para&gt;
    ComXf_ComTest_04_MemoryPartitions
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2EXf_ComTest_33_P01c_P05_MemPartitioning
  &lt;/para&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE.SwAD.Partitioning.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_Delegate_050050</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_Delegate.c</sourcefile>
      <sourceline>222</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Transmission of dynamic length data
Test Description: 
    &lt;para&gt;
     If transmit data is of dynamic length, then E2E header shall contain a length indicator.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: None.
Test Execution: &lt;/programlisting&gt;
  This test is fulfilled by the following profiles E2EP04, E2EP06, E2EP07 tests:
  &lt;para&gt;
    TS_E2EP04_ConTest_01005_P04Protect_WriteLength
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2EP06_ConTest_01000_P06Protect
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2EP07_ConTest_01005_P07Protect_WriteLength
  &lt;/para&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE.SwAD.024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_Delegate_050060</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_Delegate.c</sourcefile>
      <sourceline>255</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Aggregatation of several reception states 
Test Description: 
    &lt;para&gt;
    E2ESM aggregating the reception states out of several data verification cycles.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: None.
Test Execution: &lt;/programlisting&gt;
  This test is fulfilled by the following E2ESM tests:
  &lt;para&gt;
    TS_E2ESM_ConTest_01005_SMCheck_INITtoINVALID
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01000_SMCheck_DEINITtoDEINIT
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01001_SMCheck_NODATAtoNODATA
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01002_SMCheck_NODATAtoINIT
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01003_SMCheck_INITtoINIT
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01004_SMCheck_INITtoVALID
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01006_SMCheck_VALIDtoVALID
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01005_SMCheck_INITtoINVALID
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01007_SMCheck_VALIDtoINVALID_MaxErrorExceeded
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01008_SMCheck_VALIDtoINVALID_MinOkNotReached
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01009_SMCheck_INVALIDtoINVALID_MaxErrorExceeded
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01010_SMCheck_INVALIDtoINVALID_MinOkNotReached
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01011_SMCheck_INVALIDtoVALID
  &lt;/para&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE.SwAD.025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_Delegate_050070</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_Delegate.c</sourcefile>
      <sourceline>318</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Aggregation of several reception states 
Test Description: 
    &lt;para&gt;
    The aggregation of several reception states shall be applied to a customizable reception window.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: None.
Test Execution: &lt;/programlisting&gt;
  This test is fulfilled by the following E2ESM tests:
  &lt;para&gt;
    TS_E2ESM_ConTest_01003_SMCheck_INITtoINIT
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01019_SMCheck_InvalidCfg_WindowSize
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01020_SMCheck_InvalidCfg_StateInit
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01021_SMCheck_InvalidCfg_StateValid
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01022_SMCheck_InvalidCfg_StateInvalid
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01023_SMCheck_InvalidCfg_MinOk
  &lt;/para&gt;
  &lt;para&gt;
    TS_E2ESM_ConTest_01024_SMCheck_InvalidCfg_MaxError
  &lt;/para&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE.SwAD.026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_Delegate_050080</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_Delegate.c</sourcefile>
      <sourceline>363</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: SOME/IP transformer linearize the data
Test Description: 
    &lt;para&gt;
    The SOME/IP transformer shall linearize data with the SOME/IP on-the-wire format.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: None.
Test Execution: &lt;/programlisting&gt;
  This test is fulfilled by the following SomeIpXf tests:
  &lt;para&gt;
    TS_SOMEIPXF_CON_12014_EmptyPayload_transformerId
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_12022_CorrectHeader_Inv_transformerId
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_01001_HeaderRequestNoReturn
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_01002_HeaderNotification
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_01003_IntfVersNotWithinISigProps
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_01104_HeaderIncorrectMessageType
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_01101_HeaderRequestNoReturn
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_05001_LinearVarArray
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_05101_LinearVarArray
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_22101_SquareVSAOfSint16
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_25103_3DFullFlexMaxToMin
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_38101_4DInvFullFlexMaxToMin
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_05002_SquareVarArray
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_05102_SquareVarArray
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_05003_RectangularVarArray
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_05103_RectangularVarArray
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_25001_2DFullFlexMaxToMinToMax
  &lt;/para&gt;
  &lt;para&gt;
    TS_SOMEIPXF_CON_38001_4DFullFlexMaxToMin
  &lt;/para&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE.SwAD.027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_Delegate_050090</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_Delegate.c</sourcefile>
      <sourceline>441</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: COM based transformer linearize the data
Test Description: 
    &lt;para&gt;
    The COM based transformer shall linearize data into according to a fixed communication matrix.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: None.
Test Execution: &lt;/programlisting&gt;
  This test is fulfilled by the following ComXf tests:
  &lt;para&gt;
    TS_COMXF_CON_01010_StOfAllBasic
  &lt;/para&gt;
  &lt;para&gt;
    TS_COMXF_CON_01020_ArrayOfUint8
  &lt;/para&gt;
  &lt;para&gt;
    TS_COMXF_CON_01030_NestedArrayOfStruct
  &lt;/para&gt;
  &lt;para&gt;
    TS_COMXF_CON_03020_ArrayOfUint8_Safe
  &lt;/para&gt;
  &lt;para&gt;
    TS_COMXF_CON_03030_NestedArrayOfStruct_Safe
  &lt;/para&gt;
  &lt;para&gt;
    TS_COMXF_CON_01110_StOfAllBasic
  &lt;/para&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE.SwAD.028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_Delegate_050100</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_Delegate.c</sourcefile>
      <sourceline>483</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Decision taken by Safety Transformers Generator unit
Test Description: 
    &lt;para&gt;
    Safety Transformers Generator unit decides if a transformation shall be generated
    with safety or QM classification.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: None.
Test Execution: &lt;/programlisting&gt;
  This test is fulfilled by the following SomeIpXf, ComXf module tests:
  &lt;para&gt;
    SomeIpXf_ComTest_14_SR_MultipleReceivers
  &lt;/para&gt;
  &lt;para&gt;
    ComXf_ComTest_01
  &lt;/para&gt;
  &lt;para&gt;
    TS_ComXf_ComTest_05_MultipleRec
  &lt;/para&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE.SwAD.Generator.Heuristic</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>
  </specobjects>
    <specobjects doctype="SwTS">
    <specobject>
      <id>TS_E2ESEXf_SomeIpXf_Client_010001</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_CS_SomeIpXf.c</sourcefile>
      <sourceline>1</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: SOME/IP data transformer of protected messages
Test Description: 
   This test verifies that the message under test is serialized with the SOME/IP protocol and 
   End-to-end protected for Client Out-Of-Place.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 44m the following shall be executed:
     &lt;orderedlist&gt;
      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit valid DataElement.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Verify the &lt;code&gt;SomeIpXf_Request_Client_1Ops1 &lt;/code&gt;shall equal to E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call the function  &lt;code&gt;E2EXf_P44m_OoP_Request_Client_1Ops1,
        &lt;/code&gt; Shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP Verify  The function &lt;code&gt;E2EXf_P44m_OoP_Request_Client_1Ops1 &lt;/code&gt; shall
        returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP Compare the output with expected output values.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP Call &lt;code&gt;E2EXf_Inv_P44m_OoP_Response_Client_1Ops1&lt;/code&gt;
        function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
       VP Call &lt;code&gt;E2EXf_Inv_P44m_OoP_Response_Client_1Ops1,&lt;/code&gt; to check the CRC and counter 
       at receiver end, shall returns with E_SAFETY_INIT_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt;SomeIpXf_Inv_Response_Client_1Ops1&lt;/code&gt;
        in de-transformer chain.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP check received Data to be same as original data.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP Check that &lt;code&gt;SomeIpXf_Inv_Response_Client_1Ops1
        &lt;/code&gt; shall returns E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_SomeIpXf_Client_020001</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_CS_SomeIpXf.c</sourcefile>
      <sourceline>102</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: SOME/IP data transformer of protected messages
Test Description: 
   This test verifies that the message under test is serialized with the SOME/IP protocol and 
   End-to-end protected for Client In-Place .
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 44m the following shall be executed:
     &lt;orderedlist&gt;
      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit valid DataElement.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Verify the &lt;code&gt;SomeIpXf_Request_Client_1Ops1&lt;/code&gt; shall equal to E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call  the function  &lt;code&gt;E2EXf_P44m_InP_Request_Client_1Ops1,
        &lt;/code&gt; Shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP Verify  The function  &lt;code&gt;E2EXf_P44m_InP_Request_Client_1Ops1&lt;/code&gt; shall
        returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP Compare the output with expected output values.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt; E2EXf_Inv_P44m_InP_Response_Client_1Ops1&lt;/code&gt;
        function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
       VP Call &lt;code&gt;E2EXf_Inv_P44m_InP_Response_Client_1Ops1,&lt;/code&gt; to check the CRC and counter 
       at receiver end, shall returns with E_SAFETY_INIT_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt;SomeIpXf_Inv_Response_Client_1Ops1&lt;/code&gt;
        in de-transformer chain.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP check received Data to be same as original data.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP Check that &lt;code&gt;SomeIpXf_Inv_Response_Client_1Ops1
        &lt;/code&gt; shall returns E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_SomeIpXf_Client_030001</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_CS_SomeIpXf.c</sourcefile>
      <sourceline>203</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Message insertion and Addressing fault of protected messages
Test Description: 
   This test verifies the possibility of ServerComponent to detect the communication link failure 
   modes message insertion and Addressing fault and its notification to the caller shall be checked 
   for each E2E Profile PXXm.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 44m the following shall be executed:
    &lt;orderedlist&gt;
      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit valid DataElement.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Verify the &lt;code&gt;SomeIpXf_Request_Client_1Ops1&lt;/code&gt; shall equal to E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call  the function  &lt;code&gt;E2EXf_P44m_OoP_Request_Client_1Ops1,
        &lt;/code&gt; Shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP Verify  The function  &lt;code&gt;E2EXf_P44m_OoP_Request_Client_1Ops1&lt;/code&gt; shall
        returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP Compare the output with expected output values.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Corrupt the crc value.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt; E2EXf_Inv_P44m_OoP_Response_Client_1Ops1&lt;/code&gt;
        function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
       VP Call &lt;code&gt;E2EXf_Inv_P44m_InP_Response_Client_1Ops1,&lt;/code&gt; to check the CRC and counter 
       at receiver end, shall returns with E_SAFETY_NODATA_ERR.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_SomeIpXf_Client_040001</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_CS_SomeIpXf.c</sourcefile>
      <sourceline>291</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Masquerading of protected messages
Test Description: 
   This test verifies the possibility at ServerComponent to detect the communication link failure mode
   masquerading and its notification to the caller shall be checked
   for each E2E Profile PXXm.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 44m the following shall be executed:
     &lt;orderedlist&gt;
      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit valid DataElement.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Verify the &lt;code&gt;SomeIpXf_Request_Client_1Ops1&lt;/code&gt; shall equal to E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call  the function  &lt;code&gt;E2EXf_P44m_OoP_Request_Client_1Ops1,
        &lt;/code&gt; Shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP Verify  The function  &lt;code&gt;E2EXf_P44m_OoP_Request_Client_1Ops1&lt;/code&gt; shall
        returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP Compare the output with expected output values.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Change the Data Id Value.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt; E2EXf_Inv_P44m_OoP_Response_Client_1Ops1 with wrong Data Id&lt;/code&gt;
        function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
       VP Call &lt;code&gt;E2EXf_Inv_P44m_OoP_Response_Client_1Ops1,&lt;/code&gt; to check the CRC and counter 
       at receiver end, shall returns with E_SAFETY_NODATA_ERR.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_SomeIpXf_Client_050001</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_CS_SomeIpXf.c</sourcefile>
      <sourceline>379</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Message loss of protected messages
Test Description: 
   This test case verifies, the possibility at ServerComponent to detect the communication link 
   failure mode Message loss of protected messages and its notification to the caller shall be 
   checked for each E2E Profile PXXm.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 44m the following shall be executed:
     &lt;orderedlist&gt;
      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit valid DataElement.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Verify the &lt;code&gt;SomeIpXf_Request_Client_1Ops1&lt;/code&gt; shall equal to E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call  the function  &lt;code&gt;E2EXf_P44m_OoP_Request_Client_1Ops1,
        &lt;/code&gt; Shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP Verify  The function  &lt;code&gt;E2EXf_P44m_OoP_Request_Client_1Ops1&lt;/code&gt; shall
        returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP Compare the output with expected output values.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP Call &lt;code&gt; E2EXf_Inv_P44m_OoP_Response_Client_1Ops1&lt;/code&gt;
        function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
       VP Call &lt;code&gt;E2EXf_Inv_P44m_OoP_Response_Client_1Ops1,&lt;/code&gt; to check the CRC and counter 
       at receiver end, shall returns with E_SAFETY_INIT_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit the valid data again.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Verify the &lt;code&gt;SomeIpXf_Request_Client_1Ops1&lt;/code&gt; shall equal to E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call  the function  &lt;code&gt;E2EXf_P44m_OoP_Request_Client_1Ops1,
        &lt;/code&gt; Shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP Verify  The function  &lt;code&gt;E2EXf_P44m_OoP_Request_Client_1Ops1&lt;/code&gt; shall
        returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt; E2EXf_Inv_P44m_OoP_Response_Client_1Ops1&lt;/code&gt;
        function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
       VP Call &lt;code&gt;E2EXf_Inv_P44m_OoP_Response_Client_1Ops1,&lt;/code&gt; to check the CRC and counter 
       at receiver end, shall returns with E_SAFETY_INVALID_ERR.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_SomeIpXf_Server_070001</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_CS_SomeIpXf.c</sourcefile>
      <sourceline>501</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: SOME/IP data transformer of protected messages
Test Description: 
   This test verifies that the message under test is serialized with the SOME/IP protocol
   and End-to-end protected for Server Out-Of-Place.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 44m the following shall be executed:
     &lt;orderedlist&gt;
      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit valid DataElement.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Verify the &lt;code&gt;E2EXf_Inv_P44m_OoP_Request_Server_1Ops1&lt;/code&gt; shall returns with 
         E_SAFETY_INIT_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          Call &lt;code&gt;SomeIpXf_Inv_Request_Server_1Ops1&lt;/code&gt; for de-serialization
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          VP Verify the output values.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Call &lt;code&gt; SomeIpXf_Inv_Request_Server_1Ops1 &lt;/code&gt; shall return with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
          Call &lt;code&gt;SomeIpXf_Response_Server_1Ops1&lt;/code&gt; for serialization
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Call &lt;code&gt; SomeIpXf_Response_Server_1Ops1 &lt;/code&gt; shall return with E2E_E_OK
        function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Call &lt;code&gt; E2EXf_P44m_OoP_Response_Server_1Ops1 &lt;/code&gt; Function
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
        &lt;para&gt;
         VP Call &lt;code&gt; E2EXf_P44m_OoP_Response_Server_1Ops1 &lt;/code&gt; shall return with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Compare sent data with received data and shall return with E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_SomeIpXf_Server_080001</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_CS_SomeIpXf.c</sourcefile>
      <sourceline>598</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: SOME/IP data transformer of protected messages
Test Description: 
   This test verifies that the message under test is serialized with the SOME/IP protocol and 
   End-to-end protected for Server In-Place.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 44m the following shall be executed:
    &lt;orderedlist&gt;
      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit valid DataElement.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP Call &lt;code&gt;E2EXf_Inv_P44m_InP_Request_Server_1Ops1&lt;/code&gt; shall return with E_SAFETY_INIT_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Call &lt;code&gt;SomeIpXf_Inv_Request_Server_1Ops1&lt;/code&gt; function for de-serialization
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP verify output values with input values
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP Call &lt;code&gt;SomeIpXf_Inv_Request_Server_1Ops1&lt;/code&gt; shall return with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Call &lt;code&gt;SomeIpXf_Response_Server_1Ops1&lt;/code&gt; function for serialization
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP Call &lt;code&gt;SomeIpXf_Response_Server_1Ops1&lt;/code&gt; shall return with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Call &lt;code&gt;E2EXf_P44m_InP_Response_Server_1Ops1&lt;/code&gt; function
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP Call &lt;code&gt;E2EXf_P44m_InP_Response_Server_1Ops1&lt;/code&gt; shall return with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP Compare sent data with received data and shall return with E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_SomeIpXf_Server_090001</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_CS_SomeIpXf.c</sourcefile>
      <sourceline>693</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Message insertion and Addressing fault of protected messages
Test Description: 
   This test verifies the possibility of ServerComponent to detect the communication link failure 
   modes message insertion and Addressing fault and its notification to the caller shall be checked
   for each E2E Profile PXXm.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 44m the following shall be executed:
     &lt;orderedlist&gt;
       &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit valid DataElement.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Verify the &lt;code&gt;E2EXf_Inv_P44m_OoP_Request_Server_1Ops1&lt;/code&gt; shall returns with 
         E_SAFETY_INIT_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          Call &lt;code&gt;SomeIpXf_Inv_Request_Server_1Ops1&lt;/code&gt; for de-serialization
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          VP Verify the output values.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Call &lt;code&gt; SomeIpXf_Inv_Request_Server_1Ops1 &lt;/code&gt; shall return with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
          Call &lt;code&gt;SomeIpXf_Response_Server_1Ops1&lt;/code&gt; for serialization
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Call &lt;code&gt; SomeIpXf_Response_Server_1Ops1 &lt;/code&gt; shall return with E2E_E_OK
        function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Call &lt;code&gt; E2EXf_P44m_OoP_Response_Server_1Ops1 &lt;/code&gt; Function
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
        &lt;para&gt;
         VP Call &lt;code&gt; E2EXf_P44m_OoP_Response_Server_1Ops1 &lt;/code&gt; shall return with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Compare sent data with received data and shall return with E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
        Corrupt the crc value to check for addressing faults
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          Call &lt;code&gt;E2EXf_Inv_P44m_OoP_Request_Server_1Ops1&lt;/code&gt; with wrong CRC value
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Verify the &lt;code&gt;E2EXf_Inv_P44m_OoP_Request_Server_1Ops1&lt;/code&gt; shall returns with 
         E_E2E_HARD_SAFETY_ERR.
        &lt;/para&gt;
      &lt;/listitem&gt;

     &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_SomeIpXf_Server_100001</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_CS_SomeIpXf.c</sourcefile>
      <sourceline>810</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Masquerading of protected messages
Test Description: 
   This test verifies the possibility at ServerComponent to detect the communication link failure 
   mode masquerading and its notification to the caller shall be checked
   for each E2E Profile PXXm.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 44m the following shall be executed:
     &lt;orderedlist&gt;
      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit valid DataElement.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Verify the &lt;code&gt;E2EXf_Inv_P44m_OoP_Request_Server_1Ops1&lt;/code&gt; shall returns with 
         E_SAFETY_INIT_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          Call &lt;code&gt;SomeIpXf_Inv_Request_Server_1Ops1&lt;/code&gt; for de-serialization
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          VP Verify the output values.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Call &lt;code&gt; SomeIpXf_Inv_Request_Server_1Ops1 &lt;/code&gt; shall return with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
          Call &lt;code&gt;SomeIpXf_Response_Server_1Ops1&lt;/code&gt; for serialization
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Call &lt;code&gt; SomeIpXf_Response_Server_1Ops1 &lt;/code&gt; shall return with E2E_E_OK
        function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Call &lt;code&gt; E2EXf_P44m_OoP_Response_Server_1Ops1 &lt;/code&gt; Function
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
        &lt;para&gt;
         VP Call &lt;code&gt; E2EXf_P44m_OoP_Response_Server_1Ops1 &lt;/code&gt; shall return with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Check that correct data is received and shall return with E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
          Call &lt;code&gt;E2EXf_Inv_P44m_OoP_Request_Server_1Ops1&lt;/code&gt; again with wrong DataID
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
        &lt;para&gt;
         VP Call &lt;code&gt; E2EXf_Inv_P44m_OoP_Request_Server_1Ops1 &lt;/code&gt; shall return with 
         E_E2E_HARD_SAFETY_ERR
        &lt;/para&gt;
      &lt;/listitem&gt;

     &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>
  </specobjects>
    <specobjects doctype="SwTS">
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_050000</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf.c</sourcefile>
      <sourceline>1</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Reception timeout of protected messages
Test Description: 
    &lt;para&gt;
    This test verifies the possibility to detect the communication link failure mode
    no data is available and its notification to the caller shall be checked
    for E2E Profile P02 and P05.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
  
Test Execution: &lt;/programlisting&gt;
      For E2E profile 02 and profile 05 the following shall be executed:
    &lt;orderedlist&gt;

      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        shall return with E_SAFETY_NODATA_NND.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP (EB_E2ESE000009,EB_E2ESE000012) shall return with
        E_SAFETY_NODATA_NND.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_Deserialzer_ComXf_050001</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf.c</sourcefile>
      <sourceline>58</sourceline>
      <version>1</version>
      <description>Test Synopsis: ComXf data transformer of protected messages
Test Description: 
   This test verifies that ComXf serializes the protected message and it also check that ComXf
   de-serialises the data correctly.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 02 and profile 05 the following shall be executed:
     &lt;orderedlist&gt;
       &lt;listitem&gt;
        &lt;para&gt;
          Initialize the E2E transformer and Com transformer.
        &lt;/para&gt;
        &lt;para&gt;
          Transmit the complex data.
        &lt;/para&gt;
      &lt;/listitem&gt;
      &lt;listitem&gt;
        &lt;para&gt;
         Serialize the complex data element via Com based transformation by calling ComXf_SenderReceiverType
        &lt;/para&gt;
        &lt;para&gt;
          &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; returns
          with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;
      &lt;listitem&gt;
        &lt;para&gt;
          VP (EB_E2ESE0000102,EB_E2ESE000103, EB_E2ESE.SwAD.004, EB_E2ESE.SwAD.003, EB_E2ESE.SwAD.030, EB_E2ESE.SwAD.032, EB_E2ESE.SwAD.033)
        &lt;/para&gt;
        &lt;para&gt;
          &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; returns
          with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;
     &lt;listitem&gt;
       &lt;para&gt;
          VP(EB_E2ESE.SwAD.007,EB_E2ESE.SwAD.008,EB_E2ESE.SwAD.009, EB_E2ESE.SwAD.031)
          &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; add counter and
          CRC in Data
        &lt;/para&gt;
      &lt;/listitem&gt;
     &lt;listitem&gt;
       &lt;para&gt;
          &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; returns
          with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;
       &lt;listitem&gt;
       &lt;para&gt;
          VP(EB_E2ESE.SwAD.010, EB_E2ESE.SwAD.011,EB_E2ESE.SwAD.012,EB_E2ESE.SwAD.013,EB_E2ESE.SwAD.019)
          &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; checks
          counter and crc.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP (EB_E2ESE.SwAD.006) &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        return E_SAFETY_INIT_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
          &lt;code&gt;ComXf_Inv_SenderReceiverType&lt;/code&gt; de-serialize the data.
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
          VP(EB_E2ESE.SwAD.023, EB_E2ESE.SwAD.020)&lt;code&gt;ComXf_Inv_SenderReceiverType&lt;/code&gt; return E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
          Validate the data.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_050010</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf.c</sourcefile>
      <sourceline>173</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Unintended message repetition of protected messages
Test Description: 
    This test case verifies, the possibility at Receiver1 to detect the communication link failure
    mode unintended message repetition and its notification to the caller shall be checked
    for E2E Profile P02 and P05.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 02 and profile 05 the following shall be executed:
     &lt;orderedlist&gt;

      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Serialize the complex data element via Com based transformation by calling the function
        &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt;
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000001 ), Call &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; shall returns with
       E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
       returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
         with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Call &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
       function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000001 ) return value check for the function
       &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
        return with  E_SAFETY_INIT_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit valid DataElement
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000001 ), Check ComXf_SenderReceiverType returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
       &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
        returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
       VP( EB_E2ESE000001 ) The function
       &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns with
       E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
       Check the crc and counter at reception by calling the function
       &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Repeat the same Message Reception.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP( EB_E2ESE000001 )  The function call
        &lt;code&gt; E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
        return with a error E_SAFETY_VALID_REP.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_050020</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf.c</sourcefile>
      <sourceline>302</sourceline>
      <version>1</version>
      <description>Test Synopsis: Message loss of protected messages
Test Description: 
    This test verifies the at the Receiver1, the possibility to detect the communication link failure mode.
    Message loss of protected messages   and its notification to the caller shall be checked
    for E2E Profile P02 and P05.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;MaxDeltaCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;1&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
  
Test Execution: &lt;/programlisting&gt;
    For E2E profile 02 and profile 05 the following shall be executed:
     &lt;orderedlist&gt;
       &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
       &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Serialize the complex data element via Com based transformation by calling the function
         &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt;.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          Call the &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
         function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000002 ), Check for the function
        &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
           returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Transmit valid DataElement
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP( EB_E2ESE000002 ), Check &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt;function
        shall returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         The &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; function
        returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP( EB_E2ESE000002 ), Check for the fucntion
        &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
        with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          Check the crc and counter at reception by calling the function
       &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP( EB_E2ESE000002 ),(EB_E2ESE000044) Check  for the function
         &lt;code&gt; E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
         return with a error E_SAFETY_INIT_SEQ.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_050030</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf.c</sourcefile>
      <sourceline>408</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Message insertion and Addressing fault of protected messages
Test Description: 
    &lt;para&gt;
    This test verifies the possibility of Receiver1 to detect the communication link
    failure modes message insertion and Addressing fault and its notification to the caller shall be
    checked for E2E Profile P02 and P05.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
  
Test Execution: &lt;/programlisting&gt;
    for E2E Profile P02 and P05, the following shall be executed:
    &lt;orderedlist&gt;
      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        Serialize the complex data element via Com based transformation by calling
        &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; function.
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          VP ( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000012 ),
          Call &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt;, Shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
          Transmit valid DataElement
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
      &lt;para&gt; &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
      returns with E_OK.&lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          Call &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
          VP ( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000012 ) return value check
          for &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
          with  E_SAFETY_INIT_OK ).
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Transmit valid DataElement
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000012 ), Check the
         function &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         The function &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement
         &lt;/code&gt; shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000012 ) the function
         &lt;code&gt; E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement &lt;/code&gt; shall returns
         with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Corrupt the CRC value.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Check the crc and counter at reception by calling a function
         &lt;code&gt; E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000012, EB_E2ESE000005)  the function
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; Shall
         return with a error &lt;code&gt;E_SAFETY_INVALID_ERR&lt;/code&gt;.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_050040</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf.c</sourcefile>
      <sourceline>542</sourceline>
      <version>1</version>
      <description>Test Synopsis: Re-sequencing of protected messages
Test Description: 
    &lt;para&gt;
    This test verifies at Receiver1, the possibility to detect the communication link failure mode
    Re-sequencing and its notification to the caller shall be checked
    for E2E Profile P02 and P05.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;MaxDeltaCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;1&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;SyncCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;1&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
  
Test Execution: &lt;/programlisting&gt;
     For E2E profile 02 and profile 05 the following shall be executed:
    &lt;orderedlist&gt;

      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Serialize the complex data element via Com based transformation by calling
         &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ), check for the
         function ComXf_SenderReceiverType shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        The &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
        returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ), Check
         &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         The &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Counter is too big ,Too many data is lost in sequence. &amp;  &lt;code&gt;PXX Checkstate Status
         &lt;/code&gt; shall be set to E2E_P02STATUS_WRONGSEQUENCE.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ), check
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;shall
         return with  E_SAFETY_INIT_OK as E2EXF_WAIT_FOR_FIRST_DATA_INIT_VALUE is configured as TRUE.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         The &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ),
       Check &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
       returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ),
       Check &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
       returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ),
       Check &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
       returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Again by calling the function
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;,
         Re-Synchronization process should undergo &amp;  &lt;code&gt;PXX Checkstate Status&lt;/code&gt; shall be
         set to E2E_P02STATUS_SYNC.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ), Check
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
         return with E_SAFETY_INIT_SEQ.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_050060</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf.c</sourcefile>
      <sourceline>699</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Masquerading of protected messages
Test Description: 
    &lt;para&gt;
    This test verifies the possibility at Receiver1 to detect the communication link failure mode
    masquerading and its notification to the caller shall be checked
    for E2E Profile P02 and P05.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;DataID&lt;/emphasis&gt; shall be configured to
      different for sender and reciever.
    &lt;/para&gt;
  
Test Execution: &lt;/programlisting&gt;
    for E2E Profile P02 and P05, the following shall be executed:
    &lt;orderedlist&gt;
       &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        Serialize the complex data element via Com based transformation by calling the function
        &lt;code&gt; ComXf_SenderReceiverType &lt;/code&gt;.
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          VP ( EB_E2ESE000008, EB_E2ESE000009, EB_E2ESE000012 ), Check function
          &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         VP ( EB_E2ESE000008, EB_E2ESE000009, EB_E2ESE000012 ), Check for function
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
           returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         Call &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
         function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         VP ( EB_E2ESE000008, EB_E2ESE000009, EB_E2ESE000012 ) function
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        shall return value with E_SAFETY_NODATA_ERR.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_050070</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf.c</sourcefile>
      <sourceline>787</sourceline>
      <version>1</version>
      <description>Test Synopsis: Message loss window
Test Description: 
    &lt;para&gt;
      This test verifies the correct behaviour of the message loss window
      shall be checked for E2E Profile P02 and P05.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;MaxDeltaCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;4&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;SyncCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;0&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
  
Test Execution: &lt;/programlisting&gt;
    for E2E Profile P02 and P05, the following shall be executed:
    &lt;orderedlist&gt;

      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Serialize the complex data element via Com based transformation by calling
         &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         VP( EB_E2ESE0000045, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ) , Check
         &lt;code&gt; ComXf_SenderReceiverType&lt;/code&gt; shall returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        The &lt;code&gt; E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E2E_E_OK.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        The function &lt;code&gt; E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
        returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Counter is too big ,Too many data is lost in sequence. &lt;code&gt;PXX Checkstate Status&lt;/code&gt;
        shall be set to E2E_P02STATUS_WRONGSEQUENCE.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE0000045, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 )
        &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; return
        with E_SAFETY_INIT_SEQ.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
       Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
       with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
        with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Again by calling &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement
        &lt;/code&gt;,Re-Synchronization process should undergo &amp;  &lt;code&gt;PXX Checkstate Status&lt;/code&gt;
        shall be set to E2E_P02STATUS_SYNC.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE0000045, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ) The function
        &lt;code&gt; E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
        return with E_SAFETY_INIT_SEQ.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000045</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ComXf_050001_disableEndToEndCheck_CHECK</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf.c</sourcefile>
      <sourceline>923</sourceline>
      <version>1</version>
      <description>Test Synopsis: Test for inverse transformer with end-to-end check disabled
Test Description: 
    &lt;para&gt;
      This test verifies that the inverse transformer which has the end-to-end check
      parameter disabled for E2E Profile P02.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;MaxDeltaCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;1&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;DataLength&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;184&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
  
Test Execution: &lt;/programlisting&gt;
    for E2E Profile P02, the following shall be executed:
    &lt;orderedlist&gt;

      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Serialize the complex data element via Com based transformation by calling
         &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         VP( EB_E2ESE000012 ) , Check
         &lt;code&gt; ComXf_SenderReceiverType&lt;/code&gt; shall returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E2E_OK.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        The function &lt;code&gt; E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E2E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000012 )
        &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; return
        with E_SAFETY_INIT_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
       Call &lt;code&gt;ComXf_Inv_SenderReceiverType&lt;/code&gt; shall returns
       with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;ComXf_Inv_SenderReceiverType&lt;/code&gt; shall returns
        with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ComXf_050002_disableEndToEndCheck_NO_CHECK</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf.c</sourcefile>
      <sourceline>1022</sourceline>
      <version>1</version>
      <description>Test Synopsis: Test for inverse transformer with end-to-end check enabled
Test Description: 
    &lt;para&gt;
      This test verifies that the inverse transformer which has the end-to-end check
      parameter enabled for E2E Profile P05.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;MaxDeltaCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;1&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;DataLength&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;192&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
  
Test Execution: &lt;/programlisting&gt;
    for E2E Profile P05, the following shall be executed:
    &lt;orderedlist&gt;

      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Serialize the complex data element via Com based transformation by calling
         &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         VP( EB_E2ESE000012 ) , Check
         &lt;code&gt; ComXf_SenderReceiverType&lt;/code&gt; shall returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E2E_OK.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        The function &lt;code&gt; E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E2E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000012 )
        &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        E2E Transformer shall skip the invocation of the E2E Library –
        it shall only perform buffer processing. Return value shall be E_SAFETY_NOSM_DEC.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
       Call &lt;code&gt;ComXf_Inv_SenderReceiverType&lt;/code&gt; shall returns
       with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;ComXf_Inv_SenderReceiverType&lt;/code&gt; shall returns
        with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ComXf_050003_Forward_Code</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf.c</sourcefile>
      <sourceline>1122</sourceline>
      <version>1</version>
      <description>Test Synopsis: Test for data forwarding
Test Description: 
    &lt;para&gt;
      This test verifies that if the DataTransformationStatusForwarding is set to
      transformerStatusForwarding, the function E2EXf_transformerId shall invoke E2E_PXXForward().
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: None.
Test Execution: &lt;/programlisting&gt;
     For E2E profile 01, profile 02, profile 04, profile 05, profile 06, profile 07, profile 11, profile 44 the following shall be executed:
    &lt;orderedlist&gt;

      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Serialize the complex data element via Com based transformation by calling
         &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         VP( EB_E2ESE000012 ) , Check
         &lt;code&gt; ComXf_SenderReceiverType&lt;/code&gt; shall returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E2E_OK.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        The function &lt;code&gt; E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E2E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Verify the counter and CRC value.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>
  </specobjects>
    <specobjects doctype="SwTS">
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_P01_050000</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf_P01.c</sourcefile>
      <sourceline>1</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Reception timeout of protected messages
Test Description: 
    &lt;para&gt;
    This test verifies the possibility to detect the communication link failure mode
    no data is available and its notification to the caller shall be checked
    for E2E Profile P01 variants and E2E Profile P11.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
  
Test Execution: &lt;/programlisting&gt;
      For E2E profile 01, profile RN, profile JLR and profile 11 the following shall be executed:
    &lt;orderedlist&gt;

      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        shall return with E_SAFETY_NODATA_NND.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP (EB_E2ESE000009,EB_E2ESE000010,EB_E2ESE000012) shall return with
        E_SAFETY_NODATA_NND.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_P01_050010</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf_P01.c</sourcefile>
      <sourceline>57</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Unintended message repetition of protected messages
Test Description: 
    This test case verifies, the possibility at Receiver1 to detect the communication link failure mode
    unintendend message repetition and its notification to the caller shall be checked
    for E2E Profile P01 variants and E2E Profile P11.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 01, profile RN, profile JLR and profile 11 the following shall be executed:
     &lt;orderedlist&gt;

      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Serialize the complex data element via Com based transformation by calling the function
        &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt;
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000001 ), Call &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; shall returns with
       E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
       returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
         with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Call &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
       function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000001 ) return value check for the function
        &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
        return with  E_SAFETY_INIT_SEQ for P01 and PRN
        E2EXF_WAIT_FOR_FIRST_DATA_INIT_VALUE is configured as TRUE.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit valid DataElement
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000001 ), Check ComXf_SenderReceiverType returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
       &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
        returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
       VP( EB_E2ESE000001 ) The function
       &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns with
       E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
       Check the crc and counter at reception by calling the function
       &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Repeat the same Message Reception.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP( EB_E2ESE000001 )  The function call
        &lt;code&gt; E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
        return with a error E_SAFETY_VALID_REP.
        &lt;/para&gt;
      &lt;/listitem&gt;
    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_P01_050020</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf_P01.c</sourcefile>
      <sourceline>186</sourceline>
      <version>1</version>
      <description>Test Synopsis: Message loss of protected messages
Test Description: 
  This test verifies the at the Receiver1, the possibility to detect the communication link failure mode.
    Message loss of protected messages   and its notification to the caller shall be checked
    for E2E Profile P01 variants.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;MaxDeltaCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;2&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;SyncCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;0&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
  
Test Execution: &lt;/programlisting&gt;
    For E2E profile 01 and profile RN the following shall be executed:
     &lt;orderedlist&gt;

      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Serialize the complex data element via Com based transformation by calling the function
         &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt;.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP(EB_E2ESE000002), Check for the function &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; shall
        returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000002 ), Check for the function
        &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP(EB_E2ESE000002), Check for the function
        &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
        with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit valid DataElement
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
        VP( EB_E2ESE000002 ), Check &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; shall returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; returns with
        E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP(EB_E2ESE000002), Check for the function
        &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
        with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Call the api
        &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        in order to verify the received message is correct.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP(EB_E2ESE000002),(EB_E2ESE000044) Check  for the function
         &lt;code&gt; E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
         return with a error E_SAFETY_INIT_SEQ.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_P01_050030</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf_P01.c</sourcefile>
      <sourceline>303</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Message insertion and Addressing fault of protected messages
Test Description: 
    &lt;para&gt;
    This test verifies the possibility of Receiver1 to detect the communication link
    failure modes message insertion and Addressing fault and its notification to the caller shall be
    checked for E2E Profile P01 variants.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
  
Test Execution: &lt;/programlisting&gt;
    For E2E profile 01, profile RN, profile JLR and profile 11 the following shall be executed:
    &lt;orderedlist&gt;
      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        Serialize the complex data element via Com based transformation by calling
        &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; function.
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          VP ( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009,EB_E2ESE0000010, EB_E2ESE000012 ),
          Call &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt;, Shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
          Transmit valid DataElement
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
      &lt;para&gt; &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
      returns with E_OK.&lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          Call &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
          VP ( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000012 ) return value check
          for &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
          with  E_SAFETY_INIT_SEQ for P01 and PRN as
          E2EXF_WAIT_FOR_FIRST_DATA_INIT_VALUE is configured as TRUE.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Transmit valid DataElement
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000012 ), Check the
         function &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         The function &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement
         &lt;/code&gt; shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000012 ) the function
         &lt;code&gt; E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement &lt;/code&gt; shall returns
         with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Corrupt the CRC value.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Call the api
         &lt;code&gt; E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
         in order to verify the received message is correct..
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000012 )  the function
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; Shall
         return with a error &lt;code&gt;E_SAFETY_INVALID_ERR&lt;/code&gt;.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_P01_050040</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf_P01.c</sourcefile>
      <sourceline>439</sourceline>
      <version>1</version>
      <description>Test Synopsis: Re-sequencing of protected messages
Test Description: 
    &lt;para&gt;
    This test verifies at Receiver1, the possibility to detect the communication link failure mode
    Re-sequencing and its notification to the caller shall be checked
    for E2E Profile P01 variants and E2E Profile P11.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;MaxDeltaCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;4&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;SyncCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;0&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
  
Test Execution: &lt;/programlisting&gt;
     For E2E profile 01, profile RN the following shall be executed:
    &lt;orderedlist&gt;

      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP (EB_E2ESE000102,EB_E2ESE.SwAD.003,EB_E2ESE.SwAD.004,EB_E2ESE.SwAD.020),
         Serialize the complex data element via Com based transformation by calling
         &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP(EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ), check for the
         function ComXf_SenderReceiverType shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP (EB_E2ESE000103,EB_E2ESE.SwAD.006,EB_E2ESE.SwAD.007,EB_E2ESE.SwAD.008,EB_E2ESE.SwAD.009),
        The &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
        returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ), Check
         &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         The &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Counter is too big ,Too many data is lost in sequence. &amp;  &lt;code&gt;PXX Checkstate Status
         &lt;/code&gt; shall be set to E2E_PXXSTATUS_LOST.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012,EB_E2ESE.SwAD.010,EB_E2ESE.SwAD.011,EB_E2ESE.SwAD.012,EB_E2ESE.SwAD.013,EB_E2ESE.SwAD.010,EB_E2ESE.SwAD.019 ), check
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;shall
         return with E_SAFETY_INIT_SEQ as E2EXF_WAIT_FOR_FIRST_DATA_INIT_VALUE is configured as TRUE
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         The &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ),
       Check &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
       returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         The &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ),
       Check &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
       returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         The &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ),
       Check &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
       returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         The &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK. MaxDeltaCounterInit is 3
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ),
       Check &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
       returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Again by calling the function
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;,
         Re-Synchronization process should undergo &amp;  &lt;code&gt;PXX Checkstate Status&lt;/code&gt; shall be
         set to E2E_P02STATUS_SYNC.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ), Check
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
         return with E_SAFETY_INIT_SEQ.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_P01_050060</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf_P01.c</sourcefile>
      <sourceline>641</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Masquerading of protected messages
Test Description: 
    &lt;para&gt;
    This test verifies the possibility at Receiver1 to detect the communication link failure mode
    masquerading and its notification to the caller shall be checked
    for E2E Profile P01 variants and E2E Profile P11.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;DataID&lt;/emphasis&gt; shall be configured to
      different for sender and reciever.
    &lt;/para&gt;
  
Test Execution: &lt;/programlisting&gt;
    For E2E profile 01, profile RN, profile JLR and profile 11 the following shall be executed:
    &lt;orderedlist&gt;
       &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        Serialize the complex data element via Com based transformation by calling the function
        &lt;code&gt; ComXf_SenderReceiverType &lt;/code&gt;.
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          VP ( EB_E2ESE000008, EB_E2ESE000009, EB_E2ESE000012 ), Check function
          &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         VP ( EB_E2ESE000008, EB_E2ESE000009, EB_E2ESE000012 ), Check for function
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
           returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         Call &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
         function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         VP ( EB_E2ESE000008, EB_E2ESE000009, EB_E2ESE000012 ) function
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        shall return value with E_SAFETY_NODATA_ERR.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_P01_050070</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf_P01.c</sourcefile>
      <sourceline>729</sourceline>
      <version>1</version>
      <description>Test Synopsis: Message loss window
Test Description: 
    &lt;para&gt;
      This test verifies the correct behaviour of the message loss window
      shall be checked for E2E Profile P01 variants and E2E Profile P11.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;MaxDeltaCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;4&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;SyncCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;0&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
  
Test Execution: &lt;/programlisting&gt;
    For E2E profile 01 and profile RN the following shall be executed:
    &lt;orderedlist&gt;

      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Serialize the complex data element via Com based transformation by calling
         &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         VP( EB_E2ESE0000045, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ) , Check
         &lt;code&gt; ComXf_SenderReceiverType&lt;/code&gt; shall returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        The &lt;code&gt; E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E2E_E_OK.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        The function &lt;code&gt; E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
        returns with E2E_E_OK.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Counter is too big ,Too many data is lost in sequence. &lt;code&gt;PXX Checkstate Status&lt;/code&gt;
        shall be set to E2E_PXXSTATUS_LOST.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE0000045, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 )
        &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; return
        with E_SAFETY_INIT_SEQ for Profile 01 and Profile RN as E2EXF_WAIT_FOR_FIRST_DATA_INIT_VALUE
        is configured as TRUE
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
       Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
       with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
        with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Again by calling &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement
        &lt;/code&gt;,Re-Synchronization process should undergo &amp;  &lt;code&gt;PXX Checkstate Status&lt;/code&gt;
        shall be set to E2E_P02STATUS_SYNC.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE0000045, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ) The function
        &lt;code&gt; E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
        return with E_SAFETY_INIT_SEQ.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000045</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>
  </specobjects>
    <specobjects doctype="SwTS">
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_P11_050010</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf_P11.c</sourcefile>
      <sourceline>1</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Unintended message repetition of protected messages
Test Description: 
    This test case verifies, the possibility at Receiver1 to detect the communication link failure mode
    unintendend message repetition and its notification to the caller shall be checked
    for E2E Profile P11.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For profile JLR and profile 11 the following shall be executed:
     &lt;orderedlist&gt;

      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Serialize the complex data element via Com based transformation by calling the function
        &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt;
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000001 ), Call &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; shall returns with
       E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
       returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
         with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Call &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
       function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000001 ) return value check for the function
        &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
        return with E_SAFETY_INIT_OK for P11 and PJLR
        E2EXF_WAIT_FOR_FIRST_DATA_INIT_VALUE is configured as TRUE.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit valid DataElement
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000001 ), Check ComXf_SenderReceiverType returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
       &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
        returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
       VP( EB_E2ESE000001 ) The function
       &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns with
       E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
       Check the crc and counter at reception by calling the function
       &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Repeat the same Message Reception.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP( EB_E2ESE000001 )  The function call
        &lt;code&gt; E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
        return with a error E_SAFETY_VALID_REP.
        &lt;/para&gt;
      &lt;/listitem&gt;
    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_P11_050020</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf_P11.c</sourcefile>
      <sourceline>130</sourceline>
      <version>1</version>
      <description>Test Synopsis: Message loss of protected messages
Test Description: 
  This test verifies the at the Receiver1, the possibility to detect the communication link failure mode.
    Message loss of protected messages and its notification to the caller shall be checked
    for E2E Profile P11 variants.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;MaxDeltaCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;2&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;SyncCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;0&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
  
Test Execution: &lt;/programlisting&gt;
    For E2E profile 11 and profile JLR the following shall be executed:
     &lt;orderedlist&gt;

      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Serialize the complex data element via Com based transformation by calling the function
         &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt;.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP(EB_E2ESE000002), Check for the function &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; shall
        returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000002 ), Check for the function
        &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP(EB_E2ESE000002), Check for the function
        &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
        with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit valid DataElement
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
        VP( EB_E2ESE000002 ), Check &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; shall returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; returns with
        E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP(EB_E2ESE000002), Check for the function
        &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
        with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Call the api
        &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        in order to verify the received message is correct.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP(EB_E2ESE000002),(EB_E2ESE000044) Check  for the function
         &lt;code&gt; E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
         return with a error E_SAFETY_INIT_SEQ.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_P11_050030</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf_P11.c</sourcefile>
      <sourceline>247</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Message insertion and Addressing fault of protected messages
Test Description: 
    &lt;para&gt;
    This test verifies the possibility of Receiver1 to detect the communication link
    failure modes message insertion and Addressing fault and its notification to the caller shall be
    checked for E2E Profile P11 variants.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
  
Test Execution: &lt;/programlisting&gt;
    For E2E profile JLR and profile 11 the following shall be executed:
    &lt;orderedlist&gt;
      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        Serialize the complex data element via Com based transformation by calling
        &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; function.
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          VP ( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009,EB_E2ESE0000010, EB_E2ESE000012 ),
          Call &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt;, Shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
          Transmit valid DataElement
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
      &lt;para&gt; &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
      returns with E_OK.&lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          Call &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
          VP ( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000012 ) return value check
          for &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
          with  E_SAFETY_INIT_OK for P11 and PJLR as
          E2EXF_WAIT_FOR_FIRST_DATA_INIT_VALUE is configured as TRUE.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Transmit valid DataElement
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000012 ), Check the
         function &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         The function &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement
         &lt;/code&gt; shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000012 ) the function
         &lt;code&gt; E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement &lt;/code&gt; shall returns
         with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Corrupt the CRC value.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Call the api
         &lt;code&gt; E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
         in order to verify the received message is correct..
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000012 )  the function
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; Shall
         return with a error &lt;code&gt;E_SAFETY_INVALID_ERR&lt;/code&gt;.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_P11_050040</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf_P11.c</sourcefile>
      <sourceline>383</sourceline>
      <version>1</version>
      <description>Test Synopsis: Re-sequencing of protected messages
Test Description: 
    &lt;para&gt;
    This test verifies at Receiver1, the possibility to detect the communication link failure mode
    Re-sequencing and its notification to the caller shall be checked
    for E2E Profile P11.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;MaxDeltaCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;4&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;SyncCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;0&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
  
Test Execution: &lt;/programlisting&gt;
     For E2E profile JLR and profile 11 the following shall be executed:
    &lt;orderedlist&gt;

      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP (EB_E2ESE000102,EB_E2ESE.SwAD.003,EB_E2ESE.SwAD.004,EB_E2ESE.SwAD.020),
         Serialize the complex data element via Com based transformation by calling
         &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP(EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ), check for the
         function ComXf_SenderReceiverType shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP (EB_E2ESE000103,EB_E2ESE.SwAD.006,EB_E2ESE.SwAD.007,EB_E2ESE.SwAD.008,EB_E2ESE.SwAD.009),
        The &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
        returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ), Check
         &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         The &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Counter is too big ,Too many data is lost in sequence. &amp;  &lt;code&gt;PXX Checkstate Status
         &lt;/code&gt; shall be set to E2E_PXXSTATUS_LOST.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012,EB_E2ESE.SwAD.010,EB_E2ESE.SwAD.011,EB_E2ESE.SwAD.012,EB_E2ESE.SwAD.013,EB_E2ESE.SwAD.010,EB_E2ESE.SwAD.019 ), check
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;shall
         return E_SAFETY_INIT_OK for P11 and PJLR as E2EXF_WAIT_FOR_FIRST_DATA_INIT_VALUE is configured as TRUE
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         The &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ),
       Check &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
       returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         The &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ),
       Check &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
       returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         The &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ),
       Check &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
       returns with E2E_E_OK. MaxdeltaCounter is 4
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Again by calling the function
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;,
         Re-Synchronization process should undergo &amp;  &lt;code&gt;PXX Checkstate Status&lt;/code&gt; shall be
         set to E2E_P02STATUS_SYNC.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000004, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ), Check
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
         return with E_SAFETY_INIT_SEQ.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_ComXf_P11_050050</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_ComXf_P11.c</sourcefile>
      <sourceline>570</sourceline>
      <version>1</version>
      <description>Test Synopsis: Message loss window
Test Description: 
    &lt;para&gt;
      This test verifies the correct behaviour of the message loss window
      shall be checked for E2E Profile P11.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;MaxDeltaCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;4&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
    &lt;para&gt;
      - The parameter &lt;emphasis&gt;SyncCounterInit&lt;/emphasis&gt; shall be configured to &lt;emphasis&gt;0&lt;/emphasis&gt; for all receivers.
    &lt;/para&gt;
  
Test Execution: &lt;/programlisting&gt;
    For E2E profile JLR and profile 11 the following shall be executed:
    &lt;orderedlist&gt;

      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit();&lt;/code&gt;
          &lt;/listitem&gt;
         &lt;listitem&gt;
          Initialize the COM with &lt;code&gt;Com_Init();&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Serialize the complex data element via Com based transformation by calling
         &lt;code&gt;ComXf_SenderReceiverType&lt;/code&gt; function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         VP( EB_E2ESE0000045, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ) , Check
         &lt;code&gt; ComXf_SenderReceiverType&lt;/code&gt; shall returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        The &lt;code&gt; E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E2E_E_OK.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        The function &lt;code&gt; E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
        returns with E2E_E_OK.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Counter is too big ,Too many data is lost in sequence. &lt;code&gt;PXX Checkstate Status&lt;/code&gt;
        shall be set to E2E_PXXSTATUS_LOST.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE0000045, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 )
        &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; return
        with E_SAFETY_INIT_OK for Profile 11 and Profile JLR as E2EXF_WAIT_FOR_FIRST_DATA_INIT_VALUE
        is configured as TRUE
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
       Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
       with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
        with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Again by calling &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement
        &lt;/code&gt;,Re-Synchronization process should undergo &amp;  &lt;code&gt;PXX Checkstate Status&lt;/code&gt;
        shall be set to E2E_P02STATUS_SYNC.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE0000045, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE000012 ) The function
        &lt;code&gt; E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
        return with E_SAFETY_INIT_SEQ.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000045</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>
  </specobjects>
    <specobjects doctype="SwTS">
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_050000</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_SomeIpXf.c</sourcefile>
      <sourceline>1</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Reception timeout of protected messages
Test Description: 
    &lt;para&gt;
    This test verifies the possibility to detect the communication link failure mode
    no data is available and its notification to the caller shall be checked
    for each E2E Profile PXX.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
  
Test Execution: &lt;/programlisting&gt;
     For E2E profile 04, profile 05, profile 06, profile 07, profile 44 the following shall be executed:
    &lt;orderedlist&gt;
      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         Call E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement shallreturns
         with E_SAFETY_NODATA_NND. .
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP (EB_E2ESE000009,EB_E2ESE000010,EB_E2ESE000012) shall return
        with E_SAFETY_NODATA_NND.
       &lt;/para&gt;
      &lt;/listitem&gt;
    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_SomeIpXf_050001</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_SomeIpXf.c</sourcefile>
      <sourceline>53</sourceline>
      <version>1</version>
      <description>Test Synopsis: SOME/IP data transformer of protected messages
Test Description: 
   This test verifies that the message under test is serialized with the SOME/IP protocol and
   End-to-end protected.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 04, profile 05, profile 06, profile 07, profile 44 the following shall be executed:
     &lt;orderedlist&gt;

        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit a Valid Data.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP (EB_E2ESE000101,EB_E2ESE.SwAD.001, EB_E2ESE.SwAD.002,EB_E2ESE.SwAD.020,EB_E2ESE000103,
         EB_E2ESE.SwAD.029, EB_E2ESE.SwAD.033) 
         Verify the &lt;code&gt;SomeIpXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         equal to E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call  the function  &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement,
        &lt;/code&gt; Shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP (EB_E2ESE.SwAD.022,EB_E2ESE.SwAD.008,EB_E2ESE.SwAD.009) Verify  The function
        &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
        returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP (EB_E2ESE.SwAD.005), Call &lt;code&gt; E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
       VP (EB_E2ESE.SwAD.005, EB_E2ESE.SwAD.022, EB_E2ESE.SwAD.010, EB_E2ESE.SwAD.011, EB_E2ESE.SwAD.012,
       EB_E2ESE000101,EB_E2ESE.SwAD.009,EB_E2ESE.SwAD.013, EB_E2ESE.SwAD.019,EB_E2ESE000101,
       EB_E2ESE.SwAD.007, EB_E2ESE.SwAD.006, EB_E2ESE.SwAD.008),
       Call &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement,&lt;/code&gt;
       to check the CRC and counter at receiver end. Shall returns with a value.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt;SomeIpXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        in de-transformer chain.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP(EB_E2ESE.SwAD.001, EB_E2ESE.SwAD.023, EB_E2ESE.SwAD.029)
        Check that &lt;code&gt;SomeIpXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement
        &lt;/code&gt; shall returns E2E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP check received Data to be same as original data.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_050010</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_SomeIpXf.c</sourcefile>
      <sourceline>170</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Unintended message repetition of protected messages
Test Description: 
    This test case verifies, the possibility at SWC_Receiver1 to detect the communication link failure mode
    unintended message repetition and its notification to the caller shall be checked
    for each E2E Profile PXX.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 04, profile 05, profile 06, profile 07, profile 44 the following shall be executed:
     &lt;orderedlist&gt;
      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          Transmit valid DataElement
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Call &lt;code&gt;SomeIpXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
         shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000001 ) Call the function
        &lt;code&gt;Check E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt; E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;,
        shall return with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         VP ( EB_E2ESE000001 ) return value check for
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
         with  E_SAFETY_INIT_OK.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          Transmit valid DataElement
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          VP ( EB_E2ESE000001 ), Check call the function
          &lt;code&gt;SomeIpXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
        returns with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000001 ), Verify &lt;code&gt;
         E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns with
         E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call the function &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement
        &lt;/code&gt;, Check the crc and counter at reception by
        &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          Call &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;,
          Repeat the same Message Reception.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          VP ( EB_E2ESE000001 ),
          &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
          return with  a error E_SAFETY_INVALID_REP.
        &lt;/para&gt;
      &lt;/listitem&gt;
    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_050020</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_SomeIpXf.c</sourcefile>
      <sourceline>297</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Message loss of protected messages
Test Description: 
    This test case verifies, the possibility at SWC_Receiver1 to detect the communication link failure mode
    Message loss of protected messages and its notification to the caller shall be checked
    for each E2E Profile PXX.
  
Test Object: E2ESEXf Target SW
Test Precondition: 
  
Test Execution: &lt;/programlisting&gt;
    For E2E profile 04, profile 05, profile 06, profile 07, profile 44 the following shall be executed:
     &lt;orderedlist&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         Transmit valid DataElement
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP( EB_E2ESE000002 ), Check the function
         &lt;code&gt;SomeIpXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000002 ), Verify
        &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
        with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         Check the message at receiver side.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         Check message received correctly.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          Transmit valid DataElement again
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000002 ), Verify
        &lt;code&gt;SomeIpXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
        with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         VP ( EB_E2ESE000002 ) , Check that function
         &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
         shall returns with E2E_E_OK.
         &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          Transmit valid DataElement again
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000002 ), Verify
        &lt;code&gt;SomeIpXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
        with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         VP ( EB_E2ESE000002 ) , Check that function
         &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
         shall returns with E2E_E_OK.
         &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Call the api &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        in order to verify the received message is correct.
         &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         VP (EB_E2ESE000002),(EB_E2ESE000044) Check the function
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
         return with a error E_SAFETY_INIT_SEQ.
         &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_050030</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_SomeIpXf.c</sourcefile>
      <sourceline>441</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Message insertion and Addressing fault of protected messages
Test Description: 
    &lt;para&gt;
    This test verifies the possibility of SWC_Receiver1 to detect the communication link
    failure modes message insertion and Addressing fault and its notification to the caller shall be
    checked for each E2E Profile PXX.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
  
Test Execution: &lt;/programlisting&gt;
    For E2E profile 04, profile 05, profile 06, profile 07, profile 44 the following shall be executed:
    &lt;orderedlist&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        Transmit valid DataElement
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE0000012 ),
         Verify the &lt;code&gt;SomeIpXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
         shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;,
         Shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

       &lt;listitem&gt;
       &lt;para&gt;
         VP( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE0000012 ),
         Verify  &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
      &lt;para&gt;call &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;.
      &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE0000012 ),
         &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
         return value with E_SAFETY_INIT_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;


      &lt;listitem&gt;
       &lt;para&gt;
         Transmit valid DataElement
        &lt;/para&gt;
      &lt;/listitem&gt;


      &lt;listitem&gt;
        &lt;para&gt;
         VP( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE0000012 ),
         &lt;code&gt;SomeIpXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
        returns with E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP( EB_E2ESE000003, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE0000012 ),
         &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
          Corrupt the CRC value.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call the api &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement
        &lt;/code&gt; in order to verify the received message is correct.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP( EB_E2ESE000003, EB_E2ESE000005, EB_E2ESE000007, EB_E2ESE000009, EB_E2ESE000010, EB_E2ESE0000012 ),
         Verify the &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement
         &lt;/code&gt; shall return with a error E_SAFETY_INVALID_ERR.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_050060</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_SomeIpXf.c</sourcefile>
      <sourceline>577</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Masquerading of protected messages
Test Description: 
    &lt;para&gt;
    This test verifies the possibility at SWC_Receiver1 to detect the communication link failure mode
    masquerading and its notification to the caller shall be checked
    for each E2E Profile PXX.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
  
Test Execution: &lt;/programlisting&gt;
    For each E2E profile PXX, the following shall be executed:
    &lt;orderedlist&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        Transmit valid DataElement
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP ( EB_E2ESE000008, EB_E2ESE000009, EB_E2ESE000012 ),Check
         &lt;code&gt;SomeIpXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000008, EB_E2ESE000009, EB_E2ESE000012 ) Check for function
        &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
        with E2E_E_OK
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
       Call &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000008, EB_E2ESE000009, EB_E2ESE000012 ) |The function
        &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        return value with E_SAFETY_NODATA_ERR )
       &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_050070</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_SomeIpXf.c</sourcefile>
      <sourceline>656</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Message loss window
Test Description: 
    &lt;para&gt;
      This test verifies the correct behaviour of the message loss window
      shall be checked for each E2E Profile P04, P05, P06.
    &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
  
Test Execution: &lt;/programlisting&gt;
    For each E2E profile PXX, the following shall be executed:
    &lt;orderedlist&gt;
      &lt;listitem&gt;
        Before the transmission of data, initialize as follows:
        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        Transmit valid DataElement
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        VP( EB_E2ESE000045, EB_E2ESE00009, EB_E2ESE000010, EB_E2ESE000012)
        &lt;code&gt;SomeIpXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;
        shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt;    &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP (  EB_E2ESE000045, EB_E2ESE00009, EB_E2ESE000010, EB_E2ESE000012 )
    &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; returns with E2E_E_OK.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Call &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; .
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
         VP (  EB_E2ESE000045, EB_E2ESE00009, EB_E2ESE000010, EB_E2ESE000012 )
         &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall returns
         with E2E_E_OK.
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Check the crc and counter at reception by
        &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; and
        &lt;code&gt;PXX Check Status&lt;/code&gt; shall set to "Ok_SOME_LOST".
       &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        VP ( EB_E2ESE000045, EB_E2ESE00009, EB_E2ESE000010, EB_E2ESE000012 )
        &lt;code&gt;E2EXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt; shall
        return with a error E_SAFETY_INIT_OK.
       &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000045</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_ErrorInd_050080</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_SomeIpXf.c</sourcefile>
      <sourceline>751</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test for external triggering (payload is 0) embedded in the whole transformer chain
Test Description: 
    &lt;para&gt;
     This test verifies that the message under test is serialized/deserialized for external triggering (payload is 0)
     with the SOME/IP protocol and End-to-end protected.
   &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 04, profile 05, profile 06, profile 07, profile 44 the following shall be executed:
     &lt;orderedlist&gt;

        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit a Valid Data.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP (EB_E2ESE000101,EB_E2ESE000103) 
         Verify the &lt;code&gt;SomeIpXf_ExternalTrigger1&lt;/code&gt; shall
         equal to E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call the function  &lt;code&gt;E2EXf_ExternalTrigger1,
        &lt;/code&gt; Shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt; E2EXf_Inv_ExternalTrigger1 in de-transformer chain&lt;/code&gt;
        shall returns with E_SAFETY_INIT_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt;SomeIpXf_Inv_ExternalTrigger1&lt;/code&gt;
        in de-transformer chain.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP check received Data to be same as original data.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_SomeIpXf_050001_disableEndToEndCheck_CHECK</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_SomeIpXf.c</sourcefile>
      <sourceline>834</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test for inverse transformer with end-to-end check disabled
Test Description: 
    &lt;para&gt;
     This test verifies that the inverse transformer which has the end-to-end check 
      parameter disabled with the SOME/IP protocol and End-to-end protected.
   &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 04, profile 05, profile 06, profile 07, profile 44 the following shall be executed:
     &lt;orderedlist&gt;

        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit a Valid Data.
        &lt;/para&gt;
      &lt;/listitem&gt;
      
      &lt;listitem&gt;
        &lt;para&gt; 
         Verify the &lt;code&gt;SomeIpXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         equal to E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call  the function  &lt;code&gt;E2EXf_SenderApplication1,
        &lt;/code&gt; Shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Verify  The function
        &lt;code&gt;E2EXf_SenderApplication1&lt;/code&gt; shall
        returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;
      
      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt; E2EXf_Inv_ReceiverApplication1&lt;/code&gt;
        function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
       Call &lt;code&gt;E2EXf_Inv_ReceiverApplication1,&lt;/code&gt;
       to check the CRC and counter at receiver end. Shall return E_SAFETY_INIT_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt;SomeIpXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        in de-transformer chain.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP check received Data to be same as original data.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>51</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_SomeIpXf_050002_disableEndToEndCheck_NO_CHECK</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_SomeIpXf.c</sourcefile>
      <sourceline>931</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Test for inverse transformer with end-to-end check enabled
Test Description: 
    &lt;para&gt;
     This test verifies that the inverse transformer which has the end-to-end check 
      parameter enabled with the SOME/IP protocol and End-to-end protected.
   &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 04, profile 05, profile 06, profile 07, profile 44 the following shall be executed:
     &lt;orderedlist&gt;

        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit a Valid Data.
        &lt;/para&gt;
      &lt;/listitem&gt;
      
      &lt;listitem&gt;
        &lt;para&gt;
         Verify the &lt;code&gt;SomeIpXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         equal to E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call  the function  &lt;code&gt;E2EXf_SenderApplication1,
        &lt;/code&gt; Shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Verify  The function
        &lt;code&gt;E2EXf_SenderApplication1&lt;/code&gt; shall
        returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;
      
      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt; E2EXf_Inv_ReceiverApplication2&lt;/code&gt;
        function.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
       Call &lt;code&gt;E2EXf_Inv_ReceiverApplication2,&lt;/code&gt;
       E2E Transformer shall skip the invocation of the E2E Library – 
       it shall only perform buffer processing. Return value shall be E_SAFETY_NOSM_DEC.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call &lt;code&gt;SomeIpXf_Inv_ReceiverApplication2_RPortReceiver2_ComplexData_TestElement&lt;/code&gt;
        in de-transformer chain.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP check received Data to be same as original data.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE000103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>EB_E2ESE.SwAD.033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>
    <specobject>
      <id>TS_E2ESEXf_SomeIpXf_050003_Forward_Code</id>
      <status>approved</status>
      <source>EB integration test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_E2ESEXfmgmt/doc/SwTS/testcases/implemented/E2ESEXf_Test_BlackBox_ErrorInd_SomeIpXf.c</sourcefile>
      <sourceline>1029</sourceline>
      <version>1</version>
      <description>Test Synopsis: Test for data forwarding
Test Description: 
    &lt;para&gt;
      This test verifies that if the DataTransformationStatusForwarding is set to
      transformerStatusForwarding, the function E2EXf_transformerId shall invoke E2E_PXXForward().
   &lt;/para&gt;
  
Test Object: E2ESEXf Target SW
Test Precondition: 
   
Test Execution: &lt;/programlisting&gt;
    For E2E profile 01, profile 02, profile 04, profile 05, profile 06, profile 07, profile 11, profile 44 the following shall be executed:
     &lt;orderedlist&gt;

        &lt;itemizedlist&gt;
          &lt;listitem&gt;
          Initialize E2E transformer with &lt;code&gt;E2EXf_PartitionInit().&lt;/code&gt;
          &lt;/listitem&gt;
        &lt;/itemizedlist&gt;

      &lt;listitem&gt;
       &lt;para&gt;
        Transmit a Valid Data.
        &lt;/para&gt;
      &lt;/listitem&gt;
      
      &lt;listitem&gt;
        &lt;para&gt;
         Verify the &lt;code&gt;SomeIpXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
         equal to E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Call  the function  &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement,
        &lt;/code&gt; Shall returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
        Verify  The function
        &lt;code&gt;E2EXf_SenderApplication1_PPortSender1_ComplexData_TestElement&lt;/code&gt; shall
        returns with E2E_E_OK.
        &lt;/para&gt;
      &lt;/listitem&gt;

      &lt;listitem&gt;
        &lt;para&gt;
         VP Verify the counter and CRC value.
        &lt;/para&gt;
      &lt;/listitem&gt;

    &lt;/orderedlist&gt;
  &lt;programlisting&gt;
Test Input: 
  
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>EB_E2ESE000101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
