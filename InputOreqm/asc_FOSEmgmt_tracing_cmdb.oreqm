<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_FOSEmgmt_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/build/reqm/ReqM2_DocBookImporter/reqm_EXT_DSN.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/build/reqm/ReqM2_DocBookImporter/reqm_EXT_REQDEF.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/build/reqm/ReqM2_GenericImporter/reqm_EXT_SRC.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/build/reqm/ReqM2_GenericImporter/reqm_EXT_SRCXML.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/build/reqm/ReqM2_GenericImporter/reqm_EXT_TCS.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/build/reqm/ReqM2_OldCImporter/reqm_EXT_TCS_LEGACY.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/build/reqm/ReqM2_DocBookImporter/reqm_REQDEF.reqm</commandline>
    <timestamp>Mon Jun 17 22:00:37 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_FOSEmgmt_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/build/reqm/ReqM2_DocBookImporter/reqm_EXT_DSN.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/build/reqm/ReqM2_DocBookImporter/reqm_EXT_REQDEF.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/build/reqm/ReqM2_GenericImporter/reqm_EXT_SRC.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/build/reqm/ReqM2_GenericImporter/reqm_EXT_SRCXML.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/build/reqm/ReqM2_GenericImporter/reqm_EXT_TCS.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/build/reqm/ReqM2_OldCImporter/reqm_EXT_TCS_LEGACY.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/build/reqm/ReqM2_DocBookImporter/reqm_REQDEF.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/1018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>swpad</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swts</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/1010: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>

      <!-- legacy items -->
      <regex>dev</regex>
      <regex>man</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>
    <!-- The Ruleset for RMP4.0 is currently identical to the previous rule set. This rule is
        intoduce to show that the right file is uses. It will be removed when the RMP4.0 rule set is
    reworked -->
    <rule>
      <name>INFO.Rule set RMP4.0</name>
      <description>This rules indicates that RMP4.0 rule set is used.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.general.doctypes</name>
      <description>The used doctype is not part of the tracing model</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobjects/@doctype</applyto>
          <condition>((. != 'creq') or (. != 'fea') or (. != 'swpad') or (. != 'swts') or (. != 'swrs') or (. !='swad') or (. != 'swintts') or (.!= 'swdd') or (. != 'swurs') or (. != 'swmts') or (. != 'swuts') or (. != 'impl') or (. != 'dev') or (. != 'man') or (. != 'lim'))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected.coverage</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.count</name>
      <description>Unit requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swrs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swurs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd') and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.doctypes</name>
      <description>Requirements can be covered only by swurs, swad, dev, lim, swdd, impl, swuts, swmts, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs')]</applyto>
          <condition>(./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swurs, swad, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swuts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swmts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swintts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.impl.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='impl')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes"))</condition>
        </conditioncheck>
      </conditionchecks>
          </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

  </rules>
    <oreqmRules>

        <rule>
            <name>WRN.swts.needscoverage.count</name>
            <description>Violated if there are more than 10 swts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.man.needscoverage.count</name>
            <description>Violated if there are more than 10 man specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>man.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swintts.needscoverage.count</name>
            <description>Violated if there are more than 10 swintts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swintts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swmts.needscoverage.count</name>
            <description>Violated if there are more than 10 swmts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swmts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swuts.needscoverage.count</name>
            <description>Violated if there are more than 10 swuts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swuts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swpad.needscoverage.count</name>
            <description>Violated if there are more than 10 swpad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swpad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.needscoverage.count</name>
            <description>Violated if there are more than 10 swrs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.needscoverage.count</name>
            <description>Violated if there are more than 10 swad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.needscoverage.count</name>
            <description>Violated if there are more than 10 swurs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.needscoverage.count</name>
            <description>Violated if there are more than 10 swdd specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.impl.needscoverage.count</name>
            <description>Violated if there are more than 10 impl specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>impl.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swrs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.fulfilledby.count</name>
            <description>Violated if there are more than 10 swad specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swurs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.fulfilledby.count</name>
            <description>Violated if there are more than 10 swdd specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="swdd">
    <specobject>
      <id>module.swdd.ErrorHandling.OptLength.1</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>4420</sourceline>
      <version>1</version>
      <description>
                If the OptLength field has a value less than 4 bytes or more than 8 bytes,
                then this option and the rest of the message shall be silentely discarded.
                All previous successful parsed content of the message remains valid.
              </description>
      <rationale>
                In case of an invalid OptLength field the integrity of the remaining
                message can not be guaranteed.
              </rationale>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swdd.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>0</internalId></specobject>
    <specobject>
      <id>module.swdd.ErrorHandling.OptLength.2</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>4440</sourceline>
      <version>1</version>
      <description>
                If the length indicated by OptLength exceeds the size of the buffer
                containing the message (sum of OptLength plus length of parsed
                message &amp;gt; buffer size), then this option and the rest of the message
                shall be silentely discarded. All previous successful parsed content
                of the message remains valid.
              </description>
      <rationale>
                If the OptLength field exceeds buffer boundaries, then the integrity of
                the remaining message can not be guaranteed.
              </rationale>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swdd.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>1</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>module.swdd.ROMConsumption</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>4633</sourceline>
      <version>1</version>
      <description>
                  The ROM consumption for reference configuration 1
                  must not exceed &amp;lt;n-number&amp;gt; of bytes.
                </description>
      <rationale>
                  The defined ROM consumption is the result of all analyzed configuration
                  parameters of reference configuration 1.
                  The number is based on the assumption of amount and size of analyzed
                  configration parameters.
                </rationale>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>2</internalId></specobject>
    <specobject>
      <id>module.swdd.ROMMonitoring</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>4653</sourceline>
      <version>1</version>
      <description>
                  The ROM consumption of FOCom shall be monitored.
                  Deviations from the calculated consumption shall be analyzed.
                </description>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>3</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>module.swdd.RAMConsumption</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>4696</sourceline>
      <version>1</version>
      <description>
                  The RAM consumption for reference configuration 1
                  must not exceed &amp;lt;n-number&amp;gt; of bytes.
                </description>
      <rationale>
                  The defined RAM consumption is the result of all analyzed configuration
                  parameters of reference configuration 1.
                  The number is based on the assumption of amount and size of analyzed
                  configration parameters.
                </rationale>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>4</internalId></specobject>
    <specobject>
      <id>module.swdd.RAMMonitoring</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>4716</sourceline>
      <version>1</version>
      <description>
                  The RAM consumption of FOCom shall be monitored.
                  Deviations from the calculated consumption shall be analyzed.
                </description>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>5</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>module.swdd.SocketResource.Mitigation</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>4962</sourceline>
      <version>1</version>
      <description>
                    There shall exist the configuration parameter ModNumberOfSocketsPerPort
                    that limits the number of sockets a remote port is allowed to allocate.
                    Any connenction attemp beyond the configured number shall be silently
                    discarded. The implementation of this mechanism shall consider specifics
                    of the transport layer (e.g. TCP).
                  </description>
      <rationale>
                    This mechanism protects the sockets from unwanted and unpredictable
                    consumption without restricting flexibility of a project.
                  </rationale>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swdd.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>6</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>Constraint_2</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>4998</sourceline>
      <version>1</version>
      <description>Constraint for header file Header whenever used by other modules</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>7</internalId></specobject>
    <specobject>
      <id>Constraint_1</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5008</sourceline>
      <version>1</version>
      <description>Constraint for Public Interface 1 whenever used by other modules</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>8</internalId></specobject>
    <specobject>
      <id>MyDesignRequirement1</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5018</sourceline>
      <version>1</version>
      <description>My dummy description</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Imported_Requirement_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>9</internalId></specobject>
    <specobject>
      <id>Own_Requirement</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5034</sourceline>
      <version>1</version>
      <description>Requirements specification text of Own Requirement </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <fulfilledby>
        <ffbObj>
          <ffbId>Imported_Requirement_3</ffbId>
          <ffbType>swrs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linkerror</ffbLinkstatus><ffbLinkerror>referenced object does not exist.</ffbLinkerror><ffbObjcovstatus>uncovered</ffbObjcovstatus></ffbObj>
      <containerCovstatus>uncovered</containerCovstatus></fulfilledby>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>Own_Requirement_3</ffbSrcId><ffbSrcType>swdd</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>12</internalId><ffbDeststatus>target not covered.</ffbDeststatus></incomingFfbLink><incomingFfbLink><ffbSrcId>Own_Requirement_4</ffbSrcId><ffbSrcType>swdd</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>13</internalId><ffbDeststatus>target not covered.</ffbDeststatus></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>10</internalId></specobject>
    <specobject>
      <id>Own_Requirement_2</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5052</sourceline>
      <version>1</version>
      <description>Requirements specification text of Own Requirement 2</description>
      <providescoverage>
        <provcov>
          <linksto>Imported_Requirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>Own_Requirement_3</ffbSrcId><ffbSrcType>swdd</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>12</internalId></incomingFfbLink><incomingFfbLink><ffbSrcId>Own_Requirement_4</ffbSrcId><ffbSrcType>swdd</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>13</internalId></incomingFfbLink></incomingFfbLinks><violations><ruleid>ERR.swdd.needscoverage.count</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>
    <specobject>
      <id>Own_Requirement_3</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5066</sourceline>
      <version>1</version>
      <description>Requirements specification text of Own Requirement 3</description>
      <fulfilledby>
        <ffbObj>
          <ffbId>Own_Requirement</ffbId>
          <ffbType>swdd</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linkerror</ffbLinkstatus><ffbLinkerror>target not covered.</ffbLinkerror><ffbObjcovstatus>uncovered</ffbObjcovstatus><internalId>10</internalId></ffbObj>
        <ffbObj>
          <ffbId>Own_Requirement_2</ffbId>
          <ffbType>swdd</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>11</internalId></ffbObj>
      <containerCovstatus>partially</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>Imported_Requirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>Imported_Requirement_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swdd.needscoverage.count</ruleid></violations><oreqmViolations/><covstatus>partially</covstatus><internalId>12</internalId></specobject>
    <specobject>
      <id>Own_Requirement_4</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5096</sourceline>
      <version>1</version>
      <description>Requirements specification text for Public Interface 1</description>
      <fulfilledby>
        <ffbObj>
          <ffbId>Own_Requirement</ffbId>
          <ffbType>swdd</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linkerror</ffbLinkstatus><ffbLinkerror>target not covered.</ffbLinkerror><ffbObjcovstatus>uncovered</ffbObjcovstatus><internalId>10</internalId></ffbObj>
        <ffbObj>
          <ffbId>Own_Requirement_2</ffbId>
          <ffbType>swdd</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>11</internalId></ffbObj>
      <containerCovstatus>partially</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>Imported_Requirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
        <provcov>
          <linksto>Imported_Requirement_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swdd.needscoverage.count</ruleid></violations><oreqmViolations/><covstatus>partially</covstatus><internalId>13</internalId></specobject>
    <specobject>
      <id>Own_Requirement_5</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5126</sourceline>
      <version>1</version>
      <description>This is my Own_Requirement_5 covered by an external interface </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>14</internalId></specobject>
    <specobject>
      <id>dsn.Module.Transition.ResetToInit</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5137</sourceline>
      <version>1</version>
      <description>Reset State Machine to default state</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>15</internalId></specobject>
    <specobject>
      <id>dsn.Module.Transition.Init.ComposedState</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5147</sourceline>
      <version>1</version>
      <description>This is the description of the RunTrigger transition.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>16</internalId></specobject>
    <specobject>
      <id>dsn.Module.Transition.Internal</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5157</sourceline>
      <version>1</version>
      <description>Internal Transition</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>17</internalId></specobject>
    <specobject>
      <id>dsn.Module.Transition.Init</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5168</sourceline>
      <version>1</version>
      <description>This is the description of the initial transition.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>18</internalId></specobject>
    <specobject>
      <id>dsn.Module.Transition.IntState2.Init</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5178</sourceline>
      <version>1</version>
      <description>This is the description of the exitTrigger transition. </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>19</internalId></specobject>
    <specobject>
      <id>dsn.Module.Transition.Init.IntState</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5189</sourceline>
      <version>1</version>
      <description>&lt;description/&gt;</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>20</internalId></specobject>
    <specobject>
      <id>dsn.Module.Transition.IntState.IntState2</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5199</sourceline>
      <version>1</version>
      <description>This is the description of the internal Trigger transition.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>21</internalId></specobject>
    <specobject>
      <id>Design module_module1.ExternalHeader.1</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5209</sourceline>
      <version>1</version>
      <description>this is External Header 1 constraints</description>
      <comment>
          This requirement was generated based on the constraints specified by a requirement present in one of the Referenced External View of the model.
        </comment>
    <violations><ruleid>ERR.swdd.needscoverage.count</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>
    <specobject>
      <id>Design module_module1.mysupertype.1</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5220</sourceline>
      <version>1</version>
      <description>some super requirement</description>
      <rationale>rationale ?</rationale>
      <comment>
          This requirement was generated based on the constraints specified by a requirement present in one of the Referenced External View of the model.
        </comment>
      <verifycrit>verification criteria shall be specified here</verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
        <needscov><needsobj>swrs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>23</internalId></specobject>
    <specobject>
      <id>Design module_module1.uint8.requirement</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5236</sourceline>
      <version>1</version>
      <description>uint8 can only be used in range [0...254] duh !</description>
      <comment>
          This requirement was generated based on the constraints specified by a requirement present in one of the Referenced External View of the model.
        </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>24</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>dsn-gen.Design_module</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/design/pdf/FOCom_Design-profiled.xml</sourcefile>
      <sourceline>5251</sourceline>
      <version>1.0</version>
      <description>Specification object automatically generated from design model through realization connection of design entity '
              Design module'</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Imported_Requirement_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>25</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>FOMM.swdd.RAMConsumption</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/design/pdf/FOMM_Design-profiled.xml</sourcefile>
      <sourceline>4930</sourceline>
      <version>1</version>
      <description>
                  The RAM consumption must not exceed 3 bytes on a 32 bit architecture.
                </description>
      <rationale>
                  RAM allocation is independent of the configuration parameters.
                </rationale>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>26</internalId></specobject>
    <specobject>
      <id>FOMM.swdd.RAMMonitoring</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/design/pdf/FOMM_Design-profiled.xml</sourcefile>
      <sourceline>4946</sourceline>
      <version>1</version>
      <description>
                  The RAM consumption of FOMM shall be monitored.
                  Deviations from the calculated consumption shall be analyzed.
                </description>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>27</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>FOMM.dsn.AtomicsInclusion</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/design/pdf/FOMM_Design-profiled.xml</sourcefile>
      <sourceline>5192</sourceline>
      <version>1</version>
      <description>Atomics.h shall be included in FOMM_Headers.h, so that FOMM can have access to the Atomics_* APIs.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Headers.h_12</srcid><srcstatus/><internalId>240</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOMM_ComTest_Headers</srcid><srcstatus/><internalId>430</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>
    <specobject>
      <id>FOMM.dsn.AtomicsThreadFence</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/design/pdf/FOMM_Design-profiled.xml</sourcefile>
      <sourceline>5203</sourceline>
      <version>1</version>
      <description>The access to the global data &lt;i&gt;FOMM_Mode&lt;/i&gt; (in FOMM_GetMode() function) must be consistent; it&lt;i&gt; &lt;/i&gt;shall be done without reordering the read and write memory accesses.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_424</srcid><srcstatus/><internalId>299</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>
    <specobject>
      <id>FOMM.dsn.DetInclusion</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/design/pdf/FOMM_Design-profiled.xml</sourcefile>
      <sourceline>5213</sourceline>
      <version>1</version>
      <description>When DET is switched ON, Det.h shall be included in FOMM_Headers.h, so that FOMM can have access to Det_ReportError()/ Det_ReportRuntimeError() APIs and development errors.
</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate_macros/FOMM_Macros.m_48</srcid><srcstatus/><internalId>270</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOMM_ComTest_Headers</srcid><srcstatus/><internalId>430</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>
    <specobject>
      <id>FOMM.dsn.DioInclusion</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/design/pdf/FOMM_Design-profiled.xml</sourcefile>
      <sourceline>5225</sourceline>
      <version>1</version>
      <description>Dio.h shall be included in FOMM_Proxy.h, so that FOMM can have access to the Dio_WriteChannel() API.
</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Proxy.h_21</srcid><srcstatus/><internalId>244</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>
    <specobject>
      <id>FOMM.dsn.ExclusiveArea_Mode</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/design/pdf/FOMM_Design-profiled.xml</sourcefile>
      <sourceline>5236</sourceline>
      <version>1</version>
      <description>The access to the global data &lt;i&gt;FOMM_Mode &lt;/i&gt;shall be protected with an exclusive area.
</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_514</srcid><srcstatus/><internalId>308</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_567</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_743</srcid><srcstatus/><internalId>331</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>
    <specobject>
      <id>FOMM.dsn.ExclusiveArea_PFN_Flag</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/design/pdf/FOMM_Design-profiled.xml</sourcefile>
      <sourceline>5247</sourceline>
      <version>1</version>
      <description>The access to the global data &lt;i&gt;FOMM_PFN_Flag &lt;/i&gt;shall be protected with an exclusive area.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_513</srcid><srcstatus/><internalId>307</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_566</srcid><srcstatus/><internalId>313</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_601</srcid><srcstatus/><internalId>317</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_648</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_676</srcid><srcstatus/><internalId>324</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_732</srcid><srcstatus/><internalId>328</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>
    <specobject>
      <id>FOMM.dsn.FOCanInclusion</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/design/pdf/FOMM_Design-profiled.xml</sourcefile>
      <sourceline>5257</sourceline>
      <version>1</version>
      <description>FOCan.h shall be included in FOMM_Headers.h, so that FOMM can have access to the FOCan_DeInit() API.
</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Headers.h_14</srcid><srcstatus/><internalId>241</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>
    <specobject>
      <id>FOMM.dsn.FOComInclusion</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/design/pdf/FOMM_Design-profiled.xml</sourcefile>
      <sourceline>5268</sourceline>
      <version>1</version>
      <description>FOCom.h shall be included in FOMM_Headers.h, so that FOMM can have access to the FOCom_DeInit() API.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Headers.h_16</srcid><srcstatus/><internalId>242</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>
    <specobject>
      <id>FOMM.dsn.OsInclusion</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/design/pdf/FOMM_Design-profiled.xml</sourcefile>
      <sourceline>5278</sourceline>
      <version>1</version>
      <description>To prevent cross core actions, the FOMM module shall include the header file Os.h. In addition a unit test shall have the possibility to provide its own header file to stub the API of the Os.
</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Headers.h_10</srcid><srcstatus/><internalId>239</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>
    <specobject>
      <id>FOMM.dsn.RteInclusion</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/design/pdf/FOMM_Design-profiled.xml</sourcefile>
      <sourceline>5289</sourceline>
      <version>1</version>
      <description>When Rte is used, Rte_FOMM_Type.h shall be included in FOMM.h, Rte_FOMM.h shall be included in FOMM.c (via FOMM_Headers.h)  and the FOMM module shall rely on the RTE to provide all definitions via Rte_FOMM_Type.h/Rte_FOMM.h.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate_macros/FOMM_Macros.m_46</srcid><srcstatus/><internalId>269</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>
    <specobject>
      <id>FOMM.dsn.WdgMInclusion</id>
      <status>approved</status>
      <source>EB requirements</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/design/pdf/FOMM_Design-profiled.xml</sourcefile>
      <sourceline>5299</sourceline>
      <version>1</version>
      <description>WdgM_Callouts.h shall be included in FOMM_Headers.h, so that the prototype emitted by WdgM can be verified.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Headers.h_18</srcid><srcstatus/><internalId>243</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOMM_ComTest_Headers</srcid><srcstatus/><internalId>430</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>FOCom.EB.ServiceDefinition.Init</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>8</sourceline>
      <version>1</version>
      <description>
      Service name: FOCom_Init
      Syntax: void FOCom_Init(const FOCom_ConfigType* ConfigPtr)
      Service ID [hex]: 0x01
      Sync/Async: Synchronous
      Reentrancy: Non Reentrant
      Parameters (in): ConfigPtr : Pointer to the FOCom module's configuration data.
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service shall initialize internal data structures of the module.
      Available via: FOCom.h
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>39</internalId></specobject>
    <specobject>
      <id>FOCom.EB.ServiceDefinition.Deinit</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <description>
      Service name: FOCom_DeInit
      Syntax: void FOCom_DeInit()
      Service ID [hex]: 0x02
      Sync/Async: Synchronous
      Reentrancy: Non Reentrant
      Parameters (in): None
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service shall put the module back into an uninitialized state.
      Available via: FOCom.h
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>40</internalId></specobject>
    <specobject>
      <id>FOCom.EB.ServiceDefinition.VersionInfo</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>58</sourceline>
      <version>1</version>
      <description>
      Service name: FOCom_GetVersionInfo
      Syntax: void FOCom_GetVersionInfo(Std_VersionInfoType* VersionInfoPtr)
      Service ID [hex]: 0x03
      Sync/Async: Synchronous
      Reentrancy: Non Reentrant
      Parameters (in): None
      Parameters (inout): None
      Parameters (out): VersionInfoPtr : Pointer to where to store the version information of the module.
      Return value: None
      Description: This service shall return the version information of this module.
      Available via: FOCom.h
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>41</internalId></specobject>
    <specobject>
      <id>FOCom.EB.ServiceDefinition.Transmit</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>83</sourceline>
      <version>1</version>
      <description>
      Service name: FOCom_Transmit
      Syntax: Std_ReturnType FOCom_Transmit (
        PduIdType TxPduId,
        uint8 *BufferPtr,
        uint16 BufferSize
        )
      Service ID [hex]: 0x04
      Sync/Async: Synchronous
      Reentrancy: Reentrant for different PduIds. Non-reentrant for the same PduId.
      Parameters (in): TxPduId : Identification of the I-PDU to be transmitted.
                       BufferSize : Size of the buffer.
      Parameters (inout): BufferPtr : Pointer to the buffer provided by upper layer. The same buffer pointer shall be passed to the lower layer transmit call.
      Parameters (out):   None
      Return value: Std_ReturnType E_OK: Transmit request is accepted.
                    E_NOT_OK: Transmit request is not accepted.
      Description: This service shall request transmission of an I-PDU from upper layer (Safety RTE) to lower layer (FOCan).
      Available via: FOCom.h
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>144</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>42</internalId></specobject>
    <specobject>
      <id>FOCom.EB.ServiceDefinition.TxConfirmation</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>120</sourceline>
      <version>1</version>
      <description>
      Service name:  FOCom_FOCanTxConfirmation
      Syntax:  void FOCom_FOCanTxConfirmation (
        PduIdType TxPduId,
        Std_ReturnType Result
        )
      Service ID [hex]: 0x05
      Sync/Async: Synchronous
      Reentrancy: Reentrant for different PduIds. Non-reentrant for the same PduId.
      Parameters (in): TxPduId : Identification of the I-PDU.
                       Result : Result of transmission. E_OK: I-PDU was transmitted successfully, else transmission failed
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service shall report the result of transmission result of the specified I-PDU and hand result over to the Safety RTE.
      Available via: FOCom.h
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>144</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>43</internalId></specobject>
    <specobject>
      <id>FOCom.EB.ServiceDefinition.TxConfirmationCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>155</sourceline>
      <version>1</version>
      <description>
      Service name: &amp;lt;FOComUser_CbkTxConfirmation&amp;gt;
      Syntax: void &amp;lt;FOComUser_CbkTxConfirmation&amp;gt; (
        PduIdType TxPduId,
        Std_ReturnType Result
        )
      Sync/Async: Synchronous
      Reentrancy: Reentrant for different PduIds. Non-reentrant for the same PduId.
      Parameters (in): TxPduId : Identification of the I-PDU.
                       Result : Result of transmission. E_OK: I-PDU was transmitted successfully, else transmission failed
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service is called after an I-PDU has been transmitted via FOCan.
      Available via: Rte_Cbk.h
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>144</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>44</internalId></specobject>
    <specobject>
      <id>FOCom.EB.ServiceDefinition.RxIndication</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>189</sourceline>
      <version>1</version>
      <description>
      Service name: FOCom_FOCanRxIndication
      Syntax: void FOCom_FOCanRxIndication (
        PduIdType RxPduId,
        uint8 *BufferPtr,
        uint16 BufferLength
        )
      Service ID [hex]: 0x06
      Sync/Async: Synchronous
      Reentrancy: Reentrant for different PduIds. Non-reentrant for the same PduId.
      Parameters (in): RxPduId : Identification of the I-PDU.
                       BufferLength : Length of the received I-PDU.
      Parameters (inout): BufferPtr  : Pointer to a buffer containing the received I-PDU.
      Parameters (out): None
      Return value: None
      Description: Receives I-PDU from lower layer, verify its correctness and hand it over to the upper layer.
      Available via: FOCom.h
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>145</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>45</internalId></specobject>
    <specobject>
      <id>FOCom.EB.ServiceDefinition.RxIndicationCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>225</sourceline>
      <version>1</version>
      <description>
      Service name: &amp;lt;FOComUser_CbkRxIndication&amp;gt;
      Syntax: void &amp;lt;FOComUser_CbkRxIndication&amp;gt; (
        PduIdType PduId,
        uint8 *BufferPtr,
        uint16 BufferLength
        )
      Sync/Async: Synchronous
      Reentrancy: Reentrant for different PduIds. Non-reentrant for the same PduId.
      Parameters (in): PduId : Identification of the I-PDU.
                       BufferPtr : Pointer to the buffer holding the I-PDU data.
                       BufferLength : Length of the I-PDU.
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service is called after an I-PDU has been received via FOCan.
      Available via: Rte_Cbk.h
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>145</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>46</internalId></specobject>
    <specobject>
      <id>FOCom.EB.ServiceDefinition.Satellite_InstallSecOCKey</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>261</sourceline>
      <version>1</version>
      <description>
      Service name: FOCom_Satellite_InstallSecOCKey
      Syntax: void FOCom_Satellite_InstallSecOCKey ()
      Service ID [hex]: 0x07
      Sync/Async: Synchronous
      Reentrancy: Non Reentrant
      Parameters (in): None
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service shall hand over the SecOC secure key from the non fail operational to the fail operational partition.
      Available via: FOCom.h
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>47</internalId></specobject>
    <specobject>
      <id>FOCom.EB.ServiceDefinition.ReceiveSecOCKey</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>286</sourceline>
      <version>1</version>
      <description>
      Service name: FOCom_ReceiveSecOCKey
      Syntax: void FOCom_ReceiveSecOCKey ()
      Service ID [hex]: 0x08
      Sync/Async: Synchronous
      Reentrancy: Non Reentrant
      Parameters (in): None
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service shall copy the SecOC secure key from the satellite's data area to FOCom module's data area.
      Available via: FOCom.h
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>48</internalId></specobject>
    <specobject>
      <id>FOCom.EB.ServiceDefinition.FOCom_Satellite_MainFunction</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>311</sourceline>
      <version>1</version>
      <description>
      Service name: FOCom_Satellite_MainFunction
      Syntax: void FOCom_Satellite_MainFunction ()
      Service ID [hex]: 0x09
      Sync/Async: Synchronous
      Reentrancy: Non Reentrant
      Parameters (in): None
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service shall inquire the SOK-FM module for the current freshness value and, if changed, transfers it to the FOCom.
      Available via: FOCom.h
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>49</internalId></specobject>
    <specobject>
      <id>FOCom.EB.ServiceDefinition.ReceiveFreshnessValue</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>336</sourceline>
      <version>1</version>
      <description>
      Service name: FOCom_ReceiveFreshnessValue
      Syntax: void FOCom_ReceiveFreshnessValue (
        uint64 FreshnessValue
        )
      Service ID [hex]: 0x0A
      Sync/Async: Synchronous
      Reentrancy: Non Reentrant
      Parameters (in): FreshnessValue : Freshness value received from non fail operational partition.
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service shall copy the received freshness value to to FOCom module's data area.
      Available via: FOCom.h
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>50</internalId></specobject>
    <specobject>
      <id>FOCom.EB.ServiceDefinition.IsFreshnessValueOk</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>363</sourceline>
      <version>1</version>
      <description>
      Service name: FOCom_IsFreshnessValueOk
      Syntax: Std_ReturnType FOCom_IsFreshnessValueOk ()
      Service ID [hex]: 0x0B
      Sync/Async: Synchronous
      Reentrancy: Non Reentrant
      Parameters (in): None.
      Parameters (inout): None
      Parameters (out): None
      Return value: Std_ReturnType E_OK: Freshness value calculation works as expected.
                    E_NOT_OK: Freshness value calculation does not works as expected.
      Description: This service shall tell the caller if the freshness value calculation works as expected.
      Available via: FOCom.h
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>51</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Init.InitInternalDataStructures</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>392</sourceline>
      <version>1</version>
      <description>
      FOCom_Init() service shall initialize the FOCom module when it is called from the same partition as the configured
      fail operational partition.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>52</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Init.InvalidInitCall</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>408</sourceline>
      <version>1</version>
      <description>
      FOCom_Init() service shall not initialize the FOCom module when it is called from a different partition than the configured
      fail operational partition.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>53</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Init.InvalidInitCall.CallDET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>424</sourceline>
      <version>1</version>
      <description>
      When FOCom_Init() service is called from a different partition than the configured fail operational partition and development error detection is enabled,
      then the service shall call Det_ReportError() to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>54</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Init.InvalidInitCall.CallUserCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>440</sourceline>
      <version>1</version>
      <description>
      When FOCom_Init() service is called from a different partition than the configured fail operational partition and user defined error callback is enabled,
      then the service shall call the configured user defined callback function to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>55</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Deinit.DeinitInternalDataStructures</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>456</sourceline>
      <version>1</version>
      <description>
      FOCom_Deinit() service shall de-initialize the FOCom module when it is called from the same partition as the configured
      fail operational partition.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>56</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Deinit.InvalidDeinitcall</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>472</sourceline>
      <version>1</version>
      <description>
      FOCom_Deinit() service shall not de-initialize the FOCom module when it is called from a different partition than the configured
      fail operational partition.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>57</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Deinit.InvalidDeinitCall.CallDET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>488</sourceline>
      <version>1</version>
      <description>
      When FOCom_Deinit() service is called from a different partition than the configured fail operational partition and development error detection is enabled,
      then the service shall call Det_ReportError() to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>58</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Deinit.InvalidDeinitCall.CallUserCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>504</sourceline>
      <version>1</version>
      <description>
      When FOCom_Deinit() service is called from a different partition than the configured fail operational partition and user defined error callback is enabled,
      then the service shall call the configured user defined callback function to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>59</internalId></specobject>
    <specobject>
      <id>FOCom.EB.GetVersionInfo.ReturnVersionInfo</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>520</sourceline>
      <version>1</version>
      <description>
      FOCom_Deinit() service shall return the version information of the FOCom module when it is called from the same partition as the configured
      fail operational partition.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>60</internalId></specobject>
    <specobject>
      <id>FOCom.EB.GetVersionInfo.InvalidGetVersionInfoCall</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>536</sourceline>
      <version>1</version>
      <description>
      FOCom_Deinit() service shall not return the version information of the FOCom module when it is called from the same partition as the configured
      fail operational partition.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>61</internalId></specobject>
    <specobject>
      <id>FOCom.EB.GetVersionInfo.InvalidGetVersionInfo.CallDET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>552</sourceline>
      <version>1</version>
      <description>
      When FOCom_GetVersionInfo() service is called from a different partition than the configured fail operational partition and development error detection is enabled,
      then the service shall call Det_ReportError() to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>62</internalId></specobject>
    <specobject>
      <id>FOCom.EB.GetVersionInfo.InvalidGetVersionInfo.CallUserCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>568</sourceline>
      <version>1</version>
      <description>
      When FOCom_GetVersionInfo() service is called from a different partition than the configured fail operational partition and user defined error callback is enabled,
      then the service shall call the configured user defined callback function to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>63</internalId></specobject>
    <specobject>
      <id>FOCom.EB.PublishedInformation</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>587</sourceline>
      <version>1</version>
      <description>
      FOCom module shall publish the standardized common parameters within the header file of the module.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>64</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Satellite.GetSecureKey</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>609</sourceline>
      <version>1</version>
      <description>
      FOCom_Satellite_InstallSecOCKey shall call the &amp;lt;CSM API&amp;gt; to get the secure key from CSM module.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>148</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>65</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Satellite.StoreSecureKey</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>630</sourceline>
      <version>1</version>
      <description>
      FOCom_Satellite_InstallSecOCKey shall store the secure key received from CSM module in FOCom satellite module's data area.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>148</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>66</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Satellite.CallReceiveSecOCKey</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>651</sourceline>
      <version>1</version>
      <description>
      After storing the secure key in its data area, FOCom_Satellite_InstallSecOCKey shall call SchM client/server API(synchronously)
      to the fail operational partition to invoke the FOCom_ReceiveSecOCKey() function.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>148</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>67</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Satellite.OverwriteArbitraryData</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>673</sourceline>
      <version>1</version>
      <description>
      FOCom_Satellite_InstallSecOCKey shall overwrite the FOCom satellite module's data area with arbitrary data after the SchM client/server API call return.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>148</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>68</internalId></specobject>
    <specobject>
      <id>FOCom.EB.ReceiveSecOCKey.CopySecureKey</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>694</sourceline>
      <version>1</version>
      <description>
      When FOCom_ReceiveSecOCKey() is invoked, then the function shall copy the secure key from FOCom satellite's data area to FOCom module's data area.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>148</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>69</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Satellite.MainFunction.GetTxFreshness</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>715</sourceline>
      <version>1</version>
      <description>
      FOCom_Satellite_MainFunction shall call the SecOC_GetTxFreshness() function to get the current freshness value.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>149</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>70</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Satellite.MainFunction.CallReceiveFreshnessValue</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>736</sourceline>
      <version>1</version>
      <description>
      If the current freshness value is changed from its last invocation, FOCom_Satellite_MainFunction shall call
      SchM sender/receiver API to send the latest freshness value to the FOCom_ReceiveFreshnessValue() function.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>149</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>71</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Satellite.MainFunction.CopyFreshnessValue</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>758</sourceline>
      <version>1</version>
      <description>
      When FOCom_ReceiveFreshnessValue() is invoked, function shall copy the received freshness value.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>149</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>72</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.ValidPartitionCall</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>782</sourceline>
      <version>1</version>
      <description>
      FOCom_Transmit() service shall perform the transmit operation for the outgoing I-PDU when it is called from the same partition as the configured
      fail operational partition.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>73</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.InvalidPartitionCall</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>798</sourceline>
      <version>1</version>
      <description>
      FOCom_Transmit() service shall not perform any transmit operation for the outgoing I-PDU when it is called from the same partition as the configured
      fail operational partition.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>74</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.InvalidPartitionCall.RetVal</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>814</sourceline>
      <version>1</version>
      <description>
      When FOCom_Transmit() service is called from a different partition than the configured fail operational partition,
      then the service shall return E_NOT_OK to the caller.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>75</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.InvalidPartitionCall.CallDET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>830</sourceline>
      <version>1</version>
      <description>
      When FOCom_Transmit() service is called from a different partition than the configured fail operational partition and development error detection is enabled,
      then the service shall call Det_ReportError() to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>76</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.InvalidPartitionCall.CallUserCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>846</sourceline>
      <version>1</version>
      <description>
      When FOCom_Transmit() service is called from a different partition than the configured fail operational partition and user defined error callback is enabled,
      then the service shall call the configured user defined callback function to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>77</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.InValidInitState</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>862</sourceline>
      <version>1</version>
      <description>
      FOCom_Transmit() service shall not perform any transmit operation for the outgoing I-PDU when FOCom module initialization status is not FOCOM_EB_INIT.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>78</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.InValidInitState.RetVal</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>877</sourceline>
      <version>1</version>
      <description>
      When FOCom_Transmit() service is called when FOCom module initialization status is not FOCOM_EB_INIT,
      then the service shall return E_NOT_OK to the caller.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>79</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.InValidInitState.CallDET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>893</sourceline>
      <version>1</version>
      <description>
      When FOCom_Transmit() service is called when FOCom module initialization status is not FOCOM_EB_INIT and development error detection is enabled,
      then the service shall call Det_ReportError() to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>80</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.InValidInitState.CallUserCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>909</sourceline>
      <version>1</version>
      <description>
      When FOCom_Transmit() service is called when FOCom module initialization status is not FOCOM_EB_INIT and user defined error callback is enabled,
      then the service shall call the configured user defined callback function to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>81</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.ValidTxPduId</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>925</sourceline>
      <version>1</version>
      <description>
      FOCom_Transmit() service shall perform the transmit operation for the outgoing I-PDU when it is called with a valid PDU ID.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>82</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.InValidTxPduId</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>940</sourceline>
      <version>1</version>
      <description>
      FOCom_Transmit() service shall not perform the transmit operation for the outgoing I-PDU when it is called with a invalid PDU ID.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>83</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.InValidTxPduId.RetVal</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>955</sourceline>
      <version>1</version>
      <description>
      When FOCom_Transmit() service is called with a invalid PDU ID, then the service shall return E_NOT_OK to the caller.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>84</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.InValidTxPduId.CallDET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>970</sourceline>
      <version>1</version>
      <description>
      When FOCom_Transmit() service is called with a invalid PDU ID and development error detection is enabled,
      then the service shall call Det_ReportError() to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>85</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.InValidTxPduId.CallUserCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>986</sourceline>
      <version>1</version>
      <description>
      When FOCom_Transmit() service is called with a invalid PDU ID and user defined error callback is enabled,
      then the service shall call the configured user defined callback function to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>86</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.ValidBufferPtr</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1002</sourceline>
      <version>1</version>
      <description>
      FOCom_Transmit() service shall perform the transmit operation for the outgoing I-PDU when it is called with a valid buffer pointer.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>87</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.InValidBufferPtr</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1017</sourceline>
      <version>1</version>
      <description>
      FOCom_Transmit() service shall perform the transmit operation for the outgoing I-PDU when it is called with a invalid buffer pointer.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>88</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.InValidBufferPtr.RetVal</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1032</sourceline>
      <version>1</version>
      <description>
      When FOCom_Transmit() service is called with a invalid buffer pointer, then the service shall return E_NOT_OK to the caller.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>89</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.InValidBufferPtr.CallDET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1047</sourceline>
      <version>1</version>
      <description>
      When FOCom_Transmit() service is called with a invalid buffer pointer and development error detection is enabled,
      then the service shall call Det_ReportError() to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>90</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.InValidBufferPtr.CallUserCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1063</sourceline>
      <version>1</version>
      <description>
      When FOCom_Transmit() service is called with a invalid buffer pointer and user defined error callback is enabled,
      then the service shall call the configured user defined callback function to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>91</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.ValidInitState</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1079</sourceline>
      <version>1</version>
      <description>
      FOCom_Transmit() service shall perform the transmit operation for the outgoing I-PDU when FOCom module initialization status is FOCOM_EB_INIT.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>92</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.SecuredIpdu</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1094</sourceline>
      <version>1</version>
      <description>
      FOCom_Transmit shall append the SecOC protocol information to the authentic I-PDU to be transmitted if the I-PDU is configured to be secured.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu</srcid><srcstatus>source not covered.</srcstatus><internalId>94</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.GenerateMAC</srcid><srcstatus>source not covered.</srcstatus><internalId>102</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>93</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1116</sourceline>
      <version>1</version>
      <description>
      FOCom_Transmit shall construct the secured I-PDU by concatenating the authentic I-PDU, freshness value (up to SecOCFreshnessValueTruncLength)
      and MAC (up to SecOCAuthInfoTruncLength) in the given order.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.TruncMAC</srcid><srcstatus>source not covered.</srcstatus><internalId>95</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.TruncMAC.UseMSBBits</srcid><srcstatus>source not covered.</srcstatus><internalId>96</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.TruncFreshnessValue</srcid><srcstatus>source not covered.</srcstatus><internalId>97</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.TruncFreshnessValue.UseLSBBits</srcid><srcstatus>source not covered.</srcstatus><internalId>98</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.MACByteOrder</srcid><srcstatus>source not covered.</srcstatus><internalId>99</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.FreshnessValueByteOrder</srcid><srcstatus>source not covered.</srcstatus><internalId>100</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.ExcludeFreshnessValue</srcid><srcstatus>source not covered.</srcstatus><internalId>101</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>93</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>94</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.TruncMAC</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1139</sourceline>
      <version>1</version>
      <description>
      FOCom_Transmit shall truncate the MAC down to the number of bits specified by configuration parameter SecOCAuthInfoTruncLength.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>94</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>95</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.TruncMAC.UseMSBBits</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1160</sourceline>
      <version>1</version>
      <description>
      While using SecOCAuthInfoTruncLength length, FOCom_Transmit shall truncate down to the most significant bits
      of the resulting MAC generated by the authentication algorithm.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>94</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>96</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.TruncFreshnessValue</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1182</sourceline>
      <version>1</version>
      <description>
      If the configured parameter SecOCFreshnessValueTruncLength value is less than the configured SecOCFreshnessValueLength value,
      then FOCom_Transmit shall truncate the freshness value down to the number of bits specified by configuration parameter SecOCFreshnessValueTruncLength.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>94</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>97</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.TruncFreshnessValue.UseLSBBits</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1204</sourceline>
      <version>1</version>
      <description>
      While using SecOCFreshnessValueTruncLength length, FOCom_Transmit shall truncate down to the least significant bits
      of the SecOCFreshnessValueLength.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>94</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>98</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.MACByteOrder</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1226</sourceline>
      <version>1</version>
      <description>
      FOCom_Transmit shall encode the MAC which is transmitted in big endian byte order.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>94</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>99</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.FreshnessValueByteOrder</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1247</sourceline>
      <version>1</version>
      <description>
      FOCom_Transmit shall encode the freshness value which is transmitted in big endian byte order.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>94</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>100</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.ExcludeFreshnessValue</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1268</sourceline>
      <version>1</version>
      <description>
      If the configuration parameter SecOCFreshnessValueTruncLength is configured to 0, then freshness value shall not be included in construction of the secured I-PDU.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>94</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>101</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.GenerateMAC</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1289</sourceline>
      <version>1</version>
      <description>
      If the authentic I-PDU to be transmitted is configured to be secured, then FOCom_Transmit shall call FOCrypto_CalcMAC() for MAC generation.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>93</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>102</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.AuthenticIpdu</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1314</sourceline>
      <version>1</version>
      <description>
      If the authentic I-PDU to be transmitted is not configured to be secured,
      then FOCom_Transmit shall route the authentic I-PDU to the lower layer FOCan without adding any SecOC protocol information.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>146</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>103</internalId></specobject>
    <specobject>
      <id>FOCom.EB.Transmit.CallCanTransmit</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1336</sourceline>
      <version>1</version>
      <description>
      FOCom_Transmit shall call FOCan_Transmit() to transfer the I-PDU.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>144</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>104</internalId></specobject>
    <specobject>
      <id>FOCom.EB.TxConfirmation.CallCbk</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1365</sourceline>
      <version>1</version>
      <description>
      FOCom_FOCanTxConfirmation function shall call the corresponding &amp;lt;FOComUser_FOComCbkTxConfirmation&amp;gt;() and pass the parameters
      it received from lower layer module FOCan when it is called with valid parameters and from the same partition as the configured
      fail operational partition.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>FOCom.EB.TxConfirmation.InvalidPartitionCall</srcid><srcstatus>source not covered.</srcstatus><internalId>106</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.TxConfirmation.InvalidPartitionCall.CallUserCallback</srcid><srcstatus>source not covered.</srcstatus><internalId>108</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.TxConfirmation.ValidInitState</srcid><srcstatus>source not covered.</srcstatus><internalId>109</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.TxConfirmation.InValidInitState</srcid><srcstatus>source not covered.</srcstatus><internalId>110</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.TxConfirmation.InValidInitState.CallDET</srcid><srcstatus>source not covered.</srcstatus><internalId>111</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.TxConfirmation.InValidInitState.CallUserCallback</srcid><srcstatus>source not covered.</srcstatus><internalId>112</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.TxConfirmation.ValidPduId</srcid><srcstatus>source not covered.</srcstatus><internalId>113</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.TxConfirmation.InValidPduId</srcid><srcstatus>source not covered.</srcstatus><internalId>114</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.TxConfirmation.InValidPduId.CallDET</srcid><srcstatus>source not covered.</srcstatus><internalId>115</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.TxConfirmation.InValidPduId.CallUserCallback</srcid><srcstatus>source not covered.</srcstatus><internalId>116</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.TxConfirmation.InValidFnPtr</srcid><srcstatus>source not covered.</srcstatus><internalId>117</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.TxConfirmation.InValidFnPtr.CallDET</srcid><srcstatus>source not covered.</srcstatus><internalId>118</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.TxConfirmation.InValidFnPtr.CallUserCallback</srcid><srcstatus>source not covered.</srcstatus><internalId>119</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations><ruleid>WRN.swurs.needscoverage.count</ruleid></oreqmViolations><covstatus>uncovered</covstatus><internalId>105</internalId></specobject>
    <specobject>
      <id>FOCom.EB.TxConfirmation.InvalidPartitionCall</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1389</sourceline>
      <version>1</version>
      <description>
      FOCom_FOCanTxConfirmation function shall not call the corresponding &amp;lt;FOComUser_FOComCbkTxConfirmation&amp;gt;() and pass the parameters
      it received from lower layer module FOCan when it is called from the same partition as the configured
      fail operational partition.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>FOCom.EB.TxConfirmation.InvalidPartitionCall.CallDET</srcid><srcstatus>source not covered.</srcstatus><internalId>107</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.CallCbk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>106</internalId></specobject>
    <specobject>
      <id>FOCom.EB.TxConfirmation.InvalidPartitionCall.CallDET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1413</sourceline>
      <version>1</version>
      <description>
      When FOCom_FOCanTxConfirmation() service is called from a different partition than the configured fail operational partition and development error detection is enabled,
      then the service shall call Det_ReportError() to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.InvalidPartitionCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>106</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>107</internalId></specobject>
    <specobject>
      <id>FOCom.EB.TxConfirmation.InvalidPartitionCall.CallUserCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1435</sourceline>
      <version>1</version>
      <description>
      When FOCom_FOCanTxConfirmation() service is called from a different partition than the configured fail operational partition and user defined error callback is enabled,
      then the service shall call the configured user defined callback function to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.CallCbk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>105</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>108</internalId></specobject>
    <specobject>
      <id>FOCom.EB.TxConfirmation.ValidInitState</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1457</sourceline>
      <version>1</version>
      <description>
      FOCom_FOCanTxConfirmation function shall call the corresponding &amp;lt;FOComUser_FOComCbkTxConfirmation&amp;gt;() when FOCom module's
      initialization status is FOCOM_EB_INIT.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.CallCbk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>105</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>109</internalId></specobject>
    <specobject>
      <id>FOCom.EB.TxConfirmation.InValidInitState</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1479</sourceline>
      <version>1</version>
      <description>
      FOCom_FOCanTxConfirmation function shall not call the corresponding &amp;lt;FOComUser_FOComCbkTxConfirmation&amp;gt;() when FOCom module's
      initialization status is not FOCOM_EB_INIT.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.CallCbk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>105</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>110</internalId></specobject>
    <specobject>
      <id>FOCom.EB.TxConfirmation.InValidInitState.CallDET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1501</sourceline>
      <version>1</version>
      <description>
      When FOCom_FOCanTxConfirmation() service is called when FOCom module's initialization status is not FOCOM_EB_INIT and development error detection is enabled,
      then the service shall call Det_ReportError() to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.CallCbk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>105</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>111</internalId></specobject>
    <specobject>
      <id>FOCom.EB.TxConfirmation.InValidInitState.CallUserCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1523</sourceline>
      <version>1</version>
      <description>
      When FOCom_FOCanTxConfirmation() service is called when FOCom module's initialization status is not FOCOM_EB_INIT and user defined error callback is enabled,
      then the service shall call the configured user defined callback function to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.CallCbk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>105</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>112</internalId></specobject>
    <specobject>
      <id>FOCom.EB.TxConfirmation.ValidPduId</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1545</sourceline>
      <version>1</version>
      <description>
      FOCom_FOCanTxConfirmation function shall call the corresponding &amp;lt;FOComUser_FOComCbkTxConfirmation&amp;gt;() when it is called with a valid PDU ID.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.CallCbk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>105</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>113</internalId></specobject>
    <specobject>
      <id>FOCom.EB.TxConfirmation.InValidPduId</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1566</sourceline>
      <version>1</version>
      <description>
      FOCom_FOCanTxConfirmation function shall not call the corresponding &amp;lt;FOComUser_FOComCbkTxConfirmation&amp;gt;() when it is called with a invalid PDU ID.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.CallCbk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>105</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>114</internalId></specobject>
    <specobject>
      <id>FOCom.EB.TxConfirmation.InValidPduId.CallDET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1587</sourceline>
      <version>1</version>
      <description>
      When FOCom_FOCanTxConfirmation() service is called when it is called with a invalid PDU ID and development error detection is enabled,
      then the service shall call Det_ReportError() to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.CallCbk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>105</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>115</internalId></specobject>
    <specobject>
      <id>FOCom.EB.TxConfirmation.InValidPduId.CallUserCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1609</sourceline>
      <version>1</version>
      <description>
      When FOCom_FOCanTxConfirmation() service is called when it is called with a invalid PDU ID and user defined error callback is enabled,
      then the service shall call the configured user defined callback function to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.CallCbk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>105</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>116</internalId></specobject>
    <specobject>
      <id>FOCom.EB.TxConfirmation.InValidFnPtr</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1631</sourceline>
      <version>1</version>
      <description>
      FOCom_FOCanTxConfirmation function shall not call the corresponding &amp;lt;FOComUser_FOComCbkTxConfirmation&amp;gt;() if the corresponding function callback pointer is invalid.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.CallCbk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>105</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>117</internalId></specobject>
    <specobject>
      <id>FOCom.EB.TxConfirmation.InValidFnPtr.CallDET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1652</sourceline>
      <version>1</version>
      <description>
      When FOCom_FOCanTxConfirmation() service is called when the corresponding function callback pointer is invalid and development error detection is enabled,
      then the service shall call Det_ReportError() to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.CallCbk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>105</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>118</internalId></specobject>
    <specobject>
      <id>FOCom.EB.TxConfirmation.InValidFnPtr.CallUserCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1674</sourceline>
      <version>1</version>
      <description>
      When FOCom_FOCanTxConfirmation() service is called when the corresponding function callback pointer is invalid and user defined error callback is enabled,
      then the service shall call the configured user defined callback function to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.CallCbk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>105</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>119</internalId></specobject>
    <specobject>
      <id>FOCom.EB.TxConfirmation.ValidPuduId</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1696</sourceline>
      <version>1</version>
      <description>
      FOCom_FOCanTxConfirmation function shall call the corresponding &amp;lt;FOComUser_FOComCbkTxConfirmation&amp;gt;() when it is called with a valid PDU ID.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>120</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.ValidPartitionCall</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1714</sourceline>
      <version>1</version>
      <description>
      FOCom_FOCanRxIndication service shall perform the receive operation for the incoming I-PDU when it is called from the same partition as the configured
      fail operational partition.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>144</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>121</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.InvalidPartitionCall</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1736</sourceline>
      <version>1</version>
      <description>
      FOCom_FOCanRxIndication service shall not perform the receive operation for the incoming I-PDU when it is called from a different partition than the configured
      fail operational partition.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>122</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.InvalidPartitionCall.CallDET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1752</sourceline>
      <version>1</version>
      <description>
      When FOCom_FOCanRxIndication() service is called from a different partition than the configured fail operational partition and development error detection is enabled,
      then the service shall call Det_ReportError() to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>123</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.InvalidPartitionCall.CallUserCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1768</sourceline>
      <version>1</version>
      <description>
      When FOCom_FOCanRxIndication() service is called from a different partition than the configured fail operational partition and user defined error callback is enabled,
      then the service shall call the configured user defined callback function to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>124</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.ValidInitState</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1784</sourceline>
      <version>1</version>
      <description>
      FOCom_FOCanRxIndication service shall perform the receive operation for the incoming I-PDU when FOCOm module's initialization state is FOCOM_EB_INIT.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>144</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>125</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.InValidInitState</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1805</sourceline>
      <version>1</version>
      <description>
      FOCom_FOCanRxIndication service shall not perform the receive operation for the incoming I-PDU when FOCOm module's initialization state is not FOCOM_EB_INIT.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>126</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.InValidInitState.CallDET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1820</sourceline>
      <version>1</version>
      <description>
      When FOCom_FOCanRxIndication() service is called when FOCOm module's initialization state is not FOCOM_EB_INIT and development error detection is enabled,
      then the service shall call Det_ReportError() to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>127</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.InValidInitState.CallUserCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1836</sourceline>
      <version>1</version>
      <description>
      When FOCom_FOCanRxIndication() service is called when FOCOm module's initialization state is not FOCOM_EB_INIT and user defined error callback is enabled,
      then the service shall call the configured user defined callback function to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>128</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.ValidRxPduId</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1852</sourceline>
      <version>1</version>
      <description>
      FOCom_FOCanRxIndication service shall perform the receive operation for the incoming I-PDU when it is called with a valid PDU ID.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>129</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.InValidRxPduId</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1867</sourceline>
      <version>1</version>
      <description>
      FOCom_FOCanRxIndication service shall not perform the receive operation for the incoming I-PDU when it is called with a invalid PDU ID.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>130</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.InValidRxPduId.CallDET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1882</sourceline>
      <version>1</version>
      <description>
      When FOCom_FOCanRxIndication() service is called with a invalid PDU ID and development error detection is enabled,
      then the service shall call Det_ReportError() to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>131</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.InValidRxPduId.CallUserCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1898</sourceline>
      <version>1</version>
      <description>
      When FOCom_FOCanRxIndication() service is called with a invalid PDU ID and user defined error callback is enabled,
      then the service shall call the configured user defined callback function to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>132</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.ValidBufferPtr</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1914</sourceline>
      <version>1</version>
      <description>
      FOCom_FOCanRxIndication() service shall perform the receive operation for the incoming I-PDU when it is called with a valid buffer pointer.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>133</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.InValidBufferPtr</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1929</sourceline>
      <version>1</version>
      <description>
      FOCom_FOCanRxIndication() service shall not perform the receive operation for the incoming I-PDU when it is called with a invalid buffer pointer.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>134</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.InValidBufferPtr.CallDET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1944</sourceline>
      <version>1</version>
      <description>
      When FOCom_FOCanRxIndication() service is called with a invalid buffer pointer and development error detection is enabled,
      then the service shall call Det_ReportError() to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>135</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.InValidBufferPtr.CallUserCallback</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1960</sourceline>
      <version>1</version>
      <description>
      When FOCom_FOCanRxIndication() service is called with a invalid buffer pointer and user defined error callback is enabled,
      then the service shall call the configured user defined callback function to report the error.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>136</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.AuthenticIpdu</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1976</sourceline>
      <version>1</version>
      <description>
      If the received I-PDU is configured not to be secured, then FOCom_RxIndication function shall call the corresponding &amp;lt;FOComUser_FOComCbkRxIndication&amp;gt; function
      without performing any SecOC protocol verification.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>147</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>137</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.SecuredIpdu.VerifyFV</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>1998</sourceline>
      <version>1</version>
      <description>
      FOCom_RxIndication function shall verify the freshness value of the received I-PDU by comparing it against the current freshness value.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>147</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>138</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.SecuredIpdu.VerifyFV.TruncBits</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>2019</sourceline>
      <version>1</version>
      <description>
      If the configured parameter SecOCFreshnessValueTruncLength value is less than the configured SecOCFreshnessValueLength value,
      then FOCom_RxIndication shall only verify the least significant number of bits specified by configuration parameter SecOCFreshnessValueTruncLength.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>147</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>139</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.SecuredIpdu.VerifyMAC</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>2041</sourceline>
      <version>1</version>
      <description>
      FOCom_RxIndication function shall verify the SecOC MAC of the received I-PDU by calling the function FOCrypto_CalcMAC() if required by the configuration.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>147</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>140</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.SecuredIpdu.VerifyMAC.FailedCheck</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>2070</sourceline>
      <version>1</version>
      <description>
      If the SecOC MAC verification of the received I-PDU fails, then the received I-PDU shall be discarded.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>147</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>141</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.SecuredIpdu.VerifyMAC.PassedCheck</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>2095</sourceline>
      <version>1</version>
      <description>
      If the SecOC MAC verification of the received I-PDU succeed, then FOCom_RxIndication function shall call the corresponding &amp;lt;FOComUser_FOComCbkRxIndication&amp;gt; function.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>145</internalId></provcov>
        <provcov>
          <linksto>FOCom.top.004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>147</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>142</internalId></specobject>
    <specobject>
      <id>FOCom.EB.RxIndication.CallCbk.PassedParameters</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/FOCom.reqm</sourcefile>
      <sourceline>2120</sourceline>
      <version>1</version>
      <description>
      When calling the corresponding &amp;lt;FOComUser_FOComCbkRxIndication&amp;gt;() function, FOCom_RxIndication function shall pass the parameters it received from lower layer.
    </description>
      <comment>
    </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOCom.top.002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>145</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swurs.needscoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>143</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>FOCom.top.001</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/TL_Requirements.reqm</sourcefile>
      <sourceline>5</sourceline>
      <version>1</version>
      <description>
        The FOCom module shall transmit fixed size I-PDU from upper layer Safety RTE to lower layer FOCan.
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>FOCom.EB.ServiceDefinition.Transmit</srcid><srcstatus>source not covered.</srcstatus><internalId>42</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.ServiceDefinition.TxConfirmation</srcid><srcstatus>source not covered.</srcstatus><internalId>43</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.ServiceDefinition.TxConfirmationCallback</srcid><srcstatus>source not covered.</srcstatus><internalId>44</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.Transmit.CallCanTransmit</srcid><srcstatus>source not covered.</srcstatus><internalId>104</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.RxIndication.ValidPartitionCall</srcid><srcstatus>source not covered.</srcstatus><internalId>121</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.RxIndication.ValidInitState</srcid><srcstatus>source not covered.</srcstatus><internalId>125</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.CAN.Tx</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>559</internalId><ffbDeststatus>target not covered.</ffbDeststatus></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>144</internalId></specobject>
    <specobject>
      <id>FOCom.top.002</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/TL_Requirements.reqm</sourcefile>
      <sourceline>18</sourceline>
      <version>1</version>
      <description>
        The FOCom module shall receive fixed size I-PDU from lower layer FOCan to upper layer Safety RTE.
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>FOCom.EB.ServiceDefinition.RxIndication</srcid><srcstatus>source not covered.</srcstatus><internalId>45</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.ServiceDefinition.RxIndicationCallback</srcid><srcstatus>source not covered.</srcstatus><internalId>46</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.RxIndication.SecuredIpdu.VerifyMAC.PassedCheck</srcid><srcstatus>source not covered.</srcstatus><internalId>142</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.RxIndication.CallCbk.PassedParameters</srcid><srcstatus>source not covered.</srcstatus><internalId>143</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.CAN.Rx</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>570</internalId><ffbDeststatus>target not covered.</ffbDeststatus></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>145</internalId></specobject>
    <specobject>
      <id>FOCom.top.003</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/TL_Requirements.reqm</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>
        The FOCom module shall append SecOC protocol information to an I-PDU to be transmitted if required by the configuration.
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>FOCom.EB.Transmit.SecuredIpdu</srcid><srcstatus>source not covered.</srcstatus><internalId>93</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.Transmit.AuthenticIpdu</srcid><srcstatus>source not covered.</srcstatus><internalId>103</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.CAN.Tx.SecOC</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>564</internalId><ffbDeststatus>target not covered.</ffbDeststatus></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>146</internalId></specobject>
    <specobject>
      <id>FOCom.top.004</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/TL_Requirements.reqm</sourcefile>
      <sourceline>44</sourceline>
      <version>1</version>
      <description>
        The FOCom module shall verify the SecOC protocol information from a received I-PDU if required by the configuration.
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>FOCom.EB.RxIndication.AuthenticIpdu</srcid><srcstatus>source not covered.</srcstatus><internalId>137</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.RxIndication.SecuredIpdu.VerifyFV</srcid><srcstatus>source not covered.</srcstatus><internalId>138</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.RxIndication.SecuredIpdu.VerifyFV.TruncBits</srcid><srcstatus>source not covered.</srcstatus><internalId>139</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.RxIndication.SecuredIpdu.VerifyMAC</srcid><srcstatus>source not covered.</srcstatus><internalId>140</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.RxIndication.SecuredIpdu.VerifyMAC.FailedCheck</srcid><srcstatus>source not covered.</srcstatus><internalId>141</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.RxIndication.SecuredIpdu.VerifyMAC.PassedCheck</srcid><srcstatus>source not covered.</srcstatus><internalId>142</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.CAN.Rx.SecOC</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>573</internalId><ffbDeststatus>target not covered.</ffbDeststatus></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>147</internalId></specobject>
    <specobject>
      <id>FOCom.top.005</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/TL_Requirements.reqm</sourcefile>
      <sourceline>57</sourceline>
      <version>1</version>
      <description>
        The FOCom module shall get the SecOC secure key from a non fail operational partition and store it securely in RAM.
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>FOCom.EB.Satellite.GetSecureKey</srcid><srcstatus>source not covered.</srcstatus><internalId>65</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.Satellite.StoreSecureKey</srcid><srcstatus>source not covered.</srcstatus><internalId>66</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.Satellite.CallReceiveSecOCKey</srcid><srcstatus>source not covered.</srcstatus><internalId>67</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.Satellite.OverwriteArbitraryData</srcid><srcstatus>source not covered.</srcstatus><internalId>68</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.ReceiveSecOCKey.CopySecureKey</srcid><srcstatus>source not covered.</srcstatus><internalId>69</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.SecOC.Key</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>580</internalId><ffbDeststatus>target not covered.</ffbDeststatus></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>148</internalId></specobject>
    <specobject>
      <id>FOCom.top.006</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/TL_Requirements.reqm</sourcefile>
      <sourceline>70</sourceline>
      <version>1</version>
      <description>
        The FOCom module shall get the SecOC freshness value on ECU startup and every time it change from the freshness manager operating on a non fail operational partition.
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>FOCom.EB.Satellite.MainFunction.GetTxFreshness</srcid><srcstatus>source not covered.</srcstatus><internalId>70</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.Satellite.MainFunction.CallReceiveFreshnessValue</srcid><srcstatus>source not covered.</srcstatus><internalId>71</internalId></linkedfrom><linkedfrom><srcid>FOCom.EB.Satellite.MainFunction.CopyFreshnessValue</srcid><srcstatus>source not covered.</srcstatus><internalId>72</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.SecOC.Freshness</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>581</internalId><ffbDeststatus>target not covered.</ffbDeststatus></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>149</internalId></specobject>
    <specobject>
      <id>FOCom.top.007</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/TL_Requirements.reqm</sourcefile>
      <sourceline>83</sourceline>
      <version>1</version>
      <description>
        The FOCom module shall indicate the upper layer (Safety RTE) once an I-PDU transmission confirmation is received from the lower layer (FOCan).
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>FOCom.EB.TxConfirmation.CallCbk</srcid><srcstatus>source not covered.</srcstatus><internalId>105</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>150</internalId></specobject>
    <specobject>
      <id>FOCom.top.008</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/doc/project/requirements/TL_Requirements.reqm</sourcefile>
      <sourceline>96</sourceline>
      <version>1</version>
      <description>
        The FOCom module shall map the serialized signal group to be transmitted or received in a way that there is a 1:1 mapping to the transmitted or received I-PDU.
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>151</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>FOMM.EB.ModuleNameCfg</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>4</sourceline>
      <version>1</version>
      <description>
      Module Name: FOMM
      Module Description: This container includes all necessary configuration sub-containers
      according the Fail Operational Mode Management configuration structure.
      Supported Config Variants: VARIANT-PRE-COMPILE
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_13</srcid><srcstatus/><internalId>335</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>152</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GeneralCfg</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>20</sourceline>
      <version>1</version>
      <description>
      Container Name: FOMMGeneral
      Parent Container: FOMM
      Description: This container contains the public configuration (parameters) of the
      Fail Operational Mode Management.
      Multiplicity: 1
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_54</srcid><srcstatus/><internalId>336</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GeneralCfg.DevErrorDetect</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>37</sourceline>
      <version>1</version>
      <description>
      Name: FOMMDevErrorDetect
      Parent Container: FOMMGeneral
      Description: Switches the development error detection and notification on or off.
      - true: detection and notification is enabled.
      - false: detection and notification is disabled.
      Multiplicity: 1
      Type: EcucBooleanParamDef
      Default Value: false
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_73</srcid><srcstatus/><internalId>338</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GeneralCfg.DetRuntimeChecks</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>58</sourceline>
      <version>1</version>
      <description>
      Name: FOMMDetRuntimeChecks
      Parent Container: FOMMGeneral
      Description: Switches the runtime error reporting to Det on or off.
      - true: runtime error reporting is enabled.
      - false: runtime error reporting is disabled.
      Multiplicity: 1
      Type: EcucBooleanParamDef
      Default Value: false
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_108</srcid><srcstatus/><internalId>339</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GeneralCfg.CddErrorReportingApiName</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>79</sourceline>
      <version>1</version>
      <description>
      Name: FOMMCddErrorReportingApiName
      Parent Container: FOMMGeneral
      Description: This parameter defines the CDD API name used (besides the Det handling)
      to report errors.
      Multiplicity: 0..1
      Type: EcucFunctionNameDef
      maxLength: 32
      minLength: 1
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_140</srcid><srcstatus/><internalId>340</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GeneralCfg.CddHeaderFile</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>100</sourceline>
      <version>1</version>
      <description>
      Name: FOMMCddHeaderFile
      Parent Container: FOMMGeneral
      Description: Defines header files for callback functions which shall be included
      in case of CDDs usage.
      Multiplicity: 0..1
      Type: EcucStringParamDef
      maxLength: 32
      minLength: 1
      Scope/Dependency:
        Scope: local
        Dependency: This parameter shall only be configurable if FOMMCddErrorReportingApiName
        is enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_173</srcid><srcstatus/><internalId>341</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>157</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GeneralCfg.VersionInfoApi</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>125</sourceline>
      <version>1</version>
      <description>
      Name: FOMMVersionInfoApi
      Parent Container: FOMMGeneral
      Description: Enables and disables the API for reading the version information
      about the Fail Operational Mode Management module.
      True: Enabled
      False: Disabled
      Multiplicity: 1
      Type: EcucBooleanParamDef
      Default Value: false
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_0</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_SimpleImpTest</srcid><srcstatus/><internalId>438</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_422</srcid><srcstatus/><internalId>349</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>158</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GeneralCfg.PartitionRef</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>147</sourceline>
      <version>1</version>
      <description>
      Name: FOMMEcucPartitionRef
      Parent Container: FOMMGeneral
      Description: Maps the Fail Operational Mode Management module to a partition.
      Multiplicity: 1
      Type: Reference to [EcucPartition]
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_GEN_01001_PARTITION_MISMATCH</srcid><srcstatus/><internalId>431</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_210</srcid><srcstatus/><internalId>342</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>159</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GeneralCfg.DioPartitionRef</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>165</sourceline>
      <version>1</version>
      <description>
      Name: FOMMDioEcucPartitionRef
      Parent Container: FOMMGeneral
      Description: Maps the Dio Server to a partition.
      Multiplicity: 0..1
      Type: Reference to [EcucPartition]
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_1</srcid><srcstatus/><internalId>435</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_243</srcid><srcstatus/><internalId>344</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>160</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GeneralCfg.McuPartitionRef</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>183</sourceline>
      <version>1</version>
      <description>
      Name: FOMMMcuEcucPartitionRef
      Parent Container: FOMMGeneral
      Description: Maps the Mcu Server to a partition.
      Multiplicity: 0..1
      Type: Reference to [EcucPartition]
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_2</srcid><srcstatus/><internalId>436</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_275</srcid><srcstatus/><internalId>345</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.FOMM.MCUProxy</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>514</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>161</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GeneralCfg.McuSetModeApiName</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>201</sourceline>
      <version>1</version>
      <description>
      Name: FOMMMcuSetModeApiName
      Parent Container: FOMMGeneral
      Description: This parameter defines the API name used to call when receiving a
                   FOMM_Server_Mcu_SetMode() request (default: Mcu_SetMode).
      Multiplicity: 0..1
      Type: EcucFunctionNameDef
      maxLength: 32
      minLength: 1
      Dependency: This parameter shall only be configurable if FOMMMcuEcucPartitionRef is enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOMM_ComTest_Headers</srcid><srcstatus/><internalId>430</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_307</srcid><srcstatus/><internalId>346</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.FOMM.MCUProxy.Config</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>518</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>162</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GeneralCfg.McuPerformResetApiName</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>223</sourceline>
      <version>1</version>
      <description>
      Name: FOMMMcuPerformResetApiName
      Parent Container: FOMMGeneral
      Description: This parameter defines the API name used to call when receiving a
                   FOMM_Server_Mcu_PerformReset() request (default: Mcu_PerformReset).
      Multiplicity: 0..1
      Type: EcucFunctionNameDef
      maxLength: 32
      minLength: 1
      Dependency: This parameter shall only be configurable if FOMMMcuEcucPartitionRef is enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOMM_ComTest_Headers</srcid><srcstatus/><internalId>430</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_345</srcid><srcstatus/><internalId>347</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.FOMM.MCUProxy.Config</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>518</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>163</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GeneralCfg.McuHeaderFile</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>245</sourceline>
      <version>1</version>
      <description>
      Name: FOMMMcuHeaderFile
      Parent Container: FOMMGeneral
      Description: Defines header files for the functions which shall be included
      in case of different Mcu function symbols prototype.
      Multiplicity: 0..1
      Type: EcucStringParamDef
      maxLength: 32
      minLength: 1
      Scope/Dependency:
        Scope: local
        Dependency: This parameter shall only be configurable if FOMMMcuPerformResetApiName
                    and/or FOMMMcuSetModeApiName are enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOMM_ComTest_Headers</srcid><srcstatus/><internalId>430</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_383</srcid><srcstatus/><internalId>348</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>164</internalId></specobject>
    <specobject>
      <id>FOMM.EB.Check.PartitionMismatch</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>270</sourceline>
      <version>1</version>
      <description>
      The FOMM module shall display an error message if the FOMM partition configured in EcuC does not match the
      Os partition configuration.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_236</srcid><srcstatus/><internalId>343</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_GEN_01001_PARTITION_MISMATCH</srcid><srcstatus/><internalId>431</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>165</internalId></specobject>
    <specobject>
      <id>FOMM.EB.Check.SatelliteCallout</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>285</sourceline>
      <version>1</version>
      <description>
      The FOMM module shall display an error message if the WdgMSatelliteAlivenessCallout configured at the Master level
      is not configured 'FOMM_PartitionFailedNotification'.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_68</srcid><srcstatus/><internalId>337</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_GEN_01002_NO_PART_NOTIF_FAIL</srcid><srcstatus/><internalId>432</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>166</internalId></specobject>
    <specobject>
      <id>FOMM.EB.Init.APISignature</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>300</sourceline>
      <version>1</version>
      <description>
      Service Name: FOMM_Init
      Syntax:
      void FOMM_Init (void)
      Service ID [hex]: 0x01
      Sync/Async: Synchronous
      Reentrancy: Non Reentrant
      Parameters (in): None
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service initializes the Fail Operational Mode Management module
      for further processing.
      Available via: FOMM.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_250</srcid><srcstatus/><internalId>278</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_SimpleComTest</srcid><srcstatus/><internalId>429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>167</internalId></specobject>
    <specobject>
      <id>FOMM.EB.DeInit.APISignature</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>326</sourceline>
      <version>1</version>
      <description>
      Service Name: FOMM_DeInit
      Syntax:
      void FOMM_DeInit (void)
      Service ID [hex]: 0x02
      Sync/Async: Synchronous
      Reentrancy: Non Reentrant
      Parameters (in): None
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: De-initializes the Fail Operational Mode Management module.
      Available via: FOMM.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_281</srcid><srcstatus/><internalId>283</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_SimpleComTest</srcid><srcstatus/><internalId>429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>168</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GetVersionInfo.APISignature</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>351</sourceline>
      <version>1</version>
      <description>
      Service Name: FOMM_GetVersionInfo
      Syntax:
      void FOMM_GetVersionInfo (Std_VersionInfoType* versioninfo)
      Service ID [hex]: 0x03
      Sync/Async: Synchronous
      Reentrancy: Reentrant
      Parameters (in): None
      Parameters (inout): None
      Parameters (out): versioninfo  Pointer to where to store the version information of this module.
      Return value: None
      Description: This function returns the version information of the Fail Operational Mode Management
                   module.
      Available via: FOMM.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_305</srcid><srcstatus/><internalId>286</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_SimpleComTest</srcid><srcstatus/><internalId>429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>169</internalId></specobject>
    <specobject>
      <id>FOMM.EB.RequestMode.APISignature</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>377</sourceline>
      <version>1</version>
      <description>
      Service Name: FOMM_RequestMode
      Syntax:
      Std_ReturnType FOMM_RequestMode (uint8 Mode)
      Service ID [hex]: 0x04
      Sync/Async: Synchronous
      Reentrancy: Non Reentrant
      Parameters (in): Mode  Requested Fail Operational mode
      Parameters (inout): None
      Parameters (out): None
      Return value: Std_ReturnType  E_OK: Service accepted
                                    E_NOT_OK: Service denied
      Description: This service requests switching of the Fail Operational mode
      to the given mode.
      Available via: FOMM.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_332</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_SimpleComTest</srcid><srcstatus/><internalId>429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.Mm.FOLocal</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>2</ffbSrcVersion><internalId>586</internalId></incomingFfbLink><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.Mm.NormalMode</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>589</internalId></incomingFfbLink><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.Mm.FOComm</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>590</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>170</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GetMode.APISignature</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>404</sourceline>
      <version>1</version>
      <description>
      Service Name: FOMM_GetMode
      Syntax:
      Std_ReturnType FOMM_GetMode (uint8* Mode)
      Service ID [hex]: 0x05
      Sync/Async: Synchronous
      Reentrancy: Reentrant
      Parameters (in): None
      Parameters (inout): None
      Parameters (out): Mode  Pointer to a memory location where the current Fail Operational
                              mode will be stored.
      Return value: Std_ReturnType  E_OK: Service accepted
                                    E_NOT_OK: Service denied
      Description: This service gets the current Fail Operational mode.
      Available via: FOMM.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_384</srcid><srcstatus/><internalId>296</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_SimpleComTest</srcid><srcstatus/><internalId>429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.Mm.Query</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>591</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>171</internalId></specobject>
    <specobject>
      <id>FOMM.EB.PartitionFailedNotification.APISignature</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>431</sourceline>
      <version>2</version>
      <description>
      Service Name: FOMM_PartitionFailedNotification
      Syntax:
      void FOMM_PartitionFailedNotification (WdgM_EB_CoreIdType CoreId)
      Service ID [hex]: 0x06
      Sync/Async: Synchronous
      Reentrancy: Non Reentrant
      Parameters (in): None
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service is called in case a failure of any TimE satellite was detected.
      Available via: FOMM.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_711</srcid><srcstatus/><internalId>326</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_SimpleComTest</srcid><srcstatus/><internalId>429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>172</internalId></specobject>
    <specobject>
      <id>FOMM.EB.ShutdownAllCores.APISignature</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>456</sourceline>
      <version>1</version>
      <description>
      Service Name: FOMM_ShutdownAllCores
      Syntax:
      void FOMM_ShutdownAllCores (void)
      Service ID [hex]: 0x07
      Sync/Async: Synchronous
      Reentrancy: Non Reentrant
      Parameters (in): None
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service de-initializes the FOCan and FOCom and shuts down the whole ECU.
      Available via: FOMM.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_459</srcid><srcstatus/><internalId>302</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_SimpleComTest</srcid><srcstatus/><internalId>429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>173</internalId></specobject>
    <specobject>
      <id>FOMM.EB.ProxyMcuSetMode.APISignature</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>481</sourceline>
      <version>1</version>
      <description>
      Service Name: FOMM_Proxy_Mcu_SetMode
      Syntax:
      void FOMM_Proxy_Mcu_SetMode (Mcu_ModeType McuMode)
      Service ID [hex]: 0x09
      Sync/Async: Synchronous
      Reentrancy: Reentrant
      Parameters (in): McuMode  MCU power mode passed to the Mcu driver.
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service is the Proxy for the Mcu_SetMode() function.
                   It performs a client-/server call to the FOMM_Server task
                   on a Fail Operational core which then performs the call
                   to the real Mcu_SetMode() function.
      Available via: FOMM_Proxy.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_112</srcid><srcstatus/><internalId>249</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_143</srcid><srcstatus/><internalId>253</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_343</srcid><srcstatus/><internalId>265</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_0</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_RteInterfaces_3</srcid><srcstatus/><internalId>437</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.API.FOMM_Proxy_Mcu_SetMode</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>674</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>174</internalId></specobject>
    <specobject>
      <id>FOMM.EB.ServerMcuSetMode.APISignature</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>509</sourceline>
      <version>1</version>
      <description>
      Service Name: FOMM_Server_Mcu_SetMode
      Syntax:
      void FOMM_Server_Mcu_SetMode (Mcu_ModeType McuMode)
      Service ID [hex]: 0x0A
      Sync/Async: Synchronous
      Reentrancy: Reentrant
      Parameters (in): McuMode  MCU power mode passed to the Mcu driver.
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service is the Server function called by FOMM_Proxy_Mcu_SetMode()
                   function.
                   It calls Mcu_SetMode() locally with the given arguments. It may only be
                   executed in the context of a client-/server call.
      Available via: FOMM_Proxy.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_254</srcid><srcstatus/><internalId>259</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_2</srcid><srcstatus/><internalId>436</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.API.FOMM_Server_Mcu_SetMode</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>675</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>175</internalId></specobject>
    <specobject>
      <id>FOMM.EB.ProxyMcuPerformReset.APISignature</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>537</sourceline>
      <version>1</version>
      <description>
      Service Name: FOMM_Proxy_Mcu_PerformReset
      Syntax:
      void FOMM_Proxy_Mcu_PerformReset (void)
      Service ID [hex]: 0x0B
      Sync/Async: Synchronous
      Reentrancy: Non Reentrant
      Parameters (in): None
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service is the Proxy for the Mcu_PerformReset() function.
                   It performs a client-/server call to the FOMM_Server task on a
                   Fail Operational core which then performs the call to the real
                   Mcu_PerformReset() function.
      Available via: FOMM_Proxy.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_127</srcid><srcstatus/><internalId>251</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_158</srcid><srcstatus/><internalId>255</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_358</srcid><srcstatus/><internalId>267</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_0</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_RteInterfaces_3</srcid><srcstatus/><internalId>437</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.API.FOMM_Proxy_Mcu_PerformReset</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>676</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>176</internalId></specobject>
    <specobject>
      <id>FOMM.EB.ServerMcuPerformReset.APISignature</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>565</sourceline>
      <version>1</version>
      <description>
      Service Name: FOMM_Server_Mcu_PerformReset
      Syntax:
      void FOMM_Server_Mcu_PerformReset (void)
      Service ID [hex]: 0x0C
      Sync/Async: Synchronous
      Reentrancy: Non Reentrant
      Parameters (in): None
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service is the Server function called by FOMM_Proxy_Mcu_PerformReset()
                   function.
                   It calls Mcu_PerformReset() locally.
                   It may only be executed in the context of a client-/server call.
      Available via: FOMM_Proxy.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_275</srcid><srcstatus/><internalId>261</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_2</srcid><srcstatus/><internalId>436</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.API.FOMM_Server_Mcu_PerformReset</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>677</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>177</internalId></specobject>
    <specobject>
      <id>FOMM.EB.ProxyDioWriteChannel.APISignature</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>593</sourceline>
      <version>1</version>
      <description>
      Service Name: FOMM_Proxy_Dio_WriteChannel
      Syntax:
      void FOMM_Proxy_Dio_WriteChannel (Dio_ChannelType ChannelId,
                                        Dio_LevelType Level)
      Service ID [hex]: 0x0D
      Sync/Async: Synchronous
      Reentrancy: Reentrant
      Parameters (in): ChannelId  ID of DIO channel.
                       Level      Value to be written.
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service is the Proxy for the Dio_WriteChannel() function.
                   It performs a client-/server call to the FOMM_Server task on a
                   fail operational core which then performs the call to the real
                   Dio_WriteChannel() function.
      Available via: FOMM_Proxy.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_74</srcid><srcstatus/><internalId>245</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_91</srcid><srcstatus/><internalId>247</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_325</srcid><srcstatus/><internalId>263</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_0</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_RteInterfaces_2</srcid><srcstatus/><internalId>436</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_RteInterfaces_3</srcid><srcstatus/><internalId>437</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.CAN.Sm.DioProxy</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>557</internalId></incomingFfbLink><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.API.FOMM_Proxy_Dio_WriteChannel</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>678</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>178</internalId></specobject>
    <specobject>
      <id>FOMM.EB.ServerDioWriteChannel.APISignature</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>623</sourceline>
      <version>1</version>
      <description>
      Service Name: FOMM_Server_Dio_WriteChannel
      Syntax:
      void FOMM_Server_Dio_WriteChannel (Dio_ChannelType ChannelId,
                                         Dio_LevelType Level)
      Service ID [hex]: 0x08
      Sync/Async: Synchronous
      Reentrancy: Reentrant
      Parameters (in): ChannelId  ID of DIO channel.
                       Level      Value to be written.
      Parameters (inout): None
      Parameters (out): None
      Return value: None
      Description: This service is the server function called by FOMM_Proxy_Dio_WriteChannel()
                   function.
                   It calls Dio_WriteChannel() locally with the given arguments.
                   It may only be executed in the context of a client-/server call.
      Available via: FOMM_Proxy.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_203</srcid><srcstatus/><internalId>257</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_1</srcid><srcstatus/><internalId>435</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.API.FOMM_Server_Dio_WriteChannel</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>679</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>179</internalId></specobject>
    <specobject>
      <id>FOMM.EB.SupportedModes</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>653</sourceline>
      <version>1</version>
      <description>
      The FOMM module shall support the following modes:
      - FOMM_MODE_NORMAL
      - FOMM_MODE_FAILOP_SWC_EXEC_PREPARE
      - FOMM_MODE_FAILOP_SWC_EXEC
      - FOMM_MODE_FAILOP_COMM_PREPARE
      - FOMM_MODE_FAILOP_COMM
      - FOMM_MODE_FAILOP_COMM_ONLY
      - FOMM_MODE_FAILOP_SWC_EXEC_ONLY.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_345</srcid><srcstatus/><internalId>291</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_742</srcid><srcstatus/><internalId>330</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ModeChanges</srcid><srcstatus/><internalId>439</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_PartitionFail</srcid><srcstatus/><internalId>440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>180</internalId></specobject>
    <specobject>
      <id>FOMM.EB.Init.ResetState</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>674</sourceline>
      <version>1</version>
      <description>
      After power-up/reset, the FOMM module shall be in the state FOMM_UNINIT.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_214</srcid><srcstatus/><internalId>277</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_SimpleImpTest</srcid><srcstatus/><internalId>438</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_ModeChanges</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>181</internalId></specobject>
    <specobject>
      <id>FOMM.EB.Init.InitStateTransition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>688</sourceline>
      <version>1</version>
      <description>
      The function FOMM_Init() shall change the module state to FOMM_INIT.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_263</srcid><srcstatus/><internalId>280</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ModeChanges</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>182</internalId></specobject>
    <specobject>
      <id>FOMM.EB.Init.ModeState</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>702</sourceline>
      <version>1</version>
      <description>
      The function FOMM_Init() shall set the Fail Operational mode to FOMM_MODE_NORMAL.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_269</srcid><srcstatus/><internalId>282</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_SimpleImpTest</srcid><srcstatus/><internalId>438</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_ModeChanges</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>183</internalId></specobject>
    <specobject>
      <id>FOMM.EB.DeInit.UninitStateTransition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>716</sourceline>
      <version>1</version>
      <description>
      The function FOMM_DeInit() shall change the module state to FOMM_UNINIT.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_292</srcid><srcstatus/><internalId>285</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_SimpleImpTest</srcid><srcstatus/><internalId>438</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>184</internalId></specobject>
    <specobject>
      <id>FOMM.EB.Init.InvalidPartition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>730</sourceline>
      <version>1</version>
      <description>
      FOMM shall reject the call of FOMM_Init() if called from another partition
      than the configured Fail Operational partition.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_258</srcid><srcstatus/><internalId>279</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>185</internalId></specobject>
    <specobject>
      <id>FOMM.EB.DeInit.InvalidPartition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>745</sourceline>
      <version>1</version>
      <description>
      FOMM shall reject the call of FOMM_DeInit() if called from another partition
      than the configured Fail Operational partition.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_289</srcid><srcstatus/><internalId>284</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>186</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GetVersionInfo.NullPtr.ErrorReporting</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>760</sourceline>
      <version>1</version>
      <description>
      If development error detection is enabled, the function FOMM_GetVersionInfo() shall
      raise the error FOMM_E_PARAM_POINTER if the parameter versionInfo is a null pointer.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_315</srcid><srcstatus/><internalId>287</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>187</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GetVersionInfo.Ptr</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>775</sourceline>
      <version>1</version>
      <description>
      If the versionInfo pointer is not null, FOMM_GetVersionInfo() shall store
      the version information in the Std_VersionInfoType struct adress provided by it.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_320</srcid><srcstatus/><internalId>288</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_0</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_SimpleImpTest</srcid><srcstatus/><internalId>438</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>188</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GetMode.NullPtr.ErrorReporting</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>790</sourceline>
      <version>1</version>
      <description>
      If development error detection is enabled, the function FOMM_GetMode() shall
      raise the error FOMM_E_PARAM_POINTER if the parameter Mode is a null pointer.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_444</srcid><srcstatus/><internalId>300</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>189</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GetMode.Ptr</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>805</sourceline>
      <version>1</version>
      <description>
      If the Mode pointer is not null, FOMM_GetMode() shall store the current mode
      as an uint8 value at the address provided.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_397</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_0</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_RteInterfaces_1</srcid><srcstatus/><internalId>435</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_RteInterfaces_2</srcid><srcstatus/><internalId>436</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_RteInterfaces_3</srcid><srcstatus/><internalId>437</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_ModeChanges</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>190</internalId></specobject>
    <specobject>
      <id>FOMM.EB.RequestMode.InvalidPartition.ApiRetValue</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>820</sourceline>
      <version>1</version>
      <description>
      FOMM_RequestMode() shall return E_NOT_OK when called from another partition
      than the configured FO partition.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_362</srcid><srcstatus/><internalId>293</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.Mm.FOComm</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>590</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>191</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GetMode.NoInitBeforeApiCall</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>835</sourceline>
      <version>1</version>
      <description>
      The FOMM module shall return E_NOT_OK for the API request FOMM_GetMode() until the call
      of FOMM_Init() API.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_394</srcid><srcstatus/><internalId>297</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>192</internalId></specobject>
    <specobject>
      <id>FOMM.EB.RequestMode.NoInitBeforeApiCall</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>850</sourceline>
      <version>1</version>
      <description>
      The FOMM module shall return E_NOT_OK for the API request FOMM_RequestMode() until the call
      of FOMM_Init() API.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_342</srcid><srcstatus/><internalId>290</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>193</internalId></specobject>
    <specobject>
      <id>FOMM.EB.RequestMode.NormalToFOSwcExecPrepare</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>865</sourceline>
      <version>1</version>
      <description>
      If the current mode is FOMM_MODE_NORMAL, the FOMM module shall accept only the mode change request
      to Prepare for Fail Operational software component mode meaning a call of FOMM_RequestMode() API
      with the FOMM_MODE_FAILOP_SWC_EXEC_PREPARE mode.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_572</srcid><srcstatus/><internalId>315</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_0</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_ModeChanges</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.Mm.FOLocal</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>2</ffbSrcVersion><internalId>586</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>194</internalId></specobject>
    <specobject>
      <id>FOMM.EB.RequestMode.FOSwcExecPrepareToFOSwcExecution</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>881</sourceline>
      <version>1</version>
      <description>
      If the current mode is FOMM_MODE_FAILOP_SWC_EXEC_PREPARE, the FOMM_RequestMode() API
      shall change the mode to Fail Operational Software component execution mode when called with
      FOMM_MODE_FAILOP_SWC_EXEC.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_610</srcid><srcstatus/><internalId>318</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ModeChanges</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.Mm.FOLocal</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>2</ffbSrcVersion><internalId>586</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>195</internalId></specobject>
    <specobject>
      <id>FOMM.EB.RequestMode.FOSwcExecToFOComPrepare</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>897</sourceline>
      <version>1</version>
      <description>
      If the current mode is FOMM_MODE_FAILOP_SWC_EXEC, the FOMM_RequestMode() API
      shall change the mode to Prepare for Fail Operational Communication mode when called with
      FOMM_MODE_FAILOP_COMM_PREPARE.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_653</srcid><srcstatus/><internalId>323</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ModeChanges</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>196</internalId></specobject>
    <specobject>
      <id>FOMM.EB.RequestMode.FOComPrepareToFOSwcExec</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>913</sourceline>
      <version>1</version>
      <description>
      If the current mode is FOMM_MODE_FAILOP_COMM_PREPARE, the FOMM_RequestMode() API
      shall change the mode to Fail Operational Software component execution mode when called with
      FOMM_MODE_FAILOP_SWC_EXEC.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_611</srcid><srcstatus/><internalId>319</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ModeChanges</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>197</internalId></specobject>
    <specobject>
      <id>FOMM.EB.RequestMode.FOComToFOSwcExec</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>929</sourceline>
      <version>1</version>
      <description>
      If the current mode is FOMM_MODE_FAILOP_COMM, the FOMM_RequestMode() API shall
      change the mode to Fail Operational Software component execution mode when called with
      FOMM_MODE_FAILOP_SWC_EXEC.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_612</srcid><srcstatus/><internalId>320</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ModeChanges</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>198</internalId></specobject>
    <specobject>
      <id>FOMM.EB.RequestMode.FOSwcExecPrepareToNormal</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>945</sourceline>
      <version>1</version>
      <description>
      If the current mode is FOMM_MODE_FAILOP_SWC_EXEC_PREPARE, the FOMM_RequestMode() API shall change the mode
      to Normal operation mode when called with FOMM_MODE_NORMAL.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_530</srcid><srcstatus/><internalId>309</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ModeChanges</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>199</internalId></specobject>
    <specobject>
      <id>FOMM.EB.RequestMode.FOSwcExecToNormal</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>960</sourceline>
      <version>1</version>
      <description>
      If the current mode is FOMM_MODE_FAILOP_SWC_EXEC, the FOMM_RequestMode() API shall change the mode to
      Normal operation mode when called with FOMM_MODE_NORMAL.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_531</srcid><srcstatus/><internalId>310</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ModeChanges</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.Mm.NormalMode</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>589</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>200</internalId></specobject>
    <specobject>
      <id>FOMM.EB.RequestMode.FOCommPrepareToFOComm</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>975</sourceline>
      <version>1</version>
      <description>
      If the current mode is FOMM_MODE_FAILOP_COMM_PREPARE, the FOMM_RequestMode() API shall change the mode to
      Fail Operational communication mode when called with FOMM_MODE_FAILOP_COMM.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_681</srcid><srcstatus/><internalId>325</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ModeChanges</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.Mm.FOComm</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>590</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>201</internalId></specobject>
    <specobject>
      <id>FOMM.EB.RequestMode.FOOnlyCommToFOSwcExecution</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>990</sourceline>
      <version>2</version>
      <description>
      If the current mode is FOMM_MODE_FAILOP_COMM_ONLY, the FOMM_RequestMode() API shall change the mode to
      Fail Operational only software component execution mode when called with FOMM_MODE_FAILOP_SWC_EXEC.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_625</srcid><srcstatus/><internalId>321</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_PartitionFail</srcid><srcstatus/><internalId>440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>202</internalId></specobject>
    <specobject>
      <id>FOMM.EB.PartitionFailedNotification.InvalidPartition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1005</sourceline>
      <version>1</version>
      <description>
      FOMM shall reject the call of FOMM_PartitionFailedNotification() if called
      from another partition than the configured Fail Operational partition.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_723</srcid><srcstatus/><internalId>327</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>203</internalId></specobject>
    <specobject>
      <id>FOMM.EB.PartitionFailedNotification.FOSwcExecPrepareToShutDownAllCores</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1020</sourceline>
      <version>1</version>
      <description>
      If the current mode is FOMM_MODE_FAILOP_SWC_EXEC_PREPARE and the FOMM_PartitionFailedNotification()
      API is called meaning an unrecoverable failure on the non Fail Operational partition, the FOMM module
      shall perform the shutdown operation of all cores.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_772</srcid><srcstatus/><internalId>332</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_PartitionFail</srcid><srcstatus/><internalId>440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.FOMM.FO_Operation</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>515</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>204</internalId></specobject>
    <specobject>
      <id>FOMM.EB.PartitionFailedNotification.FOSwcExecToFOSwcExecOnly</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1036</sourceline>
      <version>1</version>
      <description>
      If the current mode is FOMM_MODE_FAILOP_SWC_EXEC and the FOMM_PartitionFailedNotification()
      API is called meaning an unrecoverable failure on the non Fail Operational partition, the FOMM
      module shall transition the mode to FOMM_MODE_FAILOP_SWC_EXEC_ONLY.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_779</srcid><srcstatus/><internalId>333</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_PartitionFail</srcid><srcstatus/><internalId>440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>205</internalId></specobject>
    <specobject>
      <id>FOMM.EB.PartitionFailedNotification.FOCommPrepareToFOOnlySwcExec</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1052</sourceline>
      <version>1</version>
      <description>
      If the current mode is FOMM_MODE_FAILOP_COMM_PREPARE and the FOMM_PartitionFailedNotification()
      API is called meaning an unrecoverable failure on the non Fail Operational partition, the FOMM
      module shall transition the mode to FOMM_MODE_FAILOP_SWC_EXEC_ONLY.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_779</srcid><srcstatus/><internalId>333</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_PartitionFail</srcid><srcstatus/><internalId>440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>206</internalId></specobject>
    <specobject>
      <id>FOMM.EB.PartitionFailedNotification.FOCommToFOOnlySwcExec</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1068</sourceline>
      <version>1</version>
      <description>
      If the current mode is FOMM_MODE_FAILOP_COMM and the FOMM_PartitionFailedNotification()
      API is called meaning an unrecoverable failure on the non Fail Operational partition, the FOMM
      module shall transition the mode to FOMM_MODE_FAILOP_COMM_ONLY.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_779</srcid><srcstatus/><internalId>333</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_PartitionFail</srcid><srcstatus/><internalId>440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>207</internalId></specobject>
    <specobject>
      <id>FOMM.EB.PartitionFailedNotification.NormalToShutDownAllCores</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1084</sourceline>
      <version>1</version>
      <description>
      If the current mode is FOMM_MODE_NORMAL and the FOMM_PartitionFailedNotification()
      API is called meaning an unrecoverable failure on the non Fail Operational partition,
      the FOMM module shall perform the shutdown operation of all cores.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_772</srcid><srcstatus/><internalId>332</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_PartitionFail</srcid><srcstatus/><internalId>440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>208</internalId></specobject>
    <specobject>
      <id>FOMM.EB.PartitionFailedNotification.IgnoreAPICall</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1100</sourceline>
      <version>1</version>
      <description>
      The FOMM_PartitionFailedNotification() API call shall be ignored when the FOMM module
      is in FOMM_MODE_FAILOP_SWC_EXEC_ONLY mode.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_735</srcid><srcstatus/><internalId>329</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_PartitionFail</srcid><srcstatus/><internalId>440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>209</internalId></specobject>
    <specobject>
      <id>FOMM.EB.ShutdownAllCores.InvalidPartition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1115</sourceline>
      <version>1</version>
      <description>
      FOMM shall reject the call of FOMM_ShutdownAllCores() if called from
      another partition than the configured Fail Operational partition.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_469</srcid><srcstatus/><internalId>303</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>210</internalId></specobject>
    <specobject>
      <id>FOMM.EB.ShutdownAllCores.NormalToShutdownAllCores</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1130</sourceline>
      <version>1</version>
      <description>
      The FOMM_ShutdownAllCores() API can be called only in FOMM_MODE_NORMAL, the FOMM module
      shall start the shutdown operation of all cores.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_476</srcid><srcstatus/><internalId>304</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_0</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_PartitionFail</srcid><srcstatus/><internalId>440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>211</internalId></specobject>
    <specobject>
      <id>FOMM.EB.ShutdownAllCores.CalledFromFOMode</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1145</sourceline>
      <version>1</version>
      <description>
      The FOMM_ShutdownAllCores() API call shall be ignored during the Fail Operational mode.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_481</srcid><srcstatus/><internalId>305</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_PartitionFail</srcid><srcstatus/><internalId>440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>212</internalId></specobject>
    <specobject>
      <id>FOMM.EB.ShutdownAllCores.FOOnlySwcExecToNormal</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1159</sourceline>
      <version>1</version>
      <description>
      If the current mode is FOMM_MODE_FAILOP_SWC_EXEC_ONLY and FOMM_RequestMode() API is called with FOMM_MODE_NORMAL
      mode, the FOMM module shall start the shutdown operation of all cores.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_548</srcid><srcstatus/><internalId>312</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_PartitionFail</srcid><srcstatus/><internalId>440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>213</internalId></specobject>
    <specobject>
      <id>FOMM.EB.ShutdownMechanism</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1174</sourceline>
      <version>1</version>
      <description>
      On Shutdown, the FOMM module shall set the mode to FOMM_MODE_NORMAL and DeInit the Fail Operational modules (FOCan, FOCom)
      before calling ShutdownAllCores() API.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_38</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_PartitionFail</srcid><srcstatus/><internalId>440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>214</internalId></specobject>
    <specobject>
      <id>FOMM.EB.RequestMode.PreventXCoreCommands</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1189</sourceline>
      <version>1</version>
      <description>
      The FOMM_RequestMode() API shall call the Os API PreventXCoreCommands() to protect
      the Fail Operational partition from erroneous behavior of the non-Fail Operational partition
      when entering Fail Operational mode.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_584</srcid><srcstatus/><internalId>316</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_PartitionFail</srcid><srcstatus/><internalId>440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.OS.FailOpMode.PreventXCoreCommands</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>523</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>215</internalId></specobject>
    <specobject>
      <id>FOMM.EB.AllowXCoreCommands</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1205</sourceline>
      <version>1</version>
      <description>
      When entering FOMM_MODE_NORMAL mode, the FOMM module shall call the Os API
      AllowXCoreCommands() to allow handling of operating system commands coming
      from a non-Fail Operational core.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_266</srcid><srcstatus/><internalId>281</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_543</srcid><srcstatus/><internalId>311</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_PartitionFail</srcid><srcstatus/><internalId>440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>216</internalId></specobject>
    <specobject>
      <id>FOMM.EB.ProxyMcuSetMode.IgnoreRequest</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1221</sourceline>
      <version>1</version>
      <description>
      The FOMM module shall silently ignore FOMM_Proxy_Mcu_SetMode() API calls when the current mode is
      not FOMM_MODE_NORMAL.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_120</srcid><srcstatus/><internalId>250</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_151</srcid><srcstatus/><internalId>254</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_351</srcid><srcstatus/><internalId>266</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_0</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_RteInterfaces_1</srcid><srcstatus/><internalId>435</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_RteInterfaces_3</srcid><srcstatus/><internalId>437</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>217</internalId></specobject>
    <specobject>
      <id>FOMM.EB.ProxyMcuPerformReset.IgnoreRequest</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1236</sourceline>
      <version>1</version>
      <description>
      The FOMM module shall silently ignore FOMM_Proxy_Mcu_PerformReset() API calls when current mode is
      not FOMM_MODE_NORMAL.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_135</srcid><srcstatus/><internalId>252</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_166</srcid><srcstatus/><internalId>256</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_366</srcid><srcstatus/><internalId>268</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_0</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_RteInterfaces_1</srcid><srcstatus/><internalId>435</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_RteInterfaces_3</srcid><srcstatus/><internalId>437</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>218</internalId></specobject>
    <specobject>
      <id>FOMM.EB.ProxyDioWriteChannel.IgnoreRequest</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1251</sourceline>
      <version>1</version>
      <description>
      The FOMM module shall silently ignore FOMM_Proxy_Dio_WriteChannel() API calls when the current mode is
      not FOMM_MODE_NORMAL.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_83</srcid><srcstatus/><internalId>246</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_100</srcid><srcstatus/><internalId>248</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_334</srcid><srcstatus/><internalId>264</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_0</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_RteInterfaces_2</srcid><srcstatus/><internalId>436</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_RteInterfaces_3</srcid><srcstatus/><internalId>437</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>EB_FailOP.Arch.CAN.Sm.DioProxy</ffbSrcId><ffbSrcType>swad</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>557</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>219</internalId></specobject>
    <specobject>
      <id>FOMM.EB.RequestMode.ModuleUninitialized.ErrorReporting</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1266</sourceline>
      <version>1</version>
      <description>
      If development error detection for the FOMM module is enabled and the module
      is not yet initialized, the function FOMM_RequestMode() shall raise the
      development error FOMM_E_UNINIT.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_375</srcid><srcstatus/><internalId>295</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_RteInterfaces_0</srcid><srcstatus/><internalId>434</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>220</internalId></specobject>
    <specobject>
      <id>FOMM.EB.GetMode.ModuleUninitialized.ErrorReporting</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1282</sourceline>
      <version>1</version>
      <description>
      If development error detection for the FOMM module is enabled and the module is not
      yet initialized, the function FOMM_GetMode() shall raise the development error FOMM_E_UNINIT.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_450</srcid><srcstatus/><internalId>301</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>221</internalId></specobject>
    <specobject>
      <id>FOMM.EB.PartitionFailedNotification.ModuleUninitialized.ErrorReporting</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1297</sourceline>
      <version>1</version>
      <description>
      If development error detection for the FOMM module is enabled and the module is not
      yet initialized, the function FOMM_PartitionFailedNotification() shall raise the development
      error FOMM_E_UNINIT.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_793</srcid><srcstatus/><internalId>334</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>222</internalId></specobject>
    <specobject>
      <id>FOMM.EB.ShutdownAllCores.ModuleUninitialized.ErrorReporting</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1313</sourceline>
      <version>1</version>
      <description>
      If development error detection for the FOMM module is enabled and the module is not
      yet initialized, the function FOMM_ShutdownAllCores() shall raise the development
      error FOMM_E_UNINIT.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_492</srcid><srcstatus/><internalId>306</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>223</internalId></specobject>
    <specobject>
      <id>FOMM.EB.RequestMode.InvalidMode.ErrorReporting</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1329</sourceline>
      <version>2</version>
      <description>
      If runtime/CDD error detection for the FOMM module is enabled and an invalid transition
      has been requested, the function FOMM_RequestMode() shall raise the runtime/CDD error FOMM_E_TRANSITION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_356</srcid><srcstatus/><internalId>292</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_RteInterfaces_0</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_ModeChanges</srcid><srcstatus/><internalId>439</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_InvalidModeReqs</srcid><srcstatus/><internalId>441</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>224</internalId></specobject>
    <specobject>
      <id>FOMM.EB.InvalidModeRequest.ErrorReporting</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1344</sourceline>
      <version>1</version>
      <description>
      If runtime/CDD error detection for the FOMM module is enabled and
      the parameter Mode is invalid, the function FOMM_RequestMode()
      shall raise the runtime/CDD error code FOMM_E_PARAM_MODE.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_369</srcid><srcstatus/><internalId>294</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_ModeChanges</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>225</internalId></specobject>
    <specobject>
      <id>FOMM.EB.InvalidPartition.ErrorReporting</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1360</sourceline>
      <version>1</version>
      <description>
      If rutime/CDD error detection for the FOMM module is enabled, the FOMM module's functions
      shall raise the runtime/CDD error code FOMM_E_INVALID_PARTITION_REQUEST when called from an invalid partition.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_218</srcid><srcstatus/><internalId>258</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_268</srcid><srcstatus/><internalId>260</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_289</srcid><srcstatus/><internalId>262</internalId></linkedfrom><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_362</srcid><srcstatus/><internalId>293</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>226</internalId></specobject>
    <specobject>
      <id>FOMM.EB.FOMM_E_UNINIT</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1375</sourceline>
      <version>1</version>
      <description>
      The FOMM module shall provide the following error code:
      symbolic name: FOMM_E_UNINIT
      Error value: 0x01
      Relevance: Development
      Type of error: API service used without initialization
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/include/FOMM.h_148</srcid><srcstatus/><internalId>271</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>227</internalId></specobject>
    <specobject>
      <id>FOMM.EB.FOMM_E_INVALID_PARTITION_REQUEST</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1393</sourceline>
      <version>1</version>
      <description>
      The FOMM module shall provide the following error code:
      symbolic name: FOMM_E_INVALID_PARTITION_REQUEST
      Error value: 0x02
      Relevance: Runtime/CDD
      Type of error: API is called from an invalid partition
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/include/FOMM.h_155</srcid><srcstatus/><internalId>272</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>228</internalId></specobject>
    <specobject>
      <id>FOMM.EB.FOMM_E_PARAM_MODE</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1411</sourceline>
      <version>1</version>
      <description>
      The FOMM module shall provide the following error code:
      symbolic name: FOMM_E_PARAM_MODE
      Error value: 0x03
      Relevance: Runtime/CDD
      Type of error: API service called with wrong mode
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/include/FOMM.h_162</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>229</internalId></specobject>
    <specobject>
      <id>FOMM.EB.FOMM_E_TRANSITION</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1429</sourceline>
      <version>2</version>
      <description>
      The FOMM module shall provide the following error code:
      symbolic name: FOMM_E_TRANSITION
      Error value: 0x04
      Relevance: Runtime/CDD
      Type of error: Invalid transition for the current mode
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/include/FOMM.h_169</srcid><srcstatus/><internalId>274</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ModeChanges</srcid><srcstatus/><internalId>439</internalId></linkedfrom><linkedfrom><srcid>TS_FOMM_InvalidModeReqs</srcid><srcstatus/><internalId>441</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>230</internalId></specobject>
    <specobject>
      <id>FOMM.EB.FOMM_E_PARAM_POINTER</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/project/requirements/FOMM.reqm</sourcefile>
      <sourceline>1447</sourceline>
      <version>1</version>
      <description>
      The FOMM module shall provide the following error code:
      symbolic name: FOMM_E_PARAM_POINTER
      Error value: 0x05
      Relevance: Development
      Type of error: Null pointer provided as parameter
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/include/FOMM.h_176</srcid><srcstatus/><internalId>275</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FOMM_ConTestDevErrors</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>231</internalId></specobject>
  </specobjects>
    <specobjects doctype="lim">
    <specobject>
      <id>lim.FOMM.EB_INTREQ_FOMM_0001</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/doc/public/modulereference/integration_req.reqm</sourcefile>
      <sourceline>5</sourceline>
      <version>1</version>
      <description>
        The SCHM_FOMM_EXCLUSIVE_AREA_0 critical section, which ensures that the FOMM mode is always correctly handled without interruption,
        must be protected with inter-core locks (Os spinlocks).
      </description>
      <rationale>
        To ensure FOMM concurrent mode changes.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>232</internalId></specobject>
  </specobjects>
    <specobjects doctype="req">
    <specobject>
      <id>FOWorkflow.UnattendedWizard</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/doc/project/requirements/Requirements.reqm</sourcefile>
      <sourceline>5</sourceline>
      <version>1</version>
      <description>There shall be an Unattended Wizard for auto configuration PDU Router.</description>
      <comment>The Unattended Wizard allows an execution via command line or via Tresos GUI.</comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.foworkflow.test.autconfigure.PDUTransferAutoConfigureTest.testGoldenConfigs</srcid><srcstatus/><internalId>394</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>233</internalId></specobject>
    <specobject>
      <id>FOWorkflow.ErrorHandling</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/doc/project/requirements/Requirements.reqm</sourcefile>
      <sourceline>17</sourceline>
      <version>1</version>
      <description>The FOWorkflow shall forward detected internal failure states by passing a set of collected 
      error status objects or by throwing exceptions.</description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>234</internalId></specobject>
    <specobject>
      <id>FOWorkflow.InputFile</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/doc/project/requirements/Requirements.reqm</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <description>The FOWorkflow shall accept a csv file as input.</description>
      <comment>The file lists all FO-PDUs to be transferred from QA ComStack to FO-ComStack 
      providing the fields that allow to identify the PDU in the QA ComStack configuration.</comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOWorkflow.InputFile.Read</srcid><srcstatus/><internalId>236</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>235</internalId></specobject>
    <specobject>
      <id>FOWorkflow.InputFile.Read</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/doc/project/requirements/Requirements.reqm</sourcefile>
      <sourceline>42</sourceline>
      <version>1</version>
      <description>The FOWorkflow shall check if provided path was empty, 
      existing, or pointing to a directory or file with csv extension. For each detected problem, the FOWorkflow 
      shall yield an error status and provide an error description.</description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.foworkflow.tests.ReadWriteTest.testNoInputFilePath</srcid><srcstatus/><internalId>350</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.foworkflow.tests.ReadWriteTest.testInputFileNotFound</srcid><srcstatus/><internalId>351</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.foworkflow.tests.ReadWriteTest.testFilePathIsDirectory</srcid><srcstatus/><internalId>352</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.foworkflow.tests.ReadWriteTest.testInputFileExtension</srcid><srcstatus/><internalId>353</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.foworkflow.tests.ReadWriteTest.testEmptyInputFile</srcid><srcstatus/><internalId>354</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>236</internalId></specobject>
    <specobject>
      <id>FOWorkflow.InputFile.Validation</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/doc/project/requirements/Requirements.reqm</sourcefile>
      <sourceline>61</sourceline>
      <version>1</version>
      <description>The FOWorkflow shall validate the input of given file. For each detected problem, the FOWorkflow 
      shall yield an error status and provide an error description.</description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.foworkflow.tests.ReadWriteTest.testWrongDelimiters</srcid><srcstatus/><internalId>355</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.foworkflow.tests.ReadWriteTest.testFOPDUValueValidation</srcid><srcstatus/><internalId>356</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.foworkflow.tests.ReadWriteTest.testSuccessfulPduExtract</srcid><srcstatus/><internalId>357</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>237</internalId></specobject>
    <specobject>
      <id>FOWorkflow.PDUExtraction</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/doc/project/requirements/Requirements.reqm</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <description>The PDUs listed in given in csv file shall be identified in the configuration of modules
      CanIf, Com, PduR, EcuC and merged into the configuration of FO-ComStack.</description>
      <comment>All properties needed for configuration of FO-ComStack shall be retrieved from system model 
      configuration.</comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>238</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Headers.h_10</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Headers.h</sourcefile>
      <sourceline>10</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.OsInclusion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>239</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Headers.h_12</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Headers.h</sourcefile>
      <sourceline>12</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.AtomicsInclusion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>240</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Headers.h_14</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Headers.h</sourcefile>
      <sourceline>14</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.FOCanInclusion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>241</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Headers.h_16</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Headers.h</sourcefile>
      <sourceline>16</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.FOComInclusion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>242</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Headers.h_18</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Headers.h</sourcefile>
      <sourceline>18</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.WdgMInclusion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>243</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Proxy.h_21</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/include/FOMM_Proxy.h</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.DioInclusion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>244</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_74</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>74</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyDioWriteChannel.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>245</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_83</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>83</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyDioWriteChannel.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>246</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_91</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>91</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyDioWriteChannel.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>247</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_100</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>100</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyDioWriteChannel.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>248</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_112</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>112</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuSetMode.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>249</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_120</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>120</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuSetMode.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>250</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_127</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>127</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuPerformReset.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>251</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_135</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>135</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuPerformReset.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>252</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_143</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>143</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuSetMode.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>253</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_151</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>151</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuSetMode.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>254</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_158</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>158</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuPerformReset.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>255</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_166</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>166</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuPerformReset.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>256</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_203</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>203</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ServerDioWriteChannel.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>257</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_218</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>218</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.InvalidPartition.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>258</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_254</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>254</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ServerMcuSetMode.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>259</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_268</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>268</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.InvalidPartition.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>260</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_275</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>275</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ServerMcuPerformReset.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>261</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_289</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>289</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.InvalidPartition.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>262</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_325</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>325</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyDioWriteChannel.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>263</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_334</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>334</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyDioWriteChannel.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>264</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_343</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>343</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuSetMode.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>265</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_351</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>351</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuSetMode.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>266</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_358</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>358</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuPerformReset.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>267</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c_366</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate/src/FOMM_Partitions.c</sourcefile>
      <sourceline>366</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuPerformReset.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>268</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate_macros/FOMM_Macros.m_46</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate_macros/FOMM_Macros.m</sourcefile>
      <sourceline>46</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.RteInclusion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>269</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate_macros/FOMM_Macros.m_48</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/generate_macros/FOMM_Macros.m</sourcefile>
      <sourceline>48</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.DetInclusion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>270</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/include/FOMM.h_148</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/include/FOMM.h</sourcefile>
      <sourceline>148</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.FOMM_E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>271</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/include/FOMM.h_155</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/include/FOMM.h</sourcefile>
      <sourceline>155</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.FOMM_E_INVALID_PARTITION_REQUEST</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>272</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/include/FOMM.h_162</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/include/FOMM.h</sourcefile>
      <sourceline>162</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.FOMM_E_PARAM_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>273</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/include/FOMM.h_169</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/include/FOMM.h</sourcefile>
      <sourceline>169</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.FOMM_E_TRANSITION</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>274</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/include/FOMM.h_176</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/include/FOMM.h</sourcefile>
      <sourceline>176</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.FOMM_E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>275</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_38</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>38</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ShutdownMechanism</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>276</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_214</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>214</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.Init.ResetState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>277</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_250</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>250</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.Init.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>278</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_258</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>258</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.Init.InvalidPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>279</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_263</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>263</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.Init.InitStateTransition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>280</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_266</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>266</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.AllowXCoreCommands</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>281</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_269</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>269</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.Init.ModeState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>282</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_281</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>281</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.DeInit.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>283</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_289</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>289</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.DeInit.InvalidPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>284</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_292</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>292</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.DeInit.UninitStateTransition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>285</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_305</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>305</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GetVersionInfo.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>286</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_315</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>315</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GetVersionInfo.NullPtr.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>287</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_320</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>320</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GetVersionInfo.Ptr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>288</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_332</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>332</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.RequestMode.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>289</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_342</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>342</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.RequestMode.NoInitBeforeApiCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>290</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_345</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>345</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.SupportedModes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>291</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_356</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>356</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.RequestMode.InvalidMode.ErrorReporting</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>292</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_362</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>362</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.RequestMode.InvalidPartition.ApiRetValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.InvalidPartition.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>293</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_369</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>369</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.InvalidModeRequest.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>294</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_375</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>375</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.RequestMode.ModuleUninitialized.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>295</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_384</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>384</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GetMode.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>296</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_394</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>394</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GetMode.NoInitBeforeApiCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>297</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_397</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>397</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GetMode.Ptr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>298</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_424</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>424</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.AtomicsThreadFence</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>299</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_444</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>444</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GetMode.NullPtr.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>300</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_450</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>450</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GetMode.ModuleUninitialized.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>301</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_459</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>459</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ShutdownAllCores.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>302</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_469</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>469</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ShutdownAllCores.InvalidPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>303</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_476</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>476</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ShutdownAllCores.NormalToShutdownAllCores</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>304</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_481</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>481</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ShutdownAllCores.CalledFromFOMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>305</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_492</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>492</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ShutdownAllCores.ModuleUninitialized.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>306</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_513</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>513</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.ExclusiveArea_PFN_Flag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>307</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_514</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>514</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.ExclusiveArea_Mode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>308</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_530</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>530</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.RequestMode.FOSwcExecPrepareToNormal</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>309</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_531</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>531</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.RequestMode.FOSwcExecToNormal</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>310</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_543</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>543</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.AllowXCoreCommands</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>311</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_548</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>548</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ShutdownAllCores.FOOnlySwcExecToNormal</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>312</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_566</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>566</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.ExclusiveArea_PFN_Flag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>313</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_567</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>567</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.ExclusiveArea_Mode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>314</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_572</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>572</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.RequestMode.NormalToFOSwcExecPrepare</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>315</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_584</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>584</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.RequestMode.PreventXCoreCommands</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>316</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_601</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>601</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.ExclusiveArea_PFN_Flag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>317</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_610</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>610</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.RequestMode.FOSwcExecPrepareToFOSwcExecution</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>318</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_611</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>611</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.RequestMode.FOComPrepareToFOSwcExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>319</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_612</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>612</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.RequestMode.FOComToFOSwcExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>320</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_625</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>625</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.RequestMode.FOOnlyCommToFOSwcExecution</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>321</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_648</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>648</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.ExclusiveArea_PFN_Flag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>322</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_653</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>653</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.RequestMode.FOSwcExecToFOComPrepare</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>323</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_676</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>676</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.ExclusiveArea_PFN_Flag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>324</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_681</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>681</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.RequestMode.FOCommPrepareToFOComm</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>325</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_711</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>711</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.APISignature</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>326</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_723</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>723</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.InvalidPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>327</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_732</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>732</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.ExclusiveArea_PFN_Flag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>328</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_735</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>735</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.IgnoreAPICall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>329</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_742</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>742</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.SupportedModes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>330</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_743</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>743</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.ExclusiveArea_Mode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>331</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_772</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>772</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.NormalToShutDownAllCores</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.FOSwcExecPrepareToShutDownAllCores</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>332</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_779</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>779</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.FOSwcExecToFOSwcExecOnly</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.FOCommPrepareToFOOnlySwcExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.FOCommToFOOnlySwcExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>333</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4_793</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/src/FOMM.c.m4</sourcefile>
      <sourceline>793</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.ModuleUninitialized.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>334</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_13</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4</sourcefile>
      <sourceline>13</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.ModuleNameCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>335</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_54</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4</sourcefile>
      <sourceline>54</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>336</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_68</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4</sourcefile>
      <sourceline>68</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.Check.SatelliteCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>337</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_73</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.DevErrorDetect</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>338</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_108</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4</sourcefile>
      <sourceline>108</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.DetRuntimeChecks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>339</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_140</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4</sourcefile>
      <sourceline>140</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.CddErrorReportingApiName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>340</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_173</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4</sourcefile>
      <sourceline>173</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.CddHeaderFile</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>341</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_210</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4</sourcefile>
      <sourceline>210</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.PartitionRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>342</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_236</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4</sourcefile>
      <sourceline>236</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.Check.PartitionMismatch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>343</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_243</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4</sourcefile>
      <sourceline>243</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.DioPartitionRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>344</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_275</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4</sourcefile>
      <sourceline>275</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.McuPartitionRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>345</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_307</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4</sourcefile>
      <sourceline>307</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.McuSetModeApiName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>346</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_345</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4</sourcefile>
      <sourceline>345</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.McuPerformResetApiName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>347</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_383</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4</sourcefile>
      <sourceline>383</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.McuHeaderFile</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>348</internalId></specobject>
    <specobject>
      <id>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4_422</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/src/Autosar/config/FOMM.xdm.m4</sourcefile>
      <sourceline>422</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.VersionInfoApi</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>349</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.ReadWriteTest.testNoInputFilePath</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/CsvFileReaderTest.java</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile.Read</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>350</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.ReadWriteTest.testInputFileNotFound</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/CsvFileReaderTest.java</sourcefile>
      <sourceline>55</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile.Read</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>351</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.ReadWriteTest.testFilePathIsDirectory</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/CsvFileReaderTest.java</sourcefile>
      <sourceline>82</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile.Read</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>352</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.ReadWriteTest.testInputFileExtension</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/CsvFileReaderTest.java</sourcefile>
      <sourceline>105</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile.Read</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>353</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.ReadWriteTest.testEmptyInputFile</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/CsvFileReaderTest.java</sourcefile>
      <sourceline>132</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile.Read</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>354</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.ReadWriteTest.testWrongDelimiters</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/CsvFileReaderTest.java</sourcefile>
      <sourceline>157</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile.Validation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>355</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.ReadWriteTest.testFOPDUValueValidation</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/CsvFileReaderTest.java</sourcefile>
      <sourceline>181</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile.Validation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>356</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.ReadWriteTest.testSuccessfulPduExtract</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/CsvFileReaderTest.java</sourcefile>
      <sourceline>221</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile.Validation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>357</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testPdusFromCanIfConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>53</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>358</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testPdusFromCanIfConfigValidForFOExtraction</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>149</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>359</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoPduValidForFOExtractionInCanIfConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>187</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>360</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testPdusNotValidForFOExtraction</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>220</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>361</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testMoreThanOneValidCanIfPduMatchFoundForFOPduRep</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>247</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>362</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoPdusInCanIfConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>271</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>363</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testReferencedHOHNotFoundInCanIfConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>298</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>364</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoCCsInCanIfConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>325</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>365</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testPduProperties</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>352</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>366</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoComIPdusInComConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>422</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>367</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoMatchingComIPdusFound</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>449</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>368</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoPduRIPdusInPduRConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>477</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>369</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoMatchingPduRIPdusFound</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>505</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>370</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoPdusInEcuCConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>533</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>371</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoMatchingEcuCPdusFound</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>563</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>372</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testEcuCNoPduByteLength</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>591</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>373</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testPropertySysTPduToFrameMappingRefInComConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>622</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>374</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoSignalGroupsInComConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>653</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>375</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoMatchingSignalGroupsForComIPduInComConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>683</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>376</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testSignalGroupsWithGroupSignalsForComIPduInComConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>714</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>377</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoGroupSignalsForSignalGroupInComConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>777</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>378</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testPropertyComSystemTemplateSignalGroupRefInComConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>808</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>379</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testPropertyComSystemTemplateSystemSignalRefInComConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>839</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>380</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.SystemDescriptionTest.testSystemModelImportTest</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/SystemDescriptionTest.java</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>381</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testGetExistingFOComPdus</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>43</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>382</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testFOComIPduAlreadyExists</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>99</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>383</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testFOCanPduCfgAlreadyExists</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>156</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>384</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testCreateFOPdus</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>213</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>385</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testFoComSignalGroupsAndSignals</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>300</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>386</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testFoCanWriteControllerAndProperties</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>331</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>387</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testFoCanControllerNoDuplicate</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>380</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>388</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testCleanUpCanIfAfterFOExtraction</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>431</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>389</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testCleanUpPduRAfterFOExtraction</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>547</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>390</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testCleanUpComAfterFOExtraction</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>620</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>391</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testComSignalsFoundInComIPduDuringComCleanup</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>727</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>392</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoMatchingComIPduFound</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>772</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>393</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.test.autconfigure.PDUTransferAutoConfigureTest.testGoldenConfigs</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOSEmgmt)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/autoconfigure/PDUTransferAutoConfigureTest.java</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.UnattendedWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>394</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_FOCOM_COM_02_HandleIdGeneratorCheck</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Compile/IN/FOCom_ComTest_02_HandleIdGeneratorCheck/source/application/Test.c</sourcefile>
      <sourceline>58</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks that running the handle ID wizard creates a valid configuration out of invalid
  IDs with respect to configuration parameters PduRSourcePduHandleId, PduRDestPduHandleId and
  PduRRoutingPathGroupId.
  The handle IDs are checked for being zero-based and dense for each adjacent ASR module by the
  generator.
  This test also verifies the correct generation of the symbolic name values.

Test Object: None.
Test Precondition: 
      Configured Tp and non-TP singlecast and multicast routing path from the same       source module.

Test Execution: 
    The C-code is not part of this test.
    The handle ID wizard is started by command line via the Merged_Makefile.mak.
    The module configuration generator generates file PduR_SymbolicNames_PBcfg.h
    which is compared to the reference.

Test Input: 
     Usage of a common ASR configuration having all adjacent ASR modules configured.
     Configuration holds wrongly assigned handle IDs (non zero-based or non-dense or non-unique)
     and group IDs. Here, all are set to -1.

Test Output: None.&lt;/pre&gt;</description>
    <violations><ruleid>ERR.swuts.providescoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>395</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TestMain</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Compile/IN/FOCom_Compile_VerifyStubs/source/application/Application.c</sourcefile>
      <sourceline>57</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies all FOCom module APIs.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  VP: Successful compilation of FOCom using configuration specified in test.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.ServiceDefinition.Init</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>39</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.ServiceDefinition.Deinit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>40</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.ServiceDefinition.VersionInfo</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>41</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.ServiceDefinition.Transmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>42</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.ServiceDefinition.TxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>43</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.ServiceDefinition.TxConfirmationCallback</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>44</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.ServiceDefinition.RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>45</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.ServiceDefinition.RxIndicationCallback</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>46</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.ServiceDefinition.Satellite_InstallSecOCKey</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>47</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.ServiceDefinition.ReceiveSecOCKey</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>48</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.ServiceDefinition.FOCom_Satellite_MainFunction</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>49</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.ServiceDefinition.ReceiveFreshnessValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>396</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_FOCOM_CON_02001_Transmit_AuthenticIPDU</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_02_Transmit/source/application/EbTest.c</sourcefile>
      <sourceline>138</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test case verifies the FOCom support for transmitting an Authentic I-PDU.

  Requirement verification scenario:
  [FOCom.EB.Transmit.ValidInitState]
  This test verifies that the I-PDU is only transferred to lower layer when the module is in a valid initialized state.
  
  [FOCom.EB.Transmit.ValidTxPduId]
  This test verifies that the I-PDU is only transferred to lower layer when FOCom_Transmit() is called with a valid Tx PDU ID.

  [FOCom.EB.Transmit.ValidBufferPtr]
  This test verifies that the I-PDU is only transferred to lower layer when FOCom_Transmit() is called with a valid data buffer pointer.

  [FOCom.EB.Transmit.AuthenticIpdu]
  This test verifies that in case of authentic I-PDU transfer no SecOC related information is appended with the payload.

  [FOCom.EB.Transmit.CallCanTransmit]
  This test verifies that in case of authentic I-PDU transfer the lower layer API is called by FOCom_Transmit(). 
&lt;/para&gt;

Test Object: 
  FOCom_Transmit()

Test Precondition: 
  FOCom module is initialized.
  FOCom module configuration contains at-least 1 authentic I-PDU for transmission and is used in test.

Test Execution: 
  00: Reset all global variables and flush the trace buffer.
  01: Initialize FOCom module with a valid configuration.
  02: VP: (FOCom.EB.Transmit.ValidInitState)
          Verify that FOCom module state is FOCOM_EB_INIT.
          It is implicitly verified that only in FOCOM_EB_INIT state the PDU is routed successfully
          by verifying the return value of FOCom_Transmit() call in Step 04.
  03: Call FOCom_Transmit() with valid TxPduId, valid PDU data buffer pointer and PDU length.
  04: VP: (FOCom.EB.Transmit.ValidTxPduId)
          (FOCom.EB.Transmit.ValidBufferPtr)
          FOCom_Transmit() is called successfully with return value E_OK. It is implicitly verified that FOCom_Transmit()
          is called with a valid Tx PDU ID and valid data buffer pointer with the return value E_OK.
  05: VP: (FOCom.EB.Transmit.AuthenticIpdu)
          (FOCom.EB.Transmit.CallCanTransmit)
          FOCan_Transmit() is called with converted TxPduId,
          the same pointer to buffer(as passed with FOCom_Transmit call) and the same buffer length.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Transmit.ValidInitState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>92</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.ValidTxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>82</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.ValidBufferPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>87</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.AuthenticIpdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>103</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.CallCanTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>104</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>397</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_02012_Transmit_SecureIPDU_NoFVReceived</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_02_Transmit/source/application/EbTest.c</sourcefile>
      <sourceline>230</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test case verifies that the FOCom_transmit call is rejected if it is invoked before receiving a valid
  freshness value for the freshness value instance to which the tx pdu belongs.
&lt;/para&gt;

Test Object: 
  FOCom_Transmit()

Test Precondition: 
  FOCom module is initialized.
  No FV is received from non-FO partition.
  FOCom module configuration contains at-least 1 secured I-PDU for transmission and is used in test.
  

Test Execution: 
  01: Initialize FOCom module with a valid configuration.
  03: Call FOCom_Transmit() with valid TxPduId, valid Pdu data buffer pointer and Pdu length.
  04: VP: FOCom_Transmit() is called rejected.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
    <violations><ruleid>ERR.swuts.providescoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>398</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_02002_Transmit_SecureIPDU</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_02_Transmit/source/application/EbTest.c</sourcefile>
      <sourceline>284</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test case verifies the FOCom support for transmitting a secured I-PDU.
  Requirement verification scenario:
  [FOCom.EB.Transmit.ValidInitState]
  This test verifies that the I-PDU is only transferred to lower layer when the module is in a valid initialized state.
  
  [FOCom.EB.Transmit.ValidTxPduId]
  This test verifies that the I-PDU is only transferred to lower layer when FOCom_Transmit() is called with a valid Tx PDU ID.

  [FOCom.EB.Transmit.ValidBufferPtr]
  This test verifies that the I-PDU is only transferred to lower layer when FOCom_Transmit() is called with a valid data buffer pointer.

  [FOCom.EB.Transmit.SecuredIpdu]
  This test verifies that in case of secured I-PDU transfer, SecOC related information as per configuration is appended to the payload.

  [FOCom.EB.Transmit.CallCanTransmit]
  This test verifies that in case of secured I-PDU transfer the lower layer API is called by FOCom_Transmit().
&lt;/para&gt;
&lt;para&gt;
  This test is permuted to the following scenarios:
  Permutation                                                      p0    p1    p2    p3
  Freshness Value Length(both complete and truncated FV in bits)   1     64    44    40
  Truncated Authenticator Length(in bits)                          1     64    27    24
  Secure Header Length(in bytes)                                   0     4     1     2
  Authentic I-PDU length(in bytes)                                 1     44    23    24
  Secured I-PDU length(in bytes)                                   2     64    33    34
&lt;/para&gt;

Test Object: 
  FOCom_Transmit()

Test Precondition: 
  FOCom module is initialized.
  A valid freshness value is available for transmit usage.
  A valid session(security) key is available for transmit usage.
  FOCom module configuration contains at-least 1 secured I-PDU for transmission and is used in test.
  

Test Execution: 
  00: Flush the trace buffer, call FOCom_Satellite_MainFunction()
  to get a valid freshness value and call FOCom_Satellite_InstallSecOCKey() to get a valid session key.
  01: Initialize FOCom module with a valid configuration.
  02: VP: (FOCom.EB.Transmit.ValidInitState)
          Verify that FOCom module state is FOCOM_EB_INIT.
          It is implicitly verified that only in FOCOM_EB_INIT state the PDU is routed successfully
          by verifying the return value of FOCom_Transmit() call in Step 04.
  03: Call FOCom_Transmit() with valid TxPduId, valid Pdu data buffer pointer and Pdu length.
  04: VP: (FOCom.EB.Transmit.ValidTxPduId)
          (FOCom.EB.Transmit.ValidBufferPtr)
          FOCom_Transmit() is called successfully with return value E_OK. It is implicitly verified that FOCom_Transmit()
          is called with a valid Tx PDU ID and valid data buffer pointer with the return value.
  05: VP: (FOCom.EB.Transmit.SecuredIpdu)
          (FOCom.EB.Transmit.CallCanTransmit)
          FOCan_Transmit() is called with converted TxPduId and the passed buffer contains
          the correct authentication information.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Transmit.ValidInitState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>92</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.ValidTxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>82</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.ValidBufferPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>87</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>93</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.CallCanTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>104</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>399</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_02003_Transmit_IPDU_InvalidInitState</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_02_Transmit/source/application/EbTest.c</sourcefile>
      <sourceline>402</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test case verifies that FOCom_Transmit() rejects the transmit call when FOCom module is not in valid state.

  Requirement verification scenario:
  [FOCom.EB.Transmit.InValidInitState]
  This test verifies that the I-PDU transmit call is rejected when the module is in a invalid state.
  
  [FOCom.EB.Transmit.InValidInitState.RetVal]
  This test verifies that the I-PDU transmit call return E_NOT_OK when the module is in a invalid state.

  [FOCom.EB.Transmit.InValidInitState.CallDET]
  This test verifies that the I-PDU transmit call invokes DET(if enabled )when the module is in a invalid state.

  [FOCom.EB.Transmit.InValidInitState.CallUserCallback]
  This test verifies that the I-PDU transmit call invokes user configured callback function(if enabled )when the module is in a invalid state.
&lt;/para&gt;

Test Object: 
  FOCom_Transmit()

Test Precondition: 
  FOCom module is not initialized.
  FOCom module configuration contains at-least 1 I-PDU for transmission and is used in test.
  DET and User error callback are enabled.

Test Execution: 
  00: Flush the trace buffer and set the module init status to FOCOM_EB_UNINIT.
  01: Call FOCom_Transmit() with valid TxPduId, valid PDU data buffer pointer and PDU length.
  02: VP: (FOCom.EB.Transmit.InValidInitState.RetVal)
          FOCom_Transmit() call returns value E_NOT_OK.
  03: VP: (FOCom.EB.Transmit.InValidInitState.CallDET)
          (FOCom.EB.Transmit.InValidInitState.CallUserCallback)
          It is verified that DET and user error call back is called with module ID, instance ID, service ID and error code.
  04: VP: (FOCom.EB.Transmit.InValidInitState)
           It is verified that in uninitialized state the PDU is not routed.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Transmit.InValidInitState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>78</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.InValidInitState.RetVal</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>79</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.InValidInitState.CallDET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>400</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_02004_Transmit_IPDU_InvalidTxPduId</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_02_Transmit/source/application/EbTest.c</sourcefile>
      <sourceline>482</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test case verifies that FOCom_Transmit() rejects the transmit call when it is called with a invalid(out of range) Tx PDU ID.

  Requirement verification scenario:
  [FOCom.EB.Transmit.InValidTxPduId]
  This test verifies that the I-PDU transmit call is rejected when it is called with a invalid(out of range) Tx PDU ID.
  
  [FOCom.EB.Transmit.InValidTxPduId.RetVal]
  This test verifies that the I-PDU transmit call return E_NOT_OK when it is called with a invalid(out of range) Tx PDU ID.

  [FOCom.EB.Transmit.InValidTxPduId.CallDET]
  This test verifies that the I-PDU transmit call invokes DET(if enabled )when it is called with a invalid(out of range) Tx PDU ID.

  [FOCom.EB.Transmit.InValidTxPduId.CallUserCallback]
  This test verifies that the I-PDU transmit call invokes user configured callback function(if enabled )when it is called with a invalid(out of range) Tx PDU ID.
&lt;/para&gt;

Test Object: 
  FOCom_Transmit()

Test Precondition: 
  FOCom module is not initialized.
  FOCom module configuration contains at-least 1 I-PDU for transmission and is used in test.
  DET and User error callback are enabled.

Test Execution: 
  00: Reset all global variables and flush the trace buffer.
  01: Initialize the FOCom module by calling FOCom_Init().
  02: Call FOCom_Transmit() with invalid TxPduId, valid PDU data buffer pointer and PDU length.
  03: VP: (FOCom.EB.Transmit.InValidTxPduId.RetVal)
          FOCom_Transmit() call returns value E_NOT_OK.
  04: VP: (FOCom.EB.Transmit.InValidTxPduId.CallDET)
          (FOCom.EB.Transmit.InValidTxPduId.CallUserCallback)
          It is verified that DET and user error call back is called with module ID, instance ID, service ID and error code.
  05: VP: (FOCom.EB.Transmit.InValidInitState)
          It is verified that when called with invalid PDU ID, the PDU is not routed.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Transmit.InValidTxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>83</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.InValidTxPduId.RetVal</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>84</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.InValidTxPduId.CallDET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>401</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_02005_Transmit_IPDU_InvalidBufferPtr</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_02_Transmit/source/application/EbTest.c</sourcefile>
      <sourceline>566</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test case verifies that FOCom_Transmit() rejects the transmit call when it is called with a invalid data buffer pointer.

  Requirement verification scenario:
  [FOCom.EB.Transmit.InValidBufferPtr]
  This test verifies that the I-PDU transmit call is rejected when it is called with a invalid data buffer pointer.
  
  [FOCom.EB.Transmit.InValidBufferPtr.RetVal]
  This test verifies that the I-PDU transmit call return E_NOT_OK when it is called with a invalid data buffer pointer.

  [FOCom.EB.Transmit.InValidBufferPtr.CallDET]
  This test verifies that the I-PDU transmit call invokes DET(if enabled )when it is called with a invalid data buffer pointer.

  [FOCom.EB.Transmit.InValidBufferPtr.CallUserCallback]
  This test verifies that the I-PDU transmit call invokes user configured callback function(if enabled )when it is called with a invalid data buffer pointer.
&lt;/para&gt;

Test Object: 
  FOCom_Transmit()

Test Precondition: 
  FOCom module is not initialized.
  FOCom module configuration contains at-least 1 I-PDU for transmission and is used in test.
  DET and User error callback are enabled.

Test Execution: 
  00: Reset all global variables and flush the trace buffer.
  01: Initialize the FOCom module by calling FOCom_Init().
  02: Call FOCom_Transmit() with valid TxPduId, valid PDU data buffer pointer and PDU length.
  03: VP: (FOCom.EB.Transmit.InValidBufferPtr.RetVal)
          FOCom_Transmit() call returns value E_NOT_OK.
  04: VP: (FOCom.EB.Transmit.InValidBufferPtr.CallDET)
          (FOCom.EB.Transmit.InValidBufferPtr.CallUserCallback)
          It is verified that DET and user error call back is called with module ID, instance ID, service ID and error code.
  05: VP: (FOCom.EB.Transmit.InValidBufferPtr)
          It is verified that when called with invalid data buffer pointer, the PDU is not routed.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Transmit.InValidBufferPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>88</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.InValidBufferPtr.RetVal</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>89</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.InValidBufferPtr.CallDET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>402</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_02013_Transmit_IPDU_InvalidBufferSize</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_02_Transmit/source/application/EbTest.c</sourcefile>
      <sourceline>650</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test case verifies that FOCom_Transmit() rejects the transmit call when it is called with a invalid data buffer size.
&lt;/para&gt;

Test Object: 
  FOCom_Transmit()

Test Precondition: 
  FOCom module is not initialized.
  FOCom module configuration contains at-least 1 I-PDU for transmission and is used in test.
  DET and User error callback are enabled.

Test Execution: 
  00: Reset all global variables and flush the trace buffer.
  01: Initialize the FOCom module by calling FOCom_Init().
  02: Call FOCom_Transmit() with valid TxPduId, valid PDU data buffer pointer and invalid buffer size.
  03: VP: FOCom_Transmit() call returns value E_NOT_OK.
  04: VP: It is verified that DET and user error call back is called with module ID, instance ID, service ID and error code.
  05: VP: It is verified that when called with invalid data buffer pointer, the PDU is not routed.

Test Input: None.
Test Output: None.</description>
    <violations><ruleid>ERR.swuts.providescoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>403</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_02006_GetVersionInfo</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_02_Transmit/source/application/EbTest.c</sourcefile>
      <sourceline>714</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that the function FOCom_GetVersionInfo returns the version information
  of this module in the passed argument *versionInfo.
  The version information includes: Module Id, Vendor Id, Vendor specific version numbers.
&lt;/para&gt;

Test Object: None.
Test Precondition: 
 - FOComVersionInfoApi is enabled
 - Macros FOCom_VENDOR_ID,.. are defined properly

Test Execution: 
  01: FOCom_GetVersionInfo() is called with valid versionInfo pointer
  02: VP: (FOCom.EB.GetVersionInfo.ReturnVersionInfo)
     FOCom_VENDOR_ID, FOCom_MODULE_ID, FOCom_SW_MAJOR_VERSION, FOCom_SW_MINOR_VERSION and FOCom_SW_PATCH_VERSION
     are returned by versionInfo.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.GetVersionInfo.ReturnVersionInfo</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>404</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_02007_PublishedInformation</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_02_Transmit/source/application/EbTest.c</sourcefile>
      <sourceline>764</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test shall check the correct definition of the common published information
  provided in the module header file.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: None.
Test Input: 
1. macro definition FOCom_VENDOR_ID
2. macro definition FOCom_MODULE_ID
3. macro definition FOCom_AR_RELEASE_MAJOR_VERSION
4. macro definition FOCom_AR_RELEASE_MINOR_VERSION
5. macro definition FOCom_AR_RELEASE_REVISION_VERSION
6. macro definition FOCom_SW_MAJOR_VERSION
7. macro definition FOCom_SW_MINOR_VERSION
8. macro definition FOCom_SW_PATCH_VERSION
9. macro definition FOCom_INSTANCE_ID

Test Output: 
Test Pass Criteria:
1. FOCom_VENDOR_ID shall be defined
   with the value globally provided by the tooling
   environment
2. FOCom_MODULE_ID shall be defined with 49
3. FOCom_AR_RELEASE_MAJOR_VERSION shall be defined
   with the value specified in config.mk
4. FOCom_AR_RELEASE_MINOR_VERSION shall be defined
   with the value specified in config.mk
5. FOCom_AR_RELEASE_REVISION_VERSION shall be defined
   with the value specified in config.mk
6. FOCom_SW_MAJOR_VERSION shall be defined
   with the value specified in config.mk
7. FOCom_SW_MINOR_VERSION shall be defined
    with the value specified in config.mk
8. FOCom_SW_PATCH_VERSION shall be defined
    with the value specified in config.mk
9. FOCom_INSTANCE_ID shall be defined with 0U
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.PublishedInformation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>405</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_02008_TxConfirmation_InvokeUserCallback</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_02_Transmit/source/application/EbTest.c</sourcefile>
      <sourceline>866</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that the user configured Tx confirmation callback function is called when FOCom_FOCanTxConfirmation() is called.

  Requirement verification scenario:
  [FOCom.EB.TxConfirmation.CallCbk]
&lt;/para&gt;

Test Object: 
  FOCom_FOCanTxConfirmation()

Test Precondition: 
  FOCom module is initialized.
  FOCom module configuration contains at-least 1 I-PDU for transmission and is used in test.

Test Execution: 
  01: VP: (FOCom.EB.TxConfirmation.ValidInitState)
      It is verified that the module is correct init state. It is implicitly verified that only in valid init state
      Tx confirmation call invoke the user callback function which is verified in step 03
  02: Call FOCom_FOCanTxConfirmation()
  03: VP: (FOCom.EB.TxConfirmation.CallCbk)
          (FOCom.EB.TxConfirmation.ValidPduId)
      FOCom_DummyCbkTxConfirmation callback is called. It is implicitly verified that only when FOCom_FOCanTxConfirmation() is called
      with a valid PDU ID then the user callback function is invoked.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.CallCbk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>105</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.ValidInitState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>109</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.ValidPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>113</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>406</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_02009_TxConfirmation_InValidTxPduId</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_02_Transmit/source/application/EbTest.c</sourcefile>
      <sourceline>917</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test case verifies that FOCom_FOCanTxConfirmation() rejects the transmit confirmation call when it is called with a invalid(out of range) Tx PDU ID.

  Requirement verification scenario:
  [FOCom.EB.TxConfirmation.InValidPduId]
  This test verifies that the I-PDU transmit confirmation call is rejected when it is called with a invalid(out of range) Tx PDU ID.

  [FOCom.EB.TxConfirmation.InValidPduId.CallDET]
  This test verifies that the I-PDU transmit confirmation call invokes DET(if enabled )when it is called with a invalid(out of range) Tx PDU ID.

  [FOCom.EB.TxConfirmation.InValidPduId.CallUserCallback]
  This test verifies that the I-PDU transmit confirmation call invokes user configured callback function(if enabled )when it is called with a invalid(out of range) Tx PDU ID.
&lt;/para&gt;

Test Object: 
  FOCom_FOCanTxConfirmation()

Test Precondition: 
  FOCom module is initialized.
  FOCom module configuration contains at-least 1 I-PDU for transmission and is used in test.
  DET and User error callback are enabled.

Test Execution: 
  00: Reset the callback counter test variable.
  01: Call FOCom_FOCanTxConfirmation() with invalid TxPduId and a transmit status.
  02: VP: (FOCom.EB.TxConfirmation.InValidPduId.CallDET)
          (FOCom.EB.TxConfirmation.InValidPduId.CallUserCallback)
          It is verified that DET and user error call back is called with module ID, instance ID, service ID and error code.
  03: VP: (FOCom.EB.TxConfirmation.InValidPduId)
           It is verified that in uninitialized state the Tx confirmation user callback is not called.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.InValidPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>114</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.InValidPduId.CallDET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>407</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_02010_TxConfirmation_InValidFnPtr</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_02_Transmit/source/application/EbTest.c</sourcefile>
      <sourceline>980</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test case verifies that FOCom_FOCanTxConfirmation() rejects the transmit confirmation call when the configured user callback function pointer is invalid.

  Requirement verification scenario:
  [FOCom.EB.TxConfirmation.InValidFnPtr]
  This test verifies that the I-PDU transmit confirmation call is rejected when the configured user callback function pointer is invalid.

  [FOCom.EB.TxConfirmation.InValidFnPtr.CallDET]
  This test verifies that the I-PDU transmit confirmation call invokes DET(if enabled )when the configured user callback function pointer is invalid.

  [FOCom.EB.TxConfirmation.InValidFnPtr.CallUserCallback]
  This test verifies that the I-PDU transmit confirmation call invokes user configured callback function(if enabled )when the configured user callback function pointer is invalid.
&lt;/para&gt;

Test Object: 
  FOCom_FOCanTxConfirmation()

Test Precondition: 
  FOCom module is initialized.
  FOCom module configuration contains at-least 1 I-PDU for transmission and is used in test.
  DET and User error callback are enabled.

Test Execution: 
  00: Reset the callback counter test variable.
  01: Call FOCom_FOCanTxConfirmation() with valid TxPduId and a transmit status.
  02: VP: (FOCom.EB.TxConfirmation.InValidFnPtr.CallDET)
          (FOCom.EB.TxConfirmation.InValidFnPtr.CallUserCallback)
          It is verified that DET and user error call back is called with module ID, instance ID, service ID and error code.
  03: VP: (FOCom.EB.TxConfirmation.InValidFnPtr)
           It is verified that when user callback function pointer is invalid, Tx confirmation user callback is not called.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.InValidFnPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>117</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.InValidFnPtr.CallDET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>118</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>408</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_02011_TxConfirmation_InValidInitState</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_02_Transmit/source/application/EbTest.c</sourcefile>
      <sourceline>1043</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test case verifies that FOCom_FOCanTxConfirmation() rejects the transmit confirmation call when FOCom module is not in valid state.

  Requirement verification scenario:
  [FOCom.EB.TxConfirmation.InValidInitState]
  This test verifies that the I-PDU transmit confirmation call is rejected when the module is in a invalid state.

  [FOCom.EB.TxConfirmation.InValidInitState.CallDET]
  This test verifies that the I-PDU transmit confirmation call invokes DET(if enabled )when the module is in a invalid state.

  [FOCom.EB.TxConfirmation.InValidInitState.CallUserCallback]
  This test verifies that the I-PDU transmit confirmation call invokes user configured callback function(if enabled )when the module is in a invalid state.
&lt;/para&gt;

Test Object: 
  FOCom_FOCanTxConfirmation()

Test Precondition: 
  FOCom module is not initialized.
  FOCom module configuration contains at-least 1 I-PDU for transmission and is used in test.
  DET and User error callback are enabled.

Test Execution: 
  00: Reset the callback counter test variable and set the FOCom module initialization status to FOCOM_EB_UNINIT.
  01: Call FOCom_FOCanTxConfirmation() with valid TxPduId and a transmit status.
  02: VP: (FOCom.EB.TxConfirmation.InValidInitState.CallDET)
          (FOCom.EB.TxConfirmation.InValidInitState.CallUserCallback)
          It is verified that DET and user error call back is called with module ID, instance ID, service ID and error code.
  03: VP: (FOCom.EB.TxConfirmation.InValidInitState)
           It is verified that in uninitialized state the Tx confirmation user callback is not called.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.InValidInitState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>110</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.InValidInitState.CallDET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>409</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_FOCOM_CON_03001_Receive_AuthenticIPDU</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_03_Receive/source/application/EbTest.c</sourcefile>
      <sourceline>155</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that FOCom_FOCanRxIndication() route a received authentic I-PDU from lower layer to upper layer.
  Requirement verification scenario:
  [FOCom.EB.RxIndication.ValidInitState]
  This test verifies that the I-PDU is only transferred to upper layer when the module is in a valid initialized state.
  
  [FOCom.EB.RxIndication.ValidRxPduId]
  This test verifies that the I-PDU is only transferred to upper layer when FOCom_FOCanRxIndication() is called with a valid Rx PDU ID.

  [FOCom.EB.RxIndication.ValidBufferPtr]
  This test verifies that the I-PDU is only transferred to upper layer when FOCom_FOCanRxIndication() is called with a valid data buffer pointer.

  [FOCom.EB.RxIndication.AuthenticIpdu]
  This test verifies that in case of authentic I-PDU transfer no SecOC related information is verified.

  [FOCom.EB.RxIndication.CallCbk.PassedParameters]
  This test verifies that in case of authentic I-PDU transfer, the upper layer function is called.
&lt;/para&gt;

Test Object: 
  FOCom_FOCanRxIndication()

Test Precondition: 
  The FOCom has been initialized.
  FOCom module configuration contains at-least 1 authentic I-PDU for reception and is used in test.

Test Execution: 
  01: Initialize FOCom module by calling FOCom_Init() function.
  02: Call FOCom_FOCanRxIndication() with valid PduId and valid Pdu buffer pointer and size.
  03: VP: (FOCom.EB.RxIndication.ValidInitState)
          (FOCom.EB.RxIndication.ValidRxPduId)
          (FOCom.EB.RxIndication.ValidBufferPtr)
          (FOCom.EB.RxIndication.AuthenticIpdu)
          (FOCom.EB.RxIndication.CallCbk.PassedParameters)
      RxIndication callback function FOCom_DummyCbkRxIndication() is called with converted PduId and
          the same pointer to buffer and same size. 
          It is implicitly verified that only when module is in a valid init state and when
          called with a valid Rx PDU ID and valid data buffer pointer then PDU is routed to upper layer.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.RxIndication.ValidInitState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>125</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.RxIndication.ValidRxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>129</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.RxIndication.ValidBufferPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>133</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.RxIndication.AuthenticIpdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>137</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.RxIndication.CallCbk.PassedParameters</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>143</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>410</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_03002_Receive_SecureIPDU</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_03_Receive/source/application/EbTest.c</sourcefile>
      <sourceline>231</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that FOCom_FOCanRxIndication() route a received secured I-PDU from lower layer to upper layer.
  Requirement verification scenario:
  [FOCom.EB.RxIndication.ValidInitState]
  This test verifies that the I-PDU is only transferred to upper layer when the module is in a valid initialized state.
  
  [FOCom.EB.RxIndication.ValidRxPduId]
  This test verifies that the I-PDU is only transferred to upper layer when FOCom_FOCanRxIndication() is called with a valid Rx PDU ID.

  [FOCom.EB.RxIndication.ValidBufferPtr]
  This test verifies that the I-PDU is only transferred to upper layer when FOCom_FOCanRxIndication() is called with a valid data buffer pointer.

  [FOCom.EB.RxIndication.CallCbk.PassedParameters]
  This test verifies that in case of secured I-PDU transfer, the upper layer function is called.
&lt;/para&gt;

Test Object: 
  FOCom_FOCanRxIndication()

Test Precondition: 
  The FOCom has been initialized.
  A valid freshness value is available for receive usage.
  A valid session(security) key is available for receive usage.
  FOCom module configuration contains at-least 1 secured I-PDU for reception and is used in test.

Test Execution: 
  01: Initialize FOCom module by calling FOCom_Init() function.
  02: Call FOCom_FOCanRxIndication() with valid PduId and valid Pdu buffer pointer and size.
  03: VP: (FOCom.EB.RxIndication.ValidInitState)
          (FOCom.EB.RxIndication.ValidRxPduId)
          (FOCom.EB.RxIndication.ValidBufferPtr)
          (FOCom.EB.RxIndication.CallCbk.PassedParameters)
      RxIndication callback function FOCom_DummyCbkRxIndication() is called with converted PduId and
          the same pointer to buffer and same size. 
          It is implicitly verified that only when module is in a valid init state and when
          called with a valid Rx PDU ID and valid data buffer pointer then PDU is routed to upper layer.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.RxIndication.ValidInitState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>125</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.RxIndication.ValidRxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>129</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.RxIndication.ValidBufferPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>133</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.RxIndication.AuthenticIpdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>137</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.RxIndication.CallCbk.PassedParameters</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>143</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>411</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_03003_Receive_Invalid_FreshnessValue</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_03_Receive/source/application/EbTest.c</sourcefile>
      <sourceline>320</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that when a secured I-PDU is received from the lower layer, then
  freshness value comparison shall be performed.
&lt;/para&gt;
&lt;para&gt;
  This test is permuted to the following scenarios:
  Permutation                                                      p0    p1    p2    p3
  Freshness Value Length(both complete and truncated FV in bits)   1     64    44    40
  Truncated Authenticator Length(in bits)                          1     64    27    24
  Secure Header Length(in bytes)                                   0     4     1     2
  Authentic I-PDU length(in bytes)                                 1     44    23    24
  Secured I-PDU length(in bytes)                                   2     64    33    34
&lt;/para&gt;

Test Object: 
  FOCom_FOCanRxIndication()

Test Precondition: 
  The FOCom has been initialized.
  A valid freshness value is available for receive usage.
  A valid session(security) key is available for receive usage.
  FOCom module configuration contains at-least 1 secured I-PDU for reception and is used in test.

Test Execution: 
  00: Reset stubs, flush the trace buffer and initialize FOCom module by calling FOCom_Init() function.
  01: Enable stub to create a freshness value error, install a secure key and get current freshness value. 
  02: Call FOCom_FOCanRxIndication() with valid PduId and valid Pdu buffer pointer and size.
  03: VP: (FOCom.EB.RxIndication.SecuredIpdu.VerifyFV)
          (FOCom.EB.RxIndication.SecuredIpdu.VerifyFV.TruncBits)
      It is verified that if freshness value check is failed then the PDU is discarded.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.RxIndication.SecuredIpdu.VerifyFV</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>138</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.RxIndication.SecuredIpdu.VerifyFV.TruncBits</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>412</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_03004_Receive_Invalid_MAC</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_03_Receive/source/application/EbTest.c</sourcefile>
      <sourceline>393</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that when a secured I-PDU is received from the lower layer, then
  MAC comparison shall be performed.
&lt;/para&gt;
&lt;para&gt;
  This test is permuted to the following scenarios:
  Permutation                                                      p0    p1    p2    p3
  Freshness Value Length(both complete and truncated FV in bits)   1     64    44    40
  Truncated Authenticator Length(in bits)                          1     64    27    24
  Secure Header Length(in bytes)                                   0     4     1     2
  Authentic I-PDU length(in bytes)                                 1     44    23    24
  Secured I-PDU length(in bytes)                                   2     64    33    34
&lt;/para&gt;

Test Object: 
  FOCom_FOCanRxIndication()

Test Precondition: 
  The FOCom has been initialized.
  A valid freshness value is available for receive usage.
  A valid session(security) key is available for receive usage.
  FOCom module configuration contains at-least 1 secured I-PDU for reception and is used in test.

Test Execution: 
  00: Reset stubs, flush the trace buffer and initialize FOCom module by calling FOCom_Init() function.
  01: Enable stub to create a MAC error, install a secure key and get current freshness value. 
  02: Call FOCom_FOCanRxIndication() with valid PduId and valid Pdu buffer pointer and size.
  03: VP: (FOCom.EB.RxIndication.SecuredIpdu.VerifyMAC)
          (FOCom.EB.RxIndication.SecuredIpdu.VerifyMAC.FailedCheck)
      It is verified that if MAC check is failed then the PDU is discarded.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.RxIndication.SecuredIpdu.VerifyMAC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>140</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.RxIndication.SecuredIpdu.VerifyMAC.FailedCheck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>413</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_03005_Receive_InvalidInitState</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_03_Receive/source/application/EbTest.c</sourcefile>
      <sourceline>476</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test case verifies that FOCom_FOCanRxIndication() rejects the receive call when FOCom module is not in valid state.

  Requirement verification scenario:
  [FOCom.EB.RxIndication.InValidInitState]
  This test verifies that the I-PDU receive call is rejected when the module is in a invalid state.

  [FOCom.EB.RxIndication.InValidInitState.CallDET]
  This test verifies that the I-PDU receive call invokes DET(if enabled )when the module is in a invalid state.

  [FOCom.EB.RxIndication.InValidInitState.CallUserCallback]
  This test verifies that the I-PDU receive call invokes user configured callback function(if enabled )when the module is in a invalid state.
&lt;/para&gt;

Test Object: 
  FOCom_FOCanRxIndication()

Test Precondition: 
  FOCom module is not initialized.
  FOCom module configuration contains at-least 1 I-PDU for reception and is used in test.
  DET and User error callback are enabled.

Test Execution: 
  00: Flush the trace buffer and set the module init status to FOCOM_EB_UNINIT.
  01: Call FOCom_FOCanRxIndication() with valid PduId and valid Pdu buffer pointer and size.
  02: VP: (FOCom.EB.RxIndication.InValidInitState.CallDET)
          (FOCom.EB.RxIndication.InValidInitState.CallUserCallback)
          It is verified that DET and user error call back is called with module ID, instance ID, service ID and error code.
  03: VP: (FOCom.EB.RxIndication.InValidInitState)
      It is verified that in invalid init state, then the PDU is discarded.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.RxIndication.InValidInitState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>126</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.RxIndication.InValidInitState.CallDET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>414</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_03006_Receive_InvalidRxPduId</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_03_Receive/source/application/EbTest.c</sourcefile>
      <sourceline>543</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test case verifies that FOCom_FOCanRxIndication() rejects the receive call when it is called with a invalid Rx PDU ID.

  Requirement verification scenario:
  [FOCom.EB.RxIndication.InValidRxPduId]
  This test verifies that the I-PDU receive call is rejected when it is called with a invalid Rx PDU ID.

  [FOCom.EB.RxIndication.InValidRxPduId.CallDET]
  This test verifies that the I-PDU receive call invokes DET(if enabled )when it is called with a invalid Rx PDU ID.

  [FOCom.EB.RxIndication.InValidRxPduId.CallUserCallback]
  This test verifies that the I-PDU receive call invokes user configured callback function(if enabled )when it is called with a invalid Rx PDU ID.
&lt;/para&gt;

Test Object: 
  FOCom_FOCanRxIndication()

Test Precondition: 
  FOCom module is initialized.
  FOCom module configuration contains at-least 1 I-PDU for reception and is used in test.
  DET and User error callback are enabled.

Test Execution: 
  00: Reset the variables, flush the trace buffer and init the FOCom module.
  01: Call FOCom_FOCanRxIndication() with invalid Rx PduId and valid Pdu buffer pointer and size.
  02: VP: (FOCom.EB.RxIndication.InValidRxPduId.CallDET)
          (FOCom.EB.RxIndication.InValidRxPduId.CallUserCallback)
          It is verified that DET and user error call back is called with module ID, instance ID, service ID and error code.
  03: VP: (FOCom.EB.RxIndication.InValidRxPduId)
      It is verified that in invalid init state, then the PDU is discarded.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.RxIndication.InValidRxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>130</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.RxIndication.InValidRxPduId.CallDET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>415</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_03007_Receive_InvalidRxDataBufferPtr</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_03_Receive/source/application/EbTest.c</sourcefile>
      <sourceline>611</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test case verifies that FOCom_FOCanRxIndication() rejects the receive call when it is called with a invalid Rx PDU data buffer pointer.

  Requirement verification scenario:
  [FOCom.EB.RxIndication.InValidBufferPtr]
  This test verifies that the I-PDU receive call is rejected when it is called with a invalid Rx PDU data buffer pointer.

  [FOCom.EB.RxIndication.InValidBufferPtr.CallDET]
  This test verifies that the I-PDU receive call invokes DET(if enabled )when it is called with a invalid Rx PDU data buffer pointer.

  [FOCom.EB.RxIndication.InValidBufferPtr.CallUserCallback]
  This test verifies that the I-PDU receive call invokes user configured callback function(if enabled )when it is called with a invalid Rx PDU data buffer pointer.
&lt;/para&gt;

Test Object: 
  FOCom_FOCanRxIndication()

Test Precondition: 
  FOCom module is initialized.
  FOCom module configuration contains at-least 1 I-PDU for reception and is used in test.
  DET and User error callback are enabled.

Test Execution: 
  00: Reset the variables, flush the trace buffer and init the FOCom module.
  01: Call FOCom_FOCanRxIndication() with valid Rx PduId and invalid Pdu buffer pointer and valid size.
  02: VP: (FOCom.EB.RxIndication.InValidBufferPtr.CallDET)
          (FOCom.EB.RxIndication.InValidBufferPtr.CallUserCallback)
          It is verified that DET and user error call back is called with module ID, instance ID, service ID and error code.
  03: VP: (FOCom.EB.RxIndication.InValidBufferPtr)
      It is verified that in invalid init state, then the PDU is discarded.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.RxIndication.InValidBufferPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>134</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.RxIndication.InValidBufferPtr.CallDET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>416</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_FOCOM_CON_04001_Transmit_SecureIPDU_TruncFvAndMac</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_04_Transmit_TruncFvAndMac/source/application/EbTest.c</sourcefile>
      <sourceline>194</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that for the transmission of secured I-PDU, only truncated parts of freshness value and MAC
  are used as per the configuration.
&lt;/para&gt;

Test Object: 
  FOCom_Transmit()

Test Precondition: 

Test Execution: 
  01: Call FOCom_Transmit() with valid TxPduId and valid PduInfo.
  02: VP: FOCan_Transmit() is called with converted TxPduId and
          the same pointer to buffer.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>94</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.TruncMAC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>95</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.TruncMAC.UseMSBBits</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>96</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.TruncFreshnessValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>97</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.TruncFreshnessValue.UseLSBBits</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>98</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.MACByteOrder</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>99</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.FreshnessValueByteOrder</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>100</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.ExcludeFreshnessValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>101</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.SecuredIpdu.ConstructSecuredIpdu.GenerateMAC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>102</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Satellite.GetSecureKey</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>65</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Satellite.StoreSecureKey</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>66</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Satellite.CallReceiveSecOCKey</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>67</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Satellite.OverwriteArbitraryData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>68</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.ReceiveSecOCKey.CopySecureKey</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>69</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Satellite.MainFunction.GetTxFreshness</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>70</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Satellite.MainFunction.CallReceiveFreshnessValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>71</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Satellite.MainFunction.CopyFreshnessValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>72</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>417</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_04002_Satellite_FO_Mode</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_04_Transmit_TruncFvAndMac/source/application/EbTest.c</sourcefile>
      <sourceline>275</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that in FO mode the FOCom_Satellite_MainFunction does not transfer any freshness values to
  the FO partition.
&lt;/para&gt;

Test Object: 
  FOCom_Transmit()

Test Precondition: 

Test Execution: 
  01: Set FOMM Mode to FOMM_MODE_FAILOP_SWC_EXEC_PREPARE
  02: Call FOCom_Satellite_MainFunction(.
  03: VP: No further functions are called. Ensured by trace check.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
    <violations><ruleid>ERR.swuts.providescoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>418</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_FOCOM_CON_03002_Receive_SecureIPDU_TruncFvAndMac</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_05_Receive_TruncFvAndMac/source/application/EbTest.c</sourcefile>
      <sourceline>213</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that FOComUser_CbkRxIndication has been invoked when
  FOCom_FOCanRxIndication is called.

  This test verifies that the called FOComHandleId of FOCom_FOCanRxIndication
  is converted to the target upper layer module when calling FOComUser_CbkRxIndication.

  This test verifies that the I-PDU content is not modified by FOCom module.

&lt;/para&gt;

Test Object: 
  FOCom_FOCanRxIndication()

Test Precondition: 
  The FOCom has been initialized.

Test Execution: 
  00: Initialize FOCom module by calling FOCom_Init() function.
  01: Call FOCom_FOCanRxIndication() with valid PduId and valid Pdu buffer pointer and size.
  02: VP: RxIndication callback function FOCom_DummyCbkRxIndication() is called with converted PduId and
          the same pointer to buffer and same size.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.RxIndication.SecuredIpdu.VerifyMAC.PassedCheck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>419</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_03003_Receive_Invalid_TruncFreshnessValue</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_05_Receive_TruncFvAndMac/source/application/EbTest.c</sourcefile>
      <sourceline>292</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that FOComUser_CbkRxIndication has been invoked when
  FOCom_FOCanRxIndication is called.

  This test verifies that the called FOComHandleId of FOCom_FOCanRxIndication
  is converted to the target upper layer module when calling FOComUser_CbkRxIndication.

  This test verifies that the I-PDU content is not modified by FOCom module.

&lt;/para&gt;

Test Object: 
  FOCom_FOCanRxIndication()

Test Precondition: 
  The FOCom has been initialized.

Test Execution: 
  00: Initialize FOCom module by calling FOCom_Init() function.
  01: Call FOCom_FOCanRxIndication() with valid PduId and valid Pdu buffer pointer and size.
  02: VP: RxIndication callback function FOCom_DummyCbkRxIndication() is called with converted PduId and
          the same pointer to buffer and same size.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.RxIndication.SecuredIpdu.VerifyFV</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>138</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.RxIndication.SecuredIpdu.VerifyFV.TruncBits</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>420</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_03004_Receive_Invalid_TruncMAC</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_05_Receive_TruncFvAndMac/source/application/EbTest.c</sourcefile>
      <sourceline>360</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that FOComUser_CbkRxIndication has been invoked when
  FOCom_FOCanRxIndication is called.

  This test verifies that the called FOComHandleId of FOCom_FOCanRxIndication
  is converted to the target upper layer module when calling FOComUser_CbkRxIndication.

  This test verifies that the I-PDU content is not modified by FOCom module.

&lt;/para&gt;

Test Object: 
  FOCom_FOCanRxIndication()

Test Precondition: 
  The FOCom has been initialized.

Test Execution: 
  00: Initialize FOCom module by calling FOCom_Init() function.
  01: Call FOCom_FOCanRxIndication() with valid PduId and valid Pdu buffer pointer and size.
  02: VP: RxIndication callback function FOCom_DummyCbkRxIndication() is called with converted PduId and
          the same pointer to buffer and same size.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.RxIndication.SecuredIpdu.VerifyMAC.FailedCheck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>421</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_FOCOM_CON_06001_Init_PartitionCall</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_06_MultiPartition/source/application/EbTest.c</sourcefile>
      <sourceline>78</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that FOCom module is initialized with FOCom_Init() only when it is called from the configured FO partition.
  Requirement verification scenario:

  [FOCom.EB.Init.InitInternalDataStructures]
  This test verifies that the FOCom_Init call initializes the module to FOCOM_EB_INIT state when it is called from the configured FO partition.
  
  [FOCom.EB.Init.InvalidInitCall]
  This test verifies that the FOCom_Init call does not initializes the module to FOCOM_EB_INIT when it is called from a different partition.

  [FOCom.EB.Init.InvalidInitCall.CallDET]
  This test verifies that the FOCom_Init call from a different partition invokes DET(if enabled).

  [FOCom.EB.Init.InvalidInitCall.CallUserCallback]
  This test verifies that the FOCom_Init call from a different partition invokes user configured callback function(if enabled ).
&lt;/para&gt;
&lt;para&gt;
  This test is permuted to the following cases:
  p0 : Call to GetApplicationID() returns the same application ID as configured in module configuration.
  p1 : Call to GetApplicationID() returns a different application ID than configured in module configuration
&lt;/para&gt;

Test Object: 
  FOCom_Init()

Test Precondition: 

Test Execution: 
  01: Call FOCom_Init() with a valid configuration.
In case of p0:
  02: VP: (FOCom.EB.Init.InitInternalDataStructures)
      FOCom module init status is FOCOM_EB_INIT.
In case of P1:
  03 : VP: (FOCom.EB.Init.InvalidInitCall)
       FOCom module init status is FOCOM_EB_UNINIT.
  04 : VP: (FOCom.EB.Init.InvalidInitCall.CallDET)
           (FOCom.EB.Init.InvalidInitCall.CallUserCallback)
       It is verified that DET and user error call back is called with module ID, instance ID, service ID and error code.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Init.InitInternalDataStructures</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>52</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Init.InvalidInitCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>53</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Init.InvalidInitCall.CallDET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>422</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_06002_Transmit_PartitionCall</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_06_MultiPartition/source/application/EbTest.c</sourcefile>
      <sourceline>164</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that FOCan_Transmit functionality is only performed when it is called from the configured FO partition.

  Requirement verification scenario:
  [FOCom.EB.Transmit.ValidPartitionCall]
  This test verifies that the I-PDU transmit call performs the routing operation when it is called from the configured FO partition.
  
  [FOCom.EB.Transmit.InvalidPartitionCall]
  This test verifies that the I-PDU transmit call return E_NOT_OK when it is called from a different partition.

  [FOCom.EB.Transmit.InvalidPartitionCall.RetVal]
  This test verifies that the I-PDU transmit call invokes DET(if enabled )when it is called from a different partition.

  [FOCom.EB.Transmit.InvalidPartitionCall.CallDET]
  This test verifies that the I-PDU transmit call invokes user configured callback function(if enabled )when it is called from a different partition.

  [FOCom.EB.Transmit.InvalidPartitionCall.CallUserCallback]
  This test verifies that the I-PDU transmit call invokes user configured callback function(if enabled )when it is called from a different partition.
&lt;/para&gt;
&lt;para&gt;
  This test is permuted to the following cases:
  p0 : Call to GetApplicationID() returns the same application ID as configured in module configuration.
  p1 : Call to GetApplicationID() returns a different application ID than configured in module configuration
&lt;/para&gt;

Test Object: 
  FOCom_Transmit()

Test Precondition: 

Test Execution: 
  00: Flush the trace buffer.
  01: Initialize the FOCom module by calling FOCom_Init().
  02: Call FOCom_Transmit() with invalid TxPduId, valid PDU data buffer pointer and PDU length.
In case of p0:
  03: VP: (FOCom.EB.Transmit.ValidPartitionCall)
      FOCom_Transmit() performs the routing operation.
In case of p1:
  04: VP: (FOCom.EB.Transmit.InvalidPartitionCall.RetVal)
          FOCom_Transmit() call returns value E_NOT_OK.
  05: VP: (FOCom.EB.Transmit.InvalidPartitionCall.CallDET)
          (FOCom.EB.Transmit.InvalidPartitionCall.CallUserCallback)
          It is verified that DET and user error call back is called with module ID, instance ID, service ID and error code.
  06: VP: (FOCom.EB.Transmit.InvalidPartitionCall)
          It is verified that the PDU is not routed.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.Transmit.ValidPartitionCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>73</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.InvalidPartitionCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>74</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.InvalidPartitionCall.RetVal</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>75</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.Transmit.InvalidPartitionCall.CallDET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>423</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_06003_TxConfirmation_PartitionCall</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_06_MultiPartition/source/application/EbTest.c</sourcefile>
      <sourceline>285</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that FOCom_FOCanTxConfirmation() functionality is only performed when it is called from the configured FO partition.

  Requirement verification scenario:
  [FOCom.EB.TxConfirmation.CallCbk]
  This test verifies that the FOCom_FOCanTxConfirmation() call performs the routing confirmation operation when it is called from the configured FO partition.
  
  [FOCom.EB.TxConfirmation.InvalidPartitionCall]
  This test verifies that the FOCom_FOCanTxConfirmation() rejects the call when it is called from a different partition.

  [FOCom.EB.TxConfirmation.InvalidPartitionCall.CallDET]
  This test verifies that the FOCom_FOCanTxConfirmation() call invokes user configured callback function(if enabled )when it is called from a different partition.

  [FOCom.EB.TxConfirmation.InvalidPartitionCall.CallUserCallback]
  This test verifies that the FOCom_FOCanTxConfirmation() call invokes user configured callback function(if enabled )when it is called from a different partition.
&lt;/para&gt;
&lt;para&gt;
  This test is permuted to the following cases:
  p0 : Call to GetApplicationID() returns the same application ID as configured in module configuration.
  p1 : Call to GetApplicationID() returns a different application ID than configured in module configuration
&lt;/para&gt;

Test Object: 
  FOCom_FOCanTxConfirmation()

Test Precondition: 

Test Execution: 
  01: Initialize the FOCom module by calling FOCom_Init().
  02: Call FOCom_FOCanTxConfirmation() with invalid TxPduId and Tx status.
In case of p0:
  03: VP: (FOCom.EB.TxConfirmation.CallCbk)
      FOCom_FOCanTxConfirmation() invokes the user callback function.
In case of p1:
  04: VP: (FOCom.EB.TxConfirmation.InvalidPartitionCall.CallDET)
          (FOCom.EB.TxConfirmation.InvalidPartitionCall.CallUserCallback)
          It is verified that DET and user error call back is called with module ID, instance ID, service ID and error code.
  05: VP: (FOCom.EB.TxConfirmation.InvalidPartitionCall)
          It is verified that FOCom_FOCanTxConfirmation() does not invoke the user callback function.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.CallCbk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>105</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.InvalidPartitionCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>106</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.TxConfirmation.InvalidPartitionCall.CallDET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>107</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>424</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_06004_Receive_PartitionCall</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_06_MultiPartition/source/application/EbTest.c</sourcefile>
      <sourceline>378</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that FOCom_FOCanRxIndication() functionality is only performed when it is called from the configured FO partition.

  Requirement verification scenario:
  [FOCom.EB.RxIndication.ValidPartitionCall]
  This test verifies that the FOCom_FOCanRxIndication() call performs the routing operation when it is called from the configured FO partition.
  
  [FOCom.EB.RxIndication.InvalidPartitionCall]
  This test verifies that the FOCom_FOCanRxIndication() rejects the call when it is called from a different partition.

  [FOCom.EB.RxIndication.InvalidPartitionCall.CallDET]
  This test verifies that the FOCom_FOCanRxIndication() call invokes user configured callback function(if enabled )when it is called from a different partition.

  [FOCom.EB.RxIndication.InvalidPartitionCall.CallUserCallback]
  This test verifies that the FOCom_FOCanRxIndication() call invokes user configured callback function(if enabled )when it is called from a different partition.
&lt;/para&gt;
&lt;para&gt;
  This test is permuted to the following cases:
  p0 : Call to GetApplicationID() returns the same application ID as configured in module configuration.
  p1 : Call to GetApplicationID() returns a different application ID than configured in module configuration
&lt;/para&gt;

Test Object: 
  FOCom_FOCanRxIndication()

Test Precondition: 
  The FOCom has been initialized.

Test Execution: 
  01: Initialize FOCom module by calling FOCom_Init() function.
  02: Call FOCom_FOCanRxIndication() with valid PduId and valid Pdu buffer pointer and size.
In case of p0:
  03: VP: (FOCom.EB.RxIndication.ValidPartitionCall)
      RxIndication callback function FOCom_DummyCbkRxIndication() is called with converted PduId and
          the same pointer to buffer and same size. 
In case of p1:
  04: VP: (FOCom.EB.RxIndication.InvalidPartitionCall.CallDET)
          (FOCom.EB.RxIndication.InvalidPartitionCall.CallUserCallback)
          It is verified that DET and user error call back is called with module ID, instance ID, service ID and error code.
  05: VP: (FOCom.EB.RxIndication.InvalidPartitionCall)
          It is verified that FOCom_FOCanRxIndication() does not invoke the user callback function.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.RxIndication.ValidPartitionCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>121</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.RxIndication.InvalidPartitionCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>122</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.RxIndication.InvalidPartitionCall.CallDET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>425</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_06005_VersionInfo_PartitionCall</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_06_MultiPartition/source/application/EbTest.c</sourcefile>
      <sourceline>490</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that FOCom_GetVersionInfo() returns the module's version info when it is called from the configured FO partition.

  Requirement verification scenario:

  [FOCom.EB.GetVersionInfo.ReturnVersionInfo]
  This test verifies that the FOCom_GetVersionInfo() call returns the module's version info when it is called from the configured FO partition.
  
  [FOCom.EB.GetVersionInfo.InvalidGetVersionInfoCall]
  This test verifies that the FOCom_GetVersionInfo() rejects the call when it is called from a different partition.

  [FOCom.EB.GetVersionInfo.InvalidGetVersionInfo.CallDET]
  This test verifies that the FOCom_GetVersionInfo() call invokes user configured callback function(if enabled )when it is called from a different partition.

  [FOCom.EB.GetVersionInfo.InvalidGetVersionInfo.CallUserCallback]
  This test verifies that the FOCom_GetVersionInfo() call invokes user configured callback function(if enabled )when it is called from a different partition.
&lt;/para&gt;
&lt;para&gt;
  This test is permuted to the following cases:
  p0 : Call to GetApplicationID() returns the same application ID as configured in module configuration.
  p1 : Call to GetApplicationID() returns a different application ID than configured in module configuration
&lt;/para&gt;

Test Object: 
  FOCom_GetVersionInfo()

Test Precondition: 
  The FOCom has been initialized.

Test Execution: 
  01: FOCom_GetVersionInfo() is called with valid versionInfo pointer
In case of p0:
  02: VP: (FOCom.EB.GetVersionInfo.ReturnVersionInfo)
     FOCom_VENDOR_ID, FOCom_MODULE_ID, FOCom_SW_MAJOR_VERSION, FOCom_SW_MINOR_VERSION and FOCom_SW_PATCH_VERSION
     are returned by versionInfo.
In case of p1:
  03: VP: (FOCom.EB.GetVersionInfo.InvalidGetVersionInfo.CallDET)
          (FOCom.EB.GetVersionInfo.InvalidGetVersionInfo.CallUserCallback)
          It is verified that DET and user error call back is called with module ID, instance ID, service ID and error code.
  04: VP: (FOCom.EB.GetVersionInfo.InvalidGetVersionInfoCall)
          It is verified that FOCom_GetVersionInfo() does not return module version information.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FOCom.EB.GetVersionInfo.ReturnVersionInfo</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>60</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.GetVersionInfo.InvalidGetVersionInfoCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>61</internalId></provcov>
        <provcov>
          <linksto>FOCom.EB.GetVersionInfo.InvalidGetVersionInfo.CallDET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror>unrequested coverage.</linkerror><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>426</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_FOCOM_CON_07001_Transmit_FVCalculation</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_07_FVM/source/application/EbTest.c</sourcefile>
      <sourceline>82</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
&lt;/para&gt;

Test Object: 
  FOCom_Transmit()

Test Precondition: 

Test Execution: 

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
    <violations><ruleid>ERR.swuts.providescoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>427</internalId></specobject>
    <specobject>
      <id>TS_FOCOM_CON_07002_Receive_FVCalculation_IncrementOffset</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOCom/test/ts5/Conformance/IN/FOCom_ConTest_07_FVM/source/application/EbTest.c</sourcefile>
      <sourceline>172</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
&lt;/para&gt;

Test Object: 
  FOCom_Transmit()

Test Precondition: 

Test Execution: 

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
    <violations><ruleid>ERR.swuts.providescoverage.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>428</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_FOMM_SimpleComTest</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/test/ts5/Compile/IN/FOMM_ComTest_AllOptDetOff/source/application/Tests.c</sourcefile>
      <sourceline>20</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test will check if compilation is successful for functions:
    - FOMM_Init
    - FOMM_DeInit
    - FOMM_GetVersionInfo
    - FOMM_RequestMode
    - FOMM_GetMode
    - FOMM_PartitionFailedNotification
    - FOMM_ShutdownAllCores
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    Call these APIs:
    - FOMM_Init
    - FOMM_DeInit
    - FOMM_GetVersionInfo
    - FOMM_RequestMode
    - FOMM_GetMode
    - FOMM_PartitionFailedNotification
    - FOMM_ShutdownAllCores
  
Test Input: 
  
Test Output: 
    Compiles successfully and without warnings.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.Init.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.DeInit.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GetVersionInfo.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GetMode.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.APISignature</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ShutdownAllCores.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>429</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>FOMM_ComTest_Headers</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/test/ts5/Compile/IN/FOMM_ComTest_Headers/source/application/Tests.c</sourcefile>
      <sourceline>20</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test will check the availability and inclusion of the headers files
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: VP(FOMM.dsn.DetInclusion):
        Check that Det is available
    02: VP(FOMM.dsn.AtomicsInclusion):
        Check that Atomics is available
    03: VP(FOMM.dsn.WdgMInclusion):
        Check that WdgM is available
    04: VP(FOMM.EB.GeneralCfg.McuHeaderFile):
        Header file is the one configured
    05: VP(FOMM.EB.GeneralCfg.McuSetModeApiName, FOMM.EB.GeneralCfg.McuPerformResetApiName):
        Configured API name
  
Test Input: 
  
Test Output: 
    Compiles successfully and without warnings.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOMM.dsn.DetInclusion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>FOMM.dsn.AtomicsInclusion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>FOMM.dsn.WdgMInclusion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.McuHeaderFile</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.McuSetModeApiName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.McuPerformResetApiName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>430</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_FOMM_GEN_01001_PARTITION_MISMATCH</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/test/ts5/Compile/IN/FOMM_GenTest_1/source/application/testspec.h</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the generator notifies user in case of
    Configured FOMM partition configured in EcuC does not match the Os
    partition configuration.
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * FOMMEcucPartitionRef is configured.

Test Execution: 
    VP: FOMM generator shall notify the user of partition mismatch.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.PartitionRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.Check.PartitionMismatch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>431</internalId></specobject>
    <specobject>
      <id>TS_FOMM_GEN_01002_NO_PART_NOTIF_FAIL</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/test/ts5/Compile/IN/FOMM_GenTest_1/source/application/testspec.h</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall verify that the generator notifies user in case of
    misconfigured WdgMSatelliteAlivenessCallout.
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * WdgMSatelliteAlivenessCallout is not set to FOMM_PartitionFailedNotification

Test Execution: 
    VP: FOMM generator shall notify the user of the misconfiguration.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.Check.SatelliteCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>432</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_FOMM_ConTestDevErrors</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/test/ts5/Conformance/IN/FOMM_ConTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>78</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test will check that developent errors will be reported to Det in the
    correct circumstances and with correct values.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Check that FOMM_GetMode returns E_NOT_OK for the API
         request FOMM_GetMode() until the call of FOMM_Init() API and mode is not updated.
    02: VP(GetMode.ModuleUninitialized.ErrorReporting): Check that Det is called with correct values.
    03: Check that FOMM_RequestMode returns E_NOT_OK for the API
         request FOMM_RequestMode() until the call of FOMM_Init() API.
    04: VP(RequestMode.ModuleUninitialized.ErrorReporting): Check that Det is called with correct values.
    05: Call FOMM_PartitionFailedNotification() API before the call of FOMM_Init() API.
    06: VP(PartitionFailedNotification.ModuleUninitialized.ErrorReporting): Check that Det is called with correct values.
    07: Call FOMM_ShutdownAllCores() API before the call of FOMM_Init() API.
    08: VP(PartitionFailedNotification.ModuleUninitialized.ErrorReporting): Check that Det is called with correct values.
    09: Initialize FOMM.
    10: Check that FOMM_GetMode returns E_NOT_OK for the API
         request FOMM_GetMode() if the parameter is a null pointer.
    11: VP(GetMode.NullPtr.ErrorReporting): Check that Det is called with correct values.
    12: Call FOMM_GetVersionInfo with a null pointer parameter.
    13: VP(GetVersionInfo.NullPtr.ErrorReporting): Check that Det is called with correct values.
    14: VP(InvalidModeRequest.ErrorReporting): Check that FOMM_RequestMode returns E_NOT_OK for the API
         request FOMM_RequestMode() and reports the runtime error.
    15: Deinitialize FOMM.
    16: Check that FOMM_GetMode returns E_NOT_OK for the API request FOMM_GetMode() since FOMM
         is unitialized and the error is reported to DET.
    17: VP(Init.InvalidPartition, InvalidPartition.ErrorReporting): ReInitialize FOMM from an invalid partition.
    18: Check that FOMM_GetMode returns E_NOT_OK for the API request FOMM_GetMode() since the
         initialization was rejected due to invalid partition and the error is reported to DET.
    19: Initialize FOMM from a valid partition and check that FOMM_GetMode returns E_OK and mode is FOMM_MODE_NORMAL.
    20: VP(DeInit.InvalidPartition, InvalidPartition.ErrorReporting): Deinitialize FOMM from an invalid partition.
    21: Check that FOMM_GetMode returns E_OK for the API request FOMM_GetMode() since the
         deinitialization was rejected due to invalid partition and the mode is still FOMM_MODE_NORMAL.
    22: VP(InvalidModeRequest.ErrorReporting): Check that FOMM_RequestMode returns E_NOT_OK for the API
         request FOMM_RequestMode() and reports the runtime error due to invalid partition.
    23: VP(FOMM.EB.PartitionFailedNotification.InvalidPartition): Call FOMM_PartitionFailedNotification().
         Check that FOMM_E_INVALID_PARTITION_REQUEST is reported
    24: VP(FOMM.EB.ShutdownAllCores.InvalidPartition): Call FOMM_ShutdownAllCores().
         Check that FOMM_E_INVALID_PARTITION_REQUEST is reported
  
Test Input: 
  
Test Output: 
    Development errors are reported to Det as expected.
  </description>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.DevErrorDetect</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.FOMM_E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.FOMM_E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GetMode.NoInitBeforeApiCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.NoInitBeforeApiCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GetMode.ModuleUninitialized.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.ModuleUninitialized.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.ModuleUninitialized.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ShutdownAllCores.ModuleUninitialized.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GetMode.NullPtr.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GetVersionInfo.NullPtr.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.DetRuntimeChecks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.InvalidModeRequest.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.FOMM_E_PARAM_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.Init.InvalidPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.InvalidPartition.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.FOMM_E_INVALID_PARTITION_REQUEST</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.DeInit.InvalidPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.InvalidPartition.ApiRetValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.InvalidPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ShutdownAllCores.InvalidPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.CddErrorReportingApiName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.CddHeaderFile</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>433</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_FOMM_RteInterfaces_0</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/test/ts5/Conformance/IN/FOMM_ConTest_RteInt/source/application/Test_SWC0.c.m4</sourcefile>
      <sourceline>56</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies that the interfaces are generated for SWC0:
    FOMM_RequestMode
    FOMM_GetMode
    FOMM_ShutdownAllCores
m4_ifelse(PM_FOMMVersionInfoApiEnabled,true,\-:m4_dnl
    FOMM_GetVersionInfo
:-/m4_ifelse( :endif: ))m4_dnl
m4_ifelse(PM_FOMMDioEnabled,true,\-:m4_dnl
    FOMM_Proxy_Dio_WriteChannel
:-/m4_ifelse( :endif: ))m4_dnl
m4_ifelse(PM_FOMMMcuEnabled,true,\-:m4_dnl
    FOMM_Proxy_Mcu_SetMode
    FOMM_Proxy_Mcu_PerformReset
:-/m4_ifelse( :endif: ))m4_dnl
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: VP(GetMode.Ptr): Check that FOMM_GetMode will write the current mode in the provided
          pointer and return E_OK.
    02: VP(RequestMode.NormalToFOSwcExecPrepare): Check that requesting FOMM_MODE_FAILOP_SWC_EXEC
          returns E_NOT_OK.
    03: VP(RequestMode.InvalidMode.ErrorReporting): Check that Det is called with correct values.
    04: Check that the internal state is still FOMM_MODE_NORMAL.
    05: VP(RequestMode.NormalToFOSwcExecPrepare): Check that requesting
          FOMM_MODE_FAILOP_SWC_EXEC_PREPARE returns E_OK.
    06: VP(GetMode.Ptr): Check that FOMM_GetMode will write FOMM_MODE_FAILOP_SWC_EXEC_PREPARE in the provided
          pointer and return E_OK.
m4_ifelse(PM_FOMMVersionInfoApiEnabled,true,\-:m4_dnl
    07: VP(GeneralCfg.VersionInfoApi,GetVersionInfo.Ptr): Check that FOMM_GetVersionInfo
          provides the correct data in the provided pointer.
:-/m4_ifelse( :endif: ))m4_dnl
m4_ifelse(PM_FOMMDioEnabled,true,\-:m4_dnl
    08: VP(ProxyDioWriteChannel.APISignature, ProxyDioWriteChannel.IgnoreRequest): Check that a call to this
          partition's Dio proxy is called, the Dio proxy will ignore the call since the FOMM mode is not FOMM_MODE_NORMAL.
:-/m4_ifelse( :endif: ))m4_dnl
m4_ifelse(PM_FOMMMcuEnabled,true,\-:m4_dnl
    09: VP(ProxyMcuSetMode.APISignature, ProxyMcuSetMode.IgnoreRequest): Check that a call to this partition's Mcu_SetMode
          proxy is called, the Mcu_SetMode proxy will ignore the call since the FOMM mode is not FOMM_MODE_NORMAL.
    10: VP(ProxyMcuPerformReset.APISignature, ProxyMcuPerformReset.IgnoreRequest): Check that a call to this partition's Mcu_PerformReset
          proxy is called, the Mcu_PerformReset proxy will ignore the call since the FOMM mode is not FOMM_MODE_NORMAL.
:-/m4_ifelse( :endif: ))m4_dnl
    11: VP(ShutdownAllCores.NormalToShutdownAllCores): Check that the mode remains unchanged
          (FOMM_MODE_FAILOP_SWC_EXEC_PREPARE) when FOMM_ShutdownAllCores is called.
    12: Change the FOMM mode to NORMAL.
    13: Call FOMM_ShutdownAllCores in NORMAL mode.
    14: VP(ShutdownAllCores.NormalToShutdownAllCores): Check that the module is initialized after
          FOMM_ShutdownAllCores was accepted.
    15: VP(RequestMode.ModuleUninitialized.ErrorReporting): Check that Det is called with correct values.

  
Test Input: 
  
Test Output: 
    FOMM APIs are called
  </description>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GetMode.Ptr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.NormalToFOSwcExecPrepare</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.InvalidMode.ErrorReporting</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.VersionInfoApi</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GetVersionInfo.Ptr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ShutdownAllCores.NormalToShutdownAllCores</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.ModuleUninitialized.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ProxyDioWriteChannel.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ProxyDioWriteChannel.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuSetMode.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuSetMode.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuPerformReset.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuPerformReset.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>434</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_FOMM_RteInterfaces_1</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/test/ts5/Conformance/IN/FOMM_ConTest_RteInt/source/application/Test_SWC1.c.m4</sourcefile>
      <sourceline>56</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the interfaces are generated for SWC1:
    FOMM_RequestMode
m4_ifelse(PM_FOMMDioEnabled,true,\-:m4_dnl
    FOMM_Server_Dio_WriteChannel
:-/m4_ifelse( :endif: ))m4_dnl
m4_ifelse(PM_FOMMMcuEnabled,true,\-:m4_dnl
    FOMM_Proxy_Mcu_SetMode
    FOMM_Proxy_Mcu_PerformReset
:-/m4_ifelse( :endif: ))m4_dnl
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: VP(RequestMode.NormalToFOSwcExecPrepare): Check that requesting
          FOMM_MODE_FAILOP_SWC_EXEC_PREPARE returns E_OK.
    02: VP(GetMode.Ptr): Check that FOMM_GetMode will write FOMM_MODE_FAILOP_SWC_EXEC_PREPARE in the provided
          pointer and return E_OK.
    03: VP(ShutdownAllCores.NormalToShutdownAllCores): Check that the mode remains unchanged
          (FOMM_MODE_FAILOP_SWC_EXEC_PREPARE) when FOMM_ShutdownAllCores is called.
    04: Set the mode to FOMM_MODE_NORMAL.
m4_ifelse(PM_FOMMDioEnabled,false,\-:m4_dnl
    05: VP(GeneralCfg.DioPartitionRef, ServerDioWriteChannel.APISignature) : Check that in mode FOMM_MODE_NORMAL
          and correct partition call the Dio_WriteChannel API is called.
    06: VP(GeneralCfg.DioPartitionRef) : Check that for an incorrect partition call the Dio_WriteChannel API is
          not called and error is reported to DET.
:-/m4_ifelse( :endif: ))m4_dnl
    07: Switch FOMM mode to FOMM_MODE_FAILOP_SWC_EXEC_PREPARE
m4_ifelse(PM_FOMMMcuEnabled,true,\-:m4_dnl
    08: VP(ProxyMcuSetMode.IgnoreRequest): Check that a call to this partition's Mcu_SetMode
          proxy is called, the Mcu_SetMode proxy will ignore the call since the FOMM mode is not FOMM_MODE_NORMAL.
    09: VP(ProxyMcuPerformReset.IgnoreRequest): Check that a call to this partition's Mcu_PerformReset
          proxy is called, the Mcu_PerformReset proxy will ignore the call since the FOMM mode is not FOMM_MODE_NORMAL.
:-/m4_ifelse( :endif: ))m4_dnl
  
Test Input: 
  
Test Output: 
    FOMM API is called
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GetMode.Ptr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.DioPartitionRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ServerDioWriteChannel.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuSetMode.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuPerformReset.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>435</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_FOMM_RteInterfaces_2</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/test/ts5/Conformance/IN/FOMM_ConTest_RteInt/source/application/Test_SWC2.c.m4</sourcefile>
      <sourceline>59</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the interfaces are generated for SWC2:
    FOMM_GetMode
m4_ifelse(PM_FOMMDioEnabled,true,\-:m4_dnl
    FOMM_Proxy_Dio_WriteChannel
:-/m4_ifelse( :endif: ))m4_dnl
m4_ifelse(PM_FOMMMcuEnabled,true,\-:m4_dnl
    FOMM_Server_Mcu_SetMode
    FOMM_Server_Mcu_PerformReset
:-/m4_ifelse( :endif: ))m4_dnl
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: VP(RequestMode.NormalToFOSwcExecPrepare): Check that requesting
          FOMM_MODE_FAILOP_SWC_EXEC_PREPARE returns E_OK.
    02: VP(GetMode.Ptr): Check that FOMM_GetMode will write FOMM_MODE_FAILOP_SWC_EXEC_PREPARE in the provided
          pointer and return E_OK.
    03: VP(ShutdownAllCores.NormalToShutdownAllCores): Check that the mode remains unchanged
          (FOMM_MODE_FAILOP_SWC_EXEC_PREPARE) when FOMM_ShutdownAllCores is called.
    04: Set the mode back to FOMM_MODE_NORMAL.
m4_ifelse(PM_FOMMDioEnabled,true,\-:m4_dnl
    05: VP(ProxyDioWriteChannel.APISignature) : Check that for an incorrect partition call the Dio_WriteChannel
          API is not called and error is reported to DET.
:-/m4_ifelse( :endif: ))m4_dnl
    06: Switch FOMM mode to FOMM_MODE_FAILOP_SWC_EXEC_PREPARE
m4_ifelse(PM_FOMMDioEnabled,true,\-:m4_dnl
    07: VP(ProxyDioWriteChannel.IgnoreRequest): Check that a call to this partition's Dio proxy is called,
          the Dio proxy will ignore the call since the FOMM mode is not FOMM_MODE_NORMAL.
:-/m4_ifelse( :endif: ))m4_dnl
m4_ifelse(PM_FOMMDioEnabled,false,\-:m4_dnl
    08: VP(GeneralCfg.McuPartitionRef, ServerMcuSetMode.APISignature) : Check that in mode FOMM_MODE_NORMAL
          and correct partition call the Mcu_SetMode API is called.
    09: VP(GeneralCfg.McuPartitionRef) : Check that for an incorrect partition call the Mcu_SetMode API is
          not called and error is reported to DET.
    10: VP(GeneralCfg.McuPartitionRef, ServerMcuPerformReset.APISignature) : Check that in mode FOMM_MODE_NORMAL
          and correct partition call the Mcu_PerformReset API is called.
    11: VP(GeneralCfg.McuPartitionRef) : Check that for an incorrect partition call the Mcu_PerformReset API is
          not called and error is reported to DET.
:-/m4_ifelse( :endif: ))m4_dnl
  
Test Input: 
  
Test Output: 
    FOMM API is called
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GetMode.Ptr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ProxyDioWriteChannel.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ProxyDioWriteChannel.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.McuPartitionRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ServerMcuSetMode.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ServerMcuPerformReset.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>436</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_FOMM_RteInterfaces_3</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/test/ts5/Conformance/IN/FOMM_ConTest_RteInt/source/application/Test_SWC3.c.m4</sourcefile>
      <sourceline>59</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the interfaces are generated for SWC3:
    FOMM_GetMode
m4_ifelse(PM_FOMMDioEnabled,true,\-:m4_dnl
    FOMM_Proxy_Dio_WriteChannel
:-/m4_ifelse( :endif: ))m4_dnl
m4_ifelse(PM_FOMMMcuEnabled,true,\-:m4_dnl
    FOMM_Proxy_Mcu_SetMode
    FOMM_Proxy_Mcu_PerformReset
:-/m4_ifelse( :endif: ))m4_dnl
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: VP(GetMode.Ptr): Check that FOMM_GetMode will write the current mode in the provided
          pointer and return E_OK.
m4_ifelse(PM_FOMMDioEnabled,true,\-:m4_dnl
    02: VP(ProxyDioWriteChannel.APISignature) : Check that for an incorrect partition call the Dio_WriteChannel
          API is not called and error is reported to DET.
:-/m4_ifelse( :endif: ))m4_dnl
m4_ifelse(PM_FOMMMcuEnabled,true,\-:m4_dnl
    03: VP(ProxyMcuSetMode.APISignature) : Check that for an incorrect partition call the Mcu_SetMode
          API is not called and error is reported to DET.
    04: VP(ProxyMcuPerformReset.APISignature) : Check that for an incorrect partition call the Mcu_PerformReset
          API is not called and error is reported to DET.
:-/m4_ifelse( :endif: ))m4_dnl
    05: Switch FOMM mode to FOMM_MODE_FAILOP_SWC_EXEC_PREPARE
m4_ifelse(PM_FOMMDioEnabled,true,\-:m4_dnl
    06: VP(ProxyDioWriteChannel.IgnoreRequest): Check that a call to this partition's Dio proxy is called,
          the Dio proxy will ignore the call since the FOMM mode is not FOMM_MODE_NORMAL.
:-/m4_ifelse( :endif: ))m4_dnl
m4_ifelse(PM_FOMMMcuEnabled,true,\-:m4_dnl
    07: VP(ProxyMcuSetMode.IgnoreRequest): Check that a call to this partition's Dio proxy is called,
          the Dio proxy will ignore the call since the FOMM mode is not FOMM_MODE_NORMAL.
    08: VP(ProxyMcuPerformReset.IgnoreRequest): Check that a call to this partition's Dio proxy is called,
          the Dio proxy will ignore the call since the FOMM mode is not FOMM_MODE_NORMAL.
:-/m4_ifelse( :endif: ))m4_dnl
  
Test Input: 
  
Test Output: 
    FOMM API is called
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.GetMode.Ptr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ProxyDioWriteChannel.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ProxyDioWriteChannel.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuSetMode.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuSetMode.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuPerformReset.APISignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ProxyMcuPerformReset.IgnoreRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>437</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_FOMM_SimpleImpTest</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/test/ts5/Implementation/IN/FOMM_ImpTest_InitDeInitVersInfo/source/application/Tests.c</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test will check that the internal state and internal mode are set correctly by
    these functions:
    - FOMM_Init
    - FOMM_DeInit
    Also, check that correct module information is provided by this function:
    - FOMM_GetVersionInfo
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: VP(Init.ResetState): Check that before FOMM_Init, the internal state is FOMM_UNINIT.
    02: VP(Init.ModeState): Check that after FOMM_Init, the internal state is FOMM_INIT
        and the internal mode is FOMM_MODE_NORMAL.
    03: VP(DeInit.UninitStateTransition): Check that after FOMM_DeInit, the internal
        state is FOMM_UNINIT.
    04: VP(GeneralCfg.VersionInfoApi,GetVersionInfo.Ptr): Check that FOMM_GetVersionInfo
        provides the correct data in the provided pointer.
  
Test Input: 
  
Test Output: 
    All FOMM states and modes are changed according to the requirements.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.Init.ResetState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.Init.ModeState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.DeInit.UninitStateTransition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GeneralCfg.VersionInfoApi</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GetVersionInfo.Ptr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>438</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_FOMM_ModeChanges</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/test/ts5/Implementation/IN/FOMM_ImpTest_ModeChanges/source/application/Tests.c</sourcefile>
      <sourceline>104</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test will check that the internal state and internal mode are set and read correctly by
    these functions:
    - FOMM_Init
    - FOMM_DeInit
    - FOMM_GetMode
    - FOMM_RequestMode
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: VP(Init.ResetState): Check that before FOMM_Init, the internal state is FOMM_UNINIT.
    02: VP(Init.InitStateTransition,Init.ModeState): Check that after FOMM_Init, the internal
          state is FOMM_INIT and the internal mode is FOMM_MODE_NORMAL.
    03: VP(GetMode.Ptr): Check that FOMM_GetMode will write the current mode in the provided
         pointer and return E_OK.
    04: VP(RequestMode.NormalToFOSwcExecPrepare): Check that requesting
         (e.g.) FOMM_MODE_FAILOP_SWC_EXEC returns E_NOT_OK.
    05: VP(RequestMode.InvalidMode.ErrorReporting): Check that Det is called with correct values.
    06: Check that the internal state is still FOMM_MODE_NORMAL.
    07: VP(RequestMode.NormalToFOSwcExecPrepare): Check that requesting
         FOMM_MODE_FAILOP_SWC_EXEC_PREPARE returns E_OK.
    08: Check that FOMM_GetMode will write FOMM_MODE_FAILOP_SWC_EXEC_PREPARE in the provided
         pointer and return E_OK.
    09: VP(RequestMode.FOSwcExecPrepareToFOSwcExecution): Check that requesting
         (e.g.) FOMM_MODE_FAILOP_COMM_PREPARE returns E_NOT_OK.
    10: VP(RequestMode.InvalidMode.ErrorReporting): Check that Det is called with correct values.
    11: Check that the internal state is still FOMM_MODE_FAILOP_SWC_EXEC_PREPARE.
    12: VP(RequestMode.FOSwcExecPrepareToFOSwcExecution): Check that requesting
         FOMM_MODE_FAILOP_SWC_EXEC_PREPARE returns E_OK.
    13: Check that FOMM_GetMode will write FOMM_MODE_FAILOP_SWC_EXEC in the provided
         pointer and return E_OK.
    14: VP(RequestMode.FOSwcExecToFOComPrepare): Check that requesting
         (e.g.) FOMM_MODE_FAILOP_COMM returns E_NOT_OK.
    15: VP(RequestMode.InvalidMode.ErrorReporting): Check that Det is called with correct values.
    16: Check that the internal state is still FOMM_MODE_FAILOP_SWC_EXEC.
    17: VP(RequestMode.FOSwcExecToFOComPrepare): Check that requesting
         FOMM_MODE_FAILOP_COMM_PREPARE returns E_OK.
    18: Check that FOMM_GetMode will write FOMM_MODE_FAILOP_COMM_PREPARE in the provided
         pointer and return E_OK.
    19: VP(RequestMode.FOCommPrepareToFOComm): Check that requesting
         (e.g.) FOMM_MODE_FAILOP_COMM_ONLY returns E_NOT_OK.
    20: VP(InvalidModeRequest.ErrorReporting): Check that Det is called with correct values.
    21: Check that the internal state is still FOMM_MODE_FAILOP_COMM_PREPARE.
    22: VP(RequestMode.FOCommPrepareToFOComm): Check that requesting
        FOMM_MODE_FAILOP_COMM returns E_OK.
    23: Check that FOMM_GetMode will write FOMM_MODE_FAILOP_COMM_PREPARE in the provided
         pointer and return E_OK.
    24: VP(RequestMode.FOComToFOSwcExec): Check that requesting
         (e.g.) FOMM_MODE_NORMAL returns E_NOT_OK.
    25: VP(RequestMode.InvalidMode.ErrorReporting): Check that Det is called with correct values.
    26: Check that the internal state is still FOMM_MODE_FAILOP_COMM.
    27: VP(RequestMode.FOComToFOSwcExec): Check that requesting
         FOMM_MODE_FAILOP_COMM returns E_OK.
    28: Check that FOMM_GetMode will write FOMM_MODE_FAILOP_SWC_EXEC in the provided
         pointer and return E_OK.
    29: VP(RequestMode.FOSwcExecToNormal): Check that requesting
         FOMM_MODE_NORMAL returns E_OK.
    30: Check that FOMM_GetMode will write FOMM_MODE_NORMAL in the provided
         pointer and return E_OK.
    31: Check that requesting FOMM_MODE_FAILOP_SWC_EXEC_PREPARE returns E_OK.
    32: VP(RequestMode.FOSwcExecPrepareToNormal): Check that requesting
         FOMM_MODE_NORMAL returns E_OK.
    33: Check that FOMM_GetMode will write FOMM_MODE_NORMAL in the provided
         pointer and return E_OK.
    34: Check that requesting FOMM_MODE_FAILOP_SWC_EXEC_PREPARE returns E_OK.
    35: Check that requesting FOMM_MODE_FAILOP_SWC_EXEC returns E_OK.
    36: Check that requesting FOMM_MODE_FAILOP_COMM_PREPARE returns E_OK.
    37: VP(RequestMode.FOComPrepareToFOSwcExec): Check that requesting
         FOMM_MODE_FAILOP_SWC_EXEC returns E_OK.
    38: Check that FOMM_GetMode will write FOMM_MODE_FAILOP_SWC_EXEC in the provided
         pointer and return E_OK.
    39: VP(RequestMode.FOSwcExecToNormal): Check that requesting
         (e.g.) FOMM_MODE_FAILOP_SWC_EXEC_PREPARE returns E_NOT_OK.
    40: VP(RequestMode.InvalidMode.ErrorReporting): Check that Det is called with correct values.
    41: VP(RequestMode.FOSwcExecToNormal): Check that requesting
         (e.g.) FOMM_MODE_FAILOP_SWC_EXEC_ONLY returns E_NOT_OK.
    42: VP(RequestMode.InvalidMode.ErrorReporting): Check that Det is called with correct values.
  
Test Input: 
  
Test Output: 
    All FOMM states and modes are changed according to the requirements.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.SupportedModes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.Init.ResetState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.Init.InitStateTransition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.Init.ModeState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.GetMode.Ptr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.NormalToFOSwcExecPrepare</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.InvalidMode.ErrorReporting</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.FOMM_E_TRANSITION</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.FOSwcExecPrepareToFOSwcExecution</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.FOSwcExecToFOComPrepare</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.FOCommPrepareToFOComm</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.FOComToFOSwcExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.FOSwcExecToNormal</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.FOSwcExecPrepareToNormal</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.FOComPrepareToFOSwcExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.InvalidModeRequest.ErrorReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>439</internalId></specobject>
    <specobject>
      <id>TS_FOMM_PartitionFail</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/test/ts5/Implementation/IN/FOMM_ImpTest_ModeChanges/source/application/Tests.c</sourcefile>
      <sourceline>453</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test will check that the internal state and internal mode are set and read correctly by
    these functions:
    - FOMM_Init
    - FOMM_DeInit
    - FOMM_GetMode
    - FOMM_RequestMode
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: VP(Init.ResetState): Check that before FOMM_Init, the internal state is FOMM_UNINIT.
  
Test Input: 
  
Test Output: 
    All FOMM states and modes are changed according to the requirements.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.SupportedModes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.AllowXCoreCommands</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.PreventXCoreCommands</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.FOSwcExecToFOSwcExecOnly</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.IgnoreAPICall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ShutdownAllCores.FOOnlySwcExecToNormal</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.FOCommPrepareToFOOnlySwcExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.FOCommToFOOnlySwcExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.RequestMode.FOOnlyCommToFOSwcExecution</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.NormalToShutDownAllCores</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.PartitionFailedNotification.FOSwcExecPrepareToShutDownAllCores</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ShutdownAllCores.NormalToShutdownAllCores</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ShutdownMechanism</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.ShutdownAllCores.CalledFromFOMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>440</internalId></specobject>
    <specobject>
      <id>TS_FOMM_InvalidModeReqs</id>
      <status>approved</status>
      <source>EB unit test case specification (TS5)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOMM/test/ts5/Implementation/IN/FOMM_ImpTest_ModeChanges/source/application/Tests.c</sourcefile>
      <sourceline>685</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test will check that when FOMM_RequestMode() interrupts PartitionFailedNotification(),
    FOMM_E_TRANSITION is reported.
  
Test Object: 
  
Test Precondition: 
    FOMM_RequestMode() is called from PartitionFailedNotification() (Exit Exclusive Area)
  
Test Execution: 
    01: VP(FOMM.EB.RequestMode.InvalidMode.ErrorReporting, FOMM.EB.FOMM_E_TRANSITION):
        Error reported when requesting FOMM_MODE_NORMAL
    02: VP(FOMM.EB.RequestMode.InvalidMode.ErrorReporting, FOMM.EB.FOMM_E_TRANSITION):
        Error reported when requesting FOMM_MODE_FAILOP_SWC_EXEC_PREPARE
    03: VP(FOMM.EB.RequestMode.InvalidMode.ErrorReporting, FOMM.EB.FOMM_E_TRANSITION):
        Error reported when requesting FOMM_MODE_FAILOP_SWC_EXEC
    04: VP(FOMM.EB.RequestMode.InvalidMode.ErrorReporting, FOMM.EB.FOMM_E_TRANSITION):
        Error reported when requesting FOMM_MODE_FAILOP_COMM_PREPARE
    05: VP(FOMM.EB.RequestMode.InvalidMode.ErrorReporting, FOMM.EB.FOMM_E_TRANSITION):
        Error reported when requesting FOMM_MODE_FAILOP_COMM
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FOMM.EB.RequestMode.InvalidMode.ErrorReporting</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>FOMM.EB.FOMM_E_TRANSITION</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>441</internalId></specobject>
  </specobjects>
    <specobjects doctype="safetymanual">
    <specobject>
      <id>FOAC.SM.Assumption.ECU</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>26</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that any other software that runs on the ECU is validated according
                        to the safety integrity level of its partition.&lt;/para&gt;
                </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>442</internalId></specobject>
    <specobject>
      <id>FOAC.SM.Assumption.HeaderFiles</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the following header files, that the &amp;foac; uses directly or
                        indirectly, complies with the requirements for the development of
                        safety-related software for the automotive domain.&lt;itemizedlist&gt;
                            &lt;!--  &lt;listitem&gt;
                                    &lt;para&gt;ComXf_MemMap.h&lt;/para&gt;
                                &lt;/listitem&gt;
                                &lt;listitem&gt;
                                    &lt;para&gt;TransformerTypes.h&lt;/para&gt;
                                &lt;/listitem&gt;
                                &lt;listitem&gt;
                                    &lt;para&gt;SchM_ComXfType.h&lt;/para&gt;
                                &lt;/listitem&gt;
                                &lt;listitem&gt;
                                    &lt;para&gt;SomeIpXf_MemMap.h&lt;/para&gt;
                                &lt;/listitem&gt;
                                &lt;listitem&gt;
                                    &lt;para&gt;SchM_SomeIpXfType.h&lt;/para&gt;
                                &lt;/listitem&gt;
                                
                                &lt;listitem&gt;
                                    &lt;para&gt;E2EXf_MemMap.h&lt;/para&gt;
                                &lt;/listitem&gt;
                                &lt;listitem&gt;
                                    &lt;para&gt;E2E_MemMap.h&lt;/para&gt;
                                &lt;/listitem&gt;
                              
                                &lt;listitem&gt;
                                    &lt;para&gt;SCrc_MemMap.h&lt;/para&gt;
                                &lt;/listitem&gt; --&gt;
                            &lt;listitem&gt;
                                &lt;para&gt;Std_Types.h&lt;/para&gt;
                            &lt;/listitem&gt;
                            &lt;listitem&gt;
                                &lt;para&gt;stddef.h&lt;/para&gt;
                            &lt;/listitem&gt;
                            &lt;listitem&gt;
                                &lt;para&gt;MemMap.h&lt;/para&gt;
                            &lt;/listitem&gt;
                            &lt;listitem&gt;
                                &lt;para&gt;Compiler_cfg.h&lt;/para&gt;
                            &lt;/listitem&gt;
                            &lt;listitem&gt;
                                &lt;para&gt; ToDo - fill out to complete&lt;/para&gt;
                            &lt;/listitem&gt;
                        &lt;/itemizedlist&gt;
                    &lt;/para&gt;
                </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>443</internalId></specobject>
    <specobject>
      <id>FOAC.SM.General.FOPartition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>90</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that any fail operational AutoCore project contains at least one
                        fail operational partition.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.Deploy.FOPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>444</internalId></specobject>
    <specobject>
      <id>FOAC.SM.General.FOPartition.FFImem</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>106</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that all tasks with access to a fail operational partition
                        guarantee freedom from interference in the memory domain according the
                        safety integrity level of its partition.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.General.FOPartition.FFImem</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>542</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>445</internalId></specobject>
    <specobject>
      <id>FOAC.SM.General.FOPartition.FFItime</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>123</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that all tasks executed in fail operational mode within a fail
                        operational partition guarantee freedom from interference in the time and
                        execution domain according to ASIL-D level, unless the priority of the task
                        is lower than that of any fail operational task on the same processing
                        core.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.General.FOPartition.FFItime</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>543</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>446</internalId></specobject>
    <specobject>
      <id>FOAC.SM.General.FOPartition.FailOpTask</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>142</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that all tasks that are part of the fail operational subsystem,
                        fail operational tasks, and that require correct operation in order for the
                        subsystem to work properly guarantee the correctness of their intended
                        function according to ASIL-D level.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.General.FOPartition.FailOpTask</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>544</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>447</internalId></specobject>
    <specobject>
      <id>FOAC.SM.General.FOPartition.LockStep</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>160</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that all fail operational partitions are allocated to lockstep
                        cores of the MCU.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.Deploy.FOPartition.LockStep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>627</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>448</internalId></specobject>
    <specobject>
      <id>FOAC.SM.General.FOCanInterface</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>176</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that if any fail operational task needs to send or receive CAN
                        message which are needed for the correct operation of the fail operational
                        subsystem they are part of, these messages is sent/received via a CAN
                        interface controlled by fail operational tasks only. &lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.General.FOCanInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>545</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>449</internalId></specobject>
    <specobject>
      <id>FOAC.SM.General.SafetyOS</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>194</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the MCU as well as all MCU cores that contain the fail
                        operational tasks is controlled by the EB tresos Safety OS.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.General.SafetyOS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>546</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>450</internalId></specobject>
    <specobject>
      <id>FOAC.SM.General.HwDesignAsilD</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>210</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;If a fail operational task uses any hardware peripherals, verify that
                        either these peripherals conform to ASIL-D or there exists an explicit
                        concept that allows the use of non ASIL-D peripherals without violating the
                        overall fail operational property. (Todo: Is ASIL-D required also for random
                        HW faults) &lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.General.HwDesignAsilD</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>553</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>451</internalId></specobject>
  </specobjects>
    <specobjects doctype="safetymanual">
    <specobject>
      <id>FOAC.SM.Assumption.Rte</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>234</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the &amp;rte; is qualified for the intended use case.&lt;/para&gt;
                </description>
      <comment>This requirement is fulfilled when the &lt;glossterm linkend="GL_safetyrte"&gt;EB
                        tresos Safety RTE&lt;/glossterm&gt; is used.</comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>452</internalId></specobject>
    <specobject>
      <id>FOAC.SM.Assumption.Os</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>246</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the &amp;safeos; is qualified for the intended use case.&lt;/para&gt;
                </description>
      <comment>This requirement is fulfilled when the &lt;glossterm linkend="GL_safeos"&gt;EB
                        tresos Safety OS&lt;/glossterm&gt; is used.</comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>453</internalId></specobject>
    <specobject>
      <id>FOAC.SM.Assumption.TimE</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>258</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the &amp;safetp; is qualified for the intended use case.&lt;/para&gt;
                </description>
      <comment>This requirement is fulfilled when the &lt;glossterm linkend="GL_time"&gt;EB
                        tresos Safety TimE&lt;/glossterm&gt; is used.</comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>454</internalId></specobject>
    <specobject>
      <id>FOAC.SM.Assumption.ComXf</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>270</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the ComXf is qualified for the intended use case. todo move to
                        FO-Com Can only.&lt;/para&gt;
                </description>
      <comment>This requirement is fulfilled when the &lt;glossterm linkend="GL_comxf"&gt;EB
                        tresos Safety E2E Transformer (Com)&lt;/glossterm&gt; is used.</comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>455</internalId></specobject>
    <specobject>
      <id>FOAC.SM.Assumption.E2EXf</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>283</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the &amp;e2exf; is qualified for the intended use case. todo move
                        to FO-Com Can only&lt;/para&gt;
                </description>
      <comment>This requirement is fulfilled when the &lt;glossterm linkend="GL_safetye2etransformer"&gt;EB tresos Safety E2E Transformer
                        (E2E)&lt;/glossterm&gt; is used.</comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>456</internalId></specobject>
  </specobjects>
    <specobjects doctype="safetymanual">
    <specobject>
      <id>FOAC.SM.Assumption.TargetHW</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>302</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the hardware provides a reliable execution environment. In the
                        &amp;foac; context, a reliable execution environment is defined as a
                        microcontroller that provides measures that prevent or detect non-systematic
                        hardware faults, such as data corruption or incorrect execution of
                        instructions. Examples are lockstep mode and ECC memory. &lt;/para&gt;
                </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>457</internalId></specobject>
    <specobject>
      <id>FOAC.SM.Assumption.TargetMCU</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>315</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt; Verify that the target MCU is identical to one of the reference platforms
                        that are specified in &lt;biblioref linkend="XREF_RN_ASCFO-10"/&gt; or to one that
                        Elektrobit qualifies upon user's request. If any other 16-bit or 32-bit
                        target MCU is chosen, then you must qualify the software to ensure that
                        there are no faults in the &amp;foac;, that originates due to the different
                        target MCU. &lt;/para&gt;
                </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>458</internalId></specobject>
    <specobject>
      <id>FOAC.SM.Assumption.Resources</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>330</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the item provides enough RAM, ROM, RunTime resources for
                        &amp;foac;. For the calculation of the required resources, the values from the
                        reference platforms that are specified in &lt;biblioref linkend="XREF_RN_ASCFO-10"/&gt; can be used as basis. &lt;/para&gt;
                </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>459</internalId></specobject>
    <specobject>
      <id>FOAC.SM.Assumption.DataErr</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>343</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that provisions are made against data errors in the &amp;foac;, such as
                        by the use of memory protection. &lt;/para&gt;
                </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>460</internalId></specobject>
  </specobjects>
    <specobjects doctype="safetymanual">
    <specobject>
      <id>FOAC.SM.Assumption.SWTools</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>358</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that appropriate measures to ensure the confidence in the used
                        software tools are taken, such as via tool qualifications. The used software
                        tools include build environment, compiler, linker, and flash tool. &lt;/para&gt;
                </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>461</internalId></specobject>
    <specobject>
      <id>FOAC.SM.Assumption.ToolOut</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>369</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the integrator reviews the output of each used tool and
                        appropriate measures are taken if warnings or errors exist. The used tools
                        are the &amp;studio;, the compiler, and the linker. &lt;/para&gt;
                </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>462</internalId></specobject>
    <specobject>
      <id>FOAC.SM.Assumption.BuildEnv</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>380</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the target software is delivered in source code and requires
                        an appropriate build environment, i.e., compiler, linker and flash tool to
                        apply the created binary to the target hardware. &lt;/para&gt;
                </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>463</internalId></specobject>
    <specobject>
      <id>FOAC.SM.Assumption.CompilerUsage</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>391</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify the compiler version and settings or options are identical to one
                        of the reference platforms specified in &lt;biblioref linkend="XREF_RN_ASCFO-10"/&gt; or to one that Elektrobit qualifies upon
                        user's request. If any other compiler, settings or options is chosen, then
                        you must qualify the software to ensure that there are no faults in the
                        &amp;gt;&amp;foac;, that originate due to the different compiler or
                        settings/options.&lt;/para&gt;
                </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>464</internalId></specobject>
    <specobject>
      <id>FOAC.SM.Assumption.CompilerError</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>406</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the compiler does not report any errors. The compiler does not
                        report any warnings or all generated warnings are considered acceptable,
                        i.e., the code is correct for the used application, after they are carefully
                        analyzed.&lt;/para&gt;
                </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>465</internalId></specobject>
  </specobjects>
    <specobjects doctype="safetymanual">
    <specobject>
      <id>FOAC.SM.Assumption.SWCInterfere</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>424</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the SWC does not interfere the safety-relevant data.&lt;/para&gt;
                </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>466</internalId></specobject>
  </specobjects>
    <specobjects doctype="safetymanual">
    <specobject>
      <id>FOAC.SM.Assumption.SafetyRequirements</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>440</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the assumed &amp;foac; requirements (see &lt;xref linkend="Sec_SafetyRequirements"/&gt;) comply with the user's safety
                        concept.&lt;/para&gt;
                </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>467</internalId></specobject>
  </specobjects>
    <specobjects doctype="safetymanual">
    <specobject>
      <id>FOAC.SM.MemProt.FailOpPartition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>456</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;
                        Verify that all memory regions allocated to fail operational
                        partitions (Os-&amp;gt;OsMicrokernel-&amp;gt;Mk- MemoryRegion) allow write access
                        only from fail operational qualified tasks. Especially disable the
                        &lt;code&gt;InitThreadAccess&lt;/code&gt; by not setting the flag 'MkMemoryRegionInitThreadAccess'.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.MemProt.FailOpPartition</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>593</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>468</internalId></specobject>
    <specobject>
      <id>FOAC.SM.MemProt.BusMpuMemory</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>475</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the initialization code ensures that the Bus MPU is programmed
                        so that no non-lockstep core may write to the memory regions
                        allocated to any fail operational partition. This mechanism shall be set up within
                        the function 'MK_InitHardwareBeforeData()' on the boot-core.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.MemProt.BusMpuMemory</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>594</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>469</internalId></specobject>
    <specobject>
      <id>FOAC.SM.MemProt.BusMpuPeripherals</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>493</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the initialisation code ensures that the Bus MPU is programmed
                        so that that no non fail operational core may write to critical peripherals
                        that the fail operational partitions handle. Critical peripherals are able
                        to bring the subsystem into an unsafe state if written with incorrect code.
                        This mechanism shall be set up within the function 'MK_InitHardwareBeforeData()'
                        on the boot-core.
                    &lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.MemProt.BusMpuPeripherals</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>595</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>470</internalId></specobject>
    <specobject>
      <id>FOAC.SM.MemProt.NonFailOpPartition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>514</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that if any non fail operational partition is allocated to a fail
                        operational core and this non fail operational partition is not disabled
                        during fail operational mode, it must not have write access to critical
                        peripherals.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.MemProt.NonFailOpPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>592</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>471</internalId></specobject>
    <specobject>
      <id>FOAC.SM.PreventInteraction.ToFoCore</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>532</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the cross-core interaction prevention mechanism is configured
                        so that no fail operational core allows any requests from non fail
                        operational cores during fail operational mode.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.PreventInteraction.ToFoCore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>472</internalId></specobject>
    <specobject>
      <id>FOAC.SM.PreventInteraction.FromFoCore</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>549</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the cross-core interaction prevention mechanism is configured
                        so that no fail operational core makes any potentially blocking requests to
                        non fail operational cores during fail operational mode.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.PreventInteraction.FromFoCore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>473</internalId></specobject>
    <specobject>
      <id>FOAC.SM.PreventInteraction.ToFoPartition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>566</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the cross-partition interaction prevention mechanism is
                        configured so that no fail operational partition allows any requests from
                        non fail operational partitions during fail operational mode.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.PreventInteraction.ToFoPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>601</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>474</internalId></specobject>
    <specobject>
      <id>FOAC.SM.PreventInteraction.FromFoPartition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>583</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the cross-partition interaction prevention mechanism is
                        configured so that no fail operational partition makes any potentially
                        blocking requests to non fail operational partitions during fail operational
                        mode.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.PreventInteraction.FromFoPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>602</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>475</internalId></specobject>
    <specobject>
      <id>FOAC.SM.PreventInteraction.FommServerAllocation</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>601</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the partition executing the FOMM server tasks is allocated to
                        a fail operational core. (Todo consider to move this to FO execution
                        chapter)&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.PreventInteraction.FommServerAllocation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>604</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>476</internalId></specobject>
    <specobject>
      <id>FOAC.SM.PreventInteraction.ToFommServer</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>618</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the cross-core interaction prevention mechanism is configured
                        so that the partition executing the FOMM server tasks do not allow any
                        requests from any partition during fail operational mode
                        (Todo consider to move this to FO execution chapter).&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.PreventInteraction.ToFommServer</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>605</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>477</internalId></specobject>
    <specobject>
      <id>FOAC.SM.PreventInteraction.CommToFommServer</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>636</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that no fail operational task establishes any communication with a
                        FOMM server task during fail operational mode. (Todo consider to move this
                        to FO execution chapter) &lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.PreventInteraction.CommToFommServer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>606</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>478</internalId></specobject>
    <specobject>
      <id>FOAC.SM.PreventInteraction.CommToNonFo</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>653</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that no fail operational task executes synchronous calls to non
                        fail operational tasks during fail operational mode.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.PreventInteraction.CommToNonFo</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>479</internalId></specobject>
    <specobject>
      <id>FOAC.SM.PreventInteraction.Spinlock</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>669</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that no fail operational task tries to get a spinlock without
                        timeout which is accessible by non fail operational tasks in fail
                        operational mode.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.PreventInteraction.Spinlock</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>599</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>480</internalId></specobject>
    <specobject>
      <id>FOAC.SM.PreventInteraction.Polling</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>686</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that all events that are received by a fail operational task from a
                        non fail operational task are set to polling mode by specifying a period
                        within Rte-&amp;gt;Software Component Instances-&amp;gt;Event to Task
                        Mapping.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.PreventInteraction.Polling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>600</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>481</internalId></specobject>
    <specobject>
      <id>FOAC.SM.TimingExec.WCET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>704</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that a worst case execution time is determined for each fail
                        operational task. The scheduling of fail operational tasks is done in so
                        that correct execution of all fail operational tasks is guaranteed even if
                        all tasks consume their worst case execution time completely. Appropriate
                        measures are used (e.g., execution time budgets, low priorities) so that non
                        fail operational tasks do not prevent the fail operational tasks from being
                        executed correctly and in time.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.TimingExec.WCET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>607</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>482</internalId></specobject>
    <specobject>
      <id>FOAC.SM.TimingExec.TermNonFO</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>725</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that if a non fail operational task is about to consume an amount
                        of processor time that would prevent any fail operational task from
                        executing correctly and in time, the system switches to fail operational
                        mode in time. You must take into consideration the time for shutting down
                        the non fail operational partitions.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.TimingExec.TermNonFO</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>608</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>483</internalId></specobject>
    <specobject>
      <id>FOAC.SM.TimingExec.AsyncOps</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>744</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that asynchronous operations (that are not part of the periodic
                        task schedule like interrupts or asynchronous task activations) and that may
                        interrupt the execution of a fail operational task are taken into
                        consideration when determining the worst case execution time of these
                        tasks.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.TimingExec.AsyncOps</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>610</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>484</internalId></specobject>
    <specobject>
      <id>FOAC.SM.TimingExec.UserLevel</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>763</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that all non fail operational tasks that may be executed on a fail
                        operational core in fail operational mode are ordinary user tasks without
                        the ability to execute any processor instruction to disable
                        interrupts.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.TimingExec.UserLevel</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>611</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>485</internalId></specobject>
    <specobject>
      <id>FOAC.SM.TimingExec.NoSuspendAllInterrupts</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>781</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the operating system is configured so that calling
                        DisableAllInterrupts() or SuspendAllInterrupts() is not allowed for non fail
                        operational tasks executing on a fail operational partition in fail
                        operational mode.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.TimingExec.NoSuspendAllInterrupts</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>612</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>486</internalId></specobject>
    <specobject>
      <id>FOAC.SM.TimingExec.NoSuspendOsInterrupts</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>799</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the operating system is configured so that calling
                        SuspendOsInterrupts() is not allowed for non fail operational tasks
                        executing on a fail operational partition in fail operational mode.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.TimingExec.NoSuspendOsInterrupts</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>613</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>487</internalId></specobject>
    <specobject>
      <id>FOAC.SM.Req.TimingExec.NoHighPrioResource</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>816</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the operating system is configured so that a resource is not
                        available for non fail operational tasks executing on a non fail operational
                        partition if the resource is used by any fail operational task too.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.TimingExec.NoHighPrioResource</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>614</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>488</internalId></specobject>
    <specobject>
      <id>FOAC.SM.TimingExec.MaxWaitingTime</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>833</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;
                        Verify that in case an operating system resource is used both by a fail operational task and a non fail
                        operational task operating on a fail operational core, the maximum waiting time to the resource
                        of the fail operational task has to be limited. If this limit is exceeded, corrective actions
                      have to be performed by the fail operational task (e.g. using some safe fallback value).&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.TimingExec.MaxWaitingTime</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>615</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>489</internalId></specobject>
    <specobject>
      <id>FOAC.SM.TimingExec.ScheduleTable</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>852</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that there is exactly one schedule table on each fail operational
                        core in order to maintain a deterministic behaviour in task execution and to
                        avoid asynchronous task activations on remote cores.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.TimingExec.ScheduleTable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>616</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>490</internalId></specobject>
    <specobject>
      <id>FOAC.SM.Integration.DriverOnFoCore</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>870</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that all partitions on fail operational cores that contain any non
                        ASIL-D code and which are allowed to operate in fail operational mode, do
                        not have access to any critical peripheral registers. Critical peripherals
                        are able to bring the subsystem into an unsafe state if written by incorrect
                        code.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.Integration.DriverOnFoCore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>541</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>491</internalId></specobject>
    <specobject>
      <id>FOAC.SM.TimingError.ProtectionHook.NonFO</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>891</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that if the ProtectionHook is called with the code
                            &lt;code&gt;E_OS_PROTECTION_TIME&lt;/code&gt; and refers to a non fail operational
                        task, the protection hook terminates all non fail operational
                        partitions.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.TimingError.ProtectionHook.NonFO</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>622</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>492</internalId></specobject>
    <specobject>
      <id>FOAC.SM.TimingError.ProtectionHook.FO</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>909</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that if the ProtectionHook is called with the code
                            &lt;code&gt;E_OS_PROTECTION_TIM&lt;/code&gt; and refers to a fail operational task,
                        the protection hook either resets the MCU or terminates all non fail
                        operational partitions and continues the interrupted task.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.TimingError.ProtectionHook.FO</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>493</internalId></specobject>
    <specobject>
      <id>FOAC.SM.TimingError.ErrorHook.NonFO</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>927</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that if the ErrorHook is called with the code
                            &lt;code&gt;E_OS_LIMIT&lt;/code&gt; and refers to a non fail operational task, the
                        error hook terminates all non fail operational partitions.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.TimingError.ErrorHook.NonFO</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>624</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>494</internalId></specobject>
    <specobject>
      <id>FOAC.SM.TimingError.ErrorHook.FO</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>944</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that if the ErrorHook is called with the code
                            &lt;code&gt;E_OS_LIMIT&lt;/code&gt; and refers to a fail operational task, the error
                        hook either resets the MCU or terminates all non fail operational
                        partitions&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.TimingError.ErrorHook.FO</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>495</internalId></specobject>
  </specobjects>
    <specobjects doctype="safetymanual">
    <specobject>
      <id>FOAC.SM.NonFailOpSw.ActivateTask</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>972</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that a non fail operational task does not call the functions
                        ActivateTask or MK_AsyncActivateTask in fail operational mode, while
                        providing the ID of a fail operational task as argument. (Todo: these req.
                        ".NonFailOpSw." are QM becasue of the safety prevention mech.)&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.NonFailOpSw.ActivateTask</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>527</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>496</internalId></specobject>
    <specobject>
      <id>FOAC.SM.NonFailOpSw.SetEvent</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>990</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that a non fail operational task does not call the functions
                        SetEvent or MK_AsyncSetEvent in fail operational mode, while providing the
                        ID of a fail operational task as first argument.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.NonFailOpSw.SetEvent</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>528</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>497</internalId></specobject>
    <specobject>
      <id>FOAC.SM.Req.NonFailOpSw.ShutdownAllCores</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>1007</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that a non fail operational task does not call the function
                        ShutdownAllCores in fail operational mode.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.NonFailOpSw.ShutdownAllCores</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>529</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>498</internalId></specobject>
    <specobject>
      <id>FOAC.SM.NonFailOpSw.TerminateApplication</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>1023</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that a non fail operational task does not call the function
                        TerminateApplication in fail operational mode, while providing the ID of a
                        fail operational OS application as first argument.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.NonFailOpSw.TerminateApplication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>530</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>499</internalId></specobject>
    <specobject>
      <id>FOAC.SM.NonFailOpSw.GetEvent</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>1040</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that a non fail operational task does not call the function
                        GetEvent in fail operational mode, while providing the ID of a fail
                        operational task as first argument.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.NonFailOpSw.GetEvent</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>531</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>500</internalId></specobject>
    <specobject>
      <id>FOAC.SM.NonFailOpSw.GetTaskState</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>1057</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that a non fail operational task does not call the function
                        GetTaskState in fail operational mode, while providing the ID of a fail
                        operational task as first argument.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.NonFailOpSw.GetTaskState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>532</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>501</internalId></specobject>
    <specobject>
      <id>FOAC.SM.NonFailOpSw.QmOsCall</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>1074</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that a non fail operational task does not call any QM-OS function
                        on a fail operational partition in fail operational mode.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.NonFailOpSw.QmOsCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>533</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>502</internalId></specobject>
    <specobject>
      <id>FOAC.SM.NonFailOpSw.FommServerCS</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>1090</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that a non fail operational task does not execute any client/server
                        call to a FOMM server task in fail operational mode. (todo: move to FO
                        execution chapter)&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.NonFailOpSw.FommServerCS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>534</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>503</internalId></specobject>
    <specobject>
      <id>FOAC.SM.NonFailOpSw.Interrupts</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_COMMON/SM_Generic_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>1107</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that a non fail operational task does not generate any hardware
                        interrupts, except when the hardware itself defines a minium inter arrival
                        time of interrupts that is considered in the worst case execution time
                        calculations.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.NonFailOpSw.Interrupts</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>535</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>504</internalId></specobject>
  </specobjects>
    <specobjects doctype="safetymanual">
    <specobject>
      <id>FOAC.SM.Generation.000001</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_FOCAN/SM_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>25</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt; Verify that all warning and error messages of the code generation are
                        analyzed.&lt;/para&gt;
                </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>505</internalId></specobject>
  </specobjects>
    <specobjects doctype="safetymanual">
    <specobject>
      <id>FOAC.SM.Assumption.000013</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_FOCAN/SM_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>52</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the communication is an explicit sender-receiver
                        communication, in 1:1 and 1:N multiplicities. TBD&lt;/para&gt;
                </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>506</internalId></specobject>
    <specobject>
      <id>FOAC.SM.CAN.TxMappingIPdu</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_FOCAN/SM_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>62</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the transmitted CAN I-PDUs are configured so that there is a
                        1:1 mapping to the message payload of a specific CAN frame.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.CAN.TxMappingIPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>568</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>507</internalId></specobject>
    <specobject>
      <id>FOAC.SM.CAN.TxMappingSigGroup</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_FOCAN/SM_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>78</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the serialized transmitted signal groups are configured so
                        that there is a 1:1 mapping to the I-PDUs to be transmitted on CAN.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.CAN.TxMappingSigGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>569</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>508</internalId></specobject>
    <specobject>
      <id>FOAC.SM.CAN.RxMappingIPdu</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_FOCAN/SM_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>94</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the received CAN I-PDUs are configured so that there is a 1:1
                        mapping to the message payload of a specific CAN frame.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.CAN.RxMappingIPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>509</internalId></specobject>
    <specobject>
      <id>FOAC.SM.CAN.RxMappingSigGroup</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_FOCAN/SM_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>110</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that the serialized received signal groups are configured so that
                        there is a 1:1 mapping to the I-PDUs to be received on CAN.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.CAN.RxMappingSigGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>510</internalId></specobject>
    <specobject>
      <id>FOAC.SM.FOCan_SetControllerMode</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SM_FOCAN/SM_Configuration_verification_criteria.xml</sourcefile>
      <sourceline>126</sourceline>
      <version>1</version>
      <description>
                    &lt;para&gt;Verify that FOCan_Satellite_SetControllerMode is called on a QM partition,
                        usually within the context of a BswM rule, if the state of the network
                        associated with the FOCan controller changes.&lt;/para&gt;
                </description>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.Integration.FOCan_SetControllerMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>663</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>511</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="FOMM Proxy">
    <specobject>
      <id>EB_FailOP.Arch.FOMM.Proxy</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>101</sourceline>
      <version>1</version>
      <description>
                          There shall be a module FOMM which contains both server functions
                          (executed on a non fail operational partition on a fail operational core)
                          and proxy functions (executed on any partition) which forwards system
                          critical functions via client-/server communication to a fail operational
                          core. Calling the respective functions on the fail operational core shall
                          be suppressed when in fail operational mode.
                        </description>
      <comment>
                          Since client-/server calls to the FOMM are prevented by operating
                          system mechanisms in fail operational mode, the server and proxy code
                          of the FOMM need not be developed according to any ASIL level
                        </comment>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Proxy_Mcu_SetMode</srcid><srcstatus/><internalId>674</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Server_Mcu_SetMode</srcid><srcstatus/><internalId>675</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Proxy_Mcu_PerformReset</srcid><srcstatus/><internalId>676</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Server_Mcu_PerformReset</srcid><srcstatus/><internalId>677</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Proxy_Dio_WriteChannel</srcid><srcstatus/><internalId>678</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Server_Dio_WriteChannel</srcid><srcstatus/><internalId>679</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.WriteProtectPeripherals</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.NonLockstepMemoryAccess</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.Lockstep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>693</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>512</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.FOMM.MemRegion</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>138</sourceline>
      <version>1</version>
      <description>
                          The server functions of the FOMM, which are executed within a non
                          fail operational partition, shall have no access to the main memory
                          region containing FOMM data.
                        </description>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
        <needscov><needsobj>swad</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Server_Mcu_SetMode</srcid><srcstatus/><internalId>675</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Server_Mcu_PerformReset</srcid><srcstatus/><internalId>677</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Server_Dio_WriteChannel</srcid><srcstatus/><internalId>679</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>partially</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.WriteProtect</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>702</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.NonLockstepMemoryAccess</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>513</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.FOMM.MCUProxy</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>164</sourceline>
      <version>1</version>
      <description>
                          The FOMM module shall contain both an MCU server (executed on a non
                          fail operational partition on a fail operational core) and an MCU proxy
                          (executed on any partition) which shall forward potentially harmful
                          McuDriver function calls from the MCU proxy to the MCU server.
                        </description>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Proxy_Mcu_SetMode</srcid><srcstatus/><internalId>674</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Server_Mcu_SetMode</srcid><srcstatus/><internalId>675</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Proxy_Mcu_PerformReset</srcid><srcstatus/><internalId>676</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Server_Mcu_PerformReset</srcid><srcstatus/><internalId>677</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOMM.EB.GeneralCfg.McuPartitionRef</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>161</internalId></ffbObj>
      <containerCovstatus>covered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.WriteProtectPeripherals</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.NonLockstepMemoryAccess</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.Lockstep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>693</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>514</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.FOMM.FO_Operation</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>201</sourceline>
      <version>1</version>
      <description>
                          No function of the FOMM server shall be called during
                          fail operational mode.
                        </description>
      <comment>
                          This is required since the FOMM server and proxy code is not developed according to ASIL-D.
                          When having to shutdown the whole Mcu because of a non recoverable error in the fail
                          operational partition during fail operational mode, ShutdownAllCores()
                          shall be used.
                        </comment>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOMM.EB.PartitionFailedNotification.FOSwcExecPrepareToShutDownAllCores</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>204</internalId></ffbObj>
      <containerCovstatus>covered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.EcuStateTransitions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>726</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>515</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.FOMM.MCUProxy.Remap_Functions</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>238</sourceline>
      <version>1</version>
      <description>
                          The McuDriver functions Mcu_SetMode() and Mcu_PerformReset() shall be renamed to
                          Mcu_SetMode_Real() and Mcu_PerformReset_Real(), which shall only be called from
                          the MCU server within the FOMM.
                        </description>
      <comment>
                          If possible, you may change the source code of the McuDriver. If this is not
                          possible, various compiler suites may provide means to redefine symbols of
                          object files, e.g. GNU objcopy --redefine-sym.
                        </comment>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
        <needscov><needsobj>swad</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Proxy_Mcu_SetMode</srcid><srcstatus/><internalId>674</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Proxy_Mcu_PerformReset</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>partially</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.RestrictedShutdown</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>731</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.EcuStateTransitions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>726</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>516</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.FOMM.MCUProxy.Functions</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>269</sourceline>
      <version>1</version>
      <description>
                          The MCU proxy within the FOMM shall provide the functions Mcu_SetMode() and Mcu_PerformReset().
                          It shall perform client-/server calls to the MCU server module, which in turn shall
                          call the functions Mcu_SetMode_Real() respectively Mcu_PerformReset_Real() if not
                          in fail operational mode. Otherwise it shall do ignore the calls.
                        </description>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Proxy_Mcu_SetMode</srcid><srcstatus/><internalId>674</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Server_Mcu_SetMode</srcid><srcstatus/><internalId>675</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Proxy_Mcu_PerformReset</srcid><srcstatus/><internalId>676</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Server_Mcu_PerformReset</srcid><srcstatus/><internalId>677</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.RestrictedShutdown</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>731</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.EcuStateTransitions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>726</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>517</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.FOMM.MCUProxy.Config</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>295</sourceline>
      <version>1</version>
      <description>
                          There shall be configuration options both for Mcu_SetMode() and Mcu_PerformReset()
                          specifying if each of these functions actually shall be wrapped or not. The
                          integrator has then to configure it according to the characteristics of the
                          underlying Mcu driver.
                        </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOMM.EB.GeneralCfg.McuSetModeApiName</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>162</internalId></ffbObj>
        <ffbObj>
          <ffbId>FOMM.EB.GeneralCfg.McuPerformResetApiName</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>163</internalId></ffbObj>
      <containerCovstatus>covered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.RestrictedShutdown</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>731</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.EcuStateTransitions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>726</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>518</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="FOMM Proxy">
    <specobject>
      <id>EB_FailOP.Arch.FOMM.DIOProxy</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>360</sourceline>
      <version>1</version>
      <description>
                          The FOMM module shall contain both a DIO server (executed on a non
                          fail operational partition on a fail operational core) and a DIO proxy
                          (executed on any partition) which shall forward potentially harmful
                          Dio function calls from the DIO proxy to the DIO server.
                        </description>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Proxy_Dio_WriteChannel</srcid><srcstatus/><internalId>678</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Server_Dio_WriteChannel</srcid><srcstatus/><internalId>679</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.WriteProtectPeripherals</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.NonLockstepMemoryAccess</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.Lockstep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>693</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>519</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.FOMM.DIOProxy.Functions</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>390</sourceline>
      <version>1</version>
      <description>
                          The DIO proxy within the FOMM shall provide the function Dio_WriteChannel_Proxy().
                          It shall perform client-/server calls to the DIO server module, which in turn shall
                          call the function Dio_WriteChannel() if not in fail operational mode.
                          Otherwise it shall do ignore the calls.
                        </description>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Proxy_Dio_WriteChannel</srcid><srcstatus/><internalId>678</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Server_Dio_WriteChannel</srcid><srcstatus/><internalId>679</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ProtectCANTrcv</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>694</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.EcuStateTransitions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>726</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.Lockstep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>693</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SeparateComPath</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>707</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>520</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="Os Fail Operational Mode">
    <specobject>
      <id>EB_FailOP.Arch.OS.FailOpMode.Activate</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>469</sourceline>
      <version>1</version>
      <description>
                          There shall be a new operating system function ActivateFailOpMode() which
                          shall activate and enforce certain predefined limitations on the interaction
                          between fail operational and non fail operational cores and partitions.
                        </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ProtectCANTrcv</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>694</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.PreventExcessiveFailOpExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>698</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.TaskExecution</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>700</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SWCSetMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>723</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.EcuStateTransitions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>726</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.RestrictedShutdown</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>731</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>521</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.OS.FailOpMode.Deactivate</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>514</sourceline>
      <version>1</version>
      <description>
                          There shall be a new operating system function DeactivateFailOpMode() which
                          shall deactivate the limitations previously activated by ActivateFailOpMode().
                        </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ProtectCANTrcv</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>694</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.PreventExcessiveFailOpExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>698</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.TaskExecution</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>700</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SWCSetMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>723</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.EcuStateTransitions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>726</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.RestrictedShutdown</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>731</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>522</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.OS.FailOpMode.PreventXCoreCommands</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>558</sourceline>
      <version>1</version>
      <description>
                          The configurator shall allow to prevent accepting cross core commands from
                          any core to any other core during fail operational mode.
                        </description>
      <comment>
                          Usually this shall be used to prevent any cross core communication from
                          a non fail operational core to a fail operational core in order to prevent
                          uncontrolled load on the fail operational core.
                        </comment>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOMM.EB.RequestMode.PreventXCoreCommands</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>215</internalId></ffbObj>
      <containerCovstatus>covered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.PreventExcessiveFailOpExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>698</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.ProtectCANTrcv</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>694</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.TaskExecution</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>700</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.EcuStateTransitions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>726</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.RestrictedShutdown</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>731</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>523</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.OS.FailOpMode.PreventXPartitionCommands</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>610</sourceline>
      <version>1</version>
      <description>
                          The configurator shall allow to prevent accepting cross partition commands from
                          any partition to any other partition during fail operational mode.
                        </description>
      <comment>
                          Usually this shall be used to prevent any cross partition communication from
                          a non fail operational partition to a fail operational partition in order to prevent
                          uncontrolled load on the fail operational partition.
                        </comment>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.PreventExcessiveFailOpExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>698</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.TaskExecution</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>700</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.EcuStateTransitions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>726</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>524</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.OS.FailOpMode.PreventXCoreSyncCalls</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>647</sourceline>
      <version>1</version>
      <description>
                          The configurator shall allow to prevent synchronous cross core calls from
                          any core to any other core during fail operational mode.
                        </description>
      <comment>
                          Usually this shall be used to prevent any synchronous cross core calls from
                          a fail operational core to a non fail operational core in order to prevent
                          blocking operation on the fail operational core caused by a malfunction of
                          the software on the non fail operational core before or during the call.
                        </comment>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.PreventExcessiveFailOpExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>698</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.NonBlockingCommunication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>699</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.IntraECUCom</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>710</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>525</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.OS.FailOpMode.PreventXPartitionSyncCalls</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>681</sourceline>
      <version>1</version>
      <description>
                          The configurator shall allow to prevent synchronous cross partition calls from
                          any partition to any other partition during fail operational mode.
                        </description>
      <comment>
                          Usually this shall be used to prevent any synchronous cross partition calls from
                          a fail operational partition to a non fail operational partition in order to prevent
                          blocking operation on the fail operational partition in order of a malfunction of
                          the software on the non fail operational partition before or during the call.
                        </comment>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.PreventExcessiveFailOpExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>698</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.NonBlockingCommunication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>699</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.IntraECUCom</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>710</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>526</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="Requirements on non fail operational tasks">
    <specobject>
      <id>EB_FailOP.Arch.NonFailOpSw.ActivateTask</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>731</sourceline>
      <version>1</version>
      <description>
                            A non fail operational task shall not call the functions ActivateTask or
                            MK_AsyncActivateTask in fail operational mode, providing the id of a fail
                            operational task as argument.
                          </description>
      <safetyclass>QM</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.NonFailOpSw.ActivateTask</srcid><srcstatus/><internalId>496</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.PreventExcessiveFailOpExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>698</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>527</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.NonFailOpSw.SetEvent</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>753</sourceline>
      <version>1</version>
      <description>
                            A non fail operational task shall not call the functions SetEvent or
                            MK_AsyncSetEvent in fail operational mode, providing the id of a fail
                            operational task as first argument.
                          </description>
      <safetyclass>QM</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.NonFailOpSw.SetEvent</srcid><srcstatus/><internalId>497</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.PreventExcessiveFailOpExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>698</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>528</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.NonFailOpSw.ShutdownAllCores</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>775</sourceline>
      <version>1</version>
      <description>
                            A non fail operational task shall not call the function ShutdownAllCores
                            in fail operational mode.
                          </description>
      <safetyclass>QM</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.Req.NonFailOpSw.ShutdownAllCores</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.EcuStateTransitions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>726</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>529</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.NonFailOpSw.TerminateApplication</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>796</sourceline>
      <version>1</version>
      <description>
                            A non fail operational task shall not call the function TerminateApplication
                            in fail operational mode, providing the id of a fail
                            operational OS application as first argument.
                          </description>
      <safetyclass>QM</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.NonFailOpSw.TerminateApplication</srcid><srcstatus/><internalId>499</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.EcuStateTransitions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>726</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>530</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.NonFailOpSw.GetEvent</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>818</sourceline>
      <version>1</version>
      <description>
                            A non fail operational task shall not call the function GetEvent
                            in fail operational mode, providing the id of a fail
                            operational task as first argument.
                          </description>
      <safetyclass>QM</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.NonFailOpSw.GetEvent</srcid><srcstatus/><internalId>500</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.PreventExcessiveFailOpExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>698</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>531</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.NonFailOpSw.GetTaskState</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>840</sourceline>
      <version>1</version>
      <description>
                            A non fail operational task shall not call the function GetTaskState
                            in fail operational mode, providing the id of a fail
                            operational task as first argument.
                          </description>
      <safetyclass>QM</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.NonFailOpSw.GetTaskState</srcid><srcstatus/><internalId>501</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.PreventExcessiveFailOpExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>698</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>532</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.NonFailOpSw.QmOsCall</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>862</sourceline>
      <version>1</version>
      <description>
                            A non fail operational task shall not call any QM-OS function on a fail
                            operational partition in fail operational mode.
                          </description>
      <safetyclass>QM</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.NonFailOpSw.QmOsCall</srcid><srcstatus/><internalId>502</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.PreventExcessiveFailOpExec</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>698</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>533</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.NonFailOpSw.FommServerCS</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>883</sourceline>
      <version>1</version>
      <description>
                            A non fail operational task shall not do any client-/server call to
                            a FOMM server task in fail operational mode.
                          </description>
      <safetyclass>QM</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.NonFailOpSw.FommServerCS</srcid><srcstatus/><internalId>503</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.EcuStateTransitions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>726</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>534</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.NonFailOpSw.Interrupts</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>904</sourceline>
      <version>1</version>
      <description>
                            A non fail operational task shall not generate any hardware interrupts, except the hardware
                            itself defines a minimum inter-arrival time of interrupts which is considered in the
                            worst case execution time calculations.
                          </description>
      <comment>
                            An interrupt, even if the associated ISR thread is not allowed to run, always puts some
                            load onto the processing core (by execution of the lower level interrupt service code).
                          </comment>
      <safetyclass>QM</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.NonFailOpSw.Interrupts</srcid><srcstatus/><internalId>504</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.TaskExecution</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>700</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>535</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="Locks">
    <specobject>
      <id>EB_FailOP.Arch.Locks.Spinlocks</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>1084</sourceline>
      <version>1</version>
      <description>
                          No fail operational task shall use a spinlock which is used by a non fail operational
                          task too, unless it uses TryToGetSpinlock() and a proper termination condition.
                        </description>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.NonBlockingCommunication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>699</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>536</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.Locks.LockBudgetMonitoring</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>1104</sourceline>
      <version>1</version>
      <description>
                          When using lock budget monitoring to limit the time a fail operational task
                          waits for a lock hold by a non fail operational task, you have to ensure that
                          the two tasks reside on the same core and that the priority of the fail operational
                          task is higher than that of the non fail operational task.
                        </description>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.NonBlockingCommunication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>699</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>537</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.Locks.RteHookNbw</id>
      <status>proposed</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>1126</sourceline>
      <version>1</version>
      <description>
                          The RTE shall provide a hook which shall be called each time before trying to
                          read a shared buffer protected by the NBW protocol. When returning a non-zero
                          value, the buffer reading loop shall be terminated with a failure.
                        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.NonBlockingCommunication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source status 'proposed' excluded from tracing.</linkerror><internalId>699</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.general.status</ruleid><ruleid>INFO.Rule set RMP4.0</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>538</internalId><excludedFromTracing>1</excludedFromTracing></specobject>
    <specobject>
      <id>EB_FailOP.Arch.Locks.OsReadExecutionTime</id>
      <status>proposed</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>1147</sourceline>
      <version>1</version>
      <description>
                          The SafetyOs shall provide a function to read the current exeuction time of
                          the calling task.
                        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.NonBlockingCommunication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source status 'proposed' excluded from tracing.</linkerror><internalId>699</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.general.status</ruleid><ruleid>INFO.Rule set RMP4.0</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>539</internalId><excludedFromTracing>1</excludedFromTracing></specobject>
    <specobject>
      <id>EB_FailOP.Arch.Locks.OsReadScheduleTableTime</id>
      <status>proposed</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>1167</sourceline>
      <version>1</version>
      <description>
                          The SafetyOs shall provide a function to read the time passed since the start
                          of the current cycle of the simple schedule table.
                        </description>
      <comment>
                          Alternatively, the deadlines for each lock may be managed at scheduler level
                          and the task reads only the information if this deadline has passed already or not.
                        </comment>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.NonBlockingCommunication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source status 'proposed' excluded from tracing.</linkerror><internalId>699</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.general.status</ruleid><ruleid>INFO.Rule set RMP4.0</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>540</internalId><excludedFromTracing>1</excludedFromTracing></specobject>
  </specobjects>
    <specobjects doctype="swad" title="Integration requirements">
    <specobject>
      <id>EB_FailOP.Arch.Integration.DriverOnFoCore</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_behavioral_view.xml</sourcefile>
      <sourceline>1364</sourceline>
      <version>1</version>
      <description>
                          All partitions on fail operational cores which contain any non ASIL-D code and which are allowed to operate
                          in fail operational mode, shall not have access to any critical peripheral registers.
                          Critical peripherals are such which may bring the subsystem into an unsafe state if written
                          by incorrect code.
                        </description>
      <comment>
                          This especially means that non ASIL-D device drivers which have to execute on a fail operational core
                          must not have access to the whole bunch of peripheral registers but access has to be restricted to
                          the required set of registers by using a separate memory region.
                        </comment>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.Integration.DriverOnFoCore</srcid><srcstatus/><internalId>491</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>541</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="General requirements">
    <specobject>
      <id>EB_FailOP.Arch.General.FOPartition.FFImem</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>159</sourceline>
      <version>1</version>
      <description>
                  All tasks which have access to a fail operational partition must guarantee
                  freedom from interference in the memory domain according to ASIL-D level.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.General.FOPartition.FFImem</srcid><srcstatus/><internalId>445</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>542</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.General.FOPartition.FFItime</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>174</sourceline>
      <version>1</version>
      <description>
                  All tasks which are executed in fail operational mode within a fail operational
                  partition must guarantee
                  freedom from interference in the time and execution domain according to ASIL-D level,
                  unless the priority of the task is lower than that of any fail operational task
                  on the same processing core.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.General.FOPartition.FFItime</srcid><srcstatus/><internalId>446</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>543</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.General.FOPartition.FailOpTask</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>192</sourceline>
      <version>1</version>
      <description>
                  All tasks whose correct operation is needed for the correct operation of the
                  fail operational subsystem they are part of ('fail operational tasks')
                  must guarantee the correctness of their intended function according to ASIL-D level.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.General.FOPartition.FailOpTask</srcid><srcstatus/><internalId>447</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>544</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.General.FOCanInterface</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>208</sourceline>
      <version>1</version>
      <description>
                  If any fail operational task needs to send or receive CAN messages which are needed
                  for the correct operation of the fail operational subsystem they are part of, these
                  messages shall be sent/received via a CAN interface controlled by fail operational
                  tasks only.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.General.FOCanInterface</srcid><srcstatus/><internalId>449</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>545</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.General.SafetyOS</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>225</sourceline>
      <version>1</version>
      <description>
                  The MCU (including all its cores) containing the fail operational tasks shall be controlled
                  by the EB tresos SafetyOS.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.General.SafetyOS</srcid><srcstatus/><internalId>450</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>546</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.General.FOModeControl</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>240</sourceline>
      <version>1</version>
      <description>
                  There shall be at least one fail operational application software component which controls
                  the fail operational state machine via the FOMM module.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>547</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.General.FOModeControl.FOLocalPrepare</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>255</sourceline>
      <version>1</version>
      <description>
                  The application software component controlling the FOMM shall request a mode switch to the
                  FOLocalPrepare mode when it is in state NormalMode and it wants to start fail operational
                  software execution.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>548</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.General.FOModeControl.FOLocalActive</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>271</sourceline>
      <version>1</version>
      <description>
                  The application software component controlling the FOMM shall request a mode switch to the
                  FOLocalActive mode when it is in state FOLocalPrepare and
                  after it has performed a lot of application level checks that the expected
                  service is delivered in this mode. After the successful mode switch, the application may
                  change to a fail operational software execution state, that is, a state where the system safety
                  may depend on the correct operation of fail operational software components.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>549</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.General.FOModeControl.FOCommPrepare</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>290</sourceline>
      <version>1</version>
      <description>
                  The application software component controlling the FOMM shall request a mode switch to the
                  FOCommPrepare mode when it is in state FOLocalActive and it wants to start fail operational
                  communication.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>550</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.General.FOModeControl.FOCommActive</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>306</sourceline>
      <version>1</version>
      <description>
                  The application software component controlling the FOMM shall request a mode switch to the
                  FOCommActive mode when it is in state FOCommPrepare and
                  after it has performed a lot of application level checks that fail operational communication
                  with its peers works as expected.  After the successful mode switch, the application may
                  change to a fail operational communication state, that is, a state where reliable communication
                  with peer ECUs is guaranteed.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>551</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.General.HwSafetyLevel</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>325</sourceline>
      <version>1</version>
      <description>
                  In case a fail operational task uses any hardware peripherals, we have to ensure that these
                  peripherals either conform to the required safety level or there is an explicit concept which
                  allows the use of the peripherals in a way which does not violate the overall fail operational
                  property.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>552</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.General.HwDesignAsilD</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>342</sourceline>
      <version>1</version>
      <description>
                  In case a fail operational task uses any hardware peripherals, we have to ensure that the
                  design of these peripherals conforms to ASIL-D if the same peripheral unit is used for both
                  redundant subsystems, or to ASIL-B otherwise.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.General.HwDesignAsilD</srcid><srcstatus/><internalId>451</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>553</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="CAN state management">
    <specobject>
      <id>EB_FailOP.Arch.CAN.Sm.Setup</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>368</sourceline>
      <version>2</version>
      <description>
                    The FOAC shall setup the ECU's CAN infrastructure in a way that both the
                    CAN stack of the fail operational subsystem and the CAN stack of the
                    standard Autocore can access the same external CAN link.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>554</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Sm.SetupReady</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>389</sourceline>
      <version>2</version>
      <description>
                    The FOAC shall notify the CAN driver on a non fail operational subsystem when the
                    initialization of the of the CAN driver on the fail operational subsystem has
                    finished.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>555</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Sm.StartCanCtrl</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>410</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall start the CAN controller after having received a 'start CAN'
                    event from a non fail operational partition.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>556</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Sm.DioProxy</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>430</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall provide a Dio proxy which allows the non fail
                    operational partition to control the control pins of the CAN transceiver. When in fail operational
                    mode, the proxy shall prevent unintended state changes from the non fail
                    operational partitions.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOMM.EB.ProxyDioWriteChannel.APISignature</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>178</internalId></ffbObj>
        <ffbObj>
          <ffbId>FOMM.EB.ProxyDioWriteChannel.IgnoreRequest</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>219</internalId></ffbObj>
      <containerCovstatus>covered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.EcuStateTransitions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>726</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>557</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Sm.MemProtection</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>464</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall prevent write accesses to the CAN infrastructure and the
                    CAN transceiver from the non fail operational partitions.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SeparateMem</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>701</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>558</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="CAN data transmission">
    <specobject>
      <id>EB_FailOP.Arch.CAN.Tx</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>490</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall transmit a data element on the CAN interface
                    assigned to a fail operational partition.
                  </description>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOCom.top.001</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linkerror</ffbLinkstatus><ffbLinkerror>target not covered.</ffbLinkerror><ffbObjcovstatus>uncovered</ffbObjcovstatus><internalId>144</internalId></ffbObj>
      <containerCovstatus>uncovered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SeparateComPath</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>707</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.GetTxData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>713</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>559</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Tx.ComXf</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>518</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall serialize the data element to be transmitted using the
                    safety COM transformer.
                  </description>
      <needscoverage>
        <needscov><needsobj>swintts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.Transformer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>705</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>560</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Tx.FixedSize</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>538</sourceline>
      <version>1</version>
      <description>
                    The transmitted serialized data element shall have fixed size. Variable size payloads
                    shall not be supported.
                  </description>
      <needscoverage>
        <needscov><needsobj>swintts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>561</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Tx.E2EXf</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>552</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall do E2E protection of the serialized data element using
                    the safety E2E transformer if required by the configuration.
                  </description>
      <needscoverage>
        <needscov><needsobj>swintts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.E2ETx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>711</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>562</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Tx.Mapping2Pdu</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>572</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall map a serialized and possibly E2E protected data element
                    directly to an I-PDU.
                  </description>
      <needscoverage>
        <needscov><needsobj>swintts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.E2ETx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>711</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>563</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Tx.SecOC</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>592</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall append SecOC protocol information to an outgoing I-PDU if required
                    by the configuration.
                  </description>
      <comment>
                    Separate transmission of authentic and cryptographic I-PDUs is not supported.
                  </comment>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOCom.top.003</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linkerror</ffbLinkstatus><ffbLinkerror>target not covered.</ffbLinkerror><ffbObjcovstatus>uncovered</ffbObjcovstatus><internalId>146</internalId></ffbObj>
      <containerCovstatus>uncovered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SecuredPduTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>718</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>564</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Tx.Mapping2CanId</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>619</sourceline>
      <version>1</version>
      <description>
                    Each id of an I-PDU to be transmitted shall be mapped directly to a standard CAN id.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>565</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Tx.CanBuffer</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>638</sourceline>
      <version>1</version>
      <description>
                    Exactly one buffer shall be configured for each CAN id to be transmitted. Only
                    one CAN id shall be configured per buffer.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>566</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Tx.TxConfirmation</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>658</sourceline>
      <version>2</version>
      <description>
                    Each successful transmission of a CAN message shall be confirmed to the software
                    component which sent the message, if configured.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.GetTxData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>713</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>567</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.TxMappingIPdu</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>678</sourceline>
      <version>1</version>
      <description>
                    The CAN I-PDUs to transmit shall be configured in a way that there is a 1:1 mapping
                    to the message payload of a specific CAN frame.
                  </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.CAN.TxMappingIPdu</srcid><srcstatus/><internalId>507</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>568</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.TxMappingSigGroup</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>693</sourceline>
      <version>1</version>
      <description>
                    The serialized signal groups to transmit shall be configured in a way that there is a 1:1 mapping
                    to the I-PDUs to be transmitted on CAN.
                  </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.CAN.TxMappingSigGroup</srcid><srcstatus/><internalId>508</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>569</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="CAN data reception">
    <specobject>
      <id>EB_FailOP.Arch.CAN.Rx</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>715</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall be able to receive data elements from the CAN interface
                    assigned to a fail operational partition.
                  </description>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOCom.top.002</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linkerror</ffbLinkstatus><ffbLinkerror>target not covered.</ffbLinkerror><ffbObjcovstatus>uncovered</ffbObjcovstatus><internalId>145</internalId></ffbObj>
      <containerCovstatus>uncovered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SecuredPduRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>719</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SeparateComPath</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>707</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.ProvideRxData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>721</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>570</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Rx.CanBuffer</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>747</sourceline>
      <version>1</version>
      <description>
                    Exactly one buffer shall be configured for each CAN id to be received. Only
                    one CAN id shall be configured per buffer.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>571</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Rx.Mapping2CanId</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>767</sourceline>
      <version>1</version>
      <description>
                    Each id of a received CAN message shall be mapped directly to an I-PDU id.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>572</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Rx.SecOC</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>786</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall validate SecOC protocol information from an incoming I-PDU if required
                    by the configuration. If validation fails, the I-PDU shall be discarded and diagnostic
                    information for the software component shall be sent.
                  </description>
      <comment>
                    Separate reception of authentic and cryptographic I-PDUs is not supported.
                  </comment>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOCom.top.004</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linkerror</ffbLinkstatus><ffbLinkerror>target not covered.</ffbLinkerror><ffbObjcovstatus>uncovered</ffbObjcovstatus><internalId>147</internalId></ffbObj>
      <containerCovstatus>uncovered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.VerifyMAC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>720</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>573</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Rx.E2EXf</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>814</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall verify E2E protection of the received serialized data elements using
                    the safety E2E transformer if required by the configuration.
                  </description>
      <needscoverage>
        <needscov><needsobj>swintts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.E2ERx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>712</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>574</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Rx.ComXf</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>834</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall deserialize the received PDU using the
                    safety COM transformer.
                  </description>
      <needscoverage>
        <needscov><needsobj>swintts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.Transformer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>705</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>575</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.Rx.FixedSize</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>854</sourceline>
      <version>1</version>
      <description>
                    The received serialized data element shall have fixed size. Variable size payloads
                    shall not be supported.
                  </description>
      <needscoverage>
        <needscov><needsobj>swintts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.NoUncontrolledFailure</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>730</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>576</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.RxMappingIPdu</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>878</sourceline>
      <version>1</version>
      <description>
                    The CAN I-PDUs to be received shall be configured in a way that there is a 1:1 mapping
                    to the message payload of a specific CAN frame.
                  </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.CAN.RxMappingIPdu</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>577</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.CAN.RxMappingSigGroup</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>893</sourceline>
      <version>1</version>
      <description>
                    The serialized signal groups to be received shall be configured in a way that there is a 1:1 mapping
                    to the I-PDUs to be received on CAN.
                  </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.CAN.RxMappingSigGroup</srcid><srcstatus/><internalId>510</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>578</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="Secure onboard communication">
    <specobject>
      <id>EB_FailOP.Arch.SecOC.Version</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>915</sourceline>
      <version>1</version>
      <description>
                    The SecOC implementation of FOAC shall conform to the document
                    EEKS5_SOK_Protokollbeschreibung_V3.0F_20170804_AT.pdf.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SipHash</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>717</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>579</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.SecOC.Key</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>935</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall get the SecOC secure key from a non fail operational partition
                    and store it in RAM.
                  </description>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOCom.top.005</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linkerror</ffbLinkstatus><ffbLinkerror>target not covered.</ffbLinkerror><ffbObjcovstatus>uncovered</ffbObjcovstatus><internalId>148</internalId></ffbObj>
      <containerCovstatus>uncovered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.GetSecurekey</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>715</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>580</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.SecOC.Freshness</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>959</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall get the SecOC freshness value on startup and every time it changes
                    from the freshness manager operating on a non fail operational core.
                  </description>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOCom.top.006</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linkerror</ffbLinkstatus><ffbLinkerror>target not covered.</ffbLinkerror><ffbObjcovstatus>uncovered</ffbObjcovstatus><internalId>149</internalId></ffbObj>
      <containerCovstatus>uncovered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.GetInitFV</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>714</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>581</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.SecOC.FreshnessBackup</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>983</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall calculate the SecOC freshness value for each peer connection based
                    on the received I-PDUs from this peer.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.GetInitFV</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>714</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>582</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.SecOC.FreshnessNonFailOp</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1003</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall use the freshness value received from a non fail operational
                    partition when in non fail operational mode.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.GetInitFV</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>714</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>583</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.SecOC.FreshnessFailOp</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1023</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall use the freshness value calculated from received peer I-PDUs
                    when in fail operational mode.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.GetInitFV</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>714</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.GenerateMAC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>716</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>584</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.SecOC.FreshnessCheck</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1047</sourceline>
      <version>1</version>
      <description>
                    If the freshness values received from a non fail operational core and the
                    one calculated from the received I-PDUs for each peer differ significantly,
                    report a respective runtime error.
                    This check can be executed only in non fail operational mode since afterwards
                    it is no longer possible to receive freshness values from a non fail operational
                    core.
                    A function shall allow to inquire the result of the last check in order to
                    prevent a switch to fail operational mode if the check did not succeed.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.GetInitFV</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>714</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>585</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="Mode management">
    <specobject>
      <id>EB_FailOP.Arch.Mm.FOLocal</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1101</sourceline>
      <version>2</version>
      <description>
                    The FOAC shall provide an API for changing to 'fail operational software component
                    execution mode'. This API may only be called by a software component executing on
                    a fail operational partition. If the FOAC cannot guarantee the correct operation
                    of the fail operational software component execution mode, it denies the mode change.
                    After the successful mode change, the software components on the fail operational
                    partitions may perform tasks which rely on the fail silent behavior of the components.
                    No behaviour from outside the fail operational partitions, especially caused by
                    tasks executing on the non fail operational partitions, may lead to termination of
                    the fail operational communication mode.
                    This API may also be called when in state 'fail operational software component
                    execution mode' if this service is no longer needed.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOMM.EB.RequestMode.APISignature</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>170</internalId></ffbObj>
        <ffbObj>
          <ffbId>FOMM.EB.RequestMode.NormalToFOSwcExecPrepare</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>194</internalId></ffbObj>
        <ffbObj>
          <ffbId>FOMM.EB.RequestMode.FOSwcExecPrepareToFOSwcExecution</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>195</internalId></ffbObj>
      <containerCovstatus>covered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SWCSetMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>723</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>586</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.Mm.CheckConsistency</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1151</sourceline>
      <version>1</version>
      <description>
                    The FOMM shall call all existing CheckConsistency functions of the FO modules when switching
                    to the FOLocal mode. If any of these functions returns an error, the switch to the
                    FOLocal mode shall not be done.
                  </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SWCSetMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>723</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>587</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.Mm.CanActivate</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1177</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall provide an API for activating the CAN controller. This API may be
                    called by a software component executing on a non fail operational partition.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.EcuStateTransitions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>726</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>588</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.Mm.NormalMode</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1197</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall provide an API for changing from 'fail operational software component
                    execution mode' back to normal mode. This API may only be called by a software
                    component executing on a fail operational partition. This software component has
                    to ensure that the system is in a state where the fail operational mode is not
                    needed.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOMM.EB.RequestMode.APISignature</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>170</internalId></ffbObj>
        <ffbObj>
          <ffbId>FOMM.EB.RequestMode.FOSwcExecToNormal</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>200</internalId></ffbObj>
      <containerCovstatus>covered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SWCSetMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>723</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>589</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.Mm.FOComm</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1236</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall provide an API for changing to 'fail operational communication mode'.
                    This API may only be called by a software component executing on
                    a fail operational partition, when the partition is in fail operational software
                    component execution mode. If the FOAC cannot guarantee the correct operation
                    of the fail operational communication mode, it denies the mode change (this especially
                    happens if the CAN interface is not yet activated).
                    After the successful mode change, the software components on the fail operational
                    partitions may communicate with other ECUs via the CAN interface associated with
                    a fail operational partition; this communication needs to provide reliable operation
                    and needs to guarantee fail silent behaviour in case of any faults.
                    No behaviour from outside the fail operational partitions, especially caused by
                    tasks executing on the non fail operational partitions, may lead to termination of
                    the fail operational communication mode.
                  </description>
      <comment>
                    After having switched to the fail operational communication mode, the controlling
                    software component shall, in addition to the tests done by the FOAC itself,
                    execute a sufficient number of tests in order to verify
                    that the communication with the peer is working properly, before actually starting
                    the safety critical operation mode. If verification fails, it shall switch back
                    to fail operational software component execution mode.
                  </comment>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOMM.EB.RequestMode.APISignature</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>170</internalId></ffbObj>
        <ffbObj>
          <ffbId>FOMM.EB.RequestMode.FOCommPrepareToFOComm</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>201</internalId></ffbObj>
        <ffbObj>
          <ffbId>FOMM.EB.RequestMode.InvalidPartition.ApiRetValue</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>191</internalId></ffbObj>
      <containerCovstatus>covered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SWCSetMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>723</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>590</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.Mm.Query</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1296</sourceline>
      <version>1</version>
      <description>
                    The FOAC shall provide an API for retrieving the current fail operational mode
                    (NormalMode, FOLocal mode, FOComm mode), which may also be used cross-core.
                  </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOMM.EB.GetMode.APISignature</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>171</internalId></ffbObj>
      <containerCovstatus>covered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SWCGetMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>724</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.BSWGetMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>725</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>591</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="Memory Protection">
    <specobject>
      <id>EB_FailOP.Arch.MemProt.NonFailOpPartition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1481</sourceline>
      <version>1</version>
      <description>
                  If any non fail operational partition is allocated to a fail operational core and this
                  non fail operational partition is not disabled during fail operational mode, it must not
                  have write access to critical peripherals.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.MemProt.NonFailOpPartition</srcid><srcstatus/><internalId>471</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>592</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.MemProt.FailOpPartition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1496</sourceline>
      <version>2</version>
      <description>
                  All memory regions allocated to fail operational partitions (Os-&amp;gt;OsMicrokernel-&amp;gt;MkMemoryRegion)
                  shall allow write access only from fail operational qualified tasks. Especially, the InitThreadAccess
                  shall be disabled by not setting the flag 'MkMemoryRegionInitThreadAccess'.
                </description>
      <comment>
                  The InitThread executes the MK_InitFunction, which in turn executes the initialization functions
                  of some non ASIL-D functions. In order to prevent these functions from doing any harm to
                  fail operational memory regions, access to them shall be prevented.
                  Initialization of fail operational modules is done later on within the Init Task, which operates
                  with memory protection turned on.
                </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.MemProt.FailOpPartition</srcid><srcstatus/><internalId>468</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>593</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.MemProt.BusMpuMemory</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1518</sourceline>
      <version>2</version>
      <description>
                  If any partitions are allocated to non-lockstep cores, you shall use a mechanism which
                  prevents write accesses to critical memory which is independent from
                  this non-lockstep core in order that the non-lockstep core is not able to perform arbitrary
                  write accesses there due to a random hardware fault. This mechanism shall be set up within
                  the function 'MK_InitHardwareBeforeData()' on the boot-core.
                </description>
      <comment>
                  The mechanism may be called e.g. 'BusMpu' or 'Extended Resource Domain Controller' on different
                  architectures.
                </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.MemProt.BusMpuMemory</srcid><srcstatus/><internalId>469</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>594</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.MemProt.BusMpuPeripherals</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1539</sourceline>
      <version>2</version>
      <description>
                  If any partitions are allocated to non-lockstep cores, you shall use a mechanism which
                  prevents write accesses to critical peripherals which is independent from
                  this non-lockstep core in order that the non-lockstep core is not able to perform arbitrary
                  write accesses there due to a random hardware fault. Critical peripherals are such which
                  may bring the subsystem into an unsafe state if written by incorrect code.
                  This mechanism shall be set up within the function 'MK_InitHardwareBeforeData()' on the boot-core.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.MemProt.BusMpuPeripherals</srcid><srcstatus/><internalId>470</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>595</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="Preventing Partition and Core Interaction">
    <specobject>
      <id>EB_FailOP.Arch.PreventInteraction.ToFoCore</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1560</sourceline>
      <version>1</version>
      <description>
                  The cross-core interaction prevention mechanism shall be configured in a way that
                  the operating system on a fail operational core does not allow
                  any request from a non fail operational core during
                  fail operational mode.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.PreventInteraction.ToFoCore</srcid><srcstatus/><internalId>472</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>596</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.PreventInteraction.FromFoCore</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1576</sourceline>
      <version>1</version>
      <description>
                  The cross-core interaction prevention mechanism should be configured in a way that
                  the operating system on a fail operational core prevents any potentially blocking
                  request to a non fail operational core during fail operational mode.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.PreventInteraction.FromFoCore</srcid><srcstatus/><internalId>473</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>597</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.PreventInteraction.CommToNonFo</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1591</sourceline>
      <version>1</version>
      <description>
                  No fail operational task shall do synchronous calls to non fail operational tasks during
                  fail operational mode.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.PreventInteraction.CommToNonFo</srcid><srcstatus/><internalId>479</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>598</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.PreventInteraction.Spinlock</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1605</sourceline>
      <version>1</version>
      <description>
                  No fail operational task shall try to get a spinlock without timeout which is accessible
                  by non fail operational tasks in fail operational mode.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.PreventInteraction.Spinlock</srcid><srcstatus/><internalId>480</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>599</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.PreventInteraction.Polling</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1619</sourceline>
      <version>1</version>
      <description>
                  All events, which are received by a fail operational task from a non fail operational task
                  shall be set to polling mode by specifying a period within
                  Rte-&amp;gt;Software Component Instances-&amp;gt;Event to Task Mapping.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.PreventInteraction.Polling</srcid><srcstatus/><internalId>481</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>600</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.PreventInteraction.ToFoPartition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1634</sourceline>
      <version>1</version>
      <description>
                  The cross-partition interaction prevention mechanism shall be configured in a way that no
                  fail operational partition allows any requests from non fail operational partitions during
                  fail operational mode.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.PreventInteraction.ToFoPartition</srcid><srcstatus/><internalId>474</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>601</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.PreventInteraction.FromFoPartition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1649</sourceline>
      <version>1</version>
      <description>
                  The cross-partition interaction prevention mechanism should be configured in a way that no
                  fail operational partition makes any potentially blocking requests to non fail operational
                  partitions during fail operational mode.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.PreventInteraction.FromFoPartition</srcid><srcstatus/><internalId>475</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>602</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.PreventInteraction.FommServerPartition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1664</sourceline>
      <version>1</version>
      <description>
                  There shall be a non fail operational partition which contains the FOMM server task which services
                  client/server calls from other partitions for accessing critical hardware resources. Since access
                  to these hardware resources shall be restricted to non fail operational mode only, the task which
                  services these client/server calls shall be the only task defined within this partition.
                </description>
      <comment>
                  When switching to any fail operational mode, the FOMM terminates the FOMM server task in order
                  to guarantee that no service calls can be sent to the FOMM server during fail operational modes.
                  When leaving the fail operational modes, the FOMM server task is activated again.
                </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>603</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.PreventInteraction.FommServerAllocation</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1685</sourceline>
      <version>1</version>
      <description>
                  The partition executing the FOMM server tasks shall be allocated to a fail operational
                  core.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.PreventInteraction.FommServerAllocation</srcid><srcstatus/><internalId>476</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>604</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.PreventInteraction.ToFommServer</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1699</sourceline>
      <version>2</version>
      <description>
                  The cross-core interaction prevention mechanism shall be configured in a way that
                  the partition executing the FOMM server tasks don't allow any requests from
                  any partition during fail operational mode.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.PreventInteraction.ToFommServer</srcid><srcstatus/><internalId>477</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>605</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.PreventInteraction.CommToFommServer</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1714</sourceline>
      <version>1</version>
      <description>
                  No fail operational task shall do any communication with a FOMM server task during
                  fail operational mode.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.PreventInteraction.CommToFommServer</srcid><srcstatus/><internalId>478</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>606</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="FFI on Timing and Execution">
    <specobject>
      <id>EB_FailOP.Arch.TimingExec.WCET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1731</sourceline>
      <version>1</version>
      <description>
                  A worst case execution time has to be determined for each fail operational task. Scheduling of
                  fail operational tasks shall be done in a way that correct execution of all fail operational
                  tasks is guaranteed even if all tasks consume their worst case execution time completely.
                  Appropriate mechanisms shall be used (e.g. low priorities) in order
                  that non fail operational tasks don't prevent the fail operational tasks from being executed
                  correctly and in time.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.TimingExec.WCET</srcid><srcstatus/><internalId>482</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>607</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.TimingExec.TermNonFO</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1750</sourceline>
      <version>1</version>
      <description>
                  If a non fail operational task is about to consume an amount of processor time which would
                  prevent any fail operational task from executing correctly and in time, the system has to
                  switch to fail operational only mode in time (be aware that the time for shutting down the
                  non fail operational partitions need to be taken into account!)
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.TimingExec.TermNonFO</srcid><srcstatus/><internalId>483</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>608</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.TimingExec.LowPrioNonFO</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1767</sourceline>
      <version>1</version>
      <description>
                  Each non fail operational task with no assigned deadline shall have lower priority than
                  any fail operational task.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>609</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.TimingExec.AsyncOps</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1782</sourceline>
      <version>1</version>
      <description>
                  Asynchronous operations (that is, operations which are not part of the periodic task
                  schedule like interrupts or asynchronous task activations) which may interrupt the
                  execution of a fail operational task shall be taken into account when determining
                  the worst case execution time of these tasks.
                </description>
      <comment>
                  Since limiting the rate of such asynchronous operations is usually extremely difficult
                  and results in very pessimistic numbers, you should try to avoid such operations and
                  instead use polling instead of interrupts and periodic scheduled tasks instead of
                  asynchronous tasks or event driven tasks.
                </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.TimingExec.AsyncOps</srcid><srcstatus/><internalId>484</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>610</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.TimingExec.UserLevel</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1805</sourceline>
      <version>1</version>
      <description>
                  All non fail operational tasks which may be executed on a fail operational core in fail operational
                  mode must be ordinary user tasks without the ability to execute any processor instruction to disable
                  interrupts.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.TimingExec.UserLevel</srcid><srcstatus/><internalId>485</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>611</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.TimingExec.NoSuspendAllInterrupts</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1821</sourceline>
      <version>1</version>
      <description>
                  The operating system shall be configured in a way that calling DisableAllInterrupts() or
                  SuspendAllInterrupts() is not allowed for non fail operational tasks executing on a fail operational
                  core in fail operational mode.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.TimingExec.NoSuspendAllInterrupts</srcid><srcstatus/><internalId>486</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>612</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.TimingExec.NoSuspendOsInterrupts</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1837</sourceline>
      <version>1</version>
      <description>
                  The operating system shall be configured in a way that calling
                  SuspendOsInterrupts() is not allowed for non fail operational tasks executing on a fail operational
                  core in fail operational mode.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.TimingExec.NoSuspendOsInterrupts</srcid><srcstatus/><internalId>487</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>613</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.TimingExec.NoHighPrioResource</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1853</sourceline>
      <version>1</version>
      <description>
                  The operating system shall be configured in a way that a resource is not available for non
                  fail operational tasks executing on a non fail operational partition if the
                  resource is used by any fail operational task too.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.Req.TimingExec.NoHighPrioResource</srcid><srcstatus/><internalId>488</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>614</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.TimingExec.MaxWaitingTime</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1869</sourceline>
      <version>1</version>
      <description>
                  In case an operating system resource is used both by a fail operational task and a non fail
                  operational task operating on a fail operational core, the maximum waiting time to the resource
                  of the fail operational task has to be limited. If this limit is exceeded, corrective actions
                  have to be performed by the fail operational task (e.g. using some safe fallback value).
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.TimingExec.MaxWaitingTime</srcid><srcstatus/><internalId>489</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>615</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.TimingExec.ScheduleTable</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1886</sourceline>
      <version>1</version>
      <description>
                  There shall be exactly one schedule table on each fail operational core in order to maintain
                  a deterministic behaviour in task execution and to avoid asynchronous task activations on
                  remote cores.
                </description>
      <comment>
                  For specific scenarios it may be preferrable to use the same hardware counter for schedule
                  tables on several processing cores.
                </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.TimingExec.ScheduleTable</srcid><srcstatus/><internalId>490</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>616</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="Quality levels">
    <specobject>
      <id>EB_FailOP.Arch.ASILD</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1919</sourceline>
      <version>1</version>
      <description>
                  All components of the FOAC which are executed on the fail operational partition and
                  which are used during the fail operational mode shall be developed in a way to meet
                  the requirements for an ASIL-D classified system regarding, among others, freedom from
                  interference on memory, timing, and execution as well as data reception, data transmission,
                  and E2E protection.
                </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.NoUncontrolledFailure</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>730</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>617</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.SwComplexity</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1950</sourceline>
      <version>1</version>
      <description>
                  In addition to follow all ASIL-D process requirements, SW reliability heavily depends on
                  a small size of the software and on reduced complexity. That is, the functionality of
                  all software should be reduced to the absolutely needed minimum. The complexity both within
                  software modules and in the interactions of software modules should be kept as low as
                  possible.
                </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.GuaranteedCpuTime</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>697</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.NoUncontrolledFailure</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>730</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>618</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.FailOp</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>1977</sourceline>
      <version>1</version>
      <description>
                  All conditions which may lead to service interruption of the FOAC during fail operational
                  mode shall be identified and documented. Only those service interruptions which cannot
                  be circumvented (e.g. a received message with wrong checksum must not be handed over
                  to the application) are allowed.
                </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.Lockstep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>693</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.E2ERx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>712</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SecuredPduRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>719</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.VerifyMAC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>720</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>619</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.SafetyOS</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>2011</sourceline>
      <version>1</version>
      <description>
                  The safety operating system, which is executed on all partitions of the system, has to be
                  developed according to ASIL-D level. All service interruptions caused by the safety
                  operating system have to be identified and documented.
                </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.TaskExecution</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>700</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.WriteProtect</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>702</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.WriteProtectPeripherals</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>703</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SeparateMem</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>701</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.EcuStateTransitions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>726</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.RestrictedShutdown</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>731</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>620</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.WriteProtect</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_context_view.xml</sourcefile>
      <sourceline>2052</sourceline>
      <version>1</version>
      <description>
                  Only ASIL-D and fail operational conformant software is allowed to write to critical
                  hardware resources. These are resources (i.e. hardware registers) providing the
                  ability to terminate services which are needed to provide fail operational behavior.
                </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.WriteProtectPeripherals</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>703</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.EcuStateTransitions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>726</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>621</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="Timing Errors">
    <specobject>
      <id>EB_FailOP.Arch.TimingError.ProtectionHook.NonFO</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_error_management.xml</sourcefile>
      <sourceline>169</sourceline>
      <version>1</version>
      <description>
              If the ProtectionHook is called with the code E_OS_PROTECTION_TIME and
              referring to a non fail operational task, the protection hook should terminate
              all non fail operational partitions.
            </description>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.TimingError.ProtectionHook.NonFO</srcid><srcstatus/><internalId>492</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>622</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.TimingError.ProtectionHook.FO</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_error_management.xml</sourcefile>
      <sourceline>184</sourceline>
      <version>1</version>
      <description>
              If the ProtectionHook is called with the code E_OS_PROTECTION_TIME and
              referring to a fail operational task, the protection hook should either reset
              the MCU or terminate all non fail operational partitions and continue the
              interrupted task.
            </description>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.TimingError.ProtectionHook.FO</srcid><srcstatus/><internalId>493</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>623</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.TimingError.ErrorHook.NonFO</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_error_management.xml</sourcefile>
      <sourceline>200</sourceline>
      <version>1</version>
      <description>
              If the ErrorHook is called with the code E_OS_LIMIT and
              referring to a non fail operational task, the error hook should terminate
              all non fail operational partitions.
            </description>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.TimingError.ErrorHook.NonFO</srcid><srcstatus/><internalId>494</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>624</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.TimingError.ErrorHook.FO</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_error_management.xml</sourcefile>
      <sourceline>215</sourceline>
      <version>1</version>
      <description>
              If the ErrorHook is called with the code E_OS_LIMIT and
              referring to a fail operational task, the error hook should either reset
              the MCU or terminate all non fail operational partitions.
            </description>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.TimingError.ErrorHook.FO</srcid><srcstatus/><internalId>495</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>625</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="Deployment requirements">
    <specobject>
      <id>EB_FailOP.Arch.Deploy.FOPartition</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_physical_view.xml</sourcefile>
      <sourceline>280</sourceline>
      <version>1</version>
      <description>
                  Any fail operational AutoCore project shall contain at least one fail
                  operational partition.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.General.FOPartition</srcid><srcstatus/><internalId>444</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>626</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.Deploy.FOPartition.LockStep</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_physical_view.xml</sourcefile>
      <sourceline>295</sourceline>
      <version>1</version>
      <description>
                  All fail operational partitions should be allocated to lockstep cores of the
                  MCU.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.General.FOPartition.LockStep</srcid><srcstatus/><internalId>448</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>627</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.Deploy.NonFOCore</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_physical_view.xml</sourcefile>
      <sourceline>310</sourceline>
      <version>1</version>
      <description>
                  Any fail operational AutoCore project shall reserve at least one core for
                  non fail operational software.
                </description>
      <comment>
                  The ACG may need a core which supports the 'CtrSub' subsystem, which implements
                  counters, alarms, and the standard scheduler. Since the CtrSub subsystem is incompatible
                  with fail operational partitions, we need at least one non fail operational only core.
                </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>628</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.Deploy.CtrSubRestrictions</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_physical_view.xml</sourcefile>
      <sourceline>330</sourceline>
      <version>1</version>
      <description>
                  All tasks which are executed on cores which contain at least one fail operational partition
                  shall not use counters, alarms, or the standard scheduler. This is valid even for non fail
                  operational tasks.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>629</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.Deploy.ACGAllocation</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_physical_view.xml</sourcefile>
      <sourceline>346</sourceline>
      <version>1</version>
      <description>
                  The ACG and associated MCAL drivers shall be allocated to a core which does not
                  contain fail operational partitions.
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>630</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="FOAC modules">
    <specobject>
      <id>EB_FailOP.Arch.Module.FOCom</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>192</sourceline>
      <version>1</version>
      <description>
                There shall be a FOAC module FOCom responsible for generation and verification of
                SecOC protocol information for secured PDUs.
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_Init</srcid><srcstatus>source not covered.</srcstatus><internalId>635</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_DeInit</srcid><srcstatus>source not covered.</srcstatus><internalId>636</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_GetVersionInfo</srcid><srcstatus>source not covered.</srcstatus><internalId>637</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SeparateComPath</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>707</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SecuredPduTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>718</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SecuredPduRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>719</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.PreventCANOverload</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>696</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>631</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.Module.FOCan</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>225</sourceline>
      <version>1</version>
      <description>
                There shall be a FOAC module FOCan responsible for transmission and reception of
                I-PDUs over CAN busses.
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_Init</srcid><srcstatus>source not covered.</srcstatus><internalId>649</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_DeInit</srcid><srcstatus>source not covered.</srcstatus><internalId>650</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_GetVersionInfo</srcid><srcstatus>source not covered.</srcstatus><internalId>651</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>632</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.Module.FOCrypt</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>246</sourceline>
      <version>1</version>
      <description>
                There shall be a FOAC module FOCrypto responsible for the calculation of SecOC authenticators.
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.API.FOCrypto_GetVersionInfo</srcid><srcstatus>source not covered.</srcstatus><internalId>664</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SipHash</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>717</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.GenerateMAC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>716</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.VerifyMAC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>720</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>633</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.Module.FOMM</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>274</sourceline>
      <version>1</version>
      <description>
                There shall be FOAC module FOMM responsible for transitions between the fail operational
                modes and for providing proxy functions for accessing critical hardware resources by
                non fail operational components.
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_Init</srcid><srcstatus>source not covered.</srcstatus><internalId>666</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_DeInit</srcid><srcstatus>source not covered.</srcstatus><internalId>667</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_GetVersionInfo</srcid><srcstatus>source not covered.</srcstatus><internalId>668</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.WriteProtectPeripherals</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>634</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="FOCom API">
    <specobject>
      <id>EB_FailOP.Arch.API.FOCom_Init</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>926</sourceline>
      <version>1</version>
      <description>
                  &lt;variablelist&gt;
                    &lt;title&gt;FOCom_Init() API function&lt;/title&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Purpose&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Initial set-up of internal data structures of the module.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Allocation&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Fail operational partition.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Mode&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Normal.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Signature&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          &lt;programlisting&gt;void FOCom_Init
(
  const FOCom_ConfigType* config
)&lt;/programlisting&gt;
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                  &lt;/variablelist&gt;
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.Module.FOCom</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>631</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>635</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCom_DeInit</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>983</sourceline>
      <version>1</version>
      <description>
                  &lt;variablelist&gt;
                    &lt;title&gt;FOCom_DeInit() API function&lt;/title&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Purpose&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          This function puts the module back into an uninitialized state.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Allocation&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Fail operational partition.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Mode&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Normal.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Signature&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          &lt;programlisting&gt;void FOCom_DeInit()&lt;/programlisting&gt;
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                  &lt;/variablelist&gt;
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.Module.FOCom</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>631</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>636</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCom_GetVersionInfo</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>1037</sourceline>
      <version>1</version>
      <description>
                  &lt;variablelist&gt;
                    &lt;title&gt;FOCom_GetVersionInfo() API function&lt;/title&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Purpose&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Returns the version information of this module.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Allocation&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Any partition.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Mode&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Normal.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Signature&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          &lt;programlisting&gt;void FOCom_GetVersionInfo
(
  Std_VersionInfoType* versionInfo
)&lt;/programlisting&gt;
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                  &lt;/variablelist&gt;
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.Module.FOCom</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>631</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>637</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCom_Satellite_InstallSecOCKey</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>1094</sourceline>
      <version>1</version>
      <description>
                  &lt;variablelist&gt;
                    &lt;title&gt;FOCom_Satellite_InstallSecOCKey() API function&lt;/title&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Purpose&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Hands over the SecOC secure key from the non fail operational to the fail operational
                          partition.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Implementation&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;itemizedlist&gt;
                          &lt;listitem&gt;
                            &lt;para&gt;
                              Get the SecOC secure key out of the CSM module (for this purpose, it shall be defined
                              as readable there).
                            &lt;/para&gt;
                          &lt;/listitem&gt;
                          &lt;listitem&gt;
                            &lt;para&gt;
                              Write the key to a memory location within the satellite's data area.
                              Note: we don't provide the key as parameter to the client/server call since then we
                              have no control about the number of copies which are made from the key.
                            &lt;/para&gt;
                          &lt;/listitem&gt;
                          &lt;listitem&gt;
                            &lt;para&gt;
                              Make an SchM client/server call to the function &lt;code&gt;FOCom_ReceiveSecOCKey&lt;/code&gt; with
                              no arguments.
                            &lt;/para&gt;
                          &lt;/listitem&gt;
                          &lt;listitem&gt;
                            &lt;para&gt;
                              &lt;code&gt;FOCom_ReceiveSecOCKey&lt;/code&gt; copies the key from the (known) satellite's data area
                              to a data area of the FOCom and returns.
                            &lt;/para&gt;
                          &lt;/listitem&gt;
                          &lt;listitem&gt;
                            &lt;para&gt;
                              On return from the client/server call the function shall overwrite the SecOC secure key
                              with arbitrary data in order to make it more difficult for an attacker to get the key.
                              Note: As long as there is a 'catch-all read-only partition' this will not help too much.
                            &lt;/para&gt;
                          &lt;/listitem&gt;
                        &lt;/itemizedlist&gt;

                        &lt;para&gt;
                          This function shall be executed after both SchM and CSM are
                          fully initialized and before FOCom starts to transmit/receive data.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Allocation&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Non fail operational partition.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Mode&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Normal.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Signature&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          &lt;programlisting&gt;void FOCom_Satellite_InstallSecOCKey
(
)&lt;/programlisting&gt;
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                  &lt;/variablelist&gt;
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.GetSecurekey</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>715</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.Security.PSK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>732</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>638</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCom_ReceiveSecOCKey</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>1199</sourceline>
      <version>1</version>
      <description>
                  &lt;variablelist&gt;
                    &lt;title&gt;FOCom_ReceiveSecOCKey() API function&lt;/title&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Purpose&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Copy the SecOC secure key from the satellite's data area to your own data area.
                          May be called only in the context of a SchM client/server call from the satellite.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Allocation&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Fail operational partition.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Mode&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Normal.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Signature&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          &lt;programlisting&gt;void FOCom_ReceiveSecOCKey
(
)&lt;/programlisting&gt;
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                  &lt;/variablelist&gt;
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.GetSecurekey</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>715</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.Security.PSK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>732</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>639</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCom_Satellite_MainFunction</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>1260</sourceline>
      <version>1</version>
      <description>
                  &lt;variablelist&gt;
                    &lt;title&gt;FOCom_Satellite_MainFunction() API function&lt;/title&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Purpose&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          This function shall inquire the SOK-FM module for all current freshness values and, if
                          changed, transfers it to the FOCom. To keep latencies of the freshness values short, it
                          should be scheduled immediately after each invocation of &lt;code&gt;SokFm_MainFunction()&lt;/code&gt;.
                        &lt;/para&gt;
                        &lt;para&gt;
                          If in fail operational mode, the function shall do nothing.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Implementation&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Inquire the current freshness values by calling &lt;code&gt;SecOC_GetTxFreshness()&lt;/code&gt; for
                          each used freshness value ID. If
                          a value has changed since the last invocation, send the new value to the function
                          &lt;code&gt;FOCom_ReceiveFreshnessValue()&lt;/code&gt; via SchM sender/receiver communication.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Allocation&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Non fail operational partition.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Mode&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Normal.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Signature&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          &lt;programlisting&gt;void FOCom_Satellite_MainFunction
(
)&lt;/programlisting&gt;
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                  &lt;/variablelist&gt;
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.GetInitFV</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>714</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>640</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCom_ReceiveFreshnessValue</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>1332</sourceline>
      <version>1</version>
      <description>
                  &lt;variablelist&gt;
                    &lt;title&gt;FOCom_ReceiveFreshnessValue() API function&lt;/title&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Purpose&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Copy the received freshness value (8 bytes) to your own data area.
                          May be called only in the context of a SchM sender/receiver call from its satellite.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Allocation&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Fail operational partition.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Mode&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Normal.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Signature&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          &lt;programlisting&gt;void FOCom_ReceiveFreshnessValue
(
  uint16 FreshnessValueID,
  const uint8 *FreshnessValue
)&lt;/programlisting&gt;
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                  &lt;/variablelist&gt;
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.GetInitFV</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>714</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>641</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCom_IsFreshnessValueOk</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>1391</sourceline>
      <version>1</version>
      <description>
                  &lt;variablelist&gt;
                    &lt;title&gt;FOCom_IsFreshnessValueOk() API function&lt;/title&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Purpose&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Tells the caller (usually FOMM) if the freshness value calculation for all used
                          freshness values works as expected.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Allocation&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Fail operational partition.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Mode&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          All.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Signature&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          &lt;programlisting&gt;Std_ReturnType FOCom_IsFreshnessValueOk
(
)&lt;/programlisting&gt;
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                  &lt;/variablelist&gt;
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>642</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="FOCom API">
    <specobject>
      <id>EB_FailOP.Arch.API.FOCom_Transmit</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>1455</sourceline>
      <version>1</version>
      <description>
                  &lt;variablelist&gt;
                    &lt;title&gt;FOCom_Transmit() API function&lt;/title&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Purpose&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Transmit an authentic I-PDU on the network associated with this I-PDU.
                          If configured, SecOC protocol information is added and the I-PDU is then handed over
                          to the FOCan module.
                        &lt;/para&gt;
                        &lt;para&gt;
                          The handed over buffer shall be large enough that it can store also the information
                          added by the SecOC protocol.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Allocation&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Fail operational partition.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Mode&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          All.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Signature&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          &lt;programlisting&gt;Std_ReturnType FOCom_Transmit
(
  PduIdType PduId,
  uint8 *BufferPtr,
  uint16 BufferSize
)&lt;/programlisting&gt;
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                  &lt;/variablelist&gt;
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.E2ETx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>711</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.GetTxData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>713</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.Transformer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>705</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SecuredPduTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>718</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.GenerateMAC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>716</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>643</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCom_CheckConsistency</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>1540</sourceline>
      <version>1</version>
      <description>
                  &lt;variablelist&gt;
                    &lt;title&gt;FOCom_CheckConsistency() API function&lt;/title&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Optional function&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          This function may be omitted if it would be an empty function
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Purpose&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Check consistency of the used peripheral registers (if any) and of additionally
                          mapped memory regions (if any), which may be accessed by non ASIL-D tasks too.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Allocation&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Fail operational partition.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Mode&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Normal.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Signature&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          &lt;programlisting&gt;Std_ReturnType FOCom_CheckConsistency
(
  void
)&lt;/programlisting&gt;
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                  &lt;/variablelist&gt;
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>644</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="FOCom API">
    <specobject>
      <id>EB_FailOP.Arch.API.FOCom_FOCanRxIndication</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>1613</sourceline>
      <version>1</version>
      <description>
                  &lt;variablelist&gt;
                    &lt;title&gt;FOCom_FOCanRxIndication() API function&lt;/title&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Purpose&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Handle a received I-PDU, verify its correctness and hand it over to the Safety Rte.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Allocation&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Fail operational partition.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Mode&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          All.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Signature&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          &lt;programlisting&gt;void FOCom_FOCanRxIndication
(
  PduIdType PduId,
  uint8 *BufferPtr,
  uint16 BufferSize
)&lt;/programlisting&gt;
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                  &lt;/variablelist&gt;
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.E2ERx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>712</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.Transformer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>705</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SecuredPduRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>719</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.VerifyMAC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>720</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>645</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCom_FOCanTxConfirmation</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>1688</sourceline>
      <version>1</version>
      <description>
                  &lt;variablelist&gt;
                    &lt;title&gt;FOCom_FOCanTxConfirmation() API function&lt;/title&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Purpose&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Report result of transmission of last instance of specified I-PDU and hand result
                          over to the Safety Rte.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Allocation&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Fail operational partition.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Mode&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          All.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Signature&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          &lt;programlisting&gt;void FOCom_FOCanTxConfirmation
(
  PduIdType PduId,
  Std_ReturnType Result /* E_OK .. I-PDU was transmitted, /*
                        /* else transmission failed */
)&lt;/programlisting&gt;
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                  &lt;/variablelist&gt;
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>646</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="FOCom API">
    <specobject>
      <id>EB_FailOP.Arch.API.FOComUser_CbkRxIndication</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>1759</sourceline>
      <version>1</version>
      <description>
                  &lt;variablelist&gt;
                    &lt;title&gt;&amp;lt;FOComUser_CbkRxIndication&amp;gt;() callback function&lt;/title&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Purpose&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Hand over a received and verified I-PDU to the application software component via the RTE.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Allocation&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Fail operational partition.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Mode&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          All.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Signature&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          &lt;programlisting&gt;void &amp;lt;FOComUser_CbkRxIndication&amp;gt;
(
  PduIdType PduId,
  uint8 *BufferPtr,
  uint16 BufferSize
)&lt;/programlisting&gt;
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                  &lt;/variablelist&gt;
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.ProvideRxData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>721</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>647</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOComUser_CbkTxConfirmation</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>1822</sourceline>
      <version>1</version>
      <description>
                  &lt;variablelist&gt;
                    &lt;title&gt;&amp;lt;FOComUser_CbkTxConfirmation&amp;gt;() callback function&lt;/title&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Purpose&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Inform an application software component about transmission result of the last
                          transmitted I-PDU instance with the given Id.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Allocation&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          Fail operational partition.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Mode&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          All.
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                    &lt;varlistentry&gt;
                      &lt;term&gt;Signature&lt;/term&gt;
                      &lt;listitem&gt;
                        &lt;para&gt;
                          &lt;programlisting&gt;void &amp;lt;FOComUser_CbkTxConfirmation&amp;gt;
(
  PduIdType PduId,
  Std_ReturnType Result /* E_OK .. I-PDU was transmitted, */
                        /* else transmission failed */
)&lt;/programlisting&gt;
                        &lt;/para&gt;
                      &lt;/listitem&gt;
                    &lt;/varlistentry&gt;
                  &lt;/variablelist&gt;
                </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>648</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="FOCan API">
    <specobject>
      <id>EB_FailOP.Arch.API.FOCan_Init</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>1897</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOCan_Init() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Initial set-up of internal data structures of the module.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOCan_Init
(
  const FOCan_ConfigType* config
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.Module.FOCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>632</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>649</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCan_DeInit</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>1954</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOCan_DeInit() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        This function puts the module back into an uninitialized state.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOCan_DeInit()&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.Module.FOCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>632</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>650</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCan_GetVersionInfo</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2008</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOCan_GetVersionInfo() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Returns the version information of this module.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Any partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOCan_GetVersionInfo
(
  Std_VersionInfoType* versionInfo
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.Module.FOCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>632</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>651</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCan_IsModuleInitComplete</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2065</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOCan_IsModuleInitComplete() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Check if FOCan has finished the initialisation of all CAN modules. It returns E_OK if
                        initialization has completed. In this case, all CAN drivers on other partitions which
                        use CAN interfaces of these modules may finish their initialisation procedures.
                      &lt;/para&gt;
                      &lt;para&gt;
                        This function may be called on any partition. In order for this to work, it shall not
                        write any data of the FOCan module, and the accessed state has to be stored into an
                        atomic variable.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Any partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;Std_ReturnType FOCan_IsModuleInitComplete
(
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SeparateComPath</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>707</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.ProtectCANCtrl</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>695</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>652</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCan_Satellite_SetControllerMode</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2132</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOCan_Satellite_SetControllerMode() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Tell the FOCan driver to set the mode of its own controller to the given one.
                        This function is called on the satellite, usually by a corresponding BswM rule
                        (like &lt;code&gt;BswM_Rule_ComM_XXX&lt;/code&gt;) which turns on/off communication on the
                        respective CAN network.
                      &lt;/para&gt;
                      &lt;para&gt;
                        If in fail operational mode, the function shall do nothing.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Non fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Implementation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Look up the FOCan controller index for the given companion CAN controller index
                        and make a synchronous client/server call to the function &lt;code&gt;FOCan_SetControllerMode()&lt;/code&gt;
                        telling it to perform the intended change.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;Std_ReturnType FOCan_Satellite_SetControllerMode
(
  uint8 Ctrld; /* Id of companion CAN controller */
               /* on non fail operational partition */
  Can_ControllerStateType CtrlMode;
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SeparateComPath</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>707</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.ProtectCANCtrl</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>695</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>653</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCan_SetControllerMode</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2211</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOCan_SetControllerMode() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Set the mode of the given CAN controller to the given value. The function is usually
                        called in the context of a client/server call from its satellite.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;Std_ReturnType FOCan_SetControllerMode
(
  uint8 CtrlId; /* Id of CAN controller */
  Can_ControllerStateType CtrlMode;
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SeparateComPath</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>707</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.ProtectCANCtrl</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>695</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>654</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCan_Satellite_SetPduMode</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2274</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOCan_Satellite_SetPduMode() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Tell the FOCan driver to set the mode of all PDUs maintained by the given
                        CAN controller to the given mode.
                        This function is called on the satellite.
                      &lt;/para&gt;
                      &lt;para&gt;
                        If in fail operational mode, the function shall do nothing.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Non fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Implementation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Look up the FOCan controller index for the given companion CAN controller index
                        and make a synchronous client/server call to the function &lt;code&gt;FOCan_SetPduMode()&lt;/code&gt;
                        telling it to perform the intended change.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;Std_ReturnType FOCan_Satellite_SetPduMode
(
  uint8 Ctrld; /* Id of companion CAN controller */
               /* on non fail operational partition */
  FOCan_PduModeType PduModeRequest
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SeparateComPath</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>707</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.ProtectCANCtrl</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>695</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>655</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCan_SetPduMode</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2352</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOCan_SetPduMode() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Set the mode of all PDUs maintained by the given CAN controller to the given mode.
                        The function is usually called in the context of a client/server call from its satellite.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;Std_ReturnType FOCan_SetPduMode
(
  uint8 CtrlId; /* Id of CAN controller */
  FOCan_PduModeType PduModeRequest
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SeparateComPath</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>707</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.ProtectCANCtrl</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>695</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>656</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCan_Transmit</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2415</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOCan_Transmit() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Transmit the given I-PDU on the CAN interface associated with the I-PDU.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        All.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                          &lt;programlisting&gt;Std_ReturnType FOCan_Transmit
(
  PduIdType TxPduId,
  uint8 *BufferPtr,
  uint16 BufferSize
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>657</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCan_GetControllerMode</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2474</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOCan_GetControllerMode() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Get the mode of the given CAN controller.
                      &lt;/para&gt;
                      &lt;para&gt;
                        This function may be called on any partition. In order for this to work, it shall not
                        write any data of the FOCan module, and the accessed mode has to be stored into an
                        atomic variable.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Any partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        All.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOCan_GetControllerMode
(
  uint8 CtrlId,
  Can_ControllerStateType *CtrlMode
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SeparateComPath</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>707</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>658</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCan_GetPduMode</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2537</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOCan_GetPduMode() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Get the Pdu mode for the PDUs controlled by the given CAN controller.
                      &lt;/para&gt;
                      &lt;para&gt;
                        This function may be called on any partition. In order for this to work, it shall not
                        write any data of the FOCan module, and the accessed mode has to be stored into an
                        atomic variable.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Any partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        All.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOCan_GetPduMode
(
  uint8 CtrlId,
  FOCan_PduModeType *PduMode
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SeparateComPath</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>707</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>659</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCan_MainFunction_Write</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2600</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOCan_MainFunction_Write() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Check if outstanding transmissions of CAN frames have finished and generate
                        a TxConfirmation if requested.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOCan_MainFunction_Write
                        (
                        )&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>660</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCan_MainFunction_Read</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2649</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOCan_MainFunction_Read() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Check if any CAN frames have been received and generate RxIndications for them.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        All.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOCan_MainFunction_Read
                        (
                        )&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ComCan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>709</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>661</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCan_CheckConsistency</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2705</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOCan_CheckConsistency() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Optional function&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        This function may be omitted if it would be an empty function
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Check consistency of the used peripheral registers (if any) and of additionally
                        mapped memory regions (if any), which may be accessed by non ASIL-D tasks too.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;Std_ReturnType FOCan_CheckConsistency
(
  void
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>662</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="Integration requirements">
    <specobject>
      <id>EB_FailOP.Arch.Integration.FOCan_SetControllerMode</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2773</sourceline>
      <version>1</version>
      <description>
                    FOCan_Satellite_SetControllerMode shall be called on a QM partition, usually within
                    the context of a BswM rule, if the state of the network associated with the FOCan controller
                    changes.
                  </description>
      <needscoverage>
        <needscov><needsobj>safetymanual</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOAC.SM.FOCan_SetControllerMode</srcid><srcstatus/><internalId>511</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SeparateComPath</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror/><internalId>707</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>covered</covstatus><internalId>663</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="FOCrypto API">
    <specobject>
      <id>EB_FailOP.Arch.API.FOCrypto_GetVersionInfo</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2801</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOCrypto_GetVersionInfo() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Returns the version information of this module.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOCrypto_GetVersionInfo
(
  Std_VersionInfoType* versionInfo
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.Module.FOCrypt</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>633</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>664</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOCrypto_CalcMAC</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2858</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOCrypto_CalcMAC() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Calculates the MAC (Message Authentication Code) for the given data block with the given key.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        All.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;#define FOCRYPT_ALGO_SIPHASH24 0
void FOCrypto_CalcMAC
(
  uint8 algorithm,
  uint8 *dataPtr,
  uint32 dataSize,
  uint8 *keyPtr,
  uint32 keySize,
  uint8 *signaturePtr, /* output */
  uint32 signatureSize /* if shorter than MAC size, write only */
                       /* the lower bytes up to this size */
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.SipHash</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>717</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.GenerateMAC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>716</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.VerifyMAC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>720</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>665</internalId></specobject>
  </specobjects>
    <specobjects doctype="swad" title="FOMM API">
    <specobject>
      <id>EB_FailOP.Arch.API.FOMM_Init</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2938</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOMM_Init() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Initial set-up of internal data structures of the module.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOMM_Init
(
  const FOMM_ConfigType* config
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.Module.FOMM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>634</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>666</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOMM_DeInit</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>2995</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOMM_DeInit() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        This function puts the module back into an uninitialized state.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOMM_DeInit()&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.Module.FOMM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>634</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>667</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOMM_GetVersionInfo</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>3049</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOMM_GetVersionInfo() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Returns the version information of this module.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Any partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOMM_GetVersionInfo
(
  Std_VersionInfoType* versionInfo
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.Module.FOMM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>634</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>668</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOMM_RequestMode</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>3106</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOMM_RequestMode() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Request switching of the fail operational mode to the given mode.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        All.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;#define FOMM_MODE_NORMAL 0
#define FOMM_MODE_FAILOP_SWC_EXEC_PREPARE 1
#define FOMM_MODE_FAILOP_SWC_EXEC 2
#define FOMM_MODE_FAILOP_COMM_PREPARE 3
#define FOMM_MODE_FAILOP_COMM 4
#define FOMM_MODE_FAILOP_COMM_ONLY 5 /* only for FOMM_GetMode() */
#define FOMM_MODE_FAILOP_SWC_EXEC_ONLY 6 /* only for FOMM_GetMode() */
Std_ReturnType FOMM_RequestMode
(
  uint8 Mode
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Return code&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        In case the mode switch cannot be performed, the return code shall indicate
                        if the error is transient or permanent.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SWCSetMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>723</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>669</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOMM_GetMode</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>3183</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOMM_GetMode() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Get the current fail operational mode.
                      &lt;/para&gt;
                      &lt;para&gt;
                        This function may be called on any partition. In order for this to work, it shall not
                        write any data of the FOMM module, and the mode has to be stored into an atomic variable.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Any partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        All.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOMM_GetMode
(
  uint8 * Mode
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SWCGetMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>724</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.BSWGetMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>725</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>670</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOMM_PartitionFailedNotification</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>3252</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOMM_PartitionFailedNotification() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Called by TimE callback &lt;code&gt;WdgMSatelliteAlivenessCallout&lt;/code&gt; in case a failure of
                        any TimE satellite was detected (thus assuming a core has failed).
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        All.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOMM_PartitionFailedNotification
(
  void
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.GuaranteedCpuTime</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>697</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>671</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOMM_ShutdownAllCores</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>3310</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOMM_ShutdownAllCores() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        De-initialize FOCan and FOCom and shutdown the whole ECU.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        All.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOMM_ShutdownAllCores
(
  void
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.RestrictedShutdown</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>731</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Req.SWCSetMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>723</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>672</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOMM_CheckConsistency</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>3371</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOMM_CheckConsistency() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Optional function&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        This function may be omitted if it would be an empty function
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Check consistency of the used peripheral registers (if any) and of additionally
                        mapped memory regions (if any), which may be accessed by non ASIL-D tasks too.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;Std_ReturnType FOMM_CheckConsistency
(
  void
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Req.ModeManagementSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>722</internalId></provcov>
      </providescoverage>
    <violations><ruleid>ERR.swad.fulfilledby.doctypes</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>673</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOMM_Proxy_Mcu_SetMode</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>3437</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOMM_Proxy_Mcu_SetMode() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Proxy for the &lt;code&gt;Mcu_SetMode()&lt;/code&gt; function. It performs a client-/server call
                        to the FOMM_Server task on a fail operational core which then performs the
                        call to the real &lt;code&gt;Mcu_SetMode()&lt;/code&gt; function.
                      &lt;/para&gt;
                      &lt;para&gt;
                        In environments where it is possible to rename the function &lt;code&gt;Mcu_SetMode()&lt;/code&gt;
                        to &lt;code&gt;Mcu_SetMode_Real()&lt;/code&gt;, this function shall be also exported with the
                        alias name &lt;code&gt;Mcu_SetMode()&lt;/code&gt; and the server component shall call the function
                        &lt;code&gt;Mcu_SetMode_Real()&lt;/code&gt;. Thus there need not be any change in modules calling
                        this function.
                      &lt;/para&gt;
                      &lt;para&gt;
                        In fail operational mode, the function shall do nothing but report a runtime
                        error.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Any partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOMM_Proxy_Mcu_SetMode
(
  Mcu_ModeType McuMode
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOMM.EB.ProxyMcuSetMode.APISignature</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>174</internalId></ffbObj>
      <containerCovstatus>covered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.Proxy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>512</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.MCUProxy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>514</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.MCUProxy.Functions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>517</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.MCUProxy.Remap_Functions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>516</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>674</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOMM_Server_Mcu_SetMode</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>3523</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOMM_Server_Mcu_SetMode() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Server function to call from &lt;code&gt;FOMM_Proxy_Mcu_SetMode()&lt;/code&gt;. It calls
                        &lt;code&gt;Mcu_SetMode()&lt;/code&gt; locally with the given arguments.
                        It may only be executed in the context of a client-/server call.
                      &lt;/para&gt;
                      &lt;para&gt;
                        This function shall be executed within the FOMM server partition, this is not
                        the 'native' partition of the FOMM and thus has no access to the static module
                        data of the FOMM. That is, this function should avoid writing to static module
                        data of the FOMM (otherwise a separate memory region has to be used).
                      &lt;/para&gt;
                      &lt;para&gt;
                        In fail operational mode, the function shall do nothing but report a runtime
                        error.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational core, non fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOMM_Server_Mcu_SetMode
(
  Mcu_ModeType McuMode
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOMM.EB.ServerMcuSetMode.APISignature</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>175</internalId></ffbObj>
      <containerCovstatus>covered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.Proxy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>512</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.MemRegion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>513</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.MCUProxy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>514</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.MCUProxy.Functions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>517</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>675</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOMM_Proxy_Mcu_PerformReset</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>3608</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOMM_Proxy_Mcu_PerformReset() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Proxy for the &lt;code&gt;Mcu_PerformReset()&lt;/code&gt; function. It performs a client-/server call
                        to the FOMM_Server task on a fail operational core which then performs the
                        call to the real &lt;code&gt;Mcu_PerformReset()&lt;/code&gt; function.
                      &lt;/para&gt;
                      &lt;para&gt;
                        In environments where it is possible to rename the function &lt;code&gt;Mcu_PerformReset()&lt;/code&gt;
                        to &lt;code&gt;Mcu_PerformReset_Real()&lt;/code&gt;, this function shall be also exported with the
                        alias name &lt;code&gt;Mcu_PerformReset()&lt;/code&gt; and the server component shall call the function
                        &lt;code&gt;Mcu_PerformReset_Real()&lt;/code&gt;. Thus there need not be any change in modules calling
                        this function.
                      &lt;/para&gt;
                      &lt;para&gt;
                        In fail operational mode, the function shall do nothing but report a runtime
                        error.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Any partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOMM_Proxy_Mcu_PerformReset
(
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOMM.EB.ProxyMcuPerformReset.APISignature</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>176</internalId></ffbObj>
      <containerCovstatus>covered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.Proxy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>512</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.MCUProxy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>514</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.MCUProxy.Functions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>517</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.MCUProxy.Remap_Functions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>516</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>676</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOMM_Server_Mcu_PerformReset</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>3693</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOMM_Server_Mcu_PerformReset() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Server function to call from &lt;code&gt;FOMM_Proxy_Mcu_PerformReset()&lt;/code&gt;. It calls
                        &lt;code&gt;Mcu_PerformReset()&lt;/code&gt; locally.
                        It may only be executed in the context of a client-/server call.
                      &lt;/para&gt;
                      &lt;para&gt;
                        This function shall be executed within the FOMM server partition, this is not
                        the 'native' partition of the FOMM and thus has no access to the static module
                        data of the FOMM. That is, this function should avoid writing to static module
                        data of the FOMM (otherwise a separate memory region has to be used).
                      &lt;/para&gt;
                      &lt;para&gt;
                        In fail operational mode, the function shall do nothing but report a runtime
                        error.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational core, non fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOMM_Server_Mcu_PerformReset
(
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOMM.EB.ServerMcuPerformReset.APISignature</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>177</internalId></ffbObj>
      <containerCovstatus>covered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.Proxy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>512</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.MemRegion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>513</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.MCUProxy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>514</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.MCUProxy.Functions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>517</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>677</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOMM_Proxy_Dio_WriteChannel</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>3777</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOMM_Proxy_Dio_WriteChannel() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Proxy for the &lt;code&gt;Dio_WriteChannel()&lt;/code&gt; function. It performs a client-/server call
                        to the FOMM_Server task on a fail operational core which then performs the
                        call to the real &lt;code&gt;Dio_WriteChannel()&lt;/code&gt; function.
                      &lt;/para&gt;
                      &lt;para&gt;
                        In fail operational mode, the function shall do nothing but report a runtime
                        error.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Any partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOMM_Proxy_Dio_WriteChannel
(
  Dio_ChannelType ChannelId,
  Dio_LevelType Level
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOMM.EB.ProxyDioWriteChannel.APISignature</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>178</internalId></ffbObj>
      <containerCovstatus>covered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.Proxy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>512</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.DIOProxy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>519</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.DIOProxy.Functions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>520</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>678</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Arch.API.FOMM_Server_Dio_WriteChannel</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwAD/basic_software/sec_FOAC_structural_view.xml</sourcefile>
      <sourceline>3853</sourceline>
      <version>1</version>
      <description>
                &lt;variablelist&gt;
                  &lt;title&gt;FOMM_Server_Dio_WriteChannel() API function&lt;/title&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Purpose&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Server function to call from &lt;code&gt;FOMM_Proxy_Dio_WriteChannel()&lt;/code&gt;. It calls
                        &lt;code&gt;Dio_WriteChannel()&lt;/code&gt; locally with the given arguments.
                        It may only be executed in the context of a client-/server call.
                      &lt;/para&gt;
                      &lt;para&gt;
                        This function shall be executed within the FOMM server partition, this is not
                        the 'native' partition of the FOMM and thus has no access to the static module
                        data of the FOMM. That is, this function should avoid writing to static module
                        data of the FOMM (otherwise a separate memory region has to be used).
                      &lt;/para&gt;
                      &lt;para&gt;
                        In fail operational mode, the function shall do nothing but report a runtime
                        error.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Allocation&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Fail operational core, non fail operational partition.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Mode&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        Normal.
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                  &lt;varlistentry&gt;
                    &lt;term&gt;Signature&lt;/term&gt;
                    &lt;listitem&gt;
                      &lt;para&gt;
                        &lt;programlisting&gt;void FOMM_Server_Dio_WriteChannel
(
  Dio_ChannelType ChannelId,
  Dio_LevelType Level
)&lt;/programlisting&gt;
                      &lt;/para&gt;
                    &lt;/listitem&gt;
                  &lt;/varlistentry&gt;
                &lt;/variablelist&gt;
              </description>
      <safetyclass>ASIL-D</safetyclass>
      <fulfilledby>
        <ffbObj>
          <ffbId>FOMM.EB.ServerDioWriteChannel.APISignature</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>179</internalId></ffbObj>
      <containerCovstatus>covered</containerCovstatus></fulfilledby>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.Proxy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>512</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.MemRegion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>513</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.DIOProxy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>519</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Arch.FOMM.DIOProxy.Functions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swad</linkdestdoctype><linkerror/><internalId>520</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>679</internalId></specobject>
  </specobjects>
    <specobjects doctype="fea">
    <specobject>
      <id>EB_FailOP.Top.Execution</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>21</sourceline>
      <version>3</version>
      <priority>HIGH</priority>
      <description>As long as no random hardware faults occur the &amp;foac; shall provide
                    reliable execution of fail operational applications according to their timing
                    specifications.</description>
      <rationale>Highly automated driving (up SAE level 3) requires reliable execution as
                    there is no fallback system.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swrs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Fea.FFITimE</srcid><srcstatus>source not covered.</srcstatus><internalId>684</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Fea.FFIData</srcid><srcstatus>source not covered.</srcstatus><internalId>685</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Fea.Execution</srcid><srcstatus>source not covered.</srcstatus><internalId>686</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Fea.ContinuousService</srcid><srcstatus>source not covered.</srcstatus><internalId>689</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Fea.IndependentUpdate</srcid><srcstatus>source not covered.</srcstatus><internalId>690</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.fea.needscoverage.test</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>680</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Top.Silent</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>49</sourceline>
      <version>3</version>
      <priority>HIGH</priority>
      <description>TBD. The &amp;foac; shall not generate wrong outputs, even in case of
                    random hardware faults. </description>
      <rationale>Random HW faults must not result in wrong outputs (redundant channel is
                    supposed to provide output data in this case). </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;!-- Outputs which can be detected as being wrong at the receiver's side (e.g.
                    by a contained checksum) are not considered being wrong. --&gt;
                </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swrs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Fea.FailSilent.HW</srcid><srcstatus>source not covered.</srcstatus><internalId>687</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Fea.FailSilent.SW</srcid><srcstatus>source not covered.</srcstatus><internalId>688</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.fea.needscoverage.test</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>681</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Top.Com</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>80</sourceline>
      <version>3</version>
      <priority>HIGH</priority>
      <description>As long as no random hardware faults occur the &amp;foac; shall transfer
                    fail operational related data elements correctly and continuously over the fail
                    operational communication path. </description>
      <rationale> Highly automated driving (up SAE level 3) requires reliable execution as
                    there is no fallback system. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swrs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Fea.FFICom</srcid><srcstatus>source not covered.</srcstatus><internalId>683</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Fea.FFIData</srcid><srcstatus>source not covered.</srcstatus><internalId>685</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Fea.ContinuousService</srcid><srcstatus>source not covered.</srcstatus><internalId>689</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Fea.IndependentUpdate</srcid><srcstatus>source not covered.</srcstatus><internalId>690</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Fea.ComCan</srcid><srcstatus>source not covered.</srcstatus><internalId>691</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Fea.SecOC</srcid><srcstatus>source not covered.</srcstatus><internalId>692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations><ruleid>ERR.fea.needscoverage.test</ruleid></violations><oreqmViolations/><covstatus>uncovered</covstatus><internalId>682</internalId></specobject>
  </specobjects>
    <specobjects doctype="swrs">
    <specobject>
      <id>EB_FailOP.Fea.FFICom</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>113</sourceline>
      <version>2</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall provide freedom from interference of fail operational
                    components from any non fail operational components regarding exchange of
                    information. </description>
      <rationale>Interference to exchange of data elements between fail operational
                    components may result in critical service failure. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment> </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swrs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Req.ProtectCANTrcv</srcid><srcstatus>source not covered.</srcstatus><internalId>694</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.ProtectCANCtrl</srcid><srcstatus>source not covered.</srcstatus><internalId>695</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.PreventCANOverload</srcid><srcstatus>source not covered.</srcstatus><internalId>696</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.IntraECUCom</srcid><srcstatus>source not covered.</srcstatus><internalId>710</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.DetectInternalErrors</srcid><srcstatus>source not covered.</srcstatus><internalId>727</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Top.Com</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>fea</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>682</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>683</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Fea.FFITimE</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>146</sourceline>
      <version>2</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall provide freedom from interference of fail operational
                    components from any non fail operational components regarding time and
                    execution. </description>
      <rationale>Interference to execution of fail operational SW may result in critical
                    service failure. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swrs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Req.GuaranteedCpuTime</srcid><srcstatus>source not covered.</srcstatus><internalId>697</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.PreventExcessiveFailOpExec</srcid><srcstatus>source not covered.</srcstatus><internalId>698</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.NonBlockingCommunication</srcid><srcstatus>source not covered.</srcstatus><internalId>699</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.SeparateExecution</srcid><srcstatus>source not covered.</srcstatus><internalId>706</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.SeparateComPath</srcid><srcstatus>source not covered.</srcstatus><internalId>707</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.DetectInternalErrors</srcid><srcstatus>source not covered.</srcstatus><internalId>727</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Top.Execution</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>fea</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>680</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>684</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Fea.FFIData</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>179</sourceline>
      <version>2</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall provide spatial freedom from interference of fail
                    operational components from any non fail operational components regarding
                    memory. </description>
      <rationale> Prevention of overwriting of memory of fail operational components by
                    non fail operational components is a prerequisite of fail operational execution
                    and fail operational exchange of information. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swrs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Req.SeparateMem</srcid><srcstatus>source not covered.</srcstatus><internalId>701</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.WriteProtect</srcid><srcstatus>source not covered.</srcstatus><internalId>702</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.WriteProtectPeripherals</srcid><srcstatus>source not covered.</srcstatus><internalId>703</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.NonLockstepMemoryAccess</srcid><srcstatus>source not covered.</srcstatus><internalId>704</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.SeparateComPath</srcid><srcstatus>source not covered.</srcstatus><internalId>707</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.DetectInternalErrors</srcid><srcstatus>source not covered.</srcstatus><internalId>727</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Top.Execution</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>fea</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>680</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Top.Com</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>fea</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>682</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>685</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Fea.Execution</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>219</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>The &amp;foac; shall provide correct and continuous execution of software
                    components in absence of interference from other components.</description>
      <rationale>Prevention of unauthorized service interruption is required for fail
                    operational. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment> The phrase 'in absence of interference from other components' is present
                    in order to separate this requirement from the FFI requirements. This
                    requirement refers to the basic functionality of proper execution. </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swrs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Req.GuaranteedCpuTime</srcid><srcstatus>source not covered.</srcstatus><internalId>697</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.TaskExecution</srcid><srcstatus>source not covered.</srcstatus><internalId>700</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.SeparateExecution</srcid><srcstatus>source not covered.</srcstatus><internalId>706</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.RestrictedShutdown</srcid><srcstatus>source not covered.</srcstatus><internalId>731</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Top.Execution</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>fea</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>680</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>686</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Fea.FailSilent.HW</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>253</sourceline>
      <version>2</version>
      <priority>HIGH</priority>
      <description>TBD. The &amp;foac; shall produce either correct results or no results at
                    all, even in the presence of random hardware faults. </description>
      <rationale>There is always a residual probability that a random hardware failure
                    within fail operational components occur, and that the failure will not occur in
                    redundant components at the same point in time. In this case the fail
                    operational subsystem shall behave silent in order to allow the redundant
                    subsystem to take over operation (e.g. in case of a deadline violation). </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment> </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swrs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Req.Lockstep</srcid><srcstatus>source not covered.</srcstatus><internalId>693</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.E2ETx</srcid><srcstatus>source not covered.</srcstatus><internalId>711</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.E2ERx</srcid><srcstatus>source not covered.</srcstatus><internalId>712</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.DetectInternalErrors</srcid><srcstatus>source not covered.</srcstatus><internalId>727</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Top.Silent</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>fea</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>681</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>687</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Fea.FailSilent.SW</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>288</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>TBD. As long as the &amp;foac; is in control of the system the &amp;foac; shall
                    produce either correct results or no results at all, even in the presence of
                    software failures within fail operational components. </description>
      <rationale>There is always a residual probability that a software failure within
                    fail operational components occur, and that the failure will not occur in
                    redundant components at the same point in time. In this case the fail
                    operational subsystem shall behave silent in order to allow the redundant
                    subsystem to take over operation (e.g. in case of a deadline violation). </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment> If the system cannot guarantee to restore proper operation after the
                    failure, it shall shut down the ECU. </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swrs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Req.E2ETx</srcid><srcstatus>source not covered.</srcstatus><internalId>711</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.E2ERx</srcid><srcstatus>source not covered.</srcstatus><internalId>712</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.DetectInternalErrors</srcid><srcstatus>source not covered.</srcstatus><internalId>727</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.NoUncontrolledFailure</srcid><srcstatus>source not covered.</srcstatus><internalId>730</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Top.Silent</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>fea</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>681</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>688</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Fea.ContinuousService</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>325</sourceline>
      <version>2</version>
      <priority>HIGH</priority>
      <description> As long as in fail operational mode the &amp;foac; shall prevent access to
                    critical resources and activation of critical system services for non fail
                    operational SW. </description>
      <rationale>Continuous operation is not possible in case of service interruption. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swrs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Req.ModeManagementSM</srcid><srcstatus>source not covered.</srcstatus><internalId>722</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.SWCSetMode</srcid><srcstatus>source not covered.</srcstatus><internalId>723</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.SWCGetMode</srcid><srcstatus>source not covered.</srcstatus><internalId>724</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.BSWGetMode</srcid><srcstatus>source not covered.</srcstatus><internalId>725</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.EcuStateTransitions</srcid><srcstatus>source not covered.</srcstatus><internalId>726</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.RestrictedShutdown</srcid><srcstatus>source not covered.</srcstatus><internalId>731</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Top.Execution</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>fea</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>680</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Top.Com</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>fea</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>682</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>689</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Fea.IndependentUpdate</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>362</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>If only a change in the non fail operational basic software and its
                    configuration is needed then the &amp;foac; shall be able to update both the non
                    fail operational basic software and its configuration without changing the fail
                    operational basic software and its configuration.</description>
      <rationale> There is no need to re qualify the fail operational software in this
                    case. This highly reduces the efforts to change non fail operational relevant
                    functionality and thus contributes to the proper fulfillment of the basic top
                    level requirements. </rationale>
      <usecase>Update of non fail operational SW without changing the fail operational
                    SW.</usecase>
      <comment>There is no need to re-qualify the fail operational software for the case
                    if only the non fail operational is changed. </comment>
      <safetyclass>QM</safetyclass>
      <needscoverage>
        <needscov><needsobj>swrs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Req.SeparateBSWConfig</srcid><srcstatus>source not covered.</srcstatus><internalId>708</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Top.Execution</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>fea</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>680</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Top.Com</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>fea</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>682</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>690</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Fea.ComCan</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>403</sourceline>
      <version>2</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall provide fail operational communication of data
                    element exchange on the fail operational communication path on CAN. </description>
      <rationale> Fail operational communication is required to provide the service
                    correctly and continuously.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swrs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Req.ProtectCANTrcv</srcid><srcstatus>source not covered.</srcstatus><internalId>694</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.ProtectCANCtrl</srcid><srcstatus>source not covered.</srcstatus><internalId>695</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.PreventCANOverload</srcid><srcstatus>source not covered.</srcstatus><internalId>696</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.Transformer</srcid><srcstatus>source not covered.</srcstatus><internalId>705</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.ComCan</srcid><srcstatus>source not covered.</srcstatus><internalId>709</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.GetTxData</srcid><srcstatus>source not covered.</srcstatus><internalId>713</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.SecuredPduTx</srcid><srcstatus>source not covered.</srcstatus><internalId>718</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.SecuredPduRx</srcid><srcstatus>source not covered.</srcstatus><internalId>719</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.VerifyMAC</srcid><srcstatus>source not covered.</srcstatus><internalId>720</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.ProvideRxData</srcid><srcstatus>source not covered.</srcstatus><internalId>721</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Top.Com</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>fea</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>682</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>691</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Fea.SecOC</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>438</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall provide secure on board communication for message
                    authentication. </description>
      <rationale>Secure on board communication is state-of-the-art in cyber security
                    related automotive systems</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swrs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Req.GetInitFV</srcid><srcstatus>source not covered.</srcstatus><internalId>714</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.GetSecurekey</srcid><srcstatus>source not covered.</srcstatus><internalId>715</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.GenerateMAC</srcid><srcstatus>source not covered.</srcstatus><internalId>716</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.SipHash</srcid><srcstatus>source not covered.</srcstatus><internalId>717</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.SecuredPduTx</srcid><srcstatus>source not covered.</srcstatus><internalId>718</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.SecuredPduRx</srcid><srcstatus>source not covered.</srcstatus><internalId>719</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.VerifyMAC</srcid><srcstatus>source not covered.</srcstatus><internalId>720</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.Security.PSK</srcid><srcstatus>source not covered.</srcstatus><internalId>732</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Req.Security.SecOC</srcid><srcstatus>source not covered.</srcstatus><internalId>733</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Top.Com</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>fea</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>682</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>692</internalId></specobject>
  </specobjects>
    <specobjects doctype="swrs">
    <specobject>
      <id>EB_FailOP.Req.Lockstep</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>478</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>The &amp;foac; shall guarantee that all fail operational software
                    components are allocated to lockstep cores and that the lockstep functionality
                    on these cores is enabled and a lockstep error leads to fail silent behavior of
                    the MCU. </description>
      <rationale>There is always a residual probability that a random hardware failure
                    within fail op- erational components occur, and that the failure will not occur
                    in redundant compo- nents at the same point in time. In this case the fail
                    operational subsystem shall be- have silent in order to allow the redundant
                    subsystem to take over operation (e.g. in case of a deadline violation). </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment> </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>partially</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.FOMM.Proxy</srcid><srcstatus/><internalId>512</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FOMM.MCUProxy</srcid><srcstatus/><internalId>514</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FOMM.DIOProxy</srcid><srcstatus/><internalId>519</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FOMM.DIOProxy.Functions</srcid><srcstatus/><internalId>520</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FailOp</srcid><srcstatus>source not covered.</srcstatus><internalId>619</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>partially</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FailSilent.HW</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>687</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>693</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.ProtectCANTrcv</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>516</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>As long as in fail operational mode the &amp;foac; shall prevent any non
                    fail operational components from changing the state of a CAN transceiver used
                    for fail operational communication. </description>
      <rationale> Non fail operational components must not block or restrict access to the
                    communication media. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>partially</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.FOMM.DIOProxy.Functions</srcid><srcstatus/><internalId>520</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.Activate</srcid><srcstatus>source not covered.</srcstatus><internalId>521</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.Deactivate</srcid><srcstatus>source not covered.</srcstatus><internalId>522</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.PreventXCoreCommands</srcid><srcstatus>source not covered.</srcstatus><internalId>523</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>partially</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FFICom</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>683</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Fea.ComCan</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>691</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>694</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.ProtectCANCtrl</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>555</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>The &amp;foac; shall prevent write access by non fail operational
                    components to registers or data buffers of the CAN controller used for
                    fail-operational communication.</description>
      <rationale> Non fail operational components must not block or restrict access to the
                    communication media. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_IsModuleInitComplete</srcid><srcstatus>source not covered.</srcstatus><internalId>652</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_Satellite_SetControllerMode</srcid><srcstatus>source not covered.</srcstatus><internalId>653</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_SetControllerMode</srcid><srcstatus>source not covered.</srcstatus><internalId>654</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_Satellite_SetPduMode</srcid><srcstatus>source not covered.</srcstatus><internalId>655</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_SetPduMode</srcid><srcstatus>source not covered.</srcstatus><internalId>656</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FFICom</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>683</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Fea.ComCan</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>691</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>695</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.PreventCANOverload</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>595</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>The &amp;foac; shall prevent overload situations on the CAN bus by
                    non-fail-operational components.</description>
      <rationale> Non fail operational components must not block or restrict access to the
                    communication media. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.Module.FOCom</srcid><srcstatus>source not covered.</srcstatus><internalId>631</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FFICom</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>683</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Fea.ComCan</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>691</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>696</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.GuaranteedCpuTime</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>633</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall be able to provide the specified amount of CPU time
                    to each fail operational task. </description>
      <rationale>Non fail operational components must not prevent fail operational
                    components from completing in time</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.SwComplexity</srcid><srcstatus>source not covered.</srcstatus><internalId>618</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_PartitionFailedNotification</srcid><srcstatus>source not covered.</srcstatus><internalId>671</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FFITimE</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>684</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Fea.Execution</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>697</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.PreventExcessiveFailOpExec</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>670</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>As long as in fail operational mode the &amp;foac; shall prevent triggering
                    of fail-operational tasks or events from non-fail-operational
                    components.</description>
      <rationale>Non fail operational components must not prevent fail operational
                    components from completing in time</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>partially</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.Activate</srcid><srcstatus>source not covered.</srcstatus><internalId>521</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.Deactivate</srcid><srcstatus>source not covered.</srcstatus><internalId>522</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.PreventXCoreCommands</srcid><srcstatus>source not covered.</srcstatus><internalId>523</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.PreventXPartitionCommands</srcid><srcstatus>source not covered.</srcstatus><internalId>524</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.PreventXCoreSyncCalls</srcid><srcstatus>source not covered.</srcstatus><internalId>525</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.PreventXPartitionSyncCalls</srcid><srcstatus>source not covered.</srcstatus><internalId>526</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.NonFailOpSw.ActivateTask</srcid><srcstatus/><internalId>527</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.NonFailOpSw.SetEvent</srcid><srcstatus/><internalId>528</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.NonFailOpSw.GetEvent</srcid><srcstatus/><internalId>531</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.NonFailOpSw.GetTaskState</srcid><srcstatus/><internalId>532</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.NonFailOpSw.QmOsCall</srcid><srcstatus/><internalId>533</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>partially</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FFITimE</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations><ruleid>WRN.swad.needscoverage.count</ruleid></oreqmViolations><covstatus>partially</covstatus><internalId>698</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.NonBlockingCommunication</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>706</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall prevent fail operational tasks from being blocked for
                    a specified amount of time by non fail operational tasks. </description>
      <rationale>Non fail operational components must not prevent fail operational
                    components from completing in time</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment> This kind of blocking may e.g. occur due to the usage of blocking
                    communication or synchronization primitives, e.g. spinlocks. </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.PreventXCoreSyncCalls</srcid><srcstatus>source not covered.</srcstatus><internalId>525</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.PreventXPartitionSyncCalls</srcid><srcstatus>source not covered.</srcstatus><internalId>526</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Locks.Spinlocks</srcid><srcstatus>source not covered.</srcstatus><internalId>536</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Locks.LockBudgetMonitoring</srcid><srcstatus>source not covered.</srcstatus><internalId>537</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Locks.RteHookNbw</srcid><srcstatus>source status 'proposed' excluded from tracing.</srcstatus><internalId>538</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Locks.OsReadExecutionTime</srcid><srcstatus>source status 'proposed' excluded from tracing.</srcstatus><internalId>539</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Locks.OsReadScheduleTableTime</srcid><srcstatus>source status 'proposed' excluded from tracing.</srcstatus><internalId>540</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FFITimE</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>699</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.TaskExecution</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>741</sourceline>
      <version>2</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;The &amp;foac; shall protect the execution of a fail operational application
                        from being interrupted by any non fail operational part regarding timing and
                        execution. &lt;/para&gt;
                </description>
      <rationale>Prevention of unauthorized service interruption is required for fail
                    operational</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>partially</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.Activate</srcid><srcstatus>source not covered.</srcstatus><internalId>521</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.Deactivate</srcid><srcstatus>source not covered.</srcstatus><internalId>522</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.PreventXCoreCommands</srcid><srcstatus>source not covered.</srcstatus><internalId>523</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.PreventXPartitionCommands</srcid><srcstatus>source not covered.</srcstatus><internalId>524</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.NonFailOpSw.Interrupts</srcid><srcstatus/><internalId>535</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.SafetyOS</srcid><srcstatus>source not covered.</srcstatus><internalId>620</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>partially</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.Execution</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>700</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.SeparateMem</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>784</sourceline>
      <version>2</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall allocate all memory, which is used by fail
                    operational tasks, into memory segments which do not overlap with memory
                    segments used by non fail operational tasks. </description>
      <rationale>Prevention of overwriting of memory of fail operational components by non
                    fail operational components is a prerequisite of fail operational execution and
                    fail operational exchange of information.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.CAN.Sm.MemProtection</srcid><srcstatus>source not covered.</srcstatus><internalId>558</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.SafetyOS</srcid><srcstatus>source not covered.</srcstatus><internalId>620</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FFIData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>685</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>701</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.WriteProtect</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>819</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall prevent non fail operational tasks from modifying
                    memory allocated to fail operational tasks. </description>
      <rationale>Prevention of overwriting of memory of fail operational components by non
                    fail operational components is a prerequisite of fail operational execution and
                    fail operational exchange of information.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.FOMM.MemRegion</srcid><srcstatus>source not covered.</srcstatus><internalId>513</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.SafetyOS</srcid><srcstatus>source not covered.</srcstatus><internalId>620</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FFIData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>685</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>702</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.WriteProtectPeripherals</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>854</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>The &amp;foac; shall prevent non fail operational tasks from modifying
                    peripheral registers used for fail-operational functionality. </description>
      <rationale>Prevention of overwriting of peripheral registers of fail operational
                    components by non fail operational components is a prerequisite of fail
                    operational execution and fail operational exchange of information.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>partially</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.FOMM.Proxy</srcid><srcstatus/><internalId>512</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FOMM.MCUProxy</srcid><srcstatus/><internalId>514</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FOMM.DIOProxy</srcid><srcstatus/><internalId>519</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.SafetyOS</srcid><srcstatus>source not covered.</srcstatus><internalId>620</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.WriteProtect</srcid><srcstatus>source not covered.</srcstatus><internalId>621</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Module.FOMM</srcid><srcstatus>source not covered.</srcstatus><internalId>634</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>partially</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FFIData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>685</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP_Fea.ContinuousService</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>703</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.NonLockstepMemoryAccess</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>895</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description> If the MCU contains any non-trusted cores (that is, non-lockstep
                    cores), then the &amp;foac; shall provide a mechanism (independent from the
                    non-trusted cores) to protect fail operational memory and critical peripheral
                    registers from being overwritten by software on the non-trusted cores. </description>
      <rationale>Prevention of overwriting of memory of fail operational components by non
                    fail operational components is a prerequisite of fail operational execution and
                    fail operational exchange of information.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>partially</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.FOMM.Proxy</srcid><srcstatus/><internalId>512</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FOMM.MemRegion</srcid><srcstatus>source not covered.</srcstatus><internalId>513</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FOMM.MCUProxy</srcid><srcstatus/><internalId>514</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FOMM.DIOProxy</srcid><srcstatus/><internalId>519</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>partially</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FFIData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>685</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>704</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.Transformer</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>932</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;The &amp;foac; shall be able to serialize and de-serialize the communication
                        data.&lt;/para&gt;
                </description>
      <rationale> The de-serialization of data allows the interoperability of transformers
                    for different vendors.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.CAN.Tx.ComXf</srcid><srcstatus>source not covered.</srcstatus><internalId>560</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.CAN.Rx.ComXf</srcid><srcstatus>source not covered.</srcstatus><internalId>575</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_Transmit</srcid><srcstatus>source not covered.</srcstatus><internalId>643</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_FOCanRxIndication</srcid><srcstatus>source not covered.</srcstatus><internalId>645</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.ComCan</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>691</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>705</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.SeparateExecution</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>970</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;The &amp;foac; shall separate fail operational execution from non fail
                        operational execution.&lt;/para&gt;
                </description>
      <rationale>Prevention of unauthorized service interruption is required for fail
                    operational.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FFITimE</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>684</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Fea.Execution</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>706</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.SeparateComPath</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1012</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall provide separate fail operational data communication
                    paths for the fail operational communication and the non fail operational
                    communication. </description>
      <rationale>Prevention of unauthorized service interruption is required for fail
                    operational.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>partially</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.FOMM.DIOProxy.Functions</srcid><srcstatus/><internalId>520</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.CAN.Tx</srcid><srcstatus>source not covered.</srcstatus><internalId>559</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.CAN.Rx</srcid><srcstatus>source not covered.</srcstatus><internalId>570</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Module.FOCom</srcid><srcstatus>source not covered.</srcstatus><internalId>631</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_IsModuleInitComplete</srcid><srcstatus>source not covered.</srcstatus><internalId>652</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_Satellite_SetControllerMode</srcid><srcstatus>source not covered.</srcstatus><internalId>653</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_SetControllerMode</srcid><srcstatus>source not covered.</srcstatus><internalId>654</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_Satellite_SetPduMode</srcid><srcstatus>source not covered.</srcstatus><internalId>655</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_SetPduMode</srcid><srcstatus>source not covered.</srcstatus><internalId>656</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_GetControllerMode</srcid><srcstatus>source not covered.</srcstatus><internalId>658</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_GetPduMode</srcid><srcstatus>source not covered.</srcstatus><internalId>659</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Integration.FOCan_SetControllerMode</srcid><srcstatus/><internalId>663</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>partially</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FFITimE</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>684</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Fea.FFIData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>685</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations><ruleid>WRN.swad.needscoverage.count</ruleid></oreqmViolations><covstatus>partially</covstatus><internalId>707</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.SeparateBSWConfig</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1093</sourceline>
      <version>2</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall separate the configuration and the BSW of the fail
                    operational subsystem from non fail operational subsystem. </description>
      <rationale> It provides flexibility as software updates of the non fail operational
                    part (updated configuration, updated BSW version) do not require safety
                    re-qualification of the fail operational parts. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.IndependentUpdate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>690</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>708</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.ComCan</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1127</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;The &amp;foac; shall transfer fail operational related messages correctly and
                        according to the timing specification over the CAN communication
                        path.&lt;/para&gt;
                </description>
      <rationale>Fail operational communication is required to provide the service
                    correctly and continuously</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.CAN.Sm.Setup</srcid><srcstatus>source not covered.</srcstatus><internalId>554</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.CAN.Sm.SetupReady</srcid><srcstatus>source not covered.</srcstatus><internalId>555</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.CAN.Sm.StartCanCtrl</srcid><srcstatus>source not covered.</srcstatus><internalId>556</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.CAN.Tx.Mapping2CanId</srcid><srcstatus>source not covered.</srcstatus><internalId>565</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.CAN.Tx.CanBuffer</srcid><srcstatus>source not covered.</srcstatus><internalId>566</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.CAN.Rx.CanBuffer</srcid><srcstatus>source not covered.</srcstatus><internalId>571</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.CAN.Rx.Mapping2CanId</srcid><srcstatus>source not covered.</srcstatus><internalId>572</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.CAN.Rx.FixedSize</srcid><srcstatus>source not covered.</srcstatus><internalId>576</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.ASILD</srcid><srcstatus>source not covered.</srcstatus><internalId>617</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Module.FOCan</srcid><srcstatus>source not covered.</srcstatus><internalId>632</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_Transmit</srcid><srcstatus>source not covered.</srcstatus><internalId>643</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_FOCanRxIndication</srcid><srcstatus>source not covered.</srcstatus><internalId>645</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_FOCanTxConfirmation</srcid><srcstatus>source not covered.</srcstatus><internalId>646</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOComUser_CbkRxIndication</srcid><srcstatus>source not covered.</srcstatus><internalId>647</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOComUser_CbkTxConfirmation</srcid><srcstatus>source not covered.</srcstatus><internalId>648</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_Transmit</srcid><srcstatus>source not covered.</srcstatus><internalId>657</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_MainFunction_Write</srcid><srcstatus>source not covered.</srcstatus><internalId>660</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_MainFunction_Read</srcid><srcstatus>source not covered.</srcstatus><internalId>661</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.ComCan</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>691</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations><ruleid>WRN.swad.needscoverage.count</ruleid></oreqmViolations><covstatus>uncovered</covstatus><internalId>709</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.IntraECUCom</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1168</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;The &amp;foac; shall provide a mechanism for fail operational intra ECU
                        communication.&lt;/para&gt;
                </description>
      <rationale>Non fail operational components must not block or restrict access to the
                    intra ECU communication.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.PreventXCoreSyncCalls</srcid><srcstatus>source not covered.</srcstatus><internalId>525</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.PreventXPartitionSyncCalls</srcid><srcstatus>source not covered.</srcstatus><internalId>526</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FFICom</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>683</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>710</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.E2ETx</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1204</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall be able to protect all fail operational relevant
                    messages by E2E protection information in order to allow the receiver to detect
                    any communication errors.</description>
      <rationale>Detection of communication failure is required to ensure freedom from
                    interference.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment> The user has to ensure that all fail operational relevant messages are
                    configured to use E2E protection. </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.CAN.Tx.E2EXf</srcid><srcstatus>source not covered.</srcstatus><internalId>562</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.CAN.Tx.Mapping2Pdu</srcid><srcstatus>source not covered.</srcstatus><internalId>563</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_Transmit</srcid><srcstatus>source not covered.</srcstatus><internalId>643</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FailSilent.HW</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>687</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Fea.FailSilent.SW</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>688</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>711</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.E2ERx</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1244</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>If the E2E information of a received fail operational message is
                    incorrect, then the &amp;foac; shall discard the message. </description>
      <rationale>Detection of communication failure is required to ensure freedom from
                    interference.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment> </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.CAN.Rx.E2EXf</srcid><srcstatus>source not covered.</srcstatus><internalId>574</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FailOp</srcid><srcstatus>source not covered.</srcstatus><internalId>619</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_FOCanRxIndication</srcid><srcstatus>source not covered.</srcstatus><internalId>645</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FailSilent.HW</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>687</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Fea.FailSilent.SW</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>688</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>712</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.GetTxData</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1282</sourceline>
      <version>2</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;The &amp;foac; shall be able to get a serialized and possible E2E protected
                        data element from the SWC for message transmission.&lt;/para&gt;
                </description>
      <rationale>Fail operational communication is required to provide the service
                    correctly and continuously</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.CAN.Tx</srcid><srcstatus>source not covered.</srcstatus><internalId>559</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.CAN.Tx.TxConfirmation</srcid><srcstatus>source not covered.</srcstatus><internalId>567</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_Transmit</srcid><srcstatus>source not covered.</srcstatus><internalId>643</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.ComCan</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>691</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>713</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.GetInitFV</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1319</sourceline>
      <version>2</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall be able to get a correct and timely freshness value
                    from the freshness value master on the non fail operational subsystem at least
                    once before entering the non fail operational mode. </description>
      <rationale>Secure on board communication is state-of-the-art in cyber security
                    related automotive systems. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.SecOC.Freshness</srcid><srcstatus>source not covered.</srcstatus><internalId>581</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.SecOC.FreshnessBackup</srcid><srcstatus>source not covered.</srcstatus><internalId>582</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.SecOC.FreshnessNonFailOp</srcid><srcstatus>source not covered.</srcstatus><internalId>583</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.SecOC.FreshnessFailOp</srcid><srcstatus>source not covered.</srcstatus><internalId>584</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.SecOC.FreshnessCheck</srcid><srcstatus>source not covered.</srcstatus><internalId>585</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_Satellite_MainFunction</srcid><srcstatus>source not covered.</srcstatus><internalId>640</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_ReceiveFreshnessValue</srcid><srcstatus>source not covered.</srcstatus><internalId>641</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.SecOC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>714</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.GetSecurekey</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1353</sourceline>
      <version>2</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall be able to get the secure key which is needed for
                    SecOC operation from secure storage, unless the secure key can be used from
                    within this secure storage (e.g. by using a fail operational hardware security
                    module). </description>
      <rationale>Secure on board communication is state-of-the-art in cyber security
                    related automotive systems. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>QM</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.SecOC.Key</srcid><srcstatus>source not covered.</srcstatus><internalId>580</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_Satellite_InstallSecOCKey</srcid><srcstatus>source not covered.</srcstatus><internalId>638</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_ReceiveSecOCKey</srcid><srcstatus>source not covered.</srcstatus><internalId>639</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.SecOC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>715</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.GenerateMAC</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1388</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;The &amp;foac; shall generate Medium Authentication Code (&lt;glossterm linkend="GL_mac"&gt;MAC&lt;/glossterm&gt;) based on freshness value (FV), secure
                        key and PDU to be protected.&lt;/para&gt;
                </description>
      <rationale>Secure on board communication is state-of-the-art in cyber security
                    related automotive systems.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.SecOC.FreshnessFailOp</srcid><srcstatus>source not covered.</srcstatus><internalId>584</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Module.FOCrypt</srcid><srcstatus>source not covered.</srcstatus><internalId>633</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_Transmit</srcid><srcstatus>source not covered.</srcstatus><internalId>643</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCrypto_CalcMAC</srcid><srcstatus>source not covered.</srcstatus><internalId>665</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.SecOC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>716</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.SipHash</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1426</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;The &amp;foac; shall support SipHash algorithm in SW for MAC generation.
                    &lt;/para&gt;
                </description>
      <rationale>Secure on board communication is state-of-the-art in cyber security
                    related automotive systems.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.SecOC.Version</srcid><srcstatus>source not covered.</srcstatus><internalId>579</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Module.FOCrypt</srcid><srcstatus>source not covered.</srcstatus><internalId>633</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCrypto_CalcMAC</srcid><srcstatus>source not covered.</srcstatus><internalId>665</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.SecOC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>717</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.SecuredPduTx</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1463</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;The &amp;foac; shall be able to provide secured PDU to the corresponding Can
                        HW buffer for message transmission.&lt;/para&gt;
                </description>
      <rationale>Secure on board communication is state-of-the-art in cyber security
                    related automotive systems.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.CAN.Tx.SecOC</srcid><srcstatus>source not covered.</srcstatus><internalId>564</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Module.FOCom</srcid><srcstatus>source not covered.</srcstatus><internalId>631</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_Transmit</srcid><srcstatus>source not covered.</srcstatus><internalId>643</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.ComCan</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>691</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Fea.SecOC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>718</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.SecuredPduRx</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1504</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;The &amp;foac; shall be able to get secured PDU from the corresponding Can HW
                        buffer for message reception.&lt;/para&gt;
                </description>
      <rationale>Secure on board communication is state-of-the-art in cyber security
                    related automotive systems.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.CAN.Rx</srcid><srcstatus>source not covered.</srcstatus><internalId>570</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FailOp</srcid><srcstatus>source not covered.</srcstatus><internalId>619</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Module.FOCom</srcid><srcstatus>source not covered.</srcstatus><internalId>631</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_FOCanRxIndication</srcid><srcstatus>source not covered.</srcstatus><internalId>645</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.ComCan</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>691</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Fea.SecOC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>719</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.VerifyMAC</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1545</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;The &amp;foac; shall verify the correctness of received PDU and MAC based on
                        the calculated MAC and the current FV.&lt;/para&gt;
                </description>
      <rationale>Secure on board communication is state-of-the-art in cyber security
                    related automotive systems.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.CAN.Rx.SecOC</srcid><srcstatus>source not covered.</srcstatus><internalId>573</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FailOp</srcid><srcstatus>source not covered.</srcstatus><internalId>619</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Module.FOCrypt</srcid><srcstatus>source not covered.</srcstatus><internalId>633</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_FOCanRxIndication</srcid><srcstatus>source not covered.</srcstatus><internalId>645</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCrypto_CalcMAC</srcid><srcstatus>source not covered.</srcstatus><internalId>665</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.ComCan</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>691</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Fea.SecOC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>720</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.ProvideRxData</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1586</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;The &amp;foac; shall be able to provide data element to the SWC for message
                        reception.&lt;/para&gt;
                </description>
      <rationale>Fail operational communication is required to provide the service
                    correctly and continuously</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.CAN.Rx</srcid><srcstatus>source not covered.</srcstatus><internalId>570</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOComUser_CbkRxIndication</srcid><srcstatus>source not covered.</srcstatus><internalId>647</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.ComCan</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>691</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>721</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.ModeManagementSM</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1623</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;The &amp;foac; shall provide a state machine to support state transition among
                        fail operational modes and non fail operational modes.&lt;/para&gt;
                </description>
      <rationale>Prevention of unauthorized service interruption is required for fail
                    operational. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.FOMM.FO_Operation</srcid><srcstatus>source not covered.</srcstatus><internalId>515</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.Activate</srcid><srcstatus>source not covered.</srcstatus><internalId>521</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.Deactivate</srcid><srcstatus>source not covered.</srcstatus><internalId>522</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.PreventXCoreCommands</srcid><srcstatus>source not covered.</srcstatus><internalId>523</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.PreventXPartitionCommands</srcid><srcstatus>source not covered.</srcstatus><internalId>524</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Mm.FOLocal</srcid><srcstatus>source not covered.</srcstatus><internalId>586</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Mm.CheckConsistency</srcid><srcstatus>source not covered.</srcstatus><internalId>587</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Mm.NormalMode</srcid><srcstatus>source not covered.</srcstatus><internalId>589</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Mm.FOComm</srcid><srcstatus>source not covered.</srcstatus><internalId>590</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.ASILD</srcid><srcstatus>source not covered.</srcstatus><internalId>617</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Module.FOMM</srcid><srcstatus>source not covered.</srcstatus><internalId>634</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_IsFreshnessValueOk</srcid><srcstatus>source not covered.</srcstatus><internalId>642</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_CheckConsistency</srcid><srcstatus>source not covered.</srcstatus><internalId>644</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCan_CheckConsistency</srcid><srcstatus>source not covered.</srcstatus><internalId>662</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_RequestMode</srcid><srcstatus>source not covered.</srcstatus><internalId>669</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_GetMode</srcid><srcstatus>source not covered.</srcstatus><internalId>670</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_CheckConsistency</srcid><srcstatus>source not covered.</srcstatus><internalId>673</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.ContinuousService</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations><ruleid>WRN.swad.needscoverage.count</ruleid></oreqmViolations><covstatus>uncovered</covstatus><internalId>722</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.SWCSetMode</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1660</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;Proposal to delete this requirement. TBD. The &amp;foac; shall be able to set
                        the fail operational state from a SWC.&lt;/para&gt;
                </description>
      <rationale>Prevention of unauthorized service interruption is required for fail
                    operational. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.Activate</srcid><srcstatus>source not covered.</srcstatus><internalId>521</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.Deactivate</srcid><srcstatus>source not covered.</srcstatus><internalId>522</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Mm.FOLocal</srcid><srcstatus>source not covered.</srcstatus><internalId>586</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Mm.CheckConsistency</srcid><srcstatus>source not covered.</srcstatus><internalId>587</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Mm.NormalMode</srcid><srcstatus>source not covered.</srcstatus><internalId>589</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Mm.FOComm</srcid><srcstatus>source not covered.</srcstatus><internalId>590</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_RequestMode</srcid><srcstatus>source not covered.</srcstatus><internalId>669</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_ShutdownAllCores</srcid><srcstatus>source not covered.</srcstatus><internalId>672</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.ContinuousService</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>723</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.SWCGetMode</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1697</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;Proposal to delete this requirement. TBD. The &amp;foac; shall be able to
                        indicate the current fail operational state to a SWC.&lt;/para&gt;
                </description>
      <rationale>Prevention of unauthorized service interruption is required for fail
                    operational.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.Mm.Query</srcid><srcstatus>source not covered.</srcstatus><internalId>591</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_GetMode</srcid><srcstatus>source not covered.</srcstatus><internalId>670</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.ContinuousService</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>724</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.BSWGetMode</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1734</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;Proposal to delete this requirement. TBD. The &amp;foac; shall be able to
                        indicate the current fail operational state to BSW modules.&lt;/para&gt;
                </description>
      <rationale>Prevention of unauthorized service interruption is required for fail
                    operational.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.Mm.Query</srcid><srcstatus>source not covered.</srcstatus><internalId>591</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_GetMode</srcid><srcstatus>source not covered.</srcstatus><internalId>670</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.ContinuousService</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>725</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.EcuStateTransitions</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1771</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description> As long as fail operational mode is active, the &amp;foac; shall prevent
                    fail operational relevant ECU state transitions by non-fail-operational
                    components (e.g., reset, shutdown, or partition restart). </description>
      <rationale>Prevention of unauthorized service interruption is required for fail
                    operational.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>partially</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.FOMM.FO_Operation</srcid><srcstatus>source not covered.</srcstatus><internalId>515</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FOMM.MCUProxy.Remap_Functions</srcid><srcstatus>source not covered.</srcstatus><internalId>516</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FOMM.MCUProxy.Functions</srcid><srcstatus/><internalId>517</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FOMM.MCUProxy.Config</srcid><srcstatus>source not covered.</srcstatus><internalId>518</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FOMM.DIOProxy.Functions</srcid><srcstatus/><internalId>520</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.Activate</srcid><srcstatus>source not covered.</srcstatus><internalId>521</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.Deactivate</srcid><srcstatus>source not covered.</srcstatus><internalId>522</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.PreventXCoreCommands</srcid><srcstatus>source not covered.</srcstatus><internalId>523</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.PreventXPartitionCommands</srcid><srcstatus>source not covered.</srcstatus><internalId>524</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.NonFailOpSw.ShutdownAllCores</srcid><srcstatus/><internalId>529</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.NonFailOpSw.TerminateApplication</srcid><srcstatus/><internalId>530</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.NonFailOpSw.FommServerCS</srcid><srcstatus/><internalId>534</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.CAN.Sm.DioProxy</srcid><srcstatus>source not covered.</srcstatus><internalId>557</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.Mm.CanActivate</srcid><srcstatus>source not covered.</srcstatus><internalId>588</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.SafetyOS</srcid><srcstatus>source not covered.</srcstatus><internalId>620</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.WriteProtect</srcid><srcstatus>source not covered.</srcstatus><internalId>621</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>partially</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.ContinuousService</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations><ruleid>WRN.swad.needscoverage.count</ruleid></oreqmViolations><covstatus>partially</covstatus><internalId>726</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.DetectInternalErrors</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1843</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>
                    &lt;para&gt;The &amp;foac; shall detect internal errors and provide information about them
                        to SWC. &lt;/para&gt;
                </description>
      <rationale>In case of an error the fail operational subsystem shall behave silent in
                    order to allow the redundant subsystem to take over operation.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
        <needscov><needsobj>swts</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FFICom</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>683</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Fea.FFITimE</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>684</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Fea.FFIData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>685</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Fea.FailSilent.HW</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>687</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Fea.FailSilent.SW</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>688</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>727</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.Portability</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1897</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall be portable to automotive MCUs designated to
                    real-time and safety applications. </description>
      <rationale>There are different use cases or OEM requirements which which have to be
                    implemented on different MCUs. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment> Portability may be achieved on different levels of the design - a feature
                    may be ported to another MCU without any change, with small changes or also with
                    conceptual changes. In case of conceptual changes, a strategy shall be
                    formulated how to implement the feature in other architectures. </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>728</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.Extensibility</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1927</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall be extensible with other communication
                    protocols.</description>
      <rationale>In the future other communication protocol e.g. Ethernet might be
                    relevant for fail operational.</rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>729</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.NoUncontrolledFailure</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1953</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>The &amp;foac; shall be able to handle any input data scenario (e.g.
                    overload, corrupted input data) in an controlled way.</description>
      <rationale>Prevention of unauthorized service interruption is required for fail
                    operational </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment> Exceeding the time budget of a fail operational task in response to any
                    input data scenario is also to be considered as an uncontrolled failure if the
                    task is terminated without the ability to do it in a controlled way. </comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.CAN.Rx.FixedSize</srcid><srcstatus>source not covered.</srcstatus><internalId>576</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.ASILD</srcid><srcstatus>source not covered.</srcstatus><internalId>617</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.SwComplexity</srcid><srcstatus>source not covered.</srcstatus><internalId>618</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.FailSilent.SW</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>688</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>730</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.RestrictedShutdown</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>1987</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>As long as fail operational mode is active, the FOAC shall not shut
                    down except in case of a random hardware failure or in case of an unrecoverable
                    software failure. </description>
      <rationale>Prevention of unauthorized service interruption is required for fail
                    operational </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>partially</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.FOMM.MCUProxy.Remap_Functions</srcid><srcstatus>source not covered.</srcstatus><internalId>516</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FOMM.MCUProxy.Functions</srcid><srcstatus/><internalId>517</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.FOMM.MCUProxy.Config</srcid><srcstatus>source not covered.</srcstatus><internalId>518</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.Activate</srcid><srcstatus>source not covered.</srcstatus><internalId>521</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.Deactivate</srcid><srcstatus>source not covered.</srcstatus><internalId>522</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.OS.FailOpMode.PreventXCoreCommands</srcid><srcstatus>source not covered.</srcstatus><internalId>523</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.SafetyOS</srcid><srcstatus>source not covered.</srcstatus><internalId>620</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOMM_ShutdownAllCores</srcid><srcstatus>source not covered.</srcstatus><internalId>672</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>partially</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.ContinuousService</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>689</internalId></provcov>
        <provcov>
          <linksto>EB_FailOP.Fea.Execution</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>731</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.Security.PSK</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>2024</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description>The &amp;foac; shall prevent an attacker from extract a pre-shared security
                    key.</description>
      <rationale>Secure on board communication is state-of-the-art in cyber security
                    related automotive systems. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_Satellite_InstallSecOCKey</srcid><srcstatus>source not covered.</srcstatus><internalId>638</internalId></linkedfrom><linkedfrom><srcid>EB_FailOP.Arch.API.FOCom_ReceiveSecOCKey</srcid><srcstatus>source not covered.</srcstatus><internalId>639</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.SecOC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>732</internalId></specobject>
    <specobject>
      <id>EB_FailOP.Req.Security.SecOC</id>
      <status>approved</status>
      <source>Elektrobit</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOSEmgmt/doc/project/SwRS/TL-Requirements.xml</sourcefile>
      <sourceline>2056</sourceline>
      <version>1</version>
      <priority>HIGH</priority>
      <description> The &amp;foac; shall prevent an attacker from generating or manipulating
                    messages protected by SecOC.</description>
      <rationale>Secure on board communication is state-of-the-art in cyber security
                    related automotive systems. </rationale>
      <usecase> Automated driving according to SAE J3016 level 3 or higher or X-by-wire
                    applications. </usecase>
      <comment>&lt;comment/&gt;</comment>
      <safetyclass>ASIL-D</safetyclass>
      <needscoverage>
        <needscov><needsobj>swad</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>EB_FailOP.Fea.SecOC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype>swrs</linkdestdoctype><linkerror>source not covered.</linkerror><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>733</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
