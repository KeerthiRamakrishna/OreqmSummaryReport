<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_WdgIf_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_Native/asc_WdgIf_requirements_AUTOSAR_SWS_WatchdogInterface_4_0_3.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_Native/asc_WdgIf_requirements_AUTOSAR_SWS_WatchdogInterface_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_Native/asc_WdgIf_requirements_EB_Refinements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_Native/asc_WdgIf_requirements_EB_Requirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/common_req/WdgIf_VerifyStub_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_DocBookImporter/reqm_SWDD.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</commandline>
    <timestamp>Mon Jun 17 20:10:44 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_WdgIf_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_Native/asc_WdgIf_requirements_AUTOSAR_SWS_WatchdogInterface_4_0_3.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_Native/asc_WdgIf_requirements_AUTOSAR_SWS_WatchdogInterface_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_Native/asc_WdgIf_requirements_EB_Refinements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_Native/asc_WdgIf_requirements_EB_Requirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/common_req/WdgIf_VerifyStub_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_DocBookImporter/reqm_SWDD.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/1018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>swpad</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swts</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/1010: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>

      <!-- legacy items -->
      <regex>dev</regex>
      <regex>man</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>
    <!-- The Ruleset for RMP4.0 is currently identical to the previous rule set. This rule is
        intoduce to show that the right file is uses. It will be removed when the RMP4.0 rule set is
    reworked -->
    <rule>
      <name>INFO.Rule set RMP4.0</name>
      <description>This rules indicates that RMP4.0 rule set is used.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.general.doctypes</name>
      <description>The used doctype is not part of the tracing model</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobjects/@doctype</applyto>
          <condition>((. != 'creq') or (. != 'fea') or (. != 'swpad') or (. != 'swts') or (. != 'swrs') or (. !='swad') or (. != 'swintts') or (.!= 'swdd') or (. != 'swurs') or (. != 'swmts') or (. != 'swuts') or (. != 'impl') or (. != 'dev') or (. != 'man') or (. != 'lim'))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected.coverage</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.count</name>
      <description>Unit requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swrs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swurs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd') and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.doctypes</name>
      <description>Requirements can be covered only by swurs, swad, dev, lim, swdd, impl, swuts, swmts, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs')]</applyto>
          <condition>(./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swurs, swad, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swuts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swmts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swintts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.impl.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='impl')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes"))</condition>
        </conditioncheck>
      </conditionchecks>
          </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

  </rules>
    <oreqmRules>

        <rule>
            <name>WRN.swts.needscoverage.count</name>
            <description>Violated if there are more than 10 swts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.man.needscoverage.count</name>
            <description>Violated if there are more than 10 man specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>man.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swintts.needscoverage.count</name>
            <description>Violated if there are more than 10 swintts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swintts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swmts.needscoverage.count</name>
            <description>Violated if there are more than 10 swmts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swmts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swuts.needscoverage.count</name>
            <description>Violated if there are more than 10 swuts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swuts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swpad.needscoverage.count</name>
            <description>Violated if there are more than 10 swpad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swpad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.needscoverage.count</name>
            <description>Violated if there are more than 10 swrs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.needscoverage.count</name>
            <description>Violated if there are more than 10 swad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.needscoverage.count</name>
            <description>Violated if there are more than 10 swurs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.needscoverage.count</name>
            <description>Violated if there are more than 10 swdd specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.impl.needscoverage.count</name>
            <description>Violated if there are more than 10 impl specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>impl.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swrs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.fulfilledby.count</name>
            <description>Violated if there are more than 10 swad specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swurs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.fulfilledby.count</name>
            <description>Violated if there are more than 10 swdd specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="swurs">
    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The Watchdog Interface shall comprise a header file "WdgIf.h" declaring the API of the Watchdog
        Interface. If an API is implemented as a macro, it will be also contained here.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_FileStructure</srcid><srcstatus/><internalId>92</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The file include structure shall be as follows: Figure 1: File include structure of the
        Watchdog Interface
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_FileStructure</srcid><srcstatus/><internalId>92</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_FileStructure_2</srcid><srcstatus/><internalId>111</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00005</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The Watchdog Interface module shall perform Inter Module Checks to avoid integration of
        incompatible files. The imported included files shall be checked by preprocessing directives.
        The following version numbers shall be verified: &lt;MODULENAME&gt;_AR_RELEASE_MAJOR_VERSION &lt;
        MODULENAME&gt;_AR_RELEASE_MINOR_VERSION Where &lt;MODULENAME&gt; is the module short name of the other (
        external) modules which provide header files included by the Watchdog Interface module. If the
        values are not identical to the expected values, an error shall be reported.
      </description>
      <comment>
        Conflicts with EB coding guideline [BSWM_CHK_401] (...inter-module version-checks
        SHALL NOT be done...). See:
        http://wiki.elektrobit.com/index.php/Project:EB_tresos/Engineering_AutoCore/Software_Construction/Coding_Guidelines
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.WdgIf.ConsChck</srcid><srcstatus/><internalId>68</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The following errors and exceptions shall be detectable by the Watchdog Interface depending on its configuration
        (development / production).
        Type of error                                        | Relevance  | Related error code    | Value [hex]
        API service called with wrong device index parameter | Development| WDGIF_E_PARAM_DEVICE  | 0x01
        Invalid pointer in parameter list                    | Development| WDGIF_E_INV_POINTER   | 0x02
      </description>
      <comment>
        This requirement is set to REFINE in order to allow separate handling of all the
        different error codes.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>WdgIf.EB_Ref.WDGIF006.1</srcid><srcstatus/><internalId>53</internalId></linkedfrom><linkedfrom><srcid>WdgIf.EB_Ref.WDGIF006.2</srcid><srcstatus/><internalId>54</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00007</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The detection of development errors is configurable (ON / OFF) at pre-compile time. The switch
        WDGIF_DEV_ERROR_DETECT  shall activate or deactivate the detection of all development errors.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_MacroDefinitions</srcid><srcstatus/><internalId>93</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_MacroDefinitions_DetOff</srcid><srcstatus/><internalId>97</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_32033</srcid><srcstatus/><internalId>114</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00009</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        A detection of errors not listed in the table above [WDGIF006] shall not be implemented.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_NoAdditionalErrorDetection</srcid><srcstatus/><internalId>105</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00010</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The Watchdog Interface's implementer shall place the type definitions of the Watchdog Interface
        in the file WdgIf_Types.h.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_FileStructure</srcid><srcstatus/><internalId>92</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00030</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        Development error values are of type uint8.
      </description>
      <comment>
        This requirement is informational only. This is a requirement on the SWS but not on
        the implementation.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00031</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        If the WDGIF_DEV_ERROR_DETECT switch is enabled API parameter checking is enabled. The detailed
        description of the detected errors can be found in chapter 7.2.
      </description>
      <comment>
        Set coverage tag to 'TEST' since the requirement is tested for enabled configuration
        parameter WdgIfDevErrorDetect in compiling with proper inclusion of Det.h.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_MacroDefinitions</srcid><srcstatus/><internalId>93</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_32033</srcid><srcstatus/><internalId>114</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00032</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        Detected development errors shall be reported to the Det_ReportError service of the Development
        Error Tracer (DET) if the pre-processor switch WDGIF_DEV_ERROR_DETECT is set
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_30033</srcid><srcstatus/><internalId>88</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_30066</srcid><srcstatus/><internalId>89</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_VersionInfo_InvalidParam</srcid><srcstatus/><internalId>94</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00034</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description> 
        The standardized common published parameters as required by BSW00402 in the SRS
        General on Basic Software Modules <biblioref linkend="AUTOSAR_SRS_BSWGeneral"/> shall be
        published within the header file of this module and need to be provided in the BSW Module
        Description (see <biblioref linkend="AUTOSAR_BSW_Description Template"/>). 
      </description>
      <comment> 
        This requirement is set to REFINE in order to allow separation of the BSW module
        description. 
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>WdgIf.EB_Ref.WDGIF034.1</srcid><srcstatus/><internalId>57</internalId></linkedfrom><linkedfrom><srcid>WdgIf.EB_Ref.WDGIF034.2</srcid><srcstatus/><internalId>58</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00035</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The WdgIf_GetVersionInfo service shall return the version information of this module. The
        version information includes: Module Id Vendor Id Vendor specific version numbers (BSW00407)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_30017</srcid><srcstatus/><internalId>87</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00036</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The WdgIf_GetVersionInfo function shall be pre compile time configurable On/Off by the
        configuration parameter: WDGIF_VERSION_INFO_API
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_MacroDefinitions</srcid><srcstatus/><internalId>93</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_MacroDefinitions_DetOff</srcid><srcstatus/><internalId>97</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_32033</srcid><srcstatus/><internalId>114</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00037</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The code file structure shall not be completely defined within this specification.
      </description>
      <comment>
        This requirement is informational only. Requirement for the specification, not for
        the implementation.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00043</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The Watchdog Interface module shall map the service WdgIf_SetMode to the service Wdg_SetMode of
        the corresponding Watchdog Driver.
      </description>
      <comment>
        The requirement is redundant to WDGIF017, see bugzilla entry 53668.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>WDGIF.EB.DesignDecision.InternalVariable1</srcid><srcstatus/><internalId>79</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00045</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The Watchdog Interface module shall map the service WdgIf_SetTriggerCondition to the service
        Wdg_SetTriggerCondition of the corresponding Watchdog Driver.
      </description>
      <comment>
        The requirement is redundant to WDGIF017, see bugzilla entry 53668.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>WDGIF.EB.DesignDecision.InternalVariable2</srcid><srcstatus/><internalId>80</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00049</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The Watchdog Interface shall comprise a header file "WdgIf_Types.h" providing type declarations
        for the watchdog interface and common type declarations to be imported by watchdog drivers.
      </description>
      <comment>
        This requirement is not applicable: According to the proposal for http://www.autosar.org/bugzilla/show_bug.cgi?id=53632&gt;
        http://www.autosar.org/bugzilla/show_bug.cgi?id=53632, this requirement is duplicated by WDGIF010 and therefore removed.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00050</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The Watchdog Interface shall comprise a configuration header file "WdgIf_Cfg.h" providing its
        pre-compile configuration definitions.
      </description>
      <comment>
        This requirement is refined, because it is not atomic.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>WdgIf.EB_Ref.WDGIF050.1</srcid><srcstatus/><internalId>51</internalId></linkedfrom><linkedfrom><srcid>WdgIf.EB_Ref.WDGIF050.2</srcid><srcstatus/><internalId>52</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00051</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The Watchdog Interface shall comprise, if required, an implementation source file WdgIf.c (e.g.
        for tables of function pointers)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_FileStructure</srcid><srcstatus/><internalId>92</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00052</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        Each variable that shall be accessible by AUTOSAR Debugging shall be defined as global variable.
      </description>
      <comment>
        See Deviation: No Autosar Debug and Trace support
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.WdgIf.DebugAndTrace</srcid><srcstatus/><internalId>69</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00053</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        All type definitions of variables which shall be debugged shall be accessible by the header
        file WdgIf.h.
      </description>
      <comment>
        See Deviation: No Autosar Debug and Trace support
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.WdgIf.DebugAndTrace</srcid><srcstatus/><internalId>69</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00054</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The declaration of variables in the header file shall be such, that it is possible to calculate
        the size of the variables by C-"sizeof"
      </description>
      <comment>
        See Deviation: No Autosar Debug and Trace support
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.WdgIf.DebugAndTrace</srcid><srcstatus/><internalId>69</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00055</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        Variables available for debugging shall be described in the respective Basic Software Module
        Description, see [7]
      </description>
      <comment>
        See Deviation: No Autosar Debug and Trace support
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.WdgIf.DebugAndTrace</srcid><srcstatus/><internalId>69</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00056</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        This module shall support only the configuration variant VARIANT-PRE-COMPILE.
        Only parameters with "Pre-compile time" configuration are allowed in this variant.
      </description>
      <comment>
        This requirement is informational only. Requirement for the specification, not for
        the implementation.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>

    <specobject>
      <id>WdgIf.ASR40.SWS_WdgIf_00058</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        If development error detection for the Watchdog Interface module is enabled, then the function
        WdgIf_GetVersionInfo shall check whether the parameter VersioninfoPtr is a NULL pointer (
        NULL_PTR). If VersioninfoPtr is a NULL pointer, then the function WdgIf_GetVersionInfo shall
        raise the development error WDGIF_E_INV_POINTER (i.e. invalid pointer) and return.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_VersionInfo_InvalidParam</srcid><srcstatus/><internalId>94</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>WdgIf.ECUC_WdgIf_00001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        Container Name     | WdgIfGeneral
        Parent Container   | WdgIf
        Description        | This container collects all generic watchdog interface parameters.
        Lower Multiplicity | 1
        Upper Multiplicity | 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        (Checked by VSMD checker)
        AUTOSAR R20-11 comment | Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>

    <specobject>
      <id>WdgIf.ECUC_WdgIf_00002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        Container Name     | WdgIfDevice
        Parent Container   | WdgIf
        Description        | It contains the information for the selection of a particular Watchdog device in
                             case multiple Watchdog drivers are connected.
        Lower Multiplicity | 1
        Upper Multiplicity | infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        (Checked by VSMD checker)
        AUTOSAR R20-11 comment | Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>

    <specobject>
      <id>WdgIf.ECUC_WdgIf_00003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name                     | WdgIfVersionInfoApi
        Parameter Type           | Boolean
        Parent Containers        | WdgIfGeneral
        Description              | Pre-processor switch to enable / disable the service returning the version information.
                                   true: Version information service enabled 
                                   false: Version information service disabled
        Lower Multiplicity       | 1
        Upper Multiplicity       | 1
        Scope                    | LOCAL
        Origin                   | AUTOSAR_ECUC
        Post-Build-Variant-Value | false
        Value-Configuration Class| PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value      | false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        (Checked by VSMD checker)
        AUTOSAR R20-11 comment | Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>

    <specobject>
      <id>WdgIf.ECUC_WdgIf_00005</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name                     | WdgIfDevErrorDetect
        Parameter Type           | Boolean
        Parent Containers        | WdgIfGeneral
        Description              | Switches the development error detection and notification on or off.
                                   true: detection and notification is enabled.
                                   false: detection and notification is disabled.
        Lower Multiplicity       | 1
        Upper Multiplicity       | 1
        Scope                    | LOCAL
        Origin                   | AUTOSAR_ECUC
        Post-Build-Variant-Value | false
        Value-Configuration Class| PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value      | false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        (Checked by VSMD checker)
        AUTOSAR R20-11 comment | Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>

    <specobject>
      <id>WdgIf.ECUC_WdgIf_00006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name                     | WdgIfDeviceIndex
        Parameter Type           | Integer
        Parent Containers        | WdgIfDevice
        Description              | Represents the watchdog interface ID so that it can be referenced by the watchdog
                                   manager.
        Lower Multiplicity       | 1
        Upper Multiplicity       | 1
        Scope                    | ECU
        Origin                   | AUTOSAR_ECUC
        Post-Build-Variant-Value | false
        Value-Configuration Class| PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value      | true
        Max-Value                | 255 |
        Min-Value                | 0 |
      </description>
      <comment>
        Checked by VSMD checker and test for symbolic name values.
        AUTOSAR R20-11 comment | Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_SymbolicNameValues</srcid><srcstatus/><internalId>96</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>

    <specobject>
      <id>WdgIf.ECUC_WdgIf_00007</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name                     | WdgIfDriverRef
        Parameter Type           | Reference
        Parent Containers        | WdgIfDevice
        Description              | Reference to the watchdog drivers that are controlled by the watchdog interface.
        Lower Multiplicity       | 1
        Upper Multiplicity       | 1
        Scope                    | LOCAL
        Origin                   | AUTOSAR_ECUC
        Post-Build-Variant-Value | false
        Value-Configuration Class| PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination              | /AUTOSAR/EcucDefs/Wdg/WdgGeneral
        Destination type         | ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        (Checked by VSMD checker)
        AUTOSAR R20-11 comment | Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00003</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        The Watchdog Interface shall not add functionality to the watchdog drivers. Also the Watchdog
        Interface does not abstract from watchdog properties like toggle or window mode, timeout
        periods etc. that is it does not hide any features of the underlying watchdog driver and
        watchdog hardware.
      </description>
      <comment>
        This requirement is informational only. Requirement for specification and API, not
        for the implementation (covered by chapters 7 and 8 of the SWS).
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>2</version>
      <description>
        Type of error                                        | Related error code    | Error value
        API service called with wrong device index parameter | WDGIF_E_PARAM_DEVICE  | 0x01
        NULL pointer checking                                | WDGIF_E_PARAM_POINTER | 0x03
      </description>
      <comment>
        This requirement is set to REFINE in order to allow separate handling of all the
        different error codes.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.WdgIf.changeErrId</srcid><srcstatus/><internalId>67</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00013</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        The data type for the watchdog device index shall be uint8.DeviceIndex shall provide a zero-
        based consecutive index.
      </description>
      <comment>
        The data type uint8 for the watchdog device index is implicitly specified via the
        API definitions for WdgIf_SetMode() and WdgIf_SetTriggerCondition() (see
        WdgIf.SWS_WdgIf_00042 and WdgIf.SWS_WdgIf_00044). Tracing to source code is provided to the
        check for the allowed value range of the Watchdog device index (zero-based and consecutive
        check).
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_30033</srcid><srcstatus/><internalId>88</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_30066</srcid><srcstatus/><internalId>89</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_30065</srcid><srcstatus/><internalId>90</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_30068</srcid><srcstatus/><internalId>91</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_GENTEST_01_XdmChecks_Part2</srcid><srcstatus/><internalId>107</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_GENTEST_01_XdmChecks_Part3</srcid><srcstatus/><internalId>108</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/WdgIf.xdm.m4_79</srcid><srcstatus/><internalId>74</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/WdgIf_Extension.xdm.m4_65</srcid><srcstatus/><internalId>75</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00016</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        The WdgIf_ModeType values shall be passed as parameters to the watchdog drivers mode switching
        function (Wdg_SetMode)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_CheckEnum</srcid><srcstatus/><internalId>95</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00017</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        The Watchdog Interface shall map the APIs specified in this chapter to the API of the
        underlying drivers. For functional behavior refer to the specification of the watchdog driver
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_30065</srcid><srcstatus/><internalId>90</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_30068</srcid><srcstatus/><internalId>91</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00018</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        The Watchdog Interface shall use the parameter DeviceIndex for selection of watchdog drivers.
        If only one watchdog driver is configured, the parameter DeviceIndex shall be ignored.
      </description>
      <comment>
        This requirement is set to REFINE in order to allow separate handling of one and
        multiple watchdog drivers.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>WdgIf.EB_Ref.WDGIF018.1</srcid><srcstatus/><internalId>55</internalId></linkedfrom><linkedfrom><srcid>WdgIf.EB_Ref.WDGIF018.2</srcid><srcstatus/><internalId>56</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00019</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        If only one watchdog driver is configured, the Watchdog Interface shall cause no runtime
        overhead when mapping the Watchdog Interface API to the API of the corresponding Watchdog
        Driver.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_NoRuntimeOverhead</srcid><srcstatus/><internalId>103</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00020</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        If more than one watchdog driver is configured, the Watchdog Interface shall use efficient
        mechanisms to map the API calls to the appropriate watchdog driver.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_EfficientMechanism</srcid><srcstatus/><internalId>98</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00026</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        The Watchdog Interface provides uniform access to services of the underlying watchdog drivers
        like mode switching and setting trigger conditions
      </description>
      <comment>
        This requirement is informational only. This is a general requirement which is
        described in more detail for the APIs WdgIf_SetMode (section '8.3.1') and
        WdgIf_SetTriggerCondition (section '8.3.2').
        AUTOSAR R20-11 comment | Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00028</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        If more than one watchdog driver is configured and the development error detection is enabled
        for this module, the parameter DeviceIndex shall be checked for being an existing device within
        the module's services. Detected errors shall be reported to the Default Error Tracer (DET) with
        the error code WDGIF_E_PARAM_DEVICE and the called service shall not be executed.
      </description>
      <comment>AUTOSAR R20-11 comment | Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_30033</srcid><srcstatus/><internalId>88</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_30066</srcid><srcstatus/><internalId>89</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00041</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        Module | Header File | Imported Type 
        Std    | Std_Types.h | Std_ReturnType 
               | Std_Types.h | Std_VersionInfoType 
      </description>
      <comment>AUTOSAR R20-11 comment | Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_ImportedTypes</srcid><srcstatus/><internalId>82</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00042</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        Service Name                  | WdgIf_SetMode
        Syntax                        | Std_ReturnType WdgIf_SetMode (uint8 DeviceIndex, WdgIf_ModeType WdgMode)
        Service ID [hex]              | 0x01
        Sync/Async                    | Synchronous
        Reentrancy                    | Non Reentrant
        Parameters (in)               | DeviceIndex  | Identifies the Watchdog Driver instance.
                                      | WdgMode      | The watchdog driver mode (see Watchdog Driver)
        Parameters (inout)            | None
        Parameters (out)              | None
        Return value                  | Std_ReturnType
        Description                   | Map the service WdgIf_SetMode to the service Wdg_SetMode of the corresponding
                                        Watchdog Driver.
        Available via                 | WdgIf.h
      </description>
      <comment>AUTOSAR R20-11 comment | Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_ServiceIds</srcid><srcstatus/><internalId>112</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_32033</srcid><srcstatus/><internalId>114</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00044</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        Service Name       | WdgIf_SetTriggerCondition 
        Syntax             | void WdgIf_SetTriggerCondition (uint8 DeviceIndex, uint16 Timeout)
        Service ID [hex]   | 0x02
        Sync/Async         | Synchronous
        Reentrancy         | Non Reentrant
        Parameters (in)    | DeviceIndex | Identifies the Watchdog Driver instance.
                           | Timeout     | Timeout value (milliseconds) for setting the trigger counter.
        Parameters (inout) | None
        Parameters (out)   | None
        Return value       | None
        Description        | Map the service WdgIf_SetTriggerCondition to the service Wdg_SetTriggerCondition
                             of the corresponding Watchdog Driver.
        Available via      | WdgIf.h
      </description>
      <comment>AUTOSAR R20-11 comment | Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_ServiceIds</srcid><srcstatus/><internalId>112</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_32033</srcid><srcstatus/><internalId>114</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00046</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        Service Name       | WdgIf_GetVersionInfo 
        Syntax             | void WdgIf_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)
        Service ID [hex]   | 0x03
        Sync/Async         | Synchronous
        Reentrancy         | Reentrant
        Parameters (in)    | None
        Parameters (inout) | None
        Parameters (out)   | VersionInfoPtr | Pointer to where to store the version information of this module.
        Return value       | None 
        Description        | Returns the version information.
        Available via      | WdgIf.h
      </description>
      <comment>AUTOSAR R20-11 comment | Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_ServiceIds</srcid><srcstatus/><internalId>112</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_32033</srcid><srcstatus/><internalId>114</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00047</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        API Function            | Header File | Description 
        Wdg_SetMode             | Wdg.h       | Switches the watchdog into the mode Mode.
        Wdg_SetTriggerCondition | Wdg.h       | Sets the timeout value for the trigger counter.
      </description>
      <comment>AUTOSAR R20-11 comment | Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_MandatoryAPIs</srcid><srcstatus/><internalId>101</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00048</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        API Function    | Header File | Description 
        Det_ReportError | Det.h       | Service to report development errors.
      </description>
      <comment>AUTOSAR R20-11 comment | Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_VersionInfo_InvalidParam</srcid><srcstatus/><internalId>94</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_OptionalAPI</srcid><srcstatus/><internalId>102</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00057</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        WdgIf_SetMode shall return the value which it gets from the service Wdg_SetMode of the
        corresponding Watchdog Driver.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_30065</srcid><srcstatus/><internalId>90</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_SingleWdg_SetMode</srcid><srcstatus/><internalId>99</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00999</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        These requirements are not applicable to this specification.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>

    <specobject>
      <id>WdgIf.SWS_WdgIf_00061</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | WdgIf_ModeType 
        Kind          | Enumeration 
        Range         | WDGIF_OFF_MODE | -- | In this mode, the watchdog driver is disabled (switched off)
                      |WDGIF_SLOW_MODE | -- | In this mode, the watchdog driver is set up for a long timeout period (
                       slow triggering)
                      |WDGIF_FAST_MODE | -- | In this mode, the watchdog driver is set up for a short timeout period (
                       fast triggering)
        Description   | Mode type of the WdgIf module 
        Available via | WdgIf.h 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/WdgIf_Types.h_28</srcid><srcstatus/><internalId>71</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_CheckEnum</srcid><srcstatus/><internalId>95</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>

    <specobject>
      <id>WdgIf.ECUC_WdgIf_00033</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_WatchdogInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        Module Name                | WdgIf
        Module Description         | Configuration of the WdgIf (Watchdog Interface) module.
        Post-Build Variant Support | false 
        Supported Config Variants  | VARIANT-PRE-COMPILE 
        Included Containers 
        Container Name             | Multiplicity | Scope / Dependency 
        WdgIfDevice                | 1..*         | It contains the information for the selection of a particular Watchdog
                                                    device in case multiple Watchdog drivers are connected.
        WdgIfGeneral               | 1            | This container collects all generic watchdog interface parameters.
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        (Checked by VSMD checker)
        AUTOSAR R20-11 comment | Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">
     <specobject>
      <id>WdgIf.EB_Ref.WDGIF050.1</id>
      <status>approved</status>
      <source>EB Refinement</source>
      <version>1</version>
      <description>
        The Watchdog Interface shall comprise a configuration header file 'WdgIf_Cfg.h'.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_FileStructure</srcid><srcstatus/><internalId>92</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>51</internalId></specobject>

    <specobject>
      <id>WdgIf.EB_Ref.WDGIF050.2</id>
      <status>approved</status>
      <source>EB Refinement</source>
      <version>1</version>
      <description>
        The configuration header file 'WdgIf_Cfg.h' shall provide the pre-compile
        configuration definitions. </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_CfgMacroDefinitions</srcid><srcstatus/><internalId>104</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>
    
    <specobject>
      <id>WdgIf.EB_Ref.WDGIF006.1</id>
      <status>approved</status>
      <source>EB Refinement</source>
      <version>1</version>
      <description>
        The following development error shall be detectable by the Watchdog Interface.
        Type of error                                        | Relevance  | Related error code    | Value [hex]
        API service called with wrong device index parameter | Development| WDGIF_E_PARAM_DEVICE  | 0x01
      </description>
      <!--
      Checked for:
      - macro definition (TS_WDGIF_MacroDefinitions),
      - WdgIf_SetMode (TS_WDGIF_30033) and
      - WdgIf_SetTriggerCondition (TS_WDGIF_30066)-->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_30033</srcid><srcstatus/><internalId>88</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_30066</srcid><srcstatus/><internalId>89</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_MacroDefinitions</srcid><srcstatus/><internalId>93</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_VersionInfo_InvalidParam</srcid><srcstatus/><internalId>94</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>

    <specobject>
      <id>WdgIf.EB_Ref.WDGIF006.2</id>
      <status>approved</status>
      <source>EB Refinement</source>
      <version>1</version>
      <description>
        The following development error shall be detectable by the Watchdog Interface.
        Type of error                                        | Relevance  | Related error code    | Value [hex]
        Invalid pointer in parameter list                    | Development| WDGIF_E_INV_POINTER   | 0x02
      </description>
      <!--
      Checked for:
      - macro definition (TS_WDGIF_MacroDefinitions) and
      - WdgIf_GetVersionInfo (TS_WDGIF_VersionInfo_InvalidParam)
    -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_MacroDefinitions</srcid><srcstatus/><internalId>93</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>54</internalId></specobject>
    
    <specobject>
      <id>WdgIf.EB_Ref.WDGIF018.1</id>
      <status>approved</status>
      <source>EB Refinement</source>
      <version>1</version>
      <description>
        The Watchdog Interface shall use the parameter DeviceIndex for selection of watchdog drivers.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_30033</srcid><srcstatus/><internalId>88</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_30066</srcid><srcstatus/><internalId>89</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_30065</srcid><srcstatus/><internalId>90</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_30068</srcid><srcstatus/><internalId>91</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>55</internalId></specobject>

    <specobject>
      <id>WdgIf.EB_Ref.WDGIF018.2</id>
      <status>approved</status>
      <source>EB Refinement</source>
      <version>1</version>
      <description>
        If only one watchdog driver is configured, the parameter DeviceIndex shall be ignored.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_SingleWdg_SetMode</srcid><srcstatus/><internalId>99</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_SingleWdg_SetTriggerCond</srcid><srcstatus/><internalId>100</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>56</internalId></specobject>
    
    <specobject>
      <id>WdgIf.EB_Ref.WDGIF034.1</id>
      <status>approved</status>
      <source>EB Refinement</source>
      <version>1</version>
      <description>
        The standardized common published parameters as required by BSW00402 in the SRS
        General on Basic Software Modules [2] shall be published within the header file of this
        module.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_PublishedInformation</srcid><srcstatus/><internalId>86</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>57</internalId></specobject>

    <specobject>
      <id>WdgIf.EB_Ref.WDGIF034.2</id>
      <status>approved</status>
      <source>EB Refinement</source>
      <version>1</version>
      <description>
        The standardized common published parameters as required by BSW00402 in the SRS
        General on Basic Software Modules [2] shall be provided in the BSW Module Description (see
        [7]).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_BSWMD</srcid><srcstatus/><internalId>83</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>58</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>WdgIf.EB.ServiceIds</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        A macro shall be defined for each service ID of a public API by
        WDGIF_SID_&lt;ApiName&gt;.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_ServiceIds</srcid><srcstatus/><internalId>112</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>59</internalId></specobject>

    <specobject>
      <id>WdgIf.EB.BSWMDGeneration_3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The WdgIf module's BSWMD shall be generated using a generator mode named
        "generate_swcd".
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_BSWMD</srcid><srcstatus/><internalId>83</internalId></linkedfrom><linkedfrom><srcid>TS_WdgIf_GenTest_BSWMD</srcid><srcstatus/><internalId>110</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>60</internalId></specobject>

    <specobject>
      <id>WdgIf.EB.NumberOfDevices</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
          The configuration header file 'WdgIf_Cfg.h' shall provide the pre-compile
          configuration definition <code>WDGIF_EB_NUMBER_OF_DEVICES</code> which defines the
          configured number of Watchdog Drivers.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_CfgEBMacroDefinitions</srcid><srcstatus/><internalId>113</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>61</internalId></specobject>

    <specobject>
      <id>WdgIf.EB.CheckVendorApiInfix</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The Watchdog Interface configuration generator shall reject configurations where
        at least two referenced Wdg drivers have the same combination of VendorId and VendorApiInfix
        values.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_GENTEST_01_XdmChecks_Part1</srcid><srcstatus/><internalId>106</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_GENTEST_01_XdmChecks_Part4</srcid><srcstatus/><internalId>109</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>62</internalId></specobject>

    <specobject>
      <id>WdgIf.EB.WdgNamingSeparation</id>
      <status>approved</status>
      <source>General Requirements on Basic Software Modules, V3.2.0, BSW00347</source>
      <version>1</version>
      <description>
        Different instances of Wdg drivers shall provide the naming separation as
        specified by ID BSW00347 of <biblioref linkend="AUTOSAR_SRS_BSWGeneral"/>.
      </description>
      <comment> The final underscore is added with AUTOSAR 4.0, i.e. AUTOSAR 3.1 and 3.2 are
        specified without the final underscore.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_VendorAPIInfixFromBswmdRef</srcid><srcstatus/><internalId>85</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_PublishedInformation</srcid><srcstatus/><internalId>86</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>63</internalId></specobject>
    
    <specobject>
      <id>WdgIf.EB.WdgIfDriverAPIInfixEnable_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall be a pre-compile-time parameter WdgIfDriverAPIInfixEnable which lets WdgIf
        know if Driver API Infix is necessary. This parameter must be true, if there are more
        than one Wdg Drivers configured. API Infix is optional in case there is only one Wdg
        Driver configured.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_WdgIfDriverAPIInfixEnableOff</srcid><srcstatus/><internalId>84</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/WdgIf_Extension.xdm.m4_159</srcid><srcstatus/><internalId>77</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>64</internalId></specobject>
    
    <specobject>
      <id>WdgIf.EB.WdgIfDrvBswImplementationRef_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall be a pre-compile-time parameter WdgIfDrvBswImplementationRef which lets WdgIf
        know the bsw implementation of the Wdg Driver to take the Vendor Id and API Infix.
        Parameter is optional in case there is only one Wdg Driver configured 
        or CommonPublishedInformation is used to get the Vendor Id and API Infix.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_VendorAPIInfixFromBswmdRef</srcid><srcstatus/><internalId>85</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/WdgIf_Extension.xdm.m4_95</srcid><srcstatus/><internalId>76</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>65</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>WdgIf.EB.Interface.Consistency</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        The module shall provide a mechanism to guarantee consistency of interfaces and
        types between its implementation and its code stub.
       </description>
       <comment>
        The code stub of a module shall provide the same external view than the module itself.
        This is mandatory because unit test of modules test against the code stubs of
        adjacent modules. Inconsistent stubs may result in the situation that incompatible
        interfaces are not detected as unit test stage.
       </comment>
       <verifycrit>
        Create a compile test with two permutations that call all interfaces of a module
        (in both permutations).
        p0: Behave like a regular compile test; call the module generator and compile against
        the implementation of the module.
        p1: Do not generate module code and do not compile the implementation of the module.
        Instead the module shall be replaced with its own code stub.
       </verifycrit>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WdgIf_VerifyCodeStub</srcid><srcstatus/><internalId>81</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>66</internalId></specobject>

  </specobjects>
    <specobjects doctype="dev">
    <specobject>
      <id>dev.WdgIf.changeErrId</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>22</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00006</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>67</internalId></specobject>
    <specobject>
      <id>dev.WdgIf.ConsChck</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>56</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>68</internalId></specobject>
    <specobject>
      <id>dev.WdgIf.DebugAndTrace</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>71</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/WdgIf_Cfg.h_33</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/src/Autosar/generate/include/WdgIf_Cfg.h</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>WDGIF.EB.DesignDecision.PreCompileValue1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/WdgIf_Types.h_28</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/src/Autosar/include/WdgIf_Types.h</sourcefile>
      <sourceline>28</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/WdgIf.c.m4_88</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/src/Autosar/src/WdgIf.c.m4</sourcefile>
      <sourceline>88</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>WDGIF.EB.DesignDecision.InternalVariable1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/WdgIf.c.m4_94</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/src/Autosar/src/WdgIf.c.m4</sourcefile>
      <sourceline>94</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>WDGIF.EB.DesignDecision.InternalVariable2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/WdgIf.xdm.m4_79</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/src/Autosar/config/WdgIf.xdm.m4</sourcefile>
      <sourceline>79</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/WdgIf_Extension.xdm.m4_65</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/src/Autosar/config/WdgIf_Extension.xdm.m4</sourcefile>
      <sourceline>65</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/WdgIf_Extension.xdm.m4_95</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/src/Autosar/config/WdgIf_Extension.xdm.m4</sourcefile>
      <sourceline>95</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB.WdgIfDrvBswImplementationRef_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/WdgIf_Extension.xdm.m4_159</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/src/Autosar/config/WdgIf_Extension.xdm.m4</sourcefile>
      <sourceline>159</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB.WdgIfDriverAPIInfixEnable_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>WDGIF.EB.DesignDecision.PreCompileValue1</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/doc/project/design/pdf/EBASCTIMESE-WdgIf-28_Design_Specifcation-profiled.xml</sourcefile>
      <sourceline>2006</sourceline>
      <version>1</version>
      <description>The number of wachdog drivers referenced by WdgIf shall be available  at pre-compile  time, via the switch WDGIF_EB_NUMBER_OF_DEVICES (0-255).</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/WdgIf_Cfg.h_33</srcid><srcstatus/><internalId>70</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_FileStructure</srcid><srcstatus/><internalId>92</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>
    <specobject>
      <id>WDGIF.EB.DesignDecision.InternalVariable1</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/doc/project/design/pdf/EBASCTIMESE-WdgIf-28_Design_Specifcation-profiled.xml</sourcefile>
      <sourceline>2017</sourceline>
      <version>1</version>
      <description>The Watchdog Interface module shall map the service 
WdgIf_SetMode to the service Wdg_SetMode of the corresponding Watchdog 
Driver via the following external global variable:
extern CONST(WdgIf_SetModeFpType, WDGIF_CONST) WdgIf_SetModeFpArray[
   WDGIF_EB_NUMBER_OF_DEVICES]
</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/WdgIf.c.m4_88</srcid><srcstatus/><internalId>72</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_30065</srcid><srcstatus/><internalId>90</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_FileStructure</srcid><srcstatus/><internalId>92</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_SingleWdg_SetMode</srcid><srcstatus/><internalId>99</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>79</internalId></specobject>
    <specobject>
      <id>WDGIF.EB.DesignDecision.InternalVariable2</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/doc/project/design/pdf/EBASCTIMESE-WdgIf-28_Design_Specifcation-profiled.xml</sourcefile>
      <sourceline>2039</sourceline>
      <version>1</version>
      <description>The Watchdog Interface module shall map the service 
WdgIf_SetMode to the service Wdg_SetMode of the corresponding Watchdog 
Driver via the following external global variable:
extern CONST(WdgIf_SetTriggerCondFpType, WDGIF_CONST) WdgIf_TriggerFpArray[
   WDGIF_EB_NUMBER_OF_DEVICES];
</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/WdgIf.c.m4_94</srcid><srcstatus/><internalId>73</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_WDGIF_30068</srcid><srcstatus/><internalId>91</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_FileStructure</srcid><srcstatus/><internalId>92</internalId></linkedfrom><linkedfrom><srcid>TS_WDGIF_SingleWdg_SetTriggerCond</srcid><srcstatus/><internalId>100</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00045</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WdgIf_VerifyCodeStub</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/build/reqm/common_req/WdgIf_VerifyStub_testspec.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the code stub of the module is consistent with the
    implementation.
  
Test Object: 
    Relocatable post-build configuration macros generation.
  
Test Precondition: 
    Permutation [VerifyStub == true]:
      - Unit test contains its own code stub
      - Module is excluded from generation and compilation
    Permutation [VerifyStub == false]:
      - unit test excludes its own code stub
  
Test Execution: 
    01: Invoke all module APIs
    02: VP(WdgIf.EB.Interface.Consistency):
        Unit test compiles (implicitly tested)
  
Test Input: 
  
Test Output: 
    Test is correctly generated and compiled.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB.Interface.Consistency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_ImportedTypes</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Compile/IN/WdgIf_ComTest_04_ImportedTypes/source/application/WdgIf_ComTest_04_ImportedTypes.c</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify that the types listed in WDGIF041 are included:
        Module            Imported Type
      Std_Types       Std_ReturnType
                      Std_VersionInfoType
&lt;/para&gt;

Test Object: None.
Test Precondition: 
  The header file Std_Types.h is available.

Test Execution: 
  01: VP: Instances of the imported types are defined for:
             Std_ReturnType      Std_Return
             Std_VersionInfoType Std_VersionInfo

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_BSWMD</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Compile/IN/WdgIf_ComTest_05_BSWMD/source/application/WdgIf_ComTest_05_SchM.c</sourcefile>
      <sourceline>38</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   This test checks that the WdgIf module's generator generates a
   syntactically and semantically valid basic software module
   description (BSWMD) when the generator mode "generate_swcd" is invoked.
   It further tests that
     - the BswmD contains the standardized common published parameters
   by comparison with a golden reference file.

  Note: The WdgIf module doesn't get use of a SchM exclusive area API
  nor a Main function. Thus, the issue is tested in comparing the generated BSWMD
  with the BSWMD in the reference folder.

Test Object: None.
Test Precondition: 
  Usage of a common ASR configuration having multiple Wdg drivers configured.

Test Execution: 
  VP: Generated WdgIf_Bswmd.arxml corresponds to the reference file.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB.BSWMDGeneration_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>WdgIf.EB_Ref.WDGIF034.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_WdgIfDriverAPIInfixEnableOff</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Compile/IN/WdgIf_ComTest_06_EnableVendorAPIInfixOff/source/application/WdgIf_ComTest.c</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
This test check that if WdgIfDriverAPIInfixEnable is OFF then the WdgIf_SetMode and 
WdgIf_SetTriggerCondition are called correctly.

Test Object: None.
Test Precondition: none
Test Execution: 
  Compile and link test application.

Test Input: None.
Test Output: 
  Module compiles and links without compiler warnings or errors.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB.WdgIfDriverAPIInfixEnable_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>84</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_VendorAPIInfixFromBswmdRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Compile/IN/WdgIf_ComTest_07_VendorAPIInfixFromBswmdRef/source/application/WdgIf_ComTest.c</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
This test check that if WdgIfDrvBswImplementationRef is set then
the WdgIf_SetMode and WdgIf_SetTriggerCondition are called correctly
with the following information taken from Bswmd.
|WdgDriver  | VendorID  | VendorApiInfix  |
|Wdg1       | 1         | Int             |
|Wdg2       | 42        | Ext             |
Note: xdm CommonPublishedInformation have different VendorId and
VendorApiInfix than the one above.
If the information had been taken from CommonPublishedInformation, compilation will had failed.

Test Object: None.
Test Precondition: none
Test Execution: 
  Compile and link test application.

Test Input: None.
Test Output: 
  Module compiles and links without compiler warnings or errors.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB.WdgIfDrvBswImplementationRef_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
        <provcov>
          <linksto>WdgIf.EB.WdgNamingSeparation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>85</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_PublishedInformation</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_01_DualWdg/source/application/WdgIf_ConTest_01_DualWdg.c</sourcefile>
      <sourceline>52</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall check the correct definition of the common published information
    provided in the module header file.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  Test Pass Criteria:
  1. WDGIF_VENDOR_ID is defined
     with the value globally provided by the tooling environment
  2. WDGIF_MODULE_ID is defined with 0x2BU
  3. WDGIF_AR_RELEASE_MAJOR_VERSION is defined
     with the value specified in config.mk
  4. WDGIF_AR_RELEASE_MINOR_VERSION is defined
     with the value specified in config.mk
  5. WDGIF_AR_RELEASE_REVISION_VERSION is defined
     with the value specified in config.mk
  6. WDGIF_SW_MAJOR_VERSION is defined
     with the value specified in config.mk
  7. WDGIF_SW_MINOR_VERSION is defined
     with the value specified in config.mk
  8. WDGIF_SW_PATCH_VERSION is defined
     with the value specified in config.mk

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB_Ref.WDGIF034.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
        <provcov>
          <linksto>WdgIf.EB.WdgNamingSeparation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>86</internalId></specobject>
    <specobject>
      <id>TS_WDGIF_30017</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_01_DualWdg/source/application/WdgIf_ConTest_01_DualWdg.c</sourcefile>
      <sourceline>151</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: WdgIf_ConTest_MultiWdg
Test Description: 
&lt;para&gt;
  Verify if WdgIf_GetVersionInfo returns correct version information
  for enabled development error detection.
  The version information includes: Module Id, Vendor Id, Vendor specific version numbers.
&lt;/para&gt;

Test Object: None.
Test Precondition: 
 - WdgIfDevErrorDetect is enabled
 - WdgIfVersionInfoApi is enabled
 - Macros WDGIF_VENDOR_ID,.. are defined properly
   (see test case TS_WDGIF_PublishedInformation)

Test Execution: 
  01: PduR_GetVersionInfo() is called with valid versionInfo pointer
  02: VP (WdgIf.ASR40.SWS_WdgIf_00035):
      WDGIF_VENDOR_ID, WDGIF_MODULE_ID, WDGIF_SW_MAJOR_VERSION, WDGIF_SW_MINOR_VERSION, and WDGIF_SW_PATCH_VERSION
      are returned by versionInfo and
      no error is reported to DET.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>87</internalId></specobject>
    <specobject>
      <id>TS_WDGIF_30033</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_01_DualWdg/source/application/WdgIf_ConTest_01_DualWdg.c</sourcefile>
      <sourceline>217</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: WdgIf_ConTest_MultiWdg
Test Description: 
&lt;para&gt;
  Call WdgIf_SetMode with invalid DeviceIndex
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  Call WdgIf_SetMode with invalid DeviceIndex
  Check call counter and call arguments of DET stub

Test Input: None.
Test Output: 
  Det_ReportError called with WDGIF_E_PARAM_DEVICE error code and correct parameters.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB_Ref.WDGIF006.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>WdgIf.EB_Ref.WDGIF018.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>88</internalId></specobject>
    <specobject>
      <id>TS_WDGIF_30066</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_01_DualWdg/source/application/WdgIf_ConTest_01_DualWdg.c</sourcefile>
      <sourceline>261</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: WdgIf_ConTest_MultiWdg
Test Description: 
&lt;para&gt;
  Call WdgIf_SetTriggerCondition with invalid DeviceIndex.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  Call WdgIf_SetTriggerCondition with invalid DeviceIndex
  Check call counter and call arguments of DET stub

Test Input: None.
Test Output: 
  Det_ReportError called with WDGIF_E_PARAM_DEVICE error code and correct parameters.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB_Ref.WDGIF006.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>WdgIf.EB_Ref.WDGIF018.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>89</internalId></specobject>
    <specobject>
      <id>TS_WDGIF_30065</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_01_DualWdg/source/application/WdgIf_ConTest_01_DualWdg.c</sourcefile>
      <sourceline>305</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: WdgIf_ConTest_MultiWdg
Test Description: 
&lt;para&gt;
  Verify if underlying Wdg drivers are called by WdgIf_SetMode correctly.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: Call WdgIf_SetMode with DeviceIndex for first driver Wdg_1_Int.
  02 VP: SetMode for Wdg driver Wdg_1_Int was called,
         the return value from the Wdg driver Wdg_1_Int was passed,
         SetMode for Wdg driver Wdg_42_Ext was not called,
         no error was reported to DET.
  03: Call WdgIf_SetMode with DeviceIndex for second driver Wdg_42_Ext.
  04 VP: SetMode for Wdg driver Wdg_42_Ext was called,
         the return value from the Wdg driver Wdg_42_Ext was passed,
         SetMode for Wdg driver Wdg_1_Int was not called,
         no error was reported to DET.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB_Ref.WDGIF018.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>WDGIF.EB.DesignDecision.InternalVariable1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>90</internalId></specobject>
    <specobject>
      <id>TS_WDGIF_30068</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_01_DualWdg/source/application/WdgIf_ConTest_01_DualWdg.c</sourcefile>
      <sourceline>388</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: WdgIf_ConTest_MultiWdg
Test Description: 
&lt;para&gt;
  Verify if underlying Wdg drivers are called by WdgIf_SetTriggerCondition correctly.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: Call WdgIf_SetTriggerCondition with DeviceIndex for first driver Wdg_1_Int.
  02 VP: SetTriggerCondition for Wdg driver Wdg_1_Int was called,
         SetTriggerCondition for Wdg driver Wdg_42_Ext was not called,
         no error was reported to DET.
  03: Call WdgIf_SetTriggerCondition with DeviceIndex for second driver Wdg_42_Ext.
  04 VP: SetTriggerCondition for Wdg driver Wdg_42_Ext was called,
         SetTriggerCondition for Wdg driver Wdg_1_Int was not called,
         no error was reported to DET.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB_Ref.WDGIF018.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>WDGIF.EB.DesignDecision.InternalVariable2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_FileStructure</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_02_FileStructure/source/application/WdgIf_ConTest_02_FileStructure.c</sourcefile>
      <sourceline>32</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  - Verify that source file WdgIf.c exists,
  - Verify that header file WdgIf_Types.h exists with
    common type declarations included (for the Wdg driver) and
    common type declarations for the WdgIf declared,
  - Verify that header file WdgIf.h exists with
    WdgIf_SetMode, WdgIf_SetTriggerCondition and WdgIf_GetVersionInfo declared and
    macros WdgIf_SetMode and WdgIf_SetTriggerCondition defined
  - Verify that header file WdgIf_Cfg.h exists.
  - Verify that header file structure is given according to
    'Figure 1: File include structure of the Watchdog Interface' of the underlying SWS.
    Note, implementation test TS_WDGIF_FileStructure_2 handles the non ASR part
    of the include file structure.
&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Folder 'reference' provides
    - checkWDGIF051.txt (showing WdgIf.c)
    - checkWDGIF010.txt (showing WdgIf_Types.h, inclusion of Std_Types.h and type definition)
    - checkWDGIF001.txt (showing WdgIf.h wit API declarations and definitions)
    - WdgIf_Cfg.h
    - checkWDGIF002.txt (showing include file structure)
  for comparison.

Test Execution: 
  01: VP: WdgIf.c is detected by grep.
  02: VP: WdgIf_Types.h is detected by grep,
          Std_Types.h is included and
          WdgIf_ModeType is declared.
  03: VP: WdgIf.h is detected
          WdgIf_SetMode, WdgIf_SetTriggerCondition and WdgIf_GetVersionInfo are declared
          macros WdgIf_SetMode and WdgIf_SetTriggerCondition are defined.
  04: VP: WdgIf_Cfg.h is generated correctly.
  05: VP: Include file structure is given as described by underlying SWS within
          'Figure 1: File include structure of the Watchdog Interface' apart
          from the indirectly included header files from the Wdg drivers.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00051</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
        <provcov>
          <linksto>WdgIf.EB_Ref.WDGIF050.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
        <provcov>
          <linksto>WDGIF.EB.DesignDecision.PreCompileValue1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>WDGIF.EB.DesignDecision.InternalVariable1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>WDGIF.EB.DesignDecision.InternalVariable2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_MacroDefinitions</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_03/source/application/WdgIf_ConTest_03.c</sourcefile>
      <sourceline>34</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies for enabled configuration parameter WdgIfDevErrorDetect if the macros
  specified by SWS
  - WDGIF_E_PARAM_DEVICE
  - WDGIF_E_INV_POINTER
  - WDGIF_DEV_ERROR_DETECT
  - WDGIF_VERSION_INFO_API
  are defined properly.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01. VP: WDGIF_E_PARAM_DEVICE is defined with value 0x01.
  02. VP: WDGIF_E_INV_POINTER is defined with value 0x02.
  03. VP: WDGIF_DEV_ERROR_DETECT is defined with value STD_ON.
  04. VP: WDGIF_VERSION_INFO_API is defined with value STD_ON.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB_Ref.WDGIF006.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>WdgIf.EB_Ref.WDGIF006.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>
    <specobject>
      <id>TS_WDGIF_VersionInfo_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_03/source/application/WdgIf_ConTest_03.c</sourcefile>
      <sourceline>99</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check if an error is reported by Det_ReportError in development mode when calling
  WdgIf_GetVersionInfo with the parameter versionInfo set to NULL.
&lt;/para&gt;

Test Object: 
  WdgIf_GetVersionInfo()

Test Precondition: None.
Test Execution: 
  01: call WdgIf_GetVersionInfo with pointer to versionInfo set to NULL.
  02: VP (WdgIf.ASR40.SWS_WdgIf_00032): Det_ReportError is called once.
  03: VP (WdgIf.SWS_WdgIf_00006, WdgIf.ASR40.SWS_WdgIf_00058): Det is called with error code
         WDGIF_E_INV_POINTER.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB_Ref.WDGIF006.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>
    <specobject>
      <id>TS_WDGIF_CheckEnum</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_03/source/application/WdgIf_ConTest_03.c</sourcefile>
      <sourceline>151</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if WdgIf_ModeType is defined and macros values WDGIF_OFF_MODE, WDGIF_SLOW_MODE and
  WDGIF_FAST_MODE are passed to the watchdog drivers mode switching function.
  Macros are generated based on EB Coding Guidelines [BSWM_C_020]
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP: enumeration values of WdgIf_ModeType WDGIF_OFF_MODE, WDGIF_SLOW_MODE and WDGIF_FAST_MODE
          are defined as macros.
  02: VP: WDGIF_OFF_MODE is passed as parameter to the Wdg driver mode switching function.
  03: VP: WDGIF_SLOW_MODE is passed as parameter to the Wdg driver mode switching function.
  04: VP: WDGIF_FAST_MODE is passed as parameter to the Wdg driver mode switching function.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>
    <specobject>
      <id>TS_WDGIF_SymbolicNameValues</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_03/source/application/WdgIf_ConTest_03.c</sourcefile>
      <sourceline>214</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    Verify that the symbolic name values of WdgIfDeviceIndex are generated correctly.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
    01: VP: Symbolic name values for WdgIfDeviceIndex are defined correctly.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ECUC_WdgIf_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_MacroDefinitions_DetOff</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_04_DetOff/source/application/WdgIf_ConTest_04_DetOff.c</sourcefile>
      <sourceline>81</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  - This test verifies for disabled configuration parameter WdgIfDevErrorDetect
    if macro WDGIF_DEV_ERROR_DETECT is defined and set to STD_OFF.
  - This test verifies for disabled configuration parameter WdgIfVersionInfoApi
    if macro WDGIF_VERSION_INFO_API is defined and set to STD_OFF.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01. VP: WDGIF_DEV_ERROR_DETECT is defined with value STD_OFF.
  02. VP: WDGIF_VERSION_INFO_API is defined with value STD_OFF.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>
    <specobject>
      <id>TS_WDGIF_EfficientMechanism</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_04_DetOff/source/application/WdgIf_ConTest_04_DetOff.c</sourcefile>
      <sourceline>125</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 

  Verify that in case Development Error Detection is switched off,
  then the API calls are mapped to the appropriate
  watchdog drivers by use of function pointer tables (efficient mechanism).


Test Object: None.
Test Precondition: 

    - Development Error Detection is switched off
    - 2 Watchdog drivers are configured


Test Execution: 

  01: VP (WdgIf.ASR40.SWS_WdgIf_00020)
      The symbol WdgIf_SetMode(DeviceIndex, WdgMode) maps to
      a function pointer array with index DeviceIndex
  02: VP (WdgIf.ASR40.SWS_WdgIf_00020)
      The symbol SetTriggerCondition((DeviceIndex, Timeout) maps to
      a function pointer array with index DeviceIndex
  03: Call WdgIf_SetMode() for first Watchdog driver (DeviceIndex=0)
  04: VP (WdgIf.ASR40.SWS_WdgIf_00020)
      Wdg_SetMode() API of corresponding Watchdog driver is called once
  05: Call WdgIf_SetMode() for second Watchdog driver (DeviceIndex=1)
  06: VP (WdgIf.ASR40.SWS_WdgIf_00020)
      Wdg_SetMode() API of corresponding Watchdog driver is called once
  07: Call WdgIf_SetTriggerCondition() for first Watchdog driver (DeviceIndex=0)
  08: VP (WdgIf.ASR40.SWS_WdgIf_00020)
      Wdg_SetTriggerCondition() API of corresponding Watchdog driver is called once
  09: Call WdgIf_SetTriggerCondition() for second Watchdog driver (DeviceIndex=1)
  10: VP (WdgIf.ASR40.SWS_WdgIf_00020)
      Wdg_SetTriggerCondition() API of corresponding Watchdog driver is called once


Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_SingleWdg_SetMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_05_SingleWdg/source/application/WdgIf_ConTest_05_SingleWdg.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if underlying single Wdg driver is called by WdgIf_SetMode correctly.

  Permutation:
  p0           FALSE       (WdgIfDevErrorDetect disabled)
  p1           TRUE        (WdgIfDevErrorDetect enabled)
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  for different return values of the Wdg driver {E_OK, E_NOT_OK}:
  01: Call WdgIf_SetMode with invalid device index.
  02 VP: SetMode for Wdg driver was called,
         the return value from the Wdg driver was passed,
         no error was reported to DET.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WDGIF.EB.DesignDecision.InternalVariable1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>WdgIf.EB_Ref.WDGIF018.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>
    <specobject>
      <id>TS_WDGIF_SingleWdg_SetTriggerCond</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_05_SingleWdg/source/application/WdgIf_ConTest_05_SingleWdg.c</sourcefile>
      <sourceline>112</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if underlying single Wdg driver is called by WdgIf_SetTriggerCondition correctly.

  Permutation:
  p0           FALSE       (WdgIfDevErrorDetect disabled)
  p1           TRUE        (WdgIfDevErrorDetect enabled)
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: Call WdgIf_SetTriggerCondition with invalid device index.
  02 VP: SetTriggerCondition for Wdg driver was called,
         no error was reported to DET.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WDGIF.EB.DesignDecision.InternalVariable2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>WdgIf.EB_Ref.WDGIF018.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_MandatoryAPIs</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_06_ConfigMinimum/source/application/WdgIf_ConTest_06_ConfigMinimum.c</sourcefile>
      <sourceline>32</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if mandatory APIs Wdg_SetMode and Wdg_SetTriggerCondition are available
    for minimized configuration.
&lt;/para&gt;

Test Object: None.
Test Precondition: 
  - Minimum Configuration with general configuration parameters WdgIfDevErrorDetect and
    WdgIfVersionInfoApi disabled.
  - Single Wdg driver is applied.
  - All APIs of the Wdg stub are disabled in setting the respective
    EBSTUBS_FUNCENABLED_'API_NAME' to STD_OFF,
    except the mandatory Wdg_SetMode and Wdg_SetTriggerCondition.
  - All APIs of the Det stub are disabled in setting the respective
    EBSTUBS_FUNCENABLED_'API_NAME' to STD_OFF, especially Det_ReportError.

Test Execution: 
  01: Call WdgIf_SetMode and WdgIf_SetTriggerCondition.
  02 VP: SetMode and SetTriggerCondition of Wdg driver are called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>
    <specobject>
      <id>TS_WDGIF_OptionalAPI</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_06_ConfigMinimum/source/application/WdgIf_ConTest_06_ConfigMinimum.c</sourcefile>
      <sourceline>82</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if optional API Det_ReportError is not available for minimized configuration.
&lt;/para&gt;

Test Object: None.
Test Precondition: 
  - Minimum Configuration with general configuration parameters WdgIfDevErrorDetect and
    WdgIfVersionInfoApi disabled.
  - Single Wdg driver is applied.
  - All APIs of the Wdg stub are disabled in setting the respective
    EBSTUBS_FUNCENABLED_'API_NAME' to STD_OFF,
    except the mandatory Wdg_SetMode and Wdg_SetTriggerCondition.
  - All APIs of the Det stub are disabled in setting the respective
    EBSTUBS_FUNCENABLED_'API_NAME' to STD_OFF, especially Det_ReportError.

Test Execution: 
  01 VP: All mandatory WdgIf APIs compile without usage of undefined Det_ReportError.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>
    <specobject>
      <id>TS_WDGIF_NoRuntimeOverhead</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_06_ConfigMinimum/source/application/WdgIf_ConTest_06_ConfigMinimum.c</sourcefile>
      <sourceline>122</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if no runtime overhead is implemented to map the different API calls to a single
  watchdog driver.
&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Folder 'reference' provides
    - WdgIf_Cfg.h
    - checkWDGIF019.txt (showing mapping of defined API macros)
  for comparison.

Test Execution: 
  01: VP: No runtime overhead is implemented to map API calls to single Wdg driver.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_CfgMacroDefinitions</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_07/source/application/WdgIf_ConTest_07.c</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies if the AUTOSAR pre-compile time macros
  - WDGIF_DEV_ERROR_DETECT
  - WDGIF_VERSION_INFO_API
  are defined in WdgIf_Cfg.h
&lt;/para&gt;

Test Object: None.
Test Precondition: 

  - Only WdgIf_Cfg.h file from module WdgIf is included in this test file


Test Execution: 
  01. VP: WDGIF_DEV_ERROR_DETECT is defined
  02. VP: WDGIF_VERSION_INFO_API is defined

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB_Ref.WDGIF050.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_NoAdditionalErrorDetection</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Conformance/IN/WdgIf_ConTest_08_NoAdditionalErrorDetection/source/application/WdgIf_ConTest_08.c</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify that no additional error reporting beside reporting
  the error codes WDGIF_E_PARAM_DEVICE and WDGIF_E_INV_POINTER is implemented.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

  - The WdgIf contains only one source file WdgIf.c (checked via TS_WDGIF_FileStructure)
  - Folder 'reference' provides
      checkWDGIF009.txt: contains all implemented calls to Det_ReportError which have only
                         error codes provided via macros WDGIF_E_PARAM_DEVICE and
                         WDGIF_E_INV_POINTER
    for comparison.


Test Execution: 

  01: Extract all calls to "Det_ReportError" (done via macro definition
      WDGIF_DET_REPORT_ERROR) by a grep of all occurrences of
      "Det_Report" (ignore upper/lower case) within WdgIf.c
  02: VP (WdgIf.ASR40.SWS_WdgIf_00009):
      The error codes defined via macros WDGIF_E_PARAM_DEVICE and WDGIF_E_INV_POINTER
      are the only reported errors via DET.
      (test done by comparison via reference file checkWDGIF009.txt)
  03: Sanity check:
      Include the difference of the comparison of all previous steps

Note: If there are differences, then due to Step 03 the included file
contains not compilable content.


Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_GENTEST_01_XdmChecks_Part1</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Generic/IN/WdgIf_GenTest_01_XdmChecks/source/application/test_config.h</sourcefile>
      <sourceline>10</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 

    - This test shall check that the generator reports an error message
      if more than one Wdg driver is referenced and at least
      two drivers have the same VendorId and the same non-empty VendorApiInfix.

  
Test Object: None.
Test Precondition: 
  
Test Execution: 

For test TS_WDGIF_GENTEST_01_XdmChecks_Part1:
    01: Call the project verification (checks invalid configuration parameters)
        via the configuration tool (EB tresos Studio) with the merged invalid configuration with
        three Wdg drivers where two Wdg drivers have the same VendorId
        and the same non-empty VendorApiInfix.
    02: VP (WdgIf.EB.CheckVendorApiInfix)
        The configuration tool (EB tresos Studio)
        reports the error(s) stated in reference file runTest.cfg at ErrorPattern_1.
        The error message is something like:
          The referenced Wdg drivers must have a unique combination of VendorId and API infix.

  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB.CheckVendorApiInfix</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>
    <specobject>
      <id>TS_WDGIF_GENTEST_01_XdmChecks_Part2</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Generic/IN/WdgIf_GenTest_01_XdmChecks/source/application/test_config.h</sourcefile>
      <sourceline>46</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 

    - This test shall check that the generator reports an error message
      if the Device Index does not start with zero.

  
Test Object: None.
Test Precondition: 
  
Test Execution: 

For test TS_WDGIF_GENTEST_01_XdmChecks_Part2:
    01: Call the project verification (checks invalid configuration parameters)
        via the configuration tool (EB tresos Studio) with the merged invalid configuration with
        three Wdg drivers where the Device Index does not start with 0.
    02: VP (WdgIf.SWS_WdgIf_00013)
        The configuration tool (EB tresos Studio)
        reports the error(s) stated in reference file runTest.cfg at ErrorPattern_2.
        The error message is something like:
          IDs must be zero-based and consecutive. The value one less than this value is missing.

  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>
    <specobject>
      <id>TS_WDGIF_GENTEST_01_XdmChecks_Part3</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Generic/IN/WdgIf_GenTest_01_XdmChecks/source/application/test_config.h</sourcefile>
      <sourceline>80</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 

    - This test shall check that the generator reports an error message
      if the Device Index are not consecutive.

  
Test Object: None.
Test Precondition: 
  
Test Execution: 

For test TS_WDGIF_GENTEST_01_XdmChecks_Part3:
    01: Call the project verification (checks invalid configuration parameters)
        via the configuration tool (EB tresos Studio) with the merged invalid configuration with
        three Wdg drivers where the Device Index 1 is missing
        (i.e. starts with 0, then 2, then 3).
    02: VP (WdgIf.SWS_WdgIf_00013)
        The configuration tool (EB tresos Studio)
        reports the error(s) stated in reference file runTest.cfg at ErrorPattern_3.
        The error message is something like:
          IDs must be zero-based and consecutive. The value one less than this value is missing.

  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>
    <specobject>
      <id>TS_WDGIF_GENTEST_01_XdmChecks_Part4</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Generic/IN/WdgIf_GenTest_01_XdmChecks/source/application/test_config.h</sourcefile>
      <sourceline>115</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 

    - This test shall check that the generator reports an error message
      if more than one Wdg driver is referenced and at least
      two drivers have empty VendorApiInfix.

  
Test Object: None.
Test Precondition: 
  
Test Execution: 

For test TS_WDGIF_GENTEST_01_XdmChecks_Part4:
    01: Call the project verification (checks invalid configuration parameters)
        via the configuration tool (EB tresos Studio) with the merged invalid configuration with
        three Wdg drivers where two Wdg drivers have empty VendorApiInfix.
    02: VP (WdgIf.EB.CheckVendorApiInfix)
        The configuration tool (EB tresos Studio)
        reports the error(s) stated in reference file runTest.cfg at ErrorPattern_4.
        The error message is something like:
          The driver specific API infix of the referenced Wdg driver is not available and more than
          one Wdg driver without API infix is configured. There can be at most one Wdg driver 
          without API infix in one project.      

  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB.CheckVendorApiInfix</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WdgIf_GenTest_BSWMD</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Generic/IN/WdgIf_GenTest_BSWMD/source/application/test_config.h</sourcefile>
      <sourceline>3</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   This test checks that the WdgIf module's generator generates a
   syntactically and semantically valid basic software module
   description (BSWMD).

Test Object: None.
Test Precondition: 

Test Execution: 
   This test triggers the checkBSWMD.py from asc_Testing which will check for the 
   syntactically and semantically correctness of the basic software module description (BSWMD).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB.BSWMDGeneration_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_FileStructure_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Implementation/IN/WdgIf_ImpTest_01_FileStructure/source/application/WdgIf_ImpTest_01_FileStructure.c</sourcefile>
      <sourceline>32</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  - Verify that Wdg header files are included indirectly to WdgIf.c.
&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Folder 'reference' provides
    - checkWDGIF002.txt (showing included Wdg driver header files)
    - WdgIf_WdgDrivers.h
  for comparison.

Test Execution: 
  01: VP: header files of Wdg drivers are included indirectly via WdgIf_WdgDrivers.h
          into WdgIf.c.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_ServiceIds</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Implementation/IN/WdgIf_ImpTest_02/source/application/WdgIf_ImpTest_02.c</sourcefile>
      <sourceline>32</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if the service Ids of the APIs are defined as specified.
&lt;/para&gt;

Test Object: None.
Test Precondition: 
  The service IDs of the following APIs are defined:
  - WdgIf_SetMode (WDGIF_SID_SETMODE)
  - WdgIf_SetTriggerCondition (WDGIF_SID_SETTRIGGERCOND)
  - WdgIf_GetVersionInfo (WDGIF_SID_GETVERSIONINFO)

Test Execution: 
  01 VP: The service ID of WdgIf_SetMode is defined with macro
         WDGIF_SID_SETMODE by 0x01.
  02 VP: The service ID of WdgIf_SetTriggerCondition is defined with macro
         WDGIF_SID_SETTRIGGERCOND by 0x02.
  03 VP: The service ID of WdgIf_GetVersionInfo is defined with macro
         WDGIF_SID_GETVERSIONINFO by 0x03.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>WdgIf.EB.ServiceIds</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_CfgEBMacroDefinitions</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Implementation/IN/WdgIf_ImpTest_03_CfgEBMacroDefinition/source/application/WdgIf_ImpTest_03.c</sourcefile>
      <sourceline>35</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 

  This test verifies if the vendor-specific pre-compile time macro
  - WDGIF_EB_NUMBER_OF_DEVICES
  is defined in WdgIf_Cfg.h and the defined value is correct

  This test is executed with the following permutations:
     Parameter / Permutation       |    p0    |    p1    |
  --------------------------------------------|----------|
  Number of Configured Wdg Devices |    1U    |    2U    |


Test Object: None.
Test Precondition: 

  - Only WdgIf_Cfg.h file from module WdgIf is included in this test file


Test Execution: 

  01. VP: WDGIF_EB_NUMBER_OF_DEVICES is defined
  02. VP:
    For permutation p0:
    WDGIF_EB_NUMBER_OF_DEVICES is defined with value 1U
    For permutation p1:
    WDGIF_EB_NUMBER_OF_DEVICES is defined with value 2U


Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.EB.NumberOfDevices</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>113</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_WDGIF_32033</id>
      <status>approved</status>
      <source>EB test case specification (asc_WdgIf)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_WdgIf/test/ts5/Include/WdgIf_CompileTest_Common/source/application/WdgIf_ComTest.c</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: WdgIf_CompileTest_Common
Test Description: 
&lt;para&gt;
  Compile WdgIf for three configurations:
  1) one driver + WdgIfDevErrorDetect=false + WdgIfVersionInfoApi=false: (pure macro implementation)
  2) one driver + WdgIfDevErrorDetect=true + WdgIfVersionInfoApi=true: real functions
  3) two drivers + WdgIfDevErrorDetect=false + WdgIfVersionInfoApi=false: macros and function pointer arrays
&lt;/para&gt;
&lt;para&gt;
  Call all WdgIf API functions (including WdgIf_GetVersionInfo) in test
  application. Link together with a Wdg stub module; if WdgIfDevErrorDetect is
  set to true, link together with a Det stub module.
&lt;/para&gt;

Test Object: None.
Test Precondition: none
Test Execution: 
  Compile and link test application.

Test Input: None.
Test Output: 
  Module compiles and links without compiler warnings or errors.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>WdgIf.SWS_WdgIf_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>WdgIf.ASR40.SWS_WdgIf_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>114</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
