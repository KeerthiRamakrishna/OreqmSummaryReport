<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_FOWorkflow_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/build/reqm/ReqM2_Native/asc_FOWorkflow_requirements_Requirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/build/reqm/ReqM2_GenericImporter/reqm_TCS.reqm</commandline>
    <timestamp>Mon Jun 17 21:59:25 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_FOWorkflow_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/build/reqm/ReqM2_Native/asc_FOWorkflow_requirements_Requirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/build/reqm/ReqM2_GenericImporter/reqm_TCS.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/2018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>feavc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swpad</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swts</regex>
      <regex>pdoc</regex>       <!-- since 10/2018: introduced for updated tracing model-->
      <regex>dev</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swadvc</regex>     <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swuvc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/2020: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>
      <regex>doc</regex>

      <!-- legacy items -->
      <regex>req</regex>        <!-- deprecated 10/2017: old swrs type -->
      <regex>dsn</regex>        <!-- deprecated 10/2017: old swdd -->
      <regex>src</regex>        <!-- deprecated 10/2017: old impl type -->
      <regex>tcs</regex>        <!-- deprecated 10/2017: replaced by swintts and swuts -->
      <regex>dsn_arch</regex>   <!-- deprecated 10/2017: old swad type -->
      <regex>man</regex>
      <regex>tso</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='req') and (../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.rejected</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.count</name>
      <description>Requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.req.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='req') or (../@doctype='swrs')) and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='swdd') or (../@doctype='dsn')) and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.doctypes</name>
      <description>Requirements can be covered only by req, dsn_arch, dev, lim, dsn, src, tcs, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req')]</applyto>
          <condition>(./needscoverage/needsobj="req" or ./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swad, dev, lim, swurs, swdd, src, swuts, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.doctypes</name>
      <description>Design elements can only be covered by dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn')]</applyto>
          <condition>(./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.src.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='src')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="tsc" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes") )</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="dsn_arch" or ./fulfilledby/ffbObj/ffbType="dsn_arch" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>



    <rule>
      <name>ERR.dsn_arch.needscoverage.doctypes</name>
      <description>Architectural design objects can only be covered by dsn_arch, dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn_arch')]</applyto>
          <condition>(./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, req, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
         </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
  </rules>
    <oreqmRules>
          <rule>
            <name>WRN.tsc.needscoverage.count</name>
            <description>Violated if there are more than 10 tsc specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='tcs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='tsc'])) &gt; 10]/furtherinfo</applyto>
                    <regex>tsc.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.req.needscoverage.count</name>
            <description>Violated if there are more than 10 req specobjects covering one specobject and no appropriate information is provided in furtherinfo, refinement on req to req are excluded. Refinements of requirements Req to Req and Req to Fea are excluded from this rule since this is tracing on the same level. The justification in furtherinfo must contain the rule name.</description>
           <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(../@doctype != 'req') and (../@doctype != 'fea') and ((count(./needscoverage/needscov[needsobj='req']/coveredby/linkedfrom)) &gt; 10)]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='req'])) &gt; 10]/furtherinfo</applyto>
                    <regex>req.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
     </rule>

        <rule>
            <name>WRN.src.needscoverage.count</name>
            <description>Violated if there are more than 10 src specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='src']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn_arch.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn_arch specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn_arch']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn_arch'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn_arch.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="req">

    <specobject>
      <id>FOWorkflow.UnattendedWizard</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>There shall be an Unattended Wizard for auto configuration PDU Router.</description>
      <comment>The Unattended Wizard allows an execution via command line or via Tresos GUI.</comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.foworkflow.test.autconfigure.PDUTransferAutoConfigureTest.testGoldenConfigs</srcid><srcstatus/><internalId>50</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>

    <specobject>
      <id>FOWorkflow.ErrorHandling</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>The FOWorkflow shall forward detected internal failure states by passing a set of collected 
      error status objects or by throwing exceptions.</description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>1</internalId></specobject>

    <specobject>
      <id>FOWorkflow.InputFile</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>The FOWorkflow shall accept a csv file as input.</description>
      <comment>The file lists all FO-PDUs to be transferred from QA ComStack to FO-ComStack 
      providing the fields that allow to identify the PDU in the QA ComStack configuration.</comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FOWorkflow.InputFile.Read</srcid><srcstatus/><internalId>3</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>

    <specobject>
      <id>FOWorkflow.InputFile.Read</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>The FOWorkflow shall check if provided path was empty, 
      existing, or pointing to a directory or file with csv extension. For each detected problem, the FOWorkflow 
      shall yield an error status and provide an error description.</description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.foworkflow.tests.ReadWriteTest.testNoInputFilePath</srcid><srcstatus/><internalId>6</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.foworkflow.tests.ReadWriteTest.testInputFileNotFound</srcid><srcstatus/><internalId>7</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.foworkflow.tests.ReadWriteTest.testFilePathIsDirectory</srcid><srcstatus/><internalId>8</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.foworkflow.tests.ReadWriteTest.testInputFileExtension</srcid><srcstatus/><internalId>9</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.foworkflow.tests.ReadWriteTest.testEmptyInputFile</srcid><srcstatus/><internalId>10</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>

    <specobject>
      <id>FOWorkflow.InputFile.Validation</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>The FOWorkflow shall validate the input of given file. For each detected problem, the FOWorkflow 
      shall yield an error status and provide an error description.</description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>eb.tresos.foworkflow.tests.ReadWriteTest.testWrongDelimiters</srcid><srcstatus/><internalId>11</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.foworkflow.tests.ReadWriteTest.testFOPDUValueValidation</srcid><srcstatus/><internalId>12</internalId></linkedfrom><linkedfrom><srcid>eb.tresos.foworkflow.tests.ReadWriteTest.testSuccessfulPduExtract</srcid><srcstatus/><internalId>13</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>

    <specobject>
      <id>FOWorkflow.PDUExtraction</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>The PDUs listed in given in csv file shall be identified in the configuration of modules
      CanIf, Com, PduR, EcuC and merged into the configuration of FO-ComStack.</description>
      <comment>All properties needed for configuration of FO-ComStack shall be retrieved from system model 
      configuration.</comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
      <containerCovstatus>uncovered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>5</internalId></specobject>

  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.ReadWriteTest.testNoInputFilePath</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/CsvFileReaderTest.java</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile.Read</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.ReadWriteTest.testInputFileNotFound</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/CsvFileReaderTest.java</sourcefile>
      <sourceline>55</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile.Read</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.ReadWriteTest.testFilePathIsDirectory</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/CsvFileReaderTest.java</sourcefile>
      <sourceline>82</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile.Read</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.ReadWriteTest.testInputFileExtension</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/CsvFileReaderTest.java</sourcefile>
      <sourceline>105</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile.Read</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.ReadWriteTest.testEmptyInputFile</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/CsvFileReaderTest.java</sourcefile>
      <sourceline>132</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile.Read</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.ReadWriteTest.testWrongDelimiters</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/CsvFileReaderTest.java</sourcefile>
      <sourceline>157</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile.Validation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.ReadWriteTest.testFOPDUValueValidation</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/CsvFileReaderTest.java</sourcefile>
      <sourceline>181</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile.Validation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.ReadWriteTest.testSuccessfulPduExtract</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/CsvFileReaderTest.java</sourcefile>
      <sourceline>221</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.InputFile.Validation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testPdusFromCanIfConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>53</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testPdusFromCanIfConfigValidForFOExtraction</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>149</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoPduValidForFOExtractionInCanIfConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>187</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testPdusNotValidForFOExtraction</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>220</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testMoreThanOneValidCanIfPduMatchFoundForFOPduRep</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>247</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoPdusInCanIfConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>271</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testReferencedHOHNotFoundInCanIfConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>298</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoCCsInCanIfConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>325</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testPduProperties</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>352</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoComIPdusInComConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>422</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoMatchingComIPdusFound</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>449</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoPduRIPdusInPduRConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>477</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoMatchingPduRIPdusFound</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>505</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoPdusInEcuCConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>533</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoMatchingEcuCPdusFound</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>563</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testEcuCNoPduByteLength</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>591</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testPropertySysTPduToFrameMappingRefInComConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>622</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoSignalGroupsInComConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>653</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoMatchingSignalGroupsForComIPduInComConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>683</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testSignalGroupsWithGroupSignalsForComIPduInComConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>714</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoGroupSignalsForSignalGroupInComConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>777</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testPropertyComSystemTemplateSignalGroupRefInComConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>808</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testPropertyComSystemTemplateSystemSignalRefInComConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/ModuleConfigPDUExtractorTest.java</sourcefile>
      <sourceline>839</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.SystemDescriptionTest.testSystemModelImportTest</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/SystemDescriptionTest.java</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testGetExistingFOComPdus</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>43</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testFOComIPduAlreadyExists</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>99</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testFOCanPduCfgAlreadyExists</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>156</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testCreateFOPdus</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>213</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testFoComSignalGroupsAndSignals</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>300</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testFoCanWriteControllerAndProperties</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>331</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testFoCanControllerNoDuplicate</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>380</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testCleanUpCanIfAfterFOExtraction</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>431</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testCleanUpPduRAfterFOExtraction</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>547</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testCleanUpComAfterFOExtraction</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>620</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testComSignalsFoundInComIPduDuringComCleanup</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>727</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.tests.PDUExtractTest.testNoMatchingComIPduFound</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/WriterTest.java</sourcefile>
      <sourceline>772</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.PDUExtraction.SomeSubRequirement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linkerror</linkstatus><linkdestdoctype/><linkerror>referenced object does not exist.</linkerror></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>eb.tresos.foworkflow.test.autconfigure.PDUTransferAutoConfigureTest.testGoldenConfigs</id>
      <status>approved</status>
      <source>EB test case specification (asc_FOWorkflow)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FOWorkflow/test/junit/plugin.Test_FOWorkflowExt.Autosar/Java/eb/tresos/foworkflow/tests/autoconfigure/PDUTransferAutoConfigureTest.java</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FOWorkflow.UnattendedWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
