<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_CanAs_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/build/reqm/ReqM2_Native/asc_CanAs_requirements_Requirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/build/reqm/ReqM2_GenericImporter/reqm_TCS.reqm</commandline>
    <timestamp>Mon Jun 17 21:30:53 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_CanAs_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/build/reqm/ReqM2_Native/asc_CanAs_requirements_Requirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/build/reqm/ReqM2_GenericImporter/reqm_TCS.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/2018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>feavc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swpad</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swts</regex>
      <regex>pdoc</regex>       <!-- since 10/2018: introduced for updated tracing model-->
      <regex>dev</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swadvc</regex>     <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swuvc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/2020: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>
      <regex>doc</regex>

      <!-- legacy items -->
      <regex>req</regex>        <!-- deprecated 10/2017: old swrs type -->
      <regex>dsn</regex>        <!-- deprecated 10/2017: old swdd -->
      <regex>src</regex>        <!-- deprecated 10/2017: old impl type -->
      <regex>tcs</regex>        <!-- deprecated 10/2017: replaced by swintts and swuts -->
      <regex>dsn_arch</regex>   <!-- deprecated 10/2017: old swad type -->
      <regex>man</regex>
      <regex>tso</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='req') and (../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.rejected</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.count</name>
      <description>Requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.req.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='req') or (../@doctype='swrs')) and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='swdd') or (../@doctype='dsn')) and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.doctypes</name>
      <description>Requirements can be covered only by req, dsn_arch, dev, lim, dsn, src, tcs, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req')]</applyto>
          <condition>(./needscoverage/needsobj="req" or ./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swad, dev, lim, swurs, swdd, src, swuts, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.doctypes</name>
      <description>Design elements can only be covered by dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn')]</applyto>
          <condition>(./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.src.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='src')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="tsc" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes") )</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="dsn_arch" or ./fulfilledby/ffbObj/ffbType="dsn_arch" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>



    <rule>
      <name>ERR.dsn_arch.needscoverage.doctypes</name>
      <description>Architectural design objects can only be covered by dsn_arch, dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn_arch')]</applyto>
          <condition>(./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, req, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
         </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
  </rules>
    <oreqmRules>
          <rule>
            <name>WRN.tsc.needscoverage.count</name>
            <description>Violated if there are more than 10 tsc specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='tcs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='tsc'])) &gt; 10]/furtherinfo</applyto>
                    <regex>tsc.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.req.needscoverage.count</name>
            <description>Violated if there are more than 10 req specobjects covering one specobject and no appropriate information is provided in furtherinfo, refinement on req to req are excluded. Refinements of requirements Req to Req and Req to Fea are excluded from this rule since this is tracing on the same level. The justification in furtherinfo must contain the rule name.</description>
           <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(../@doctype != 'req') and (../@doctype != 'fea') and ((count(./needscoverage/needscov[needsobj='req']/coveredby/linkedfrom)) &gt; 10)]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='req'])) &gt; 10]/furtherinfo</applyto>
                    <regex>req.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
     </rule>

        <rule>
            <name>WRN.src.needscoverage.count</name>
            <description>Violated if there are more than 10 src specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='src']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn_arch.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn_arch specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn_arch']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn_arch'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn_arch.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="req">
        <specobject>
            <id>CanWizard.Functional.SupportedAUTOSARReleases</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall support the configuration of
                CanIf/Can Modules compliant with
                AUTOSAR 4.0.
            </description>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.DataObjectTest.testPDU</srcid><srcstatus/><internalId>91</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.DataObjectTest.testHOH</srcid><srcstatus/><internalId>92</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.DataObjectTest.testUnsupportedARVersion</srcid><srcstatus/><internalId>93</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.DataObjectTest.testConfigHandle</srcid><srcstatus/><internalId>94</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentInvalidCC</srcid><srcstatus/><internalId>182</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1001</srcid><srcstatus/><internalId>193</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ModuleConfigHelperTest.testInvalidEcuConfigContext</srcid><srcstatus/><internalId>208</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ModuleConfigHelperTest.testRequestedModuleTypeNotPresentInProject</srcid><srcstatus/><internalId>209</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ModuleConfigHelperTest.testConsumerExecuted</srcid><srcstatus/><internalId>210</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_AutoAssignNoUnassignedPdus</srcid><srcstatus/><internalId>212</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_exceedingCCFilterMasks</srcid><srcstatus/><internalId>213</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>partially</containerCovstatus></needscoverage>
        <violations/><oreqmViolations><ruleid>WRN.tsc.needscoverage.count</ruleid></oreqmViolations><covstatus>partially</covstatus><internalId>0</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.SupportedAUTOSARReleases.CanIf.46</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall support the configuration of
                CanIf Modules compliant with AUTOSAR 4.6/R20-11.
            </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR46CanAutoAssignment</srcid><srcstatus/><internalId>224</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.SupportedAUTOSARReleases.42</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall support the configuration of Can
                Modules compliant with
                AUTOSAR 4.2.
            </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR42CanAutoAssignment</srcid><srcstatus/><internalId>223</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR42CanNoCanHwFilterForTxHOHs</srcid><srcstatus/><internalId>225</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR4042MixedCanAutoAssignment</srcid><srcstatus/><internalId>226</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.SupportedAUTOSARReleases.43</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall support the configuration of Can
                Modules compliant with
                AUTOSAR 4.3.
            </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR4042MixedCanAutoAssignment</srcid><srcstatus/><internalId>226</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.SupportedAUTOSARReleases.44</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall support the configuration of Can
                Modules compliant with
                AUTOSAR 4.4.
            </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR4042MixedCanAutoAssignment</srcid><srcstatus/><internalId>226</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.SupportedAUTOSARReleases.45</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall support the configuration of Can
                Modules compliant with
                AUTOSAR 4.5.
            </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR4042MixedCanAutoAssignment</srcid><srcstatus/><internalId>226</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.SupportedAUTOSARReleases.4x</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall assume that a Can module compliant with 
                AUTOSAR 4.x, x &gt; 5 provides a parameter definition which is compatible with 
                AUTOSAR 4.5.
            </description>
            <comment>
                In the course of the past years, several MCAL vendors incremented the minor release
                version of their Can module without actually changing the configuration parameter
                structure. This in turn forced additional releases that just added the new version
                number without changing anything on how a configuration is read or written.
                Supporting minor versions &gt; 5 while requiring major version == 4 gives MCAL vendors
                more leniency regarding the minor version while keeping the risk for incompatible
                changes in the MCAL configuration low.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR404xMixedCanAutoAssignment</srcid><srcstatus/><internalId>227</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>

        <specobject>
            <id>CanWizard.Functional.HardwareConstraints.ResourceFile</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The hardware constraints of a specific MCU and Can Communication
                Controller, e.g. number of message
                buffers (Hardware Object Handles) must be specified in a resource file
                which is shipped along with the Can Module plugin. These constraints
                must be retrieved at runtime
                by the CAN Buffer Assignment Editor. The "Ecu Resource Manager" of EB
                tresos Studio shall be used. In subsequent
                requirements, this file will be referred to as "resource file".
            </description>
            <comment>
                Can modules on different hardware platforms have different hardware
                constraints. In order to
                keep the CAN Buffer Assignment Editor generic, the hardware constraints
                of a specific platform must be defined in
                a dedicated resource file.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1001</srcid><srcstatus/><internalId>193</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_ErrorOnMissingResourceFile</srcid><srcstatus/><internalId>228</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.HardwareConstraints.NumberOfHOHs</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The number of available Hardware Object Handles (HOHs) must be provided
                in the Can modules
                resource file.
            </description>
            <comment>
                Different Can CCs on different HW platforms usually provide a different
                number of hardware
                buffers (HOHs).
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1001</srcid><srcstatus/><internalId>193</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.HardwareConstraints.HOH.DirType</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                For every available HOH it shall be specified in the resource file
                whether the
                HOH can be solely used for Can Id transmission or reception, or whether
                both directions are supported.
            </description>
            <comment>
                Support platforms which provide rx only and tx only Can buffers.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1001</srcid><srcstatus/><internalId>193</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.HardwareConstraints.FilterMask.NumberOfFilterMasks</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The number of available Hardware Filter Mask registers on MCU and
                Controller level must be
                provided in the resource file.
            </description>
            <comment>
                This enables the support for hardware platforms providing fewer filter
                mask registers than
                Can message buffers and the support of shared filter mask registers on
                MCU level.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1001</srcid><srcstatus/><internalId>193</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.HardwareConstraints.FilterMask.DontCareBitValue</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The Can modules resource file must specify whether a logical zero or
                one indicates
                a don't care bit in the Can CCs filter mask registers.
            </description>
            <comment>
                AUTOSAR did not define the semantics of zeroes and ones in Can filter
                registers. ASR Can implementations
                have been released demanding zeroes as dont care bit, other
                implementations have been released taking
                ones as don't care bit. The CAN Buffer Assignment Editor shall be able
                to operate on both flavors of ASR Can
                implementations, so the information must be read in beforehand.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.hardwareconstraints.PropertyFileTest.testPropertyFile</srcid><srcstatus/><internalId>167</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.hardwareconstraints.filtermask.dontcarebitvalue.HOHAssignmentBackEndTest.testFilterMaskConversionCanonicalToMCAL</srcid><srcstatus/><internalId>168</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.hardwareconstraints.filtermask.dontcarebitvalue.HOHAssignmentBackEndTest.testFilterMaskConversionMCALToCanonical</srcid><srcstatus/><internalId>169</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.hardwareconstraints.filtermask.dontcarebitvalue.HOHAssignmentBackEndTest.testCalcMinFilterMask</srcid><srcstatus/><internalId>170</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.HardwareConstraints.FilterMask.Shift</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The Can modules resource file must specify the number of bits the
                filter mask is shifted.
                There shall be separate shift values for standard and extended Can
                identifiers.
            </description>
            <comment>
                For example the NEC V850 FK3 wants the 11 Bits of a standard CanId (and
                of the filter mask) in
                the 11 MSBs of a 29 bit value (thus the value must be shifted left by
                18 before writing it to
                the config). Also see: https://issue.3soft.de/browse/ASCCANAS-47
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.hardwareconstraints.filtermask.dontcarebitvalue.HOHAssignmentBackEndTest.testFilterMaskConversionCanonicalToMCAL</srcid><srcstatus/><internalId>168</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.hardwareconstraints.filtermask.dontcarebitvalue.HOHAssignmentBackEndTest.testFilterMaskConversionMCALToCanonical</srcid><srcstatus/><internalId>169</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.ReadConfigurationFromXDM</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor must read in the following elements
                from the CanIf Module:
                CommunicationControllers, PDUs, HRHs, HTHs. From the Can Module: Communication Controllers,
                HOHs, FilterMasks.
            </description>
            <comment>
                Read-in preconfigured data for display/use in CAN Buffer Assignment Editor.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1007</srcid><srcstatus/><internalId>197</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1009</srcid><srcstatus/><internalId>198</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_TC_multipleCcConfigAutoAssignment</srcid><srcstatus/><internalId>199</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_readInHRHsWithOwnSharedFMs</srcid><srcstatus/><internalId>211</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_CanFD_CanIdTypes</srcid><srcstatus/><internalId>222</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR42CanAutoAssignment</srcid><srcstatus/><internalId>223</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR46CanAutoAssignment</srcid><srcstatus/><internalId>224</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR42CanNoCanHwFilterForTxHOHs</srcid><srcstatus/><internalId>225</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR4042MixedCanAutoAssignment</srcid><srcstatus/><internalId>226</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.ReadConfigurationFromXDM.CanIfRxPduCanIdType</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor must read in the following the
                following additional enumeration values
                elements from the CanIf parameter CanIfRxPduCanIdType:
                EXTENDED_FD_CAN, EXTENDED_NO_FD_CAN, STANDARD_FD_CAN, STANDARD_NO_FD_CAN.
            </description>
            <comment>
                These new enumeration values have been introduced during CAN FD
                integration and must be handled in CAN Buffer Assignment Editor.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_CanFD_CanIdTypes</srcid><srcstatus/><internalId>222</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.ReadConfigurationFromXDM.CanIfTxPduCanIdType</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor must read in the following the
                following additional enumeration values
                elements from the CanIf parameter CanIfTxPduCanIdType:
                EXTENDED_FD_CAN, STANDARD_FD_CAN.
            </description>
            <comment>
                These new enumeration values have been introduced during CAN FD
                integration and must be handled in CAN Buffer Assignment Editor.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_CanFD_CanIdTypes</srcid><srcstatus/><internalId>222</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.ReadConfigurationFromXDM.MultiCanDriverSupport</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall be able to read in CommunicationController
                containers which refer to two or more Can driver modules.
            </description>
            <comment>
                An Mcu may host different types of CAN cells which are processed by different Can
                driver modules.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testMultiCCMultiCanDriverConfig</srcid><srcstatus/><internalId>230</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>

        <specobject>
            <id>CanWizard.Functional.WriteConfigurationToXDM</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall write back relevant parts of the
                following elements to the CanIf Module:
                PDUs, HRHs, HTHs. To the Can Module: HOHs, FilterMasks. If new HRHs,
                HTHs, HOHs, or FilterMasks are
                added, the CAN Buffer Assignment Editor shall write those new elements
                back to the Can and CanIf configurations.
            </description>
            <comment>
                Write back user-manipulated data. For CanIf PDUs only the reference
                parameter to the
                corresponding HRH/HTH must be written.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1007</srcid><srcstatus/><internalId>197</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1009</srcid><srcstatus/><internalId>198</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_TC_multipleCcConfigAutoAssignment</srcid><srcstatus/><internalId>199</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1014</srcid><srcstatus/><internalId>203</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1016</srcid><srcstatus/><internalId>205</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_WriteNoPduToHohAssignments</srcid><srcstatus/><internalId>215</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR42CanAutoAssignment</srcid><srcstatus/><internalId>223</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR46CanAutoAssignment</srcid><srcstatus/><internalId>224</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR42CanNoCanHwFilterForTxHOHs</srcid><srcstatus/><internalId>225</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR4042MixedCanAutoAssignment</srcid><srcstatus/><internalId>226</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.WriteReadOverlappingHRHsToXDM</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                If an Rx PDU is processed by more than one HRH according to their
                Can-Id, FilterMask and Std/Extended
                configurations, references to all HRHs shall be written into the Rx PDU container
                of CanIf configurations
                &amp;gt;= Autosar 4.0. The algorithm shall write and read in the assigned
                HRHs in a consistent manner.
            </description>
            <comment>
                At runtime, an Rx PDU is always processed by one single HRH even if
                multiple HRHs are assigned. Which
                HRH will actually be used is determined by the Can driver and hardware
                internals. In order to ensure
                proper operation at runtime, the Rx PDU must reference all potential HRH
                candidates. By reading/writing
                the referenced HRHs in a consistent manner it is guaranteed that the
                user always sees the same HRH as
                assigned HRH for a given PDU, even if multiple HRHs can receive the PDU at
                runtime.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1011</srcid><srcstatus/><internalId>200</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1016</srcid><srcstatus/><internalId>205</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1019</srcid><srcstatus/><internalId>206</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.WriteConfigurationToXDM.OptionalFilterMaskRef</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                If CanHardwareObject/CanFilterMaskRef is defined as optional in the schema XDM 
                of a CAN driver, the CAN Buffer
                Assignment Editor shall erase and disable CanFilterMaskRef of Tx
                HOHs or Rx HOHs which do not have a FilterMask defined (= n/a).
            </description>
            <comment>
                The CanFilterMaskRef reference parameter in a CanHardwareObject container
                is provided by CAN driver modules that are implemented according to ASR
                releases before ASR 4.2. Some vendors modelled CanFilterMaskRef as mandatory,
                some as optional.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1012</srcid><srcstatus/><internalId>201</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1013</srcid><srcstatus/><internalId>202</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_FilterMaskRef_SingleElementList</srcid><srcstatus/><internalId>214</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.WriteConfigurationToXDM.OptionalCanHwFilter</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                If a CAN driver is implemented according to ASR 4.2 and newer, the
                CAN Buffer Assignment Editor shall configure CanHwFilter sub containers
                only for CanHardwareObject containers that are used for receiving.
            </description>
            <comment>
                In the CAN SWS, ECUC_Can_00468 indicates that CanHwFilter containers are only
                valid for HRHs/HardwareReceiveHandles.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR42CanNoCanHwFilterForTxHOHs</srcid><srcstatus/><internalId>225</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.WriteConfigurationToXDM.SoftwareFiltering</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                An HRHs CanIfSoftwareFilterHrh parameter shall be disabled if the HRH
                receives exactly one Rx PDU and
                the HRHs CAN Id and FilterMask parameters do not accept any CAN Id
                aside the CAN Ids of the Rx PDU.
                (no unwanted CAN Ids are received).
            </description>
            <comment>
                CanIf software filtering is required to a) filter out "unwanted" Rx PDUs
                and b) determine which
                "wanted" PDU actually has been received by analysing its CAN Id. If a HRH
                configuration guarantees
                that only the single assigned PDU will be received by a HRH, software
                filtering shall be turned off to
                improve runtime performance.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1015</srcid><srcstatus/><internalId>204</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.WriteConfigurationToXDM.HandleIds</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                When the configuration is written to xdm, the Handle Id parameters of
                the CAN HOHs and the
                Handle Id parameters of the CAN Controller objects must be written
                consistently.
            </description>
            <comment>
                The CAN SWS does not specify that there is a relationship between the
                CAN Controller
                Handle Ids and the HOHs of these Controllers. There is a more informal
                requirement on how the
                Handle Ids must be distributed:
                https://www.autosar.org/bugzilla/show_bug.cgi?id=48429#c9.
                Since at least one CAN driver depends on this informal requirement, and
                the HandleId wizard
                as of now does not support this informal requirement, the CanAs must
                implement it.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1011</srcid><srcstatus/><internalId>200</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1012</srcid><srcstatus/><internalId>201</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1013</srcid><srcstatus/><internalId>202</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1014</srcid><srcstatus/><internalId>203</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1015</srcid><srcstatus/><internalId>204</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1016</srcid><srcstatus/><internalId>205</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1019</srcid><srcstatus/><internalId>206</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1020</srcid><srcstatus/><internalId>207</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.WriteConfigurationToXDM.HandleIds.HTHOrdering</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                It shall be configurable by the user whether the HTH handle ids of one
                Can Controller shall be
                distributed in descending priority order or not.
            </description>
            <comment>
                The CAN SWS does not specify how the HTH Ids of a given Can Controller
                shall be ordered.
                However, some Can drivers require the ordering in descending Can Id priority
                (i.e. the
                HTH sending the frame with the lowest Can-Id/highest priority gets the
                first HTH id), to
                avoid that the seinding of higher priority frames is stalled by the
                sending of
                lower priority frames.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentSortHTHs</srcid><srcstatus/><internalId>103</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testWriteHTHsOrdered</srcid><srcstatus/><internalId>229</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.CleanupConfigurationInXDM</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall remove "orphan" entities, i.e.
                CanIf HTHs/HRHs, and Can
                HOHs/FilterMasks, which are not referenced/used by the other entities.
            </description>
            <comment>
                Superfluous entities in the configuration may cause errors in the code
                generation
                step, or unnecessary increase of RAM/ROM footprint.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1007</srcid><srcstatus/><internalId>197</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1009</srcid><srcstatus/><internalId>198</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_TC_multipleCcConfigAutoAssignment</srcid><srcstatus/><internalId>199</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.AutoBufferAssignment</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor must provide a function to
                automatically assign all Rx/Tx PDUs of a
                Can CC which are not yet assigned onto matching HOHs of the CC. If the
                restrictions defined
                by the hardware (modeled in the ECU Resource file) cannot be met by
                the algorithm, an error
                message must be issued and no assignment shall be made at all.
            </description>
            <comment>
                Automatically create a working PDU to HOH assignment, the restrictions on the
                hardware
                shall be applied. The user must be informed if no valid buffer assignment
                could be calculated.
                If the user already has assigned PDUs to HOHs by hand, it would be
                inconvenient if the
                auto assignment algorithm would remove/alter those assignments.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignment</srcid><srcstatus/><internalId>104</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentCAN20CANFDPdus</srcid><srcstatus/><internalId>105</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentTxHOHs</srcid><srcstatus/><internalId>111</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentWithOverlapsAndBufferSharing</srcid><srcstatus/><internalId>112</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentOverlappingRangeRxPDUs</srcid><srcstatus/><internalId>113</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentRangeIntoRxHOH</srcid><srcstatus/><internalId>114</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentRangeIntersectingFullRxHOH</srcid><srcstatus/><internalId>115</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentRangeIntoRxHOH2</srcid><srcstatus/><internalId>116</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentRangeWithIntoRxHOHs</srcid><srcstatus/><internalId>117</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentReAssignmentOnSharedRxHOH</srcid><srcstatus/><internalId>119</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.AutoBufferAssignment.NumberOfHTHs</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                For the automatic PDU/HOH assignment, the number of HOHs that will be
                used for the
                sending of PDUs must be configurable by the user.
            </description>
            <comment>
                If many PDUs are sent by a node, it can be the case that low priority
                Can PDUs are blocking
                the transmission of high priority PDUs. One strategy to overcome this
                priority inversion
                problem is to increase the number of HOHs used for sending.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentTxHOHs</srcid><srcstatus/><internalId>111</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.AutoBufferAssignment.AllowMixedHTHs</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                For the automatic PDU/HOH assignment, it shall be configurable by the
                user if the resulting configuration may
                contain mixed HTHs (PDUs with standard and extended CanIds assiged to the
                same HTH).
            </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentNoMixedHTHs</srcid><srcstatus/><internalId>106</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentNoMixedHTHsTooFewReservedHTHs</srcid><srcstatus/><internalId>107</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentNoMixedHTHsEquallyDistributedHTHs</srcid><srcstatus/><internalId>108</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentNoMixedHTHsPreAssignedConfig</srcid><srcstatus/><internalId>109</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentNoMixedHTHsMixedPreAssignedConfig</srcid><srcstatus/><internalId>110</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1020</srcid><srcstatus/><internalId>207</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.AutoBufferAssignment.BufferSharingOption</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                For the automatic PDU/HOH assignment, it must be configurable for every
                received PDU
                whether it shall be assigned to a dedicated HRH or may alternatively be be
                assigned to a
                shared HRH. The setting whether buffer sharing is allowed or forbidden
                should be stored
                persistently.
            </description>
            <comment>
                Rx PDUs with high importance can be assigned to dedicated HOHs,
                whereas Rx PDUs with low
                importance can be assigned to HOHs which are shared among multiple Rx PDUs.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentWithOverlapsAndBufferSharing</srcid><srcstatus/><internalId>112</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentBufShare</srcid><srcstatus/><internalId>118</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentReAssignmentOnSharedRxHOH</srcid><srcstatus/><internalId>119</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1004</srcid><srcstatus/><internalId>194</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.AutoBufferAssignment.BufferSharingOptionStorage</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The setting whether buffer sharing for a PDU is allowed or not shall be
                stored persistently.
            </description>
            <comment>
                Convenience to the user: Store the "BufferSharingOption" so that the user is
                not forced
                to re-enter it again for every PDU after he closes, then reopens the
                CAN Buffer Assignment Editor.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>29</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.AutoBufferAssignment.PDUControllerStorage</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The Controller via which a PDU is sent or received shall be stored
                persistently outside
                the Can and CanIf module configurations.
            </description>
            <comment>
                Convenience to the user: If the HOH assignment of many/all PDUs is removed by
                hand (i.e. in the Module Editor for Can/CanIf), the PDU to
                Controller relationship
                in the Can and CanIf confgurations is lost since the HOHs link PDUs to
                Controllers.
                If the PDU to Controller relationship is also stored outside the
                Can/CanIf configuration
                files, it can be used to retrieve that relationship again, and the user is
                not forced
                to configure the Controller for each and every PDU over again.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>30</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.AutoBufferAssignment.BufferSharingOption.EnforceForIdenticalCANIDs</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall enforce that the
                "BufferSharingOption" stays at "allowed" for
                received PDUs if they share their CAN Id with another PDU on the same CAN
                channel.
            </description>
            <comment>
                If a CAN 2.0/CAN FD PDU pair that shall be received on the same CAN
                channel via the same CAN
                Id is not assigned to the same HOH, one of the two PDUs won't be
                received since the
                CAN device will store both PDUs on the first HOH that matches the CAN
                Id, whereas the second
                HOH wont store any of the two PDUs.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManuallySetHOHSharingForPDUsSharingCANIds</srcid><srcstatus/><internalId>185</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testResetHOHSharingForPDUsMovedToSameController</srcid><srcstatus/><internalId>186</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.test_BulkChangeHOHSharingWithPDUsOfSameCanId</srcid><srcstatus/><internalId>188</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>partially</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>31</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.AutoBufferAssignment.AllowHRHOverlaps</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The AutoBufferAssignment shall be able to generate assignments in which
                an Rx PDU
                can be processed by more than one HRH if no assignment was found in
                which every
                Rx PDU is processed by exactly one HRH.
            </description>
            <comment>
                It is not always possible to generate valid HRH assignments which
                process all required
                incoming CAN Ids while having a limited set of HRHs to assign and having to
                obey the
                constraint that every CAN Id is processed by exactly one HRH. Since Autosar
                3.0
                CanIf already allows overlapping HRHs (two HRHs process a non-empty
                common set of
                CAN Ids), the CAN Buffer Assignment Editor can generate overlapping
                assignments, if no matching assignment
                was found without overlaps.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentWithOverlapsAndBufferSharing</srcid><srcstatus/><internalId>112</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.AutoBufferAssignment.AllowIdenticalCANIds</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The AutoBufferAssignment shall be able to process Rx PDUs that are
                assigned to
                identical CAN Ids and that are received on the same CAN channel.
                The AutoBufferAssignment shall assign such PDUs to the same HRH.
            </description>
            <comment>
                CAN FD capable CAN devices allow to receive PDUs of a certain CAN Id
                set on a specific
                HOH. The HOHs, however, cannot be configured to only receive CAN 2.0 or
                CAN FD PDUs.
                Therefore a CAN 2.0/CAN FD PDU pair that is received on the same CAN channel
                via the same CAN Id must be assigned to one and the same HOH. Using
                identical
                CAN Ids for CAN 2.0 and CAN FD on the same CAN channel is a GM
                use-case.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentCAN20CANFDPdus</srcid><srcstatus/><internalId>105</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>partially</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>33</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.AutoBufferAssignment.Solution</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The AutoBufferAssignment shall generate a set of solutions. A solution
                constitutes a set of buffer configurations by which all Rx PDUs of a Can CC can 
                be received and all Tx PDUs of a Can CC can be sent.
            </description>
            <comment>
                One specific solution can be obtained by calculating the "disjunctive normal form" (dnf)
                for all standard CAN Ids and the dnf for all extended standard CAN Ids of all PDUs
                which one Can CC is receiving. Each element of both dnfs consitutes a buffer configuration 
                for receiving one or more PDUs. For the PDUS the Can CC is sending, at most two 
                buffer configurations need to be added.
            </comment>
            <needscoverage>
                <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanWizard.Functional.AutoBufferAssignment.Solution.Comparable</srcid><srcstatus/><internalId>35</internalId></linkedfrom><linkedfrom><srcid>CanWizard.Functional.AutoBufferAssignment.Solution.AdaptToHardware</srcid><srcstatus/><internalId>36</internalId></linkedfrom></coveredby></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.MaskValueTest.testMask</srcid><srcstatus/><internalId>124</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.MaskValueTest.testGetNumberOfDifferentCanIdBits</srcid><srcstatus/><internalId>125</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.MaskValueTest.testIntersectionOfExtendedCanIDs</srcid><srcstatus/><internalId>126</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.SolutionTest.testDNF</srcid><srcstatus/><internalId>127</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.SolutionTest.testMinimalDNF</srcid><srcstatus/><internalId>130</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.SolutionTest.testMinimalDNFOverlap</srcid><srcstatus/><internalId>131</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.SolutionTest.testMinimalDNFOverlap2</srcid><srcstatus/><internalId>132</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.AutoBufferAssignment.Solution.Comparable</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                Two Solutions shall be comparable with respect to equality (i.e. that the
                set of buffer configurations of one solution is equivalent to the set of
                buffer configurations of the second one) and with respect to cost (i.e.
                the number of "unwanted" Rx PDUs a solution allows to pass through to the
                Can software stack which then needs to discard them).
            </description>
            <comment>
                If there are several solutions for a list of PDUs a Can CC must receive and
                send, the optimal solution needs be used while solution duplicates can be
                discarded.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.MaskValueTest.testContainment</srcid><srcstatus/><internalId>120</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.MaskValueTest.testPenalty</srcid><srcstatus/><internalId>122</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.MaskValueTest.testEquality</srcid><srcstatus/><internalId>123</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.SolutionTest.testEquality</srcid><srcstatus/><internalId>128</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
              <provcov>
                <linksto>CanWizard.Functional.AutoBufferAssignment.Solution</linksto>
                <dstversion>1</dstversion>
              <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.AutoBufferAssignment.Solution.AdaptToHardware</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                If the buffer configuration of a solution does not match the properties
                of the underlying hardware, it shall be adaptable such that it either
                requires fewer or more buffer configuration elements.
            </description>
            <comment>
                If the underlying hardware does not contain sufficient buffers and/or
                filter mask registers for a given solution, the solution is adapted
                for lower hardware consumption (at the expense of cost). If the 
                underlying hardware provides more buffers and/or filter mask registers
                than a solution requires, a solution can be adapted such that it
                consumes more of the available resources, thereby reducing its cost.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.MaskValueTest.testJoin</srcid><srcstatus/><internalId>121</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.SolutionTest.testSubSolutionGeneration</srcid><srcstatus/><internalId>129</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
            <providescoverage>
              <provcov>
                <linksto>CanWizard.Functional.AutoBufferAssignment.Solution</linksto>
                <dstversion>1</dstversion>
              <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
            </providescoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>


        <specobject>
            <id>CanWizard.Functional.ManualBufferAssignment.AssignRxPDU</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall provide a function by which one
                or more Rx PDUs
                are assigned to a HOH. Before the assignment is actually made, the
                function shall check whether the assignment is possible. If it is
                not possible,
                the user shall be informed by an error message.
            </description>
            <comment>
                Assign one or more Rx PDUs to a HOH. The user shall be informed if the
                assignment is not
                possible.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentRxPDUs</srcid><srcstatus/><internalId>171</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentIllegalRxPDUs</srcid><srcstatus/><internalId>172</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentIllegalRxTxPDUs</srcid><srcstatus/><internalId>173</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentIllegalNoHOHs</srcid><srcstatus/><internalId>175</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentErrors</srcid><srcstatus/><internalId>179</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentInconsistentDir</srcid><srcstatus/><internalId>180</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentErrorsCC</srcid><srcstatus/><internalId>181</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentCAN20CANFDPdusRx</srcid><srcstatus/><internalId>184</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1005</srcid><srcstatus/><internalId>195</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.ManualBufferAssignment.AssignRxPDU.FilterMask</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall use the number of distinct CAN
                Ids the assigned PDUs are using
                to determine whether a FilterMask is required for receiving the PDUs
                or not.
            </description>
            <comment>
                Support the use-case of receiving a CAN 2.0/CAN FD PDU pair on the same CAN
                channel via
                the same CAN Id. For receiving the two PDUs, no FilterMask is required.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentCAN20CANFDPdusRx</srcid><srcstatus/><internalId>184</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.ManualBufferAssignment.AssignTxPDU</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor must provide a function by which one
                or more Tx PDUs
                are assigned to a HOH. Before the assignment is actually made, the
                function must check whether the assignment is possible. If it is not
                possible,
                the user must be informed by an error message.
            </description>
            <comment>
                Assign one or more Tx PDUs to a HOH. The user is informed if the
                assignment is not
                possible.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentTxPDUs</srcid><srcstatus/><internalId>174</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentIllegalNoHOHs</srcid><srcstatus/><internalId>175</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentErrors</srcid><srcstatus/><internalId>179</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentInconsistentDir</srcid><srcstatus/><internalId>180</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentCAN20CANFDPdusTx</srcid><srcstatus/><internalId>183</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1005</srcid><srcstatus/><internalId>195</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.ManualBufferAssignment.AssignTxPDU.CANId</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall use the number of distinct CAN
                Ids the assigned PDUs are using
                to determine whether the HOH CAN Id parameter can be configured
                statically for sending the PDUs.
            </description>
            <comment>
                Support the use-case of sending a CAN 2.0/CAN FD PDU pair on the same CAN
                channel via the
                same CAN Id on the same HTH. For sending the two PDUs, the CAN Id can be
                configured
                statically.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentCAN20CANFDPdusTx</srcid><srcstatus/><internalId>183</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.ManualBufferAssignment.OptimizeFilterMask</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor must provide a function by which the
                Filter Mask and Can Id fields of an
                Rx HOH are set automatically in such a way that all of the assigned
                PDUs are received, but as few as
                possible unwanted PDUs are implicitly received.
            </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.hardwareconstraints.filtermask.dontcarebitvalue.HOHAssignmentBackEndTest.testCalcMinFilterMask</srcid><srcstatus/><internalId>170</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testOptimizeFilterMask</srcid><srcstatus/><internalId>178</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1006</srcid><srcstatus/><internalId>196</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.ManualBufferAssignment.ClearHOH</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor must provide a function by which one
                or more selected HOHs are cleared, i.e.
                all PDU assignments are removed and Can Filter Mask/Can Id parameters
                are reset.
            </description>
            <comment>
                By supporting this function, the user can reset a previously made PDU
                to HOH assignment
                for one or more HOHs.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentClearHOH</srcid><srcstatus/><internalId>177</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.ManualBufferAssignment.ClearPDU</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall provide a function by which one
                or more selected PDUs may be cleared, i.e.
                the assignment to the corresponding HOH is removed.
            </description>
            <comment>
                By supporting this function, the user can reset a previously made PDU
                to HOH assignment
                for one or more PDUs.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentClearPDUs</srcid><srcstatus/><internalId>176</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.ConsistencyChecker</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall perform a consistency check if
                one of the following operations is
                performed in the CAN Buffer Assignment Editor: Manually assign one or more
                PDUs to a HOH, Manually clear a
                PDU or HOH. Change the Filter Mask or Can Id properties of a HOH.
                Perform automatic
                HOH to PDU assignment. The check functions shall be the following ones:
                Check whether
                a PDU has not been assigned to any HOH (warning); check whether any
                HOH has a Filter Mask
                assigned which won't be used (warning), check whether an Rx HOH actually
                receives all of its
                assigned PDUs according to Can Id and Filter Mask Value (warning), check
                whether a Can-Id Range
                Rx PDU is received by multiple HOHs according to Can Id and Filter
                Mask Value (warning),
                check whether any PDU is received by multiple HOHs according to Can Id
                and Filter Mask Value (info).
            </description>
            <comment>
                Any time a relevant change to the configuration is performed, the user
                shall be informed
                whether inconsistencies were resolved, or new inconsistencies were
                introduced.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.consistencycheck.ConsistencyCheckerTest.testConsistencyChecker</srcid><srcstatus/><internalId>164</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1005</srcid><srcstatus/><internalId>195</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1006</srcid><srcstatus/><internalId>196</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.RangeReceptionSupport</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor must consider the Can Id range of
                CanNm Rx PDUs during all operations (Assign/Unassign PDUs,
                AutoAssignment, consistency checks).
            </description>
            <comment>
                In the CanIf multiple CanNm Rx PDUs are modelled using the
                CanIfHrhRangeConfig container.
                CanIfRxPduLowerCanId/CanIfRxPduUpperCanId are used to represent the
                minimum/maximum Can Id
                of these PDUs (Can Id range). This must be considered when calculating
                Filter Mask / Can Id
                values during (auto) assignment and consistency checks.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentOverlappingRangeRxPDUs</srcid><srcstatus/><internalId>113</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentRangeIntoRxHOH</srcid><srcstatus/><internalId>114</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentRangeIntersectingFullRxHOH</srcid><srcstatus/><internalId>115</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentRangeIntoRxHOH2</srcid><srcstatus/><internalId>116</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentRangeWithIntoRxHOHs</srcid><srcstatus/><internalId>117</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.rangereception.RangeReceptionTest.testValidAssignment</srcid><srcstatus/><internalId>189</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.rangereception.RangeReceptionTest.testValidAssignmentAdditionalRxPdu</srcid><srcstatus/><internalId>190</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.rangereception.RangeReceptionTest.testOverlappingFilterMasks</srcid><srcstatus/><internalId>191</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.rangereception.RangeReceptionTest.testInvalidAssignmentFULLHOH</srcid><srcstatus/><internalId>192</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.MultipleConfigurationContainerSupport</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall read/write data only for the
                selected multiple configuration container.
            </description>
            <comment>
                The CAN Buffer Assignment Editor shall support multiple configuration
                containers.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_MultipleConfig</srcid><srcstatus/><internalId>216</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_NoInitCfgs</srcid><srcstatus/><internalId>217</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.BulkChange</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall provide methods for the bulk
                change of the PDU properties "HOH sharing" and "Controller" and the
                HOH property "Controller".
            </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.test_BulkChangeHOHSharing</srcid><srcstatus/><internalId>187</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.test_BulkChangeHOHSharingWithPDUsOfSameCanId</srcid><srcstatus/><internalId>188</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_BulkChangePDUController</srcid><srcstatus/><internalId>218</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_BulkChangeHOHController</srcid><srcstatus/><internalId>219</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_BulkChangeHOHSharing</srcid><srcstatus/><internalId>220</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.MultipleCcConfigs</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall load all controller
                configurations from the Ecu Resource
                file upon startup and be able to switch between them during operation on
                a per
                controller basis. Per default, the first available controller configuration
                shall be
                selected.
            </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_MultipleControllerConfigurations</srcid><srcstatus/><internalId>221</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.UnattendedWizard</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>There shall be an Unattended Wizard for automatic HOH
                assignment.</description>
            <comment>The Unattended Wizard allows an execution via command line.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignment</srcid><srcstatus/><internalId>95</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentDefaultHTHNumber</srcid><srcstatus/><internalId>96</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentDefaultAllowMixedHTHs</srcid><srcstatus/><internalId>97</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentAllCCs</srcid><srcstatus/><internalId>98</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentDoNotAllowMixedHTHs</srcid><srcstatus/><internalId>99</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentErrorInvalidHTHSize</srcid><srcstatus/><internalId>100</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentErrorInvalidCCName</srcid><srcstatus/><internalId>101</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentErrorNoMultiConfigEntry</srcid><srcstatus/><internalId>102</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentSortHTHs</srcid><srcstatus/><internalId>103</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.LaunchCanWizard</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall be started by clicking onto one
                specific GUI element. The GUI element
                represents the CanIf configuration for which the CAN Buffer Assignment Editor
                shall be started.
            </description>
            <comment>
                The CanIf module contains (together with the Can module), the
                configuration elements
                which are read and manipulated by the CAN Buffer Assignment Editor.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>50</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.CanWizardBufAssignmentWindow.ControllerCombobox</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor main window shall contain a Can
                Communication Controller Combo Box.
                The Can Communication Controller Combo Box shall display all
                Communication Controller entries
                found in the CanIf configuration, and one entry
                &amp;quot;&amp;lt;all&amp;gt;&amp;quot;. The PDU and HOH grids
                (see CanWizardBufAssignmentWindow.PDUGrid and
                CanWizardBufAssignmentWindow.HOHGrid shall display
                only PDUs/HOHs of the currently selected controller, or all PDUs/HOHs,
                if &amp;quot;&amp;lt;all&amp;gt;&amp;quot;
                is selected in the ComboBox.
            </description>
            <comment>
                Display the PDU to HOH assignment for a specific controller or for all
                controllers.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>51</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.CanWizardBufAssignmentWindow.PDUHOHFilterCombobox</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor main window shall contain a PDU/HOH
                Filter Combo Box.
                The PDU/HOH Filter Combo Box shall contain the values "None", "Filter
                HOHs of selected PDUs",
                and "Filter PDUs of selected HOHs". Per default, "None" is the selected
                value. If "None" is selected,
                all PDUs/HOHs depending on the Controller Combobox selection are
                displayed. If
                "Filter PDUs of selected HOHs" is selected, only the PDUs which are
                assigned to the currently selected
                HOHs are displayed in the PDU grid. If "Filter HOHs of selected PDUs" is
                selected, only the HOH entries
                assigned to the currently selected PDUs are displayed in the HOH grid.
            </description>
            <comment>
                Filter the HOH/PDU assignment data for one or more specific HOHs or one or
                more specific PDUs.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>52</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.CanWizardBufAssignmentWindow.PDUGrid</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The PDU grid shall display the following properties of a PDU:
                "Name", "Controller" (Short Name of the communication controller the
                assigned HOH belongs to, or
                &amp;quot;&amp;lt;undefined&amp;gt;&amp;quot; if no HOH is currently
                assigned, read-write),
                "Can Id", "Can Id Type" (STANDARD_CAN/EXTENDED_CAN), "Protocol" (CAN
                2.0/CAN FD/ANY),
                "Rx/Tx" (Rx/Tx), "HWObj Handle" (Short Name of the Assigned HOH), (all
                read-only),
                "HOH Sharing" (allowed/forbidden), (read-write).It shall display all
                PDUs matching the currently set
                PDU/HOH Filter and are assigned to the currently selected communication
                controller or have no Communication Controller assigned.
            </description>
            <comment>
                All necessary PDU information is displayed to the user. Parameters
                which are necessary for PDU to HOH assignment
                are read-write, all other parameters are read-only.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>53</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.CanWizardBufAssignmentWindow.PDUGrid.RangeReceptionSupport</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                For CanNm Rx PDUs the PDU grid shall also display the maximum Can Id of
                the defined range in a dedicated column (read only).
                The value of an entry shall remain "n/a" for all other PDUs.
            </description>
            <comment>
                All necessary PDU information is displayed to the user.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>54</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.CanWizardBufAssignmentWindow.HOHGrid</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The HOH grid shall display the following properties of a Hardware
                Object Handle:
                "Name" (r/w), "Controller" (Read/Write only if the HOH is defined on the
                MCU level),
                "Handle Type" indicating the type of the HOH, the supported transmission
                directions,
                and whether the HOH is defined on CC or MCU level ("BASIC/FULL,
                Rx/Tx/Both, CC/MCU") (Read-Only),
                "Can Id Type" (STANDARD/EXTENDED/MIXED) (Read-Only), "Rx/Tx" (Rx/Tx)
                (Read/Write), "# Pdus" (number of currently assigned and wanted
                PDUs),
                "# Can IDs", (total number of CAN Ids handled by the HOH; for BASIC Rx
                HOHs defined by the configured Filter Mask
                and Can Id),
                all read-only; "Filter Mask" (Hexadecimal value or "n/a" for FULL_CAN,
                r/w), "Inv. Filter Mask" (Hexadecimal value or "n/a" for FULL_CAN,
                r/o) "Can Id" (Hexadecimal value or "n/a" for FULL_CAN, r/w) ;
                "MinFilterMask", and "MinCan Id" indicating the minimal filter mask
                and can id register value to support the reception
                of the assigned rx PDUs, (Read-Only).
            </description>
            <comment>
                Collect all relevant and necessary HOH information defined in the Can and
                CanIf modules
                and display it here altogether. Filter Mask and Filter Value may be
                edited for BASIC_CAN HOHs.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>55</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.CanWizardBufAssignmentWindow.HOHGrid.Summary</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                There shall be a status line containing a summary of used, free, and
                unassigned HOHs. The summary shall be shown for the selected
                controller or for all controllers if &amp;lt;all&amp;gt; is
                selected.
                In case no MCU HOHs are availble, the number of unassigned HOHs
                (always 0 in this case) shall not be shown.
            </description>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>56</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.CanWizardBufAssignmentWindow.PDUGrid.Summary</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                There shall be a status line containing a summary of PDUs which are
                unassigned, assigned to one HOH, assigned multiple HOHs. The summary
                shall be shown for the selected controller or for all controllers if
                &amp;lt;all&amp;gt; is selected.
            </description>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>57</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.CanWizardBufAssignmentWindow.ManualAssignment.Buttons</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The buffer assignment window shall contain buttons for the following
                functions: Assign selected PDUs to selected
                HOH. Clear selected PDUs (remove assignment). Clear selected HOHs
                (remove assignment).
            </description>
            <comment>
                By those buttons, assignments can be added/removed manually.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>58</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.CanWizardBufAssignmentWindow.Optimize.Button</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The buffer assignment window shall contain a button for the following
                function: Optimize the Can Id and the Filter
                Mask parameter of one or more selected Rx HOHs.
            </description>
            <comment>
                Calculate the "minimal" Can Id and Filter Mask combination so that an Rx HOH
                can receive its assigned PDUs.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>59</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.CanWizardBufAssignmentWindow.AutoAssignment.AutoAssignButton</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                There shall be one button by which the creation of the Auto PDU to HOH
                assignment is done.
            </description>
            <comment>
                Launch Auto PDU to HOH assignment.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>60</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.CanWizardBufAssignmentWindow.AutoAssignment.EditFields</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The automatic PDU to HOH assignment function shall provide a numeric
                field "Reserved HTHs"
                It indicates the number of Tx HOHs that will be assigned for sending
                PDUs, and has the default value 1.
            </description>
            <comment>
                See CAN Buffer Assignment
                Editor.Functional.AutoBufferAssignment.NumberOfHTHs.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>61</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.CanWizardBufAssignmentWindow.AutoAssignment.AllowMixedHTHs</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The automatic PDU to HOH assignment function shall provide a checkbox
                "allow MIXED HTHs".
                It indicates if the resulting configuration is allowed to contain
                mixed HTHs.
            </description>
            <comment>
                See CAN Buffer Assignment
                Editor.Functional.AutoBufferAssignment.AllowMixedHTHs.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>62</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.CanWizardBufAssignmentWindow.HTHOrdering</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor main window shall provide a checkbox
                by which it can be configured
                whether the HTH handle ids of a Can Controller are written in order of
                descending priority
                or not.
            </description>
            <comment>
                See CAN Buffer Assignment
                Editor.Functional.WriteConfigurationToXDM.HandleIds.HTHOrdering
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>63</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.ResultTab</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                After the CAN Buffer Assignment Editor has been closed by pressing Finish
                a summary of all changed nodes/values shall
                be shown in a dedicated tab under the results tab.
            </description>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>64</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.BulkChange</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall support bulk change for the PDU
                properties "HOH sharing" and "Controller" and the HOH property
                "Controller".
            </description>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>65</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.MultipleCcConfigs</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Buffer Assignment Editor shall support the change of the active
                controller configuration
                per controller if more than one controller configuration is present in
                the Ecu
                Resource file. Per default, the first available controller configuration
                shall be
                selected.
            </description>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>66</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.UnattendedWizardGUI</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>There shall be a GUI for the Unattended Wizard for
                automatic HOH assignment.</description>
            <comment>The Unattended Wizard GUI allows the execution of the
                wizard.</comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>67</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Bit Timing Editor shall support the configuration of Can
                Modules compliant with
                AUTOSAR 4.0.3
            </description>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testInvalidSegments</srcid><srcstatus/><internalId>149</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testInconsistentSegments</srcid><srcstatus/><internalId>150</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testNoSyncJumpWidth</srcid><srcstatus/><internalId>151</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCAN</srcid><srcstatus/><internalId>152</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANSWJMinMaxAlign</srcid><srcstatus/><internalId>153</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD</srcid><srcstatus/><internalId>154</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD2</srcid><srcstatus/><internalId>156</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD2CanFdBitTimingAsSingleElList</srcid><srcstatus/><internalId>157</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanSJWCanFDSJWTrcvDelayTxBitRateSw</srcid><srcstatus/><internalId>158</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanFDTrcvDelayTxBitRateSw</srcid><srcstatus/><internalId>159</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ModuleConfigHelperTest.testInvalidEcuConfigContext</srcid><srcstatus/><internalId>208</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ModuleConfigHelperTest.testRequestedModuleTypeNotPresentInProject</srcid><srcstatus/><internalId>209</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ModuleConfigHelperTest.testConsumerExecuted</srcid><srcstatus/><internalId>210</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>partially</containerCovstatus></needscoverage>
        <violations/><oreqmViolations><ruleid>WRN.tsc.needscoverage.count</ruleid></oreqmViolations><covstatus>partially</covstatus><internalId>68</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases.42</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Bit Timing Editor shall support the configuration of Can
                Modules compliant with
                AUTOSAR 4.2.x and AUTOSAR 4.3.x.
            </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testASR422CanConfiguration</srcid><srcstatus/><internalId>162</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ModuleConfigHelperTest.testInvalidEcuConfigContext</srcid><srcstatus/><internalId>208</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ModuleConfigHelperTest.testRequestedModuleTypeNotPresentInProject</srcid><srcstatus/><internalId>209</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.readwrite.ModuleConfigHelperTest.testConsumerExecuted</srcid><srcstatus/><internalId>210</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases.44</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Bit Timing Editor shall support the configuration of Can
                Modules compliant with AUTOSAR 4.4 and newer.
            </description>
            <comment>
                Since AUTOSAR 4.4, the parameters CanControllerBaudRate, CanControllerFdBaudRate
                are of type floating-point as opposed to 4.3 and older, which used an integer type.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testValidClockRefReadOnlyBaudRatesAsFloat</srcid><srcstatus/><internalId>147</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.RegisterTqOffset</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The offset of the CanControllerPropSeg, CanControllerSeg1,
                CanControllerSeg2, and
                CanControllerSyncJumpWidth parameter values with respect to the actual number of Tqs
                shall be configurable in the resource file.
            </description>
            <comment>
                Some MCAL vendors map the value range [0..7] onto the Tq range of
                [1..8]. In this case
                RegisterTqOffset must be set to 1.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCAN</srcid><srcstatus/><internalId>152</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANSWJMinMaxAlign</srcid><srcstatus/><internalId>153</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD</srcid><srcstatus/><internalId>154</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD2</srcid><srcstatus/><internalId>156</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD2CanFdBitTimingAsSingleElList</srcid><srcstatus/><internalId>157</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanSJWCanFDSJWTrcvDelayTxBitRateSw</srcid><srcstatus/><internalId>158</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanFDTrcvDelayTxBitRateSw</srcid><srcstatus/><internalId>159</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.BitTimingPredicate</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The resource file shall be able to define constraints on bit timing
                configurations that
                involve two or more of the segments CanControllerPropSeg,
                CanControllerSeg1, and CanControllerSeg2
            </description>
            <comment>
                MCAL vendors e.q. require that the total number of Tqs,
                i.e. 1 + CanControllerPropSeg + CanControllerSeg1 + CanControllerSeg2
                lies within a given min/max range.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCAN</srcid><srcstatus/><internalId>152</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANSWJMinMaxAlign</srcid><srcstatus/><internalId>153</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD</srcid><srcstatus/><internalId>154</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD2</srcid><srcstatus/><internalId>156</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD2CanFdBitTimingAsSingleElList</srcid><srcstatus/><internalId>157</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanSJWCanFDSJWTrcvDelayTxBitRateSw</srcid><srcstatus/><internalId>158</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanFDTrcvDelayTxBitRateSw</srcid><srcstatus/><internalId>159</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.hardwareconstraints.BitTimingPredicateTest.testIllegalBitTimingConditions</srcid><srcstatus/><internalId>165</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.BitTiming.ReadConfigurationFromXDM</id>
            <status>approved</status>
            <source>EB</source>
            <version>2</version>
            <description>
                The CAN Bit Timing Editor shall read in a CAN controller's source MCU
                clock rate from the Mcu module;
                the CAN and (if existing) the CAN FD bit timing configuration shall be
                read in from the Can module.
                The CAN bit timing parameters are: CanControllerBaudRate,
                CanControllerPropSeg, CanControllerSeg1,
                CanControllerSeg2, CanControllerSyncJumpWidth.
                The CAN FD bit timing parameters are: CanControllerFdBaudRate ,
                CanControllerPropSeg, CanControllerSeg1,
                CanControllerSeg2, CanControllerSyncJumpWidth,
                one of CanControllerTrcvDelayCompensationOffset or CanControllerSspOffset,
                CanControllerTxBitRateSwitch.
            </description>
            <comment>
                Read-in preconfigured data for display/use in CAN Buffer Assignment Editor.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testInvalidClockRefReadWriteable</srcid><srcstatus/><internalId>145</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testValidClockRefReadOnly</srcid><srcstatus/><internalId>146</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testValidClockRefReadOnlyBaudRatesAsFloat</srcid><srcstatus/><internalId>147</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testNoSyncJumpWidth</srcid><srcstatus/><internalId>151</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanFDSsp</srcid><srcstatus/><internalId>160</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanFDSsp2</srcid><srcstatus/><internalId>161</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testASR422CanConfiguration</srcid><srcstatus/><internalId>162</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.BitTiming.DetectInvalidConfigurationInXDM</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Bit Timing Editor shall detect invalid/inconsistent configuration data
                when reading in CAN and MCU configuration data.
            </description>
            <comment>
                Report an error message if data is missing and/or read in data is inconsistent,
                if no valid bit timing can be retrieved form the input, display an empty 
                bit timing grid.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testNoCanController</srcid><srcstatus/><internalId>142</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testNoBaudRate</srcid><srcstatus/><internalId>143</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testZeroClockRate</srcid><srcstatus/><internalId>144</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testInvalidBaudRateClockRateRatio</srcid><srcstatus/><internalId>148</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testInvalidSegments</srcid><srcstatus/><internalId>149</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testInconsistentSegments</srcid><srcstatus/><internalId>150</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.BitTiming.WriteConfigurationToXDM</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Bit Timing Editor shall write back the CAN and (if existing)
                the CAN FD bit timing parameters
                that the user has configured.
            </description>
            <comment>
                Write back user-manipulated data.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanSJWCanFDSJWTrcvDelayTxBitRateSw</srcid><srcstatus/><internalId>158</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanFDTrcvDelayTxBitRateSw</srcid><srcstatus/><internalId>159</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanFDSsp</srcid><srcstatus/><internalId>160</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanFDSsp2</srcid><srcstatus/><internalId>161</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testASR422CanConfiguration</srcid><srcstatus/><internalId>162</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.BitTiming.BitTimingConfigs.Generate</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Bit Timing Editor shall derive the set of possible CAN/CAN-FD
                (CanControllerPropSeg, CanControllerSeg1, CanControllerSeg2) bit
                timing configuration
                tuples from the source MCU clock rate of the Controller and the baud rate
                of the CAN
                network the Controller is attached to.
            </description>
            <comment>
                A (CanControllerPropSeg, CanControllerSeg1, CanControllerSeg2) must
                be consistent w.r.t. the
                constraints defined in the CAN/CAN-FD specifications and w.r.t the baud rate
                and MCU clock rate.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CalculatorTest.testCANBitTimings</srcid><srcstatus/><internalId>137</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CalculatorTest.testCANFDBitTimings</srcid><srcstatus/><internalId>138</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CalculatorTest.testPrescalerCalculationConditions</srcid><srcstatus/><internalId>139</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CalculatorTest.testBitTimingConfig</srcid><srcstatus/><internalId>140</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CalculatorTest.testBaudRateClockRateChecks</srcid><srcstatus/><internalId>141</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSafeDecimalDivision</srcid><srcstatus/><internalId>163</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.BitTiming.BitTimingConfigs.Filter.SegmentRange</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Bit Timing Editor shall filter out a (CanControllerPropSeg,
                CanControllerSeg1, CanControllerSeg2)
                bit timing configuration if it contains at least one parameter value
                that is outside of the
                value range that the Can module allows. The allowed value ranges shall be
                read in from the
                CAN schema .xdm file of the module.
            </description>
            <comment>
                MCAL modules are allowed to constrain the value ranges of the parameters
                of a bit timing
                configuration. The CAN Bit Timing Editor shall only configure bit timing
                configurations yielding
                parameter values within the MCAL's allowed ranges.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.BitTimingSegmentPredicateTest.testRanges</srcid><srcstatus/><internalId>133</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.BitTimingSegmentPredicateTest.testPredicates</srcid><srcstatus/><internalId>134</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.BitTiming.BitTimingConfigs.Filter.SegmentConstraints</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Bit Timing Editor shall filter out a (CanControllerPropSeg,
                CanControllerSeg1, CanControllerSeg2)
                bit timing configuration if it contains a parameter value set that does
                not conform to any
                rules the MCAL module is defining. These rules must be defined in the
                resource file.
            </description>
            <comment>
                MCAL modules are defining rules defining the relationship between two or
                more of the
                parameters CanControllerPropSeg, CanControllerSeg1, CanControllerSeg2 (e.g.
                &amp;quot;1 + CanControllerPropSeg + CanControllerSeg1 +
                CanControllerSeg2 &amp;lt;= 25&amp;quot;)
                The CAN Bit Timing Editor shall only configure bit timing
                configurations adhering to those
                rules.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.hardwareconstraints.BitTimingPredicateTest.testIllegalBitTimingConditions</srcid><srcstatus/><internalId>165</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.hardwareconstraints.BitTimingPredicateTest.testComparisonOperators</srcid><srcstatus/><internalId>166</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.BitTiming.BitTimingConfigs.Filter.SystemConstraints</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Bit Timing Editor shall provide the option to filter out a
                (CanControllerPropSeg, CanControllerSeg1, CanControllerSeg2)
                bit timing configuration if it contains at least one parameter value
                that is outside of the
                value range that the imported system model allows. The allowed value
                ranges shall be read in from the
                system model of the configuration project.
            </description>
            <comment>
                OEMs are defining allowed parameter ranges via AUTOSAR system
                description files. The user shall have
                the option to additionally filter out configurations that do not lie
                within the parameter ranges the
                OEM requires.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCAN</srcid><srcstatus/><internalId>152</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANSWJMinMaxAlign</srcid><srcstatus/><internalId>153</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD</srcid><srcstatus/><internalId>154</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD2</srcid><srcstatus/><internalId>156</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD2CanFdBitTimingAsSingleElList</srcid><srcstatus/><internalId>157</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>79</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.BitTiming.BitTimingConfigs.CanControllerSyncJumpWidth</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Bit Timing Editor shall allow the user to configure the
                CAN/CAN-FD parameter CanControllerSyncJumpWidth
                within the value range defined by the MCAL module, by the constraints
                imposed by the CAN/CAN-FD specifications,
                and (if selected by the user) by the constraints imposed by the
                imported system model.
            </description>
            <comment>
                MCALs may define a restrictive value range for
                CanControllerSyncJumpWidth, the CAN/CAN-FD specifications
                require e.g. that the CanControllerSyncJumpWidth must not be larger than
                the minimum of
                CanControllerSeg1 and CanControllerSeg2. The requirements defined in the system model
                can, if desired by the
                user, further constrain the value range.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANSWJMinMaxAlign</srcid><srcstatus/><internalId>153</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD</srcid><srcstatus/><internalId>154</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD2</srcid><srcstatus/><internalId>156</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD2CanFdBitTimingAsSingleElList</srcid><srcstatus/><internalId>157</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanSJWCanFDSJWTrcvDelayTxBitRateSw</srcid><srcstatus/><internalId>158</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanFDTrcvDelayTxBitRateSw</srcid><srcstatus/><internalId>159</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.BitTiming.BitTimingConfigs.TrcvDelayComp</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Bit Timing Editor shall allow the user to configure the CAN-FD
                parameter CanControllerTrcvDelayCompensationOffset
                within the value range defined by the MCAL module, by the constraints
                imposed by the CAN-FD specifications,
                and (if selected by the user) by the constraints imposed by the
                imported system model. The requirements defined in
                the system model can, if desired by the user, further constrain the
                value range. The user shall also be able to
                disable the parameter.
            </description>
            <comment>
                The MCAL is allowed to restrict the parameter range. Moreover the
                parameter is optional.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanSJWCanFDSJWTrcvDelayTxBitRateSw</srcid><srcstatus/><internalId>158</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanFDTrcvDelayTxBitRateSw</srcid><srcstatus/><internalId>159</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>
        <specobject>
            <id>CanWizard.Functional.BitTiming.BitTimingConfigs.CanControllerSspOffset</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                If the underlying Can driver module provides the parameter CanControllerSspOffset, which
                supersedes CanControllerTrcvDelayCompensationOffset, the CAN Bit Timing Editor shall allow 
                the user to configure that parameter within the value range defined by the MCAL module, 
                by the constraints 
                imposed by the CAN-FD specifications,
                and (if selected by the user) by the constraints imposed by the
                imported system model. The requirements defined in
                the system model can, if desired by the user, further constrain the
                value range. The user shall also be able to
                disable the parameter.
            </description>
            <comment>
                The MCAL is allowed to restrict the parameter range. Moreover the
                parameter is optional. Since CanControllerSspOffset is provided in Tqs,
                and CanControllerTrcvDelayCompensationOffset is given in ns, the
                ranges are converted from ns to Tq upfront.
            </comment>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFDSsp</srcid><srcstatus/><internalId>155</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>

        <specobject>
            <id>CanWizard.Functional.BitTiming.BitTimingConfigs.CanControllerTxBitRateSwitch</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Bit Timing Editor shall allow the user to configure the CAN-FD
                parameter CanControllerTxBitRateSwitch
                within the value range defined by the MCAL module, and (if selected by the
                user) by the constraints
                imposed by the imported system model.
            </description>
            <needscoverage>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanSJWCanFDSJWTrcvDelayTxBitRateSw</srcid><srcstatus/><internalId>158</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanFDTrcvDelayTxBitRateSw</srcid><srcstatus/><internalId>159</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>covered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.BitTiming.LaunchCanWizard</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Bit Timing Editor shall be started by clicking onto one
                specific GUI element. The GUI element
                represents the Can module configuration for which the CAN Bit Timing Editor
                shall be started.
            </description>
            <comment>
                The Can module contains (together with the Mcu module), the
                configuration elements
                which are read and manipulated by the CAN Buffer Assignment Editor.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>84</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.BitTiming.ControllerCombobox</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Bit Timing Editor main window shall contain a Can Communication
                Controller Combo Box.
                It shall display all Communication Controller entries found in the Can
                configuration.
            </description>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>85</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.BitTiming.SystemModelReqsFilter</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN Bit Timing Editor main window shall contain a check box that
                allows the user to
                decide whether the properties of the bit timing configurations must be
                conform with
                the requirements specified in the system model.
            </description>
            <comment>
                The system model requirements help to further reduce the set of
                possible bit timing
                configurations. If the system model requirements are broken, the user must have the
                possibility to deselect this option.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
            <containerCovstatus>uncovered</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>uncovered</covstatus><internalId>86</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.BitTiming.CANBitTimingGrid</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                The CAN bit timing grid shall display the possible CAN bit timing
                configurations of the
                controller that is currently selected in the Can Communication Controller
                Combo Box.
                It shall display the following properties:
                Number of Tqs per bit, lengths of the CanControllerPropSeg,
                CanControllerSeg1, CanControllerSeg2,
                and CanControllerSyncJumpWidth parameters in units of one Tq, the
                position of the Sample point
                given in percent of the duration of the whole bit time.
                The CanControllerSyncJumpWidth shall be read/write, all other
                parameters shall be read-only.
            </description>
            <comment>
                Allow to configure a consistent (CanControllerPropSeg, CanControllerSeg1,
                CanControllerSeg2) tuple,
                then adapt the CanControllerSyncJumpWidth.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.BitTimingSegmentPredicateTest.testEnforceConformingVals</srcid><srcstatus/><internalId>136</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>partially</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>87</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.BitTiming.SystemRequirements.CAN</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                There shall be a text field displaying the CAN baud rate of the CAN bus
                the selected controller is
                attached to and bit timing configuration constraints that the system model
                of the project is defining.
            </description>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.BitTimingSegmentPredicateTest.testFilterInfo</srcid><srcstatus/><internalId>135</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCAN</srcid><srcstatus/><internalId>152</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANSWJMinMaxAlign</srcid><srcstatus/><internalId>153</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>partially</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>88</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.BitTiming.CANFDBitTimingGrid</id>
            <status>approved</status>
            <source>EB</source>
            <version>2</version>
            <description>
                The CAN-FD bit timing grid shall display the possible CAN-FD bit timing
                configurations of the
                controller that is currently selected in the Can Communication Controller
                Combo Box.
                It shall display the properties listed in the CANBitTimingGrid
                requirement,
                moreover it shall display the read-write parameters
                CanControllerSspOffset and
                CanControllerTxBitRateSwitch.
                CanControllerSspOffset shall accept any
                non-negative
                value that lies within the parameter range the MCAL module defines.
                Positive numerical values
                lying outside the valid range must be corrected to the nearest valid
                value.
                Non-numerical or negative numerical values shall be interpreted as if the
                parameter was not defined.
                CanControllerTxBitRateSwitch shall be configurable to true or false.
            </description>
            <comment>
                Allow to configure a consistent (CanControllerPropSeg, CanControllerSeg1,
                CanControllerSeg2) tuple,
                then adapt the CanControllerSyncJumpWidth, CanControllerTxBitRateSwitch,
                and
                CanControllerSspOffset. If the CanDriver still provides CanControllerTrcvDelayCompensationOffset,
                the CanControllerSspOffset is converted from Tq to ns before it is written.
            </comment>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.BitTimingSegmentPredicateTest.testEnforceConformingVals</srcid><srcstatus/><internalId>136</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>partially</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>89</internalId></specobject>
        <specobject>
            <id>CanWizard.GUI.BitTiming.SystemRequirements.CANFD</id>
            <status>approved</status>
            <source>EB</source>
            <version>1</version>
            <description>
                If the selected controller is attached to a CAN-FD bus, a text field
                shall display the CAN-FD baud rate
                of the attached bus and the bit timing configuration constraints that
                the system model of the project is defining.
            </description>
            <needscoverage>
                <needscov><needsobj>man</needsobj><objcovstatus>uncovered</objcovstatus><coveredby/></needscov>
                <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.BitTimingSegmentPredicateTest.testFilterInfo</srcid><srcstatus/><internalId>135</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD</srcid><srcstatus/><internalId>154</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD2</srcid><srcstatus/><internalId>156</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD2CanFdBitTimingAsSingleElList</srcid><srcstatus/><internalId>157</internalId></linkedfrom></coveredby></needscov>
            <containerCovstatus>partially</containerCovstatus></needscoverage>
        <violations/><oreqmViolations/><covstatus>partially</covstatus><internalId>90</internalId></specobject>
    </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.DataObjectTest.testPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/DataObjectTest.java</sourcefile>
      <sourceline>41</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.DataObjectTest.testHOH</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/DataObjectTest.java</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.DataObjectTest.testUnsupportedARVersion</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/DataObjectTest.java</sourcefile>
      <sourceline>132</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.DataObjectTest.testConfigHandle</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/DataObjectTest.java</sourcefile>
      <sourceline>160</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignment</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autconfigure/CanAsAutoConfigureTest.java</sourcefile>
      <sourceline>34</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.UnattendedWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentDefaultHTHNumber</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autconfigure/CanAsAutoConfigureTest.java</sourcefile>
      <sourceline>50</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.UnattendedWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentDefaultAllowMixedHTHs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autconfigure/CanAsAutoConfigureTest.java</sourcefile>
      <sourceline>66</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.UnattendedWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentAllCCs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autconfigure/CanAsAutoConfigureTest.java</sourcefile>
      <sourceline>82</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.UnattendedWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentDoNotAllowMixedHTHs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autconfigure/CanAsAutoConfigureTest.java</sourcefile>
      <sourceline>98</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.UnattendedWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentErrorInvalidHTHSize</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autconfigure/CanAsAutoConfigureTest.java</sourcefile>
      <sourceline>113</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.UnattendedWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentErrorInvalidCCName</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autconfigure/CanAsAutoConfigureTest.java</sourcefile>
      <sourceline>129</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.UnattendedWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentErrorNoMultiConfigEntry</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autconfigure/CanAsAutoConfigureTest.java</sourcefile>
      <sourceline>144</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.UnattendedWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autconfigure.CanAsAutoConfigureTest.testUnattendedAutoHOHAssignmentSortHTHs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autconfigure/CanAsAutoConfigureTest.java</sourcefile>
      <sourceline>161</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.UnattendedWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM.HandleIds.HTHOrdering</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignment</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/AutoAssignmentTest.java</sourcefile>
      <sourceline>47</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentCAN20CANFDPdus</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/AutoAssignmentTest.java</sourcefile>
      <sourceline>79</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.AllowIdenticalCANIds</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentNoMixedHTHs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/AutoAssignmentTest.java</sourcefile>
      <sourceline>131</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.AllowMixedHTHs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentNoMixedHTHsTooFewReservedHTHs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/AutoAssignmentTest.java</sourcefile>
      <sourceline>163</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.AllowMixedHTHs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentNoMixedHTHsEquallyDistributedHTHs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/AutoAssignmentTest.java</sourcefile>
      <sourceline>188</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.AllowMixedHTHs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentNoMixedHTHsPreAssignedConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/AutoAssignmentTest.java</sourcefile>
      <sourceline>219</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.AllowMixedHTHs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentNoMixedHTHsMixedPreAssignedConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/AutoAssignmentTest.java</sourcefile>
      <sourceline>270</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.AllowMixedHTHs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentTxHOHs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/AutoAssignmentTest.java</sourcefile>
      <sourceline>305</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.NumberOfHTHs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentWithOverlapsAndBufferSharing</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/AutoAssignmentTest.java</sourcefile>
      <sourceline>335</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.AllowHRHOverlaps</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.BufferSharingOption</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentOverlappingRangeRxPDUs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/AutoAssignmentTest.java</sourcefile>
      <sourceline>387</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.RangeReceptionSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>113</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentRangeIntoRxHOH</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/AutoAssignmentTest.java</sourcefile>
      <sourceline>413</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.RangeReceptionSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>114</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentRangeIntersectingFullRxHOH</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/AutoAssignmentTest.java</sourcefile>
      <sourceline>470</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.RangeReceptionSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>115</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentRangeIntoRxHOH2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/AutoAssignmentTest.java</sourcefile>
      <sourceline>510</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.RangeReceptionSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>116</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentRangeWithIntoRxHOHs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/AutoAssignmentTest.java</sourcefile>
      <sourceline>548</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.RangeReceptionSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>117</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentBufShare</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/AutoAssignmentTest.java</sourcefile>
      <sourceline>595</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.BufferSharingOption</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>118</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.AutoAssignmentTest.testAutoAssignmentReAssignmentOnSharedRxHOH</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/AutoAssignmentTest.java</sourcefile>
      <sourceline>612</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.BufferSharingOption</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>119</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.MaskValueTest.testContainment</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/MaskValueTest.java</sourcefile>
      <sourceline>98</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.Solution.Comparable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>120</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.MaskValueTest.testJoin</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/MaskValueTest.java</sourcefile>
      <sourceline>132</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.Solution.AdaptToHardware</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>121</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.MaskValueTest.testPenalty</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/MaskValueTest.java</sourcefile>
      <sourceline>164</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.Solution.Comparable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>122</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.MaskValueTest.testEquality</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/MaskValueTest.java</sourcefile>
      <sourceline>182</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.Solution.Comparable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>123</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.MaskValueTest.testMask</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/MaskValueTest.java</sourcefile>
      <sourceline>209</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.Solution</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>124</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.MaskValueTest.testGetNumberOfDifferentCanIdBits</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/MaskValueTest.java</sourcefile>
      <sourceline>232</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.Solution</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>125</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.MaskValueTest.testIntersectionOfExtendedCanIDs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/MaskValueTest.java</sourcefile>
      <sourceline>245</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.Solution</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>126</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.SolutionTest.testDNF</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/SolutionTest.java</sourcefile>
      <sourceline>405</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.Solution</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>127</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.SolutionTest.testEquality</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/SolutionTest.java</sourcefile>
      <sourceline>430</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.Solution.Comparable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>128</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.SolutionTest.testSubSolutionGeneration</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/SolutionTest.java</sourcefile>
      <sourceline>455</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.Solution.AdaptToHardware</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>129</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.SolutionTest.testMinimalDNF</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/SolutionTest.java</sourcefile>
      <sourceline>510</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.Solution</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>130</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.SolutionTest.testMinimalDNFOverlap</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/SolutionTest.java</sourcefile>
      <sourceline>534</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.Solution</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>131</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.autobufferassignment.SolutionTest.testMinimalDNFOverlap2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/autobufferassignment/SolutionTest.java</sourcefile>
      <sourceline>557</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.Solution</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>132</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.BitTimingSegmentPredicateTest.testRanges</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/BitTimingSegmentPredicateTest.java</sourcefile>
      <sourceline>41</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.Filter.SegmentRange</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>133</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.BitTimingSegmentPredicateTest.testPredicates</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/BitTimingSegmentPredicateTest.java</sourcefile>
      <sourceline>68</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.Filter.SegmentRange</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>134</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.BitTimingSegmentPredicateTest.testFilterInfo</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/BitTimingSegmentPredicateTest.java</sourcefile>
      <sourceline>145</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.GUI.BitTiming.SystemRequirements.CAN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
        <provcov>
          <linksto>CanWizard.GUI.BitTiming.SystemRequirements.CANFD</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>135</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.BitTimingSegmentPredicateTest.testEnforceConformingVals</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/BitTimingSegmentPredicateTest.java</sourcefile>
      <sourceline>194</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.GUI.BitTiming.CANFDBitTimingGrid</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
        <provcov>
          <linksto>CanWizard.GUI.BitTiming.CANBitTimingGrid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>136</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CalculatorTest.testCANBitTimings</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CalculatorTest.java</sourcefile>
      <sourceline>37</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.Generate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>137</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CalculatorTest.testCANFDBitTimings</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CalculatorTest.java</sourcefile>
      <sourceline>81</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.Generate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>138</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CalculatorTest.testPrescalerCalculationConditions</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CalculatorTest.java</sourcefile>
      <sourceline>126</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.Generate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>139</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CalculatorTest.testBitTimingConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CalculatorTest.java</sourcefile>
      <sourceline>146</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.Generate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>140</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CalculatorTest.testBaudRateClockRateChecks</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CalculatorTest.java</sourcefile>
      <sourceline>174</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.Generate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>141</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testNoCanController</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>135</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.DetectInvalidConfigurationInXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>142</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testNoBaudRate</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>153</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.DetectInvalidConfigurationInXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>143</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testZeroClockRate</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>172</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.DetectInvalidConfigurationInXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>144</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testInvalidClockRefReadWriteable</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>193</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.ReadConfigurationFromXDM</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>145</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testValidClockRefReadOnly</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>235</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.ReadConfigurationFromXDM</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>146</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testValidClockRefReadOnlyBaudRatesAsFloat</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>267</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.ReadConfigurationFromXDM</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases.44</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>147</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testInvalidBaudRateClockRateRatio</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>299</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.DetectInvalidConfigurationInXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>148</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testInvalidSegments</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>318</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.DetectInvalidConfigurationInXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>149</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testInconsistentSegments</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>343</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.DetectInvalidConfigurationInXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>150</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testNoSyncJumpWidth</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>368</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.ReadConfigurationFromXDM</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>151</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCAN</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>395</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.RegisterTqOffset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.BitTimingPredicate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.Filter.SystemConstraints</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CanWizard.GUI.BitTiming.SystemRequirements.CAN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>152</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANSWJMinMaxAlign</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>453</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.RegisterTqOffset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.BitTimingPredicate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.Filter.SystemConstraints</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CanWizard.GUI.BitTiming.SystemRequirements.CAN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.CanControllerSyncJumpWidth</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>514</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.RegisterTqOffset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.BitTimingPredicate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.Filter.SystemConstraints</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CanWizard.GUI.BitTiming.SystemRequirements.CANFD</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.CanControllerSyncJumpWidth</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFDSsp</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>607</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.CanControllerSspOffset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>671</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.RegisterTqOffset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.BitTimingPredicate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.Filter.SystemConstraints</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CanWizard.GUI.BitTiming.SystemRequirements.CANFD</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.CanControllerSyncJumpWidth</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSystemModelRequirementsCANFD2CanFdBitTimingAsSingleElList</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>691</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.RegisterTqOffset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.BitTimingPredicate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.Filter.SystemConstraints</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CanWizard.GUI.BitTiming.SystemRequirements.CANFD</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.CanControllerSyncJumpWidth</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>157</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanSJWCanFDSJWTrcvDelayTxBitRateSw</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>788</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.RegisterTqOffset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.BitTimingPredicate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.WriteConfigurationToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.CanControllerSyncJumpWidth</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.TrcvDelayComp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.CanControllerTxBitRateSwitch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>158</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanFDTrcvDelayTxBitRateSw</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>886</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.RegisterTqOffset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.BitTimingPredicate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.WriteConfigurationToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.CanControllerSyncJumpWidth</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.TrcvDelayComp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.CanControllerTxBitRateSwitch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>159</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanFDSsp</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>942</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.WriteConfigurationToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.ReadConfigurationFromXDM</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>160</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testUpdateCanFDSsp2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>967</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.WriteConfigurationToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.ReadConfigurationFromXDM</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>161</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testASR422CanConfiguration</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>1048</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.ReadConfigurationFromXDM</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases.42</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.WriteConfigurationToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>162</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.bittiming.CanAsBitTimingWizardTest.testSafeDecimalDivision</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/bittiming/CanAsBitTimingWizardTest.java</sourcefile>
      <sourceline>1071</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.Generate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>163</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.consistencycheck.ConsistencyCheckerTest.testConsistencyChecker</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/consistencycheck/ConsistencyCheckerTest.java</sourcefile>
      <sourceline>152</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ConsistencyChecker</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>164</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.hardwareconstraints.BitTimingPredicateTest.testIllegalBitTimingConditions</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/hardwareconstraints/BitTimingPredicateTest.java</sourcefile>
      <sourceline>24</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.Filter.SegmentConstraints</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.HardwareConstraints.MCU.BitTimingPredicate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>165</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.hardwareconstraints.BitTimingPredicateTest.testComparisonOperators</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/hardwareconstraints/BitTimingPredicateTest.java</sourcefile>
      <sourceline>64</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.BitTimingConfigs.Filter.SegmentConstraints</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>166</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.hardwareconstraints.PropertyFileTest.testPropertyFile</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/hardwareconstraints/PropertyFileTest.java</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.HardwareConstraints.FilterMask.DontCareBitValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>167</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.hardwareconstraints.filtermask.dontcarebitvalue.HOHAssignmentBackEndTest.testFilterMaskConversionCanonicalToMCAL</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/hardwareconstraints/filtermask/dontcarebitvalue/HOHAssignmentBackEndTest.java</sourcefile>
      <sourceline>70</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.HardwareConstraints.FilterMask.DontCareBitValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.HardwareConstraints.FilterMask.Shift</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>168</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.hardwareconstraints.filtermask.dontcarebitvalue.HOHAssignmentBackEndTest.testFilterMaskConversionMCALToCanonical</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/hardwareconstraints/filtermask/dontcarebitvalue/HOHAssignmentBackEndTest.java</sourcefile>
      <sourceline>246</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.HardwareConstraints.FilterMask.DontCareBitValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.HardwareConstraints.FilterMask.Shift</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>169</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.hardwareconstraints.filtermask.dontcarebitvalue.HOHAssignmentBackEndTest.testCalcMinFilterMask</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/hardwareconstraints/filtermask/dontcarebitvalue/HOHAssignmentBackEndTest.java</sourcefile>
      <sourceline>440</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.HardwareConstraints.FilterMask.DontCareBitValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.OptimizeFilterMask</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>170</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentRxPDUs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>93</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignRxPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>171</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentIllegalRxPDUs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>131</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignRxPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>172</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentIllegalRxTxPDUs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>171</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignRxPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>173</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentTxPDUs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>217</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignTxPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>174</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentIllegalNoHOHs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>254</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignTxPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignRxPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>175</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentClearPDUs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>280</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.ClearPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>176</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentClearHOH</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>344</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.ClearHOH</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>177</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testOptimizeFilterMask</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>391</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.OptimizeFilterMask</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>178</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentErrors</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>445</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignRxPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignTxPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>179</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentInconsistentDir</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>483</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignRxPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignTxPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>180</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentErrorsCC</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>516</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignRxPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>181</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentInvalidCC</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>551</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>182</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentCAN20CANFDPdusTx</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>600</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignTxPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignTxPDU.CANId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>183</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManualAssignmentCAN20CANFDPdusRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>644</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignRxPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignRxPDU.FilterMask</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>184</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testManuallySetHOHSharingForPDUsSharingCANIds</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>696</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.BufferSharingOption.EnforceForIdenticalCANIDs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>185</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.testResetHOHSharingForPDUsMovedToSameController</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>736</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.BufferSharingOption.EnforceForIdenticalCANIDs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>186</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.test_BulkChangeHOHSharing</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>789</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BulkChange</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>187</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.manualbufferassignment.ManualAssignmentTest.test_BulkChangeHOHSharingWithPDUsOfSameCanId</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/manualbufferassignment/ManualAssignmentTest.java</sourcefile>
      <sourceline>830</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BulkChange</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.BufferSharingOption.EnforceForIdenticalCANIDs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>188</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.rangereception.RangeReceptionTest.testValidAssignment</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/rangereception/RangeReceptionTest.java</sourcefile>
      <sourceline>88</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.RangeReceptionSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>189</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.rangereception.RangeReceptionTest.testValidAssignmentAdditionalRxPdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/rangereception/RangeReceptionTest.java</sourcefile>
      <sourceline>131</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.RangeReceptionSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>190</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.rangereception.RangeReceptionTest.testOverlappingFilterMasks</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/rangereception/RangeReceptionTest.java</sourcefile>
      <sourceline>175</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.RangeReceptionSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>191</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.rangereception.RangeReceptionTest.testInvalidAssignmentFULLHOH</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/rangereception/RangeReceptionTest.java</sourcefile>
      <sourceline>231</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.RangeReceptionSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>192</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1001</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/MigratedGUITests1Test.java</sourcefile>
      <sourceline>49</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.HardwareConstraints.ResourceFile</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.HardwareConstraints.NumberOfHOHs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.HardwareConstraints.HOH.DirType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.HardwareConstraints.FilterMask.NumberOfFilterMasks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>193</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1004</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/MigratedGUITests1Test.java</sourcefile>
      <sourceline>99</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.BufferSharingOption</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>194</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1005</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/MigratedGUITests1Test.java</sourcefile>
      <sourceline>167</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignRxPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.AssignTxPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.ConsistencyChecker</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>195</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1006</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/MigratedGUITests1Test.java</sourcefile>
      <sourceline>424</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ConsistencyChecker</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.ManualBufferAssignment.OptimizeFilterMask</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>196</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1007</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/MigratedGUITests1Test.java</sourcefile>
      <sourceline>514</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ReadConfigurationFromXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.CleanupConfigurationInXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>197</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_1009</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/MigratedGUITests1Test.java</sourcefile>
      <sourceline>613</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ReadConfigurationFromXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.CleanupConfigurationInXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>198</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests1Test.test_TC_multipleCcConfigAutoAssignment</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/MigratedGUITests1Test.java</sourcefile>
      <sourceline>684</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ReadConfigurationFromXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.CleanupConfigurationInXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>199</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1011</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/MigratedGUITests2Test.java</sourcefile>
      <sourceline>49</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.WriteReadOverlappingHRHsToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM.HandleIds</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>200</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1012</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/MigratedGUITests2Test.java</sourcefile>
      <sourceline>123</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM.OptionalFilterMaskRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM.HandleIds</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>201</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1013</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/MigratedGUITests2Test.java</sourcefile>
      <sourceline>195</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM.OptionalFilterMaskRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM.HandleIds</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>202</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1014</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/MigratedGUITests2Test.java</sourcefile>
      <sourceline>240</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM.HandleIds</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>203</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1015</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/MigratedGUITests2Test.java</sourcefile>
      <sourceline>332</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM.SoftwareFiltering</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM.HandleIds</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>204</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1016</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/MigratedGUITests2Test.java</sourcefile>
      <sourceline>475</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteReadOverlappingHRHsToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM.HandleIds</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>205</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1019</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/MigratedGUITests2Test.java</sourcefile>
      <sourceline>585</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.WriteReadOverlappingHRHsToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM.HandleIds</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>206</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.MigratedGUITests2Test.test_1020</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/MigratedGUITests2Test.java</sourcefile>
      <sourceline>633</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.AutoBufferAssignment.AllowMixedHTHs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM.HandleIds</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>207</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ModuleConfigHelperTest.testInvalidEcuConfigContext</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ModuleConfigHelperTest.java</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases.42</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>208</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ModuleConfigHelperTest.testRequestedModuleTypeNotPresentInProject</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ModuleConfigHelperTest.java</sourcefile>
      <sourceline>57</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases.42</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>209</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ModuleConfigHelperTest.testConsumerExecuted</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ModuleConfigHelperTest.java</sourcefile>
      <sourceline>78</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.BitTiming.SupportedAUTOSARReleases.42</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>210</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_readInHRHsWithOwnSharedFMs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>54</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ReadConfigurationFromXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>211</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_AutoAssignNoUnassignedPdus</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>89</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>212</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_exceedingCCFilterMasks</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>119</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>213</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_FilterMaskRef_SingleElementList</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>153</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM.OptionalFilterMaskRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>214</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_WriteNoPduToHohAssignments</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>200</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>215</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_MultipleConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>226</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.MultipleConfigurationContainerSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>216</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_NoInitCfgs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>277</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.MultipleConfigurationContainerSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>217</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_BulkChangePDUController</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>311</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BulkChange</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>218</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_BulkChangeHOHController</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>374</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BulkChange</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>219</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_BulkChangeHOHSharing</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>447</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.BulkChange</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>220</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_MultipleControllerConfigurations</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>497</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.MultipleCcConfigs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>221</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_CanFD_CanIdTypes</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>557</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ReadConfigurationFromXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.ReadConfigurationFromXDM.CanIfRxPduCanIdType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.ReadConfigurationFromXDM.CanIfTxPduCanIdType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>222</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR42CanAutoAssignment</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>597</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases.42</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.ReadConfigurationFromXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>223</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR46CanAutoAssignment</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>638</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases.CanIf.46</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.ReadConfigurationFromXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>224</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR42CanNoCanHwFilterForTxHOHs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>677</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases.42</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.ReadConfigurationFromXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM.OptionalCanHwFilter</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>225</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR4042MixedCanAutoAssignment</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>742</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases.42</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases.43</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases.44</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases.45</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.ReadConfigurationFromXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>226</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testASR404xMixedCanAutoAssignment</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>784</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.SupportedAUTOSARReleases.4x</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>227</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.test_ErrorOnMissingResourceFile</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>813</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.HardwareConstraints.ResourceFile</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>228</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testWriteHTHsOrdered</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>846</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.WriteConfigurationToXDM.HandleIds.HTHOrdering</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>229</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>dreisoft.tresos.canwizard.test.readwrite.ReadWriteTest.testMultiCCMultiCanDriverConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanAs)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanAs/test/junit/plugin.Test_CanAsExt.Autosar/Java/dreisoft/tresos/canwizard/test/readwrite/ReadWriteTest.java</sourcefile>
      <sourceline>875</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanWizard.Functional.ReadConfigurationFromXDM.MultiCanDriverSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>230</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
