<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_DoIP_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_public_modulereference_integration_req.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_requirements_DoIP_EB_Requirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_requirements_DoIP_Refinement.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_requirements_DoIP_SWS_4_1_3.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_requirements_DoIP_SWS_BSWGeneral_Refinement.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_requirements_DoIP_SWS_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_requirements_DoIP_SWS_R21_11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_requirements_DoIP_SWS_R23_11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_requirements_manConfTests.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/common_req/DoIP_DbgInst_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/common_req/DoIP_PbcfgM_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/common_req/DoIP_PduLengthType_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/common_req/DoIP_PostBuildSelectable_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/common_req/DoIP_VerifyStub_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_DocBookImporter/reqm_SWDD.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</commandline>
    <timestamp>Mon Jun 17 21:28:26 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_DoIP_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_public_modulereference_integration_req.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_requirements_DoIP_EB_Requirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_requirements_DoIP_Refinement.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_requirements_DoIP_SWS_4_1_3.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_requirements_DoIP_SWS_BSWGeneral_Refinement.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_requirements_DoIP_SWS_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_requirements_DoIP_SWS_R21_11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_requirements_DoIP_SWS_R23_11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_Native/asc_DoIP_requirements_manConfTests.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/common_req/DoIP_DbgInst_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/common_req/DoIP_PbcfgM_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/common_req/DoIP_PduLengthType_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/common_req/DoIP_PostBuildSelectable_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/common_req/DoIP_VerifyStub_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_DocBookImporter/reqm_SWDD.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/1018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>swpad</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swts</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/1010: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>

      <!-- legacy items -->
      <regex>dev</regex>
      <regex>man</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>
    <!-- The Ruleset for RMP4.0 is currently identical to the previous rule set. This rule is
        intoduce to show that the right file is uses. It will be removed when the RMP4.0 rule set is
    reworked -->
    <rule>
      <name>INFO.Rule set RMP4.0</name>
      <description>This rules indicates that RMP4.0 rule set is used.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.general.doctypes</name>
      <description>The used doctype is not part of the tracing model</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobjects/@doctype</applyto>
          <condition>((. != 'creq') or (. != 'fea') or (. != 'swpad') or (. != 'swts') or (. != 'swrs') or (. !='swad') or (. != 'swintts') or (.!= 'swdd') or (. != 'swurs') or (. != 'swmts') or (. != 'swuts') or (. != 'impl') or (. != 'dev') or (. != 'man') or (. != 'lim'))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected.coverage</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.count</name>
      <description>Unit requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swrs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swurs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd') and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.doctypes</name>
      <description>Requirements can be covered only by swurs, swad, dev, lim, swdd, impl, swuts, swmts, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs')]</applyto>
          <condition>(./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swurs, swad, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swuts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swmts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swintts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.impl.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='impl')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes"))</condition>
        </conditioncheck>
      </conditionchecks>
          </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

  </rules>
    <oreqmRules>

        <rule>
            <name>WRN.swts.needscoverage.count</name>
            <description>Violated if there are more than 10 swts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.man.needscoverage.count</name>
            <description>Violated if there are more than 10 man specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>man.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swintts.needscoverage.count</name>
            <description>Violated if there are more than 10 swintts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swintts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swmts.needscoverage.count</name>
            <description>Violated if there are more than 10 swmts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swmts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swuts.needscoverage.count</name>
            <description>Violated if there are more than 10 swuts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swuts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swpad.needscoverage.count</name>
            <description>Violated if there are more than 10 swpad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swpad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.needscoverage.count</name>
            <description>Violated if there are more than 10 swrs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.needscoverage.count</name>
            <description>Violated if there are more than 10 swad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.needscoverage.count</name>
            <description>Violated if there are more than 10 swurs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.needscoverage.count</name>
            <description>Violated if there are more than 10 swdd specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.impl.needscoverage.count</name>
            <description>Violated if there are more than 10 impl specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>impl.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swrs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.fulfilledby.count</name>
            <description>Violated if there are more than 10 swad specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swurs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.fulfilledby.count</name>
            <description>Violated if there are more than 10 swdd specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="lim">
    <specobject>
      <id>DoIP.EB_INTREQ_DoIP_0001</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The reinitialization process shall not interrupt other module functions.
        If reinitialization of the module is required, the call of
        <function>DoIP_Init()</function> shall not interrupt other module functions.
      </description>
      <rationale>
        The reinitialization process resets all internal variables. Continuing an interrupted
        module function after reinitialization can lead to undefined module behavior.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>

    <specobject>
      <id>DoIP.EB_INTREQ_DoIP_0002</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        <function>DoIP_Init()</function> shall not be preempted by any other module API calls.
        It needs to be ensured that the function call <function>DoIP_Init()</function> is not
        preempted by any other module API calls.
      </description>
      <rationale>
        During the call of <function>DoIP_Init()</function> global variables and pointers get
        initialized. It is easy for the integrator to avoid this preemption, thus no data protection
        mechanism has been implemented for function <function>DoIP_Init()</function>.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>

    <specobject>
      <id>DoIP.EB_INTREQ_DoIP_0003</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The following parameters have to be manually configured:
        <ul>
          <li>DoIPRoutingActivation</li>
          <li>DoIPEid, DoIPGid, DoIPLogicalAddress</li>
          <li>DoIPTester</li>
        </ul>
      </description>
      <rationale>
        A Com transformer for <application>DoIP</application> is available which creates
        a local ECU configuration based on the system description.
        Only those parameters have to be manually configured.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>

    <specobject>
      <id>DoIP.EB_INTREQ_DoIP_0004</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        In case configuration parameter DoIPGeneral/DoIPRteUsage is disabled, user provided
        power mode callback function include file shall contain definition of
        DoIP_PowerStateType according to [SWS_DoIP_00266], i.e. it needs to contain
        the following code:

        #define DOIP_NOT_READY      0x00U
        #define DOIP_READY          0x01U
        #define DOIP_NOT_SUPPORTED  0x02U
        typedef uint8 DoIP_PowerStateType;

        In case Rte usage is enabled, RTE will generate above mentioned definitions.
      </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>

    <specobject>
      <id>DoIP.EB_INTREQ_DoIP_0005</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>3</version>
      <description>
        <para>
          The integrator shall ensure that <code>DoIP</code> lower layer functions and
          <code>DoIP</code> main functions do not preempt each other.
        </para>
        <para>
          List of <code>DoIP</code> lower layer:
          <code>DoIP_SoAdIfRxIndication()</code>, <code>DoIP_SoAdIfTxConfirmation()</code>,
          <code>DoIP_SoAdTpStartOfReception()</code>, <code>DoIP_SoAdTpCopyRxData()</code>,
          <code>DoIP_SoAdTpRxIndication()</code>, <code>DoIP_SoAdTpCopyTxData()</code>,
          <code>DoIP_SoAdTpTxConfirmation()</code>, <code>DoIP_SoConModeChg()</code>,
          <code>DoIP_LocalIpAddrAssignmentChg()</code>
        </para>
        <para>
          List of <code>DoIP</code> main functions:
          <code>DoIP_MainFunction()</code>
          <code>DoIP_MainFunctionTx()</code>
        </para>
        <para>
          In the classic AUTOSAR environment this can be achieved by setting
          EthIf and Eth driver in polling mode
          (e.g. disabling of <code>EthIfEnableRxInterrupt</code>,
          <code>EthCtrlEnableRxInterrupt</code>, <code>EthIfEnableTxInterrupt</code> and
          <code>EthCtrlEnableTxInterrupt</code>) to enforce that lower layer API are called only in
          context of main functions. In addition all Eth stack main functions (e.g.
          <code>EthIf_MainFunctionRx()</code>, <code>EthIf_MainFunctionTx()</code>,
          <code>EthIf_MainFunctionState()</code>, <code>TcpIp_MainFunction()</code>,
          <code>TcpIp_MainFunctionTx()</code>, <code>EthSM_MainFunction()</code>,
          <code>SoAd_MainFunctionTx()</code>, <code>SoAd_MainFunction()</code>)
          need to be in the same Os task or have the same task priority as
          the module main functions to eliminate preemption.
        </para>
        <para>
          This integration requirement also applies for possible other not listed <code>DoIP</code>
          lower layer functions.
        </para>
      </description>
      <rationale>
        This limitation reduces code size and execution time by eliminating the need for extensive
        use of exclusive areas.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>

    <specobject>
      <id>DoIP.EB_INTREQ_DoIP_0006</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        In case configuration parameter
        DoIPTcpConnection/DoIPTcpConnectionSecurityRequired is set to TRUE, corresponding TCP
        connection shall be secure (e.g. TLS).
      </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>

    <specobject>
      <id>DoIP.EB_INTREQ_DoIP_0007</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        If Diagnostic message is received before the route is activated, on a channel with
        DoIPRoutingActivationType DOIP_ROUTING_ACTIVATION_AUTOMATIC, then this SourceAddress is
        already registered on another Tcp connection and Tester can send a Routing Activation on
        this Tcp connection in order to free this SourceAddress.
      </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>DoIP.EB.IgnoreTxRequests</id>
      <status>approved</status>
      <source>RFC 69067</source>
      <version>1</version>
      <description>
        For a active DoIP channel:
        If a DoIP Tx channel is busy (Tx request pending or in progress), then a call to
        DoIP_TpTransmit() for this channel shall be ignored. The API shall return E_NOT_OK.
      </description>
      <comment>
        See https://www.autosar.org/bugzilla/show_bug.cgi?id=69067
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03061_PendningTxRequests</srcid><srcstatus/><internalId>1126</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>
    <specobject>
      <id>DoIP.EB.BlockMsgRx</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        DoIP will reject reception of a new message (DoIP_SoAdTpCopyRxData() will return
        BUFREQ_E_BUSY and BufferSizePtr will be set to 0) in case confirmation have not been
        received for the previously transmitted acknowledge/response message.
      </description>
      <comment>

      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03036_DiagAckMsg_RxBlocked</srcid><srcstatus/><internalId>1102</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03037_Tcp_GenHeaderNack_RxBlocked</srcid><srcstatus/><internalId>1103</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>
    <specobject>
      <id>DoIP.EB.CopyRxData.OFFLINE</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case DoIP_SoAdTpCopyRxData() is called before successful call to
        DoIP_SoAdTpStartOfReception() for the same connection, DoIP shall reject the message,
        return BUFREQ_E_NOT_OK and set BufferSizePtr to the size of generic header.
      </description>
      <comment>

      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03062_CopyRxData_OFFLINE</srcid><srcstatus/><internalId>1127</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>
    <specobject>
      <id>DoIP.EB.HandleIDWizard</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module shall support the correct automatic calculation of
        the handle IDs for the following parameters:
        - DoIPPduRRxPduId
        - DoIPPduRTxPduId
        - DoIPUdpConnection/DoIPSoAdRxPduId
        - DoIPUdpConnection/DoIPSoAdTxPduId
        - DoIPTcpConnection/DoIPSoAdTcpRxPduId
        - DoIPTcpConnection/DoIPSoAdTcpTxPduId
        - DoIPInterface/DoIPInterfaceId
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.HandleIDWizard.DoIPPduRRxPduId</srcid><srcstatus/><internalId>11</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.HandleIDWizard.DoIPPduRTxPduId</srcid><srcstatus/><internalId>12</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.HandleIDWizard.DoIPUdpConnection_DoIPSoAdRxPduId</srcid><srcstatus/><internalId>13</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.HandleIDWizard.DoIPUdpConnection_DoIPSoAdTxPduId</srcid><srcstatus/><internalId>14</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.HandleIDWizard.DoIPTcpConnection_DoIPSoAdRxPduId</srcid><srcstatus/><internalId>15</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.HandleIDWizard.DoIPTcpConnection_DoIPSoAdTxPduId</srcid><srcstatus/><internalId>16</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.HandleIDWizard.DoIPInterface_DoIPInterfaceId</srcid><srcstatus/><internalId>17</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0123.HandleIdWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>691</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>
    <specobject>
      <id>DoIP.EB.HandleIDWizard.DoIPPduRRxPduId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module shall support the correct automatic calculation of
        the handle IDs for DoIPPduRRxPduId.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_05_HandleIdGenerator</srcid><srcstatus/><internalId>959</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.HandleIDWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>
    <specobject>
      <id>DoIP.EB.HandleIDWizard.DoIPPduRTxPduId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module shall support the correct automatic calculation of
        the handle IDs for DoIPPduRTxPduId.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_05_HandleIdGenerator</srcid><srcstatus/><internalId>959</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.HandleIDWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>
    <specobject>
      <id>DoIP.EB.HandleIDWizard.DoIPUdpConnection_DoIPSoAdRxPduId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module shall support the correct automatic calculation of
        the handle IDs for DoIPUdpConnection/DoIPSoAdRxPduId.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_05_HandleIdGenerator</srcid><srcstatus/><internalId>959</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.HandleIDWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>
    <specobject>
      <id>DoIP.EB.HandleIDWizard.DoIPUdpConnection_DoIPSoAdTxPduId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module shall support the correct automatic calculation of
        the handle IDs for DoIPUdpConnection/DoIPSoAdTxPduId.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_05_HandleIdGenerator</srcid><srcstatus/><internalId>959</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.HandleIDWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>
    <specobject>
      <id>DoIP.EB.HandleIDWizard.DoIPTcpConnection_DoIPSoAdRxPduId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module shall support the correct automatic calculation of
        the handle IDs for DoIPTcpConnection/DoIPSoAdTcpRxPduId.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_05_HandleIdGenerator</srcid><srcstatus/><internalId>959</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.HandleIDWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>
    <specobject>
      <id>DoIP.EB.HandleIDWizard.DoIPTcpConnection_DoIPSoAdTxPduId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module shall support the correct automatic calculation of
        the handle IDs for DoIPTcpConnection/DoIPSoAdTcpTxPduId.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_05_HandleIdGenerator</srcid><srcstatus/><internalId>959</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.HandleIDWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>
    <specobject>
      <id>DoIP.EB.HandleIDWizard.DoIPInterface_DoIPInterfaceId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module shall support the correct automatic calculation of
        the handle IDs for DoIPInterface/DoIPInterfaceId.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_05_HandleIdGenerator</srcid><srcstatus/><internalId>959</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.HandleIDWizard</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>
    <specobject>
      <id>DoIP.EB.DoIPMaxNumByteDiagAckNack_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name                DoIPMaxNumByteDiagAckNack  {DOIP_MAX_NUMBYTE_DIAGACKNACK}
        Description         Specifies maximum number of bytes of the original Diagnostic message
                            that will be copied into the ACK/NACK response message to the Tester.
                            It limits the parameter DoIPTester/DoIPNumByteDiagAckNack.
        Multiplicity        1
        Range               0 .. 65535
        Type                EcucIntegerParamDef
        Default value       -
        ConfigurationClass  Pre-compile time X All Variants
        Scope / Dependency  scope: Local
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.DoIPNumByteDiagAckNack_Limited</srcid><srcstatus/><internalId>19</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.XDM.DoIPNumByteDiagAckNack_Oversized</srcid><srcstatus/><internalId>905</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>
    <specobject>
      <id>DoIP.EB.DoIPNumByteDiagAckNack_Limited</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the value of DoIPTester/DoIPNumByteDiagAckNack is greater then DoIPMaxNumByteDiagAckNack,
        the  number of bytes of the original Diagnostic message that will be copied into the response
        message will be limited to DoIPMaxNumByteDiagAckNack.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03038_DoIPNumByteDiagAckNack_Oversized</srcid><srcstatus/><internalId>1104</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DoIPMaxNumByteDiagAckNack_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>
    <specobject>
      <id>DoIP.EB.DoIPReceiveSegmented_TcpHeader</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If Generic or Diagnostic Tcp Message Header is received segmented it should be assembled and
        processed when a complete header is received.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03011_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1079</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>
    <specobject>
      <id>DoIP.EB.DoIPReceiveSegmented_RoutingActMsg</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a Routing Activation message is received segmented it should be assembled and
        processed when a complete message is received.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>288</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>
    <specobject>
      <id>DoIP.EB.User_DoIPGetVin</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Service name: User_DoIPGetVin
        Syntax: Std_ReturnType User_DoIPGetVin(uint8* Data)
        Sync/Async: Synchronous
        Reentrancy: reentrant
        Parameters (inout): Data - Data pointer where VIN should be copied.
        Return value: Std_ReturnType
        E_OK: The Data pointer has been filled with valid VIN
        E_NOT_OK: The Data pointer could not be filled with a valid VIN
        Description:
        User defined function to get the VIN before Dcm_GetVin() is implemented.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05001_VIR_VIN_UserGetVin_Match</srcid><srcstatus/><internalId>1214</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05002_VIR_VIN_UserGetVin_NoMatch</srcid><srcstatus/><internalId>1215</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00070_UserGetVin_OK</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a user has provided a callback function for retrieving VIN (as defined in
        [DoIP.EB.User_DoIPGetVin]) the received DoIP 17 payload data bytes shall be compared
        to the data retrieved by the function User_DoIPGetVin().
        If the function returns E_OK, the VIN pointer is considered to contain valid information.
        If the requested VIN matches the derived VIN the DoIP module shall respond with a vehicle
        identification response/vehicle announcement message with 0x0004. Otherwise incoming DoIP
        message with payload Type 0x0003 shall be ignored.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05001_VIR_VIN_UserGetVin_Match</srcid><srcstatus/><internalId>1214</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05002_VIR_VIN_UserGetVin_NoMatch</srcid><srcstatus/><internalId>1215</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00070_UserGetVin_NOK</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a user has provided a callback function for retrieving VIN (as defined in
        [DoIP.EB.User_DoIPGetVin]) and a call to this function returns E_NOT_OK, then DoIP message
        with payload Type 0x0003 shall be ignored.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05022_VIR_VIN_UserGetVin_NOK</srcid><srcstatus/><internalId>1235</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00070_UserGetVin_NotDefined</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a user has not provided a callback function for retrieving VIN (as defined in
        [DoIP.EB.User_DoIPGetVin]), no comparison of VIN is made - Vehicle identification response
        message is generated according to SWS_DoIP_00072.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03009_VehicleIdentificationRequestVIN</srcid><srcstatus/><internalId>1077</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00072_UserGetVin_EOK</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a user has provided a callback function for retrieving VIN (as defined in
        [DoIP.EB.User_DoIPGetVin]) the "VIN" of a vehicle identification response/vehicle
        announcement message shall be derived by calling User_DoIPGetVin().
        If User_DoIPGetVin() returns E_OK, the 17 Bytes in the pointer shall be used.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05001_VIR_VIN_UserGetVin_Match</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00072_UserGetVin_E_NOT_OK</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a user has provided a callback function for retrieving VIN (as defined in
        [DoIP.EB.User_DoIPGetVin]) the "VIN" of a vehicle identification response/vehicle
        announcement message shall be derived by calling User_DoIPGetVin().
        If the callback returns E_NOT_OK the 17 Bytes shall be filled with the configured
        DoIPVinInvalidityPattern with "Further Action Required" field set to 0x00 and VIN/GID
        sync. status field set to 0x10 if (DoIPUseVehicleIdentificationSyncStatus) is set to true.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05004_VIR_VIN_UserGetVin_NotOk</srcid><srcstatus/><internalId>1217</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00072_UserGetVin_NotDefined</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a user has not provided a callback function for retrieving VIN (as defined in
        [DoIP.EB.User_DoIPGetVin]) 17 Bytes shall be filled with the configured
        DoIPVinInvalidityPattern with "Further Action Required" field set to 0x00 and VIN/GID
        sync. status field set to 0x10 if (DoIPUseVehicleIdentificationSyncStatus) is set to true.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03005_VehicleIdentificationRequest</srcid><srcstatus/><internalId>1073</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00065_SoAd_GetPhysAddr_NOK</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_GetPhysAddr returns E_NOT_OK configured EID parameter will be used instead of
        MacAddress if set, otherwise DoIPGIDInvalidityPattern will be used.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05024_VehicleIdentificationRequestMAC_NOTOK</srcid><srcstatus/><internalId>1237</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest10003_VehicleIDResponse_GIDInvalidityPattern</srcid><srcstatus/><internalId>1321</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0108.UseMacForEid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>677</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>
    <specobject>
      <id>DoIP.EB.DoIP_PowerModeCallback_NotConfigured</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Diagnostic power mode request message shall be ignored if user callback function
        DoIPPowerMode is not configured and SVC interface function is not
        generated (DoIPGeneral/DoIPRteUsage is disabled).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03042_PowerMode_Ignore</srcid><srcstatus/><internalId>1109</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>
    <specobject>
      <id>DoIP.EB.DoIP_TpTransmit.PduSize.64K</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Size of a DiagMsg received from upper layer is limited to 64Kb, so as PDU size sent to SoAd
        (due to the size of PduLengthType). In addition to the original message (payload) DoIP
        inserts Generic and DiagMsg headers (8 + 4 bytes). This effectively reduces the size of
        maximum DiagMsg payload to 65535 - 8 - 4.
        In order to avoid this limitation, i.e. to enable transmission of DiagMsg with a maximum
        payload size of 65535 bytes, transmission of a DiagMsg should be done in two
        SoAd_TpTransmit() cycles.
        In the first cycle a Generic and DiagMsg headers should be transmitted, followed by DiagMsg
        payload up to the limit of 64k.
        The second cycle (SoAd_TpTransmit() call) should be done within DoIP_SoAdTpTxConfirmation(),
        upon confirmation is received for the first data block. In this cycle the remaining part
        of DiagMsg payload should be transmitted.
        Afterwards PduR should be notified with PduR_DoIPTpTxConfirmation() with E_OK in case
        both data blocks have been successfully transmitted, and with E_NOT_OK otherwise.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest07001_DiagMessageTransmit_LongPdu</srcid><srcstatus/><internalId>1267</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest07002_CustomDiagMessageTransmit_LongPdu</srcid><srcstatus/><internalId>1268</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest07003_SoAd_TpTransmit_NOT_OK_3</srcid><srcstatus/><internalId>1269</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0116.LargeDiagMsgRxTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>685</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00161</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the DoIPRoutingActivationAuthenticationCallback returns with E_OK and the value of
        output parameter Authentified is set to TRUE the routing activation authentication shall
        be considered as successful.
        If the DoIPRoutingActivationAuthenticationResLength is not set to 0 the first
        DoIPRoutingActivationAuthenticationResLength bytes shall be attached in routing
        activation response message in the field "OEM specific" as described in chapter
        7.3.2.3.2.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05005_RoutActAuth_PayloadLen7_SUCCESS</srcid><srcstatus/><internalId>1218</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05008_RoutActAuth_PayloadLen11_SUCCESS_1</srcid><srcstatus/><internalId>1221</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05009_RoutActAuth_PayloadLen11_SUCCESS_2</srcid><srcstatus/><internalId>1222</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05033_RoutingActivationCallback_TpTransmit_2</srcid><srcstatus/><internalId>1246</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05035_RoutActAuthConf_DiffRoutingActIdx</srcid><srcstatus/><internalId>1248</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05036_RoutActAuthConf_DiffPendingRoutingActIdx</srcid><srcstatus/><internalId>1249</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05037_RoutActAuthConf_PendingRoutingAct2</srcid><srcstatus/><internalId>1250</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>
    <specobject>
      <id>DoIP.EB.AuthenticationReqData.NULL</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If an DoIPRoutingActivationAuthenticationCallback is configured and the parameter
        DoIPRoutingActivationAuthenticationReqLength is configured to 0 then routing
        authentication callback function will be called with the parameter
        AuthenticationReqData set to NULL.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05008_RoutActAuth_PayloadLen11_SUCCESS_1</srcid><srcstatus/><internalId>1221</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>
    <specobject>
      <id>DoIP.EB.ConfirmationReqData.NULL</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If an DoIPRoutingActivationConfirmationCallback is configured and the parameter
        DoIPRoutingActivationConfirmationReqLength is configured to 0 then routing
        confirmation callback function will be called with the parameter
        ConfirmationReqData set to NULL.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05014_RoutActConf_PayloadLen11_SUCCESS</srcid><srcstatus/><internalId>1227</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00111</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the DoIPRoutingActivationAuthenticationCallback returns something else (e.g.
        E_NOT_OK) or DoIPRoutingActivationAuthenticationCallback returns E_OK with the parameter
        Authentified set to FALSE,  DoIP module shall send a routing activation response message with
        the activation response code set to 0x04 as described in chapter 7.3.2.3.2 and the
        socket connection shall be considered as registered to this DoIPTesterSA without
        activating the routing.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05006_RoutActAuth_PayloadLen_7_NoAuth_1</srcid><srcstatus/><internalId>1219</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05007_RoutActAuth_PayloadLen_7_NoAuth_2</srcid><srcstatus/><internalId>1220</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05010_RoutActAuth_PayloadLen11_NoAuth</srcid><srcstatus/><internalId>1223</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00112</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a DoIPRoutingActivationConfirmationCallback is configured for the referenced
        DoIPRoutingActivation, the DoIp module shall call this callback (for the signature see
        User_DoIPRoutingActivationConfirmation, SWS_DoIP_00048). If the
        DoIPRoutingActivationConfirmationReqLength is not configured to 0, the DoIP
        module shall handle additionally the last
        DoIPRoutingActivationConfirmationReqLength bytes of the optional field "OEM
        specific". If the Callback returns with E_OK and callback function sets the parameter
        Confirmed to TRUE the routing activation confirmation shall be considered as successful
        and if the DoIPRoutingActivationConfirmationResLength is not set to 0, the last
        DoIPRoutingActivationConfirmationResLength bytes shall be attached in routing
        activation response message in the field "OEM specific" as described in chapter
        7.3.2.3.2.
        ( SRS_Eth_00084)
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05011_RoutActAuthConf_PayloadLen11_SUCCESS_1</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05012_RoutActAuthConf_PayloadLen11_NoConf_1</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05013_RoutActAuthConf_PayloadLen11_NoConf_2</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05014_RoutActConf_PayloadLen11_SUCCESS</srcid><srcstatus/><internalId>1227</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05020_RoutActAuth_PENDING_RoutActConf_OK</srcid><srcstatus/><internalId>1233</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12007_SVC_RoutActAuthConf_RA_4</srcid><srcstatus/><internalId>1330</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12008_SVC_RoutActAuthConf_RA_5</srcid><srcstatus/><internalId>1331</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>
    <specobject>
      <id>DoIP.EB.RoutingActivation.AlreadyActive</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When valid routing activation request message is received for already activated channel,
        new authentication/confirmation process will be skipped, i.e. callback functions
        will not be called.
        Routing activation response message shall be generated with response code 0x10.
        Rationale.
        If new routing activation message would be processed and authentication / confirmation
        process fails, it would effectively disable the channel. This functionality is not
        foreseen in SWS.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05015_RoutActAuthConf_PENDING_SUCCESS</srcid><srcstatus/><internalId>1228</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>
    <specobject>
      <id>DoIP.EB.RoutingActivation.AlreadyPending</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When valid routing activation request message is received for a channel that has already
        pending authentication/confirmation process, then this process will continue under MainFunction,
        and OEM special field will not be updated.
        If routing activation is pending on confirmation then routing activation response message shall be
        generated with response code 0x11.
        Rationale.
        If new routing activation message would be processed (new OEM special field updated) and
        authentication / confirmation process fails, it would effectively disable the channel.
        This functionality is not foreseen in SWS.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05018_RoutActConf_Pending</srcid><srcstatus/><internalId>1231</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05019_RoutActAuth_Pending</srcid><srcstatus/><internalId>1232</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>
    <specobject>
      <id>DoIP.EB.RoutingActivation.Pending.DifferentTcpConn</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When several routing activation requests with equal activation numbers are received on a
        different TCP connections (different Testers) and they are in PENDING state, then
        respective authentication/confirmation function will be called separately for each TCP
        connection during MainFunction call.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05016_RoutActAuthConf_DiffOemSpecific</srcid><srcstatus/><internalId>1229</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05017_RoutActAuthConf_DiffChannels</srcid><srcstatus/><internalId>1230</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05034_RoutActAuthConf_PendingReset</srcid><srcstatus/><internalId>1247</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>
    <specobject>
      <id>DoIP.EB.GetVersionInfo</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The call of DoIP_GetVersionInfo() shall return the module version independent if the
        module is initialized or not.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03056_ReturnVersionInformation</srcid><srcstatus/><internalId>1121</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>
    <specobject>
      <id>DoIP.EB.ApiFunctionBodyNotImplemented</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The API function that doesn't have a body implemented shall return E_NOT_OK.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03057_CancelTransmit</srcid><srcstatus/><internalId>1122</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03058_CancelReceive</srcid><srcstatus/><internalId>1123</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>
    <specobject>
      <id>DoIP.EB.MainFunctionDoIPNotInit</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The DoIP_MainFunction() shall check that the service DoIP_Init() was previously called.
        If the check fails, the function shall skip further processing and no DET
        shall be generated.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01017_MainFunction</srcid><srcstatus/><internalId>1029</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TriggerableMainfunctionTx</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The transmit part of the Mainfunction shall be separated from the
        state handling. A configuration parameter shall be provided to
        select if the transmit part should be available as an external API.
        If set to true the function shall be externally available.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest11000_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1323</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0105.MainFunctionTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>
    <specobject>
      <id>DoIP.EB.MainFunctionTxDoIPNotInit</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The DoIP_MainFunctionTx() shall check that the service DoIP_Init() was previously called.
        If the check fails, the function shall skip further processing and no DET
        shall be generated.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01018_MainFunctionTx</srcid><srcstatus/><internalId>1030</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0105.MainFunctionTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>
    <specobject>
      <id>DoIP.EB.MaxTesterConnections.Exceeded</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        DoIP_SoAdTpStartOfReception() shall return BUFREQ_E_NOT_OK if more testers are trying
        to connect than configured in DoIPMaxTesterConnections + 1. Additional connection is
        used to perform Alive check.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest04004_MaxParallelTester</srcid><srcstatus/><internalId>1212</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0104.ParallelTester</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>673</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SoAdIfRxIndication.IncompleteGenericHeader</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If DoIP_SoAdIfRxIndication() is called with a frame size (PduInfo.SduLength) smaller then
        the size of generic header, DoIP shall ignore the frame.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03063_IfRxIndication_FrameTooSmall</srcid><srcstatus/><internalId>1128</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SoAdIfRxIndication.IncompleteUdpFrame</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If DoIP_SoAdIfRxIndication() is called with a frame that contains the complete generic
        header, but the frame size is smaller then the message size indicated by Payload length
        field, DoIP shall ignore the frame.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03099_IfRxIndication_IncompleteUdpFrame</srcid><srcstatus/><internalId>1164</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_4413</srcid><srcstatus/><internalId>568</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_4432</srcid><srcstatus/><internalId>569</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>
    <specobject>
      <id>DoIP.EB.CopyRxData.SduLength.Oversized</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When DoIP_SoAdTpCopyRxData() is called to copy DoIP message payload, and
        PduInfoPtr.SduLength is larger then the payload size specified in generic header,
        or PduInfoPtr.SduLength is larger then the remaining payload size when payload is
        copied in several segments, DoIP shall return BUFREQ_E_NOT_OK.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03065_CopyRxData_SduLength_Oversized_2</srcid><srcstatus/><internalId>1130</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03066_CopyRxData_SduLength_Oversized_3</srcid><srcstatus/><internalId>1131</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03067_CopyRxData_SduLength_Oversized_4</srcid><srcstatus/><internalId>1132</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>
    <specobject>
      <id>DoIP.EB.CopyTxData.ReturnValue</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When during diagnostic message TX process DoIP forwards calls of DoIP_SoAdTpCopyTxData()
        to the call of PduR_DoIPCopyTxData(), as defined in [SWS_DoIP_00233] it shall also
        propagate PduR_DoIPCopyTxData() return value back to SoAd.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03074_DigMsgTx_PduR_BUFREQ_E_BUSY</srcid><srcstatus/><internalId>1139</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08004_CustomMsg_BufferNotAvailable_Retry</srcid><srcstatus/><internalId>1278</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>
    <specobject>
      <id>DoIP.EB.DoIPRoutingActivationType_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name                DoIPRoutingActivationType
        Description         Specifies channel routing activation type
        Multiplicity        1
        Range               DOIP_ROUTING_ACTIVATION_MSG - Activation with routing activation message
                            DOIP_ROUTING_ACTIVATION_AUTOMATIC - No need to send routing activation
                            message prior receiving diagnostic message
        Type                EcucEnumerationParamDef
        Default value       DOIP_ROUTING_ACTIVATION_MSG
        ConfigurationClass  Post-build time X VARIANT-POST-BUILD
        Scope / Dependency  scope: Local
      </description>
      <comment>

      </comment>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.RoutingActivationType.MSG</srcid><srcstatus/><internalId>51</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.RoutingActivationType.AUTOMATIC</srcid><srcstatus/><internalId>52</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0112.EB.AutoRoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>681</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>
    <specobject>
      <id>DoIP.EB.RoutingActivationType.MSG</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If DoIPChannel parameter DoIPRoutingActivationType is configured to the value
        DOIP_ROUTING_ACTIVATION_MSG then channel is activated with routing activation
        message, as defined in [SWS_DoIP_00101] - [SWS_DoIP_00114], [SWS_DoIP_00160].
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DoIPRoutingActivationType_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>51</internalId></specobject>
    <specobject>
      <id>DoIP.EB.RoutingActivationType.AUTOMATIC</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If DoIPChannel parameter DoIPRoutingActivationType is configured to the value
        DOIP_ROUTING_ACTIVATION_AUTOMATIC then channel can be activated in two ways:
        1) Automatically with a first valid diagnostic message received on that channel.
           In this case all channels with automatic routing activation that origin from the same
           Tester (have Source Address equal to the received one) shall be activated.
        2) Manually with a reception of routing activation request message (routing activation
         number is not checked in this case).
        In both cases reception of the first the message after DoIP_SoAdTpStartOfReception()
        shall lock received Source address to the Tcp connection.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09019_StdCh_RoutingActReq_AUTOMATIC_3</srcid><srcstatus/><internalId>1309</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09021_StdCh_RoutingActReq_AUTOMATIC_4</srcid><srcstatus/><internalId>1311</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DoIPRoutingActivationType_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0112.EB.AutoRoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>681</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00071</id>
      <status>approved</status>
      <source>https://www.autosar.org/bugzilla/show_bug.cgi?id=74847</source>
      <version>1</version>
      <description>
        If the DoIP module needs to send a vehicle announcement message (see SWS_DoIP_00205),
        it shall send the first vehicle announcement message via the
        configured DoIPUdpVehicleAnnouncementConnection after DoIPInitialVehicleAnnouncementTime as
        described in Table 6 and repeat this message DoIPVehicleAnnouncementCount
        times with a delay of DoIPVehicleAnnouncementInterval.
        ( SRS_Eth_00026)
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03006_VehicleAnnouncement</srcid><srcstatus/><internalId>1074</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03141_VehicleAnnouncement_Trigger_1</srcid><srcstatus/><internalId>1206</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03142_VehicleAnnouncement_Trigger_2</srcid><srcstatus/><internalId>1207</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09017_VehicleAnnouncement</srcid><srcstatus/><internalId>1307</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15001_VehicleAnnouncement_Interval_Count</srcid><srcstatus/><internalId>1349</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00154</id>
      <status>approved</status>
      <source>https://www.autosar.org/bugzilla/show_bug.cgi?id=74847</source>
      <version>1</version>
      <description>
        If the API DoIP_LocalIpAddrAssignmentChg() is called with the State set to
        TCPIP_IPADDR_STATE_ASSIGNED, DoIP shall locate corresponding connection by calling
        SoAd_GetSoConId() for each configured connection and compare it to the received SoConId.
        If the connection is found DoIP module shall retrieve the configuration parameter
        DoIPUpdateDhcpHostNameOption specified for that connection.
        If this parameter is set to TRUE, DoIP shall call the function SoAd_ReadDhcpHostNameOption
        with the received SoConId to get the currently set host name option.

        In case function returned E_OK then the returned Byte buffer shall be considered as ASCII
        buffer and shall start with "DoIP-". Further processing is described with [SWS_DoIP_00155].
        In case the function returned other then E_OK, DoIP shall call the
        SoAd_WriteDhcpHostNameOption in order to set the hostname.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02000_Transition_InactiveToActive</srcid><srcstatus/><internalId>1052</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02001_InvalidityPattern</srcid><srcstatus/><internalId>1053</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02005_UpdateHostname_GetSoConId_NOK</srcid><srcstatus/><internalId>1057</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02008_SoAd_ReadDhcpHostNameOption_NOK</srcid><srcstatus/><internalId>1060</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02009_LocalIpAddrAssignmentChg_Ignore</srcid><srcstatus/><internalId>1061</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest04000_DoIPDhcpOptionVinUse_False</srcid><srcstatus/><internalId>1208</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05003_WriteDhcpHostNameOption_UserGetVin</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0102.DhcpHostNameOption</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>671</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>54</internalId></specobject>
    <specobject>
      <id>DoIP.EB.LocalIpAddrAssignmentChg.Ignore</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the API DoIP_LocalIpAddrAssignmentChg() is called with the State set to the value
      other then TCPIP_IPADDR_STATE_ASSIGNED, DoIP shall ignore the request.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02009_LocalIpAddrAssignmentChg_Ignore</srcid><srcstatus/><internalId>1061</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>55</internalId></specobject>
    <specobject>
      <id>DoIP.EB.DoIPUpdateDhcpHostNameOption_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name         DoIPUpdateDhcpHostNameOption
        Description  The DoIP module shall request an update of DHCP host name option
                   (starting with 'DoIP-') related to this connection .
        Multiplicity 1
        Type         EcucBooleanParamDef
        Default value true
        Post-Build Variant Value   Pre-compile time   X   All Variants
        Value Configuration Class   Pre-compile time   X   All Variants
        Link time   --
        Post-build time   --
        Scope / Dependency scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>56</internalId></specobject>
    <specobject>
      <id>DoIP.EB.ECUC_DoIP_00062_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name DoIPRoutingActivationRef
        Description Reference to a DoIPRoutingActivation describing the possible routing
        activations of the DoIPTester
        Multiplicity 0..255
        Type Reference to [ DoIPRoutingActivation ]
        ConfigurationClass Pre-compile time X VARIANT-PRE-COMPILE
                           Link time        X VARIANT-LINK-TIME
                           Post-build time  X VARIANT-POST-BUILD
        Scope / Dependency scope: local
      </description>
      <comment>
        Lower multiplicity has been changed to 0 due to introduction of automatic routing activation.
        This is a configuration parameter requirement without functional specification.
      </comment>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00062</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>57</internalId></specobject>
    <specobject>
      <id>DoIP.EB.AliveCheckReq.NotDuplicated</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        While alive check process is ongoing on a certain connection, new alive check requests
        for that connections messages shall be skipped, i.e. alive check request messages shall
        not be transmitted, and alive check timer shall not be reset.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09005_SingleAndAllAliveCheck_Response</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09006_SingleAndAllAliveCheck_NoResponse</srcid><srcstatus/><internalId>1296</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>58</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SingleAliveCheck.NotDuplicated</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a single alive check process is ongoing for a certain source address, i.e. connection
        with registered source address, and connection that compete with alive check process for
        that source address exist, and new routing activation message is received with the same
        source address, then DoIP shall generate negative acknowledge message with response code
        0x03 on the connection that received 3rd request for registration of source address.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09007_RequestSA_3X</srcid><srcstatus/><internalId>1297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>59</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TestingStrategy.BasicTrafficTest</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In order to improve testing quality a basic traffic test shall be executed at the end
        of each test case for each Tcp connection/channel that remains active after test case
        execution.
        The basic traffic test should consist of a simple diagnostic message transmission and
        reception, where the complete cycle shall be verified, i.e. payload data check,
        Api parameters check, confirmation/acknowledge, etc.
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Basic traffic test is an additional test step executed at
        the end of a large number of tests in order to verify DoIP ability to perform basic
        functionality after executing various use cases. Splitting the requirement would only
        increase complexity without any real improvements.
      </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02003_SoConModeChg_OFFLINE</srcid><srcstatus/><internalId>1055</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03011_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1079</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03012_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1080</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03013_CopyRxData_SduLength_0</srcid><srcstatus/><internalId>1081</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03017_QueueTxRequests</srcid><srcstatus/><internalId>1084</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03018_RoutActResp_SUCCESS_1</srcid><srcstatus/><internalId>1085</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03023_DiagNackMsg_PdurCopyRxData_NOK</srcid><srcstatus/><internalId>1090</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03025_DiagNackMsg_INV_TAR_ADR</srcid><srcstatus/><internalId>1092</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03027_Tcp_GenHeaderNack_MSG_TO_LONG</srcid><srcstatus/><internalId>1093</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03028_Tcp_GenHeaderNack_UNKNOWN_PL_TYPE</srcid><srcstatus/><internalId>1094</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03034_DiagAckMsg_SegmentedReception</srcid><srcstatus/><internalId>1100</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03035_DiagAckMsg_SegmentedAckTransmission</srcid><srcstatus/><internalId>1101</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03036_DiagAckMsg_RxBlocked</srcid><srcstatus/><internalId>1102</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03038_DoIPNumByteDiagAckNack_Oversized</srcid><srcstatus/><internalId>1104</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03039_DiagMsg_SegmentedHeaders</srcid><srcstatus/><internalId>1105</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03040_Diag_Entity_Status_Req_TCP_opened</srcid><srcstatus/><internalId>1107</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03046_DiagAckMsg_TxBlocked</srcid><srcstatus/><internalId>1112</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03047_TransmitInContextTxConfirmation</srcid><srcstatus/><internalId>1113</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03048_DiscardDiagMsg_PDUR_BUFF_NOT_OK_1</srcid><srcstatus/><internalId>1114</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03049_DiscardDiagMsg_PDUR_BUFF_NOT_OK_2</srcid><srcstatus/><internalId>1115</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03050_DiscardDiagMsg_PDUR_BUFF_OVFL_1</srcid><srcstatus/><internalId>1116</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03051_DiscardDiagMsg_PDUR_BUFF_OVFL_2</srcid><srcstatus/><internalId>1117</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03054_Tcp_IgnoreGenericNack</srcid><srcstatus/><internalId>1120</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03059_SoAd_TpTransmit_NOT_OK_1</srcid><srcstatus/><internalId>1124</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03061_PendningTxRequests</srcid><srcstatus/><internalId>1126</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03073_GenHeaderNackMsg_TxBlocked</srcid><srcstatus/><internalId>1138</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03074_DigMsgTx_PduR_BUFREQ_E_BUSY</srcid><srcstatus/><internalId>1139</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03075_SoAd_TpTransmit_NOT_OK_4</srcid><srcstatus/><internalId>1140</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03076_Discard_VehicleIdReqOnTcp</srcid><srcstatus/><internalId>1141</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03077_Discard_DiagnosticReqOnTcp</srcid><srcstatus/><internalId>1142</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03081_DiagMsgRx_Loop</srcid><srcstatus/><internalId>1146</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03082_SoAd_TpTransmit_NOT_OK_5</srcid><srcstatus/><internalId>1147</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03083_RoutActResp_SUCCESS_2</srcid><srcstatus/><internalId>1148</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03084_DiagAckNackStart_Idle</srcid><srcstatus/><internalId>1149</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03098_DiagMsg_SA_USED_NACK6_ROUTE_INACTIVE_3</srcid><srcstatus/><internalId>1163</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03110_DiagMsg_SA_USED_NONACK_ROUTE_INACTIVE_4</srcid><srcstatus/><internalId>1175</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05005_RoutActAuth_PayloadLen7_SUCCESS</srcid><srcstatus/><internalId>1218</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05008_RoutActAuth_PayloadLen11_SUCCESS_1</srcid><srcstatus/><internalId>1221</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05009_RoutActAuth_PayloadLen11_SUCCESS_2</srcid><srcstatus/><internalId>1222</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05011_RoutActAuthConf_PayloadLen11_SUCCESS_1</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05014_RoutActConf_PayloadLen11_SUCCESS</srcid><srcstatus/><internalId>1227</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05015_RoutActAuthConf_PENDING_SUCCESS</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05016_RoutActAuthConf_DiffOemSpecific</srcid><srcstatus/><internalId>1229</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05020_RoutActAuth_PENDING_RoutActConf_OK</srcid><srcstatus/><internalId>1233</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05021_RoutAct_E0_FurtherAction</srcid><srcstatus/><internalId>1234</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05032_RoutingActivationCallback_TpTransmit_1</srcid><srcstatus/><internalId>1245</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05033_RoutingActivationCallback_TpTransmit_2</srcid><srcstatus/><internalId>1246</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05034_RoutActAuthConf_PendingReset</srcid><srcstatus/><internalId>1247</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05035_RoutActAuthConf_DiffRoutingActIdx</srcid><srcstatus/><internalId>1248</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05036_RoutActAuthConf_DiffPendingRoutingActIdx</srcid><srcstatus/><internalId>1249</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05037_RoutActAuthConf_PendingRoutingAct2</srcid><srcstatus/><internalId>1250</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest07001_DiagMessageTransmit_LongPdu</srcid><srcstatus/><internalId>1267</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest07005_Tcp_GenHeaderNack_MSG_TO_LONG</srcid><srcstatus/><internalId>1270</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest07006_DiagMessageReceive_LongPdu</srcid><srcstatus/><internalId>1271</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest07007_Tx_Diag_Msg_Start_2_Tx_Idle</srcid><srcstatus/><internalId>1272</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08001_CustomMsg_Receive</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08002_CustomMsg_Transmit</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08004_CustomMsg_BufferNotAvailable_Retry</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08007_CustomMsg_SegmentedPduRCopyRxData_NOK</srcid><srcstatus/><internalId>1281</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08015_CustomMsg_Receive_Itf1</srcid><srcstatus/><internalId>1289</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09001_SAOnDifferentTcp_NORESPONSE</srcid><srcstatus/><internalId>1291</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09002_SAOnDifferentTcp_RESPONSE</srcid><srcstatus/><internalId>1292</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09003_AliveReqToAllConRESPONSE</srcid><srcstatus/><internalId>1293</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09004_AliveReqToAllConNORESPONSE</srcid><srcstatus/><internalId>1294</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09005_SingleAndAllAliveCheck_Response</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09006_SingleAndAllAliveCheck_NoResponse</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09007_RequestSA_3X</srcid><srcstatus/><internalId>1297</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09008_AliveCheckTimer</srcid><srcstatus/><internalId>1298</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09009_ExternalConReset</srcid><srcstatus/><internalId>1299</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09011_SAOnDifferentTcp_RESPONSE_2</srcid><srcstatus/><internalId>1301</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09013_AliveCheckResp_MatchSA</srcid><srcstatus/><internalId>1303</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09014_AliveReq_RxInProgress</srcid><srcstatus/><internalId>1304</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09018_AliveCheckResp_Ignore</srcid><srcstatus/><internalId>1308</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09020_DiagMsg_SA_USED_NACK6_ROUTE_INACTIVE_5</srcid><srcstatus/><internalId>1310</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09021_StdCh_RoutingActReq_AUTOMATIC_4</srcid><srcstatus/><internalId>1311</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09023_DiagMsg_SA_USED_NONACK_ROUTE_INACTIVE_6</srcid><srcstatus/><internalId>1313</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12003_SVC_RoutActAuthConf_RA_0</srcid><srcstatus/><internalId>1326</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12004_SVC_RoutActAuthConf_RA_1</srcid><srcstatus/><internalId>1327</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12005_SVC_RoutActAuthConf_RA_2</srcid><srcstatus/><internalId>1328</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12006_SVC_RoutActAuthConf_RA_3</srcid><srcstatus/><internalId>1329</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12007_SVC_RoutActAuthConf_RA_4</srcid><srcstatus/><internalId>1330</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12008_SVC_RoutActAuthConf_RA_5</srcid><srcstatus/><internalId>1331</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15003_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1351</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15005_AliveCheck_SAOnDifferentInterface_RESPONSE</srcid><srcstatus/><internalId>1353</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>60</internalId></specobject>
    <specobject>
      <id>DoIP.EB.DynamicGIDSynchronization</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The feature Dynamic GID Synchronization enables dynamic GID master/slave selection and
        GID synchronization between DoIP entities.

        It is is enabled by setting user callback functions User_DoIPGetGID and
        User_DoIPDynamicGIDMasterSelection.

        It replaces AUTOSAR GID Synchronization process due to problems identified in
        https://bugzilla.autosar.org/show_bug.cgi?id=80770.
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00051</srcid><srcstatus/><internalId>62</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.DoIPDynamicGIDMasterSelection</srcid><srcstatus/><internalId>63</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0110.SWS.EB.GidSync</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>679</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>61</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00051</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Service name: User_DoIPGetGID
        Syntax: Std_ReturnType User_DoIPGetGID(uint8* GroupId)
        Sync/Async: Synchronous/Asynchronous
        Reentrancy: Don't care
        Parameters (in): None
        Parameters (inout): None
        Parameters (out): GroupId - Pointer to GroupIdentifier

        Return value: Std_ReturnType  E_OK:     GroupId contains a valid value - stop pooling
                                      E_NOT_OK: GroupId does not contain a valid value -
                                                continue pooling in DoIP_MainFunction().

        Description: Function is used as a part of EB Dynamic GID synchronization process.

        DoIP polls User_DoIPGetGID() from DoIP_MainFunction() for GID slave DoIP entities,
        as long as return value is not E_OK.

        Once User_DoIPGetGID() returns E_OK, DoIP entity GID is updated and polling stops.

        Weather DoIP entity is a master or a slave is obtained by a call to
        User_DoIPDynamicGIDMasterSelection() during DoIP_Init().
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05026_GIDSyncComplete</srcid><srcstatus/><internalId>1239</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Int.h_960</srcid><srcstatus/><internalId>531</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DynamicGIDSynchronization</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00051</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>62</internalId></specobject>
    <specobject>
      <id>DoIP.EB.DoIPDynamicGIDMasterSelection</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Service name: User_DoIPDynamicGIDMasterSelection
        Syntax: void User_DoIPDynamicGIDMasterSelection(
                                                         boolean* IsGIDMasterPtr,
                                                         uint8* GroupIdPtr
                                                       )
        Sync/Async: Synchronous/Asynchronous
        Reentrancy: Don't care
        Parameters (in): None
        Parameters (inout): GroupIdPtr
        Parameters (out): IsGIDMasterPtr - Pointer to GroupIdentifier
        Return value: None

        Description:
        Function is used to obtain DoIP entity GID master/slave status as a part of EB Dynamic GID
        synchronization process. The process is enabled if both user callback functions are
        specified and enabled: DoIPGetGID and DoIPDynamicGIDMasterSelection.

        DoIP calls User_DoIPDynamicGIDMasterSelection() from DoIP_Init() providing its
        current GID value (e.g. MAC address if DoIPUseEIDasGID and DoIPUseMacAddressForIdentification
        are both set).

        Output parameter IsGIDMasterPtr provides information if calling DoIP entity is a GID master
        or a slave. In case DoIP entity is GID master (IsGIDMasterPtr is returned true), then
        output parameter GroupIdPtr contains GID that should be set in DoIP and used when sending
        vehicle identification response/vehicle announcement messages. In this case GID
        synchronization is complete for calling DoIP entity, and there is no need to pool
        User_DoIPGetGID in DoIP_MainFunction().

        In case DoIP entity is GID slave (IsGIDMasterPtr is returned false), then calling DoIP
        entity must pool User_DoIPGetGID() in order to obtain GID. This is done until
        User_DoIPGetGID() returns E_OK. Only then GID Synchronization process is completed for that
        DoIP entity.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05025_InvalidVIN_GIDSyncSuccessful</srcid><srcstatus/><internalId>1238</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05026_GIDSyncComplete</srcid><srcstatus/><internalId>1239</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Int.h_961</srcid><srcstatus/><internalId>532</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DynamicGIDSynchronization</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>63</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00077</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The "GID" of a vehicle identification response/vehicle announcement message shall contain
        the same value as for the EID, if the parameter DoIPUseEidAsGidRef is set to true and Dynamic
        GID Synchronization is disabled or not yet completed.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05026_GIDSyncComplete</srcid><srcstatus/><internalId>1239</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R23-11.SWS_DoIP_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>459</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>64</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00078</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The "GID" of a vehicle identification response/vehicle announcement message shall contain
        the configured DoIPGID value, if the parameter DoIPGID is configured, the parameter
        DoIPUseEidAsGidRef is set to false and Dynamic GID Synchronization is disabled or not yet
        completed.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03005_VehicleIdentificationRequest</srcid><srcstatus/><internalId>1073</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03086_VehicleIdentificationRequestGIDSync</srcid><srcstatus/><internalId>1151</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05001_VIR_VIN_UserGetVin_Match</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R23-11.SWS_DoIP_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>460</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>65</internalId></specobject>
    <specobject>
      <id>DoIP.EB.DoIPGIDInvalidityPattern</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The "GID" of a vehicle identification response/vehicle announcement message shall consists
        of 6 bytes according to the configured DoIPGIDInvalidityPattern if the parameter DoIPGID is
        not configured, the parameter DoIPUseEIDasGID is set to false and Dynamic GID
        Synchronization is disabled or not yet completed.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest04001_VehicleAnnouncement_DoIPGIDInvalidityPattern</srcid><srcstatus/><internalId>1209</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>66</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00079</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When Dynamic GID synchronization is enabled "GID" is obtained through the process
        described in DoIP.EB.DoIPDynamicGIDMasterSelection and DoIP.EB.SWS_DoIP_00051.
        Until sync process is completed "GID" is set according to the requirements
        DoIP.EB.SWS_DoIP_00077 and DoIP.EB.SWS_DoIP_00078.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05026_GIDSyncComplete</srcid><srcstatus/><internalId>1239</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00079</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00081</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>67</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00088</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If no valid VIN could be requested in SWS_DoIP_00072 and the vehicle GID
        synchronization was not yet successful as described in
        DoIP.EB.DoIPDynamicGIDMasterSelection (or is disabled) , the value of the
        "VIN/GID status" byte shall be 0x10.
      </description>
      <comment>

      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03086_VehicleIdentificationRequestGIDSync</srcid><srcstatus/><internalId>1151</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>68</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00089</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If no valid VIN could be requested in SWS_DoIP_00072 and the vehicle GID
        synchronization was successful as described in
        DoIP.EB.DoIPDynamicGIDMasterSelection, the value of the "VIN/GID status"
        byte shall be 0x00.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05025_InvalidVIN_GIDSyncSuccessful</srcid><srcstatus/><internalId>1238</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>
    <specobject>
      <id>DoIP.EB.DynamicGIDMasterSelectionCallback_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Container Name: DoIPDynamicGIDMasterSelectionCallback
        Description:
        This container describes the Callback function to obtain DoIP entity GID master/slave
        status.
        If this container is not configured no Callback function will be used and Dynamic GID
        Synchronization feature is disabled.
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>
    <specobject>
      <id>DoIP.EB.DoIPDynamicGIDMasterSelection_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name: DoIPDynamicGIDMasterSelection
        Description: Direct C Callback function to get the DoIP entity GID master/slave
        status.
        Multiplicity: 0..1
        Type: EcucFunctionNameDef
        ConfigurationClass:
        Pre-compile time: X VARIANT-PRE-COMPILE
        Link time:        X VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time:  --
        Scope / Dependency scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>
    <specobject>
      <id>DoIP.EB.DoIPRteUsage_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name: DoIPRteUsage
        Description: Specifies if RTE generation is enabled.
        Multiplicity: 1
        Type: EcucBooleanParamDef
        Default value: false
        ConfigurationClass:
        Pre-compile time: X VARIANT-PRE-COMPILE
        Link time:        --
        Post-build time:  --
        Scope / Dependency scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>
    <specobject>
      <id>DoIP.EB.RelocatablePBCfg</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name: DoIPRelocatablePbcfgEnable
        Description: In order to support post-build-time configuration data handled
                     by relative offsets to the configuration start address,
                     the container DoIPGeneral is extended with the configuration
                     parameter DoIPRelocatablePbcfgEnable.
        Config class: Pre-compile : VARIANT-POST-BUILD
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1207</srcid><srcstatus/><internalId>626</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_Test_PBcfgM_Off</srcid><srcstatus/><internalId>952</internalId></linkedfrom><linkedfrom><srcid>DoIP_Test_PBcfgM_On</srcid><srcstatus/><internalId>953</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00200</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the function DoIP_SoAdTpRxIndication() is called the DoIp module shall release all
        data connected to the reception, and in case reception of diagnostic message is currently
        ongoing, DoIP shall call PduR_DoIPRxIndication() with Result == E_NOT_OK.
      </description>
      <comment>
        When diagnostic message is fragmented over two Ethernet frames, and Tcp connection got
        reset before the second frame is received, SoAd will call DoIP_SoAdTpRxIndication()
        with E_OK, because SoAd is not aware that the second part of diagnostic message
        is not yet received.
        That is why DoIP needs to calculate value of parameter Result based on internal state
        when propagating the call to PduR_DoIPRxIndication().
      </comment>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03016_CloseTcpConnection_RxIncomplete</srcid><srcstatus/><internalId>1083</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>
    <specobject>
      <id>DoIP.EB.SWS_DoIP_00159</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a valid Routing Activation request was received on a new opened socket before the
        inactivity timer elapsed (i.e. the configured DoIPInitialInactivityTime did not pass)
        the DoIP module shall stop InitalInactivityTimer and start GeneralInactivityTimer.
        Valid Routing activation request means that the connection is put into "registered"
        state, i.e. received source address is assigned to that connection.
        This does not imply that eventual authentication/confirmation processes are finished.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02007_InactivityTimer</srcid><srcstatus/><internalId>1059</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00159</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>
    <specobject>
      <id>DoIP.EB.GeneralInactivityTimer.NoReset</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        DoIP message received before a valid Routing activation (as defined in
        [DoIP.EB.SWS_DoIP_00159]) does not start nor reset GeneralInactivityTimer.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03089_GeneralInactivityTimer_GNACK_NoReset</srcid><srcstatus/><internalId>1154</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03090_GeneralInactivityTimer_DiagMsg_NoReset</srcid><srcstatus/><internalId>1155</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03091_GeneralInactivityTimer_Rx_GNACK_NoReset</srcid><srcstatus/><internalId>1156</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00145</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>
    <specobject>
      <id>DoIP.EB.GeneralInactivityTimer.Reset</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        After routing activation has been performed as defined in [DoIP.EB.SWS_DoIP_00159],
        GeneralInactivityTimer is reset under any of the following conditions:
          - Reception of a new valid routing activation message
          - Reception of valid diagnostic message, i.e. message that generated positive acknowledge
          - Reception of a valid custom payload type message
          - Reception of a valid diagnostic message that was rejected by UL due to insufficient
            buffers, which resulted in diagnostic NACK message (0x05)
          - Reception of a valid Alive check response (received Source address matches registered)
          - Call of SoAd_TpTranmit() as a result of DoIP_TpTransmit() - transmission initiation
            initiation
          - Transmission of a each diagnostic message segment (DoIP_SoAdTpCopyTxData)
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03068_GeneralInactivityTimer_Reset_DoIPTransmit</srcid><srcstatus/><internalId>1133</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03069_GeneralInactivityTimer_Reset_RxDiagMsg</srcid><srcstatus/><internalId>1134</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03071_GeneralInactivityTimer_Reset_AliveResp</srcid><srcstatus/><internalId>1136</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03092_GeneralInactivityTimer_Reset_CopyTxData</srcid><srcstatus/><internalId>1157</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03093_GeneralInactivityTimer_Reset_ULNoBuff_1</srcid><srcstatus/><internalId>1158</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03094_GeneralInactivityTimer_Reset_ULNoBuff_2</srcid><srcstatus/><internalId>1159</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03095_GeneralInactivityTimer_Reset_RoutAct</srcid><srcstatus/><internalId>1160</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00145</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>
    <specobject>
      <id>DoIP.EB.AliveCheckResp.ConnUnregistered</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If Alive check response message is received before the connection is in "registered" state,
        i.e. before the valid routing activation message is received on that connection (as defined
        in DoIP.EB.SWS_DoIP_00159), it shall be ignored.
      </description>
      <comment>
        According to ISO requirement DoIP-134 sending Alive check response messages on the
        connection that is not in "registered" state is an erroneous case.
      </comment>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09018_AliveCheckResp_Ignore</srcid><srcstatus/><internalId>1308</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>456</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>
    <specobject>
      <id>DoIP.EB.AliveCheckResp.ConnRegistered</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If Alive check response message is received when the connection is in "registered" state,
        i.e. after the valid routing activation message is received on that connection (as defined
        in DoIP.EB.SWS_DoIP_00159), DoIP shall do the following:
        If the received Alive check response field "SourceAddress" matches the registered Source
        Address of the socket connection the response was received on, the DoIP module shall
        do nothing. Otherwise it shall close the socket connection as described in SWS_DoIP_00xx1.
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09012_AliveCheckResp_WrongSA</srcid><srcstatus/><internalId>1302</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09013_AliveCheckResp_MatchSA</srcid><srcstatus/><internalId>1303</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0130.TcpCloseConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>699</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>79</internalId></specobject>
    <specobject>
      <id>DoIP.EB.DoIPEnableTcpClosureWithFIN_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name:           DoIPEnableTcpClosureWithFIN
        Description:    When the parameter is enabled closure of Tcp connection will be done with
                        FIN flag set, when performed together with NACK transmission.
                        If parameter is disabled closure will be always be done with RST flag set.
        Multiplicity:   1
        Type:           EcucBooleanParamDef
        Default value:  true
        Post-Build Variant Value:   false
        Value Configuration Class:  Pre-compile time X All Variants
        Link time:                  --
        Post-build time:            --
        Scope / Dependency scope:   local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_893</srcid><srcstatus/><internalId>622</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0130.TcpCloseConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>699</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>

    <specobject>
      <id>DoIP.EB.SWS_DoIP_00174</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If DoIPPduRBufferNotOkNackValue configuration is enabled
        and PduR is not accepting the data totally (for details refer to chapter 7.5.1), the DoIP
        module shall send a diagnostic message negative acknowledge message with the diagnostic
        message negative acknowledge code set to DoIPPduRBufferNotOkNackValue configuration value,
        otherwise negative acknowledge code shall be set to 0x08 as described in chapter 7.3.2.6.3.
        Additionally the message shall be discarded.
      </description>
      <comment>
        In case upper layer returns error code BUFREQ_E_NOT_OK or BUFREQ_E_BUSY negative
        acknowledge code is set to either to DoIPPduRBufferNotOkNackValue configuration
        parameter if configuration parameter is enabled or to 0x08 if configuration parameter
        is not enabled.
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03023_DiagNackMsg_PdurCopyRxData_NOK</srcid><srcstatus/><internalId>1090</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03048_DiscardDiagMsg_PDUR_BUFF_NOT_OK_1</srcid><srcstatus/><internalId>1114</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03049_DiscardDiagMsg_PDUR_BUFF_NOT_OK_2</srcid><srcstatus/><internalId>1115</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.DoIPPduRBufferNotOkNackValue_Conf</srcid><srcstatus/><internalId>83</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>

    <specobject>
      <id>DoIP.EB.SWS_DoIP_00216</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If PduR_DoIPTpStartOfReception returns BUFREQ_E_NOT_OK or BUFREQ_E_OVFL, the DoIP module shall
        react as described in SWS_DoIP_00174 and discard all the TCP data until the next DoIP message.
      </description>
      <comment>
        In case upper layer returns error code BUFREQ_E_NOT_OK or BUFREQ_E_BUSY Negative acknowledge code is set to value of
        DoIPPduRBufferNotOkNackValue configuration parameter if that configuration parameter is enabled or
        to 0x08 if configuration parameter is not enabled (according to SWS_DoIP_00174).
        In case upper layer returns error code BUFREQ_E_OVFL, negative acknowledge code is set of 0x05 as described in
        SWS_DoIP_00126.
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03048_DiscardDiagMsg_PDUR_BUFF_NOT_OK_1</srcid><srcstatus/><internalId>1114</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.DoIPPduRBufferNotOkNackValue_Conf</srcid><srcstatus/><internalId>83</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>

    <specobject>
      <id>DoIP.EB.DoIPPduRBufferNotOkNackValue_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name:              DoIPPduRBufferNotOkNackValue
        Description:       If enabled specifies negative acknowledge (NACK) value that shall be returned in
                           case upper layer returns error code BUFREQ_E_NOT_OK or BUFREQ_E_BUSY.
                           If not enabled NACK value shall be 0x08 (according to SWS_DoIP_00174).
        Multiplicity:      1
        Type:              EcucIntegerParamDef
        Parent Containers: DoIPGeneral
        Default value:     Disabled
        ConfigurationClass:
        Pre-compile time:  X VARIANT-PRE-COMPILE
        Link time:         -
        Post-build time:   -
        Scope / Dependency scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03023_DiagNackMsg_PdurCopyRxData_NOK</srcid><srcstatus/><internalId>1090</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>

    <specobject>
      <id>DoIP.EB.DoIP_ControlInternalInterface</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Service name:       DoIP_ControlInternalInterface
        Syntax:             void DoIP_ControlInternalInterface(
                                                                uint8 InterfaceId,
                                                                boolean* ActivePtr
                                                              )
        Service ID [hex]:   0xC3U
        Sync/Async:         Synchronous
        Reentrancy:         Non Reentrant
        Parameters (in):    InterfaceId           Indentifier of the DoIP interface for which
                                                  function is called.
        Parameters (inout): ActivePtr             Boolean value acting as input parameter to request
                                                  active/inactive status of the given DoIP Interface.
        Return value:       None
        Description:        This function is to be used by integrators to inform the DoIP about the
                            status of the activation line of an internal tester for given InterfaceId.
        Available via:      DoIP.h
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest15012_TransitionActiveToInactive_ControlInternalInterface</srcid><srcstatus/><internalId>1360</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_4196</srcid><srcstatus/><internalId>567</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0138.EB.ControlInternalInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>707</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>84</internalId></specobject>

    <specobject>
      <id>DoIP.EB.DoIP_ControlInternalInterface.ChangeStatus</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        DoIP_ControlInternalInterface() with Active set to TRUE shall be processed only if activation
        line state is INACTIVE. Similarly, DoIP_ControlInternalInterface() with Active set to FALSE
        shall be processed only if activation line state is ACTIVE.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest15012_TransitionActiveToInactive_ControlInternalInterface</srcid><srcstatus/><internalId>1360</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0138.EB.ControlInternalInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>707</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>85</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>DoIP.SWS_DoIP_00117.Length7</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        One of two allowed payload lengths (see SWS_DoIP_00019) for Routing Activation
        Request Message with payload type 0x0005 is 7.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03030_Tcp_GenHeaderNack_INVALID_PL_LENGTH_1</srcid><srcstatus/><internalId>1096</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03031_Tcp_GenHeaderNack_INVALID_PL_LENGTH_2</srcid><srcstatus/><internalId>1097</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00117</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>86</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00117.Length11</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        One of two allowed payload lengths (see SWS_DoIP_00019) for Routing Activation
        Request Message with payload type 0x0005 is 11.
      </description>
      <comment/>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05008_RoutActAuth_PayloadLen11_SUCCESS_1</srcid><srcstatus/><internalId>1221</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00117</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>87</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00148.ValueCheck.DOIP_E_UNINIT</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        DOIP_E_UNINIT shall have the value 0x01.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00148</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>238</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>88</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00148.ValueCheck.DOIP_E_PARAM_POINTER</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        DOIP_E_PARAM_POINTER shall have the value 0x02.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00148</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>238</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>89</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00148.ValueCheck.DOIP_E_INVALID_PDU_SDU_ID</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        DOIP_E_INVALID_PDU_SDU_ID shall have the value 0x03.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00148</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>238</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>90</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00148.ValueCheck.DOIP_E_INVALID_PARAMETER</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        DOIP_E_INVALID_PARAMETER shall have the value 0x04.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00148</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>238</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>

    <specobject>
      <id>DoIP.EB.SWS_DoIP_00299</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If DoIP_TriggerVehicleAnnouncement() is called, but the corresponding socket is not yet ONLINE
        then the request shall be remembered and vehicle announcement timer shall be started as soon as the
        socket goes ONLINE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_4180</srcid><srcstatus/><internalId>566</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03142_VehicleAnnouncement_Trigger_2</srcid><srcstatus/><internalId>1207</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00299</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>353</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.TriggerAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>705</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>DoIP.ASR41.SWS_DoIP_00157</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_4_1_3</source>
      <version>1</version>
      <description>
        The DoIP module shall include the following H-files of other modules:
        SoAd.h - header file of the AUTOSAR SoAd module
        ComStack_Types.h [3]
        PduR_DoIP.h (for callback functions of the DoIP upper layer module PduR)
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP.h_29</srcid><srcstatus/><internalId>525</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/DoIP_Cbk.h_9</srcid><srcstatus/><internalId>527</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/DoIP_Cbk.h_11</srcid><srcstatus/><internalId>528</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/DoIP_Types.h_10</srcid><srcstatus/><internalId>544</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_75</srcid><srcstatus/><internalId>549</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_77</srcid><srcstatus/><internalId>550</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>
    <specobject>
      <id>DoIP.ASR41.SWS_DoIP_00158</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_4_1_3</source>
      <version>1</version>
      <description>
        The DoIP module shall provide the following H-files:
        DoIP.h (for declaration of provided interface functions)
        DoIP_Types.h (for public types defined by SoAd)
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP.h_5</srcid><srcstatus/><internalId>524</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/DoIP_Types.h_5</srcid><srcstatus/><internalId>543</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>
    <specobject>
      <id>DoIP.ASR41.SWS_DoIP_00171</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_4_1_3</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the DoIPConfigPtr
        is not a NULL_PTR. If the check fails the function shall raise the development error
        DOIP_E_PARAM_POINTER.
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01002_Init_NullPtr</srcid><srcstatus/><internalId>1033</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>
    <specobject>
      <id>DoIP.ASR41.SWS_DoIP_00273</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_4_1_3</source>
      <version>1</version>
      <description>
        DOIP_E_PENDING shall be defined within DoIP_Types.h to ensure compatibility.
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Types.h_21</srcid><srcstatus/><internalId>546</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>
    <specobject>
      <id>DoIP.ASR41.ECUC_DoIP_00011</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_4_1_3</source>
      <version>1</version>
      <description>
        Name: DoIPVehicleAnnouncementRepetition
        Parameter Type: Integer
        Parent Containers: DoIPGeneral,
        Description: Amount of repetitions of the vehicle announcement message on IP address assignment.
        Represents parameter A_DoIP_Annunce_Num of ISO 13400-2:2012
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Symbolic-Name-Value: false
        Max-Value: 255 (Type:
        Min-Value: 1 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>
    <specobject>
      <id>DoIP.ASR41.ECUC_DoIP_00072</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_4_1_3</source>
      <version>1</version>
      <description>
        Name: DoIPHeaderFileInclusion
        Parameter Type: StringParameter
        Parent Containers: DoIPGeneral,
        Description: Name of the header file(s) to be included by the DoIP module containing the used C-
        callback declarations.
        Lower Multiplicity: 0
        infinite
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Symbolic-Name-Value: false
        String Param Def Condition: Default Value: , Max-Length: , Min-Length: , Regular-Expression:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>DoIP.SWS_BSW_00049.ApiParameterChecking</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_BSWGeneral.pdf, v4.3.0</source>
      <version>1</version>
      <description>
        According to SWS_BSW_00049 when the detection of Development errors is active, then
        parameter checking for all API services shall be enabled.
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01003_Transmit_InvalidParam</srcid><srcstatus/><internalId>1034</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_BSW_00212.NullPointerChecking</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_BSWGeneral.pdf, v4.3.0</source>
      <version>1</version>
      <description>
        According to SWS_BSW_00212 when the detection of Development errors is active, then pointer
        parameters shall be checked against NULL_PTR unless NULL_PTR is explicitly allowed as a
        valid pointer address value in the API parameter specification.
        The same also applies in case a structure address is passed for the structure's field(s).
        If such a violation is detected a development error shall be raised.
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01003_Transmit_InvalidParam</srcid><srcstatus/><internalId>1034</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_BSW_00243.UnInitChecking</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_BSWGeneral.pdf, R21-11</source>
      <version>1</version>
      <description>
        According to SWS_BSW_00243 when the detection of Development errors is active, the DoIP shall
        raise the development error DOIP_E_UNINIT when any function apart from the DoIP_GetVersionInfo(),
        the DoIP_Init(), and DoIP_MainFunction() are called before DoIP is initialized.
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>DoIP.SWS_DoIP_00001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The DoIP module shall maintain the following information of the configured DoIPUDPConnection (
        for UDP communication): (a) State of the SocketConnection
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.SoConStatus</srcid><srcstatus/><internalId>486</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The DoIP module shall be able to maintain DoIPMaxTesterConnections configured connections with
        the following information: (a) DoIPSoAdTcpRxPduId, describes the connection to the
        SocketConnection (b) Source Address (SA) as soon as the information is available for the DoIP
        module (c) All Routing activation status of this socket connection (d) Status of the
        SocketConnection (f) Time since last TCP communication (Rx or Tx) (g) Information if the
        connection is active or not
      </description>
      <comment>
        Status of the SocketConnection is not stored.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Int.h_1248</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.SoConStatus</srcid><srcstatus/><internalId>486</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The first 8 Bytes of a DoIP message shall contain the DoIP Header followed by the actual
        payload data.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03000_Udp_GenHeaderNack_INCORRECT_PATTERN</srcid><srcstatus/><internalId>1068</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00005</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Byte 0 of the DoIP header has to contain the protocol version e.g. 0x02.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03000_Udp_GenHeaderNack_INCORRECT_PATTERN</srcid><srcstatus/><internalId>1068</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The Byte 1 of the DoIP header shall contain the inverse protocol version e.g. 0xFD value shall
        be added if the protocol version is 0x02.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03000_Udp_GenHeaderNack_INCORRECT_PATTERN</srcid><srcstatus/><internalId>1068</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00007</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Byte 2 and Byte 3 shall contain the PayloadType.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03001_Udp_GenHeaderNack_UNKNOWN_PL_TYPE</srcid><srcstatus/><internalId>1069</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00008</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The following PayloadTypes shall be supported for reception of DoIP messages:
        Payload Type value   Payload type name
        0x0000               Generic DoIP header
        0x0001               Vehicle Identification request message
        0x0002               Vehicle identification request message with EID
        0x0003               Vehicle identification request message with VIN
        0x0004               Vehicle announcement message/vehicle identification
                             response message
        0x0005               Routing activation request
        0x0008               Alive Check response
        0x4001               DoIP entity status request
        0x4003               Diagnostic power mode information request
        0x8001               Diagnostic message
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00117.Length7</srcid><srcstatus/><internalId>86</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00117.Length11</srcid><srcstatus/><internalId>87</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00059</srcid><srcstatus/><internalId>151</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00063</srcid><srcstatus/><internalId>155</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00068</srcid><srcstatus/><internalId>160</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00091</srcid><srcstatus/><internalId>183</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00095</srcid><srcstatus/><internalId>187</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00122</srcid><srcstatus/><internalId>213</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00292</srcid><srcstatus/><internalId>346</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00293</srcid><srcstatus/><internalId>347</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00009</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The following PayloadTypes shall be supported for sending of DoIP messages:
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00012</srcid><srcstatus/><internalId>111</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00060</srcid><srcstatus/><internalId>152</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00010</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Bytes 4 to 7 shall contain the payload length in Bytes not including the length of the DoIP
        header information (i.e. if a DoIP message is received with Payload length set to 2 it means
        that 10 Bytes in total were received)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03000_Udp_GenHeaderNack_INCORRECT_PATTERN</srcid><srcstatus/><internalId>1068</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00012</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If an invalid DoIP header was received, a DoIP message with payload type 0x0000 shall be
        transmitted with the payload described in SWS_DoIP_00013 on the TxPdu which is related to the
        RxPdu the message was received on, if the according SocketConnection status has not changed
        since the reception of the DoIP message.
      </description>
      <comment>
        No check of SocketConnection status prior sending response.
        Rationale: Sending of response is done in the context of DoIP_SoAdIfRxIndication(), thus
        before DoIP_SoConModeChg() could have been processed. Sending message while connection
        is OFFLINE has no negative impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03000_Udp_GenHeaderNack_INCORRECT_PATTERN</srcid><srcstatus/><internalId>1068</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.SoConStatus</srcid><srcstatus/><internalId>486</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00013</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The payload of the generic DoIP header shall contain the corresponding NACK code (1 Byte) as
        specified from SWS_DoIP_00014 to SWS_DoIP_00019.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00014</srcid><srcstatus/><internalId>113</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00016</srcid><srcstatus/><internalId>115</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00017</srcid><srcstatus/><internalId>116</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00019</srcid><srcstatus/><internalId>118</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00014</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the Protocol information is incorrect,  the NACK code 0x00 shall be sent and the according
        socket shall be closed
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03000_Udp_GenHeaderNack_INCORRECT_PATTERN</srcid><srcstatus/><internalId>1068</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03029_Tcp_GenHeaderNack_INCORRECT_PATTERN</srcid><srcstatus/><internalId>1095</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09009_ExternalConReset</srcid><srcstatus/><internalId>1299</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0130.EB.SWS_DoIP_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>846</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>113</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00015</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        On a vehicle identification request the Protocol Type 0xFF and the inverse Protocol Type 0x00
        shall be supported as default values, additionally to the ProtocolType described in
        SWS_DoIP_00005 and SWS_DoIP_00006.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03005_VehicleIdentificationRequest</srcid><srcstatus/><internalId>1073</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03088_Udp_GenHeaderNack_DefProtoV_InvalidPayload</srcid><srcstatus/><internalId>1153</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>114</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00016</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a payload type is not supported  the DoIP module shall send the NACK code 0x01 to indicate
        that a unkown payload type was requested. The message shall be discarded for further processing.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03001_Udp_GenHeaderNack_UNKNOWN_PL_TYPE</srcid><srcstatus/><internalId>1069</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03028_Tcp_GenHeaderNack_UNKNOWN_PL_TYPE</srcid><srcstatus/><internalId>1094</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08003_GenHeaderNack_UNKNOWN_PL_TYPE</srcid><srcstatus/><internalId>1277</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>115</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00017</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the payload length exceeds the value configured by DoIPMaxRequestBytes, the DoIP module
        shall send the NACK code 0x02 to indicate that the message is too large. The message shall be
        discarded for further processing.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03027_Tcp_GenHeaderNack_MSG_TO_LONG</srcid><srcstatus/><internalId>1093</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03033_Udp_GenHeaderNack_MSG_TO_LONG</srcid><srcstatus/><internalId>1099</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03037_Tcp_GenHeaderNack_RxBlocked</srcid><srcstatus/><internalId>1103</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest07005_Tcp_GenHeaderNack_MSG_TO_LONG</srcid><srcstatus/><internalId>1270</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>116</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00018</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module is called with DoIP_SoAdTpStartOfReception() and the indicated payload
        length exceeds the currently available buffer size, the function must return with BUFREQ_E_OVFL
        value (No buffer of the required length can be provided) and trigger a Negative Response (NACK)
        with value 0x03. The currently available buffer size calculation shall be based on Payload Type.
        If the DoIP message is processed internally  the locally avalailable buffer, other case the
        upper layer (PduR_DoIPTpStartOfReception) provided buffer size shall be the base for the
        response.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.TpStreamingMode</srcid><srcstatus/><internalId>496</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>117</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00019</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module is called with a payload length that is not valid for the specifc payload
        type, the NACK code 0x04 shall be sent and the according socket shall be closed
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03002_Udp_GenHeaderNack_INVALID_PL_LENGTH_1</srcid><srcstatus/><internalId>1070</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03003_Udp_GenHeaderNack_INVALID_PL_LENGTH_2</srcid><srcstatus/><internalId>1071</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03004_Udp_GenHeaderNack_INVALID_PL_LENGTH_3</srcid><srcstatus/><internalId>1072</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03030_Tcp_GenHeaderNack_INVALID_PL_LENGTH_1</srcid><srcstatus/><internalId>1096</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03031_Tcp_GenHeaderNack_INVALID_PL_LENGTH_2</srcid><srcstatus/><internalId>1097</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03032_Tcp_GenHeaderNack_INVALID_PL_LENGTH_3</srcid><srcstatus/><internalId>1098</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03041_Diag_Entity_Status_Req_NOK</srcid><srcstatus/><internalId>1108</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05029_PowerMode_WrongLength</srcid><srcstatus/><internalId>1242</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09010_Tcp_GenHeaderNack_INVALID_PL_LENGTH_4</srcid><srcstatus/><internalId>1300</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>118</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00020</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        |       Module      |    Header File    |       Imported Type       |
        ---------------------------------------------------------------------
        |                   |                   | BufReq_ReturnType         |
        |                   |                   | PduIdType                 |
        |                   |                   | PduInfoType               |
        |  ComStack_Types   |  ComStack_Type.h  | PduLengthType             |
        |                   |                   | RetryInfoType             |
        |                   |                   | TpDataStateType           |
        ---------------------------------------------------------------------
        |       SoAd        |      SoAd.h       | SoAd_SoConIdType          |
        |                   |                   | SoAd_SoConModeType        |
        ---------------------------------------------------------------------
        |        Std        |    Std_Types.h    | Std_ReturnType            |
        |                   |                   | Std_VersionInfoType       |
        ---------------------------------------------------------------------
        |                   |                   | TcpIp_DomainType          |
        |       TcpIp       |      TcpIp.h      | TcpIp_IpAddrAssignmentType|
        |                   |                   | TcpIp_IpAddrStateType     |
        |                   |                   | TcpIp_SockAddrType        |
        ---------------------------------------------------------------------
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>119</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00022</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_TpTransmit
        Syntax:             Std_ReturnType DoIP_TpTransmit(PduIdType TxPduId, const PduInfoType* PduInfoPtr)
        Service ID [hex]:   0x53
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in):    TxPduId       Identifier of the PDU to be transmitted.
                            PduInfoPtr    Length of and pointer to the PDU data and pointer to MetaData.
        Parameters (inout): None
        Parameters (out):   None
        Return value:       Std_ReturnType    E_OK: Transmit request has been accepted.
                                              E_NOT_OK: Transmit request has not been accepted.
        Description:        Requests transmission of a PDU.
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_02_Features_Disabled</srcid><srcstatus/><internalId>956</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>120</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00023</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_TpCancelTransmit
        Syntax:             Std_ReturnType DoIP_TpCancelTransmit (PduIdType TxPduId)
        Service ID [hex]:   0x54
        Sync/Async:         Synchronous Reentrant for different PduIds. Non reentrant for the same PduId.
        Reentrancy:         Non Reentrant
        Parameters (in):    TxPduId         Identifier of the PDU to be transmitted.
        Parameters (inout): None
        Parameters (out):   None
        Return value:       Std_ReturnType  E_OK: Cancellation was executed successfully by the destination module.
                                            E_NOT_OK: Cancellation was rejected by the destination module.
        Description:        Requests cancellation of an ongoing transmission of a PDU in a lower layer
                            communication module. The call of this API to cancel an ongoing transmission
                            will close the used TCP connection.
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.CancelAPIs</srcid><srcstatus/><internalId>492</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>121</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00024</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_TpCancelReceive
        Syntax:             Std_ReturnType DoIP_TpCancelReceive (PduIdType RxPduId)
        Service ID [hex]:   0x4c
        Sync/Async:         Synchronous
        Reentrancy:         Non Reentrant
        Parameters (in):    RxPduId         Identification of the PDU to be cancelled.
        Parameters (inout): None
        Parameters (out):   None
        Return value:       Std_ReturnType  E_OK: Cancellation was executed successfully by the destination module.
                                            E_NOT_OK: Cancellation was rejected by the destination module.
        Description:        Requests cancellation of an ongoing reception of a PDU in a lower layer transport
                            protocol module. The call of this API to cancel an ongoing reception will
                            close the used TCP connection.
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.CancelAPIs</srcid><srcstatus/><internalId>492</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>122</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00025</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:           DoIP_ConfigType
        Kind:           Structure
        Elements:       Implementation specific
        Type:           -
        Comment:        The content of the configuration data structure is implementation specific
        Description:    Configuration data structure of the DoIP module
        Available via:  DoIP.h
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>123</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00026</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_Init
        Syntax              void DoIP_Init (const DoIP_ConfigType* DoIPConfigPtr)
        Service ID [hex]:   0x01
        Sync/Async:         Synchronous
        Reentrancy:         Non Reentrant
        Parameters (in):    DoIPConfigPtr       Pointer to the configuration data of the DoIP module.
        Parameters (inout): None
        Parameters (out):   None
        Return value:       None
        Description:        This service initializes all global variables of the DoIP module. After return of
                            this service the DoIP module is operational.
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_02_Features_Disabled</srcid><srcstatus/><internalId>956</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>124</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00027</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_GetVersionInfo
        Syntax              void DoIP_GetVersionInfo (Std_VersionInfoType* versioninfo)
        Service ID [hex]:   0x00
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant
        Parameters (in):    None
        Parameters (inout): None
        Parameters (out):   versioninfo   Pointer to where to store the version information of this module.
        Return value:       None
        Description:        Returns the version information of this module.
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>125</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00030</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If source code for caller and callee of DoIP_GetVersionInfo is available, the DoIP module
        should realize DoIP_GetVersionInfo as a macro, defined in the module's header file.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.GetVersionInfo</srcid><srcstatus/><internalId>523</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>126</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00031</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_SoAdTpCopyTxData
        Syntax              BufReq_ReturnType DoIP_SoAdTpCopyTxData (
                                                                      PduIdType id,
                                                                      const PduInfoType* info,
                                                                      const RetryInfoType* retry,
                                                                      PduLengthType* availableDataPtr
                                                                    )
        Service ID [hex]:   0x43
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant
        Parameters (in):    id            Identification of the transmitted I-PDU.
                            info          Provides the destination buffer (SduDataPtr) and the number
                                          of bytes to be copied (SduLength). If not enough transmit
                                          data is available, no data is copied by the upper layer
                                          module and BUFREQ_E_BUSY is returned. The lower layer module
                                          may retry the call. An SduLength of 0 can be used to indicate
                                          state changes in the retry parameter or to query the current
                                          amount of available data in the upper layer module. In this case,
                                          the SduDataPtr may be a NULL_PTR.
                            retry         This parameter is used to acknowledge transmitted data or to
                                          retransmit data after transmission problems. If the retry
                                          parameter is a NULL_PTR, it indicates that the transmit
                                          data can be removed from the buffer immediately after it has
                                          been copied. Otherwise, the retry parameter must point to a
                                          valid RetryInfoType element.
                                          If TpDataState indicates:
                                          TP_CONFPENDING  - the previously copied data must remain in
                                                            the TP buffer to be available for error recovery.
                                          TP_DATACONF     - indicates that all data that has been copied
                                                            before this call is confirmed and can be removed
                                                            from the TP buffer. Data copied by this API call
                                                            is excluded and will be confirmed later.
                                          TP_DATARETRY    - indicates that this API call shall copy previously
                                                            copied data in order to recover from an error.
                                                            In this case TxTpDataCnt specifies the offset in
                                                            bytes from the current data copy position.
        Parameters (inout): None
        Parameters (out):   availableDataPtr    Indicates the remaining number of bytes that are
                                                available in the upper layer module's Tx buffer.
                                                availableDataPtr can be used by TP modules that support
                                                dynamic payload lengths (e.g. FrIsoTp) to determine the
                                                size of the following CFs.
        Return value:       BufReq_ReturnType   BUFREQ_OK:        Data has been copied to the transmit
                                                                  buffer completely as requested.
                                                BUFREQ_E_BUSY:    Request could not be fulfilled, because the
                                                                  required amount of Tx data is not available.
                                                                  The lower layer module may retry this call
                                                                  later on. No data has been copied.
                                                BUFREQ_E_NOT_OK: Data has not been copied. Request failed.
        Description:        This function is called to acquire the transmit data of an I-PDU segment (N-PDU)
                            Each call to this function provides the next part of the I-PDU data unless
                            retry-&gt;TpDataState is TP_DATARETRY. In this case the function restarts
                            to copy the data beginning at the offset from the current position indicated
                            by retry-&gt;TxTpDataCnt. The size of the remaining data is written to the
                            position indicated by availableDataPtr.
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_02_Features_Disabled</srcid><srcstatus/><internalId>956</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03085_AvailableDataPtr_CopyTxData_SduLength_0</srcid><srcstatus/><internalId>1150</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>127</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00032</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_SoAdTpTxConfirmation
        Syntax:             void DoIP_SoAdTpTxConfirmation (PduIdType id, Std_ReturnType result)
        Service ID [hex]:   0x48
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant
        Parameters (in):    id          Identification of the transmitted I-PDU.
                            result      Result of the transmission of the I-PDU.
        Parameters (inout): None
        Parameters (out):   None
        Return value:       None
        Description:        This function is called after the I-PDU has been transmitted on its network,
                            the result indicates whether the transmission was successful or not.
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_02_Features_Disabled</srcid><srcstatus/><internalId>956</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>128</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00033</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_SoAdTpCopyRxData
        Syntax:             BufReq_ReturnType DoIP_SoAdTpCopyRxData (
                                                                      PduIdType id,
                                                                      const PduInfoType* info,
                                                                      PduLengthType* bufferSizePtr
                                                                    )
        Service ID [hex]:   0x44
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant
        Parameters (in):    id                  Identification of the received I-PDU.
                            info                Provides the source buffer (SduDataPtr) and the number
                                                of bytes to be copied (SduLength) An SduLength of 0 can
                                                be used to query the current amount of available buffer
                                                in the upper layer module. In this case, the SduDataPtr
                                                may be a NULL_PTR.
        Parameters (inout): None
        Parameters (out):   bufferSizePtr       Available receive buffer after data has been copied.
        Return value:       BufReq_ReturnType   BUFREQ_OK: Data copied successfully.
                                                BUFREQ_E_NOT_OK: Data was not copied because an error occurred.
        Description:        This function is called to provide the received data of an I-PDU segment (N-PDU)
                            to the upper layer. Each call to this function provides the next part of
                            the I-PDU data. The size of the remaining buffer is written to the position
                            indicated by bufferSizePtr.
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_02_Features_Disabled</srcid><srcstatus/><internalId>956</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>129</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00036</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the id matches a
        configured DoIPSoAdTcpRxPduId. If the check fails the function shall raise the development
        error DOIP_E_INVALID_PDU_SDU_ID. Otherwise, if DET is not enabled, return BUFREQ_E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01005_SoAdTpCopyRxData_InvalidParam</srcid><srcstatus/><internalId>1036</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>130</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00037</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_SoAdTpStartOfReception
        Syntax:             BufReq_ReturnType DoIP_SoAdTpStartOfReception (
                                                                            PduIdType id,
                                                                            const PduInfoType* info,
                                                                            PduLengthType TpSduLength,
                                                                            PduLengthType* bufferSizePtr
                                                                          )
        Service ID [hex]:   0x46
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant
        Parameters (in):    id              Identification of the I-PDU.
                            info            Pointer to a PduInfoType structure containing the payload data
                                            (without protocol information) and payload length of the first
                                            frame or single frame of a transport protocol I-PDU reception,
                                            and the MetaData related to this PDU. If neither first/single
                                            frame data nor MetaData are available, this parameter is set
                                            to NULL_PTR.
                            TpSduLength     Total length of the N-SDU to be received.
        Parameters (inout): None
        Parameters (out):   bufferSizePtr   Available receive buffer in the receiving module. This
                                            parameter will be used to compute the Block Size (BS) in
                                            the transport protocol module.
        Return value:       BufReq_ReturnType   BUFREQ_OK:        Connection has been accepted.
                                                BUFREQ_E_NOT_OK:  Connection has been rejected; reception is aborted.
                                                BUFREQ_E_OVFL:    No buffer of the required length can be provided; reception is aborted.
                            bufferSizePtr       BUFREQ_OK:        Indicates the available receive buffer;
                                                                  reception is continued. If no buffer of
                                                                  the requested size is available, a receive
                                                                  buffer size of 0 shall be indicated by
                                                                  bufferSizePtr.
                                                BUFREQ_E_NOT_OK:  bufferSizePtr remains unchanged.
                                                BUFREQ_E_OVFL:    bufferSizePtr remains unchanged.
        Description:        This function is called at the start of receiving an N-SDU. The N-SDU might be
                            fragmented into multiple N-PDUs (FF with one or more following CFs) or
                            might consist of a single N-PDU (SF). The service shall provide the currently
                            available maximum buffer size when invoked with TpSduLength equal to 0.
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_02_Features_Disabled</srcid><srcstatus/><internalId>956</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>131</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00038</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_SoAdTpRxIndication
        Syntax:             void DoIP_SoAdTpRxIndication (PduIdType id, Std_ReturnType result)
        Service ID [hex]:   0x45
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant
        Parameters (in):    id          Identification of the received I-PDU.
                            result      Result of the reception.
        Parameters (inout): None
        Parameters (out):   None
        Return value:       None
        Description:        Called after an I-PDU has been received via the TP API, the result indicates
                            whether the transmission was successful or not.
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_02_Features_Disabled</srcid><srcstatus/><internalId>956</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>132</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00039</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_SoConModeChg
        Syntax:             void DoIP_SoConModeChg (SoAd_SoConIdType SoConId, SoAd_SoConModeType Mode)
        Service ID [hex]:   0x0b
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant for different SoConIds. Non reentrant for the same SoConId.
        Parameters (in):    SoConId   Socket connection index specifying the socket connection with the
                                      mode change.
                            Mode      New mode.
        Parameters (inout): None
        Parameters (out):   None
        Return value:       None
        Description:        Notification about a SoAd socket connection state change, e.g. socket connection
                            gets online
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_02_Features_Disabled</srcid><srcstatus/><internalId>956</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>133</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00040</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_LocalIpAddrAssignmentChg
        Syntax              void DoIP_LocalIpAddrAssignmentChg (SoAd_SoConIdType SoConId, TcpIp_IpAddrStateType State)
        Service ID [hex]:   0x0c
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant for different SoConIds. Non reentrant for the same SoConId.
        Parameters (in):    SoConId       Socket connection index specifying the socket connection where
                                          the IP address assigment has changed
                            State         State of IP address assignment
        Parameters (inout): None
        Parameters (out):   None
        Return value:       None
        Description:        This function gets called by the SoAd if an IP address assignment related
                            to a socket connection changes (i.e. new address assigned or assigned address becomes invalid).
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>134</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00041</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:     DoIP_MainFunction
        Syntax:           void DoIP_MainFunction (void)
        Service ID [hex]: 0x02
        Description:      Schedules the Diagnostic over IP module. (Entry point for scheduling)
        Available via:    SchM_DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_02_Features_Disabled</srcid><srcstatus/><internalId>956</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>135</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00042</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The main function for scheduling the DoIP module (Entry point for scheduling) shall be called
        by the Schedule Manager according to the configured call period.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>136</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00043</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The call period of the DoIP_MainFunction() is determined by the configuration parameter
        DoIPMainFunctionPeriod.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>137</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00044</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        |         API Function        |  Header File  |                     Description                     |
        -----------------------------------------------------------------------------------------------------
        |          Dcm_GetVin         | Dcm.h         | Function to get the VIN (as defined in SAE J1979-DA)|
        -----------------------------------------------------------------------------------------------------
        |                             |               | This function is called to provide the received data|
        |                             |               | of an I-PDU segment (N-PDU) to the upper layer. Each|
        |    PduR_DoIPTpCopyRxData    | PduR_DoIPTp.h | call to this function provides the next part of the |
        |                             |               | I-PDU data. The size of the remaining buffer is     |
        |                             |               | written to the position indicated by bufferSizePtr. |
        -----------------------------------------------------------------------------------------------------
        |                             |               | This function is called to acquire the transmit data|
        |                             |               | of an I-PDU segment (N-PDU). Each call to this      |
        |                             |               | function provides the next part of the I-PDU data   |
        |                             |               | unless retry-&gt;TpDataState is TP_DATARETRY. In    |
        |    PduR_DoIPTpCopyTxData    | PduR_DoIPTp.h | this case the function restarts to copy the data    |
        |                             |               | beginning at the offset from the current position   |
        |                             |               | indicated by retry-&gt;TxTpDataCnt. The size of the |
        |                             |               | remaining data is written to the position indicated |
        |                             |               | by availableDataPtr.                                |
        -----------------------------------------------------------------------------------------------------
        |                             |               | Called after an I-PDU has been received via the TP  |
        |   PduR_DoIPTpRxIndication   | PduR_DoIPTp.h | API, the result indicates whether the transmission  |
        |                             |               | was successful or not.                              |
        -----------------------------------------------------------------------------------------------------
        |                             |               | This function is called at the start of receiving an|
        |                             |               | N-SDU. The N-SDU might be fragmented into multiple  |
        | PduR_DoIPTpStartOfReception | PduR_DoIPTp.h | N-PDUs (FF with one or more following CFs) or might |
        |                             |               | consist of a single N-PDU (SF). The service shall   |
        |                             |               | provide the currently available |maximum buffer size|
        |                             |               | when invoked with TpSduLength equal to 0.           |
        |  PduR_DoIPTpTxConfirmation  | PduR_DoIPTp.h | This function is called after the I-PDU has been    |
        |                             |               | transmitted on its network, the result indicates    |
        |                             |               | whether the transmission was successful or not.     |
        -----------------------------------------------------------------------------------------------------
        |       SoAd_CloseSoCon       |     SoAd.h    | This service closes the socket connection specified |
        |                             |               | by SoConId.                                         |
        -----------------------------------------------------------------------------------------------------
        |                             |               | Retrieves the local address (IP address and port)   |
        |      SoAd_GetLocalAddr      |     SoAd.h    | actually used for the SoAd socket connection        |
        |                             |               | specified by SoConId, the netmask and default router|
        -----------------------------------------------------------------------------------------------------
        |                             |               | Retrieves the physical source address of the EthIf  |
        |       SoAd_GetPhysAddr      |     SoAd.h    | controller used by the SoAd socket connection       |
        |                             |               | specified by SoConId.                               |
        -----------------------------------------------------------------------------------------------------
        |                             |               | Retrieves the remote address (IP address and port)  |
        |       SoAd_GetRemoteAddr    |     SoAd.h    | actually used |for the SoAd socket connection       |
        |                             |               | specified by SoConId.                               |
        -----------------------------------------------------------------------------------------------------
        |       SoAd_GetSoConId       |     SoAd.h    | Returns socket connection index related to the      |
        |                             |               | specified TxPduId.                                  |
        -----------------------------------------------------------------------------------------------------
        |       SoAd_IfTransmit       |     SoAd.h    | Requests transmission of a PDU.                     |
        -----------------------------------------------------------------------------------------------------
        |       SoAd_OpenSoCon        |     SoAd.h    | This service opens the socket connection specified  |
        |                             |               | by SoConId.                                         |
        -----------------------------------------------------------------------------------------------------
        |                             |               | By this API service an upper layer of the SoAd can  |
        | SoAd_ReadDhcpHostNameOption |     SoAd.h    | read the currently configured hostname, i.e. FQDN   |
        |                             |               | option in the DHCP submodule of the TCP/IP stack.   |
        -----------------------------------------------------------------------------------------------------
        |                             |               | By this API service the local IP address assignment |
        |SoAd_ReleaseIpAddrAssignment |     SoAd.h    | used for the socket connection specified by SoConId |
        |                             |               | is released.                                        |
        -----------------------------------------------------------------------------------------------------
        |                             |               | By this API service the local IP address assignment |
        |SoAd_RequestIpAddrAssignment |     SoAd.h    | which shall be used for the socket connection       |
        |                             |               | specified by SoConId is initiated.                  |
        -----------------------------------------------------------------------------------------------------
        |                             |               | By this API service the remote address              |
        |     SoAd_SetRemoteAddr      |     SoAd.h    | (IP address and port) of |the specified socket      |
        |                             |               | connection shall be set.                            |
        -----------------------------------------------------------------------------------------------------
        |                             |               | This API service shall either return the socket     |
        |                             |               | connection index of the SoAdSocketConnectionGroup   |
        |   SoAd_SetUniqueRemoteAddr  |     SoAd.h    | where the specified remote address                  |
        |                             |               | (IP address and port) is set or assign the remote   |
        |                             |               | address to an unused socket connection from the     |
        |                             |               | same SoAdSocketConnectionGroup.                     |
        -----------------------------------------------------------------------------------------------------
        |      SoAd_TpTransmit        |     SoAd.h    | Requests transmission of a PDU.                     |
        -----------------------------------------------------------------------------------------------------
        |                             |               | By this API service an upper layer of the SoAd can  |
        |SoAd_WriteDhcpHostNameOption |     SoAd.h    | set the hostname, i.e. FQDN option in the DHCP      |
        |                             |               | submodule of the TCP/IP stack.                      |
        -----------------------------------------------------------------------------------------------------
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_04_Mandatory_Interfaces</srcid><srcstatus/><internalId>958</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>138</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00045</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        |       API Function       |  Header File  |              Description
        -----------------------------------------------------------------------------------------
        |Det_ReportError           |     Det.h     | Service to report development errors.      |
        -----------------------------------------------------------------------------------------
        |                          |               | The lower layer communication interface    |
        |PduR_DoIPIfTxConfirmation | PduR_DoIPIf.h | module confirms the transmission of a PDU, |
        |                          |               | or the failure to transmit a PDU.          |
        -----------------------------------------------------------------------------------------
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>139</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00047</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       &lt;User&gt;_DoIPGetPowerModeCallback
        Syntax:             Std_ReturnType &lt;User&gt;_DoIPGetPowerModeCallback (DoIP_PowerStateType* PowerStateReady)
        Service ID [hex]:   -
        Sync/Async:         Synchronous
        Reentrancy:         Don't care
        Parameters (in):    None
        Parameters (inout): None
        Parameters (out):   PowerStateReady   Pointer containing the information of the PowerModeStatus.
                                              Only valid if the return value equals E_OK.
        Return value:       Std_ReturnType    E_OK:     PowerStateReady contains valid information.
                                              E_NOT_OK: PowerStateReady contains no valid information
        Description:        Callback function to check if the PowerMode of the DoIP entity is ready or not.
        Available via:      DoIP_Externals.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05028_PowerMode</srcid><srcstatus/><internalId>1241</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05030_PowerMode_E_NOK</srcid><srcstatus/><internalId>1243</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>140</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00048</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       &lt;User&gt;_DoIPRoutingActivationConfirmation
        Syntax              Std_ReturnType &lt;User&gt;_DoIPRoutingActivationConfirmation (
                                                                                            boolean* Confirmed,
                                                                                            const uint8* ConfirmationReqData,
                                                                                            uint8* ConfirmationResData
                                                                                          )
        Service ID [hex]:   -
        Sync/Async:         Synchronous/Asynchronous
        Reentrancy:         Don't care
        Parameters (in):    ConfirmationReqData     Pointer to OEM specific bytes for Routing activation
                                                    request. Only needed if DoIPRoutingActivationConfirmationReqLength
                                                    is not 0.
        Parameters (inout): None
        Parameters (out):   Confirmed               Pointer containing the information if Confirmation was
                                                    successful (TRUE) or not (FALSE). Only valid if the
                                                    return value equals E_OK.
                            ConfirmationResData     Pointer to OEM specific bytes for Response on Routing
                                                    activation. Only needed if
                                                    DoIPRoutingActivationConfirmationResLength if not 0.
                                                    Contains valid data if function return with E_OK.
        Return value:       Std_ReturnType          E_OK:           Confirmed and ConfirmationResData contain valid Data.
                                                    DOIP_E_PENDING: Confirmation still running. Call next DoIP_MainFunction cycle again.
                                                    E_NOT_OK:       Confirmed and/or ConfirmationResData do not contain valid information.
        Description:        Callback function to get the confirmation for the Routing Activation.
        Available via:      DoIP_Externals.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Int.h_946</srcid><srcstatus/><internalId>530</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>141</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00049</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       &lt;User&gt;_DoIPRoutingActivationAuthentication
        Syntax:             Std_ReturnType &lt;User&gt;_DoIPRoutingActivationAuthentication
                                                  (
                                                    boolean* Authentified,
                                                    const uint8* AuthenticationReqData,
                                                    uint8* AuthenticationResData
                                                  )
        Service ID [hex]:   -
        Sync/Async:         Synchronous/Asynchronous
        Reentrancy:         Don't care
        Parameters (in):    AuthenticationReqData   Pointer to OEM specific bytes for Routing activation
                                                    request. Only needed if DoIPRoutingActivationAuthenticationReqLength
                                                    is not 0.
        Parameters (inout): None
        Parameters (out):   Authentified            Pointer containing the information if Confirmation was
                                                    successful (TRUE) or not (FALSE). Only valid if the
                                                    return value equals E_OK.
                            AuthenticationResData   Pointer to OEM specific bytes for Response on Routing
                                                    activation. Only needed if DoIPRoutingActivationAuthenticationResLength
                                                    if not 0. Contains valid data if function return with E_OK.
        Return value:       Std_ReturnType          E_OK:           Authentified and AuthenticationResData
                                                                    contain valid Data.
                                                    DOIP_E_PENDING: Authentication still running. Call
                                                                    next DoIP_MainFunction cycle again.
                                                    E_NOT_OK:       Authentified and/or AuthenticationResData
                                                                    do not contain valid information.
        Description:        Callback function to get the confirmation for the Routing Activation.
        Available via:      DoIP_Externals.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Int.h_937</srcid><srcstatus/><internalId>529</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>142</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00050</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       &lt;User&gt;_DoIPTriggerGidSyncCallback
        Syntax:             Std_ReturnType &lt;User&gt;_DoIPTriggerGidSyncCallback (void)
        Service ID [hex]:   -
        Sync/Async:         Synchronous/Asynchronous
        Reentrancy:         Don't care
        Parameters (in):    None
        Parameters (inout): None
        Parameters (out):   None
        Return value:       Std_ReturnType    E_OK:     GroupIdentifier Synchronization was triggered.
                                              E_NOT_OK: GroupIdentifier Synchronization could not be
                                                        triggered so try again next MainFunction.
        Description:        Function is used in the case that DoIPVinGIDMaster is set to true and a
                            container DoIPTriggerGidSyncCallback is configured to trigger the
                            synchronization process of the GroupIdentifier.
        Available via:      DoIP_Externals.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AUTOSAR_GID_Sync</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0109.SWS.GidSync</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>678</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>143</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00051</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       &lt;User&gt;_DoIPGetGidCallback
        Syntax:             Std_ReturnType &lt;User&gt;_DoIPGetGidCallback (uint8* GroupId)
        Service ID [hex]:   -
        Sync/Async:         Synchronous/Asynchronous
        Reentrancy:         Don't care
        Parameters (in):    None
        Parameters (inout): None
        Parameters (out):   GroupId           Pointer to GroupIdentifier.
        Return value:       Std_ReturnType    E_OK:     GroupId contains a valid value.
                                              E_NOT_OK: GroupId does not contain a valid value.
        Description:        Function is used in the case that DoIPVinGIDMaster is set to false and
                            DoIPGetGidCallback is configured to get on a vehicle identification the GID.
                            If the return value is not E_OK the DoIP shall use the default GID.
        Available via:      DoIP_Externals.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.User_DoIPGetGID</srcid><srcstatus/><internalId>499</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00051</srcid><srcstatus/><internalId>62</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0109.SWS.GidSync</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>678</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>144</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00052</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        A DoIP Service Component with the ShortName DoIP shall be provided based on the configuration
        of the DoIP module.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/DoIP_swc_internal.arxml.m4_16</srcid><srcstatus/><internalId>657</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00054</srcid><srcstatus/><internalId>146</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00055</srcid><srcstatus/><internalId>147</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0100.ServiceInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>669</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>145</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00054</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:       CallbackGetPowerMode
        Comment:    -
        IsService:  true
        Variation:  {ecuc(DoIP/DoIPGeneral/DoIPPowerModeCallback/DoIPPowerModeDirect)} == NULL
        Possible Errors:  0     E_OK        Operation successful
                          1     E_NOT_OK    Operation failed

        Operation:  GetPowerMode
        Comment:    -
        Variation:  -
        Parameters: PowerStateReady
                      Type:       DoIP_PowerStateType
                      Direction:  OUT
                      Comment:    -
                      Variation:  -
        Possible Errors:  E_OK
                          E_NOT_OK
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/DoIP_swc_interface.arxml.m4_17</srcid><srcstatus/><internalId>655</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest12001_SVC_PowerMode_OK</srcid><srcstatus/><internalId>1324</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12002_SVC_PowerMode_E_NOK</srcid><srcstatus/><internalId>1325</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>146</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00055</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:       {Name}_RoutingActivationRoutingActivation
        Comment:    -
        IsService:  true
        Variation:  (({ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation/
                        DoIPRoutingActivationAuthenticationCallback)} != null) &amp;&amp;
                      ({ecuc(DoIP/DoIPConfigSet/ DoIPInterface/DoIPRoutingActivation/
                        DoIPRoutingActivationAuthenticationCallback/
                        DoIPRoutingActivationAuthenticationFunc)} == "")) ||
                      (({ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation/
                        DoIPRoutingActivationConfirmationCallback)} != null) &amp;&amp;
                      ({ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation/
                        DoIPRoutingActivationConfirmationCallback/
                        DoIPRoutingActivationConfirmationFunc)} == ""))
                      Name = {ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation.SHORT-NAME)}
        Possible Errors:  0     E_OK              Operation successful
                          1     E_NOT_OK          Operation failed
                          16    DOIP_E_PENDING    RoutingActivation still pending.

        Operation:  RoutingActivationAuthentication
        Comment:    -
        Variation:  (({ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation/DoIPRoutingActivation
                        AuthenticationCallback)} != NULL) &amp;&amp;
                      ({ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation/
                        DoIPRoutingActivationAuthenticationCallback/
                        DoIPRoutingActivationAuthenticationFunc)} ==NULL))
        Parameters: Authentified
                      Type:       boolean
                      Direction:  OUT
                      Comment:    -
                      Variation:  -
                    AuthenticationReqData
                      Type:       AuthenticationReqDataType_{Name}
                      Direction:  IN
                      Comment:    -
                      Variation:  {ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation/
                                    DoIPRoutingActivationAuthenticationCallback.
                                    DoIPRoutingActivationAuthenticationReqLength)} &gt; 0
                                  Name = {ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation.SHORT-NAME)
                    AuthenticationResData
                      Type:       AuthenticationResDataType_{Name}
                      Direction:  OUT
                      Comment:    -
                      Variation:  {ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation/
                                    DoIPRoutingActivationAuthenticationCallback.
                                    DoIPRoutingActivationAuthenticationResLength)} &gt; 0
                                  Name = {ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation.SHORT-NAME)}
        Possible Errors:  E_OK
                          E_NOT_OK
                          DOIP_E_PENDING

        Operation:  RoutingActivationConfirmation
        Comment:    -
        Variation:  (({ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation/
                        DoIPRoutingActivationConfirmationCallback)} != NULL) &amp;&amp;
                      ({ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation/
                        DoIPRoutingActivationConfirmationCallback/
                        DoIPRoutingActivationConfirmationFunc)} ==NULL))
        Parameters: Confirmed
                      Type:       boolean
                      Direction:  OUT
                      Comment:    -
                      Variation:  -
                    ConfirmedReqData
                      Type:       ConfirmationReqDataType_{Name}
                      Direction:  IN
                      Comment:    -
                      Variation:  {ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation/
                                    DoIPRoutingActivationConfirmationCallback.
                                    DoIPRoutingActivationConfirmationReqLength)} &gt; 0
                                  Name = {ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation.SHORT-NAME)}
                    ConfirmedResData
                      Type:       ConfirmationResDataType_{Name}
                      Direction:  OUT
                      Comment:    -
                      Variation:  {ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation/
                                    DoIPRoutingActivationConfirmationCallback.
                                    DoIPRoutingActivationConfirmationResLength)} &gt; 0
                                  Name = {ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation.SHORT-NAME)}
        Possible Errors:  E_OK
                          E_NOT_OK
                          DOIP_E_PENDING
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/DoIP_swc_interface.arxml.m4_48</srcid><srcstatus/><internalId>656</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest12003_SVC_RoutActAuthConf_RA_0</srcid><srcstatus/><internalId>1326</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12004_SVC_RoutActAuthConf_RA_1</srcid><srcstatus/><internalId>1327</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12005_SVC_RoutActAuthConf_RA_2</srcid><srcstatus/><internalId>1328</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12006_SVC_RoutActAuthConf_RA_3</srcid><srcstatus/><internalId>1329</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12008_SVC_RoutActAuthConf_RA_5</srcid><srcstatus/><internalId>1331</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>147</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00056</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:       CallbackTriggerGIDSynchronization
        Comment:    -
        IsService:  true
        Variation:  ({ecuc(DoIP/DoIPGeneral/DoIPTriggerGidSyncCallback)} != NULL) &amp;&amp;
                    ({ecuc(DoIP/DoIPGeneral/DoIPTriggerGidSyncCallback/DoIPTriggerGidSyncDirect)} == NULL) &amp;&amp;
                    ({ecuc(DoIP/DoIPGeneral/DoIPVinGidMaster)} == TRUE)
        Possible Errors:  0     E_OK              Operation successful
                          1     E_NOT_OK          Operation failed

        Operation:  TriggerGIDSynchronization
        Comment:    -
        Variation:  -
        Parameters: -
        Possible Errors:  E_OK
                          E_NOT_OK
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AUTOSAR_GID_Sync</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0100.ServiceInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>669</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>148</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00057</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:       CallbackGetGID
        Comment:    -
        IsService:  true
        Variation:  ({ecuc(DoIP/DoIPGeneral/DoIPGetGidCallback)} != NULL) &amp;&amp;
                    ({ecuc(DoIP/DoIPGeneral/DoIPGetGidCallback/DoIPGetGidDirect)} == NULL)
        Possible Errors:  0     E_OK              Operation successful
                          1     E_NOT_OK          Operation failed

        Operation:  GetGID
        Comment:    -
        Variation:  -
        Parameters: Data
                      Type:       uint8
                      Direction:  OUT
                      Comment:    -
                      Variation:  -
        Possible Errors:  E_OK
                          E_NOT_OK
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AUTOSAR_GID_Sync</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0100.ServiceInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>669</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>149</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00058</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a connection needs to be closed based on DoIP specific behavior the DoIP module shall call
        the function SoAd_CloseSoCon with the parameter abort set to TRUE and the SoConId determined by
        a call to the function SoAd_GetSoConId with the according DoIPSoAdTcpTxPdu. Additionally also
        the according inactivity timer will be stopped.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.SoftClosingTcpConnection</srcid><srcstatus/><internalId>505</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00019</srcid><srcstatus/><internalId>118</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00104</srcid><srcstatus/><internalId>196</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00106</srcid><srcstatus/><internalId>198</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00107</srcid><srcstatus/><internalId>199</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00123</srcid><srcstatus/><internalId>214</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00160</srcid><srcstatus/><internalId>243</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0130.EB.SWS_DoIP_00058</srcid><srcstatus/><internalId>846</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>150</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00059</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The expected payload length  for vehicle identification request message with payload type
        0x0001 shall be exactly 0.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03002_Udp_GenHeaderNack_INVALID_PL_LENGTH_1</srcid><srcstatus/><internalId>1070</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03005_VehicleIdentificationRequest</srcid><srcstatus/><internalId>1073</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>151</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00060</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a DoIP message with payload Type 0x0001 is received on the configured DoIPUDPConnection, the
        DoIP module shall respond with a vehicle identification response/vehicle announcement message
        after the configured DoIPInitialVehicleAnnouncementTime with payload type 0x0004 as described
        in Table 7.6 [SWS_DoIP_00071].
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03005_VehicleIdentificationRequest</srcid><srcstatus/><internalId>1073</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03006_VehicleAnnouncement</srcid><srcstatus/><internalId>1074</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15007_VehicleIdentificationRequest</srcid><srcstatus/><internalId>1355</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>152</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00061</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a DoIP message with payload type 0x0001 is not received on a configured DoIPUDPConnection,
        the message shall be discarded.
      </description>
      <comment>
        This also means that it is not allowed to receive this payload type on a TCP
        connection.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03076_Discard_VehicleIdReqOnTcp</srcid><srcstatus/><internalId>1141</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00062</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a DoIP message with payload Type 0x0002 is not received on a configured DoIPUDPConnection,
        the message shall be discarded.
      </description>
      <comment>
        This also means that it is not allowed to receive this payload type on a TCP connection.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03076_Discard_VehicleIdReqOnTcp</srcid><srcstatus/><internalId>1141</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00063</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The expected payload length  for vehicle identification request message with payload type
        0x0002 shall be exactly 6.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03003_Udp_GenHeaderNack_INVALID_PL_LENGTH_2</srcid><srcstatus/><internalId>1071</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03007_VehicleIdentificationRequestEID</srcid><srcstatus/><internalId>1075</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05023_VehicleIdentificationRequestMAC</srcid><srcstatus/><internalId>1236</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00064</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a DoIP message with payload Type 0x0002 is received on the configured DoIPUDPConnection, the
        DoIP module shall further process the message.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03007_VehicleIdentificationRequestEID</srcid><srcstatus/><internalId>1075</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15000_VehicleAnnouncement</srcid><srcstatus/><internalId>1348</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15009_AutomaticActivationOfAllConnection_Itf0</srcid><srcstatus/><internalId>1357</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00065</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the Parameter DoIPUseMacAddressForIdentification is set to true the received "EID" 6 payload
        data bytes shall be compared to the MacAddress received via SoAd_GetPhysAddr. If they match the
        DoIP module shall respond with a vehicle identification response/vehicle announcement message
        with payload type 0x0004 as described in Table 7.6 [SWS_DoIP_00071].
      </description>
      <comment>
        After a vehicle identification request the DoIP will respond with a vehicle identification
        response.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05023_VehicleIdentificationRequestMAC</srcid><srcstatus/><internalId>1236</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0108.UseMacForEid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>677</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>157</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00066</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the Parameter DoIPUseMacAddressForIdentification is set to false the received "EID" 6 payload
        data bytes shall be compared to the configured DoIPEID. If they match the DoIP module shall
        respond with a vehicle identification response/vehicle announcement message with payload type
        0x0004 as described in Table 7.6 [SWS_DoIP_00071].
      </description>
      <comment>
        After a vehicle identification request the DoIP will respond with a vehicle identification
        response.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03007_VehicleIdentificationRequestEID</srcid><srcstatus/><internalId>1075</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03008_VehicleIdentificationRequestEID_NOTOK</srcid><srcstatus/><internalId>1076</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>158</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00067</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a DoIP message with payload Type 0x0003 is not received on a configured DoIPUDPConnection
        the message shall be discarded.
      </description>
      <comment>
        This also means that it is not allowed to receive this payload type on a TCP connection.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03076_Discard_VehicleIdReqOnTcp</srcid><srcstatus/><internalId>1141</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>159</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00068</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The expected payload length  for vehicle identification request message with payload type
        0x0003, shall be exactly 17.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03004_Udp_GenHeaderNack_INVALID_PL_LENGTH_3</srcid><srcstatus/><internalId>1072</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03009_VehicleIdentificationRequestVIN</srcid><srcstatus/><internalId>1077</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>160</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00069</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a DoIP message with payload Type 0x0003 is received on the configured DoIPUDPConnection the
        DoIP module shall further process the message.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03009_VehicleIdentificationRequestVIN</srcid><srcstatus/><internalId>1077</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>161</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00070</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The DoIP 17 payload data bytes shall be compared to the data retrieved by the function
        Dcm_GetVin. If the function returns E_OK, the VIN pointer is considered to contain valid
        information. If the function returns E_NOT_OK or the returned VIN do not match the requested
        VIN, the DoIP message with payload Type 0x0003 shall be ignored. If the requested VIN matches
        the derived VIN, the DoIP module shall respond with a vehicle identification response/vehicle
        announcement message with payload type 0x0004 as described in Table 7.6 [SWS_DoIP_00071].
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00070_UserGetVin_OK</srcid><srcstatus/><internalId>23</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00070_UserGetVin_NOK</srcid><srcstatus/><internalId>24</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00070_UserGetVin_NotDefined</srcid><srcstatus/><internalId>25</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.Dcm_GetVin</srcid><srcstatus/><internalId>491</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>162</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00071</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module needs to send a vehicle announcement message , it shall send the vehicle
        announcement message via the configured DoIPUdpVehicleAnnouncementConnection after
        DoIPInitialVehicleAnnouncementTime as described in Table 7.6:

        Item                          | Position (Byte)       | Length (Byte)
        Vehicle identification number
        VIN                           | 0                     | 17
        DoIP entity logical address information
        Logical Address               | 17                    | 2
        Entity identification
        EID                           | 19                    | 6
        Group identification
        GID                           | 25                    | 6
        Further action byte           | 31                    | 1
        VIN/GID Status                | 32                    | 1

        This message shall be sent DoIPVehicleAnnouncementCount times with a delay of
        DoIPVehicleAnnouncementInterval between each message. The last "VIN/GID Status" byte of the
        Vehicle identification response message is optional as defined in the ISO 13400-2 standard.
        It shall exist only if the "DoIPUseVehicleIdentificationSyncStatus" configuration parameter
        is set to True.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00071</srcid><srcstatus/><internalId>53</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>163</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00072</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "VIN" of a vehicle identification response/vehicle announcement message shall be derived by
        calling Dcm_GetVin. If Dcm_GetVin returns E_OK, the 17 Bytes in the pointer shall be used, if
        the callback returns E_NOT_OK the 17 Bytes shall be filled with the configured
        DoIPVinInvalidityPattern with "Further Action Required" field set to 0x00 and VIN/GID sync.
        Status field set to 0x10 if (DoIPUseVehicleIdentificationSyncStatus) is set to true.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00072_UserGetVin_EOK</srcid><srcstatus/><internalId>26</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00072_UserGetVin_E_NOT_OK</srcid><srcstatus/><internalId>27</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00072_UserGetVin_NotDefined</srcid><srcstatus/><internalId>28</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.Dcm_GetVin</srcid><srcstatus/><internalId>491</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>164</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00073</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "LA" of a vehicle identification response/vehicle announcement message shall contain the
        configured DoIPLogicalAddress.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03005_VehicleIdentificationRequest</srcid><srcstatus/><internalId>1073</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05001_VIR_VIN_UserGetVin_Match</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>165</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00074</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "EID" of a vehicle identification response/vehicle announcement message shall contain the
        MAC address derived by Soad_GetPhysAddr if the configuration parameter
        DoIPUseMacAddressForIdentification is set to true.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.ASR_R23-11.SWS_DoIP_00074</srcid><srcstatus/><internalId>457</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>166</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00075</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "EID" of a vehicle identification response/vehicle announcement message shall contain the
        configured DoIPEID if the configuration parameter DoIPUseMacAddressForIdentification is set to
        false.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.ASR_R23-11.SWS_DoIP_00075</srcid><srcstatus/><internalId>458</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>167</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00076</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the parameter DoIPVinGIDMaster is set to true and the Container
        DoIPTriggerGIDSynchronization is configured, the DoIP module shall call the &lt;User&gt;
        _DoIPTriggerGIDSynchronization function (after successful IP Address assignment, see
        SWS_DoIP_00306) and repeat this call within the DoIP_MainFunction until its return value equals
        to E_OK or until the complete connection is closed for any other reason.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AUTOSAR_GID_Sync</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0109.SWS.GidSync</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>678</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>168</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00077</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "GID" of a vehicle identification response/vehicle announcement message shall contain the
        same value as for the EID, if both configuration parameter and DoIPUseEIDasGID are set to true
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AUTOSAR_GID_Sync</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00077</srcid><srcstatus/><internalId>64</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0107.DoIPUseEIDasGID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>676</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>169</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00078</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "GID" of a vehicle identification response/vehicle announcement message shall contain the
        configured DoIPGID value, if the configuration parameter DoIPVinGIDMaster is set to true, the
        configuration parameter DoIPUseEIDasGID is set to false and the parameter DoIPGID is configured.
      </description>
      <comment>
        As long as DoIPVinGIDMaster is not supported this is the default behaviour.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AUTOSAR_GID_Sync</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00078</srcid><srcstatus/><internalId>65</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>170</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00079</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "GID" of a vehicle identification response/vehicle announcement message shall contain the
        value retrieved by the configured DoIPGetGidCallback function(for the signature see &lt;User&gt;
        _DoIPGetGidcallback, SWS_DoIP_00051), if the configuration parameter DoIPVinGIDMaster is set to
        true, the configuration parameter DoIPUseEIDasGID is set to false and the parameter DoIPGID is
        not configured. If the function does not return E_OK the GID shall consist of 6 Bytes according
        to the configured DoIPGIDInvalidityPattern.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AUTOSAR_GID_Sync</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00079</srcid><srcstatus/><internalId>67</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>171</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00080</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "GID" of a vehicle identification response/vehicle announcement message shall contain the
        configured DoIPGID value, if the configuration parameter DoIPVinGIDMaster is set to false and
        the parameter DoIPGID is configured.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AUTOSAR_GID_Sync</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00078</srcid><srcstatus/><internalId>65</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>172</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00081</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "GID" of a vehicle identification response/vehicle announcement message shall contain the
        value retrieved by the configured DoIPGetGID function, if the configuration parameter
        DoIPVinGIDMaster is set to false and the parameter DoIPGID is not configured. If the function
        does not return E_OK, the GID shall consist of 6 Bytes according to the configured
        DoIPGIDInvalidityPattern.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AUTOSAR_GID_Sync</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00079</srcid><srcstatus/><internalId>67</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>173</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00082</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "Further action" byte of a vehicle identification response/vehicle announcement message
        shall contain the value 0x10 if any DoIPRoutingActivation with DoIPRoutingActivationNumber
        equal to 0xE0 is configured and the according RoutingActivation was not yet successfully
        performed.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05001_VIR_VIN_UserGetVin_Match</srcid><srcstatus/><internalId>1214</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05021_RoutAct_E0_FurtherAction</srcid><srcstatus/><internalId>1234</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15008_RoutAct_E0_FurtherAction</srcid><srcstatus/><internalId>1356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>174</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00083</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "Further action" byte of a vehicle identification response/vehicle announcement message
        shall contain the value 0x00, if no DoIPRoutingActivation with DoIPRoutingActivationNumber
        equal to 0xE0 is configured.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03005_VehicleIdentificationRequest</srcid><srcstatus/><internalId>1073</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15007_VehicleIdentificationRequest</srcid><srcstatus/><internalId>1355</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>175</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00084</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "Further action" byte of a vehicle identification response/vehicle announcement message
        shall contain the value 0x00, if any DoIPRoutingActivation with DoIPRoutingActivationNumber
        equal to 0xE0 is configured and the according RoutingActivation was successfully performed.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05021_RoutAct_E0_FurtherAction</srcid><srcstatus/><internalId>1234</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15008_RoutAct_E0_FurtherAction</srcid><srcstatus/><internalId>1356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>176</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00085</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a change in the IP address assignment indicated by DoIP_LocalIpAddrAssignmentChg with
        another TCP_IpAddrStateType then TCPIP_IPADDR_STATE_ASSIGNED, the function to start GID
        synchronisation as described in SWS_DoIP_00076 shall not be called any longer independent from
        the before return value.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AUTOSAR_GID_Sync</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>177</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00086</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the configuration parameter DoIPUseVehicleIdentificationSyncStatus is set to true, the "VIN/
        GID status" byte shall be additionally added to the vehicle identification response/vehicle
        announcement message.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03005_VehicleIdentificationRequest</srcid><srcstatus/><internalId>1073</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15007_VehicleIdentificationRequest</srcid><srcstatus/><internalId>1355</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>178</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00087</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a valid VIN could be requested in SWS_DoIP_00072, the value of the "VIN/GID status" byte
        shall be 0x00.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05001_VIR_VIN_UserGetVin_Match</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>179</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00088</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If no valid VIN could be requested in SWS_DoIP_00072 and the vehicle GID synchronization was
        not yet successful as described in SWS_DoIP_00076, the value of the "VIN/GID status" byte shall
        be 0x10.
      </description>
      <comment>
        GID synchronization is not implemented.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AUTOSAR_GID_Sync</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00088</srcid><srcstatus/><internalId>68</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>180</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00089</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If no valid VIN could be requested in SWS_DoIP_00072 and the vehicle GID synchronization was
        already successful as described in SWS_DoIP_00076, the value of the "VIN/GID status" byte shall
        be 0x00.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AUTOSAR_GID_Sync</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00089</srcid><srcstatus/><internalId>69</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>181</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00090</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a DoIP message with payload Type 0x4003 is not received on a configured DoIPUDPConnection
        the message shall be discarded.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03077_Discard_DiagnosticReqOnTcp</srcid><srcstatus/><internalId>1142</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0119.PowerMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>687</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>182</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00091</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The expected payload length  for diagnostic power mode information request message with payload
        type 0x4003 shall be exactly 0.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05028_PowerMode</srcid><srcstatus/><internalId>1241</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0119.PowerMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>687</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>183</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00092</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        After a valid Diagnostic power mode request message, the DoIP module shall send a Diagnostic
        Power mode information response message  on the configured DoIPUDPConnection.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05028_PowerMode</srcid><srcstatus/><internalId>1241</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05030_PowerMode_E_NOK</srcid><srcstatus/><internalId>1243</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12001_SVC_PowerMode_OK</srcid><srcstatus/><internalId>1324</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12002_SVC_PowerMode_E_NOK</srcid><srcstatus/><internalId>1325</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0119.PowerMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>687</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>184</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00093</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "Diagnostic Power Mode" byte of diagnostic power mode information response message contains
        the 1 Byte value retrieved by a call to the configured DoIPPowerModeCallback (for the signature
        see &lt;User&gt;DoIPGetPowerModeStatus, SWS_DoIP_00047). If the function returns E_OK, the "
        Diagnostic Power Mode" shall be set to the retrieved value of PowerStateReady, otherwise it
        shall be set to 0x00 to indicate that the power mode is not ready.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05028_PowerMode</srcid><srcstatus/><internalId>1241</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05030_PowerMode_E_NOK</srcid><srcstatus/><internalId>1243</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00266</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>326</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0119.PowerMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>687</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>185</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00094</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a DoIP message with payload Type 0x4001 is not received on a configured DoIPUDPConnection
        the message shall be discarded.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03077_Discard_DiagnosticReqOnTcp</srcid><srcstatus/><internalId>1142</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0122.DiagEntityStatus</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>690</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>186</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00095</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The expected payload length  for diagnostic entity status request message with payload type
        0x4001 shall be exactly 0.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03040_Diag_Entity_Status_Req_TCP_closed</srcid><srcstatus/><internalId>1106</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03040_Diag_Entity_Status_Req_TCP_opened</srcid><srcstatus/><internalId>1107</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03041_Diag_Entity_Status_Req_NOK</srcid><srcstatus/><internalId>1108</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest04005_Diag_Entity_Status_Resp_Gateway</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0122.DiagEntityStatus</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>690</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>187</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00096</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        After a valid Diagnostic entity status request message, the DoIP module shall send a Diagnostic
        entity status response message  on the configured DoIPUDPConnection.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03040_Diag_Entity_Status_Req_TCP_closed</srcid><srcstatus/><internalId>1106</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03040_Diag_Entity_Status_Req_TCP_opened</srcid><srcstatus/><internalId>1107</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest04005_Diag_Entity_Status_Resp_Gateway</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0122.DiagEntityStatus</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>690</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>188</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00097</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "Node Type" byte of a diagnostic entity status response message shall contain the
        configured DoIPNodeType, whereas DOIP_GATEWAY shall be represented by 0x00 and DOIP_NODE shall
        be represented by 0x01.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03040_Diag_Entity_Status_Req_TCP_closed</srcid><srcstatus/><internalId>1106</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03040_Diag_Entity_Status_Req_TCP_opened</srcid><srcstatus/><internalId>1107</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest04005_Diag_Entity_Status_Resp_Gateway</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0122.DiagEntityStatus</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>690</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>189</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00098</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "Max open sockets" byte of a diagnostic entity status response message shall contain the
        configured DoIPMaxTesterConnections. This parameter represents the maximum number of concurrent
        TCP_DATA sockets allowed with this DoIP entity, excluding the reserve socket required for
        socket handling as defined in the ISO 13400-2 standard.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03040_Diag_Entity_Status_Req_TCP_closed</srcid><srcstatus/><internalId>1106</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03040_Diag_Entity_Status_Req_TCP_opened</srcid><srcstatus/><internalId>1107</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest04005_Diag_Entity_Status_Resp_Gateway</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0122.DiagEntityStatus</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>690</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>190</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00099</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "Currently open sockets" byte of a diagnostic entity status response message shall contain
        the currently active connections, based on the information described in SWS_DoIP_00002.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03040_Diag_Entity_Status_Req_TCP_closed</srcid><srcstatus/><internalId>1106</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03040_Diag_Entity_Status_Req_TCP_opened</srcid><srcstatus/><internalId>1107</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest04005_Diag_Entity_Status_Resp_Gateway</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0122.DiagEntityStatus</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>690</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>191</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00100</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "Max data size" bytes are only supported if the configuration parameter
        DoIPEntityStatusMaxByteFieldUse is set to TRUE. In this case, the diagnostic entity status
        response message shall contain the configured DoIPMaxRequestBytes in the "Max data size" field.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03040_Diag_Entity_Status_Req_TCP_closed</srcid><srcstatus/><internalId>1106</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03040_Diag_Entity_Status_Req_TCP_opened</srcid><srcstatus/><internalId>1107</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest04005_Diag_Entity_Status_Resp_Gateway</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0122.DiagEntityStatus</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>690</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>192</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00101</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a DoIP message with payload Type 0x0005 is not received on a configured DoIPTCPConnection
        the message shall be discarded.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03078_Discard_TcpMessagesOnUdp</srcid><srcstatus/><internalId>1143</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0111.RoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>193</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00102</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a routing activation request message is received with a valid DoIP header, the DoIP module
        shall process further to SWS_DoIP_00103, if the field "Source address" matches a configured
        DoIPTesterSA.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0111.RoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>194</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00103</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The DoIP module shall always continue with processing as defined in SWS_DOIP_00105, either if
        the received "Source Address" is already registered to a connection as described in
        SWS_DoIP_00002 and it is the same socket connection this routing activation request was
        received on, or if the received "Source Address" is not registered to a connection yet.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0111.RoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>195</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00104</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a routing activation request message is received with a "Source address" that does not match
        a configured DoIPTesterSA, the routing activation response message  shall be sent on the same
        connection as the received request with the routing activation response code 0x00. Additionally
        the socket connection shall be closed as defined in SWS_DoIP_00058.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03020_RoutActResp_NACK_UNKNOWN_SRC</srcid><srcstatus/><internalId>1087</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03021_RoutActResp_NACK_UNKNOWN_SRC_2</srcid><srcstatus/><internalId>1088</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0111.RoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>196</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00105</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the received "Source Address" is already registered to another connection, belonging to
        the same DoIPInterface, an alive check request to this connection shall be triggered as
        described in chapter 7.3.2.4.1 and it shall be waiting for the alive check response message
        or until the time configured in parameter DoIPAliveCheckResponseTimeout expired.
        If the alive check response was received within the configured time, the DoIP module shall
        send a routing activation response message with the activation response code set to 0x03 as
        described in chapter 7.3.2.3.2.
        Additionally the socket connection shall be closed as defined in SWS_DoIP_00058.
        If the "Source Address" is not already registered or the DoIPAliveCheckResponseTimeout
        expired without receiving an alive check response message the DoIP module shall continue
        with SWS_DoIP_00107.
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Due to the feature complexity more then 10 test cases are
        required for complete testing.
      </furtherinfo>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09001_SAOnDifferentTcp_NORESPONSE</srcid><srcstatus/><internalId>1291</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09002_SAOnDifferentTcp_RESPONSE</srcid><srcstatus/><internalId>1292</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09005_SingleAndAllAliveCheck_Response</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09006_SingleAndAllAliveCheck_NoResponse</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09007_RequestSA_3X</srcid><srcstatus/><internalId>1297</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09008_AliveCheckTimer</srcid><srcstatus/><internalId>1298</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09009_ExternalConReset</srcid><srcstatus/><internalId>1299</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09011_SAOnDifferentTcp_RESPONSE_2</srcid><srcstatus/><internalId>1301</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09022_AliveCheckTimer_Expired</srcid><srcstatus/><internalId>1312</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest10002_AliveCheckTimer</srcid><srcstatus/><internalId>1320</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15005_AliveCheck_SAOnDifferentInterface_RESPONSE</srcid><srcstatus/><internalId>1353</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.NoAliveCheckOnTransmittingConnection</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>197</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00106</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a routing activation request message is received with a valid "Source address" but the
        connection this Routing activation was received on is already registered to another source
        address, the DoIP module shall send a routing activation response message  on the same
        connection the request was received on, with the routing activation response code set to 0x02.
        Additionally the socket connection shall be closed as defined in SWS_DoIP_00058.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03019_RoutActResp_NACK_WRONG_SRC</srcid><srcstatus/><internalId>1086</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0111.RoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>198</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00107</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the amount of registered connections is smaller than the configured
        DoIPMaxTesterConnections, the DoIP module shall proceed with the message as described in
        SWS_DoIP_00108 otherwise an alive check request shall be sent to all registered connections
        as described in chapter 7.3.2.4.1.
        If none of the alive checks times out (i.e. all tester respond with a valid alive check
        response within the configured DoIPAliveCheckResponseTimeout) the DoIP module shall send a
        routing activation response message with the activation response code set to 0x01 as
        described in chapter 7.3.2.3.2. Additionally the socket connection shall be closed as
        defined in SWS_DoIP_00058. If at least one of them times out the DoIp module shall close
        the socket connection and continue as described in SWS_DoIP_00108.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09003_AliveReqToAllConRESPONSE</srcid><srcstatus/><internalId>1293</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09004_AliveReqToAllConNORESPONSE</srcid><srcstatus/><internalId>1294</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09005_SingleAndAllAliveCheck_Response</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09006_SingleAndAllAliveCheck_NoResponse</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09014_AliveReq_RxInProgress</srcid><srcstatus/><internalId>1304</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0111.RoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>199</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00108</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the "Activation type" bytes matches the DoIPRoutingActivationNumber of one of the
        DoIPRoutingActivationRef of the "Source Address" (i.e. DoIPTester has a
        DoIPRoutingActivationRef configured which has the DoIPRoutingActivationNumber equal to "
        Activation type") the DoIP module shall proceed with SWS_DoIP_109.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03018_RoutActResp_SUCCESS_1</srcid><srcstatus/><internalId>1085</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03083_RoutActResp_SUCCESS_2</srcid><srcstatus/><internalId>1148</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest10001_RoutActResp_SUCCESS_3</srcid><srcstatus/><internalId>1319</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0111.RoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>200</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00109</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If an DoIPRoutingActivationAuthenticationCallback is configured for the referenced
        DoIPRoutingActivation, the DoIP module shall call this callback (for the signature see &lt;User&gt;
        _DoIPRoutingActivationAuthentication, SWS_DoIP_00049). If the
        DoIPRoutingActivationAuthenticationReqLength is not configured to 0, the DoIP module shall
        handle additionally the first DoIPRoutingActivationAuthenticationReqLength bytes of the
        optional field "OEM specific"
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Due to the feature complexity more then 10 test cases are
        required for complete testing.
      </furtherinfo>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05005_RoutActAuth_PayloadLen7_SUCCESS</srcid><srcstatus/><internalId>1218</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05006_RoutActAuth_PayloadLen_7_NoAuth_1</srcid><srcstatus/><internalId>1219</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05007_RoutActAuth_PayloadLen_7_NoAuth_2</srcid><srcstatus/><internalId>1220</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05008_RoutActAuth_PayloadLen11_SUCCESS_1</srcid><srcstatus/><internalId>1221</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05009_RoutActAuth_PayloadLen11_SUCCESS_2</srcid><srcstatus/><internalId>1222</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05010_RoutActAuth_PayloadLen11_NoAuth</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05011_RoutActAuthConf_PayloadLen11_SUCCESS_1</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05012_RoutActAuthConf_PayloadLen11_NoConf_1</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05013_RoutActAuthConf_PayloadLen11_NoConf_2</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12007_SVC_RoutActAuthConf_RA_4</srcid><srcstatus/><internalId>1330</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12008_SVC_RoutActAuthConf_RA_5</srcid><srcstatus/><internalId>1331</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0113.RoutingActivationAuthentication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>682</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>201</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00110</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIPRoutingActivationAuthenticationCallback returns DOIP_E_PENDING the DoIP module shall
        trigger the callback at next DoIP_MainFunction call again until something else than
        DOIP_E_PENDING is returned. Additionally the socket connection shall be considered as
        registered to this DoIPTesterSA without activating the routing.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05015_RoutActAuthConf_PENDING_SUCCESS</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05018_RoutActConf_Pending</srcid><srcstatus/><internalId>1231</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05020_RoutActAuth_PENDING_RoutActConf_OK</srcid><srcstatus/><internalId>1233</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0113.RoutingActivationAuthentication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>682</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>202</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00111</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIPRoutingActivationAuthenticationCallback returns something else (e.g. E_NOT_OK) the
        DoIP module shall send a routing activation response message with the activation response code
        set to 0x04 as described in chapter 7.3.2.3.2 and the socket connection shall be considered
        as registered to this DoIPTesterSA without activating the routing.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00111</srcid><srcstatus/><internalId>35</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0113.RoutingActivationAuthentication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>682</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>203</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00112</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a DoIPRoutingActivationConfirmationCallback is configured for the referenced
        DoIPRoutingActivation, the DoIp module shall call this callback (for the signature see
        &lt;User&gt;_DoIPRoutingActivationConfirmation, SWS_DoIP_00048).
        If the DoIPRoutingActivationConfirmationReqLength is not configured to 0, the DoIP module
        shall handle additionally the last DoIPRoutingActivationConfirmationReqLength bytes of the
        optional field "OEM specific". If the Callback returns with E_OK the routing activation
        confirmation shall be considered as successful and if the
        DoIPRoutingActivationConfirmationResLengthis not set to 0,the last
        DoIPRoutingActivationConfirmationResLength bytes shall be attached in routing activation
        response message in the field "OEM specific" as described in chapter 7.3.2.3.2.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00112</srcid><srcstatus/><internalId>36</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0114.RoutingActivationConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>683</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>204</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00113</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If no response was sent because of the before mentioned checks this DoIPRoutingActivation is
        confirmed, authorized and valid so the DoIP module shall send a routing activation response
        message with the activation response code set to 0x10 as described in chapter 7.3.2.3.2 and
        the socket connection shall be considered as registered to this DoIPTesterSA and enable the
        routing for this routing activation. From now on the routing to the configured
        DoIPTargetAdressRef are active and valid so the diagnostic request messages related to the
        specified DoIPTargetAdress received via this socket connection are active.
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Due to the feature complexity more then 10 test cases are
        required for complete testing.
      </furtherinfo>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03018_RoutActResp_SUCCESS_1</srcid><srcstatus/><internalId>1085</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03083_RoutActResp_SUCCESS_2</srcid><srcstatus/><internalId>1148</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05015_RoutActAuthConf_PENDING_SUCCESS</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05020_RoutActAuth_PENDING_RoutActConf_OK</srcid><srcstatus/><internalId>1233</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09001_SAOnDifferentTcp_NORESPONSE</srcid><srcstatus/><internalId>1291</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09002_SAOnDifferentTcp_RESPONSE</srcid><srcstatus/><internalId>1292</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09003_AliveReqToAllConRESPONSE</srcid><srcstatus/><internalId>1293</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09004_AliveReqToAllConNORESPONSE</srcid><srcstatus/><internalId>1294</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09005_SingleAndAllAliveCheck_Response</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09006_SingleAndAllAliveCheck_NoResponse</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09015_AliveCheckReq_NOK</srcid><srcstatus/><internalId>1305</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09022_AliveCheckTimer_Expired</srcid><srcstatus/><internalId>1312</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest10001_RoutActResp_SUCCESS_3</srcid><srcstatus/><internalId>1319</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12004_SVC_RoutActAuthConf_RA_1</srcid><srcstatus/><internalId>1327</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12006_SVC_RoutActAuthConf_RA_3</srcid><srcstatus/><internalId>1329</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12007_SVC_RoutActAuthConf_RA_4</srcid><srcstatus/><internalId>1330</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12008_SVC_RoutActAuthConf_RA_5</srcid><srcstatus/><internalId>1331</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15002_RoutingActivation</srcid><srcstatus/><internalId>1350</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0111.RoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>205</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00115</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a TCP socket connection gets closed (after the DoIP_SoConModeChg was called with different
        mode value than SOAD_SOCON_ONLINE or any other reason described by SWS_DoIP_00058) the DoIP
        module shall - unregister and release the socket connection to the related Tester, - discard
        the ongoing diagnostic message processing and - reset the inactivity timer of the given socket
        connection.
      </description>
      <comment>
        This includes cleaning up all the buffers/internal variables and scheduled asynchronous
        or pending function calls as well as reducing the amount of tester connected by 1.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.SoftClosingTcpConnection</srcid><srcstatus/><internalId>505</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.ASR_R21-11.SWS_DoIP_00115</srcid><srcstatus/><internalId>452</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>206</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00116</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "Logical Address Tester" field shall be set to the Tester SA the according routing
        activation request message was received from.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0111.RoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>207</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00117</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The expected payload length  for Routing Activation Request Message with payload type 0x0005
        shall be either exactly 7 or 11.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00117.Length7</srcid><srcstatus/><internalId>86</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00117.Length11</srcid><srcstatus/><internalId>87</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0111.RoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>208</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00118</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "Logical Address DoIP entity" shall be set to the configured parameter DoIPLogicalAddress.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0111.RoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>209</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00119</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "Routing activation response code shall be set according to the response conditions
        specified in chapter 7.3.2.3.1.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00104</srcid><srcstatus/><internalId>196</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00106</srcid><srcstatus/><internalId>198</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00113</srcid><srcstatus/><internalId>205</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00160</srcid><srcstatus/><internalId>243</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0111.RoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>210</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00120</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "OEM specific" field shall be filled with the optional values as defined in chapter
        7.3.2.2.1. if the according DoIPRoutingActivationAuthenticationResLength and/or
        DoIPRoutingActivationConfirmationResLength is used.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05011_RoutActAuthConf_PayloadLen11_SUCCESS_1</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05012_RoutActAuthConf_PayloadLen11_NoConf_1</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12003_SVC_RoutActAuthConf_RA_0</srcid><srcstatus/><internalId>1326</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12005_SVC_RoutActAuthConf_RA_2</srcid><srcstatus/><internalId>1328</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0111.RoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>211</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00121</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a DoIP message with payload Type 0x8001 is not received on a configured DoIPTcpConnection
        the message shall be discarded.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03078_Discard_TcpMessagesOnUdp</srcid><srcstatus/><internalId>1143</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>212</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00122</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The expected payload length  for diagnostic messages with payload type 0x8001 shall be at least
        5 byte.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03032_Tcp_GenHeaderNack_INVALID_PL_LENGTH_3</srcid><srcstatus/><internalId>1098</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>213</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00123</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module receives a diagnostic message with a "Source Address" (equals DoIPTesterSA)
        which is not registered on an established socket connection, the DoIP modules shall send a
        diagnostic message negative acknowledge message with the diagnostic message negative
        acknowledge code set to 0x02 as described in chapter 7.3.2.6.3. Additionally the socket
        connection shall be closed as described in SWS_DoIP_00058.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02010_DiagMsg_NoRoute</srcid><srcstatus/><internalId>1062</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03024_DiagNackMsg_INV_SRC_ADR</srcid><srcstatus/><internalId>1091</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>214</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00124</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module receives a diagnostic message with a "Target Addess" (equals
        DoIPTargetAdressValue) which is not connected via DoIPRoutingActivationRef and
        DoIPTargetAdressRef to the received valid DoIPTesterSA, than the DoIP module shall send a
        diagnostic message negative acknowledge message with the diagnostic message negative
        acknowledge code set to 0x03 as described in chapter 7.3.2.6.3. Additionally the message
        shall be discarded.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03025_DiagNackMsg_INV_TAR_ADR</srcid><srcstatus/><internalId>1092</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>215</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00125</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module receives a diagnostic message with the payload data length in the DoIP
        header is set to a value bigger than DoIPMaxRequestBytes-4, than the DoIP module shall send
        a diagnostic message negative acknowledge message with the diagnostic message negative
        acknowledge code set to 0x04 as described in chapter 7.3.2.6.3. Additionally the message
        shall be discarded.
      </description>
      <comment>
        This requirement is not applicable because SWS_DoIP_00017 already covers the case when
        message payload length exceeds DoIPMaxRequestBytes. DoIP header length field includes
        Diagnostic message header of 4 bytes. Applying this requirement would unnecessarily restrict
        the size of user data.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>216</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00126</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module receives a diagnostic message and SWS_DoIP_00125 does not apply but the
        current buffer size is not sufficient to receive the message, than the DoIP module shall send a
        diagnostic message negative acknowledge message with the diagnostic message negative
        acknowledge code set to 0x05 as described in chapter 7.3.2.6.3. Additionally the message
        shall be discarded.
      </description>
      <comment>
        Negative acknowledge code is set to 0x05 in case upper layer returns error code
        BUFREQ_E_OVFL.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03050_DiscardDiagMsg_PDUR_BUFF_OVFL_1</srcid><srcstatus/><internalId>1116</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03051_DiscardDiagMsg_PDUR_BUFF_OVFL_2</srcid><srcstatus/><internalId>1117</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>217</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00127</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module receives a diagnostic message and the according "TargetAddress" was not
        activated by routing activation as described in SWS_DoIP_00113, the DoIP module shall send a
        diagnostic message negative acknowledge message with the diagnostic message negative
        acknowledge code set to 0x06 as described in chapter 7.3.2.6.3. Additionally the message
        shall be discarded.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DiagMsgNack_RouteInactive</srcid><srcstatus/><internalId>504</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0128.SWS_DoIP_00127</srcid><srcstatus/><internalId>831</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0128.EB.DoIPResponseBeforeRoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>697</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>218</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00128</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If no negative acknowledge was sent the DoIP module shall evaluate the message and forward the
        content (i.e. all UDS Data, not the TargetAddress and SourceAddress) to the DoIPPduRRxPdu
        connected to the received TargetAddress/SourceAddress combination as configured in DoIPChannel
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03011_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1079</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03034_DiagAckMsg_SegmentedReception</srcid><srcstatus/><internalId>1100</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03039_DiagMsg_SegmentedHeaders</srcid><srcstatus/><internalId>1105</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>219</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00129</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the PduR accepted all Data, the DoIP module shall send a diagnostic acknowledge message
        as described in chapter 7.3.2.6.2.
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Due to the feature complexity more then 10 test cases are
        required for complete testing.
      </furtherinfo>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03011_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1079</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03034_DiagAckMsg_SegmentedReception</srcid><srcstatus/><internalId>1100</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03035_DiagAckMsg_SegmentedAckTransmission</srcid><srcstatus/><internalId>1101</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03036_DiagAckMsg_RxBlocked</srcid><srcstatus/><internalId>1102</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03039_DiagMsg_SegmentedHeaders</srcid><srcstatus/><internalId>1105</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03048_DiscardDiagMsg_PDUR_BUFF_NOT_OK_1</srcid><srcstatus/><internalId>1114</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03049_DiscardDiagMsg_PDUR_BUFF_NOT_OK_2</srcid><srcstatus/><internalId>1115</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03050_DiscardDiagMsg_PDUR_BUFF_OVFL_1</srcid><srcstatus/><internalId>1116</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03051_DiscardDiagMsg_PDUR_BUFF_OVFL_2</srcid><srcstatus/><internalId>1117</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03081_DiagMsgRx_Loop</srcid><srcstatus/><internalId>1146</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03082_SoAd_TpTransmit_NOT_OK_5</srcid><srcstatus/><internalId>1147</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest07006_DiagMessageReceive_LongPdu</srcid><srcstatus/><internalId>1271</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09014_AliveReq_RxInProgress</srcid><srcstatus/><internalId>1304</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>220</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00130</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The DoIP module will get a diagnostic response message (i.e DoIP_TpTransmit or DoIP_IfTransmit
        is called with DoIPPduRTxPdu which matches to the DoIPPduRRxPdu that handled the data to the
        PduR) via the upper layer connection to the PduR, so it has to monitor whether the socket
        connection the request was received on is still established. If the socket connection has been
        closed, the response shall be discarded and the DoIP shall return with E_NOT_OK in the return
        value.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03029_Tcp_GenHeaderNack_INCORRECT_PATTERN</srcid><srcstatus/><internalId>1095</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.NotSupported.IfTransmit</srcid><srcstatus/><internalId>503</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0131.DiagMsgTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>700</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>221</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00131</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module is called with DoIPPduRTxPdu in the DoIP_TpTransmit or DoIP_IfTransmit as
        described in SWS_DoIP_00130 and the according socket connection has not been closed since the
        reception of the according diagnostic message, the DoIP module shall prepare a diagnostic
        message via the according socket connection with the message layout as described in
        Table 7.12:

        Item                            | Position (Byte)     | Length (Byte)
        Logical address information
        Source address                  | 0                   | 2
        Target address                  | 2                   | 2
        Diagnostic message data
        User data                       | 4                   | ...

        but with the "SourceAddress" set to the DoIPTargetAdressValue of the request and the "
        TargetAddress" set to the DoIPTesterSA.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03011_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1079</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03034_DiagAckMsg_SegmentedReception</srcid><srcstatus/><internalId>1100</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03039_DiagMsg_SegmentedHeaders</srcid><srcstatus/><internalId>1105</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.NotSupported.IfTransmit</srcid><srcstatus/><internalId>503</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0131.DiagMsgTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>700</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>222</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00132</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module needs to send a diagnostic acknowledge message the "Source Address" shall be
        set to the according "TargetAddress" of the received message
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03011_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1079</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>223</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00133</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module needs to send a diagnostic acknowledge message the "Target Address" shall be
        set to the according "SourceAddress" of the received message
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03011_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1079</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>224</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00134</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module needs to send a diagnostic acknowledge message the field "previous diag
        message" shall be filled with the number of bytes of the original request message as configured
        in the parameter DoIPNumByteDiagAckNack for the DoIPTester the request was received on.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03011_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1079</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03035_DiagAckMsg_SegmentedAckTransmission</srcid><srcstatus/><internalId>1101</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03044_DiagAckMsg_CopyTxData_SduLength_0</srcid><srcstatus/><internalId>1110</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03045_DiagNackMsg_CopyTxData_SduLength_0</srcid><srcstatus/><internalId>1111</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>225</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00135</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module needs to send a diagnostic negative acknowledge message the "Source Address"
        shall be set to the according "TargetAddress" of the received message
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02010_DiagMsg_NoRoute</srcid><srcstatus/><internalId>1062</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03024_DiagNackMsg_INV_SRC_ADR</srcid><srcstatus/><internalId>1091</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03025_DiagNackMsg_INV_TAR_ADR</srcid><srcstatus/><internalId>1092</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>226</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00136</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module needs to send a diagnostic negative acknowledge message the "Target Address"
        shall be set to the according "SourceAddress" of the received message
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02010_DiagMsg_NoRoute</srcid><srcstatus/><internalId>1062</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03024_DiagNackMsg_INV_SRC_ADR</srcid><srcstatus/><internalId>1091</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03025_DiagNackMsg_INV_TAR_ADR</srcid><srcstatus/><internalId>1092</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>227</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00137</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module needs to send a diagnostic negative acknowledge message, the "Diagnostic
        message negative acknowledge code" shall be set to the value specified by the specification
        item that is triggering the diagnostic negative acknowledge message.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00123</srcid><srcstatus/><internalId>214</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00124</srcid><srcstatus/><internalId>215</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00126</srcid><srcstatus/><internalId>217</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00127</srcid><srcstatus/><internalId>218</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.DiagMsgNack_RouteInactive_SourceAddressInUse</srcid><srcstatus/><internalId>729</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>228</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00138</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module needs to send a diagnostic negative acknowledge message the field "previous
        diag message" shall be filled with the configured number of the original request message as
        configured in the parameter DoIPNumByteDiagAckNack for the DoIPTester the request was received
        on.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03023_DiagNackMsg_PdurCopyRxData_NOK</srcid><srcstatus/><internalId>1090</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>229</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00139</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module needs to send a alive check request, it shall have no payload data but only
        the generic DoIP header and the payload type set 0x0007.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09001_SAOnDifferentTcp_NORESPONSE</srcid><srcstatus/><internalId>1291</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09022_AliveCheckTimer_Expired</srcid><srcstatus/><internalId>1312</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>230</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00140</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        After sending an alive check request the DoIP module shall wait the configured time
        DoIPAliveCheckResponseTimeout to receive a valid alive check response as described in
        chapter 7.3.2.4.2. If it does not receive an alive check response, the socket connection
        on which the alive check request was sent shall be closed as described in SWS_DoIP_00058.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.SoftClosingTcpConnection</srcid><srcstatus/><internalId>505</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.ASR_R21-11.SWS_DoIP_00140</srcid><srcstatus/><internalId>455</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>231</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00141</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the received Alive check response field "SourceAddress" matches the registered Source
        Address of the socket connection the response was received on, the DoIP module shall do nothing.
        Otherwise it shall close the socket connection as described in SWS_DoIP_00058.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AliveCheckResp.Ignore</srcid><srcstatus/><internalId>502</internalId></linkedfrom><linkedfrom><srcid>dev.DoIP.SoftClosingTcpConnection</srcid><srcstatus/><internalId>505</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.AliveCheckResp.ConnRegistered</srcid><srcstatus/><internalId>79</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R21-11.SWS_DoIP_00141</srcid><srcstatus/><internalId>456</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>232</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00142</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The DoIP module shall maintain an inactivity timer for each registered TCP connection.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Int.h_1249</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0103.InactivityTimeoutForTcp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>672</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>233</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00143</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        After a successful TCP socket connection (i.e. DoIP_SoConModeChg) the DoIP module shall start
        the inactivity timer.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02007_InactivityTimer</srcid><srcstatus/><internalId>1059</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0103.InactivityTimeoutForTcp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>672</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>234</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00144</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If no Routing Activation request was received on a new opened socket within the configured
        DoIPInitialInactivityTime, the DoIP module shall close the socket connection.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.SoftClosingTcpConnection</srcid><srcstatus/><internalId>505</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.ASR_R21-11.SWS_DoIP_00144</srcid><srcstatus/><internalId>453</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>235</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00145</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        After a routing activation has been performed , the DoIP module shall reset the inactivtity
        timer to 0 always when data communication is performed on the socket (send or receive)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.GeneralInactivityTimer.NoReset</srcid><srcstatus/><internalId>76</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.GeneralInactivityTimer.Reset</srcid><srcstatus/><internalId>77</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0103.InactivityTimeoutForTcp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>672</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>236</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00146</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the inactivity timer reaches the time configured in DoIPGeneralInactivityTime, the according
        socket connection shall be closed as described in SWS_DoIP_00058.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.SoftClosingTcpConnection</srcid><srcstatus/><internalId>505</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.ASR_R21-11.SWS_DoIP_00146</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>237</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00148</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Development Error Types
        |      Type or error      |   Relevance   |     Related error code    | Value [hex] |
        -------------------------------------------------------------------------------------
        |API service call without |  Development  |       DOIP_E_UNINIT       |     0x01    |
        |module initialization    |               |                           |             |
        -------------------------------------------------------------------------------------
        |   NULL-Pointer on any   |  Development  |    DOIP_E_PARAM_POINTER   |     0x02    |
        |   API call              |               |                           |             |
        -------------------------------------------------------------------------------------
        |  Wrong Lower Layer      |               |                           |             |
        | (SoaAd) or Upper Layer  |  Development  | DOIP_E_INVALID_PDU_SDU_ID |     0x03    |
        | (PduRouter) Id received |               |                           |             |
        -------------------------------------------------------------------------------------
        |  API call with invalid  |  Development  |  DOIP_E_INVALID_PARAMETER |     0x04    |
        |  Parameter              |               |                           |             |
        -------------------------------------------------------------------------------------
        |  DoIP Init service call |  Development  |     DOIP_E_INIT_FAILED    |     0x05    |
        |  failure                |               |                           |             |
        -------------------------------------------------------------------------------------
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00148.ValueCheck.DOIP_E_UNINIT</srcid><srcstatus/><internalId>88</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00148.ValueCheck.DOIP_E_PARAM_POINTER</srcid><srcstatus/><internalId>89</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00148.ValueCheck.DOIP_E_INVALID_PDU_SDU_ID</srcid><srcstatus/><internalId>90</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00148.ValueCheck.DOIP_E_INVALID_PARAMETER</srcid><srcstatus/><internalId>91</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>238</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00154</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the API DoIP_LocalIpAddrAssignmentChg is called with the State set to
        TCPIP_IPADDR_STATE_ASSIGNED, the DoIP module shall call the function
        SoAd_ReadDhcpHostNameOption with the received SoConId to get the currently set host name option.
        The returned Byte buffer shall be considered as ASCII buffer and shall start with "DoIP-
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.UpdateDhcpHostNameOptional</srcid><srcstatus/><internalId>488</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00154</srcid><srcstatus/><internalId>54</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>239</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00155</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the ASCII buffer returned in SWS_DoIP_00154 does not start with "DoIP-" and the
        configuration parameter DoIPDhcpOptionVinUse is set to FALSE the DoIP module shall call the
        SoAd_WriteDhcpHostNameOption with a pointer to the string "DoIP-" in order to set the hostname.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DoIPWriteDhcpHostNameOption</srcid><srcstatus/><internalId>500</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0102.SWS_DoIP_00155</srcid><srcstatus/><internalId>827</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0102.DhcpHostNameOption</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>671</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>240</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00156</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the ASCII buffer returned in SWS_DoIP_00154 does not start with "DoIP-" and the
        configuration parameter DoIPDhcpOptionVinUse is set to TRUE the DoIP module shall call the
        SoAd_WriteDhcpHostNameOption with a pointer to to the ASCII buffer "DoIP-VIN&lt;vinnumberinascii&gt;
        with &lt;vinnumberinascii&gt; representing the ASCII representation of the VIN that is retrieved via
        Dcm_GetVin. If no valid VIN could be retrieved the DoIP shall use the configured
        DoIPVinInvalidityPattern in ASCII representation.
      </description>
      <comment>
        The VIN is not retrieved via Dcm_GetVin(). User_DoIPGetVin() is used if it is provided,
        otherwise VIN invalidity pattern is used.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.Dcm_GetVin</srcid><srcstatus/><internalId>491</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0102.SWS_DoIP_00156_UserGetVin</srcid><srcstatus/><internalId>828</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0102.DhcpHostNameOption</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>671</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>241</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00159</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a Routing Activation request was received on a new opened socket before the inactivity timer
        elapsed (i.e. the configured DoIPInitialInactivityTime did not pass) the DoIP module shall
        reset the inactivity timer to 0.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00159</srcid><srcstatus/><internalId>75</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0103.InactivityTimeoutForTcp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>672</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>242</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00160</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the "Activation type" bytes do not fulfill the SWS_DOIP_00108 requirement, the DoIP module
        shall send a routing activation response message with the activation response code set to
        0x06 as described in chapter 7.3.2.3.2.
        In this case the socket connection shall be closed as defined in SWS_DoIP_00058.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03022_RoutActResp_NACK_UNKNOWN_ACT_TYPE</srcid><srcstatus/><internalId>1089</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0111.RoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>243</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00161</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIPRoutingActivationAuthenticationCallback returns with E_OK the routing activation
        authentication shall be considered as successful. If the
        DoIPRoutingActivationAuthenticationResLength is not set to 0 the first
        DoIPRoutingActivationAuthenticationResLength byte shall be attached in routing activation
        response message in the field "OEM specific" as described in chapter 7.3.2.3.2.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00161</srcid><srcstatus/><internalId>32</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0113.RoutingActivationAuthentication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>682</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>244</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00162</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check that the service DoIP_Init
        was previously called. If the check fails, the function shall raise the development error
        DOIP_E_UNINIT. Otherwise, if DET is not enabled, return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>245</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00163</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the TxPduId matches a
        configured DoIPPduRTxPduId. If the check fails the function shall raise the development error
        DOIP_E_INVALID_PDU_SDU_ID. Otherwise, if DET is not enabled, return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01003_Transmit_InvalidParam</srcid><srcstatus/><internalId>1034</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>246</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00164</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the PduInfoPtr is not a
        NULL_PTR. If the check fails the function shall raise the development error
        DOIP_E_PARAM_POINTER. Otherwise, if DET is not enabled, return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01003_Transmit_InvalidParam</srcid><srcstatus/><internalId>1034</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>247</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00166</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check that the service DoIP_Init
        was previously called. If the check fails, the function shall raise the development error
        DOIP_E_UNINIT. Otherwise, if DET is not enabled, return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>248</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00167</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the TxPduId matches a
        configured DoIPPduRTxPduId. If the check fails the function shall raise the development error
        DOIP_E_INVALID_PDU_SDU_ID. Otherwise, if DET is not enabled, return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01013_CancelTransmit_InvalidParam</srcid><srcstatus/><internalId>1044</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>249</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00169</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check that the service DoIP_Init
        was previously called. If the check fails, the function shall raise the development error
        DOIP_E_UNINIT. Otherwise, if DET is not enabled, return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>250</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00170</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the RxPduId matches a
        configured DoIPPduRRxPduId. If the check fails the function shall raise the development error
        DOIP_E_INVALID_PDU_SDU_ID. Otherwise, if DET is not enabled, return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01014_CancelReceive_InvalidParam</srcid><srcstatus/><internalId>1045</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>251</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00172</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the versioninfo is not a
        NULL_PTR. If the check fails the function shall raise the development error
        DOIP_E_PARAM_POINTER.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01001_VersionInfo_NullPtr</srcid><srcstatus/><internalId>1032</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>252</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00173</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The field "User data" of the SWS_DoIP_00131 message contains the actual diagnostic payload data
        which shall not be modified by DoIP.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03012_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1080</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest11000_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1323</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>253</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00174</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the PduR is not accepting the data totally (for details refer to chapter 7.5.1), the DoIP
        module shall send a diagnostic message negative acknowledge message with the diagnostic
        message negative acknowledge code set to 0x08 as described in chapter 7.3.2.6.3.
        Additionally the message shall be discarded.
      </description>
      <comment>
        Negative acknowledge code is set to 0x08 in case upper layer returns error code
        BUFREQ_E_NOT_OK or BUFREQ_E_BUSY.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DoIP_DoIPPduRBufferNotOkNackValue</srcid><srcstatus/><internalId>508</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00174</srcid><srcstatus/><internalId>81</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>254</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00175</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check that the service DoIP_Init
        was previously called. If the check fails, the function shall raise the development error
        DOIP_E_UNINIT. Otherwise, if DET is not enabled, return BUFREQ_E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>255</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00176</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the id matches a
        configured DoIPSoAdTcpTxPduId. If the check fails the function shall raise the development
        error DOIP_E_INVALID_PDU_SDU_ID. Otherwise, if DET is not enabled, return BUFREQ_E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01004_SoAdTpCopyTxData_InvalidParam</srcid><srcstatus/><internalId>1035</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>256</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00177</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check that neither the info nor
        the availableDataPtr are a NULL_PTR. If the check fails the function shall raise the
        development error DOIP_E_PARAM_POINTER. Otherwise, if DET is not enabled, return
        BUFREQ_E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01004_SoAdTpCopyTxData_InvalidParam</srcid><srcstatus/><internalId>1035</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>257</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00178</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the retry is a NULL_PTR.
        If the check fails the function shall raise the development error DOIP_E_INVALID_PARAMETER.
        Otherwise, if DET is not enabled, return BUFREQ_E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01004_SoAdTpCopyTxData_InvalidParam</srcid><srcstatus/><internalId>1035</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>258</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00180</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check that the service DoIP_Init
        was previously called. If the check fails, the function shall raise the development error
        DOIP_E_UNINIT.
      </description>
      <comment>
        DoIP_SoAdTpTxConfirmation
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>259</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00181</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the id matches a
        configured DoIPSoAdTcpTxPduId. If the check fails the function shall raise the development
        error DOIP_E_INVALID_PDU_SDU_ID.
      </description>
      <comment>
        DoIP_SoAdTpTxConfirmation
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01009_SoAdTpTxConfirmation_InvalidParam</srcid><srcstatus/><internalId>1040</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>260</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00182</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the result is valid. If
        the check fails the function shall raise the development error DOIP_E_INVALID_PARAMETER.
      </description>
      <comment>
        DoIP_SoAdTpTxConfirmation
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.FuncParaType_result</srcid><srcstatus/><internalId>489</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>261</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00183</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check that the service DoIP_Init
        was previously called. If the check fails, the function shall raise the development error
        DOIP_E_UNINIT. Otherwise, if DET is not enabled, return BUFREQ_E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>262</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00184</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check that neither the info nor
        the bufferSizePtr are a NULL_PTR. If the check fails, the function shall raise the development
        error DOIP_E_PARAM_POINTER. Otherwise, if DET is not enabled, return BUFREQ_E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01005_SoAdTpCopyRxData_InvalidParam</srcid><srcstatus/><internalId>1036</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>263</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00186</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check that the service DoIP_Init
        was previously called. If the check fails, the function shall raise the development error
        DOIP_E_UNINIT. Otherwise, if DET is not enabled, return BUFREQ_E_NOT_OK.
      </description>
      <comment>
        DoIP_SoAdTpStartOfReception()
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>264</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00187</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the id matches a
        configured DoIPSoAdTcpRxPduId. If the check fails the function shall raise the development
        error DOIP_E_INVALID_PDU_SDU_ID. Otherwise, if DET is not enabled, return BUFREQ_E_NOT_OK.
      </description>
      <comment>
        DoIP_SoAdTpStartOfReception()
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01006_SoAdTpStartOfReception_InvalidParam</srcid><srcstatus/><internalId>1037</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>265</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00188</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the bufferSizePtr is not
        a NULL_PTR. If the check fails the function shall raise the development error
        DOIP_E_PARAM_POINTER. Otherwise, if DET is not enabled, return BUFREQ_E_NOT_OK.
      </description>
      <comment>
        DoIP_SoAdTpStartOfReception()
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01006_SoAdTpStartOfReception_InvalidParam</srcid><srcstatus/><internalId>1037</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>266</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00189</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the TpSduLength is not 0.
        If TpSduLength is not 0 the function shall raise the development error DOIP_E_INVALID_PARAMETER.
        Otherwise, if DET is not enabled, return BUFREQ_E_NOT_OK.
      </description>
      <comment>
        DoIP_SoAdTpStartOfReception()
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01006_SoAdTpStartOfReception_InvalidParam</srcid><srcstatus/><internalId>1037</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DET.Changed</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>267</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00190</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check that the service DoIP_Init
        was previously called. If the check fails, the function shall raise the development error
        DOIP_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>268</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00191</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the id matches a
        configured DoIPSoAdTcpRxPduId. If the check fails the function shall raise the development
        error DOIP_E_INVALID_PDU_SDU_ID.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01008_SoAdTpRxIndication_InvalidParam</srcid><srcstatus/><internalId>1039</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>269</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00192</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the result is valid. If
        the check fails the function shall raise the development error DOIP_E_INVALID_PARAMETER.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.FuncParaType_result</srcid><srcstatus/><internalId>489</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>270</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00193</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check that the service DoIP_Init
        was previously called. If the check fails, the function shall raise the development error
        DOIP_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>271</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00194</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the SoConId and Mode are
        valid. If the check fails the function shall raise the development error
        DOIP_E_INVALID_PARAMETER.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01011_SoConModeChg_InvalidParam</srcid><srcstatus/><internalId>1042</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.Det.SoConId</srcid><srcstatus/><internalId>490</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>272</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00195</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check that the service DoIP_Init
        was previously called. If the check fails, the function shall raise the development error
        DOIP_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>273</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00196</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the SoConId and State
        are valid. If the check fails the function shall raise the development error
        DOIP_E_INVALID_PARAMETER.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01012_LocalIpAddrAssignmentChg_InvalidParam</srcid><srcstatus/><internalId>1043</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.Det.SoConId</srcid><srcstatus/><internalId>490</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>274</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00197</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the SoAd calls the DoIP module via the Interface DoIP_SoAdIfRxIndication, the DoIP module
        shall copy the message into the internal UDP buffer for further processing.
      </description>
      <comment>
        DoIP does not maintain internal buffers for UDP communication.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.NoInternalUdpBuffers</srcid><srcstatus/><internalId>495</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>275</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00198</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module shall send a DoIP message via UDP it shall call the SoAd_IfTransmit with the
        TxPduId set to the SoAd internal TxPduId that is retrieved via the according configured
        DoIPSoAdUdpTxPduRef, the PduInfoPtr shall contain the length of the message and the pointer to
        the to be transmitted message buffer and additionally the buffer shall be locked.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03000_Udp_GenHeaderNack_INCORRECT_PATTERN</srcid><srcstatus/><internalId>1068</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03001_Udp_GenHeaderNack_UNKNOWN_PL_TYPE</srcid><srcstatus/><internalId>1069</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>276</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00199</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the SoAd calls the DoIP module via the Interface DoIP_SoAdIfTxConfirmation, the DoIP module
        shall release the buffer which is related to the received TxPduId.
      </description>
      <comment>
        DoIP does not maintain internal buffers for UDP communication.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.NoInternalUdpBuffers</srcid><srcstatus/><internalId>495</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>277</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00200</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the function DoIP_SoAdTpRxIndication is called the DoIp module shall release all data
        connected to the reception and forward the result to PduR_DoIPTpRxIndication if a reception for
        diagnostic message is currently ongoing.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DoIP_SoAdTpRxIndication</srcid><srcstatus/><internalId>501</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00200</srcid><srcstatus/><internalId>74</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>278</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00201</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The DoIP module shall determine the DoIP Activation Line status by the calls to
        DoIP_ActivationLineSwitch (uint8 InterfaceId, boolean *Active) based on the value of the
        boolean parameter Active per DoIPInterface with a given InterfaceId. The Activation Line status
        is considered "active", if the boolean value in the call is set to TRUE. The Activation Line
        status is considered "inactive", if the boolean value in the call is set to FALSE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_91000</srcid><srcstatus/><internalId>358</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02000_Transition_InactiveToActive</srcid><srcstatus/><internalId>1052</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0101.ActivationLineSwitch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>279</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00202</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If data is received from SoAd or PduR (i.e. communication related interfaces are called) via
        PduIds related to a certain DoIPInterface configured with DoIPInterfaceActLineCtrl = TRUE,
        where the status of the Activation Line of this DoIPInterface is currently inactive, the DoIP
        module shall ignore all these requests and return a negative return value as return value.
      </description>
      <comment>
        The return value depends on the API that is called. If it is Std_ReturnType it shall return
        E_NOT_OK, if it is BufReq_ReturnType it shall return BUFREQ_NOT_OK.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03070_IfRxIndication_ActivationLineInactive</srcid><srcstatus/><internalId>1135</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03079_RxOnActivationLineInactive</srcid><srcstatus/><internalId>1144</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0101.ActivationLineSwitch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>280</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00204</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        For activation line controlled DoIP Interfaces with DoIPInterfaceActLineCtrl = TRUE, DoIP shall
        establish the corresponding connections for these interfaces according to SWS_DoIP_00306 if
        corresponding Activation Line Status switches to "active". (SRS_Eth_00081, SRS_Eth_00028,
        SRS_Eth_00026)
      </description>
      <comment>
        Note: According to AUTOSAR 4.2.2 TCPIP_IPADDR_ASSIGNMENT_LINKLOCAL_DOIP is used instead
        of TCPIP_IPADDR_ASSIGNMENT_AUTOIP. TcpIp only supports the new macro.
        Note: Requirement is also applicable when DoIPInterfaceActLineCtrl = FALSE, but connections
              shall be establish with call of function DoIP_ControlInternalInterface().
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_3583</srcid><srcstatus/><internalId>561</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00306</srcid><srcstatus/><internalId>360</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0101.ActivationLineSwitch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0138.EB.ControlInternalInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>707</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>281</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00205</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the function DoIP_SoConModeChg is called with Mode set to SOAD_SOCON_ONLINE for a UDP
        vehicle announcement connection, the DoIP module shall send the vehicle announcement message
        via the corresponding Tx PDU configured in the DoIPUdpVehicleAnnouncementConnection and
        belonging to the reported socket connection.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02006_SoConModeChg_GetSoConId_NOK</srcid><srcstatus/><internalId>1058</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03006_VehicleAnnouncement</srcid><srcstatus/><internalId>1074</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03141_VehicleAnnouncement_Trigger_1</srcid><srcstatus/><internalId>1206</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03142_VehicleAnnouncement_Trigger_2</srcid><srcstatus/><internalId>1207</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09017_VehicleAnnouncement</srcid><srcstatus/><internalId>1307</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00297</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>351</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>282</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00207</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the function DoIP_SoAdTpStartOfReception is called with TpSduLength set to 0, the DoIP
        module shall fill in the bufferSizePtr the available buffer size in the DoIP for the reception
        of the TCP message, lock the according buffer for other TCP connections and return BUFREQ_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>283</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00208</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the function DoIP_SoAdTpCopyRxData is called at the start of a new DoIP message (e.g.
        directly after DoIPSoAdTpStartOfReception succeeded or previous DoIP message processed
        completely) with info.SduLength set to 0 the DoIP module shall return in the parameter
        bufferSizePtr the length to the maximum necessary bytes to evaluate the DoIP relevant data for
        routing of diagnostic data.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03013_CopyRxData_SduLength_0</srcid><srcstatus/><internalId>1081</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03036_DiagAckMsg_RxBlocked</srcid><srcstatus/><internalId>1102</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>284</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00209</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the function DoIP_SoAdTpCopyRxData is called at the start of a new DoIP message (e.g.
        directly after DoIPSoAdTpStartOfReception succeeded or previous DoIP message processed
        completely) with info.SduLength is not set to 0 and the DoIP TCP buffer is big enough to copy
        all the data, the DoIP module shall copy the received data to the internal TCP buffer, return
        the parameter bufferSizePtr set to the available buffer after copying and return BUFREQ_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>285</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00210</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the function DoIP_SoAdTpCopyRxData is called at the start of a new DoIP message (e.g.
        directly after DoIPSoAdTpStartOfReception succeeded or previous DoIP message processed
        completely) with info.SduLength is not set to 0 and the DoIP TCP buffer is not big enough to
        copy all the data, the DoIP module shall return BUFREQ_E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03064_CopyRxData_SduLength_Oversized_1</srcid><srcstatus/><internalId>1129</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08009_CopyRxData_SduLength_Oversized</srcid><srcstatus/><internalId>1283</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>286</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00212</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module has received sufficient data to evaluate the DoIP header, the payload type
        is diagnostic message and the Routing was already activated for the SourceAddress/TargetAddress
        combination on this DoIPInterface, the DoIP module shall call the PduR_DoIPTpStartOfReception
        with the according id set to the DoIPPduRRxPduId matching the SourceAddress/TargetAddress
        combination of the diagnostic message on this DoIPInterface, set the info.SduLength to the
        already received diagnostic data, set the info-&gt;SduDataPtr to the buffer containing the
        received diagnostic data and set the TpSduLength to the total size of the diagnostic message
        extracted from DoIP Header.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03011_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1079</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>287</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00214</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module has received sufficient data to evaluate the DoIP header and the payload
        type is not diagnostic message the DoIP shall copy all data of this DoIP message to the
        internal DoIP TCP buffer, lock the according buffer for other TCP connections and process the
        DoIP message as described in SWS_DoIP_00219.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.DoIPReceiveSegmented_RoutingActMsg</srcid><srcstatus/><internalId>21</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_6212</srcid><srcstatus/><internalId>587</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>288</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00216</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If PduR_DoIPTpStartOfReception returns BUFREQ_E_NOT_OK or BUFREQ_E_OVFL, the DoIP module shall
        react as described in SWS_DoIP_00174 and discard all the TCP data until the next DoIP message.
      </description>
      <comment>
        Negative acknowledge code is set to 0x08 (according to SWS_DoIP_00174) in case upper
        layer returns error code BUFREQ_E_NOT_OK or BUFREQ_E_BUSY. In case upper layer returns
        error code BUFREQ_E_OVFL, negative ackonwledge code is set of 0x05 as described in
        SWS_DoIP_00126.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00216</srcid><srcstatus/><internalId>82</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00174</srcid><srcstatus/><internalId>254</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DiagMsgNegativeAckCodes</srcid><srcstatus/><internalId>493</internalId></linkedfrom><linkedfrom><srcid>dev.DoIP.DoIP_DoIPPduRBufferNotOkNackValue</srcid><srcstatus/><internalId>508</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>289</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00217</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If PduR_DoIPTpCopyRxData returns BUFREQ_E_NOT_OK, the DoIP module shall react as described in
        SWS_DoIP_00174, discard all the TCP data until the next DoIP message and call the
        PduR_DoIPTpRxIndication with the according PduId and the result set to E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03023_DiagNackMsg_PdurCopyRxData_NOK</srcid><srcstatus/><internalId>1090</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>290</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00218</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If PduR_DoIPTpStartOfReception returns BUFREQ_OK the reception was accepted and the DoIP shall
        forward all subsequent calls to DoIP_SoAdTpCopyRxData directly to PduR_DoIPTpCopyRxData until
        all diagnostic data was handed to the PduR.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03011_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1079</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>291</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00219</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module has received with the DoIP_SoAdTpCopyRxData operations enough data to
        evaluate the DoIP header and the payload type is not diagnostic message , the DoIP module shall
        receive via subsequent calls to DoIP_SoAdTpCopyRxData all data for the DoIP message and process
        it.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>292</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00220</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module needs to send a DoIP message that is not a diagnostic message on the TCP
        connection, the DoIP shall call the SoAd_TpTransmit with the TxPduId containing the Id of the
        according socket, the PduInfoPtr.SduLength set to the size of the data to be transmitted and
        lock the buffer to send.
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Due to the feature complexity more then 10 test cases are
        required for complete testing.
      </furtherinfo>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03027_Tcp_GenHeaderNack_MSG_TO_LONG</srcid><srcstatus/><internalId>1093</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03028_Tcp_GenHeaderNack_UNKNOWN_PL_TYPE</srcid><srcstatus/><internalId>1094</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03029_Tcp_GenHeaderNack_INCORRECT_PATTERN</srcid><srcstatus/><internalId>1095</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03030_Tcp_GenHeaderNack_INVALID_PL_LENGTH_1</srcid><srcstatus/><internalId>1096</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03031_Tcp_GenHeaderNack_INVALID_PL_LENGTH_2</srcid><srcstatus/><internalId>1097</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03032_Tcp_GenHeaderNack_INVALID_PL_LENGTH_3</srcid><srcstatus/><internalId>1098</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03034_DiagAckMsg_SegmentedReception</srcid><srcstatus/><internalId>1100</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03039_DiagMsg_SegmentedHeaders</srcid><srcstatus/><internalId>1105</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03046_DiagAckMsg_TxBlocked</srcid><srcstatus/><internalId>1112</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03060_SoAd_TpTransmit_NOT_OK_2</srcid><srcstatus/><internalId>1125</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03072_DiagNackMsg_TxBlocked</srcid><srcstatus/><internalId>1137</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03073_GenHeaderNackMsg_TxBlocked</srcid><srcstatus/><internalId>1138</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03075_SoAd_TpTransmit_NOT_OK_4</srcid><srcstatus/><internalId>1140</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest07005_Tcp_GenHeaderNack_MSG_TO_LONG</srcid><srcstatus/><internalId>1270</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest07006_DiagMessageReceive_LongPdu</srcid><srcstatus/><internalId>1271</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest07009_DiagMessageReceive_Pdu32uint</srcid><srcstatus/><internalId>1274</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09010_Tcp_GenHeaderNack_INVALID_PL_LENGTH_4</srcid><srcstatus/><internalId>1300</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09015_AliveCheckReq_NOK</srcid><srcstatus/><internalId>1305</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09016_AliveCheckReq_TxBusy</srcid><srcstatus/><internalId>1306</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest11000_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1323</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0132.NonDiagMsgTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>701</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>293</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00221</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If all diagnostic data was successfully forwarded to the PduR  the DoIP module shall call the
        PduR_DoIPTpRxIndication with the according PduId and the result set to E_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03011_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1079</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03034_DiagAckMsg_SegmentedReception</srcid><srcstatus/><internalId>1100</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03039_DiagMsg_SegmentedHeaders</srcid><srcstatus/><internalId>1105</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>294</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00223</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the call to SoAd_TpTransmit returns E_NOT_OK the DoIP module shall discard the DoIP message.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03060_SoAd_TpTransmit_NOT_OK_2</srcid><srcstatus/><internalId>1125</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03075_SoAd_TpTransmit_NOT_OK_4</srcid><srcstatus/><internalId>1140</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03082_SoAd_TpTransmit_NOT_OK_5</srcid><srcstatus/><internalId>1147</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest07003_SoAd_TpTransmit_NOT_OK_3</srcid><srcstatus/><internalId>1269</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0132.NonDiagMsgTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>701</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>295</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00224</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the function DoIP_SoAdCopyTxData is called after a sucessfull call to SoAd_TpTransmit, with
        a valid id and the info.SduLength is set to 0 the DoIP shall return BUFREQ_OK and set the
        parameter availableDataPtr to the total available data size of the current DoIP message to be
        transmitted.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03044_DiagAckMsg_CopyTxData_SduLength_0</srcid><srcstatus/><internalId>1110</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03045_DiagNackMsg_CopyTxData_SduLength_0</srcid><srcstatus/><internalId>1111</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03080_AvailableDataPtr_CopyTxData_SduLength_0</srcid><srcstatus/><internalId>1145</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0132.NonDiagMsgTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>701</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>296</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00225</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the function DoIP_SoAdCopyTxData is called after a sucessfull call to SoAd_TpTransmit, with
        a valid id and the info.SduLength is not set to 0, the DoIP module shall copy the bytes
        specified in the info.SduLength to the info-&gt;SduDataPtr, return BUFREQ_OK and set the parameter
        availableDataPtr to the total available data size of the current DoIP message after the copy
        process.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0132.NonDiagMsgTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>701</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>297</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00226</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the function DoIP_TpTransmit or DoIP_IfTransmit is called and the data package is not
        allowed according to the current DoIP protocol related information, the DoIP module shall
        return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09019_StdCh_RoutingActReq_AUTOMATIC_3</srcid><srcstatus/><internalId>1309</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.NotSupported.IfTransmit</srcid><srcstatus/><internalId>503</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0131.DiagMsgTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>700</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>298</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00228</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the call to SoAd_TpTransmit returns for the use case "diagnostic message" E_NOT_OK the DoIP
        module shall discard the DoIP message and, in case the DoIPPduType of the corresponding
        DoIPPduRTxPdu is DOIP_TPPDU, call the PduR_DoIPTpTxConfirmation with result set to E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03059_SoAd_TpTransmit_NOT_OK_1</srcid><srcstatus/><internalId>1124</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0131.DiagMsgTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>700</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>299</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00229</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the function DoIP_SoAdTpTxConfirmation is called the DoIP module shall release the buffer
        related to the id.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03012_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1080</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest11000_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1323</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0132.NonDiagMsgTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>701</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>300</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00230</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the function DoIP_TpTransmit or DoIP_IfTransmit is called and the data package is allowed to
        be sent according to the current DoIP protocol related information, the DoIP module shall
        return E_OK. 1.) If the connection to the SoAd is idle, the DoIP shall call the SoAd_TpTransmit
        function according to SWS_DoIP_00284. 2.) If the connection to the SoAd is not idle, the DoIP
        shall store the transmission request and call SoAd_TpTransmit according to SWS_DoIP_00284 as
        soon as the connection is idle again.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DoIP_TpTransmit.Queue</srcid><srcstatus/><internalId>506</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0131.EB.SWS_DoIP_00230</srcid><srcstatus/><internalId>845</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>301</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00231</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the function DoIP_SoAdCopyTxData is called after a sucessfull call to SoAd_TpTransmit for
        the use case "diagnostic message", with a valid id and the info.SduLength is set to 0 the DoIP
        shall return BUFREQ_OK and set the parameter availableDataPtr to the total available data size
        of the current buffered DoIP message to be transmitted.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DoIP_SoAdCopyTxData.AvailableDataPtr</srcid><srcstatus/><internalId>497</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0131.EB.SWS_DoIP_00231</srcid><srcstatus/><internalId>844</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>302</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00232</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the function DoIP_SoAdCopyTxData is called after a sucessfull call to SoAd_TpTransmit for
        the use case "diagnostic message" with a valid id and the info.SduLength is not set to 0, the
        DoIP module shall copy the bytes specified in the info.SduLength to the info-&gt;SduDataPtr. If
        the requested bytes are more than in the DoIP internal buffer, the DoIP shall call the
        PduR_DoIPTpCopyTxData with the info.SduLength set to the remaining requested data bytes and the
        info-&gt; SduDataPtr set to the position where the PduR shall continue to copy the data.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03012_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1080</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03035_DiagAckMsg_SegmentedAckTransmission</srcid><srcstatus/><internalId>1101</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest11000_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1323</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15003_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1351</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15004_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1352</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0131.DiagMsgTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>700</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>303</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00233</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module has copied via subsequent calls to DoIP_SoAdTpCopyTxData for the use case "
        diagnostic message" all information stored in the DoIP internal buffer, the DoIP module shall
        forward all subsequent calls to DoIP_SoAdTpCopyTxData/DoIP_SoAdTpTxConfirmation for this
        transmission directly to the PduR using PduR_DoIPTpCopyTxData/PduR_DoIPTpTxConfirmation in case
        the DoIPPduRTxPdu is DOIP_TPPDU and PduR_DoIPIfTxConfirmation otherwise, and release the
        internal buffer for this transmission.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03012_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1080</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest11000_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1323</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15003_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1351</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15004_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1352</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0131.DiagMsgTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>700</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>304</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00234</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the Activation Line status of a DoIPInterface switches to "inactive", the DoIP module shall
        shall loop over all DoIPTcpConnection, DoIPUdpConnection, and
        DoIPUdpVehicleAnnouncementConnections. For each of these DoIPConnections the DoIP module shall
        retrieve the corresponding SoConId via call to the SoAd_GetSoConId and close all the connection
        by a call to SoAd_CloseSoCon with the retrieved SoConId.
      </description>
      <comment>
        Note:
        - UDP connections are handled before TCP connections.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DoIP_ActivationLineSwitch</srcid><srcstatus/><internalId>487</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0101.EB.SWS_DoIP_00234</srcid><srcstatus/><internalId>789</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>305</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00235</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        In addition to SWS_DoIP_00234, the DoIP module shall release the corresponding IP Address
        assignment via the call to SoAd_ReleaseIpAddrAssignment for those connections, which belong to
        the DoIPInterface for which the Activation Line status switched to "inactive", that have
        DoIPRequestAddressAssignment set to true.
      </description>
      <comment>
        It is only necessary to release the IP Address assignment for one SocketId, as a valid DoIP
        configuration is related to exactly one Ethernet Interface, that has one IP Address but
        can have several valid socket connections.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0101.EB.SWS_DoIP_00235</srcid><srcstatus/><internalId>790</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>306</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00241</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module is called with DoIP_SoConModeChg and the Mode set to SOAD_SOCON_ONLINE the
        state of the socket connection shall be considered as online and the DoIP module shall behave
        as described in SWS_DoIP_00143.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.SoConStatus</srcid><srcstatus/><internalId>486</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>307</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00243</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module is called with DoIP_SoConModeChg and the Mode set to something else than
        SOAD_SOCON_ONLINE the state of the socket connection shall be considered as offline and the
        DoIP module shall behave as described in SWS_DoIP_00115.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02003_SoConModeChg_OFFLINE</srcid><srcstatus/><internalId>1055</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02006_SoConModeChg_GetSoConId_NOK</srcid><srcstatus/><internalId>1058</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>308</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00244</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_SoAdIfRxIndication
        Syntax:             void DoIP_SoAdIfRxIndication (PduIdType RxPduId, const PduInfoType* PduInfoPtr)
        Service ID [hex]:   0x42
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant for different PduIds.
                            Non reentrant for the same PduId.
        Parameters (in):    RxPduId         ID of the received PDU.
                            PduInfoPtr      Contains the length (SduLength) of the received PDU, a pointer
                                            to a buffer (SduDataPtr) containing the PDU, and the MetaData
                                            related to this PDU.
        Parameters (inout): None
        Parameters (out):   None
        Return value:       None
        Description:        Indication of a received PDU from a lower layer communication interface module.
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_02_Features_Disabled</srcid><srcstatus/><internalId>956</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>309</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00245</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_SoAdIfTxConfirmation
        Syntax:             void DoIP_SoAdIfTxConfirmation (PduIdType TxPduId, Std_ReturnType result)
        Service ID [hex]:   0x40
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant for different PduIds.
                            Non reentrant for the same PduId.
        Parameters (in):    TxPduId       ID of the PDU that has been transmitted.
                            result        E_OK:     The PDU was transmitted.
                                          E_NOT_OK: Transmission of the PDU failed.
        Parameters (inout): None
        Parameters (out):   None
        Return value:       None
        Description:        The lower layer communication interface module confirms the transmission
                            of a PDU, or the failure to transmit a PDU.
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>310</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00246</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check that the service DoIP_Init
        was previously called. If the check fails, the function shall raise the development error
        DOIP_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>311</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00247</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the RxPduId matches a
        configured DoIPSoAdUdpRxPduId. If the check fails the function shall raise the development
        error DOIP_E_INVALID_PDU_SDU_ID.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01007_SoAdIfRxIndication_InvalidParam</srcid><srcstatus/><internalId>1038</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>312</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00248</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check the validity of the
        PduInfoPtr and call the DET with DOIP_E_PARAM_POINTER error id if it is a NULL_PTR.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01007_SoAdIfRxIndication_InvalidParam</srcid><srcstatus/><internalId>1038</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>313</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00249</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check that the service DoIP_Init
        was previously called. If the check fails, the function shall raise the development error
        DOIP_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>314</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00250</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check if the TxPduId matches a
        configured DoIPSoAdUdpTxPduId. If the check fails the function shall raise the development
        error DOIP_E_INVALID_PDU_SDU_ID.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01010_SoAdIfTxConfirmation_InvalidParam</srcid><srcstatus/><internalId>1041</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>315</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00253</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the buffer size reported by PduR_DoIPTpStartOfReception does not suffice for already
        received data, DoIP shall abort the reception and call PduR_DoIPTpRxIndication with E_NOT_OK.
      </description>
      <comment>
        This requirement is not applicable, due to the following reasons.

        DoIP requires SoAd to provide diagnostic message in 3 distinctive steps:
        1) Receive generic header (8 bytes, delivered at once or segmented depending on SoAd).
        2) Diagnostic message header (4 bytes, delivered at once or segmented depending on SoAd).
        3) Diagnostic message payload (delivered at once or segmented depending on PduR and SoAd).

        These steps cannot overlap, for example to deliver diagnostic message header and payload
        during single call of DoIP_SoAdTpCopyRxData().
        Since call of PduR_DoIPStartOfReception() is done within step 2, when no payload data have
        been received, this requirement is not applicable.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>316</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00254</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the call to PduR_DoIPTpCopyTxData returns BUFREQ_OK or all the requested data was part of
        the DoIP internal buffer, the DoIP module shall return BUFREQ_OK and set the parameter
        availableDataPtr to the remaining data size of the DoIP header and diagnostic SourceAddress/
        TargetAddress if they have not been copied completely or to the remaining data size returned
        from PduR_DoIPTpCopyTxData.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03012_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1080</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest11000_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1323</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0131.DiagMsgTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>700</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>317</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00257</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module is called with DoIP_TpCancelTransmit or DoIP_IfCancelTransmit, the DoIP
        module shall call the SoAd_TpCancelTransmit function of the according SoAdTxPduId.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.CancelAPIs</srcid><srcstatus/><internalId>492</internalId></linkedfrom><linkedfrom><srcid>dev.DoIP.DoIP_IfCancelTransmit</srcid><srcstatus/><internalId>519</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>318</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00258</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP module is called with DoIP_TpCancelReceive, the DoIP module shall call the
        SoAd_TpCancelReceive function with the RxPduId that is retrieved via the according configured
        DoIPSoAdTcpRxPduRef.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.CancelAPIs</srcid><srcstatus/><internalId>492</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>319</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00259</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        At the end of the copy procedure via PduR_DoIPTpCopyRxData to PduR, the DoIP module has to
        modify the available buffer size pointer returned to SoAd in order to stop before the next DoIP
        header.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03034_DiagAckMsg_SegmentedReception</srcid><srcstatus/><internalId>1100</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_6807</srcid><srcstatus/><internalId>588</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>320</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00260</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If PduR_DoIPTpStartOfReception returns BUFREQ_OK the reception was accepted and the DoIP module
        shall forward already received data of the diagnostic message to the upper layer by subsequent
        calls to PduR_DoIPTpCopyRxData.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03011_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1079</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>321</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00261</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:         CBGetPowerMode
        Kind:         RequiredPort
        Interface:    CallbackGetPowerMode
        Description:  -
        Variation:    {ecuc(DoIP/DoIPGeneral/DoIPPowerModeCallback/DoIPPowerModeDirect)} == NULL
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/DoIP_swc_internal.arxml.m4_22</srcid><srcstatus/><internalId>658</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest12001_SVC_PowerMode_OK</srcid><srcstatus/><internalId>1324</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12002_SVC_PowerMode_E_NOK</srcid><srcstatus/><internalId>1325</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0100.ServiceInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>669</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>322</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00262</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:         CB{Name}RoutingActivation
        Kind:         RequiredPort
        Interface:    {Name}_RoutingActivation
        Description:  -
        Variation:    Name = {ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation.SHORT-NAME)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/DoIP_swc_internal.arxml.m4_30</srcid><srcstatus/><internalId>659</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest12003_SVC_RoutActAuthConf_RA_0</srcid><srcstatus/><internalId>1326</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12004_SVC_RoutActAuthConf_RA_1</srcid><srcstatus/><internalId>1327</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12005_SVC_RoutActAuthConf_RA_2</srcid><srcstatus/><internalId>1328</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12006_SVC_RoutActAuthConf_RA_3</srcid><srcstatus/><internalId>1329</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest12008_SVC_RoutActAuthConf_RA_5</srcid><srcstatus/><internalId>1331</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0100.ServiceInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>669</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>323</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00263</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:         CBTriggerGIDSynchronization
        Kind:         RequiredPort 
        Interface:    CallbackTriggerGIDSynchronization
        Description:  -
        Variation:    ({ecuc(DoIP/DoIPGeneral/DoIPTriggerGidSyncCallback)} != NULL) &amp;&amp;
                      ({ecuc(DoIP/DoIPGeneral/DoIPTriggerGidSyncCallback/DoIPTriggerGidSyncDirect)} == NULL) &amp;&amp;
                      ({ecuc(DoIP/DoIPGeneral/DoIPVinGidMaster)} == TRUE)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AUTOSAR_GID_Sync</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0100.ServiceInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>669</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>324</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00264</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:         CBGetGID
        Kind:         RequiredPort
        Interface:    CallbackGetGID
        Description:  -
        Variation:    ({ecuc(DoIP/DoIPGeneral/DoIPGetGidCallback)} != NULL) &amp;&amp;
                      ({ecuc(DoIP/DoIPGeneral/DoIPGetGidCallback/DoIPGetGidDirect)} == NULL)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AUTOSAR_GID_Sync</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0100.ServiceInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>669</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>325</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00266</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:         DoIP_PowerStateType
        Kind:         Type
        Derived from: uint8
        Range:  DOIP_NOT_READY      | 0x00      | DoIP Power Mode "not ready"
                DOIP_READY          | 0x01      | DoIP Power Mode "ready"
                DOIP_NOT_SUPPORTED  | 0x02      | DoIP Power Mode "not supported"
                0x03-0xFF           | 0x03-0xFF | Reserved
        Description:  Used for handling of the PowerMode in DoIP entity status requests
        Variation:    -
        Available via: Rte_DoIP_Type.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00093</srcid><srcstatus/><internalId>185</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/DoIP_Bswmd.arxml.m4_51</srcid><srcstatus/><internalId>650</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>326</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00267</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name: AuthenticationReqDataType_{Name}
        Kind: Array
                Element type: uint8
        Size: {ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation/
              DoIPRoutingActivationAuthenticationCallback.DoIPRoutingActivationAuthenticationReqLength)}
        Elements:      -
        Description:   -
        Variation:     Name = {ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation.SHORT-NAME)
        Available via: Rte_DoIP_Type.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Int.h_1026</srcid><srcstatus/><internalId>534</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/DoIP_Bswmd.arxml.m4_69</srcid><srcstatus/><internalId>651</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>327</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00268</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name: AuthenticationResDataType_{Name}
        Kind: Array
                Element type: uint8
        Size: {ecuc(DoIP/DoIPConfigSet/DoIPRoutingActivation/
              DoIPRoutingActivationAuthenticationCallback.DoIPRoutingActivationAuthenticationResLength)}
        Elements:      -
        Description:   -
        Variation:     Name = {ecuc(DoIP/DoIPConfigSet/DoIPRoutingActivation.SHORT-NAME)
        Available via: Rte_DoIP_Type.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Int.h_1030</srcid><srcstatus/><internalId>536</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/DoIP_Bswmd.arxml.m4_91</srcid><srcstatus/><internalId>652</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>328</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00269</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name: ConfirmationReqDataType_{Name}
        Kind: Array
                Element type: uint8
        Size: {ecuc(DoIP/DoIPConfigSet/DoIPRoutingActivation/DoIPRoutingActivationConfirmationCallback.
              DoIPRoutingActivationConfirmationReqLength)}
        Elements:      -
        Description:   -
        Variation:     Name = {ecuc(DoIP/DoIPConfigSet/DoIPRoutingActivation.SHORT-NAME)
        Available via: Rte_DoIP_Type.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Int.h_1027</srcid><srcstatus/><internalId>535</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/DoIP_Bswmd.arxml.m4_115</srcid><srcstatus/><internalId>653</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>329</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00270</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name: ConfirmationResDataType_{Name}
        Kind: Array
                Element type: uint8
        Size: {ecuc(DoIP/DoIPConfigSet/DoIPRoutingActivation/DoIPRoutingActivationConfirmationCallback.
              DoIPRoutingActivationConfirmationResLength)}
        Elements:      -
        Description:   -
        Variation:     Name = {ecuc(DoIP/DoIPConfigSet/DoIPRoutingActivation.SHORT-NAME)
        Available via: Rte_DoIP_Type.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Int.h_1031</srcid><srcstatus/><internalId>537</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/DoIP_Bswmd.arxml.m4_137</srcid><srcstatus/><internalId>654</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>330</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00271</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:                 DoIP_ActivationLineType (obsolete)
        Kind:                 ModeDeclarationGroup
        Category:             ALPHABETIC_ORDER
        Initial mode:         DOIP_ACTIVATION_LINE_INACTIVE
        On transition value:  -
        Modes:                DOIP_ACTIVATION_LINE_ACTIVE
                              DOIP_ACTIVATION_LINE_INACTIVE
        Description:          Tags:atp.Status=obsolete
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DoIP_ActivationLineSwitch</srcid><srcstatus/><internalId>487</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>331</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00272</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The value of DOIP_E_PENDING shall be 0x10.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Types.h_20</srcid><srcstatus/><internalId>545</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>332</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00274</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIPRoutingActivationConfirmationCallback returns E_NOT_OK, the DoIP module shall
        send a routing activation response message with the activation response code set to 0x05 as
        described in chapter 7.3.2.3.2 and the socket connection shall be closed as defined in
        SWS_DoIP_00058.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05012_RoutActAuthConf_PayloadLen11_NoConf_1</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05013_RoutActAuthConf_PayloadLen11_NoConf_2</srcid><srcstatus/><internalId>1226</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0111.RoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>333</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00114</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIPRoutingActivationConfirmationCallback returns DOIP_E_PENDING, the DoIP module
        shall send a routing activation response message once with the activation response code set
        to 0x11 as described in chapter 7.3.2.3.2.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05015_RoutActAuthConf_PENDING_SUCCESS</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05018_RoutActConf_Pending</srcid><srcstatus/><internalId>1231</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0111.RoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>334</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00276</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIP received more then the configured amount of DoIPMaxUDPRequestPerMessage the DoIP
        shall sent DoIP NACKs for the Requested Messages that can not be processed
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DoIPMaxUDPRequestPerMessage</srcid><srcstatus/><internalId>517</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>335</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00277</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_IfTransmit
        Syntax:             Std_ReturnType DoIP_IfTransmit (PduIdType TxPduId, const PduInfoType* PduInfoPtr)
        Service ID [hex]:   0x49
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant for different PduIds.
                            Non reentrant for the same PduId.
        Parameters (in):    TxPduId           Identifier of the PDU to be transmitted
                            PduInfoPtr        Length of and pointer to the PDU data and pointer to MetaData.
        Parameters (inout): None
        Parameters (out):   None
        Return value:       Std_ReturnType    E_OK:     Transmit request has been accepted.
                                              E_NOT_OK: Transmit request has not been accepted.
        Description:        Requests transmission of a PDU.
        Available via:      DoIP.h
      </description>
      <comment>
        At the moment this service is not available.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.NotSupported.IfTransmit</srcid><srcstatus/><internalId>503</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>336</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00279</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If the DoIPPduType of a DoIPPduRTxPdu is DOIP_IFPDU, the content of the PDU provided by
        DoIP_IfTransmit shall be stored completely in the DoIP internal buffer. If the buffer is too
        small, E_NOT_OK shall be returned immediately.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.NotSupported.IfTransmit</srcid><srcstatus/><internalId>503</internalId></linkedfrom><linkedfrom><srcid>dev.DoIP.DoIPPduType</srcid><srcstatus/><internalId>518</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>337</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00284</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        To transmit a DoIP diagnostic message the DoIP shall assemble the DoIP header considering the
        information of the handed PduInfoPtr.SduLength and call SoAd_TpTransmit with the TxPduId set to
        the according PduId of the socket connection and the PduInfoPtr.SduLength set to the sum of the
        following lengths: DoIP header (8 Byte), the DoIP diagnostic message specific data (4 Byte) and
        received length of the call to DoIP_TpTransmit or DoIP_IfTransmit (PduInfoPtr.SduLength)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DoIP_TpTransmit.Queue</srcid><srcstatus/><internalId>506</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>338</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00285</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled: The function shall check that the service DoIP_Init
        was previously called. If the check fails, the function shall raise the development error
        DOIP_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0101.ActivationLineSwitch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>339</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00286</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        DoIP module shall consider the announcement successful and process DoIPVehicleAnnouncementCount
        if the SoAd calls the DoIP module via the interface DoIP_SoAdIfTxConfirmation with Result set
        to E_OK for the announcement related SoAd_IfTransmit() call i.e. if E_NOT_OK is returned for
        the last announcement message, it will not be considered an announcement.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AnnouncementConfirmation.NotRequired</srcid><srcstatus/><internalId>514</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>340</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00287</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:           DoIP_FurtherActionByteType
        Kind:           Type
        Derived from:   uint8
        Range:          0x11..0xFF        Available for additional OEM-specific use
        Description:    Used to get the OEM specific Further Action Byte for the DoIP vehicle
                        identification response/vehicle announcement.
        Variation:      -
        Available via:  Rte_DoIP_Type.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.FurtherActionByteCallback</srcid><srcstatus/><internalId>520</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>341</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00288</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       &lt;User&gt;_DoIPGetFurtherActionByteCallback
        Syntax:             Std_ReturnType &lt;User&gt;_DoIPGetFurtherActionByteCallback
                                (
                                  DoIP_FurtherActionByteType* FurtherActionByte
                                )
        Service ID [hex]:   -
        Sync/Async:         Synchronous
        Reentrancy:         Don't care
        Parameters (in):    None
        Parameters (inout): None
        Parameters (out):   FurtherActionByte     Pointer containing the information of the FurtherActionByte.
                                                  Only valid if the return value equals E_OK.
        Return value:       Std_ReturnType        E_OK:     FurtherActionByte contains valid information.
                                                  E_NOT_OK: FurtherActionByte contains no valid information.
        Description:        Callback function to get the OEM specific Further Action Byte for the DoIP
                            vehicle identification response/vehicle announcement.
        Available via:      DoIP_Externals.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.FurtherActionByteCallback</srcid><srcstatus/><internalId>520</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>342</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00289</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:        CBGetfurtherActionByte*_{DoIPInterface_short_name}*DoIP.CBGetfurtherActionByte
        Kind:        RequiredPort
        Interface:   CallbackGetFurtherActionByte
        Description: -
        Variation:   {ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPFurtherActionByteCallback/
                      DoIPFurtherActionByteDirect)} == NULL
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.FurtherActionByteCallback</srcid><srcstatus/><internalId>520</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>343</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00290</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:       CallbackGetFurtherActionByte
        Comment:    -
        IsService:  true
        Variation:  {ecuc(DoIP/DoIPConfigSet/DoIPInterface/DoIPFurtherActionByteCallback/
                      DoIPFurtherActionByteDirect)} == NULL
        Possible Errors:  0     E_OK        Operation successful
                          1     E_NOT_OK    Operation failed

        Operation:  GetFurtherActionByte
        Comment:    -
        Variation:  -
        Parameters: FurtherActionByte
                      Type:       DoIP_FurtherActionByteType
                      Direction:  OUT
                      Comment:    -
                      Variation:  -
        Possible Errors:  E_OK
                          E_NOT_OK
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.FurtherActionByteCallback</srcid><srcstatus/><internalId>520</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>344</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00291</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        The "Further action" byte of a vehicle identification response/vehicle announcement message
        shall contain the 1 Byte value retrieved by a call to the configured
        DoIPFurtherActionByteCallback (if configured, for the signature see &lt;User&gt;
        _DoIPGetFurtherActionByteCallback, SWS_DoIP_00288). If the function returns E_OK, the "Further
        action" byte shall be set to the retrieved value of FurtherActionByte. If the function returns
        E_NOT_OK, the "Further action" byte shall be set according to [SWS_DoIP_00082], [SWS_DoIP_00083]
        or [SWS_DoIP_00084]
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.FurtherActionByteCallback</srcid><srcstatus/><internalId>520</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>345</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00292</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a DoIP message with payload Type 0x0000 is received on a configured DoIPUDPConnection or
        DoIPTCPConnection, the message shall be discarded.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03052_Udp_IgnoreGenericNack</srcid><srcstatus/><internalId>1118</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03054_Tcp_IgnoreGenericNack</srcid><srcstatus/><internalId>1120</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>346</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00293</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If a DoIP message with payload Type 0x0004 is received on a configured DoIPUDPConnection, the
        message shall be discarded.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03053_Udp_IgnoreVehicleAnnouncementMsg</srcid><srcstatus/><internalId>1119</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>347</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00294</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        When receiving a routing activation request on a TCP connection where DoIPTcpConnection/
        DoIPTcpConnectionSecurityRequired is not set or set to FALSE, the DoIP module shall search for
        a DoIPTester with an assigned container that matches DoIPTesterSA. If such a DoIPTester
        container was found and the matching DoIPRoutingActivation container (refer to SWS_DoIP_00108)
        has the attribute DoIPRoutingActivationSecurityRequired not set or set to FALSE, the connection
        will be established. If such a DoIPTester container was found and the matching
        DoIPRoutingActivation container (refer to SWS_DoIP_00108) has the attribute
        DoIPRoutingActivationSecurityRequired is set to TRUE, the connection shall be rejected with the
        response code "0x07"
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR R19-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03107_RoutActResp_NOTSECURE</srcid><srcstatus/><internalId>1172</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.SecureConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>694</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>348</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00295</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        When receiving a routing activation request on a TCP connection where DoIPTcpConnection/
        DoIPTcpConnectionSecurityRequired set to TRUE, the DoIP module shall search for a DoIPTester
        with an assigned container that matches DoIPTesterSA. If such a DoIPTester container was found,
        the connection will be established.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR R19-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03108_RoutActResp_SECURE_SUCCESS</srcid><srcstatus/><internalId>1173</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.SecureConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>694</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>349</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00296</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        For non activation line controlled DoIP Interfaces with DoIPInterfaceActLineCtrl = FALSE, DoIP
        shall establish the corresponding connections for these interfaces according to SWS_DoIP_00306
        in context of first call to DoIP_MainFunction(). (SRS_Eth_00081, SRS_Eth_00028, SRS_Eth_00026)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_1716</srcid><srcstatus/><internalId>554</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00306</srcid><srcstatus/><internalId>360</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0101.ActivationLineSwitch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0138.EB.ControlInternalInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>707</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>350</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00297</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        For a DoIP Interface with DoIPInterfaceAnnouncementStart = DOIP_AUTOMATIC_ANNOUNCE, the DoIP
        module shall start Vehicle announcement according to SWS_DoIP_00205.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00205</srcid><srcstatus/><internalId>282</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.TriggerAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>705</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>351</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00298</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        For a DoIP Interface with DoIPInterfaceAnnouncementStart = DOIP_ONTRIGGER_ANNOUNCE, the sending
        of vehicle announcement only starts if DoIP_TriggerVehicleAnnouncement () has been called for
        that Interface.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_4165</srcid><srcstatus/><internalId>565</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03141_VehicleAnnouncement_Trigger_1</srcid><srcstatus/><internalId>1206</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.TriggerAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>705</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>352</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00299</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If DoIP_TriggerVehicleAnnouncement() is called, but the corresponding socket is not yet ONLINE
        then the request shall be remembered and vehicle announcement shall be sent as soon as the
        socket goes ONLINE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.TriggerVehicleAnnouncement</srcid><srcstatus/><internalId>510</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00299</srcid><srcstatus/><internalId>92</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.TriggerAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>705</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>353</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00302</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled DoIP_ActivationLineSwitch (InterfaceId,*Active)
        shall check if interface identified by InterfaceId actually exists and DoIPInterfaceActLineCtrl
        is set to TRUE. If the check fails, the function shall raise the development error
        DOIP_E_INVALID_PARAMETER.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01022_ActivationLineSwitch_InvalidParam</srcid><srcstatus/><internalId>1049</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>354</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00303</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled call to DoIP_ActivationLineSwitch shall check if the
        interface identified by InterfaceId actually exists. If the check fails, the function shall
        raise the development error DOIP_E_INVALID_PARAMETER.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01022_ActivationLineSwitch_InvalidParam</srcid><srcstatus/><internalId>1049</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>355</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00304</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled DoIP_TriggerVehicleAnnouncement shall check if the
        interface identified by InterfaceId is configured with DoIPInterfaceActLineCtrl set to FALSE.
        If the check fails the function shall raise the development error DOIP_E_INVALID_PARAMETER.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.TriggerVehicleAnnouncementSupport</srcid><srcstatus/><internalId>511</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.TriggerAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>705</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>356</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00305</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        If development error detection is enabled call to DoIP_TriggerVehicleAnnouncement shall check
        if the interface identified by InterfaceId actually exists. If the check fails, the function
        shall raise the development error DOIP_E_INVALID_PARAMETER.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01021_TriggerVehicleAnnouncement_InvalidParam</srcid><srcstatus/><internalId>1048</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.TriggerAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>705</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>357</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_91000</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_ActivationLineSwitch
        Syntax:             void DoIP_ActivationLineSwitch (uint8 InterfaceId, boolean* Active)
        Service ID [hex]:   0x0e
        Sync/Async:         Synchronous
        Reentrancy:         Non Reentrant
        Parameters (in):    InterfaceId           Indentifier of the DoIP interface for which
                                                  DoIP_ActivationLineSwitch function is called.
        Parameters (inout): Active                Boolean value acting as input parameter to request
                                                  active/inactive status of the given DoIP Interface
                                                  and acts as an output parameter indicating the
                                                  activation line status.
        Parameters (out):   None
        Return value:       None
        Description:        This function is to be used by integrators to inform the DoIP implementation
                            about the status of the activation line of a DoIP interface with given InterfaceId.
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02000_Transition_InactiveToActive</srcid><srcstatus/><internalId>1052</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02002_Transition_ActiveToInactive</srcid><srcstatus/><internalId>1054</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0101.ActivationLineSwitch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>358</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_91002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_TriggerVehicleAnnouncement
        Syntax:             void DoIP_TriggerVehicleAnnouncement (uint8 InterfaceId)
        Service ID [hex]:   0x0d
        Sync/Async:         Asynchronous
        Reentrancy:         Non Reentrant
        Parameters (in):    InterfaceId      Indentifier of the DoIP interface for which
                                              DoIP_TriggerVehicleAnnouncement is called.
        Parameters (inout): None
        Parameters (out):   None
        Return value:       None
        Description:        This function is used to notify the DoIP module to start vehicle announcement for
                            DoIP interfaces with given InterfaceId. This function is just a trigger to start the
                            DoIPInitialVehicleAnnouncementTime timeout.
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_4142</srcid><srcstatus/><internalId>564</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.TriggerAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>705</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>359</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00306</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        To open the socket connections (triggered by SWS_DoIP_00204 or SWS_DoIP_00296) of an DoIP
        interface the DoIP module shall loop over all its associated DoIPTcpConnection,
        DoIPUdpConnection and DoIPUdpVehicleAnnouncementConnections. For each DoIP connections
        belonging to respective DoIP Interfaces which has a DoIPRequestAddressAssignment set to true
        the DoIP module shall retrieve the corresponding SoConId via call to the SoAd_GetSoConId() and
        trigger the IP Address assignment via subsequent calls to SoAd_RequestIpAddrAssignment() with
        the retrieved SoConId, LocalIpAddrPtr and DefaultRouterPtr set to NULL_PTR, Netmask set to 0,
        and Type set to TCPIP_IPADDR_ASSIGNMENT_ALL. For each of these DoIP connections (irrespective
        of the value of DoIPRequestAddressAssignment) the DoIP module shall open the respective
        connection by an according call to SoAd_OpenSoCon(). (SRS_Eth_00081, SRS_Eth_00028,
        SRS_Eth_00026)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02000_Transition_InactiveToActive</srcid><srcstatus/><internalId>1052</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02004_ActiveLineSwitch_GetSoConId_NOK</srcid><srcstatus/><internalId>1056</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02013_ActivateLineDuringReleaseIpAddresses</srcid><srcstatus/><internalId>1065</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02014_ActivateInactiveLineBeforeTimeout</srcid><srcstatus/><internalId>1066</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest04002_RequestAddressAssignment_FALSE</srcid><srcstatus/><internalId>1210</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest04003_ActiveLineSwitch_GetSoConId_NOK</srcid><srcstatus/><internalId>1211</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0101.ActivationLineSwitch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00296</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>350</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>360</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Module Name:                DoIP
        Module Description:         Configuration of the DoIP (Diagnostic over IP) module.
        Post-Build Variant Support: true
        Supported Config Variants: VARIANT-LINK-TIME, VARIANT-POST-BUILD, VARIANT-PRECOMPILE
        Included Containers:
        ---------------------------------------------------------------------------------------------
        |  Container Name  |  Multiplicity  |                 Scope / Dependency                    |
        |   DoIPConfigSet  |       1        | This container contains the configuration parameters  |
        |                  |                | and sub containers of the AUTOSAR DoIP module.        |
        ---------------------------------------------------------------------------------------------
        |   DoIPGeneral    |       1        | This container specifies the general configuration    |
        |                  |                | parameters of the DoIP module.                        |
        ---------------------------------------------------------------------------------------------
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>361</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:           DoIPGeneral
        Container Type: Container
        Sub-Containers: DoIPGetGidCallback
                        DoIPPowerModeCallback
                        DoIPTriggerGidSyncCallback
        Description:    This container specifies the general configuration parameters of the DoIP module.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>362</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPConfigSet
        Container Type:     Container
        Sub-Containers:     DoIPInterface
        Description:        This container contains the configuration parameters and sub containers of the
                            AUTOSAR DoIP module.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>363</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPDevelopmentErrorDetect
        Parameter Type:     Boolean
        Parent Containers:  DoIPGeneral,
        Description:        Switches the development error detection and notification on or off.
        Introduction:       * true: detection and notification is enabled.
                            * false: detection and notification is disabled.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>364</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00005</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPVersionInfoApi
        Parameter Type:     Boolean
        Parent Containers:  DoIPGeneral,
        Description:        Activates the DoIP_GetVersionInfo() API.
        Introduction:       TRUE: Enables the DoIP_GetVersionInfo() API.
                            FALSE: DoIP_GetVersionInfo() API is not included.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>365</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPMainFunctionPeriod
        Parameter Type:     FloatValue
        Parent Containers:  DoIPGeneral,
        Description:        Determines the frequency at which the DoIP_MainFunction() is called in [s].
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value: INF
        Min-Value: 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>366</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00007</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPVehicleAnnouncementInterval
        Parameter Type:     FloatValue
        Parent Containers:  DoIPInterface,
        Description:        Time to wait in [s] for sending subsequent vehicle anouncement messages.
                            Represents parameter A_DoIP_Announce_Interval of ISO 13400-2:2012
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope:  LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>367</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00008</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPInitialVehicleAnnouncementTime
        Parameter Type:     FloatValue
        Parent Containers:  DoIPInterface,
        Description:        Time to wait in [s] for sending first vehicle anouncement message after
                            IP address assignment. Represents parameter A_DoIP_Announce_Wait of
                            ISO 13400-2:2012.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:  LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>368</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00009</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPAliveCheckResponseTimeout
        Parameter Type:     FloatValue
        Parent Containers:  DoIPInterface,
        Description:        Timeout in [s] for waiting for a response to an Alive Check request before the
                            connection is considered to be disconnected. Represents parameter T_TCP_AliveCheck
                            of ISO 13400-2:2012.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:  false
        Max-Value:            INF
        Min-Value:            0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>369</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00010</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPInitialInactivityTime
        Parameter Type:     FloatValue
        Parent Containers:  DoIPInterface,
        Description:        Timeout in [s] used for initial inactivity of a connected TCP socket connection
                            directly after socket connection. Represents parameter T_TCP_Initial_Inactivity
                            of ISO 13400-2:2012
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 INF
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>370</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00012</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPMaxTesterConnections
        Parameter Type:     Integer
        Parent Containers:  DoIPInterface,
        Description:        Maximum amount of tester connections that shall be maintained at one time
                            before alive check is performed.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 255
        Min-Value:                 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>371</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00013</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPUseMacAddressForIdentification
        Parameter Type:     Boolean
        Parent Containers:  DoIPInterface,
        Description:        Provided the information if a configured EID at vehicle identification response/
                            vehicle announcement is used or the MAC address.
        Introduction:       TRUE: Use MAC Address instead of EID for Vehicle identification/announcement.
        FALSE: Use configured EID for vehicle identification/announcement. Dependencies: DoIPEID
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>372</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00014</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPEid
        Parameter Type:     Integer
        Parent Containers:  DoIPConfigSet,
        Description:        Configured EID (Entity ID of) for vehicle identification/vehicle announcement.
                            Only necessary if DoIPUseMacAddressForIdentification is set to FALSE.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity:  true
        Post-Build-Variant-Value:         true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class:        LINK, VARIANT-LINK-TIME
        Value-Configuration Class:        POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class:        PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:              false
        Max-Value:                        281474976710655
        Min-Value:                        0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DoIPEid</srcid><srcstatus/><internalId>521</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>373</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00015</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPGid
        Parameter Type:     Integer
        Parent Containers:  DoIPConfigSet,
        Description:        Configured GID (Group ID of) for vehicle identification/vehicle announcement.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity:  true
        Post-Build-Variant-Value:         true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class:        LINK, VARIANT-LINK-TIME
        Value-Configuration Class:        POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class:        PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:              false
        Max-Value:                        281474976710655
        Min-Value:                        0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>374</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00016</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPUseVehicleIdentificationSyncStatus
        Parameter Type:     Boolean
        Parent Containers:  DoIPInterface,
        Description:        Defines if the optional VIN/GID synchronization status is used additionally
                            in the vehicle identification/announcement.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>375</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00017</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPVinGidMaster
        Parameter Type:     Boolean
        Parent Containers:  DoIPGeneral,
        Description:        Specifies if the DoIP entity is the Vehicle identification Master for the
                            GID (Group ID)
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>376</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00018</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPUseEIDasGID
        Parameter Type:     Boolean
        Parent Containers:  DoIPGeneral,
        Description:        Specifies if the DoIP entity shall use its EID if it is the Master for vehicle
                            identification gid on the vehicle identification/vehicle announcement.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DoIPUseEIDasGID</srcid><srcstatus/><internalId>522</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>377</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00019</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPMaxRequestBytes
        Parameter Type:     Integer
        Parent Containers:  DoIPGeneral,
        Description:        Specifies the maximum allowed bytes of a DoIP message request without the DoIP
                            header.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 18446744073709551615
        Min-Value:                 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>378</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00020</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPLogicalAddress
        Parameter Type:     Integer
        Parent Containers:  DoIPConfigSet,
        Description:        Describes the logical address of the DoIP entity, i.e. the LA that will route
                            diagnostic requests to the Dcm of the DoIP entity.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 65535
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>379</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00021</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPNodeType
        Parameter Type:     Enumeration
        Parent Containers:  DoIPGeneral,
        Description:        Describes the Type of the DoIP node.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Enumeration Literal:       DOIP_GATEWAY, AUTOSAR_ECUC
        Enumeration Literal:       DOIP_NODE, AUTOSAR_ECUC
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>380</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00023</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPPowerModeCallback
        Container Type:     Sub-Container
        Parent Containers:  DoIPGeneral,
        Description:        This container describes the usage of a callback function to retrieve the
                            current power mode. This container shall always be present.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>381</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00024</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPGetGidCallback
        Container Type:     Sub-Container
        Parent Containers:  DoIPGeneral,
        Description:        This container describes the usage of a callback function to get the GID.
                            (If this container is not present no callback function shall be used by DoIP
                            module to retrive the GID.)
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>382</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00025</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPTriggerGidSyncCallback
        Container Type:     Sub-Container
        Parent Containers:  DoIPGeneral,
        Description:        This container describes the usage of a callback function to trigger the GID
                            synchronization. (If this container does not exist no callback function
                            shall be used by DoIP module to trigger the GID synchronization.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>383</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00027</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPPowerModeDirect
        Parameter Type:     FunctionRef
        Parent Containers:  DoIPPowerModeCallback,
        Description:        If the DoIPPowerModeDirect parameter exist the DoIP module shall call the
                            configured callback function (&lt;User&gt;_DoIPGetPowerModeCallback) direct.
                            (It is not needed to specify a service port to the DoIP service component.)
        Introduction:       If the DoIPPowerModeDirect parameter does NOT present the DoIP module shall
                            use a RPort with a CallbackGetPowerMode type of client-server port interface
                            to retrive the current power mode.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity:  false
        Post-Build-Variant-Value:         false
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: LINK, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class:        LINK, VARIANT-LINK-TIME
        Value-Configuration Class:        LINK, VARIANT-POST-BUILD
        Value-Configuration Class:        PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:              false
        FunctionName Def Condition:       Max-Length: , Min-Length
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>384</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00028</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPGetGidDirect
        Parameter Type:     FunctionRef
        Parent Containers:  DoIPGetGidCallback,
        Description:        If the DoIPGetGidDirect parameter exist the DoIP module shall call the configured
                            callback function (&lt;User&gt;_DoIPGetGID) direct. (It is not needed to
                            specify a service port to the DoIP service component.
        Introduction:       If the DoIPGetGidDirect parameter does NOT exist the DoIP module shall use a
                            RPort with a CallbackGetGID type of client-server port interface to retrive the GID.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity:  false
        Post-Build-Variant-Value:         false
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: LINK, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class:        LINK, VARIANT-LINK-TIME
        Value-Configuration Class:        LINK, VARIANT-POST-BUILD
        Value-Configuration Class:        PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:              false
        FunctionName Def Condition:       Max-Length: , Min-Length
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>385</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00029</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPTriggerGidSyncDirect
        Parameter Type:     FunctionRef
        Parent Containers:  DoIPTriggerGidSyncCallback,
        Description:        If the DoIPTriggerGidSyncDirect parameter exist the DoIP module shall call the
                            configured callback function (&lt;User&gt;_DoIPTriggerGidSyncCallback) direct.
                            (It is not needed to specify a service port to the DoIP service component.)
        Introduction:       If the DoIPTriggerGidSyncDirect parameter does NOT present the DoIP module shall
                            use a RPort with a CallbackTriggerGIDSynchnonization type of client-server port
                            interface to trigger the GID synchronization.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity:  false
        Post-Build-Variant-Value:         false
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: LINK, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class:        LINK, VARIANT-LINK-TIME
        Value-Configuration Class:        LINK, VARIANT-POST-BUILD
        Value-Configuration Class:        PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:              false
        FunctionName Def Condition:       Max-Length: , Min-Length
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>386</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00030</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPRoutingActivation
        Container Type:     Sub-Container
        Parent Containers:  DoIPInterface,
        Sub-Containers:     DoIPRoutingActivationAuthenticationCallback
                            DoIPRoutingActivationConfirmationCallback
        Description:        This container describes the routing activation possibilities by representing for
                            each container a possible routing activation request message to the DoIP entity and the
                            according references to the activated diagnostic messages.
        Lower Multiplicity: 0
        Upper Multiplicity: 255
        Post-Build-Variant-Multiplicity: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>387</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00031</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPTester
        Container Type:     Sub-Container
        Parent Containers:  DoIPInterface,
        Description:        This container describes the properties of the possible connectable Tester
                            for the DoIP entity.
        Lower Multiplicity: 1
        Upper Multiplicity: 255
        Post-Build-Variant-Multiplicity: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>388</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00032</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPConnections
        Container Type:     Sub-Container
        Parent Containers:  DoIPInterface,
        Sub-Containers:     DoIPTargetAddress
                            DoIPTcpConnection
                            DoIPUdpConnection
                            DoIPUdpVehicleAnnouncementConnection
        Description:        Container contains all lower layer connection specific information, i.e. the
                            single Pdu References and Handle IDs to the SoAd.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Post-Build-Variant-Multiplicity: false

        Included Containers:
        ---------------------------------------------------------------------------------------------
        |     Container Name      | Multiplicity |                  Scope / Dependency              |
        ---------------------------------------------------------------------------------------------
        |    DoIPTargetAddress    |   1..65535   | This container describes a possible TargetAddress|
        |                         |              | that is supported by DoIP.                       |
        ---------------------------------------------------------------------------------------------
        |    DoIPTcpConnection    |    2..255    | This container describes a Tcp connection to the |
        |                         |              | lower layer SoAd module.                         |
        ---------------------------------------------------------------------------------------------
        |    DoIPUdpConnection    |    1..255    | This Container describes the Udp connection to   |
        |                         |              | the lower layer SoAd module.                     |
        ---------------------------------------------------------------------------------------------
        |DoIPUdpVehicle           |              | This container describes the UDP multicast       |
        |AnnouncementConnection   |    0..255    | connections to the lower layer SoAd module.      |
        ---------------------------------------------------------------------------------------------
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP.xdm.m4_767</srcid><srcstatus/><internalId>605</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/DoIP.xdm.m4_783</srcid><srcstatus/><internalId>606</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest10004_DoIPTargetAddressRef_257</srcid><srcstatus/><internalId>1322</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>389</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00033</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPRoutingActivationNumber
        Parameter Type:     Integer
        Parent Containers:  DoIPRoutingActivation,
        Description:        Identifies the Routing activation Number which is received for a DoIP routing
                            activation request message.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value: 255
        Min-Value: 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>390</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00034</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPTargetAddressRef
        Parameter Type:     Reference
        Parent Containers:  DoIPRoutingActivation,
        Description:        Reference to all DoIPTargetAddress which are activated on this Routing activation.
        Lower Multiplicity: 1
        Upper Multiplicity: 65535
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity:  true
        Post-Build-Variant-Value:         true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class:        LINK, VARIANT-LINK-TIME
        Value-Configuration Class:        POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class:        PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/DoIP/DoIPConfigSet/DoIPInterface/DoIPConnections/DoIPTargetAddress
        Destination type:   ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        Lower multiplicity has been changed to 0 due to introduction of of automatic routing activation.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest10004_DoIPTargetAddressRef_257</srcid><srcstatus/><internalId>1322</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>391</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00036</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPRoutingActivationConfirmationFunc
        Parameter Type:     FunctionRef
        Parent Containers:  DoIPRoutingActivationConfirmationCallback,
        Description:        Direct C Callback function to trigger the confirmation function for routing
                            activation. If the DoIPRoutingActivationConfirmationFunc parameter is present
                            the DoIP module will not use an RPort of ServiceInterface
                            &lt;RoutingActivation&gt;_RoutingActivation but call the configured function.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity:  false
        Post-Build-Variant-Value:         false
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: LINK, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class:        LINK, VARIANT-LINK-TIME
        Value-Configuration Class:        LINK, VARIANT-POST-BUILD
        Value-Configuration Class:        PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:              false
        FunctionName Def Condition:       Max-Length: , Min-Length
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>392</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00039</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPRoutingActivationAuthenticationFunc
        Parameter Type:     FunctionRef
        Parent Containers:  DoIPRoutingActivationAuthenticationCallback,
        Description:        Direct C Callback function to trigger the authentication function for routing
                            activation. If the DoIPRoutingActivationAuthenticationFunc parameter is present,
                            the DoIP module will not use an RPort of ServiceInterface
                            &lt;RoutingActivation&gt;_RoutingActivation but call the configured function.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity:  false
        Post-Build-Variant-Value:         false
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: LINK, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class:        LINK, VARIANT-LINK-TIME
        Value-Configuration Class:        LINK, VARIANT-POST-BUILD
        Value-Configuration Class:        PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:              false
        FunctionName Def Condition:       Max-Length: , Min-Length
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>393</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00042</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPNumByteDiagAckNack
        Parameter Type:     Integer
        Parent Containers:  DoIPTester,
        Description:        Specifies the number of original Diagnostic request bytes the DoIP entity
                            responses on a NACK of a diagnostic response message to the Tester.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 4294967295
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>394</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00043</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPTesterSA
        Parameter Type:     Integer
        Parent Containers:  DoIPTester,
        Description:        Source Address of the Tester sent via routing activation or diagnostic message.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 65535
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>395</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00045</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPTcpConnection
        Container Type:     Sub-Container
        Parent Containers:  DoIPConnections,
        Sub-Containers:     DoIPSoAdTcpRxPdu
                            DoIPSoAdTcpTxPdu
        Description:        This container describes a TCP connection to the lower layer SoAd module.
        Lower Multiplicity: 2
        Upper Multiplicity: 255
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>396</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00046</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPSoAdUdpRxPdu
        Container Type:     Sub-Container
        Parent Containers:  DoIPUdpConnection,
        Description:        This container describes a Rx PDU received via SoAd over UDP.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>397</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00047</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPSoAdUdpTxPdu
        Container Type:     Sub-Container
        Parent Containers:  DoIPUdpConnection,
        Description:        This container describes a Tx PDU sent via SoAd over UDP.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>398</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00048</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPSoAdUdpRxPduId
        Parameter Type:     Integer
        Parent Containers:  DoIPSoAdUdpRxPdu,
        Description:        The DoIPSoAdUdpRxPduId is required by the API call DoIP_SoAdIfRxIndication to
                            receive I-PDUs from the SoAd.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              ECU
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       true
        Max-Value:                 65535
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.ConfigClassChanged.HandleID</srcid><srcstatus/><internalId>512</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>399</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00049</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPSoAdUdpRxPduRef
        Parameter Type:     Reference
        Parent Containers:  DoIPSoAdUdpRxPdu,
        Description:        Reference to the "global" Pdu structure to allow harmonization of handle IDs in
                            the COM-Stack.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination:               /AUTOSAR/EcucDefs/EcuC/EcucConfigSet/EcucPduCollection/Pdu
        Destination type:         ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0113.RoutingActivationAuthentication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>682</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>400</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00050</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPSoAdUdpTxPduRef
        Parameter Type:     Reference
        Parent Containers:  DoIPSoAdUdpTxPdu,
        Description:        Reference to the "global" Pdu structure to allow harmonization of handle IDs in
                            the COM-Stack.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination:               /AUTOSAR/EcucDefs/EcuC/EcucConfigSet/EcucPduCollection/Pdu
        Destination type:          ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0109.SWS.GidSync</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>678</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>401</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00051</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPSoAdUdpTxPduId
        Parameter Type:     Integer
        Parent Containers:  DoIPSoAdUdpTxPdu,
        Description:        The DoIPSoAdUdpTxPduId is required by the API call DoIP_SoAdIfTxConfirmation
                            that is called by the SoAd to confirm that the IPdu has been transmitted
                            successfully.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              ECU
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       true
        Max-Value:                 65535
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.ConfigClassChanged.HandleID</srcid><srcstatus/><internalId>512</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>402</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00052</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPUdpConnection
        Container Type:     Sub-Container
        Parent Containers:  DoIPConnections,
        Sub-Containers:     DoIPSoAdUdpRxPdu
                            DoIPSoAdUdpTxPdu
        Description:        This Container describes a Udp connection to the lower layer SoAd module.
        Lower Multiplicity: 1
        Upper Multiplicity: 255
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>403</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00053</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPTargetAddress
        Container Type:     Sub-Container
        Parent Containers:  DoIPConnections,
        Description:        This container describes a possible TargetAddress that is supported by DoIP.
        Lower Multiplicity: 1
        Upper Multiplicity: 65535
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>404</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00054</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPTargetAddressValue
        Parameter Type:     Integer
        Parent Containers:  DoIPTargetAddress,
        Description:        Valid Target Address of a DoIP target address.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 65535
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>405</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00055</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPPduRRxPdu
        Container Type:     Sub-Container
        Parent Containers:  DoIPChannel,
        Description:        This container contains the Rx Pdus to connect with the Rx Pdus of the PduR.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.Channel.RxSide.NotOptional</srcid><srcstatus/><internalId>513</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>406</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00056</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPPduRTxPdu
        Container Type:     Sub-Container
        Parent Containers:  DoIPChannel,
        Description:        This container contains the Tx Pdus to connect with the Tx Pdus of the PduR.
                            If the parameter is not configured the channel is for functional addressing.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>407</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00057</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPPduRRxPduId
        Parameter Type:     Integer
        Parent Containers:  DoIPPduRRxPdu,
        Description:        The DoIPPduRRxPduId is required by the API call DoIP_TpCancelReceive.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              ECU
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       true
        Max-Value:                 65535
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.ConfigClassChanged.HandleID</srcid><srcstatus/><internalId>512</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>408</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00058</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPPduRRxPduRef
        Parameter Type:     Reference
        Parent Containers:  DoIPPduRRxPdu,
        Description:        Reference to the "global" Pdu structure to allow harmonization of handle IDs
                            in the COM-Stack.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination:               /AUTOSAR/EcucDefs/EcuC/EcucConfigSet/EcucPduCollection/Pdu
        Destination type:          ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>409</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00059</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPPduRTxPduRef
        Parameter Type:     Reference
        Parent Containers:  DoIPPduRTxPdu,
        Description:        Reference to the "global" Pdu structure to allow harmonization of handle
                            IDs in the COM-Stack.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination:               /AUTOSAR/EcucDefs/EcuC/EcucConfigSet/EcucPduCollection/Pdu
        Destination type:          ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>410</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00060</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPPduRTxPduId
        Parameter Type:     Integer
        Parent Containers:  DoIPPduRTxPdu,
        Description:        The DoIPPduRTxPduId is required by DoIP_TpTransmit or DoIP_IfTransmit and
                            DoIP_TpCancelTransmit.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              ECU
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       true
        Max-Value:                 65535
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.ConfigClassChanged.HandleID</srcid><srcstatus/><internalId>512</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>411</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00062</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPRoutingActivationRef
        Parameter Type:     Reference
        Parent Containers:  DoIPTester
        Description:        Reference to a DoIPRoutingActivation describing the possible routing activations
                            of the DoIPTester
        Lower Multiplicity: 1
        Upper Multiplicity: 255
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity:  true
        Post-Build-Variant-Value:         true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class:        LINK, VARIANT-LINK-TIME
        Value-Configuration Class:        POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class:        PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination:      /AUTOSAR/EcucDefs/DoIP/DoIPConfigSet/DoIPInterface/DoIPRoutingActivation
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        Lower multiplicity has been changed to 0 due to introduction of automatic routing activation.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.LowerMultiplicity_0</srcid><srcstatus/><internalId>494</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.ECUC_DoIP_00062_Conf</srcid><srcstatus/><internalId>57</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>412</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00064</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPEntityStatusMaxByteFieldUse
        Parameter Type:     Boolean
        Parent Containers:  DoIPGeneral,
        Description:        This parameter is used to distinguish the optional support of the Max data
                            size element of a diagnostic entity status response.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>413</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00065</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPGIDInvalidityPattern
        Parameter Type:     Integer
        Parent Containers:  DoIPGeneral,
        Description:        Specifies the Byte pattern that is used for response messages if no valid GID
                            could be retrieved.
        Introduction:       Only the value '0' or '255' is allowed"
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 255
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>414</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00066</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPVinInvalidityPattern
        Parameter Type:     Integer
        Parent Containers:  DoIPGeneral,
        Description:        Specifies the Byte pattern that is used for response messages if no valid VIN
                            could be retrieved.
        Introduction:       Only the value '0' or '255' is allowed"
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 255
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.VinInvalidityPattern.0..255</srcid><srcstatus/><internalId>515</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>415</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00067</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPDhcpOptionVinUse
        Parameter Type:     Boolean
        Parent Containers:  DoIPGeneral,
        Description:        If DoIPDhcpOptionVinUse is set to true the DoIP module will add the VIN to the
                            Dhcp host name if no valid Dhcp host name is already set.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0102.DhcpHostNameOption</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>671</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>416</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00068</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPGeneralInactivityTime
        Parameter Type:     FloatValue
        Parent Containers:  DoIPInterface,
        Description:        Timeout in [s] for maximum inactivity of a TCP socket connection before
                            the DoIP module will close the according socket connection. Represents parameter
                            T_TCP_General_Inactivity of ISO 13400-2:2012
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 INF
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>417</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00069</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPChannel
        Container Type:     Sub-Container
        Parent Containers:  DoIPInterface,
        Sub-Containers:     DoIPPduRRxPdu
                            DoIPPduRTxPdu
        Description:        Configuration of one DoIPChannel.
        Lower Multiplicity: 1
        Upper Multiplicity: 65536
        Post-Build-Variant-Multiplicity: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>418</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00070</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPChannelSARef
        Parameter Type:     Reference
        Parent Containers:  DoIPChannel,
        Description:        Reference to the DoIPTester.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Destination:      /AUTOSAR/EcucDefs/DoIP/DoIPConfigSet/DoIPInterface/DoIPTester
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>419</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00071</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPChannelTARef
        Parameter Type:     Reference
        Parent Containers:  DoIPChannel,
        Description:        Reference to the target address.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Destination:      /AUTOSAR/EcucDefs/DoIP/DoIPConfigSet/DoIPInterface/DoIPConnections/DoIPTargetAddress
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>420</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00073</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPHostNameSizeMax
        Parameter Type:     Integer
        Parent Containers:  DoIPGeneral,
        Description:        Maximum Size of the DHCP HostName in ASCII. This parameter is necessary to
                            reserve the correct amount of bytes for working with the DHCP HostName option.
                            Minimum range is 5 because Dhcp Host Name should be at least "DoIP-" on any configuration.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 255
        Min-Value:                 5
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>421</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00074</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPMaxUDPRequestPerMessage
        Parameter Type:     Integer
        Parent Containers:  DoIPGeneral,
        Description:        This parameter captures the maximum amount of UDP Requests necessary to handle
                            parallel within a single UDP connection.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 255
        Min-Value:                 1
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DoIPMaxUDPRequestPerMessage</srcid><srcstatus/><internalId>517</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>422</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00075</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPPduType
        Parameter Type:     Enumeration
        Parent Containers:  DoIPPduRTxPdu,
        Description:        API Type to use for communication with PduR. DOIP_IFPDU for UUDT messages,
                            DOIP_TPPDU for all other diagnostic messages.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity:  true
        Post-Build-Variant-Value:         true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class:        LINK, VARIANT-LINK-TIME
        Value-Configuration Class:        POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class:        PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:              false
        Enumeration Literal:              DOIP_IFPDU, AUTOSAR_ECUC
        Enumeration Literal:              DOIP_TPPDU, AUTOSAR_ECUC
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DoIPPduType</srcid><srcstatus/><internalId>518</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>423</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00035</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPRoutingActivationAuthenticationCallback
        Container Type:     Sub-Container
        Parent Containers:  DoIPRoutingActivation,
        Description:        Container describes the Callbackfunction to call on a Routing Activation Request
                            for Authentication. If this container is configured but the
                            DoIPRoutingActivationAuthenticationFunc parameter is not present, the DoIP
                            module will use an RPort of ServiceInterface &lt;RoutingActivation&gt;_RoutingActivation
                            with the name "CB&lt;RoutingActivation&gt;RoutingActivation".
                            &lt;RoutingActivation&gt; is the ShortName of the DoIPRoutingActiviation container.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>424</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00037</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPRoutingActivationConfirmationReqLength
        Parameter Type:     Integer
        Parent Containers:  DoIPRoutingActivationConfirmationCallback,
        Description:        Describes the amount of bytes used to handle to the confirmation function on
                            routing activation. If 0 is configured as length the parameter ConfirmedReqData
                            will not be handled to the API.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: LINK, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 4
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>425</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00038</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPRoutingActivationConfirmationResLength
        Parameter Type:     Integer
        Parent Containers:  DoIPRoutingActivationConfirmationCallback,
        Description:        Describes the amount of bytes used to read by the confirmation function on routing
                            activation. If 0 is configured as length the parameter ConfirmedResData will
                            not be fetched via the API.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: LINK, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 4
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>426</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00040</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPRoutingActivationAuthenticationReqLength
        Parameter Type:     Integer
        Parent Containers:  DoIPRoutingActivationAuthenticationCallback,
        Description:        Describes the amount of bytes used to handle to the authentication function on
                            routing activation. If 0 is configured as length the parameter AuthenticationReqData
                            will not be handled to the API.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: LINK, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 4
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>427</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00041</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPRoutingActivationAuthenticationResLength
        Parameter Type:     Integer
        Parent Containers:  DoIPRoutingActivationAuthenticationCallback,
        Description:        Describes the amount of bytes used to read by the authentication function on
                            routing activation. If 0 is configured as length the parameter AuthenticationResData
                            will not be fetched via the API.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: LINK, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 4
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>428</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00061</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPRoutingActivationConfirmationCallback
        Container Type:     Sub-Container
        Parent Containers:  DoIPRoutingActivation,
        Description:        Container describes the Callbackfunction to call on a Routing Activation Request
                            for Confirmation. If this container is configured but the
                            DoIPRoutingActivationConfirmationFunc parameter is not present the DoIP module
                            will use an RPort of ServiceInterface &lt; RoutingActivation&gt;_RoutingActivation
                            with the name "CB&lt;RoutingActivation&gt;RoutingActivation".
                            &lt;RoutingActivation&gt; is the ShortName of the DoIPRoutingActiviation container.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>429</internalId></specobject>

    <specobject>
      <id>DoIP.SWS_DoIP_00278</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Service Name:       DoIP_IfCancelTransmit
        Syntax:             Std_ReturnType DoIP_IfCancelTransmit (PduIdType TxPduId)
        Service ID [hex]:   0x4a
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in):    TxPduId     Identification of the PDU to be cancelled.
        Parameters (inout): None
        Parameters (out):   None
        Return value:       Std_ReturnType      E_OK:     Cancellation was executed successfully by the destination
                                                          module.
                                                E_NOT_OK: Cancellation was rejected by the destination module.
        Description:        Requests cancellation of an ongoing transmission of a PDU in a lower layer
                            communication module.
        Available via:      DoIP.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.DoIP_IfCancelTransmit</srcid><srcstatus/><internalId>519</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>430</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00076</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPUdpVehicleAnnouncementConnection
        Container Type:     Sub-Container
        Parent Containers:  DoIPConnections,
        Sub-Containers:     DoIPSoAdUdpVehicleAnnouncementTxPdu
        Description:        This container describes the UDP multicast connections to the lower layer
                            SoAd module.
        Lower Multiplicity: 0
        Upper Multiplicity: 255
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>431</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00077</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPSoAdUdpVehicleAnnouncementTxPdu
        Container Type:     Sub-Container
        Parent Containers:  DoIPUdpVehicleAnnouncementConnection,
        Description:        This container describes the vehicle announcement TxPdu sent via the SoAd.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>432</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00078</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPSoAdUdpVehicleAnnouncementTxPduId
        Parameter Type:     Integer
        Parent Containers:  DoIPSoAdUdpVehicleAnnouncementTxPdu,
        Description:        The DoIPSoAdUdpVehicleAnnouncementTxPduId is required by the API call
                            DoIP_SoAdIfTxConfirmation() that is called by the SoAd to confirm that
                            the IPdu has been transmitted successfully.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              ECU
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       true
        Max-Value:                 4294967295
        Min-Value:                 0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.ConfigClassChanged.HandleID</srcid><srcstatus/><internalId>512</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>433</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00079</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPSoAdUdpVehicleAnnouncementTxPduRef
        Parameter Type:     Reference
        Parent Containers:  DoIPSoAdUdpVehicleAnnouncementTxPdu,
        Description:        Reference to the "global" PDU structure to allow harmonization of handle
                            IDs in the COM-Stack.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination:               /AUTOSAR/EcucDefs/EcuC/EcucConfigSet/EcucPduCollection/Pdu
        Destination type:          ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>434</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00080</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPSoAdTcpRxPdu
        Container Type:     Sub-Container
        Parent Containers:  DoIPTcpConnection,
        Description:        This container describes a Rx PDU received via SoAd over TCP
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>435</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00081</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPSoAdTcpTxPdu
        Container Type:     Sub-Container
        Parent Containers:  DoIPTcpConnection,
        Description:        This container describes a Tx PDU sent via SoAd over TCP
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>436</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00082</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPSoAdTcpRxPduId
        Parameter Type:     Integer
        Parent Containers:  DoIPSoAdTcpRxPdu,
        Description:        The DoIPSoAdTcpRxPduId is required by the API call DoIP_SoAdTpRxIndication
                            to receive I-PDUs from the SoAd.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              ECU
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       true
        Max-Value:                 65535
        Min-Value:                 0
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.ConfigClassChanged.HandleID</srcid><srcstatus/><internalId>512</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>437</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00083</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPSoAdTcpRxPduRef
        Parameter Type:     Reference
        Parent Containers:  DoIPSoAdTcpRxPdu,
        Description:        Reference to the "global" Pdu structure to allow harmonization of handle IDs
                            in the COM-Stack.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination:               /AUTOSAR/EcucDefs/EcuC/EcucConfigSet/EcucPduCollection/Pdu
        Destination type:          ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>438</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00084</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPSoAdTcpTxPduRef
        Parameter Type:     Reference
        Parent Containers:  DoIPSoAdTcpTxPdu,
        Description:        Reference to the "global" Pdu structure to allow harmonization of handle IDs
                            in the COM-Stack.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination:               /AUTOSAR/EcucDefs/EcuC/EcucConfigSet/EcucPduCollection/Pdu
        Destination type:          ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>439</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00085</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPSoAdTcpTxPduId
        Parameter Type:     Integer
        Parent Containers:  DoIPSoAdTcpTxPdu,
        Description:        The DoIPSoAdTcpTxPduId is required by the API call DoIP_SoAdTpTxConfirmation
                            that is called by the SoAd to confirm that the IPdu has been transmitted successfully.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              ECU
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       true
        Max-Value:                 65535
        Min-Value:                 0
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.ConfigClassChanged.HandleID</srcid><srcstatus/><internalId>512</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>440</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00092</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPFurtherActionByteCallback
        Container Type:     Sub-Container
        Parent Containers:  DoIPInterface,
        Description:        This container describes the Callbackfunction to get the Further Action byte.
                            This container shall always be present. If the DoIPFurtherActionByteDirect
                            parameter is not present, the DoIP module will use an RPort of ServiceInterface
                            CallbackGetFurtherActionByte with the name
                            "CBGetFurtherActionByte_&lt;shortname of enclosing DoIPInterface container&gt;".
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.FurtherActionByteCallback</srcid><srcstatus/><internalId>520</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>441</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00093</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPFurtherActionByteDirect
        Parameter Type:     FunctionRef
        Parent Containers:  DoIPFurtherActionByteCallback,
        Description:        Direct C Callback function to get the OEM specific Further Action Byte for
                            the DoIP vehicle identification response/vehicle announcement. If the
                            DoIPFurtherActionByteDirect parameter is present, the DoIP module will not
                            use an RPort of ServiceInterface "CBGetFurtherActionByte" but will call
                            the configured function.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: LINK, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        FunctionName Def Condition:Max-Length: , Min-Length
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.FurtherActionByteCallback</srcid><srcstatus/><internalId>520</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>442</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00094</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPVehicleAnnouncementCount
        Parameter Type:     Integer
        Parent Containers:  DoIPInterface,
        Description:        Number of vehicle announcement messages on IP address assignment.
                            Represents parameter A_DoIP_Announce_Num of ISO 13400-2:2012.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Max-Value:                 255
        Min-Value:                 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>443</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00095</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPRequestAddressAssignment
        Parameter Type:     Boolean
        Parent Containers:  DoIPTcpConnection
        Description:        The DoIP module shall request IP address assignment by calling
                            SoAd_RequestIpAddrAssignment() for the TcpIpLocalAddr related to this DoIpConnection.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>444</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00096</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:                DoIPRoutingActivationSecurityRequired
        Parameter Type:      Boolean
        Parent Containers:   DoIPRoutingActivation,
        Description:         Indicates if a routing activation requires a secure TCP connection.
        Lower Multiplicity:  0
        Upper Multiplicity:  1
        Scope:               LOCAL
        Origin:              AUTOSAR_ECUC
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Lower multiplicity changed to 1, i.e. parameter not optional.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR R19-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP.xdm.m4_1440</srcid><srcstatus/><internalId>609</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.SecurityParam.NotOptional</srcid><srcstatus/><internalId>507</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.SecureConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>694</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>445</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00097</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:                DoIPTcpConnectionSecurityRequired
        Parameter Type:      Boolean
        Parent Containers:   DoIPTcpConnection,
        Description:         Indicates if the associated TCP socket uses a secure connection (e.g. TLS).
        Lower Multiplicity:  0
        Upper Multiplicity:  1
        Scope:               LOCAL
        Origin:              AUTOSAR_ECUC
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Lower multiplicity changed to 1, i.e. parameter not optional.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR R19-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP.xdm.m4_879</srcid><srcstatus/><internalId>608</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.SecurityParam.NotOptional</srcid><srcstatus/><internalId>507</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.SecureConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>694</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>446</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00098</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPInterfaceId
        Parameter Type:     Integer
        Parent Containers:  DoIPInterface,
        Description:        This parameter is an identifier of the DoIPInterface. The value of this
                            parameter will be assigned to the symbolic name derived from the container
                            short name.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Post-Build-Variant-Value:        false
        Value-Configuration Class:       PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class:       PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class:       PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:             true
        Max-Value:                       255
        Min-Value:                       0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>447</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00099</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPInterfaceAnnouncementStart
        Parameter Type:     Enumeration
        Parent Containers:  DoIPInterface,
        Description:        This attribute defines, when vehicle announcement is started on a
                            DoIPInterface Introduction:
                             * Automatic: As soon as the underlying UDP vehicle announcement connection
                                          switches to SOAD_SOCON_ONLINE
                             * OnTrigger: As soon as the API DoIP_TriggerVehicleAnnouncement is called for
                                          the given DoIPInterface instance
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Range:                     DOIP_AUTOMATIC_ANNOUNCE
                                   DOIP_ONTRIGGER_ANNOUNCE
        Enumeration Literal:       DOIP_AUTOMATIC_ANNOUNCE
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP.xdm.m4_323</srcid><srcstatus/><internalId>604</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.TriggerAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>705</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>448</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00100</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPInterface
        Container Type:     Sub-Container
        Parent Containers:  DoIPConfigSet,
        Sub-Containers:     DoIPChannel
                            DoIPConnections
                            DoIPFurtherActionByteCallback
                            DoIPRoutingActivation
                            DoIPTester
        Description:        This container defines a logical IP interface and collects properties to
                            configure this interface.
        Lower Multiplicity: 1
        Upper Multiplicity: 255
        Post-Build-Variant-Multiplicity: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0137.Interfaces</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>706</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>449</internalId></specobject>

    <specobject>
      <id>DoIP.ECUC_DoIP_00101</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPInterfaceActLineCtrl
        Parameter Type:     Boolean
        Parent Containers:  DoIPInterface,
        Description:        This attribute defines whether the network interface
        Introduction:       * is started "on-demand" when an activation line is sensed (TRUE) or
                            * is always available (FALSE)
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
        Post-Build-Variant-Multiplicity: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>450</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>DoIP.ASR_R21-11.SWS_DoIP_00358</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R21-11</source>
      <version>1</version>
      <description>
        If a connection needs to be reset based on DoIP specific behaviour and DoIP Activation Line
        status is DOIP_ACTIVATION_LINE_ACTIVE, the DoIP module shall call the function
        SoAd_CloseSoCon with the parameter abort set to TRUE and the SoConId determined by a call
        to the function SoAd_GetSoConId for the corresponding DoIPSoAdTcpTxPdu.
        Additionally, the inactivity timer shall be stopped.
        (SRS_Eth_00081, SRS_Eth_00028, SRS_Eth_00083)
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02002_Transition_ActiveToInactive</srcid><srcstatus/><internalId>1054</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02003_SoConModeChg_OFFLINE</srcid><srcstatus/><internalId>1055</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02007_InactivityTimer</srcid><srcstatus/><internalId>1059</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02012_ResetInactiveLine</srcid><srcstatus/><internalId>1064</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09022_AliveCheckTimer_Expired</srcid><srcstatus/><internalId>1312</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.ASR_R21-11.SWS_DoIP_00115</srcid><srcstatus/><internalId>452</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R21-11.SWS_DoIP_00144</srcid><srcstatus/><internalId>453</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R21-11.SWS_DoIP_00146</srcid><srcstatus/><internalId>454</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R21-11.SWS_DoIP_00140</srcid><srcstatus/><internalId>455</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R21-11.SWS_DoIP_00141</srcid><srcstatus/><internalId>456</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0130.TcpCloseConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>699</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>451</internalId></specobject>
    <specobject>
      <id>DoIP.ASR_R21-11.SWS_DoIP_00115</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R21-11</source>
      <version>1</version>
      <description>
        If a TCP socket connection gets closed (after the DoIP_SoConModeChg was called with
        different mode value than SOAD_SOCON_ONLINE or any other reason described by
        SWS_DoIP_00058 or SWS_DoIP_00358) the DoIP module shall
        - unregister and release the socket connection to the related Tester
        - discard the ongoing diagnostic message processing
        - reset the inactivity timer of the given socket connection.
        (SRS_Eth_00028, SRS_Eth_00081, SRS_Eth_00083)
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02003_SoConModeChg_OFFLINE</srcid><srcstatus/><internalId>1055</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00115</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00358</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0103.InactivityTimeoutForTcp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>672</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>452</internalId></specobject>
    <specobject>
      <id>DoIP.ASR_R21-11.SWS_DoIP_00144</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R21-11</source>
      <version>1</version>
      <description>
        If no Routing Activation request was received on a new opened socket within the configured
        DoIPInitialInactivityTime, the DoIP module shall reset the socket connection as described
        in SWS_DoIP_00358.
        (SRS_Eth_00083)
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02007_InactivityTimer</srcid><srcstatus/><internalId>1059</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15006_InactivityTimer_Expired</srcid><srcstatus/><internalId>1354</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00144</linksto><dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00358</linksto><dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0103.InactivityTimeoutForTcp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>672</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>453</internalId></specobject>
    <specobject>
      <id>DoIP.ASR_R21-11.SWS_DoIP_00146</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R21-11</source>
      <version>1</version>
      <description>
        If the inactivity timer reaches the time configured in DoIPGeneralInactivityTime,
        the according socket connection shall be reset as described in SWS_DoIP_00358.
        (SRS_Eth_00083)
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02007_InactivityTimer</srcid><srcstatus/><internalId>1059</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09022_AliveCheckTimer_Expired</srcid><srcstatus/><internalId>1312</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00146</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0103.InactivityTimeoutForTcp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>672</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00358</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>454</internalId></specobject>
    <specobject>
      <id>DoIP.ASR_R21-11.SWS_DoIP_00140</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R21-11</source>
      <version>1</version>
      <description>
        After sending an alive check request the DoIP module shall wait the configured time
        DoIPAliveCheckResponseTimeout to receive a valid alive check response as described in
        chapter 7.3.2.4.2. If it does not receive an alive check response, the socket connection
        on which the alive check request was sent shall be reset as described in SWS_DoIP_00358.
        (SRS_Eth_00083)
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09006_SingleAndAllAliveCheck_NoResponse</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09008_AliveCheckTimer</srcid><srcstatus/><internalId>1298</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest10002_AliveCheckTimer</srcid><srcstatus/><internalId>1320</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00140</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00358</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>455</internalId></specobject>
    <specobject>
      <id>DoIP.ASR_R21-11.SWS_DoIP_00141</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R21-11</source>
      <version>1</version>
      <description>
        If the received Alive check response field "SourceAddress" matches the registered
        Source Address of the socket connection the response was received on, the DoIP module shall
        do nothing. Otherwise it shall reset the socket connection as described in SWS_DoIP_00358.
        (SRS_Eth_00083)
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.AliveCheckResp.ConnUnregistered</srcid><srcstatus/><internalId>78</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00358</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>456</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>DoIP.ASR_R23-11.SWS_DoIP_00074</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R23-11</source>
      <version>1</version>
      <description>
        The "EID" of a vehicle identification response/vehicle announcement message shall contain the
        MAC address derived by Soad_GetPhysAddr if the configuration parameter
        DoIPUseMacAddressForIdentification is set to true.
      </description>
      <releases>
        <release>AUTOSAR R23-11</release>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05023_VehicleIdentificationRequestMAC</srcid><srcstatus/><internalId>1236</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00074</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>457</internalId></specobject>

    <specobject>
      <id>DoIP.ASR_R23-11.SWS_DoIP_00075</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R23-11</source>
      <version>1</version>
      <description>
        The "EID" of a vehicle identification response/vehicle announcement message of a DoIPInterface
        shall contain the configured DoIPEid if the corresponding configuration parameter
        DoIPUseMacAddressForIdentification is set to false.
      </description>
      <releases>
        <release>AUTOSAR R23-11</release>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03005_VehicleIdentificationRequest</srcid><srcstatus/><internalId>1073</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05001_VIR_VIN_UserGetVin_Match</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00075</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>458</internalId></specobject>

    <specobject>
      <id>DoIP.ASR_R23-11.SWS_DoIP_00077</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R23-11</source>
      <version>1</version>
      <description>
        The "GID" of a vehicle identification response/vehicle announcement message shall contain
        the same value as the EID used in the interface referenced by DoIPUseEidAsGidRef.
      </description>
      <comment>
        To use EID as GID, parameter DoIPUseEidAsGidRef must be enabled.
      </comment>
      <releases>
        <release>AUTOSAR R23-11</release>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AUTOSAR_GID_Sync</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00077</srcid><srcstatus/><internalId>64</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>459</internalId></specobject>

    <specobject>
      <id>DoIP.ASR_R23-11.SWS_DoIP_00078</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R23-11</source>
      <version>1</version>
      <description>
        The "GID" of a vehicle identification response/vehicle announcement message shall contain the
        configured DoIPGID value, if the configuration parameter DoIPVinGidMaster is set to true, the
        configuration reference DoIPUseEidAsGidRef is disabled.
      </description>
      <releases>
        <release>AUTOSAR R23-11</release>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.DoIP.AUTOSAR_GID_Sync</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00078</srcid><srcstatus/><internalId>65</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0121.VehicleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>460</internalId></specobject>

    <specobject>
      <id>DoIP.ASR_R23-11.ECUC_DoIP_00014</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <version>1</version>
      <description>
        Name:               DoIPEid
        Parameter Type:     Integer
        Parent Containers:  DoIPInterface
        Description:        Configured EID (Entity ID of) for vehicle identification/vehicle announcement.
                            Only necessary if DoIPUseMacAddressForIdentification is set to FALSE.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity:  true
        Post-Build-Variant-Value:         true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class:        LINK, VARIANT-LINK-TIME
        Value-Configuration Class:        POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class:        PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:              false
        Max-Value:                        281474976710655
        Min-Value:                        0
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R23-11</release>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0106.StaticEidGid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>675</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>461</internalId></specobject>

    <specobject>
      <id>DoIP.ASR_R23-11.ECUC_DoIP_00106</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R23-11</source>
      <version>1</version>
      <description>
        Name:               DoIPUseEidAsGidRef
        Parameter Type:     Reference to DoIPInterface
        Parent Containers:  DoIPGeneral
        Description:        Reference to the interface containing the EID which shall be used as GID.
                            Depending on the configuration, the GID is derived either from DoIPEid or
                            from DoIPUseMacAddressForIdentification.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope:              LOCAL
        Origin:             AUTOSAR_ECUC
        Post-Build-Variant-Value:  false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value:       false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R23-11</release>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>462</internalId></specobject>


  </specobjects>
    <specobjects doctype="man">
    <specobject>
      <id>DoIP.EB.Manual.RAM_ROM_ConsumptionMonitoring</id>
      <status>approved</status>
      <source>EB manual test</source>
      <version>1</version>
      <description>
        Test Description:
        Check RAM and ROM consumption of a reference configuration and compare it against the
        limits.

        Test Precondition:

        Test Execution:
        All test steps are required to fulfil DoIP.swdd.ROMMonitoring_RefCfg and
        DoIP.swdd.RAMMonitoring_RefCfg.

        01: Execute conformance test DoIP_ConTest13_ResourceConsumption on a lead platform.
        02: Execute script GetMemoryUsage.sh in tools/ according to the instructions at the top of the script.
        03: VP(): Check the output of the script. If the resource consumption is within limits, the script will return 0
            and 1 if it is not ok. If any of limit is not fulfilled the cause  need to be analyzed and justified.           
        04: Commit the changes to the *.map file and ResourceConsumption.txt in 
            ..\asc_DoIP\test\ts5\Manual\IN\DoIP_ManTest01_ResourceConsumption\.
      </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.swdd.RAMConsumption_RefCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>732</internalId></provcov>
        <provcov>
          <linksto>DoIP.swdd.RAMMonitoring_RefCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>733</internalId></provcov>
        <provcov>
          <linksto>DoIP.swdd.ROMConsumption_RefCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>730</internalId></provcov>
        <provcov>
          <linksto>DoIP.swdd.ROMMonitoring_RefCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>731</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>463</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>DoIP.EB.DBGINST001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Every public API of the module shall have debug instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_DoIP_DBGINST_001</srcid><srcstatus/><internalId>949</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>464</internalId></specobject>

    <specobject>
      <id>DoIP.EB.DBGINST002</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The parameter of a API shall be available in the entry instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_DoIP_DBGINST_001</srcid><srcstatus/><internalId>949</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>465</internalId></specobject>

    <specobject>
      <id>DoIP.EB.DBGINST003</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The parameter of a API shall be available in the exit instrumentation.
        If the API has a return value, the very first parameter of the macro shall contain the expected return value.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_DoIP_DBGINST_001</srcid><srcstatus/><internalId>949</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>466</internalId></specobject>

    <specobject>
      <id>DoIP.EB.DBGINST004</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The default implementation of the debug instrumentation shall be an empty macro.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_DoIP_DBGINST_001</srcid><srcstatus/><internalId>949</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>467</internalId></specobject>

    <specobject>
      <id>DoIP.EB.DBGINST005</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module shall include the header files Base_Dbg.h in order to allow changing the default implementation of the debug instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_DoIP_DBGINST_001</srcid><srcstatus/><internalId>949</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>468</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>DoIP.EB.PBCFGM101</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Service name: DoIP_IsValidConfig
        Syntax: Std_ReturnType DoIP_IsValidConfig( void* ConfigPtr )
        Sync/Async: Synchronous
        Reentrancy: Reentrant
        Parameters (in): ConfigPtr, post build configuration manager
        configuration.
        Parameters (inout): None
        Parameters (out): None
        Return value: Returns E_OK if the DoIP configuration is valid otherwise E_NOT_OK. A
        null pointer is interpreted as invalid configuration.
        Description: This function determines if the DoIP configuration is valid. This
        function can be called also before the DoIP is initialized. No error reporting
        is necessary within this function.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_Test_IsValidConfig</srcid><srcstatus/><internalId>950</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>469</internalId></specobject>

    <specobject>
      <id>DoIP.EB.PBCFGM102</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        A configuration is valid
        - if the platform signature in the post build configuration equals the value
          determined by the macro TS_PlatformSigIsValid.
        - if the link time signature in the post build configuration equals the link time
          signature in the link time configuration file.
        - if the compile time signature in the post build configuration equals the value of
          the macro DOIP_CFG_SIGNATURE.
        - if the compile time signature of Published information in the post build configuration
          equals the value of the macro DOIP_PUBLIC_INFO_SIGNATURE.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_Test_IsValidConfig</srcid><srcstatus/><internalId>950</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>470</internalId></specobject>

    <specobject>
      <id>DoIP.EB.PBCFGM104</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the compile time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          CfgSignature.
        - the DoIP_Cfg.h file shall contain the macro
          DOIP_CFG_SIGNATURE.
        - the MCG shall generate this signature value of compile time parameters. The x-path
          function asc:getConfigSignature(nodeset) shall be used to determine the signature out
          of a list of parameters. The list of compile time parameters shall determined with the
          function asc:getConfigClassNodeList(cassString).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_Test_IsValidConfig</srcid><srcstatus/><internalId>950</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>471</internalId></specobject>

    <specobject>
      <id>DoIP.EB.PBCFGM104_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the compile time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          PublicInfoSignature.
        - the DoIP_Cfg.h file shall contain the macro
          DOIP_PUBLIC_INFO_SIGNATURE.
        - The MCG shall generate this signature value from the list of parameters of
          configuration class 'PublishedInformation' except 'Release'. The XPath function
          asc:getConfigSignature(nodeset) shall be used to determine the signature out of the
          list of parameters. The list of parameters shall be determined with the function
          asc:getConfigClassNodeList(cassString).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_Test_IsValidConfig</srcid><srcstatus/><internalId>950</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>472</internalId></specobject>

    <specobject>
      <id>DoIP.EB.PBCFGM105</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the link time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          LcfgSignature.
        - the link time configuration shall contain the uint32 value
          DoIP_LcfgSignature.
        - the MCG shall generate this signature value of link time parameters. The x-path
          function asc:getConfigSignature(nodeset) shall be used to determine the signature out
          of a list of parameters. The list of link time parameters shall determined with the
          function asc:getConfigClassNodeList(cassString).
      </description>
      <comment>
        See also:
        https://infohub.automotive.elektrobit.com/display/PRJEBTRESOS/PostBuild#PostBuild-Consistencypostbuildconfig
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_Test_IsValidConfig</srcid><srcstatus/><internalId>950</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>473</internalId></specobject>

    <specobject>
      <id>DoIP.EB.PBCFGM106</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For Platform verification:
        - the DoIP post build configuration structure shall contain the value
          uint32 PlatformSignature. This uint32 must be the first value of the post build
          configuration structure to guarantee the correct access not disturbed by any padding
          bytes.
        - the MCG shall generate this signature for the selected target. The generator shall
          use the x-path function asc:getPlatformSignature() to determine this value.
      </description>
      <comment>
        See also:
        https://infohub.automotive.elektrobit.com/display/PRJEBTRESOS/PostBuild#PostBuild-Consistencypostbuildconfig
        https://issue.ebgroup.elektrobit.com/browse/ASCBASE-1485
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_Test_IsValidConfig</srcid><srcstatus/><internalId>950</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>474</internalId></specobject>

    <specobject>
      <id>DoIP.EB.PBCFGM107</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The PbcfgM support shall be enabled or disabled via the macro
        DOIP_PBCFGM_SUPPORT_ENABLED defined in the file
        DoIP_Cfg.h.
        If the PbcfgM configuration references the DoIP configuration
        the macro is set to STD_ON otherwise, or if no PbcfgM configuration is
        available it is set to STD_OFF.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_Test_IsValidConfig</srcid><srcstatus/><internalId>950</internalId></linkedfrom><linkedfrom><srcid>DoIP_Test_PBcfgM_Off</srcid><srcstatus/><internalId>952</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>475</internalId></specobject>

    <specobject>
      <id>DoIP.EB.PBCFGM108</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the DoIP is referenced by the PbcfgM, the parameter regarding the
        relocatable feature, shall not be editable and the MCG shall use the configuration of
        the PbcfgM.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_Test_PBcfgM_Off</srcid><srcstatus/><internalId>952</internalId></linkedfrom><linkedfrom><srcid>DoIP_Test_PBcfgM_On</srcid><srcstatus/><internalId>953</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1230</srcid><srcstatus/><internalId>627</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>476</internalId></specobject>

    <specobject>
      <id>DoIP.EB.PBCFGM110</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The DoIP_Init() function must be extended to enable the PbcgfM
        features.
        The initialization function shall obtain the DoIP configuration
        from the PbcfgM if the PbcfgM support is enabled within this DoIP
        and the initialization function is called with a null pointer.
        The validity of the configuration shall be checked by the function
        DoIP_IsValidConfig(). The validity shall be check regardless the PbcfgM
        support is enabled or not.
        If no valid configuration can be obtained the initialization function shall
        return, leaving the DoIP uninitialized.
        In the case error reporting is enabled and no valid configuration can be obtained
        an erroneous parameter shall be indicated.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_Test_VerifyInitWithPcfgM</srcid><srcstatus/><internalId>951</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>477</internalId></specobject>

    <specobject>
      <id>DoIP.EB.PostBuild_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The DoIP module shall compile and build an executable even in the absence
        of a post build configuration, i.e. without any post build generated .c and .h files
        available.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_NoPBCfg</srcid><srcstatus/><internalId>960</internalId></linkedfrom><linkedfrom><srcid>TS_DOIP_Gen_00000_OnlyPbCfg</srcid><srcstatus/><internalId>1361</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>478</internalId></specobject>

    <specobject>
      <id>DoIP.EB.PbcfgM_General_3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The DoIP shall provide the following macros in the header file
        DoIP_Cfg.h:
        - DOIP_RELOCATABLE_CFG_ENABLE which is set to STD_ON
          if relocatable config shall be enabled, otherwise it's set to STD_OFF.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_Test_PBcfgM_On</srcid><srcstatus/><internalId>953</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>479</internalId></specobject>

    <specobject>
      <id>DoIP.EB.PbcfgM_General_6</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If PbcfgM support is enabled DoIP shall define the following macros in
        DoIP_PBCfg.c:
        - TS_PB_CFG_LAYOUT_TYPE: Shall expand to the type definition of the Postbuild
          configuration layout type (e.g. DoIP_ConstConfigLayoutType)
        - TS_PB_CFG_NAME: Shall expand to the name of the structure defining the Postbuild
          configuration layout (e.g. DoIP_ConfigLayout)
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_Test_PBcfgM_Off</srcid><srcstatus/><internalId>952</internalId></linkedfrom><linkedfrom><srcid>DoIP_Test_PBcfgM_On</srcid><srcstatus/><internalId>953</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>480</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>DoIP.EB.PDULENGTHTYPE001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The DoIP module shall support the following values of PduLengthType:
        [UINT32, UINT16]
      </description>
      <verifycrit>
        Use case 1 - Modules not capable of handling more than 64 kbytes of data:
          - use PduLengthType value 'UINT32' with conformance test
          - verify successful test run, verify absence of metric violations
            (MISRA-C:2012, static code analysis, compiler warnings)
        Use case 2 - Modules capable of handling more than 64 kbytes of data:
          - use conformance test which handles more than 64 kbytes of data
          - apply "boundary" tests using data length of:
            [&lt;&lt;65535,65535, 65536, &gt;131072][bytes]
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest07008_DiagMessageTransmit_Pdu32uint</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest07009_DiagMessageReceive_Pdu32uint</srcid><srcstatus/><internalId>1274</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>481</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>DoIP.EB.PBSelectable.FileName</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        If postBuildVariant returns a non-empty string, the module's post-build-time
        configuration file names shall be changed in the following way:
        &lt;Mod&gt;[_*]_PBcfg.* to &lt;Mod&gt;_&lt;postBuildVariant&gt;[_*]_PBcfg.*
       </description>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03111_PostBuildSelectable_Eid_LogAddr</srcid><srcstatus/><internalId>1176</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>DoIP.dsn.Func0129.EB.PostBuildSelectable</ffbSrcId><ffbSrcType>swurs</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>698</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>482</internalId></specobject>

    <specobject>
       <id>DoIP.EB.PBSelectable.TypeName</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        If postBuildVariant returns a non-empty string, the module's post-build-time
        configuration type/variable names shall be changed in the following way:
        - DoIP_[Const]ConfigLayoutType to DoIP_&lt;postBuildVariant&gt;_[Const]ConfigLayoutType
       </description>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03111_PostBuildSelectable_Eid_LogAddr</srcid><srcstatus/><internalId>1176</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>DoIP.dsn.Func0129.EB.PostBuildSelectable</ffbSrcId><ffbSrcType>swurs</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>698</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>483</internalId></specobject>

    <specobject>
       <id>DoIP.EB.PBSelectable.Master</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        If postBuildVariant returns a non-empty string, the module shall generate a post-build-time
        configuration file DoIP_PBcfg.h/c which includes all the variants specific 
        post-build-time configurations (DoIP_&lt;postBuildVariant&gt;[_*]_PBcfg.h/c).
       </description>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03111_PostBuildSelectable_Eid_LogAddr</srcid><srcstatus/><internalId>1176</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <incomingFfbLinks><incomingFfbLink><ffbSrcId>DoIP.dsn.Func0129.EB.PostBuildSelectable</ffbSrcId><ffbSrcType>swurs</ffbSrcType><ffbSrcVersion>1</ffbSrcVersion><internalId>698</internalId></incomingFfbLink></incomingFfbLinks><violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>484</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>DoIP.EB.Interface.Consistency</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        The module shall provide a mechanism to guarantee consistency of interfaces and
        types between its implementation and its code stub.
       </description>
       <comment>
        The code stub of a module shall provide the same external view than the module itself.
        This is mandatory because unit test of modules test against the code stubs of
        adjacent modules. Inconsistent stubs may result in the situation that incompatible
        interfaces are not detected as unit test stage.
       </comment>
       <verifycrit>
        Create a compile test with two permutations that call all interfaces of a module
        (in both permutations).
        p0: Behave like a regular compile test; call the module generator and compile against
        the implementation of the module.
        p1: Do not generate module code and do not compile the implementation of the module.
        Instead the module shall be replaced with its own code stub.
       </verifycrit>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_DoIP_VerifyCodeStub</srcid><srcstatus/><internalId>954</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>485</internalId></specobject>

  </specobjects>
    <specobjects doctype="dev">
    <specobject>
      <id>dev.DoIP.SoConStatus</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>307</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>486</internalId></specobject>
    <specobject>
      <id>dev.DoIP.DoIP_ActivationLineSwitch</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>54</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>305</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>331</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>487</internalId></specobject>
    <specobject>
      <id>dev.DoIP.UpdateDhcpHostNameOptional</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>488</internalId></specobject>
    <specobject>
      <id>dev.DoIP.FuncParaType_result</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>99</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00182</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>270</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>489</internalId></specobject>
    <specobject>
      <id>dev.DoIP.Det.SoConId</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>125</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00194</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00196</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>490</internalId></specobject>
    <specobject>
      <id>dev.DoIP.Dcm_GetVin</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>145</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00156</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>491</internalId></specobject>
    <specobject>
      <id>dev.DoIP.CancelAPIs</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>165</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>318</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>319</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>492</internalId></specobject>
    <specobject>
      <id>dev.DoIP.DiagMsgNegativeAckCodes</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>191</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>493</internalId></specobject>
    <specobject>
      <id>dev.DoIP.LowerMultiplicity_0</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>210</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00062</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>494</internalId></specobject>
    <specobject>
      <id>dev.DoIP.NoInternalUdpBuffers</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>236</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00197</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>275</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00199</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>277</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>495</internalId></specobject>
    <specobject>
      <id>dev.DoIP.TpStreamingMode</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>256</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>496</internalId></specobject>
    <specobject>
      <id>dev.DoIP.DoIP_SoAdCopyTxData.AvailableDataPtr</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>279</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>302</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>497</internalId></specobject>
    <specobject>
      <id>dev.DoIP.AUTOSAR_GID_Sync</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>302</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00079</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00081</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00085</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>324</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R23-11.SWS_DoIP_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>459</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R23-11.SWS_DoIP_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>460</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>498</internalId></specobject>
    <specobject>
      <id>dev.DoIP.User_DoIPGetGID</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>329</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00051</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>499</internalId></specobject>
    <specobject>
      <id>dev.DoIP.DoIPWriteDhcpHostNameOption</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>349</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00155</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>500</internalId></specobject>
    <specobject>
      <id>dev.DoIP.DoIP_SoAdTpRxIndication</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>373</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>501</internalId></specobject>
    <specobject>
      <id>dev.DoIP.AliveCheckResp.Ignore</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>392</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>502</internalId></specobject>
    <specobject>
      <id>dev.DoIP.NotSupported.IfTransmit</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>406</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00131</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>298</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00277</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>336</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00279</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>337</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>503</internalId></specobject>
    <specobject>
      <id>dev.DoIP.DiagMsgNack_RouteInactive</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>429</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00127</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>504</internalId></specobject>
    <specobject>
      <id>dev.DoIP.SoftClosingTcpConnection</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>451</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00115</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00144</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00146</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00140</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>505</internalId></specobject>
    <specobject>
      <id>dev.DoIP.DoIP_TpTransmit.Queue</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>474</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>301</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00284</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>506</internalId></specobject>
    <specobject>
      <id>dev.DoIP.SecurityParam.NotOptional</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>501</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>445</internalId></provcov>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>446</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>507</internalId></specobject>
    <specobject>
      <id>dev.DoIP.DoIP_DoIPPduRBufferNotOkNackValue</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>524</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>508</internalId></specobject>
    <specobject>
      <id>dev.DoIP.NoAliveCheckOnTransmittingConnection</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>551</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>509</internalId></specobject>
    <specobject>
      <id>dev.DoIP.TriggerVehicleAnnouncement</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>578</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00299</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>353</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>510</internalId></specobject>
    <specobject>
      <id>dev.DoIP.TriggerVehicleAnnouncementSupport</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>597</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00304</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>356</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>511</internalId></specobject>
    <specobject>
      <id>dev.DoIP.ConfigClassChanged.HandleID</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>629</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>399</internalId></provcov>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00051</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>402</internalId></provcov>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>408</internalId></provcov>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>411</internalId></provcov>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00085</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>440</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>512</internalId></specobject>
    <specobject>
      <id>dev.DoIP.Channel.RxSide.NotOptional</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>648</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>513</internalId></specobject>
    <specobject>
      <id>dev.DoIP.AnnouncementConfirmation.NotRequired</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>670</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00286</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>340</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>514</internalId></specobject>
    <specobject>
      <id>dev.DoIP.VinInvalidityPattern.0..255</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>688</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>415</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>515</internalId></specobject>
    <specobject>
      <id>dev.DoIP.DET.Changed</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>708</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>267</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00169</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00184</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00163</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00186</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00176</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00187</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00183</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>516</internalId></specobject>
    <specobject>
      <id>dev.DoIP.DoIPMaxUDPRequestPerMessage</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>733</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00276</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>335</internalId></provcov>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00074</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>422</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>517</internalId></specobject>
    <specobject>
      <id>dev.DoIP.DoIPPduType</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>745</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00279</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>337</internalId></provcov>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00075</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>423</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>518</internalId></specobject>
    <specobject>
      <id>dev.DoIP.DoIP_IfCancelTransmit</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>757</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>430</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>318</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>519</internalId></specobject>
    <specobject>
      <id>dev.DoIP.FurtherActionByteCallback</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>770</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00287</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>341</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00288</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>342</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00289</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>343</internalId></provcov>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00092</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00290</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>344</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00291</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>345</internalId></provcov>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00093</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>442</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>520</internalId></specobject>
    <specobject>
      <id>dev.DoIP.DoIPEid</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>806</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>373</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>521</internalId></specobject>
    <specobject>
      <id>dev.DoIP.DoIPUseEIDasGID</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>823</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>377</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>522</internalId></specobject>
    <specobject>
      <id>dev.DoIP.GetVersionInfo</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>852</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>523</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/DoIP.h_5</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP.h</sourcefile>
      <sourceline>5</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ASR41.SWS_DoIP_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>524</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP.h_29</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP.h</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ASR41.SWS_DoIP_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>525</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP.h_442</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP.h</sourcefile>
      <sourceline>442</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledFunctionality</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>891</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>526</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/DoIP_Cbk.h_9</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Cbk.h</sourcefile>
      <sourceline>9</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ASR41.SWS_DoIP_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>527</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Cbk.h_11</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Cbk.h</sourcefile>
      <sourceline>11</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ASR41.SWS_DoIP_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>528</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/DoIP_Int.h_937</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Int.h</sourcefile>
      <sourceline>937</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>529</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Int.h_946</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Int.h</sourcefile>
      <sourceline>946</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>530</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Int.h_960</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Int.h</sourcefile>
      <sourceline>960</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00051</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>531</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Int.h_961</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Int.h</sourcefile>
      <sourceline>961</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DoIPDynamicGIDMasterSelection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>532</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Int.h_963</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Int.h</sourcefile>
      <sourceline>963</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0125.UserVIDRequestReceived_Syntax</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>793</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>533</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Int.h_1026</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Int.h</sourcefile>
      <sourceline>1026</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>327</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>534</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Int.h_1027</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Int.h</sourcefile>
      <sourceline>1027</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00269</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>329</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>535</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Int.h_1030</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Int.h</sourcefile>
      <sourceline>1030</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>328</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>536</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Int.h_1031</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Int.h</sourcefile>
      <sourceline>1031</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>330</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>537</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Int.h_1248</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Int.h</sourcefile>
      <sourceline>1248</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>538</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Int.h_1249</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Int.h</sourcefile>
      <sourceline>1249</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00142</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>539</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Int.h_1312</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Int.h</sourcefile>
      <sourceline>1312</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.User_RoutingActivationCallback</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>833</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>540</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Int.h_1368</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Int.h</sourcefile>
      <sourceline>1368</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledFunctionality</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>891</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>541</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Int.h_1497</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Int.h</sourcefile>
      <sourceline>1497</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.User_DoIPReportIssue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>884</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>542</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/DoIP_Types.h_5</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Types.h</sourcefile>
      <sourceline>5</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ASR41.SWS_DoIP_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>543</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Types.h_10</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Types.h</sourcefile>
      <sourceline>10</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ASR41.SWS_DoIP_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>544</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Types.h_20</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Types.h</sourcefile>
      <sourceline>20</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>332</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>545</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Types.h_21</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Types.h</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ASR41.SWS_DoIP_00273</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>546</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Types.h_94</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Types.h</sourcefile>
      <sourceline>94</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.DoIP_ReportIssueContextType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>885</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>547</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/DoIP_Types.h_120</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/include/DoIP_Types.h</sourcefile>
      <sourceline>120</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.DoIP_ReportIdType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>886</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>548</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_75</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>75</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ASR41.SWS_DoIP_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>549</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_77</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>77</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ASR41.SWS_DoIP_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>550</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_1403</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>1403</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledFunctionality</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>891</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>551</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_1464</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>1464</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledFunctionality</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>891</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>552</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_1532</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>1532</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledFunctionality</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>891</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>553</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_1716</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>1716</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00296</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>350</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>554</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_2366</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>2366</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.RoutingActivationCallback_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>834</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>555</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_2374</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>2374</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.RoutingActivationCallback_RespCode_NoChange</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>838</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>556</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_2569</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>2569</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.TxCustomMsg.EcuC_GetMetaDataPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>806</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>557</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_2570</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>2570</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.TxCustomMsg.QueueTxRequest</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>807</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>558</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_2960</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>2960</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.TxCustomMsg.SoAdTpTxConfirmation</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>809</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>559</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_3454</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>3454</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.Call_User_TcpSoConModeChg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>810</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>560</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_3583</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>3583</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>561</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_3711</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>3711</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>873</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>562</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_3726</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>3726</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0125.Call_User_VIDRequestReceived</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>794</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>563</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_4142</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>4142</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_91002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>359</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>564</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_4165</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>4165</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00298</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>352</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>565</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_4180</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>4180</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00299</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>566</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_4196</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>4196</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DoIP_ControlInternalInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>84</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>567</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_4413</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>4413</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SoAdIfRxIndication.IncompleteUdpFrame</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>568</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_4432</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>4432</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SoAdIfRxIndication.IncompleteUdpFrame</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>569</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_4497</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>4497</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>875</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>570</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_4568</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>4568</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.DefaultProtocolVersionResponse</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>874</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>571</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_4604</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>4604</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Tcp.ProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>876</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>572</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_4682</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>4682</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.CustomPayloadType_OK</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>800</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>573</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_4738</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>4738</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.CustomPayloadType_OK</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>800</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>574</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_4805</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>4805</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>871</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>575</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_4814</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>4814</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>576</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_4819</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>4819</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Tcp.ProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>876</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>577</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_5000</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>5000</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Tcp.InitProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>877</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>578</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_5001</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>5001</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Tcp.InvalidProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>878</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>579</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_5591</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>5591</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.RoutingActivationCallback_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>834</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>580</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_5592</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>5592</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.RoutingActivationCallback_RespCode_Change</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>837</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>581</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_5693</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>5693</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.SecComForAllProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>879</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>582</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_5694</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>5694</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.NoSecureComForAllProtVersions.SecureRoute</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>881</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>583</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_5710</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>5710</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.SecComForAllProtocolVersions.SecureTcpCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>880</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>584</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_5711</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>5711</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.NoSecureComForAllProtVersions.SecureTcpCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>882</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>585</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_6160</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>6160</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.RoutingActivationCallback_GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>835</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>586</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_6212</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>6212</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>288</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>587</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_6807</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>6807</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>320</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>588</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_7788</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>7788</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_NoOverrun</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>819</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>589</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_7797</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>7797</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_NoOverrun</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>819</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>590</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_8037</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>8037</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>889</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>591</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_8048</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>8048</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportId.ContextData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>887</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>592</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP.c.m4_8058</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP.c.m4</sourcefile>
      <sourceline>8058</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>888</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>593</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/DoIP_CustomPayloadType.c_43</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP_CustomPayloadType.c</sourcefile>
      <sourceline>43</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.EcuC_SetMetaData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>801</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>594</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP_CustomPayloadType.c_44</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP_CustomPayloadType.c</sourcefile>
      <sourceline>44</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.PduR_StartOfReception</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>802</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>595</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP_CustomPayloadType.c_132</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP_CustomPayloadType.c</sourcefile>
      <sourceline>132</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.TxCustomMsg.SoAdCopyTxData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>808</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>596</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP_CustomPayloadType.c_195</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP_CustomPayloadType.c</sourcefile>
      <sourceline>195</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.PduR_CopyRxData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>803</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>597</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP_CustomPayloadType.c_196</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP_CustomPayloadType.c</sourcefile>
      <sourceline>196</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.PduR_TpRxIndication_OK</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>804</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>598</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP_CustomPayloadType.c_197</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP_CustomPayloadType.c</sourcefile>
      <sourceline>197</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.PduR_TpRxIndication_NOT_OK</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>805</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>599</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP_CustomPayloadType.c_271</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP_CustomPayloadType.c</sourcefile>
      <sourceline>271</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.CustomChannel.ChannelActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>798</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>600</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/DoIP_CustomPayloadType.c_303</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/src/DoIP_CustomPayloadType.c</sourcefile>
      <sourceline>303</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.CustomChannel.TcpConReset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>799</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>601</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/DoIP.xdm.m4_113</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP.xdm.m4</sourcefile>
      <sourceline>113</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.PostBuildSelectable.DoIPLogicalAddress</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>840</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>602</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP.xdm.m4_194</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP.xdm.m4</sourcefile>
      <sourceline>194</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.PostBuildSelectable.DoIPEid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>839</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>603</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP.xdm.m4_323</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP.xdm.m4</sourcefile>
      <sourceline>323</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00099</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>448</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>604</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP.xdm.m4_767</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP.xdm.m4</sourcefile>
      <sourceline>767</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>605</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP.xdm.m4_783</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP.xdm.m4</sourcefile>
      <sourceline>783</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>606</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP.xdm.m4_817</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP.xdm.m4</sourcefile>
      <sourceline>817</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.PostBuildSelectable.DoIPTargetAddressValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>841</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>607</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP.xdm.m4_879</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP.xdm.m4</sourcefile>
      <sourceline>879</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>446</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>608</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP.xdm.m4_1440</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP.xdm.m4</sourcefile>
      <sourceline>1440</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>445</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>609</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_53</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>53</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.DoIPProtocolVersion_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>867</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>610</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_66</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>66</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.DoIP_ISO13400_2_2012_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>868</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>611</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_88</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>88</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.DoIP_ISO13400_2_2019_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>869</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>612</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_110</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>110</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.DoIPSecuredCommunicationForAllProtocolVersions_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>870</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>613</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_137</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>137</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.XDM.NoProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>947</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>614</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_232</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>232</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.Config.DoIPCustomChannel_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>796</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>615</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_268</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>268</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.Config.DoIPTcpConnectionRef_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>797</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>616</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_632</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>632</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0125.Config.DoIPVIDRequestReceivedCallback</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>791</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>617</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_636</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>636</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0125.Config.DoIPVIDRequestReceived</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>792</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>618</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_787</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>787</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.Config.DoIPCustomPayloadTypeEnabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>795</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>619</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_837</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>837</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0133.DoIPConnectionControl_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>851</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>620</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_870</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>870</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0102.Config.DoIPDhcpHostNamePrefix_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>825</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>621</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_893</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>893</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DoIPEnableTcpClosureWithFIN_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>622</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1016</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1016</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.DoIPReportIssueCallout_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>883</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>623</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1104</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1104</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0128.Config.DoIPResponseBeforeRoutingActivation_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>830</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>624</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1199</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1199</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XdmCheck.No_Rte_Found</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>924</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>625</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1207</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1207</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>626</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1230</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1230</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>476</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>627</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1235</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1235</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.Config.DoIPEnableSecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>852</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>628</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1257</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1257</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DoIPSecurityEventRefs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>853</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>629</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1290</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1290</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>866</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>630</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1321</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1321</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>866</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>631</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1352</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1352</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>866</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>632</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1383</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1383</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>866</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>633</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1414</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1414</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>866</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>634</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1445</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1445</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>866</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>635</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1478</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1478</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>866</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>636</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1510</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1510</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>866</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>637</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1550</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1550</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>866</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>638</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1582</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1582</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>866</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>639</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1613</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1613</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>866</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>640</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1644</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1644</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>866</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>641</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_EBParameters.xdm.m4_1664</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_EBParameters.xdm.m4</sourcefile>
      <sourceline>1664</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.DoIPRoutingActivationCallbackList</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>832</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>642</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/DoIP_Extension.xdm.m4_25</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_Extension.xdm.m4</sourcefile>
      <sourceline>25</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.MacAddress_false.NoDoIPEid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>917</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>643</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_Extension.xdm.m4_123</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_Extension.xdm.m4</sourcefile>
      <sourceline>123</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.XDM.SecureConnectionNotAllowed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>945</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>644</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_Extension.xdm.m4_183</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_Extension.xdm.m4</sourcefile>
      <sourceline>183</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.XDM.CheckSecuredSocketConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>645</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_Extension.xdm.m4_237</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_Extension.xdm.m4</sourcefile>
      <sourceline>237</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.Udp.DoIPSoAdRxPduId_ZeroBased</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>895</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>646</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_Extension.xdm.m4_238</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_Extension.xdm.m4</sourcefile>
      <sourceline>238</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.Udp.DoIPSoAdRxPduId_Consecutive</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>894</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>647</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_Extension.xdm.m4_318</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_Extension.xdm.m4</sourcefile>
      <sourceline>318</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.Wrong_DoIPUdpVehicleAnnouncement_DoIPSoAdTxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>901</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>648</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/DoIP_Extension.xdm.m4_366</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/config/DoIP_Extension.xdm.m4</sourcefile>
      <sourceline>366</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.XDM.SecureRoutingActivationRequiresSecuredConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>649</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/DoIP_Bswmd.arxml.m4_51</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_swcd/swcd/DoIP_Bswmd.arxml.m4</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00266</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>326</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>650</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/DoIP_Bswmd.arxml.m4_69</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_swcd/swcd/DoIP_Bswmd.arxml.m4</sourcefile>
      <sourceline>69</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>327</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>651</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/DoIP_Bswmd.arxml.m4_91</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_swcd/swcd/DoIP_Bswmd.arxml.m4</sourcefile>
      <sourceline>91</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>328</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>652</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/DoIP_Bswmd.arxml.m4_115</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_swcd/swcd/DoIP_Bswmd.arxml.m4</sourcefile>
      <sourceline>115</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00269</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>329</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>653</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/DoIP_Bswmd.arxml.m4_137</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_swcd/swcd/DoIP_Bswmd.arxml.m4</sourcefile>
      <sourceline>137</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>330</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>654</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/DoIP_swc_interface.arxml.m4_17</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_swcd/swcd/DoIP_swc_interface.arxml.m4</sourcefile>
      <sourceline>17</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>655</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/DoIP_swc_interface.arxml.m4_48</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_swcd/swcd/DoIP_swc_interface.arxml.m4</sourcefile>
      <sourceline>48</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>656</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/DoIP_swc_internal.arxml.m4_16</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_swcd/swcd/DoIP_swc_internal.arxml.m4</sourcefile>
      <sourceline>16</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>657</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/DoIP_swc_internal.arxml.m4_22</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_swcd/swcd/DoIP_swc_internal.arxml.m4</sourcefile>
      <sourceline>22</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>322</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>658</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/DoIP_swc_internal.arxml.m4_30</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_swcd/swcd/DoIP_swc_internal.arxml.m4</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>323</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>659</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_var/xgen/DoIP.xgen_167</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_var/xgen/DoIP.xgen</sourcefile>
      <sourceline>167</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledPostBuildVariables</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>890</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>660</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/DoIP.xgen_266</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_var/xgen/DoIP.xgen</sourcefile>
      <sourceline>266</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledPostBuildVariables</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>890</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>661</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/DoIP.xgen_339</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_var/xgen/DoIP.xgen</sourcefile>
      <sourceline>339</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledPostBuildVariables</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>890</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>662</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/DoIP.xgen_363</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_var/xgen/DoIP.xgen</sourcefile>
      <sourceline>363</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledPostBuildVariables</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>890</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>663</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/DoIP.xgen_393</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_var/xgen/DoIP.xgen</sourcefile>
      <sourceline>393</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledPostBuildVariables</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>890</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>664</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/DoIP.xgen_406</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_var/xgen/DoIP.xgen</sourcefile>
      <sourceline>406</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledPostBuildVariables</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>890</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>665</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/DoIP.xgen_650</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/src/Autosar/generate_var/xgen/DoIP.xgen</sourcefile>
      <sourceline>650</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledPostBuildVariables</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>890</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>666</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd" title="DoIP Tx/Rx State Machines Top Level Requirements">
    <specobject>
      <id>DoIP.EB.TcpRxSM</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>994</sourceline>
      <version>1</version>
      <description>
           An Rx State Machine is introduced for every Tcp connection used.
        </description>
      <furtherinfo>
          WRN.swdd.needscoverage.count - Linking transition requirements to state machine top-level
          requirement is beneficial, splitting them up would only increase complexity without any
          real advantages.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Diag_Msg_2_Rx_Discard_Diag_Msg</srcid><srcstatus/><internalId>734</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Diag_Msg_2_Rx_Diag_Msg</srcid><srcstatus/><internalId>735</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Diag_Msg_2_Rx_Ack_Conf_Wait</srcid><srcstatus/><internalId>736</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Diag_Header_2_Rx_Diag_Msg</srcid><srcstatus/><internalId>737</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Diag_Header_2_Rx_Diag_Header</srcid><srcstatus/><internalId>738</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Diag_Header_2_Rx_Discard_Diag_Msg</srcid><srcstatus/><internalId>739</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Diag_Header_2_Rx_Ack_Conf_Wait</srcid><srcstatus/><internalId>740</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Diag_Header</srcid><srcstatus/><internalId>741</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Alive_Check_Resp_2_Rx_Ready</srcid><srcstatus/><internalId>742</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Alive_Check_Resp_2_Rx_Alive_Check_Resp</srcid><srcstatus/><internalId>743</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Alive_Check_Resp_2_Rx_Offline</srcid><srcstatus/><internalId>744</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Alive_Check_Resp</srcid><srcstatus/><internalId>745</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Ready</srcid><srcstatus/><internalId>746</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Discard_Msg</srcid><srcstatus/><internalId>747</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Route_Act</srcid><srcstatus/><internalId>748</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Ack_Conf_Wait</srcid><srcstatus/><internalId>749</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Discard_Msg_2_Rx_Ready</srcid><srcstatus/><internalId>750</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Offline_2_Rx_Ready</srcid><srcstatus/><internalId>751</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Ack_Conf_Wait_2_Rx_Ready</srcid><srcstatus/><internalId>752</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Initial_2_Rx_Offline</srcid><srcstatus/><internalId>753</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Ack_Conf_Wait_2_Rx_Offline</srcid><srcstatus/><internalId>754</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_All_Con_Alive_Check_Wait_2_Rx_All_Con_Alive_Check_Wait</srcid><srcstatus/><internalId>755</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_All_Con_Alive_Check_Wait_2_Rx_Ack_Conf_Wait</srcid><srcstatus/><internalId>756</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Route_Act_2_Rx_All_Conn_Alive_Check_Wait</srcid><srcstatus/><internalId>757</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Route_Act_2_Rx_Route_Act</srcid><srcstatus/><internalId>758</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Route_Act_2_Rx_Ack_Conf_Wait</srcid><srcstatus/><internalId>759</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Route_Act_2_Rx_Single_Alive_Check_Wait</srcid><srcstatus/><internalId>760</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Single_Alive_Check_Wait_2_Rx_Single_Alive_Check_Wait</srcid><srcstatus/><internalId>761</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Ack_Conf_Wait_2_Rx_Ack_Conf_Wait</srcid><srcstatus/><internalId>762</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Discard_Diag_Msg_2_Rx_Ack_Conf_Wait</srcid><srcstatus/><internalId>763</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Discard_Msg_2_Rx_Ack_Conf_Wait</srcid><srcstatus/><internalId>764</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Discard_Diag_Msg_2_Rx_Discard_Diag_Msg</srcid><srcstatus/><internalId>765</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpRxSM.Rx_Discard_Msg_2_Rx_Discard_Msg</srcid><srcstatus/><internalId>766</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>667</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1012</sourceline>
      <version>1</version>
      <description>
           An Tx State Machine is introduced for every Tcp connection used.
        </description>
      <furtherinfo>
          WRN.swdd.needscoverage.count - Linking transition requirements to state machine top-level
          requirement is beneficial, splitting them up would only increase complexity without any
          real advantages.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_GenHeader_Nack_2_Tx_Idle</srcid><srcstatus/><internalId>767</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_GenHeader_Nack_2_Tx_Offline</srcid><srcstatus/><internalId>768</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Idle_2_Tx_GenHeader_Nack</srcid><srcstatus/><internalId>769</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_2_Tx_Offline</srcid><srcstatus/><internalId>770</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_2_Tx_Idle</srcid><srcstatus/><internalId>771</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_Start_2_Tx_Diag_Ack_Nack</srcid><srcstatus/><internalId>772</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_Start_2_Tx_Offline</srcid><srcstatus/><internalId>773</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_Start_2_Tx_Idle</srcid><srcstatus/><internalId>774</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Idle_2_Tx_Diag_Ack_Nack_Start</srcid><srcstatus/><internalId>775</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Diag_Msg_2_Tx_Idle</srcid><srcstatus/><internalId>776</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Diag_Msg_Start_2_Tx_Diag_Msg</srcid><srcstatus/><internalId>777</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Diag_Msg_Start_2_Tx_Idle</srcid><srcstatus/><internalId>778</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Idle_2_Tx_Diag_Msg_Start</srcid><srcstatus/><internalId>779</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Route_Act_Oem_2_Tx_Idle</srcid><srcstatus/><internalId>780</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Route_Act_Oem_2_Tx_Offline</srcid><srcstatus/><internalId>781</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Idle_2_Tx_Route_Act_Oem</srcid><srcstatus/><internalId>782</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Route_Act_2_Tx_Idle</srcid><srcstatus/><internalId>783</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Route_Act_2_Tx_Offline</srcid><srcstatus/><internalId>784</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Idle_2_Tx_Route_Act</srcid><srcstatus/><internalId>785</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Tx_Offline_2_Tx_Idle</srcid><srcstatus/><internalId>786</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.TcpTxSM.Initial_2_Tx_Offline</srcid><srcstatus/><internalId>787</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>668</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="DoIP Service Component Interface">
    <specobject>
      <id>DoIP.dsn.Func0100.ServiceInterface</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1038</sourceline>
      <version>1</version>
      <description>
          DoIP shall provide Service component interfaces in addition to callback functions.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00052</srcid><srcstatus/><internalId>145</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00056</srcid><srcstatus/><internalId>148</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00057</srcid><srcstatus/><internalId>149</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00261</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00262</srcid><srcstatus/><internalId>323</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00263</srcid><srcstatus/><internalId>324</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00264</srcid><srcstatus/><internalId>325</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>669</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Activation and deactivation of DoIPInterface via activation line switch interface">
    <specobject>
      <id>DoIP.dsn.Func0101.ActivationLineSwitch</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1053</sourceline>
      <version>1</version>
      <description>
          DoIP shall provide a functionality to enable/disable DoIPInterface connected to external tester.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Linking all feature requirements to the single top-level
          requirement brings clear benefits and splitting them up would only increase complexity
          without any real improvements.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00201</srcid><srcstatus/><internalId>279</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00202</srcid><srcstatus/><internalId>280</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00204</srcid><srcstatus/><internalId>281</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00285</srcid><srcstatus/><internalId>339</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00296</srcid><srcstatus/><internalId>350</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_91000</srcid><srcstatus/><internalId>358</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00306</srcid><srcstatus/><internalId>360</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.Det.ActivationLineSwitch.ActivePtr.Invalid</srcid><srcstatus/><internalId>715</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0101.EB.ActivationLineState</srcid><srcstatus/><internalId>788</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0101.EB.SWS_DoIP_00234</srcid><srcstatus/><internalId>789</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0101.EB.SWS_DoIP_00235</srcid><srcstatus/><internalId>790</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>670</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support for DhcpHostNameOption">
    <specobject>
      <id>DoIP.dsn.Func0102.DhcpHostNameOption</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1073</sourceline>
      <version>1</version>
      <description>
          DoIP shall be able to set the DHCP Host name and shall support vendor specific name option
          to be added to the DHCP host name.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00154</srcid><srcstatus/><internalId>54</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00155</srcid><srcstatus/><internalId>240</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00156</srcid><srcstatus/><internalId>241</internalId></linkedfrom><linkedfrom><srcid>DoIP.ECUC_DoIP_00067</srcid><srcstatus/><internalId>416</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0102.Config.DoIPDhcpHostNamePrefix_Conf</srcid><srcstatus/><internalId>825</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0102.DoIPDhcpHostNamePrefix_Used</srcid><srcstatus/><internalId>826</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0102.SWS_DoIP_00155</srcid><srcstatus/><internalId>827</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0102.SWS_DoIP_00156_UserGetVin</srcid><srcstatus/><internalId>828</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>671</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Inactivity timeout">
    <specobject>
      <id>DoIP.dsn.Func0103.InactivityTimeoutForTcp</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1089</sourceline>
      <version>1</version>
      <description>
          DoIP shall use inactivity timeouts to free TCP connections of inactive tester.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00142</srcid><srcstatus/><internalId>233</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00143</srcid><srcstatus/><internalId>234</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00145</srcid><srcstatus/><internalId>236</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00159</srcid><srcstatus/><internalId>242</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R21-11.SWS_DoIP_00115</srcid><srcstatus/><internalId>452</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R21-11.SWS_DoIP_00144</srcid><srcstatus/><internalId>453</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R21-11.SWS_DoIP_00146</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>672</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support of parallel tester">
    <specobject>
      <id>DoIP.dsn.Func0104.ParallelTester</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1104</sourceline>
      <version>1</version>
      <description>
          DoIP shall support parallel tester.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.MaxTesterConnections.Exceeded</srcid><srcstatus/><internalId>45</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>673</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support of DoIP_MainFunctionTx">
    <specobject>
      <id>DoIP.dsn.Func0105.MainFunctionTx</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1119</sourceline>
      <version>1</version>
      <description>
          It shall be possible to speed up transmission by triggering DoIP_MainFunctionTx().
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.TriggerableMainfunctionTx</srcid><srcstatus/><internalId>43</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.MainFunctionTxDoIPNotInit</srcid><srcstatus/><internalId>44</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>674</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Statically configured EID/GID">
    <specobject>
      <id>DoIP.dsn.Func0106.StaticEidGid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1134</sourceline>
      <version>1</version>
      <description>
          DoIP shall support the static configuration of EID and GID.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.ASR_R23-11.ECUC_DoIP_00014</srcid><srcstatus/><internalId>461</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>675</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support of DoIPUseEIDasGID">
    <specobject>
      <id>DoIP.dsn.Func0107.DoIPUseEIDasGID</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1149</sourceline>
      <version>1</version>
      <description>
          DoIP shall support usage of EID as GID.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00077</srcid><srcstatus/><internalId>169</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>676</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support DoIPUseMacAddressForIdentification">
    <specobject>
      <id>DoIP.dsn.Func0108.UseMacForEid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1164</sourceline>
      <version>1</version>
      <description>
          DoIP shall support usage of its MAC address for EID.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00065_SoAd_GetPhysAddr_NOK</srcid><srcstatus/><internalId>29</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00065</srcid><srcstatus/><internalId>157</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>677</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support AUTOSAR GID synchronization">
    <specobject>
      <id>DoIP.dsn.Func0109.SWS.GidSync</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1179</sourceline>
      <version>1</version>
      <description>
          DoIP shall support GID synchronization according to AUTOSAR SWS.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00050</srcid><srcstatus/><internalId>143</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00051</srcid><srcstatus/><internalId>144</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00076</srcid><srcstatus/><internalId>168</internalId></linkedfrom><linkedfrom><srcid>DoIP.ECUC_DoIP_00050</srcid><srcstatus/><internalId>401</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>678</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support EB GID synchronization">
    <specobject>
      <id>DoIP.dsn.Func0110.SWS.EB.GidSync</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1194</sourceline>
      <version>1</version>
      <description>
          DoIP shall support EB specific GID synchronization.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.DynamicGIDSynchronization</srcid><srcstatus/><internalId>61</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.XdmCheck.DynamicGIDSync.Enable</srcid><srcstatus/><internalId>921</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>679</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support Routing activation">
    <specobject>
      <id>DoIP.dsn.Func0111.RoutingActivation</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1209</sourceline>
      <version>1</version>
      <description>
          DoIP shall be able to process routing activation request and to send routing activation
          response. Depending on the content DoIP shall either activate routes or reject the
          request.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Linking all feature requirements to the single top-level
          requirement brings clear benefits and splitting them up would only increase complexity
          without any real improvements.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00101</srcid><srcstatus/><internalId>193</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00102</srcid><srcstatus/><internalId>194</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00103</srcid><srcstatus/><internalId>195</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00104</srcid><srcstatus/><internalId>196</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00106</srcid><srcstatus/><internalId>198</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00107</srcid><srcstatus/><internalId>199</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00108</srcid><srcstatus/><internalId>200</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00113</srcid><srcstatus/><internalId>205</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00116</srcid><srcstatus/><internalId>207</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00117</srcid><srcstatus/><internalId>208</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00118</srcid><srcstatus/><internalId>209</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00119</srcid><srcstatus/><internalId>210</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00120</srcid><srcstatus/><internalId>211</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00160</srcid><srcstatus/><internalId>243</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00274</srcid><srcstatus/><internalId>333</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00114</srcid><srcstatus/><internalId>334</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>680</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support automatic routing activation">
    <specobject>
      <id>DoIP.dsn.Func0112.EB.AutoRoutingActivation</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1231</sourceline>
      <version>1</version>
      <description>
          DoIP shall allow dedicated channels to be automatically enabled.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.DoIPRoutingActivationType_Conf</srcid><srcstatus/><internalId>50</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.RoutingActivationType.AUTOMATIC</srcid><srcstatus/><internalId>52</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>681</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support Routing activation authentication">
    <specobject>
      <id>DoIP.dsn.Func0113.RoutingActivationAuthentication</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1246</sourceline>
      <version>1</version>
      <description>
          DoIP shall support authentication of routing activation requests.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00109</srcid><srcstatus/><internalId>201</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00110</srcid><srcstatus/><internalId>202</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00111</srcid><srcstatus/><internalId>203</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00161</srcid><srcstatus/><internalId>244</internalId></linkedfrom><linkedfrom><srcid>DoIP.ECUC_DoIP_00049</srcid><srcstatus/><internalId>400</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>682</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support Routing activation confirmation">
    <specobject>
      <id>DoIP.dsn.Func0114.RoutingActivationConfirmation</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1261</sourceline>
      <version>1</version>
      <description>
          DoIP shall support confirmation of routing activation requests.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00112</srcid><srcstatus/><internalId>204</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>683</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support of Receiving and Responding (ACK/NACK) to Diagnostic Messages">
    <specobject>
      <id>DoIP.dsn.Func0115.DiagMsgRx</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1276</sourceline>
      <version>1</version>
      <description>
          DoIP shall support the reception and response to diagnostic messages. This includes
          error handling and transmission of ACK and NACK with configurable number of last diag
          message bytes.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Linking all feature requirements to the single top-level
          requirement brings clear benefits and splitting them up would only increase complexity
          without any real improvements.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00121</srcid><srcstatus/><internalId>212</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00122</srcid><srcstatus/><internalId>213</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00123</srcid><srcstatus/><internalId>214</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00124</srcid><srcstatus/><internalId>215</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00126</srcid><srcstatus/><internalId>217</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00127</srcid><srcstatus/><internalId>218</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00128</srcid><srcstatus/><internalId>219</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00129</srcid><srcstatus/><internalId>220</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00132</srcid><srcstatus/><internalId>223</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00133</srcid><srcstatus/><internalId>224</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00134</srcid><srcstatus/><internalId>225</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00135</srcid><srcstatus/><internalId>226</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00136</srcid><srcstatus/><internalId>227</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00137</srcid><srcstatus/><internalId>228</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00138</srcid><srcstatus/><internalId>229</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00173</srcid><srcstatus/><internalId>253</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00174</srcid><srcstatus/><internalId>254</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.DiagMsgNack_RouteInactive_SourceAddressInUse</srcid><srcstatus/><internalId>729</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>684</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support of sending Diag messages 64k">
    <specobject>
      <id>DoIP.dsn.Func0116.LargeDiagMsgRxTx</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1298</sourceline>
      <version>1</version>
      <description>
          DoIP shall support reception and transmission of diagnostic messages size 64k.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.DoIP_TpTransmit.PduSize.64K</srcid><srcstatus/><internalId>31</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>685</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support of custom payload type handling">
    <specobject>
      <id>DoIP.dsn.Func0117.EB.CustomPayloadType</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1313</sourceline>
      <version>1</version>
      <description>
          DoIP shall handle custom payload types via TP Api.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Linking all feature requirements to the single top-level
          requirement brings clear benefits and splitting them up would only increase complexity
          without any real improvements.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0117.Config.DoIPCustomPayloadTypeEnabled</srcid><srcstatus/><internalId>795</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0117.Config.DoIPCustomChannel_Conf</srcid><srcstatus/><internalId>796</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0117.Config.DoIPTcpConnectionRef_Conf</srcid><srcstatus/><internalId>797</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0117.CustomChannel.ChannelActivation</srcid><srcstatus/><internalId>798</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0117.CustomChannel.TcpConReset</srcid><srcstatus/><internalId>799</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0117.RxCustomMsg.CustomPayloadType_OK</srcid><srcstatus/><internalId>800</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0117.RxCustomMsg.EcuC_SetMetaData</srcid><srcstatus/><internalId>801</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0117.RxCustomMsg.PduR_StartOfReception</srcid><srcstatus/><internalId>802</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0117.RxCustomMsg.PduR_CopyRxData</srcid><srcstatus/><internalId>803</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0117.RxCustomMsg.PduR_TpRxIndication_OK</srcid><srcstatus/><internalId>804</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0117.RxCustomMsg.PduR_TpRxIndication_NOT_OK</srcid><srcstatus/><internalId>805</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0117.TxCustomMsg.EcuC_GetMetaDataPayloadType</srcid><srcstatus/><internalId>806</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0117.TxCustomMsg.QueueTxRequest</srcid><srcstatus/><internalId>807</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0117.TxCustomMsg.SoAdCopyTxData</srcid><srcstatus/><internalId>808</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0117.TxCustomMsg.SoAdTpTxConfirmation</srcid><srcstatus/><internalId>809</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0117.Call_User_TcpSoConModeChg</srcid><srcstatus/><internalId>810</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>686</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support of GetPowerMode">
    <specobject>
      <id>DoIP.dsn.Func0119.PowerMode</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1333</sourceline>
      <version>1</version>
      <description>
          DoIP shall be able to receive and process a Power Mode request and send a power mode
          response.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00090</srcid><srcstatus/><internalId>182</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00091</srcid><srcstatus/><internalId>183</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00092</srcid><srcstatus/><internalId>184</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00093</srcid><srcstatus/><internalId>185</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>687</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support of Vehicle ID Announcement">
    <specobject>
      <id>DoIP.dsn.Func0120.VehicleIdAnnouncement</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1349</sourceline>
      <version>1</version>
      <description>
          DoIP shall be able to send Vehicle Announcements.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Linking all feature requirements to the single top-level
          requirement brings clear benefits and splitting them up would only increase complexity
          without any real improvements.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00070</srcid><srcstatus/><internalId>162</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00071</srcid><srcstatus/><internalId>163</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00073</srcid><srcstatus/><internalId>165</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00074</srcid><srcstatus/><internalId>166</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00075</srcid><srcstatus/><internalId>167</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00077</srcid><srcstatus/><internalId>169</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00078</srcid><srcstatus/><internalId>170</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00079</srcid><srcstatus/><internalId>171</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00080</srcid><srcstatus/><internalId>172</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00081</srcid><srcstatus/><internalId>173</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00082</srcid><srcstatus/><internalId>174</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00083</srcid><srcstatus/><internalId>175</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00084</srcid><srcstatus/><internalId>176</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00086</srcid><srcstatus/><internalId>178</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00087</srcid><srcstatus/><internalId>179</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00088</srcid><srcstatus/><internalId>180</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00089</srcid><srcstatus/><internalId>181</internalId></linkedfrom><linkedfrom><srcid>DoIP.ECUC_DoIP_00007</srcid><srcstatus/><internalId>367</internalId></linkedfrom><linkedfrom><srcid>DoIP.ECUC_DoIP_00008</srcid><srcstatus/><internalId>368</internalId></linkedfrom><linkedfrom><srcid>DoIP.ECUC_DoIP_00076</srcid><srcstatus/><internalId>431</internalId></linkedfrom><linkedfrom><srcid>DoIP.ECUC_DoIP_00077</srcid><srcstatus/><internalId>432</internalId></linkedfrom><linkedfrom><srcid>DoIP.ECUC_DoIP_00078</srcid><srcstatus/><internalId>433</internalId></linkedfrom><linkedfrom><srcid>DoIP.ECUC_DoIP_00079</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>DoIP.ECUC_DoIP_00094</srcid><srcstatus/><internalId>443</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R23-11.SWS_DoIP_00074</srcid><srcstatus/><internalId>457</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R23-11.SWS_DoIP_00075</srcid><srcstatus/><internalId>458</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R23-11.SWS_DoIP_00077</srcid><srcstatus/><internalId>459</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R23-11.SWS_DoIP_00078</srcid><srcstatus/><internalId>460</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledPostBuildVariables</srcid><srcstatus/><internalId>890</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledFunctionality</srcid><srcstatus/><internalId>891</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>688</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Vehicle identification response">
    <specobject>
      <id>DoIP.dsn.Func0121.VehicleId</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1369</sourceline>
      <version>1</version>
      <description>
          DoIP shall be able to receive and process a Vehicle id request and send a Vehicle id
          response.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Linking all feature requirements to the single top-level
          requirement brings clear benefits and splitting them up would only increase complexity
          without any real improvements.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00059</srcid><srcstatus/><internalId>151</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00060</srcid><srcstatus/><internalId>152</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00061</srcid><srcstatus/><internalId>153</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00062</srcid><srcstatus/><internalId>154</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00063</srcid><srcstatus/><internalId>155</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00064</srcid><srcstatus/><internalId>156</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00065</srcid><srcstatus/><internalId>157</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00066</srcid><srcstatus/><internalId>158</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00067</srcid><srcstatus/><internalId>159</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00068</srcid><srcstatus/><internalId>160</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00069</srcid><srcstatus/><internalId>161</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00070</srcid><srcstatus/><internalId>162</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00071</srcid><srcstatus/><internalId>163</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00072</srcid><srcstatus/><internalId>164</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00073</srcid><srcstatus/><internalId>165</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00074</srcid><srcstatus/><internalId>166</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00075</srcid><srcstatus/><internalId>167</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00077</srcid><srcstatus/><internalId>169</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00078</srcid><srcstatus/><internalId>170</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00079</srcid><srcstatus/><internalId>171</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00080</srcid><srcstatus/><internalId>172</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00081</srcid><srcstatus/><internalId>173</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00082</srcid><srcstatus/><internalId>174</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00083</srcid><srcstatus/><internalId>175</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00084</srcid><srcstatus/><internalId>176</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00086</srcid><srcstatus/><internalId>178</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00087</srcid><srcstatus/><internalId>179</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00088</srcid><srcstatus/><internalId>180</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00089</srcid><srcstatus/><internalId>181</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R23-11.SWS_DoIP_00074</srcid><srcstatus/><internalId>457</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R23-11.SWS_DoIP_00075</srcid><srcstatus/><internalId>458</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R23-11.SWS_DoIP_00077</srcid><srcstatus/><internalId>459</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R23-11.SWS_DoIP_00078</srcid><srcstatus/><internalId>460</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>689</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support of entity status response">
    <specobject>
      <id>DoIP.dsn.Func0122.DiagEntityStatus</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1390</sourceline>
      <version>1</version>
      <description>
          DoIP shall be able to receive and process an entity status request and send an Diag Entity
          Status response.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00094</srcid><srcstatus/><internalId>186</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00095</srcid><srcstatus/><internalId>187</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00096</srcid><srcstatus/><internalId>188</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00097</srcid><srcstatus/><internalId>189</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00098</srcid><srcstatus/><internalId>190</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00099</srcid><srcstatus/><internalId>191</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00100</srcid><srcstatus/><internalId>192</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>690</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support of Handle ID Wizard">
    <specobject>
      <id>DoIP.dsn.Func0123.HandleIdWizard</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1406</sourceline>
      <version>1</version>
      <description>
          DOIP shall support Handle ID wizard for DoIPPduRRxTxPduId,
          DoIPUdpVehicleAnnouncementConnection\DoIPSoAdUdpVehicleAnnouncementTxPduId,
          DoIPTcpConnection\DoIPSoAdRxTxPduId and
          DoIPUdpConnection\DoIPSoAdRxTxPduId.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.HandleIDWizard</srcid><srcstatus/><internalId>10</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>691</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Release Remote Address of UDP Socket Connections">
    <specobject>
      <id>DoIP.dsn.Func0124.UdpReleaseRemoteAddr</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1424</sourceline>
      <version>1</version>
      <description>
          DoIP shall ensure that UDP socket connection get released if
          request was received from a tester.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0127.EB.DeadlineMonitoring</srcid><srcstatus/><internalId>696</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.IfTxConfirmation</srcid><srcstatus/><internalId>710</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.GetSoConId_NOK</srcid><srcstatus/><internalId>711</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse</srcid><srcstatus/><internalId>712</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.IfTransmitNotOk</srcid><srcstatus/><internalId>713</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.MissingIfTxConfirmation</srcid><srcstatus/><internalId>714</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>692</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="User callout function to indicate received VID request">
    <specobject>
      <id>DoIP.dsn.Func0125.VIDRequestUserCallout</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1440</sourceline>
      <version>1</version>
      <description>
          DoIP shall support a user callout function to indicate a received VID request.
        </description>
      <comment>Functionality requested via ASCCR-104 as EB extension.</comment>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0125.Config.DoIPVIDRequestReceivedCallback</srcid><srcstatus/><internalId>791</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0125.Config.DoIPVIDRequestReceived</srcid><srcstatus/><internalId>792</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0125.UserVIDRequestReceived_Syntax</srcid><srcstatus/><internalId>793</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0125.Call_User_VIDRequestReceived</srcid><srcstatus/><internalId>794</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>693</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Secure Connection">
    <specobject>
      <id>DoIP.dsn.Func0126.SecureConnection</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1456</sourceline>
      <version>1</version>
      <description>
          DoIP shall support the functionality to reject Routing activation message that requests
          secured Tcp connection when received on an unsecured one.
        </description>
      <comment>
          Functionality described in Autosar RFC AR-3349 and specified in DoIP SWS R19_11.
        </comment>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00294</srcid><srcstatus/><internalId>348</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00295</srcid><srcstatus/><internalId>349</internalId></linkedfrom><linkedfrom><srcid>DoIP.ECUC_DoIP_00096</srcid><srcstatus/><internalId>445</internalId></linkedfrom><linkedfrom><srcid>DoIP.ECUC_DoIP_00097</srcid><srcstatus/><internalId>446</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.XDM.SecureConnectionNotAllowed</srcid><srcstatus/><internalId>945</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.XDM.SecureRoutingActivationRequiresSecuredConnection</srcid><srcstatus/><internalId>946</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.XDM.CheckSecuredSocketConnection</srcid><srcstatus/><internalId>948</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>694</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Get and Reset Measurement Data">
    <specobject>
      <id>DoIP.dsn.Func0126.EB.GetAndResetMeasurementData</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1475</sourceline>
      <version>1</version>
      <description>
          DoIP shall support reading and resetting of measurement data for diagnostic purposes.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Linking all feature requirements to the single top-level
          requirement brings clear benefits and splitting them up would only increase complexity
          without any real improvements.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0126.EB.DoIP_GetAndResetMeasurementData</srcid><srcstatus/><internalId>811</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementDataApi</srcid><srcstatus/><internalId>812</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementDataIndex</srcid><srcstatus/><internalId>813</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0126.EB.DoIPDroppedGenericHeaderFrames</srcid><srcstatus/><internalId>814</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0126.EB.DoIPDroppedDiagnosticMessages</srcid><srcstatus/><internalId>815</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_NOT_OK</srcid><srcstatus/><internalId>816</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_Reset</srcid><srcstatus/><internalId>817</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_ResetAll</srcid><srcstatus/><internalId>818</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_NoOverrun</srcid><srcstatus/><internalId>819</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_DataPtr</srcid><srcstatus/><internalId>820</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_Uninit</srcid><srcstatus/><internalId>821</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_Count</srcid><srcstatus/><internalId>822</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_Conf</srcid><srcstatus/><internalId>823</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_MeasurementIdxType</srcid><srcstatus/><internalId>824</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>695</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Deadline Monitoring">
    <specobject>
      <id>DoIP.dsn.Func0127.EB.DeadlineMonitoring</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1495</sourceline>
      <version>1</version>
      <description>
          DoIP uses different timers per UDP and TCP connection during its operation.
          In order to save processing time deadline monitoring shall be used instead of maintaining
          and running each timer separately.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0127.DeadlineMonitoring</srcid><srcstatus/><internalId>829</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>696</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Sending of Diagnostic message negative acknowledge responses">
    <specobject>
      <id>DoIP.dsn.Func0128.EB.DoIPResponseBeforeRoutingActivation</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1518</sourceline>
      <version>1</version>
      <description>
          DoIP shall support optional sending of Diagnostic message negative acknowledge responses
          before connection is in ISO 13400 connection state "Registered[Routing Active]" - i.e. at
          least one routing activation was successfully performed including authentication and
          confirmation functions if configured - with configuration parameter
          ResponseBeforeRoutingActivation.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00127</srcid><srcstatus/><internalId>218</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.DiagMsgNack_RouteInactive_SourceAddressInUse</srcid><srcstatus/><internalId>729</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0128.Config.DoIPResponseBeforeRoutingActivation_Conf</srcid><srcstatus/><internalId>830</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0128.SWS_DoIP_00127</srcid><srcstatus/><internalId>831</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>697</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Post-build selectable variant handling">
    <specobject>
      <id>DoIP.dsn.Func0129.EB.PostBuildSelectable</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1537</sourceline>
      <version>1</version>
      <description>
          DoIP shall support post-build configuration of multiple variants.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0129.EB.PostBuildSelectable.DoIPEid</srcid><srcstatus/><internalId>839</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0129.EB.PostBuildSelectable.DoIPLogicalAddress</srcid><srcstatus/><internalId>840</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0129.EB.PostBuildSelectable.DoIPTargetAddressValue</srcid><srcstatus/><internalId>841</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</srcid><srcstatus/><internalId>866</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <fulfilledby>
        <ffbObj>
          <ffbId>DoIP.EB.PBSelectable.FileName</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>482</internalId></ffbObj>
        <ffbObj>
          <ffbId>DoIP.EB.PBSelectable.TypeName</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>483</internalId></ffbObj>
        <ffbObj>
          <ffbId>DoIP.EB.PBSelectable.Master</ffbId>
          <ffbType>swurs</ffbType>
          <ffbVersion>1</ffbVersion>
        <ffbLinkstatus>linked</ffbLinkstatus><ffbLinkerror/><ffbObjcovstatus>covered</ffbObjcovstatus><internalId>484</internalId></ffbObj>
      <containerCovstatus>covered</containerCovstatus></fulfilledby>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>698</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Closing and resetting TCP connections">
    <specobject>
      <id>DoIP.dsn.Func0130.TcpCloseConnection</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1569</sourceline>
      <version>1</version>
      <description>
          DoIP shall be able to close TCP connection in two ways:
          1) As a graceful (soft) closure, where both sender and receiver agree on closing the
             session (closure with FIN flag). This is accomplished by calling
             SoAd_CloseSoCon(Abort = FALSE).
             This mechanism shall be used when DoIP_ActivationLineSwitch() with Active set to FALSE
             is called, or when DoIP NACK message shall be transmitted along with connection closure.
             This ensures NACK message is received and processed by a Tester.
          2) As an abrupt TCP connection reset (closure with RST flag). This is accomplished by
             calling SoAd_CloseSoCon(Abort = TRUE). This mechanism shall be used in all other cases,
             e.g. Alive check or Inactivity timeout, etc.
          Closing with FIN shall be optional with DoIPEnableTcpClosureWithFIN configuration switch.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.AliveCheckResp.ConnRegistered</srcid><srcstatus/><internalId>79</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.DoIPEnableTcpClosureWithFIN_Conf</srcid><srcstatus/><internalId>80</internalId></linkedfrom><linkedfrom><srcid>DoIP.ASR_R21-11.SWS_DoIP_00358</srcid><srcstatus/><internalId>451</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0101.EB.SWS_DoIP_00234</srcid><srcstatus/><internalId>789</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0130.EB.SWS_DoIP_00058</srcid><srcstatus/><internalId>846</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>699</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support Transmission of Diagnostic Messages">
    <specobject>
      <id>DoIP.dsn.Func0131.DiagMsgTx</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1594</sourceline>
      <version>1</version>
      <description>
          DoIP shall support transmission of diagnostic messages from upper layer initiated
          with DoIP_TpTransmit() call.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Linking all feature requirements to the single top-level
          requirement brings clear benefits and splitting them up would only increase complexity
          without any real improvements.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00130</srcid><srcstatus/><internalId>221</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00131</srcid><srcstatus/><internalId>222</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00226</srcid><srcstatus/><internalId>298</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00228</srcid><srcstatus/><internalId>299</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00232</srcid><srcstatus/><internalId>303</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00233</srcid><srcstatus/><internalId>304</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00254</srcid><srcstatus/><internalId>317</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0131.DoIP_TpTransmit.TxConfirmationContext</srcid><srcstatus/><internalId>842</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0131.ProcessQueuedTxRequests</srcid><srcstatus/><internalId>843</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0131.EB.SWS_DoIP_00231</srcid><srcstatus/><internalId>844</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0131.EB.SWS_DoIP_00230</srcid><srcstatus/><internalId>845</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>700</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support Transmission of Non Diagnostic Messages">
    <specobject>
      <id>DoIP.dsn.Func0132.NonDiagMsgTx</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1615</sourceline>
      <version>1</version>
      <description>
          DoIP shall support transmission of non diagnostic messages:
          diagnostic positive/negative acknowledge message (ACK/NACK),
          Routing activation response and Alive check request messages.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00220</srcid><srcstatus/><internalId>293</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00223</srcid><srcstatus/><internalId>295</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00224</srcid><srcstatus/><internalId>296</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00225</srcid><srcstatus/><internalId>297</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00229</srcid><srcstatus/><internalId>300</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>701</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="External APIs for closing and resetting TCP connections">
    <specobject>
      <id>DoIP.dsn.Func0133.TcpClosureAPIs</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1632</sourceline>
      <version>1</version>
      <description>
          DoIP shall provide a set of APIs to allow an upper layer to disconnect testers by closing
          its TCP connection.
          Both closure methods, with FIN and RST flags, shall be supported.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Linking all feature requirements to the single top-level
          requirement brings clear benefits and splitting them up would only increase complexity
          without any real improvements.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.Det.GetSoConIdFromTxPduId.Uninit</srcid><srcstatus/><internalId>718</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.Det.GetSoConIdFromTxPduId.SoConIdPtr.Invalid</srcid><srcstatus/><internalId>719</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.Det.GetSoConIdFromTxPduId.TxPduId.Invalid</srcid><srcstatus/><internalId>720</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.Det.GetSoConIdFromRxPduId.Uninit</srcid><srcstatus/><internalId>721</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.Det.GetSoConIdFromRxPduId.SoConIdPtr.Invalid</srcid><srcstatus/><internalId>722</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.Det.GetSoConIdFromRxPduId.RxPduId.Invalid</srcid><srcstatus/><internalId>723</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.Det.DisconnectTester.Uninit</srcid><srcstatus/><internalId>724</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0133.API.DoIP_DisconnectTester</srcid><srcstatus/><internalId>847</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0133.MainFunctionClosure</srcid><srcstatus/><internalId>848</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0133.API.DoIP_GetSoConIdFromRxPduId</srcid><srcstatus/><internalId>849</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0133.API.DoIP_GetSoConIdFromTxPduId</srcid><srcstatus/><internalId>850</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0133.DoIPConnectionControl_Conf</srcid><srcstatus/><internalId>851</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>702</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support for reporting security events to IdsM">
    <specobject>
      <id>DoIP.dsn.Func0134.SecurityEventReporting</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1654</sourceline>
      <version>1</version>
      <description>
          DoIP shall report to the IdsM respective security events via the defined interface.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Linking all feature requirements to the single top-level
          requirement brings clear benefits and splitting them up would only increase complexity
          without any real improvements.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0134.Config.DoIPEnableSecurityEventReporting</srcid><srcstatus/><internalId>852</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0134.EB.DoIPSecurityEventRefs</srcid><srcstatus/><internalId>853</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_UDP_INV_MSG</srcid><srcstatus/><internalId>854</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0134.EB.DOIP_SEV_VEHICLE_ID_RESP_TX</srcid><srcstatus/><internalId>855</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0134.EB.DOIP_SEV_ENTITY_STATUS_RESP_TX</srcid><srcstatus/><internalId>856</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0134.EB.DOIP_SEV_POWER_MODE_RESP_TX</srcid><srcstatus/><internalId>857</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_TCP_GEN_HDR_ERR</srcid><srcstatus/><internalId>858</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0134.EB.DOIP_SEV_ROUTING_ACT_RESP_TX</srcid><srcstatus/><internalId>859</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0134.EB.DOIP_SEV_ALIVE_RESP_WRONG_SA_RESET</srcid><srcstatus/><internalId>860</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0134.EB.DOIP_SEV_ALIVE_RESP</srcid><srcstatus/><internalId>861</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_DIAG_MSG_DIAG_HDR</srcid><srcstatus/><internalId>862</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_DIAG_MSG_UL</srcid><srcstatus/><internalId>863</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0134.EB.DOIP_SEC_TCP_CONN_RESET_INACTIVITY_TIMER</srcid><srcstatus/><internalId>864</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0134.EB.DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER</srcid><srcstatus/><internalId>865</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</srcid><srcstatus/><internalId>866</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.XDM.DoIPSecurityEventRefs.Added</srcid><srcstatus/><internalId>942</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.XDM.DoIPSecurityEventRefs.Valid</srcid><srcstatus/><internalId>943</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.XDM.DoIPSecurityEventRefs.Unique</srcid><srcstatus/><internalId>944</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>703</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Protocol Versions">
    <specobject>
      <id>DoIP.dsn.Func0135.ProtocolVersions</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1674</sourceline>
      <version>1</version>
      <description>
          DoIP shall support DoIP protocol version 2 (ISO13400-2:2012) and 3 (ISO13400-2:2019)
          as well as an AutoSense mixed mode to support new and old testers in parallel.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Linking all feature requirements to the single top-level
          requirement brings clear benefits and splitting them up would only increase complexity
          without any real improvements.
        </furtherinfo>
      <comment>
          See AUTOSAR RFC AR-112118.
        </comment>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0135.DoIPProtocolVersion_Conf</srcid><srcstatus/><internalId>867</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0135.DoIP_ISO13400_2_2012_Conf</srcid><srcstatus/><internalId>868</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0135.DoIP_ISO13400_2_2019_Conf</srcid><srcstatus/><internalId>869</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0135.DoIPSecuredCommunicationForAllProtocolVersions_Conf</srcid><srcstatus/><internalId>870</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</srcid><srcstatus/><internalId>871</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</srcid><srcstatus/><internalId>872</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion</srcid><srcstatus/><internalId>873</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0135.Tx.Udp.DefaultProtocolVersionResponse</srcid><srcstatus/><internalId>874</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion</srcid><srcstatus/><internalId>875</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0135.Tx.Tcp.ProtocolVersion</srcid><srcstatus/><internalId>876</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0135.Tx.Tcp.InitProtocolVersion</srcid><srcstatus/><internalId>877</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0135.Tx.Tcp.InvalidProtocolVersion</srcid><srcstatus/><internalId>878</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0135.SecComForAllProtocolVersions</srcid><srcstatus/><internalId>879</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0135.SecComForAllProtocolVersions.SecureTcpCon</srcid><srcstatus/><internalId>880</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0135.NoSecureComForAllProtVersions.SecureRoute</srcid><srcstatus/><internalId>881</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0135.NoSecureComForAllProtVersions.SecureTcpCon</srcid><srcstatus/><internalId>882</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.XDM.SecureConnectionNotAllowed</srcid><srcstatus/><internalId>945</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.XDM.NoProtocolVersion</srcid><srcstatus/><internalId>947</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>704</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Trigger vehicle announcement">
    <specobject>
      <id>DoIP.dsn.Func0136.TriggerAnnouncement</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1698</sourceline>
      <version>1</version>
      <description>
          DoIP shall support functionality to trigger transmission of Vehicle announcement messages
          via API DoIP_TriggerVehicleAnnouncement(), when parameter DoIPInterfaceAnnouncementStart
          is configured to DOIP_ONTRIGGER_ANNOUNCE.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.SWS_DoIP_00299</srcid><srcstatus/><internalId>92</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00297</srcid><srcstatus/><internalId>351</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00298</srcid><srcstatus/><internalId>352</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00299</srcid><srcstatus/><internalId>353</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00304</srcid><srcstatus/><internalId>356</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00305</srcid><srcstatus/><internalId>357</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_91002</srcid><srcstatus/><internalId>359</internalId></linkedfrom><linkedfrom><srcid>DoIP.ECUC_DoIP_00099</srcid><srcstatus/><internalId>448</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.Det.TriggerVehicleAnnouncement.InterfaceAnnouncementStart.Invalid</srcid><srcstatus/><internalId>725</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0137.Interfaces</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>706</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>705</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Interfaces">
    <specobject>
      <id>DoIP.dsn.Func0137.Interfaces</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1721</sourceline>
      <version>1</version>
      <description>
          DoIP shall support multiple interfaces representing VLANs to support communication with
          internal and external testers on separated interfaces.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Linking all feature requirements to the single top-level
          requirement brings clear benefits and splitting them up would only increase complexity
          without any real improvements.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.ECUC_DoIP_00100</srcid><srcstatus/><internalId>449</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0136.TriggerAnnouncement</srcid><srcstatus/><internalId>705</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>706</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Activation and deactivation of DoIPInterface internal tester via control internal interface.">
    <specobject>
      <id>DoIP.dsn.Func0138.EB.ControlInternalInterface</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1742</sourceline>
      <version>1</version>
      <description>
          DoIP shall provide a functionality to enable/disable DoIPInterface connected to internal tester.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Linking all feature requirements to the single top-level
          requirement brings clear benefits and splitting them up would only increase complexity
          without any real improvements.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.DoIP_ControlInternalInterface</srcid><srcstatus/><internalId>84</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.DoIP_ControlInternalInterface.ChangeStatus</srcid><srcstatus/><internalId>85</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00204</srcid><srcstatus/><internalId>281</internalId></linkedfrom><linkedfrom><srcid>DoIP.SWS_DoIP_00296</srcid><srcstatus/><internalId>350</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.Det.ControlInternalInterface.ActivePtr.Invalid</srcid><srcstatus/><internalId>726</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.Det.ControlInternalInterface.InterfaceId.Invalid</srcid><srcstatus/><internalId>727</internalId></linkedfrom><linkedfrom><srcid>DoIP.EB.Det.ControlInternalInterface.DoIPInterfaceActLineCtrl.Invalid</srcid><srcstatus/><internalId>728</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0101.EB.SWS_DoIP_00234</srcid><srcstatus/><internalId>789</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0101.EB.SWS_DoIP_00235</srcid><srcstatus/><internalId>790</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>707</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support of Routing Activation Callback Functions Requirement">
    <specobject>
      <id>DoIP.dsn.Func0129.EB.RoutingActivationCallback</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>1955</sourceline>
      <version>2</version>
      <description>
                DoIP shall support user callback functions to report successful routing activation, modify the routing activation
                response code and initiated Tcp connection reset.
              </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0129.DoIPRoutingActivationCallbackList</srcid><srcstatus/><internalId>832</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0129.User_RoutingActivationCallback</srcid><srcstatus/><internalId>833</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0129.RoutingActivationCallback_Call</srcid><srcstatus/><internalId>834</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0129.RoutingActivationCallback_GetSoConId</srcid><srcstatus/><internalId>835</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0129.RoutingActivationCallback_TpTransmit</srcid><srcstatus/><internalId>836</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0129.RoutingActivationCallback_RespCode_Change</srcid><srcstatus/><internalId>837</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0129.RoutingActivationCallback_RespCode_NoChange</srcid><srcstatus/><internalId>838</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>708</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support of Report Issue Callout Function Requirement">
    <specobject>
      <id>DoIP.dsn.Func0136.EB.ReportIssueCallout</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>2006</sourceline>
      <version>1</version>
      <description>
                DoIP shall support user callout function to report dropped frames (DoIP messages).
              </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.dsn.Func0136.DoIPReportIssueCallout_Conf</srcid><srcstatus/><internalId>883</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0136.User_DoIPReportIssue</srcid><srcstatus/><internalId>884</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0136.DoIP_ReportIssueContextType</srcid><srcstatus/><internalId>885</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0136.DoIP_ReportIdType</srcid><srcstatus/><internalId>886</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0136.ReportId.ContextData</srcid><srcstatus/><internalId>887</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0136.ReportIssueCallout_Call</srcid><srcstatus/><internalId>888</internalId></linkedfrom><linkedfrom><srcid>DoIP.dsn.Func0136.ReportIssueCallout_GetSoConId</srcid><srcstatus/><internalId>889</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>709</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functional requirements">
    <specobject>
      <id>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.IfTxConfirmation</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>5216</sourceline>
      <version>1</version>
      <description>
          When DoIP_SoAdIfTxConfirmation() is called to confirm PDU transmission on UDP connection,
          DoIP shall call SoAd_ReleaseRemoteAddr() to release the remote IP address and port for a
          related socket connection.
        </description>
      <comment>
          It is required for the SoAd feature UDP retry to not release the remote address
          before the transmission is finished.
        </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03005_VehicleIdentificationRequest</srcid><srcstatus/><internalId>1073</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>710</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.GetSoConId_NOK</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>5241</sourceline>
      <version>1</version>
      <description>
          If SoAd_GetSoConId() is called to be used for SoAd_ReleaseRemoteAddr() and
          the attempt to retrieve SoConId fails, the call to
          SoAd_ReleaseRemoteAddr() is omitted.
        </description>
      <comment>
          No error handling possible in this case. This case is not expected since
          SoAd MCG ensures that any valid TxPduId will have a valid SoConId.
        </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03087_SoAdIfTxConfirmation_NOK</srcid><srcstatus/><internalId>1152</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>711</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>5266</sourceline>
      <version>1</version>
      <description>
          If an incoming UDP frame does not trigger a call to SoAd_IfTransmit(),
          SoAd_ReleaseRemoteAddr() shall be called.
        </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03008_VehicleIdentificationRequestEID_NOTOK</srcid><srcstatus/><internalId>1076</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03042_PowerMode_Ignore</srcid><srcstatus/><internalId>1109</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03052_Udp_IgnoreGenericNack</srcid><srcstatus/><internalId>1118</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03053_Udp_IgnoreVehicleAnnouncementMsg</srcid><srcstatus/><internalId>1119</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03063_IfRxIndication_FrameTooSmall</srcid><srcstatus/><internalId>1128</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03070_IfRxIndication_ActivationLineInactive</srcid><srcstatus/><internalId>1135</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05002_VIR_VIN_UserGetVin_NoMatch</srcid><srcstatus/><internalId>1215</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05022_VIR_VIN_UserGetVin_NOK</srcid><srcstatus/><internalId>1235</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>712</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.IfTransmitNotOk</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>5287</sourceline>
      <version>1</version>
      <description>
          If an incoming UDP frame triggers a call to SoAd_IfTransmit()
          and it returns other than E_OK, then
          SoAd_ReleaseRemoteAddr() shall be called.
        </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03096_UdpReleaseRemoteAddr_IfTransmitNotOk</srcid><srcstatus/><internalId>1161</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>713</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.MissingIfTxConfirmation</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>5309</sourceline>
      <version>2</version>
      <description>
          If an incoming UDP triggers SoAd_IfTransmit() and after 50
          main functions no DoIP_SoAdIfTxConfirmation() was called, then
          SoAd_ReleaseRemoteAddr() shall be called for that specific UDP connection.
        </description>
      <comment>
          Note: Omitted DoIP_SoAdIfTxConfirmation occurs if
          transmission fails during UDP retry.
        </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03097_UdpReleaseRemoteAddr_MissingIfTxConfirmation</srcid><srcstatus/><internalId>1162</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03100_IfTxConfirmation_After_UdpReleaseRemoteAddr</srcid><srcstatus/><internalId>1165</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03101_IfTxConfirmation_ForSecondUDPConnection_1</srcid><srcstatus/><internalId>1166</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03102_IfTxConfirmation_ForSecondUDPConnection_2</srcid><srcstatus/><internalId>1167</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>714</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="DET reporting EB requirements">
    <specobject>
      <id>DoIP.EB.Det.ActivationLineSwitch.ActivePtr.Invalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11104</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: The function shall check the validity of the
            ActivePtr and call the DET with DOIP_E_PARAM_POINTER error id if it is a NULL_PTR.
          </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01022_ActivationLineSwitch_InvalidParam</srcid><srcstatus/><internalId>1049</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0101.ActivationLineSwitch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>715</internalId></specobject>
    <specobject>
      <id>DoIP.EB.Det.SoAdIfRxIndication.SduDataPtr.Invalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11125</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: The function shall check the validity of the
            SduDataPtr and call the DET with DOIP_E_PARAM_POINTER error id if it is a
            NULL_PTR.
          </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01007_SoAdIfRxIndication_InvalidParam</srcid><srcstatus/><internalId>1038</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>716</internalId></specobject>
    <specobject>
      <id>DoIP.EB.Det.SoAdTpCopyRxData.SduDataPtr.Invalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11141</sourceline>
      <version>1</version>
      <description>
            DoIP_SoAdTpCopyRxData() shall check that in case when SduLength is not 0, SduDataPtr is
            not a NULL_PTR. If the check fails, the function shall raise the development error
            DOIP_E_PARAM_POINTER. Otherwise, if DET is not enabled, BUFREQ_E_NOT_OK is returned.
          </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01005_SoAdTpCopyRxData_InvalidParam</srcid><srcstatus/><internalId>1036</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>717</internalId></specobject>
    <specobject>
      <id>DoIP.EB.Det.GetSoConIdFromTxPduId.Uninit</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11157</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: The function DoIP_GetSoConIdFromTxPduId()
            shall check that the service DoIP_Init() was previously called. If the check fails,
            the function shall raise the development error DOIP_E_UNINIT and return E_NOT_OK.
          </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0133.TcpClosureAPIs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>702</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>718</internalId></specobject>
    <specobject>
      <id>DoIP.EB.Det.GetSoConIdFromTxPduId.SoConIdPtr.Invalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11179</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: The function DoIP_GetSoConIdFromTxPduId()
            shall check if the SoConIdPtr is not a NULL_PTR. If the check fails the function shall
            raise the development error DOIP_E_PARAM_POINTER and return E_NOT_OK.
          </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01019_GetSoConIdFromTxPduId_InvalidParam</srcid><srcstatus/><internalId>1046</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0133.TcpClosureAPIs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>702</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>719</internalId></specobject>
    <specobject>
      <id>DoIP.EB.Det.GetSoConIdFromTxPduId.TxPduId.Invalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11201</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: The function DoIP_GetSoConIdFromTxPduId()
            shall check if the TxPduId matches a configured DoIPPduRTxPduId. If the check fails
            the function shall raise the development error DOIP_E_INVALID_PDU_SDU_ID and
            return E_NOT_OK.
          </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01019_GetSoConIdFromTxPduId_InvalidParam</srcid><srcstatus/><internalId>1046</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0133.TcpClosureAPIs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>702</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>720</internalId></specobject>
    <specobject>
      <id>DoIP.EB.Det.GetSoConIdFromRxPduId.Uninit</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11224</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: The function DoIP_GetSoConIdFromRxPduId()
            shall check that the service DoIP_Init() was previously called. If the check fails,
            the function shall raise the development error DOIP_E_UNINIT and return E_NOT_OK.
          </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0133.TcpClosureAPIs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>702</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>721</internalId></specobject>
    <specobject>
      <id>DoIP.EB.Det.GetSoConIdFromRxPduId.SoConIdPtr.Invalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11246</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: The function DoIP_GetSoConIdFromRxPduId()
            shall check if the SoConIdPtr is not a NULL_PTR. If the check fails the function shall
            raise the development error DOIP_E_PARAM_POINTER and return E_NOT_OK.
          </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01020_GetSoConIdFromRxPduId_InvalidParam</srcid><srcstatus/><internalId>1047</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0133.TcpClosureAPIs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>702</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>722</internalId></specobject>
    <specobject>
      <id>DoIP.EB.Det.GetSoConIdFromRxPduId.RxPduId.Invalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11268</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: The function DoIP_GetSoConIdFromRxPduId()
            shall check if the RxPduId matches a configured DoIPPduRRxPduId. If the check fails
            the function shall raise the development error DOIP_E_INVALID_PDU_SDU_ID and
            return E_NOT_OK.
          </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01020_GetSoConIdFromRxPduId_InvalidParam</srcid><srcstatus/><internalId>1047</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0133.TcpClosureAPIs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>702</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>723</internalId></specobject>
    <specobject>
      <id>DoIP.EB.Det.DisconnectTester.Uninit</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11291</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: The function DoIP_DisconnectTester()
            shall check that the service DoIP_Init() was previously called. If the check fails,
            the function shall raise the development error DOIP_E_UNINIT and return E_NOT_OK.
          </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0133.TcpClosureAPIs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>702</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>724</internalId></specobject>
    <specobject>
      <id>DoIP.EB.Det.TriggerVehicleAnnouncement.InterfaceAnnouncementStart.Invalid</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_DoIP_R20-11</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11313</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled DoIP_TriggerVehicleAnnouncement() shall check
            if the interface identified by InterfaceId is configured with DoIPInterfaceAnnouncementStart
            set to DOIP_ONTRIGGER_ANNOUNCE.
            If the check fails the function shall raise the development error DOIP_E_INVALID_PARAMETER.
          </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01021_TriggerVehicleAnnouncement_InvalidParam</srcid><srcstatus/><internalId>1048</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.TriggerAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>705</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>725</internalId></specobject>
    <specobject>
      <id>DoIP.EB.Det.ControlInternalInterface.ActivePtr.Invalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11338</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled DoIP_ControlInternalInterface() shall check
            the validity of the ActivePtr and call the DET with DOIP_E_PARAM_POINTER error id if it is
            a NULL_PTR.
          </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01023_ControlInternalInterface_InvalidParam1</srcid><srcstatus/><internalId>1050</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0138.EB.ControlInternalInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>707</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>726</internalId></specobject>
    <specobject>
      <id>DoIP.EB.Det.ControlInternalInterface.InterfaceId.Invalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11360</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled DoIP_ControlInternalInterface() shall check
            the validity of the interface identified by InterfaceId actually exists. If the check fails,
            the function shall raise the development error DOIP_E_INVALID_PARAMETER.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01023_ControlInternalInterface_InvalidParam1</srcid><srcstatus/><internalId>1050</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0138.EB.ControlInternalInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>707</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>727</internalId></specobject>
    <specobject>
      <id>DoIP.EB.Det.ControlInternalInterface.DoIPInterfaceActLineCtrl.Invalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11381</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled DoIP_ControlInternalInterface() shall check
            the validity of the DoIPInterfaceActLineCtrl and call the DET with DOIP_E_INVALID_PARAMETER
            error id if it is set to TRUE.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01024_ControlInternalInterface_InvalidParam2</srcid><srcstatus/><internalId>1051</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0138.EB.ControlInternalInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>707</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>728</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Negative Response Messages (NACK) EB requirements">
    <specobject>
      <id>DoIP.EB.DiagMsgNack_RouteInactive_SourceAddressInUse</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11412</sourceline>
      <version>2</version>
      <description>
          When configuration parameter DoIPResponseBeforeRoutingActivation is set to
          DOIP_ENABLE_ALL_DIAG_NACK and the DoIP module receives a valid diagnostic message and the
          according "Source address" is registered at another Tcp connection the DoIP module shall
          send a diagnostic message negative acknowledge message with the diagnostic message negative
          acknowledge code set to 0x06 (Route inactive). Additionally the message shall be
          discarded.
          When DoIPResponseBeforeRoutingActivation is set to DOIP_DISABLE_DIAG_NACK_0x06 the received
          message shall be discarded without sending diagnostic negative acknowledge message.

          The requirement is valid for both channels with AUTOMATIC and MANUAL routing activation.
          Note: Valid diagnostic message here means that DoIP channel exists with configured
          Source and Target address that match the values received in Diagnostic message header.
        </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
          - Use case 1) common configuration:
            - DoIPChannel_0(SA_0, TA_0) configured with MANUAL routing activation.
            - Routing activation message (SA_0) is received on TcpCon_0, i.e. SA_0 is registered on
              TcpCon_0 and Channel_0 is active and assigned to TcpCon_0.
          - Use case 1.1)
            - DoIPResponseBeforeRoutingActivation is set to DOIP_ENABLE_ALL_DIAG_NACK
            - Diagnostic message (SA_0, TA_0) is received on a TcpCon_1, which has no source
              address registered.
            * Test case: DoIP_ConTest03098_DiagMsg_SA_USED_NACK6_ROUTE_INACTIVE_3
            It is expected that DoIP discards received message and transmits diagnostic negative
            acknowledge message with the  diagnostic message negative acknowledge code set to 0x06.
          - Use case 1.2)
            - DoIPResponseBeforeRoutingActivation is set to DOIP_DISABLE_DIAG_NACK_0x06
            - Diagnostic message (SA_0, TA_0) is received on a TcpCon_1, which is not registered.
            It is expected that DoIP silently discards received message without transmitting NACK
            message.
            * Test case: DoIP_ConTest03110_DiagMsg_SA_USED_NONACK_ROUTE_INACTIVE_4
          - Use case 2) common configuration:
            - DoIPChannel_0(SA_0, TA_0) configured with AUTOMATIC routing activation.
            - Diagnostic message (SA_0, TA) received on TcpCon_0, i.e. SA_0 is registered on
              TcpCon_0 and Channel_0 is active and assigned to TcpCon_0.
          - Use case 2.1)
            - DoIPResponseBeforeRoutingActivation is set to DOIP_ENABLE_ALL_DIAG_NACK
            - Diagnostic message (SA_0, TA_0) is received on a TcpCon_1, which has no source
              address registered.
            * Test case: DoIP_ConTest09020_DiagMsg_SA_USED_NACK6_ROUTE_INACTIVE_5
            It is expected that DoIP discards received message and transmits diagnostic negative
            acknowledge message with the diagnostic message negative acknowledge code set to 0x06.
          - Use case 2.2)
            - DoIPResponseBeforeRoutingActivation is set to DOIP_DISABLE_DIAG_NACK_0x06
            - Diagnostic message (SA_0, TA_0) is received on a TcpCon_1, which is not registered.
            It is expected that DoIP silently discards received message without transmitting NACK
            message.
            * Test case: DoIP_ConTest09023_DiagMsg_SA_USED_NONACK_ROUTE_INACTIVE_6
        </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03098_DiagMsg_SA_USED_NACK6_ROUTE_INACTIVE_3</srcid><srcstatus/><internalId>1163</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03110_DiagMsg_SA_USED_NONACK_ROUTE_INACTIVE_4</srcid><srcstatus/><internalId>1175</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09020_DiagMsg_SA_USED_NACK6_ROUTE_INACTIVE_5</srcid><srcstatus/><internalId>1310</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09023_DiagMsg_SA_USED_NONACK_ROUTE_INACTIVE_6</srcid><srcstatus/><internalId>1313</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0115.DiagMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0128.EB.DoIPResponseBeforeRoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>697</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>729</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>DoIP.swdd.ROMConsumption_RefCfg</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11599</sourceline>
      <version>1</version>
      <description>
                  The ROM consumption for the reference configuration for code and configuration
                  must not exceed 12500 bytes.
                </description>
      <rationale>
                  The defined ROM consumption is the result of all analyzed configuration
                  parameters of the reference configuration.
                  The number is based on the assumption of amount and size of analyzed configuration
                  parameters.
                </rationale>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.Manual.RAM_ROM_ConsumptionMonitoring</srcid><srcstatus/><internalId>463</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest1300_ResourceConsumption</srcid><srcstatus/><internalId>1332</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>730</internalId></specobject>
    <specobject>
      <id>DoIP.swdd.ROMMonitoring_RefCfg</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11620</sourceline>
      <version>1</version>
      <description>
                  The ROM consumption of DoIP shall be monitored for each DoIP external
                  release.
                </description>
      <verifycrit>
                  Analysis results and deviations from the calculated consumption shall be
                  analyzed and stored in
                  &lt;code&gt;asc_DoIP\test\ts5\Manual\IN\DoIP_ManTest01_ResourceConsumption\ResourceConsumption.txt&lt;/code&gt;.
                  These numbers are calculated using the &lt;code&gt;asc_DoIP\tools\GetMemoryUsage.sh&lt;/code&gt; script. Instructions 
                  on how to use this script can be found in the script itself and 
                  &lt;code&gt;asc_DoIP\test\ts5\Manual\IN\DoIP_ManTest01_ResourceConsumption\readme.txt&lt;/code&gt;.
                </verifycrit>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.Manual.RAM_ROM_ConsumptionMonitoring</srcid><srcstatus/><internalId>463</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>731</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>DoIP.swdd.RAMConsumption_RefCfg</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11679</sourceline>
      <version>1</version>
      <description>
                  The RAM consumption for the reference configuration must not exceed 500 bytes.
                </description>
      <rationale>
                  The defined RAM consumption is the result of all analyzed configuration
                  parameters of the reference configuration.
                  The number is based on the assumption of amount and size of analyzed
                  configuration parameters.
                </rationale>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.Manual.RAM_ROM_ConsumptionMonitoring</srcid><srcstatus/><internalId>463</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest1300_ResourceConsumption</srcid><srcstatus/><internalId>1332</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>732</internalId></specobject>
    <specobject>
      <id>DoIP.swdd.RAMMonitoring_RefCfg</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11699</sourceline>
      <version>1</version>
      <description>
                  The RAM consumption of DoIP shall be monitored for each DoIP external
                  release.
                </description>
      <verifycrit>
                  Analysis results and deviations from the calculated consumption shall be
                  analyzed and stored in
                  &lt;code&gt;asc_DoIP\test\ts5\Manual\IN\DoIP_ManTest01_ResourceConsumption\ResourceConsumption.txt&lt;/code&gt;.
                  These numbers are calculated using the &lt;code&gt;asc_DoIP\tools\GetMemoryUsage.sh&lt;/code&gt; script. Instructions 
                  on how to use this script can be found in the script itself and 
                  &lt;code&gt;asc_DoIP\test\ts5\Manual\IN\DoIP_ManTest01_ResourceConsumption\readme.txt&lt;/code&gt;.
                </verifycrit>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.EB.Manual.RAM_ROM_ConsumptionMonitoring</srcid><srcstatus/><internalId>463</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>733</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Diag_Msg_2_Rx_Discard_Diag_Msg</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11890</sourceline>
      <version>1</version>
      <description>Transition from the state RX_DIAG_MSG to the state RX_DISCARD_DIAG_MSG happens when all following conditions have been fulfilled:
1) DoIP_SoAdTpCopyRxData() is called 
2) PduR_DoIPCopyRxData() returns error code
3) Diagnostic message payload has not been completely received (RxDiagMsgLength &amp;gt; 0).
Since errors reported from PduR do not lead to a connection reset, SoAd buffers must be drained to prepare for the next message.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03049_DiscardDiagMsg_PDUR_BUFF_NOT_OK_2</srcid><srcstatus/><internalId>1115</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>734</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Diag_Msg_2_Rx_Diag_Msg</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11910</sourceline>
      <version>1</version>
      <description>Transition from the state RX_DIAG_MSG to the state RX_DIAG_MSG happens when all following conditions have been fulfilled:
1) DoIP_SoAdTpCopyRxData() is called 
2) PduR_DoIPCopyRxData() accepted forwarded data (returned BUFREQ_OK)
3) Diagnostic message payload has not been completely received (RxDiagMsgLength &amp;gt; 0).
Consequently DoIP updates counter of remaining payload length (RxDiagMsgLength).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03065_CopyRxData_SduLength_Oversized_2</srcid><srcstatus/><internalId>1130</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>735</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Diag_Msg_2_Rx_Ack_Conf_Wait</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11930</sourceline>
      <version>1</version>
      <description>Transition from the state RX_DIAG_MSG to the state RX_ACK_CONF_WAIT happens when all following conditions have been fulfilled:
1) DoIP_SoAdTpCopyRxData() is called;
2) Diagnostic message payload has been completely received (RxDiagMsgLength == 0).

Diagnostic message AckNackCode depends on PduR_DoIPCopyRxData() return value -&amp;gt; [POSITIVE_ACK (0), PDUR_BUF_OVFL (5), BUF_NOT_OK (8)].

Consequently DoIP will transmit Diagnostic message positive / negative acknowledge message: 
DoIP_SendTcpNonDiagMsg(AckNakcCode).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03017_QueueTxRequests</srcid><srcstatus/><internalId>1084</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>736</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Diag_Header_2_Rx_Diag_Msg</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11953</sourceline>
      <version>1</version>
      <description>Transition from the state RX_DIAG_HEADER to state RX_DIAG_MSG happens when the following conditions are fulfilled:
1) DoIP_SoAdTpCopyRxData() is called;
2) The complete diagnostic header has been received (RxBufferSize == 0);
3) Diagnostic header have been validated (ValidDiagHeader).

ValidDiagHeader:
1) Source address valid and assigned to Tcp connection;
2) Target addresses valid;
3) Route (Source address, Target address) exist and active;
4) PduR_DoIPStartOfReception() returned BUFREQ_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03017_QueueTxRequests</srcid><srcstatus/><internalId>1084</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>737</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Diag_Header_2_Rx_Diag_Header</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11978</sourceline>
      <version>1</version>
      <description>Transition from the state RX_DIAG_HEADER to state RX_DIAG_HEADER happens when DoIP_SoAdTpCopyRxData() is called and Diagnostic header is not yet completely received.
DoIP stores received data in Tcp connection Rx buffer.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>738</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Diag_Header_2_Rx_Discard_Diag_Msg</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>11995</sourceline>
      <version>1</version>
      <description>Transition from the state RX_DIAG_HEADER to the state RX_DISCARD_DIAG_MSG happens when the following conditions have been fulfilled:
1) DoIP_SoAdTpCopyRxData() is called;
2) The complete diagnostic header has been received (RxBufferSize == 0);
3) An error is detected of a kind that does not lead to a connection reset: INV_TAR_ADDR (3), PDUR_BUF_OVFL (5), ROUTE_INACTIVE (6), PDUR_BUF_NOT_OK (8).
In this case it is necessary to drain SoAd buffers in order to prepare for the next message. </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03025_DiagNackMsg_INV_TAR_ADR</srcid><srcstatus/><internalId>1092</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>739</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Diag_Header_2_Rx_Ack_Conf_Wait</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12015</sourceline>
      <version>1</version>
      <description>Transition from the state RX_DIAG_HEADER to the state RX_ACK_CONF_WAIT happens when the following conditions have been fulfilled:
1) DoIP_SoAdTpCopyRxData() is called;
2) The complete diagnostic header has been received (RxBufferSize == 0);
3) Invalid source address is detected.
This error leads to a connection reset, thus it is not necessary to drain SoAd buffers, and NACK message can be transmitted immediately with NackCode = INV_SRC_ADDR (2).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03072_DiagNackMsg_TxBlocked</srcid><srcstatus/><internalId>1137</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>740</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Diag_Header</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12035</sourceline>
      <version>1</version>
      <description>ValidDiagMsgGenHeader: ValidGenericHeader AND PayloadType == 0x8001 AND PayloadLength &amp;gt;= PL_LENGTH_DIAG_MIN (5)
ValidGenericHeader: All of the following conditions are fulfilled:
1) Protocol version and inverse protocol version are valid;
2) PayloadType in range of supported values for Tcp connection;
3) PayloadLength &amp;lt;= DoIPMaxRequestBytes.

Transition from the state RX_READY to state RX_DIAG_HEADER happens when all following conditions are fulfilled: 
1) DoIP_SoAdTpCopyRxData() is called;
2) The complete and valid generic header (ValidGenericHeader) is received (8 bytes) (RxBufferSize == 0);
3) PayloadType == 0x8001;
4) PayloadLength &amp;gt;= PL_LENGTH_DIAG_MIN (5).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03017_QueueTxRequests</srcid><srcstatus/><internalId>1084</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03025_DiagNackMsg_INV_TAR_ADR</srcid><srcstatus/><internalId>1092</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>741</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Alive_Check_Resp_2_Rx_Ready</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12061</sourceline>
      <version>1</version>
      <description>Transition from the state RX_ALIVE_CHECK_RESP to the state RX_READY happens if all following conditions are met:
1) DoIP_SoAdTpCopyRxData() is called;
2) Alive check response message payload received completely (RxBufferSize == 0);
3) Received Source address equals Source address assigned to this connection.

As an effect DoIP shall call: CheckSingleAliveCheckProcess().

CheckSingleAliveCheckProcess: Check if the connection exist that is in RX_SINGLE_ALIVE_CHECK_WAIT state competing for the received Source address. Routing activation on that connection will fail with response code SRC_IN_USE(3),
since Alive check succeeded.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09002_SAOnDifferentTcp_RESPONSE</srcid><srcstatus/><internalId>1292</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>742</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Alive_Check_Resp_2_Rx_Alive_Check_Resp</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12085</sourceline>
      <version>1</version>
      <description>Transition from the state RX_ALIVE_CHECK_RESP to the state RX_ALIVE_CHECK_RESP happens when DoIP_SoAdTpCopyRxData() is called and Alive check response message payload has not been completely received.
DoIP stores received data in a connection RxBuffer and updates counter of remaining payload length 
(RxBufferSize -=Msg.SduLength).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09005_SingleAndAllAliveCheck_Response</srcid><srcstatus/><internalId>1295</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>743</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Alive_Check_Resp_2_Rx_Offline</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12103</sourceline>
      <version>1</version>
      <description>Transition from the state RX_ALIVE_CHECK_RESP to the state RX_OFFLINE happens under following conditions:
1) DoIP_SoAdTpCopyRxData() is called;
2) Alive check response message payload received completely (RxBufferSize == 0);
3) Received Source address is different then Source address assigned to this connection.

As an effect DoIP shall call: DoIP_ResetTcpCon().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09012_AliveCheckResp_WrongSA</srcid><srcstatus/><internalId>1302</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>744</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Alive_Check_Resp</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12124</sourceline>
      <version>1</version>
      <description>ValidAliveCheckRespGenHeader: ValidGenericHeader AND PayloadType == 0x0008 AND PayloadLength == 2

Transition from the state RX_READY to state RX_ALIVE_CHECK_RESP happens when the following conditions are fulfilled: 
1) DoIP_SoAdTpCopyRxData() is called;
2) The complete and valid generic header is received (8 bytes) (RxBufferSize == 0);
3) PayloadType == 0x0008;
4) PayloadLength == 2.

Effect: RxBufferSize = 2</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09002_SAOnDifferentTcp_RESPONSE</srcid><srcstatus/><internalId>1292</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>745</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Ready</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12148</sourceline>
      <version>1</version>
      <description>Transition from the state RX_READY to state RX_READY happens when DoIP_SoAdTpCopyRxData() is called and Generic header is not yet completed.
DoIP stores received data in Tcp connection Rx buffer.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>746</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Discard_Msg</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12165</sourceline>
      <version>1</version>
      <description>DiscardMsg:(PayloadType == DOIP_PL_TYPE_GEN_HEADER_NACK) OR (Generic_header_error_detected AND (CloseConn == FALSE)* AND (PayloadLength &amp;gt; 0))

Transition from the state RX_READY to state RX_DISCARD_MSG happens when DoIP_SoAdTpCopyRxData() is called AND the complete generic header is received (8 bytes) AND any of the following conditions is fulfilled:
1) Message PayloadType == DOIP_PL_TYPE_GEN_HEADER_NACK;
OR
2) Generic header error is detected of a kind that does not lead to connection closing* AND message payload length is greater      then 0. 

In this case DoIP needs to consume the complete message from SoAd in order to free-up its buffers and prepare for the next      message reception.

*Generic header errors that apply are: UNKNOWN_PL_TYPE (1), MSG_TO_LONG (2), OUT_OF_MEMORY (3).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03054_Tcp_IgnoreGenericNack</srcid><srcstatus/><internalId>1120</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03067_CopyRxData_SduLength_Oversized_4</srcid><srcstatus/><internalId>1132</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>747</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Route_Act</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12190</sourceline>
      <version>1</version>
      <description>Transition from the state RX_READY to state RX_ROUTE_ACT happens when all following conditions are fulfilled: 
1) DoIP_SoAdTpCopyRxData() is called;
2) The complete and valid generic header is received (8 bytes) (RxBufferSize == 0);
3) PayloadType == 0x0005;
4) PayloadLength == [7, 11].

ValidRoutingActGenHeader: ValidGenericHeader AND (PayloadType == 0x0005) AND (PayloadLength == [7, 11]).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03019_RoutActResp_NACK_WRONG_SRC</srcid><srcstatus/><internalId>1086</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05015_RoutActAuthConf_PENDING_SUCCESS</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05019_RoutActAuth_Pending</srcid><srcstatus/><internalId>1232</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>748</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Ack_Conf_Wait</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12212</sourceline>
      <version>1</version>
      <description>Transition from the state RX_READY to state RX_ACK_CONF_WAIT happens when all following conditions are fulfilled: 
1) DoIP_SoAdTpCopyRxData() is called;
2) The complete generic header is received (8 bytes) (RxBufferSize == 0);
3) Generic header error is detected of a kind that leads to connection closing. No need to free SoAd buffers -&amp;gt; NACK can be sent immediately.

Generic header errors that apply are: INCORRECT_PATTERN (0), INVALID_PL_LENGTH(4).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03017_QueueTxRequests</srcid><srcstatus/><internalId>1084</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03028_Tcp_GenHeaderNack_UNKNOWN_PL_TYPE</srcid><srcstatus/><internalId>1094</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03073_GenHeaderNackMsg_TxBlocked</srcid><srcstatus/><internalId>1138</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>749</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Discard_Msg_2_Rx_Ready</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12233</sourceline>
      <version>1</version>
      <description>Transition from the state RX_DISCARD_MSG to state RX_READY happens when all of the following conditions are fulfilled:
1) DoIP_SoAdTpCopyRxData() is called;
2) The complete payload has been delivered (RxBufferSize == 0);
3) There is no need to send NACK message (NackCode == DO_NOT_SEND_NACK, e.g. Generic header NACK message is received from another node - no need to response).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03054_Tcp_IgnoreGenericNack</srcid><srcstatus/><internalId>1120</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>750</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Offline_2_Rx_Ready</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12252</sourceline>
      <version>1</version>
      <description>Transition from the state OFFLINE to state RX_READY happens when DoIP_SoAdTpStartOfReception() is called.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>751</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Ack_Conf_Wait_2_Rx_Ready</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12268</sourceline>
      <version>1</version>
      <description>Transition from the state RX_ACK_CONF_WAIT to state RX_READY happens when DoIP_SoAdTpTxConfirmation() is called to confirm positive ACK message or NACK message reporting an error that does not requires connection reset, like:
Generic header unknown payload type (1), Routing activation no authentication response message (4), etc.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03017_QueueTxRequests</srcid><srcstatus/><internalId>1084</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>752</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Initial_2_Rx_Offline</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12285</sourceline>
      <version>1</version>
      <description>Transition to state Rx_Offline happens during initialization.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>753</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Ack_Conf_Wait_2_Rx_Offline</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12301</sourceline>
      <version>1</version>
      <description>Transition from the state RX_ACK_CONF_WAIT to state RX_OFFLINE happens when DoIP_SoAdTpTxConfirmation() is called to confirm NACK message reporting an error that does require connection reset, like: Diagnostic message invalid source address NACK message (2), Generic header invalid pattern (0), etc.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03029_Tcp_GenHeaderNack_INCORRECT_PATTERN</srcid><srcstatus/><internalId>1095</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>754</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_All_Con_Alive_Check_Wait_2_Rx_All_Con_Alive_Check_Wait</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12317</sourceline>
      <version>1</version>
      <description>Transition from the state RX_ALL_CON_ALIVE_CHECK_WAIT to the state RX_ALL_CON_ALIVE_CHECK_WAIT happens when DoIP_SoAdTpCopyRxData() is called in this state. No new messages can be received on this connection prior current 
Routing activation process finishes, i.e. until Alive check process finishes for this connection.

As an effect : DoIP_SoAdTpCopyTxData() will return BUFERQ_E_BUSY.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09003_AliveReqToAllConRESPONSE</srcid><srcstatus/><internalId>1293</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>755</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_All_Con_Alive_Check_Wait_2_Rx_Ack_Conf_Wait</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12336</sourceline>
      <version>1</version>
      <description>AllConAliveCheckSucceeded: Alive check response message have been received on all active connections -&amp;gt; Routing activation cannot be performed -&amp;gt; Send Routing activation response message with RespCode = NO_FREE_TCP*(1).

AllConAliveCheckFailed: Alive check response message have not been received on at least one active connection (Alive check timer expired) -&amp;gt; Routing activation process can continue.
RespCode = [UNKNOWN_SRC*(0), WRONG_SRC*(2), NO_AUTHENTICATION(4), NO_CONFIRMATION(5), UNKNOWN_ACT_TYPE*(6), SUCCESS(16), PENDING_CONFIRMATION(17)]
* The connection gets reset after Routing activation response message is confirmed  - DoIP_SoAdTpTxConfirmation().

ConnReset: If any of active connections gets reset before Alive check process finishes (e.g. invalid protocol type is received), then free connection is available and Routing activation process can continue.
RespCode = [UNKNOWN_SRC*(0), WRONG_SRC*(2), NO_AUTHENTICATION(4), NO_CONFIRMATION(5), UNKNOWN_ACT_TYPE*(6), SUCCESS(16), PENDING_CONFIRMATION(17)]

Transition from the state RX_ALL_CON_ALIVE_CHECK_WAIT to the state RX_ACK_CONF_WAIT happens under either the following conditions:
1) AllConAliveCheckSucceeded / RespCode = NO_FREE_TCP*(3)
OR
2) AllConAliveCheckFailed / RespCode = [UNKNOWN_SRC*(0), WRONG_SRC*(2), NO_AUTHENTICATION(4), NO_CONFIRMATION(5), UNKNOWN_ACT_TYPE*(6), SUCCESS(16), PENDING_CONFIRMATION(17)
OR
3) ConnReset / RespCode = [UNKNOWN_SRC*(0), WRONG_SRC*(2), NO_AUTHENTICATION(4), NO_CONFIRMATION(5), UNKNOWN_ACT_TYPE*(6), SUCCESS(16), PENDING_CONFIRMATION(17).
* The connection gets reset after Routing activation response message is confirmed  - DoIP_SoAdTpTxConfirmation().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09003_AliveReqToAllConRESPONSE</srcid><srcstatus/><internalId>1293</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09004_AliveReqToAllConNORESPONSE</srcid><srcstatus/><internalId>1294</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>756</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Route_Act_2_Rx_All_Conn_Alive_Check_Wait</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12367</sourceline>
      <version>1</version>
      <description>RunAllConAliveCheck: (ConnSourceAddr == UNASSIGNED) AND (NumFreeTcpConn == 0)

Transition from the state RX_ROUTE_ACT to the state RX_ALL_CON_ALIVE_CHECK_WAIT happens under following conditions:
1) DoIP_SoAdTpCopyRxData() is called;
2) Routing activation message payload received completely (RxBufferSize == 0);
3) Tcp connection Source address not assigned;
4) All connections (DoIPMaxTesterConnections) are in use, i.e. have Source address assigned.

As a consequence All connection alive check process will be started, i.e. Alive check request messages will be transmitted on all connections to verify their activity. Only when this process is finished, Routing activation will continue.

Effect: DoIP_StartAllConnAliveCheck = TRUE.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09003_AliveReqToAllConRESPONSE</srcid><srcstatus/><internalId>1293</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>757</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Route_Act_2_Rx_Route_Act</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12393</sourceline>
      <version>1</version>
      <description>Transition from the state RX_ROUTE_ACT to the state RX_ROUTE_ACT happens when DoIP_SoAdTpCopyRxData() is called and Routing activation message payload has not been completely received.
DoIP stores received data in connection RxBuffer and updates counter of remaining payload length 
(RxBufferSize -=Msg.SduLength).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05018_RoutActConf_Pending</srcid><srcstatus/><internalId>1231</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>758</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Route_Act_2_Rx_Ack_Conf_Wait</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12411</sourceline>
      <version>1</version>
      <description>Transition from the state RX_ROUTE_ACT to the state RX_ACK_CONF_WAIT happens under the following conditions:
1) DoIP_SoAdTpCopyRxData() is called; 
AND
2) Routing activation message payload received completely (RxBufferSize == 0);
AND
[
  3a) There is at least one free connection available (ConnSourceAddr == UNASSIGNED) AND (NumFreeTcpConn &amp;gt; 0) AND (SourceAddressInUse == FALSE);
  OR
  3b) Single Alive check is already running for received Source address -&amp;gt; transmit Routing activation response message with RespCode = SRC_IN_USE(3).
]

FreeConnAvailable: (ConnSourceAddr == UNASSIGNED) AND (NumFreeTcpConn &amp;gt; 0) AND (SourceAddressInUse == FALSE).
AliveCheckInProgressForSourceAddress: For the received Source address there is already alive check running, meaning that one connection has already locked source address, and other connection is competing for it.
In either of results of Alive check, new connection will not get Source address, thus Routing activation NACK with response code SRC_IN_USE(3) shall be transmitted.


As an effect DoIP transmits Routing activation response message: DoIP_SendTcpNonDiagMsg(RespCode).

RespCode = [UNKNOWN_SRC*(0), , WRONG_SRC*(2), SRC_IN_USE*(3), NO_AUTHENTICATION(4), NO_CONFIRMATION(5), UNKNOWN_ACT_TYPE*(6), SUCCESS(16), PENDING_CONFIRMATION(17)
* The connection gets reset after Routing activation response message is confirmed  - DoIP_SoAdTpTxConfirmation().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03019_RoutActResp_NACK_WRONG_SRC</srcid><srcstatus/><internalId>1086</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>759</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Route_Act_2_Rx_Single_Alive_Check_Wait</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12446</sourceline>
      <version>1</version>
      <description>RunSingleConAliveCheck : (ConnSourceAddr == UNASSIGNED) AND (NumFreeTcpConn &amp;gt; 0) AND SourceAddressInUse.
SourceAddressInUse: Connection exist that has assigned Source address equal to the received one.

Transition from the state RX_ROUTE_ACT to the state RX_SINGLE_ALIVE_CHECK_WAIT happens under following conditions:
1) DoIP_SoAdTpCopyRxData() is called;
2) Routing activation message payload received completely (RxBufferSize == 0);
3) Tcp connection Source address not assigned;
4) There is at least one free Tcp connection (Source address not assigned);
5) Received Source address is already assigned to other Tcp connection.

As a consequence Single connection alive check process will be started, i.e. Alive check request message will be transmitted on the connection that has locked (assigned) received Source address. 
Only when this process is finished, Routing activation will continue.

Effect: DoIP_SendAliveCheckRequest().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09001_SAOnDifferentTcp_NORESPONSE</srcid><srcstatus/><internalId>1291</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>760</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Single_Alive_Check_Wait_2_Rx_Single_Alive_Check_Wait</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12475</sourceline>
      <version>1</version>
      <description>Transition from the state RX_SINGLE_ALIVE_CHECK_WAIT to the state RX_SINGLE_ALIVE_CHECK_WAIT happens when DoIP_SoAdTpCopyRxData() is called in this state. No new messages can be received on this connection prior current Routing activation process
is finished, i.e. until Alive check process is finished for this specific Source address.

As an effect : DoIP_SoAdTpCopyTxData() will return BUFERQ_E_BUSY.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09001_SAOnDifferentTcp_NORESPONSE</srcid><srcstatus/><internalId>1291</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09022_AliveCheckTimer_Expired</srcid><srcstatus/><internalId>1312</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>761</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Ack_Conf_Wait_2_Rx_Ack_Conf_Wait</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12494</sourceline>
      <version>1</version>
      <description>Transition from the state RX_ACK_CONF_WAIT to the state RX_ACK_CONF_WAIT happens when DoIP_SoAdTpCopyRxData() is called in this state. No new messages can be received on this connection prior last transmitted message is confirmed.
DoIP returs BUFREQ_E_BUSY.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03036_DiagAckMsg_RxBlocked</srcid><srcstatus/><internalId>1102</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>762</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Discard_Diag_Msg_2_Rx_Ack_Conf_Wait</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12511</sourceline>
      <version>1</version>
      <description>Transition from the state RX_DISCARD_DIAG_MSG to the state RX_ACK_CONF_WAIT happens when DoIP_SoAdTpCopyRxData() is called and the complete diagnostic message payload has been received.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03025_DiagNackMsg_INV_TAR_ADR</srcid><srcstatus/><internalId>1092</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>763</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Discard_Msg_2_Rx_Ack_Conf_Wait</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12527</sourceline>
      <version>1</version>
      <description>Transition from the state RX_DISCARD_MSG to state RX_ACK_CONF_WAIT happens when all of the following conditions are met:
1) DoIP_SoAdTpCopyRxData() is called;
2) The complete payload has been delivered (RxBufferSize == 0);
3) Generic header NACK message needs to be transmitted (NackCode != DO_NOT_SEND_NACK).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03076_Discard_VehicleIdReqOnTcp</srcid><srcstatus/><internalId>1141</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>764</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Discard_Diag_Msg_2_Rx_Discard_Diag_Msg</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12546</sourceline>
      <version>1</version>
      <description>Transition from the state RX_DISCARD_DIAG_MSG to the state RX_DISCARD_DIAG_MSG happens when DoIP_SoAdTpCopyRxData() is called and diagnostic message payload has not been completely received.
DoIP updates counter of remaining payload length (RxDiagMsgLength).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03066_CopyRxData_SduLength_Oversized_3</srcid><srcstatus/><internalId>1131</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>765</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpRxSM.Rx_Discard_Msg_2_Rx_Discard_Msg</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12563</sourceline>
      <version>1</version>
      <description>Transition from the state RX_DISCARD_MSG to state RX_DISCARD_MSG will happen when DoIP_SoAdTpCopyRxData() is called with a part of message payload but not the complete payload have been received.
DoIP will discard received data and update counter of the remaining payload.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03067_CopyRxData_SduLength_Oversized_4</srcid><srcstatus/><internalId>1132</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>766</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_GenHeader_Nack_2_Tx_Idle</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12580</sourceline>
      <version>1</version>
      <description>Transition from state Tx_GeHeader_Nack to state Tx_Idle will happen when function DoIP_SoAdTpTxConfirmation() is called and NackCode != INCORRECT_PATTERN and NackCode != INVALID_PL_LENGTH</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03028_Tcp_GenHeaderNack_UNKNOWN_PL_TYPE</srcid><srcstatus/><internalId>1094</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>767</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_GenHeader_Nack_2_Tx_Offline</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12596</sourceline>
      <version>1</version>
      <description>Transition from state Tx_GenHeader_Nack to state Tx_Offline will happen when connection is reset i.e function DoIP_SoAdTpTxConfirmation() is called and  (NackCode == INCORRECT_PATTERN || NackCode == INVALID_PL_LENGTH).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03029_Tcp_GenHeaderNack_INCORRECT_PATTERN</srcid><srcstatus/><internalId>1095</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>768</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Idle_2_Tx_GenHeader_Nack</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12612</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Idle to state Tx_GeHeader_Nack  will happen when function DoIP_SoAdTpCopyRxData() or DoIP_SendTcpAckNackMsg() is called.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03028_Tcp_GenHeaderNack_UNKNOWN_PL_TYPE</srcid><srcstatus/><internalId>1094</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>769</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_2_Tx_Offline</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12628</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Diag_Ack_Nack to state Tx_Offline will happen when connection is reset i.e function DoIP_SoAdTpTxConfirmation() is called and  RespCode == INV_SRC_ADDR.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03024_DiagNackMsg_INV_SRC_ADR</srcid><srcstatus/><internalId>1091</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>770</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_2_Tx_Idle</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12644</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Diag_Ack_Nack to state Tx_Idle will happen when function DoIP_SoAdTpTxConfirmation() is called and RespCode != INV_SRC_ADDR.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03011_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1079</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>771</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_Start_2_Tx_Diag_Ack_Nack</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12660</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Diag_Ack_Nack_Start to state Tx_Diag_Ack_Nack will happen when not all data is transmitted i.e. (*AvailableDataPtr &amp;gt; 0)</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03011_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1079</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>772</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_Start_2_Tx_Offline</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12676</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Diag_Ack_Nack_Start to state Tx_Offline will happen when connection is reset i.e function DoIP_SoAdTpTxConfirmation() is called and RespCode == INV_SRC_ADDR.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03069_GeneralInactivityTimer_Reset_RxDiagMsg</srcid><srcstatus/><internalId>1134</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>773</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_Start_2_Tx_Idle</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12692</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Diag_Ack_Nack_Start to state Tx_Idle will happen when function DoIP_SoAdTpTxConfirmation() is called and RespCode != INV_SRC_ADDR.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03084_DiagAckNackStart_Idle</srcid><srcstatus/><internalId>1149</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>774</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Idle_2_Tx_Diag_Ack_Nack_Start</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12708</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Idle to state Tx_Diag_Ack_Nack_Start will happen when function DoIP_SoAdTpCopyRxData() or DoIP_SendTcpAckNackMsg()  is called.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03024_DiagNackMsg_INV_SRC_ADR</srcid><srcstatus/><internalId>1091</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>775</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Diag_Msg_2_Tx_Idle</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12724</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Diag_Msg to state Tx_Idle will happen when function DoIP_SoAdTpTxConfirmation() is called. In that case function PduR_DoIPTpTxConfirmation() will be called.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03012_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1080</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest11000_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1323</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15003_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1351</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>776</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Diag_Msg_Start_2_Tx_Diag_Msg</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12740</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Diag_Msg_Start to state Tx_Diag_Msg will happen
if not all data is transmitted i.e. (*AvailableDataPtr &amp;gt; 0)</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03012_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1080</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest11000_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1323</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15003_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1351</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>777</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Diag_Msg_Start_2_Tx_Idle</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12757</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Diag_Msg_Start to state Tx_Idle will happen when function DoIP_SoAdTpTxConfirmation() is called and RespCode == [RoutActRespCode_NO_RESET].</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest07007_Tx_Diag_Msg_Start_2_Tx_Idle</srcid><srcstatus/><internalId>1272</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>778</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Idle_2_Tx_Diag_Msg_Start</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12773</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Idle to state Tx_Diag_Msg_Start will happen when function DoIP_TpTransmit()  is called.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest07001_DiagMessageTransmit_LongPdu</srcid><srcstatus/><internalId>1267</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest07008_DiagMessageTransmit_Pdu32uint</srcid><srcstatus/><internalId>1273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>779</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Route_Act_Oem_2_Tx_Idle</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12789</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Route_Act_Oem to state Tx_Idle will happen when function DoIP_SoAdTpTxConfirmation() is called and RespCode == [RoutActRespCode_NO_RESET].</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05011_RoutActAuthConf_PayloadLen11_SUCCESS_1</srcid><srcstatus/><internalId>1224</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>780</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Route_Act_Oem_2_Tx_Offline</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12805</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Route_Act_Oem to state Tx_Offline will happen when connection is reset i.e function DoIP_SoAdTpTxConfirmation() is called and RespCode == [RoutActRespCode_RESET].</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05012_RoutActAuthConf_PayloadLen11_NoConf_1</srcid><srcstatus/><internalId>1225</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>781</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Idle_2_Tx_Route_Act_Oem</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12821</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Idle to state Tx_Route_Act will happen when function DoIP_SoAdTpCopyRxData() or DoIP_SendTcpAckNackMsg()  is called. </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05011_RoutActAuthConf_PayloadLen11_SUCCESS_1</srcid><srcstatus/><internalId>1224</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>782</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Route_Act_2_Tx_Idle</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12837</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Route_Act to state Tx_Idle will happen when function DoIP_SoAdTpTxConfirmation() is called and RespCode == [RoutActRespCode_NO_RESET].</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05005_RoutActAuth_PayloadLen7_SUCCESS</srcid><srcstatus/><internalId>1218</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>783</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Route_Act_2_Tx_Offline</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12853</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Route_Act to state Tx_Offline will happen when connection is reset i.e function DoIP_SoAdTpTxConfirmation() is called and RespCode == [RoutActRespCode_RESET].</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03019_RoutActResp_NACK_WRONG_SRC</srcid><srcstatus/><internalId>1086</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>784</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Idle_2_Tx_Route_Act</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12869</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Idle to state Tx_Route_Act will happen when function DoIP_SoAdTpCopyRxData() or DoIP_SendTcpAckNackMsg()  is called. </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03010_RoutingActivation</srcid><srcstatus/><internalId>1078</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>785</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Tx_Offline_2_Tx_Idle</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12885</sourceline>
      <version>1</version>
      <description>Transition from state Tx_Offline to state Tx_Idle will happen when function DoIP_SoAdTpStartOfReception() is called.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>786</internalId></specobject>
    <specobject>
      <id>DoIP.EB.TcpTxSM.Initial_2_Tx_Offline</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12901</sourceline>
      <version>1</version>
      <description>Transition to state Tx_Offline happens during initialisation.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>787</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Activation and Deactivation of DoIP Module via Activation Line Switch Interface">
    <specobject>
      <id>DoIP.dsn.Func0101.EB.ActivationLineState</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12924</sourceline>
      <version>1</version>
      <description>
        DoIP module shall maintain the state of activation line. DoIP_ActivationLineSwitch() with
        Active set to TRUE shall be processed only if activation line state is INACTIVE.
        Similarly, DoIP_ActivationLineSwitch() with Active set to FALSE shall be processed only if
        activation line state is ACTIVE.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02000_Transition_InactiveToActive</srcid><srcstatus/><internalId>1052</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02002_Transition_ActiveToInactive</srcid><srcstatus/><internalId>1054</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15010_TransitionActiveToInactive_MultipleInterfaces</srcid><srcstatus/><internalId>1358</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0101.ActivationLineSwitch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>788</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0101.EB.SWS_DoIP_00234</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12946</sourceline>
      <version>3</version>
      <description>
        If the Activation Line status of a DoIPInterface switches to "inactive", the DoIP module shall
        loop over all DoIPTcpConnection, DoIPUdpConnection, and DoIPUdpVehicleAnnouncementConnections.
        For each of these DoIPConnections the DoIP module shall retrieve the corresponding
        SoConId via call to the SoAd_GetSoConId() and close all the connections by a call
        to SoAd_CloseSoCon() with the retrieved SoConId.
        If the configuration parameter DoIPEnableTcpClosureWithFIN is enabled connection shall
        be closed with FIN (Abort = FALSE), otherwise with RST (Abort = TRUE).
        (SRS_Eth_00081, SRS_Eth_00028)
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02002_Transition_ActiveToInactive</srcid><srcstatus/><internalId>1054</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02004_ActiveLineSwitch_GetSoConId_NOK</srcid><srcstatus/><internalId>1056</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02013_ActivateLineDuringReleaseIpAddresses</srcid><srcstatus/><internalId>1065</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02014_ActivateInactiveLineBeforeTimeout</srcid><srcstatus/><internalId>1066</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest04003_ActiveLineSwitch_GetSoConId_NOK</srcid><srcstatus/><internalId>1211</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>305</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0101.ActivationLineSwitch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0130.TcpCloseConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>699</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0138.EB.ControlInternalInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>707</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>789</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0101.EB.SWS_DoIP_00235</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>12985</sourceline>
      <version>2</version>
      <description>
        In addition to SWS_DoIP_00234, the DoIP module shall release the corresponding IP address
        assignment via the call to SoAd_ReleaseIpAddrAssignment() for those connections that have
        DoIPRequestAddressAssignment set to true. (SRS_Eth_00081, SRS_Eth_00028)

        The call of SoAd_ReleaseIpAddrAssignment() shall be delayed to DoIP_MainFunction() context
        for an amount of time specified in configuration parameter DoIPLocalIPAddressReleaseDelay.

        If DoIPLocalIPAddressReleaseDelay is not enabled, i.e. DoIPEnableTcpClosureWithFIN is
        disabled, IP address assignment release shall be performed in the next DoIP_MainFunction()
        call.
      </description>
      <comment>
        Rational: For TLS connection a proper delay is required to allow TLS to send an encrypted
        CloseNotify before local address gets released. If TLS is not used this parameter can be
        set to 0.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02002_Transition_ActiveToInactive</srcid><srcstatus/><internalId>1054</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02004_ActiveLineSwitch_GetSoConId_NOK</srcid><srcstatus/><internalId>1056</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02013_ActivateLineDuringReleaseIpAddresses</srcid><srcstatus/><internalId>1065</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15010_TransitionActiveToInactive_MultipleInterfaces</srcid><srcstatus/><internalId>1358</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0101.ActivationLineSwitch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0138.EB.ControlInternalInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>707</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>790</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="User callout function to indicate received VID request">
    <specobject>
      <id>DoIP.dsn.Func0125.Config.DoIPVIDRequestReceivedCallback</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13029</sourceline>
      <version>1</version>
      <description>
        Name DoIPVIDRequestReceivedCallback
        This container provides the functionality to call a user defined function.
        If this container is not configured this functionality is disabled.
        Multiplicity 0...1
        Parent Container: DoIPGeneral
        Default value --
        maxLength --
        minLength --
        regularExpression --
        ConfigurationClass
        Pre-compile time X VARIANT-PRE-COMPILE, VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Link time --
        Post-build time --
        Scope / Dependency scope: local
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_632</srcid><srcstatus/><internalId>617</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0125.VIDRequestUserCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>693</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>791</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0125.Config.DoIPVIDRequestReceived</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13061</sourceline>
      <version>1</version>
      <description>
        Name DoIPVIDRequestReceived
        Configuration parameter to define a user defined callback function to be called for
        every valid received VID request.
        Multiplicity 1
        Parent Container: DoIPVIDRequestReceivedCallback
        Type EcucFunctionNameDef
        Default value --
        maxLength --
        minLength --
        regularExpression --
        ConfigurationClass
        Pre-compile time X VARIANT-PRE-COMPILE
        Link time X VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time --
        Scope / Dependency scope: local
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_636</srcid><srcstatus/><internalId>618</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0125.VIDRequestUserCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>693</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>792</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0125.UserVIDRequestReceived_Syntax</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13094</sourceline>
      <version>1</version>
      <description>
        Service name: User_VIDRequestReceived
        Syntax: (void) User_VIDRequestReceived(uint8 DoIPInterfaceId)
        Sync/Async: Synchronous
        Reentrancy: true
        Parameters (in): DoIPInterfaceId - This parameter is reserved for future use and set to 0
        Parameters (inout): None
        Parameters (out): None
        Return value: None
        Description:
        User defined callback function to be called for every valid received VID request.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Int.h_963</srcid><srcstatus/><internalId>533</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0125.VIDRequestUserCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>693</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>793</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0125.Call_User_VIDRequestReceived</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13122</sourceline>
      <version>1</version>
      <description>
        If configuration parameter DoIPVIDRequestReceived is configured, the module shall call
        the user defined function (with the name defined by DoIPVIDRequestReceived)
        User_VIDRequestReceived when a valid vehicle identification request was received.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05027_VIDRequestRecievedCallout</srcid><srcstatus/><internalId>1240</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_3726</srcid><srcstatus/><internalId>563</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0125.VIDRequestUserCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>693</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>794</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Custom payload type handling">
    <specobject>
      <id>DoIP.dsn.Func0117.Config.DoIPCustomPayloadTypeEnabled</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13147</sourceline>
      <version>1</version>
      <description>
        DoIPCustomPayloadTypeEnabled  {DOIP_CUSTOM_PAYLOAD_TYPE_ENABLED}
        Enables custom diagnostic message payload type feature - transmitting
        diagnostic messages with reserved payload types in the range
        0xF000..0xFFFF for manufacturer specific use.
        Multiplicity = 1
        Type= EcucBooleanParamDef
        Default value = FALSE
        ConfigurationClass = Pre-compile time X All Variants
        Scope / Dependency  scope: Local
      </description>
      <comment>
        The field enables/disables all feature related configuration parameters.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_787</srcid><srcstatus/><internalId>619</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.EB.CustomPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>795</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0117.Config.DoIPCustomChannel_Conf</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13177</sourceline>
      <version>1</version>
      <description>
        Container Name = DoIPCustomChannel
        Configuration of one DoIPCustomChannel.
        Multiplicity = Equal to the number of TCP connections.
      </description>
      <comment>
        This container is enabled only when DoIPCustomPayloadTypeEnabled is set to TRUE.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_232</srcid><srcstatus/><internalId>615</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.EB.CustomPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>796</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0117.Config.DoIPTcpConnectionRef_Conf</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13201</sourceline>
      <version>1</version>
      <description>
        DoIPTcpConnectionRef - Reference to Tcp connection used for handling of custom payload
        diagnostic messages.
        Multiplicity = 1
        Type - Reference to [ DoIPTcpConnection ]
        ConfigurationClass = Post-build time X VARIANT-POST-BUILD
        Scope / Dependency  scope: Local
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_268</srcid><srcstatus/><internalId>616</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.EB.CustomPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>797</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0117.CustomChannel.ChannelActivation</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13225</sourceline>
      <version>1</version>
      <description>
        There is 1:1 relationship between custom payload type channels and Tcp connections, i.e.
        each custom channel has assigned Tcp connection as defined in [DoIPTcpConnectionRef_Conf].
        Custom channel is activated as soon as socket connection is established within
        DoIP_SoAdTpStartOfReception(). Consequently there is no need to send routing activation
        message before sending / receiving data on a custom channels.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP_CustomPayloadType.c_271</srcid><srcstatus/><internalId>600</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest08002_CustomMsg_Transmit</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08003_GenHeaderNack_UNKNOWN_PL_TYPE</srcid><srcstatus/><internalId>1277</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08016_CustomMsg_Transmit_Itf1</srcid><srcstatus/><internalId>1290</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.EB.CustomPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>798</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0117.CustomChannel.TcpConReset</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13251</sourceline>
      <version>1</version>
      <description>
        Custom channel is deactivated when TCP connection gets reset.
        If transmission on related custom channel was requested or ongoing,
        PduR_DoIPTpTxConfirmation() shall be called for that channel with E_NOT_OK.
        If related custom channel was receiving data when Tcp connection gets reset,
        PduR_DoIPTpRxIndication() shall be called for that channel with E_NOT_OK.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP_CustomPayloadType.c_303</srcid><srcstatus/><internalId>601</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest08013_ResetTcpConCustom_PduR_DoIPTpRxIndication_NOK</srcid><srcstatus/><internalId>1287</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08014_ResetTcpConCustom_PendingRequest</srcid><srcstatus/><internalId>1288</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.EB.CustomPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>799</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0117.RxCustomMsg.CustomPayloadType_OK</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13277</sourceline>
      <version>2</version>
      <description>
        If CustomPayloadType feature is enabled the list of supported Rx payload types defined in
        SWS_DoIP_00008 shall be extended with custom payload types 0xF000 - 0xFFFF.
        When DoIP_SoAdTpCopyRxData() receives generic header with payload type in a specified
        range and other generic header checks succeed, DoIP shall proceed with custom message
        handling as defined in [EcuC_SetMetaData].
        In case generic header checks fail, DoIP shall generate generic header NACK as for Autosar
        channels.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_4682</srcid><srcstatus/><internalId>573</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_4738</srcid><srcstatus/><internalId>574</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest08001_CustomMsg_Receive</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08005_CustomMsg_PduRCopyRxData_NOK</srcid><srcstatus/><internalId>1279</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08007_CustomMsg_SegmentedPduRCopyRxData_NOK</srcid><srcstatus/><internalId>1281</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08008_CustomMsg_PldBufferOverflow</srcid><srcstatus/><internalId>1282</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08015_CustomMsg_Receive_Itf1</srcid><srcstatus/><internalId>1289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.EB.CustomPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>800</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0117.RxCustomMsg.EcuC_SetMetaData</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13305</sourceline>
      <version>1</version>
      <description>
        After custom message generic header was successfully verified, DoIP shall call
        SoAd_GetSoConId() to retrieve SoConId of the connection where custom message was received.
        If call was successful, retrieved SoConId and payload type from generic header shall be set
        in EcuC by calling EcuC_SetMetaDataSoConId() and EcuC_SetMetaDataPayloadType(), using
        RxPduId from the corresponding custom payload type container.
        If any of these 3 calls fail, DoIP shall silently discard the message without sending
        negative acknowledge message.
      </description>
      <comment>
        Neither positive nor negative diagnostic acknowledge messages are generated for custom
        payload type messages.
        Rationale: The payload of custom payload type message may or may not contain diagnostic
        header (source and target addresses). Consequently it is not possible to generate ACK/NACK
        messages.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP_CustomPayloadType.c_43</srcid><srcstatus/><internalId>594</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest08001_CustomMsg_Receive</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08011_HandleCustomMsg_SoAdGetSoConId_NOK</srcid><srcstatus/><internalId>1285</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08012_EcuC_SetMetaDataPayloadType_NOK</srcid><srcstatus/><internalId>1286</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.EB.CustomPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>801</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0117.RxCustomMsg.PduR_StartOfReception</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13338</sourceline>
      <version>1</version>
      <description>
        After meta data was successfully set as described in [EcuC_SetMetaData], DoIP shall call
        PduR_DoIPStartOfReception() with the parameter TpSduLength set to the size of custom message
        payload. If PduR_DoIPStartOfReception() returns other then BUFREQ_OK, DoIP shall silently
        discard the message without sending negative acknowledge message.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP_CustomPayloadType.c_44</srcid><srcstatus/><internalId>595</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest08001_CustomMsg_Receive</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08006_CustomMsg_PduRStartReception_NOK</srcid><srcstatus/><internalId>1280</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08015_CustomMsg_Receive_Itf1</srcid><srcstatus/><internalId>1289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.EB.CustomPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>802</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0117.RxCustomMsg.PduR_CopyRxData</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13363</sourceline>
      <version>1</version>
      <description>
        For custom payload type messages no diagnostic header is analyzed by DoIP, i.e. the complete
        message content after generic header is treated as payload which is passed on to PduR by
        calling PduR_DoIPCopyRxData().
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP_CustomPayloadType.c_195</srcid><srcstatus/><internalId>597</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest08001_CustomMsg_Receive</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08015_CustomMsg_Receive_Itf1</srcid><srcstatus/><internalId>1289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.EB.CustomPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>803</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0117.RxCustomMsg.PduR_TpRxIndication_OK</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13386</sourceline>
      <version>2</version>
      <description>
        When the complete custom payload type message has been received and successfully forwarded
        to the upper layer with PduR_DoIPCopyRxData(), DoIP module shall call
        PduR_DoIPTpRxIndication() with the according value of PduRRxPdu and the result set to
        E_OK.
        Positive acknowledge message is not transmitted for custom payload type messages.
        Finally, the connection shall be set for reception of the next generic header -
        DoIP_SoAdTpCopyRxData() shall return BUFREQ_OK and BufferSizePtr shall be set to the size
        of generic header.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP_CustomPayloadType.c_196</srcid><srcstatus/><internalId>598</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest08001_CustomMsg_Receive</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08015_CustomMsg_Receive_Itf1</srcid><srcstatus/><internalId>1289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.EB.CustomPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>804</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0117.RxCustomMsg.PduR_TpRxIndication_NOT_OK</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13414</sourceline>
      <version>2</version>
      <description>
        If during the reception of custom payload type message PduR_DoIPCopyRxData() returns value
        other then BUFREQ_OK, DoIP module shall call PduR_DoIPTpRxIndication() with the according
        value of PduRRxPdu and the result set to E_NOT_OK.
        If the remaining part of the message is still in SoAd, it shall be retrieved and silently
        discarded.
        Negative acknowledge message is not transmitted for custom payload type messages.
        Finally, connection shall be set for the reception of the next generic header.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP_CustomPayloadType.c_197</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest08005_CustomMsg_PduRCopyRxData_NOK</srcid><srcstatus/><internalId>1279</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08007_CustomMsg_SegmentedPduRCopyRxData_NOK</srcid><srcstatus/><internalId>1281</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08008_CustomMsg_PldBufferOverflow</srcid><srcstatus/><internalId>1282</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.EB.CustomPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>805</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0117.TxCustomMsg.EcuC_GetMetaDataPayloadType</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13441</sourceline>
      <version>1</version>
      <description>
        When DoIP_TpTransmit() is called to request transmission of a custom payload type message
        EcuC_GetMetaDataPayloadType() shall be called to retrieve payload type.
        If EcuC_GetMetaDataPayloadType() returns E_NOT_OK, transmission shall be rejected with
        DoIP_TpTransmit() returning E_NOT_OK.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_2569</srcid><srcstatus/><internalId>557</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest08002_CustomMsg_Transmit</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08004_CustomMsg_BufferNotAvailable_Retry</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08010_TpTransmit_EcuC_GetMetaDataPayloadType_NOK</srcid><srcstatus/><internalId>1284</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08016_CustomMsg_Transmit_Itf1</srcid><srcstatus/><internalId>1290</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.EB.CustomPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>806</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0117.TxCustomMsg.QueueTxRequest</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13465</sourceline>
      <version>2</version>
      <description>
        If payload type is successfully retrieved as described in [EcuC_GetMetaDataPayloadType]
        custom channel shall be queued in Tx request queue to be processed during
        DoIP_MainFunction(). DoIP_TpTransmit() shall return E_OK.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_2570</srcid><srcstatus/><internalId>558</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest08002_CustomMsg_Transmit</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08004_CustomMsg_BufferNotAvailable_Retry</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08016_CustomMsg_Transmit_Itf1</srcid><srcstatus/><internalId>1290</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.EB.CustomPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>807</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0117.TxCustomMsg.SoAdCopyTxData</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13488</sourceline>
      <version>2</version>
      <description>
        If the function DoIP_SoAdCopyTxData() is called to transmit custom message right after the
        call to SoAd_TpTransmit(), DoIP shall generate generic header with a retrieved value
        of payload type. Custom message payload is obtained via call to PduR_DoIPCopyTxData().
        Parameter AvailableDataPtr is set to the remaining size of custom message after copy
        process.
        Diagnostic header (source and target address) are not inserted by DoIP. If needed it shall
        be provided by UL as a part of custom message payload.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP_CustomPayloadType.c_132</srcid><srcstatus/><internalId>596</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest08002_CustomMsg_Transmit</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08004_CustomMsg_BufferNotAvailable_Retry</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08016_CustomMsg_Transmit_Itf1</srcid><srcstatus/><internalId>1290</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.EB.CustomPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>808</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0117.TxCustomMsg.SoAdTpTxConfirmation</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13515</sourceline>
      <version>2</version>
      <description>
        If the function DoIP_SoAdTpTxConfirmation() is called for a custom channel transmission,
        DoIP shall notify PduR with a call PduR_DoIPTpTxConfirmation().
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_2960</srcid><srcstatus/><internalId>559</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest08002_CustomMsg_Transmit</srcid><srcstatus/><internalId>1276</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08004_CustomMsg_BufferNotAvailable_Retry</srcid><srcstatus/><internalId>1278</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.EB.CustomPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>809</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0117.Call_User_TcpSoConModeChg</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13537</sourceline>
      <version>1</version>
      <description>
        If configuration parameter DoIPTcpSoConModeChg is configured, the module shall call
        the user defined function (with the name defined by DoIPTcpSoConModeChg)
        User_TcpSoConModeChg when function DoIP_SoConModeChg is called.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05024_VehicleIdentificationRequestMAC_NOTOK</srcid><srcstatus/><internalId>1237</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_3454</srcid><srcstatus/><internalId>560</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.EB.CustomPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>810</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Get and reset measurement data">
    <specobject>
      <id>DoIP.dsn.Func0126.EB.DoIP_GetAndResetMeasurementData</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13562</sourceline>
      <version>1</version>
      <description>
        Service name: DoIP_GetAndResetMeasurementData
        Syntax: Std_ReturnType DoIP_GetAndResetMeasurementData(
        DoIP_MeasurementIdxType MeasurementIdx,
        boolean MeasurementResetNeeded,
        uint32* MeasurementDataPtr
        )
        Service ID[hex]: 0x50
        Sync/Async: Synchronous
        Reentrancy: Reentrant
        Parameters:
        (in): MeasurementIdx - Data index of measurement data.
              MeasurementResetNeeded - Flag to trigger a reset of the measurement data.
        (out): MeasurementDataPtr - Reference to data buffer, where to copy measurement data.
        Return value: Std_ReturnType - E_OK: successful,
                                     - E_NOT_OK: failed.
        Description: Allows to read and reset detailed measurement data for diagnostic purposes.
        Get all MeasurementIdx's at once is not supported. DOIP_MEAS_ALL shall only be
        used to reset all MeasurementIdx's at once. A NULL_PTR shall be provided for
        MeasurementDataPtr in this case.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_03_ServiceId_ErrorId</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>695</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>811</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementDataApi</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13600</sourceline>
      <version>1</version>
      <description>
        The function shall be pre compile time configurable On/Off by the configuration
        parameter: DoIPGetAndResetMeasurementDataApi.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>695</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>812</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementDataIndex</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13621</sourceline>
      <version>1</version>
      <description>
        DoIP_GetAndResetMeasurementData() shall return measurement data for selected
        measurement index.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
        This requirement shall be tested with measurement indexes:
        * DOIP_MEAS_DROP_GENHDR
        * DOIP_MEAS_DROP_DIAGMSG
        DoIPGetAndResetMeasurementDataApi config parameter set to ON
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03103_GetAndResetMeasurementData_GenHdr</srcid><srcstatus/><internalId>1168</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>695</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>813</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0126.EB.DoIPDroppedGenericHeaderFrames</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13648</sourceline>
      <version>1</version>
      <description>
        For measurement index DOIP_MEAS_DROP_GENHDR DoIP_GetAndResetMeasurementData() shall return
        the number of dropped messages due to generic header errors.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03103_GetAndResetMeasurementData_GenHdr</srcid><srcstatus/><internalId>1168</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>695</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>814</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0126.EB.DoIPDroppedDiagnosticMessages</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13669</sourceline>
      <version>1</version>
      <description>
        For measurement index DOIP_MEAS_DROP_DIAGMSG DoIP_GetAndResetMeasurementData() shall return
        the number of dropped diagnostic messages.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03104_GetAndResetMeasurementData_DiagMsg</srcid><srcstatus/><internalId>1169</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>695</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>815</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_NOT_OK</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13690</sourceline>
      <version>1</version>
      <description>
        DoIP_GetAndResetMeasurementData() shall return E_NOT_OK if the requested measurement
        index is not supported.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03103_GetAndResetMeasurementData_GenHdr</srcid><srcstatus/><internalId>1168</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>695</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>816</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_Reset</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13711</sourceline>
      <version>1</version>
      <description>
        DoIP_GetAndResetMeasurementData() shall additionally reset the measurement data to 0
        if the MeasurementResetNeeded is true. The reset shall be applied after measurement
        data has been read.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03103_GetAndResetMeasurementData_GenHdr</srcid><srcstatus/><internalId>1168</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>695</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>817</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_ResetAll</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13733</sourceline>
      <version>1</version>
      <description>
        DoIP_GetAndResetMeasurementData() shall reset all existing measurement data to 0, if
        MeasurementResetNeeded is true and measurement index is set to DOIP_MEAS_ALL.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03103_GetAndResetMeasurementData_GenHdr</srcid><srcstatus/><internalId>1168</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>695</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>818</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_NoOverrun</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13754</sourceline>
      <version>1</version>
      <description>
        All measurement data which counts data shall not overrun.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
        This requirement shall be tested with:
        - DoIP_MeasurementDropData_GenHdr set to 0xFFFFFFFF
        - DoIP_MeasurementDropData_DiagMsg set to 0xFFFFFFFF
        DoIPGetAndResetMeasurementDataApi config parameter set to ON.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_7788</srcid><srcstatus/><internalId>589</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_7797</srcid><srcstatus/><internalId>590</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03105_GetAndResetMeasurementData_MaxGenHdrCnt</srcid><srcstatus/><internalId>1170</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03106_GetAndResetMeasurementData_MaxDiagMsgCnt</srcid><srcstatus/><internalId>1171</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>695</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>819</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_DataPtr</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13781</sourceline>
      <version>1</version>
      <description>
        DoIP_GetAndResetMeasurementData() shall accept MeasurementDataPtr set to NULL_PTR.
        In this case the measurement data shall not be copied.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03103_GetAndResetMeasurementData_GenHdr</srcid><srcstatus/><internalId>1168</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03104_GetAndResetMeasurementData_DiagMsg</srcid><srcstatus/><internalId>1169</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>695</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>820</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_Uninit</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13802</sourceline>
      <version>1</version>
      <description>
        If development error detection is enabled: DoIP_GetAndResetMeasurementData() shall check
        that the service DoIP_Init() was previously called. If the check fails,
        DoIP_GetAndResetMeasurementData() shall raise the development error  DOIP_E_UNINIT.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
        DOIPGetAndResetMeasurementDataApi config parameter set to ON.
        DoIP_Init() not called previously.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest01000_Uninit</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>695</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>821</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_Count</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13828</sourceline>
      <version>1</version>
      <description>
        If the measurement data is enabled (see DOIPGetAndResetMeasurementDataApi), DoIP shall
        increment the corresponding measurement data whenever a received message is discarded.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
        This requirement shall be tested:
        - frames with generic header errors
        - frames with diag header errors
        - PDU discarded, measurement data counter incremented
        - PDU not discarded,  measurement data counter not incremented
        DOIPGetAndResetMeasurementDataApi config parameter set to ON.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03103_GetAndResetMeasurementData_GenHdr</srcid><srcstatus/><internalId>1168</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03104_GetAndResetMeasurementData_DiagMsg</srcid><srcstatus/><internalId>1169</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>695</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>822</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_Conf</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13857</sourceline>
      <version>1</version>
      <description>
        Parameter Name DoIPGetAndResetMeasurementDataApi
        Parent Container DoIPGeneral
        Description Enables / Disables the Get and Reset Measurement Data API.
        Multiplicity 1
        Type EcucBooleanParamDef
        Default value false
        Post-Build Variant Value false
        Value Configuration Class
        Pre-compile time X All Variants
        Link time --
        Post-build --
        Dependency scope: ECU
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>695</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>823</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_MeasurementIdxType</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13887</sourceline>
      <version>1</version>
      <description>
        Type definition:
        Name: DoIP_MeasurementIdxType
        Type: uint8
        Range:
        DOIP_MEAS_DROP_GENHDR    0x01        Measurement index of dropped messages
                                             caused by invalid Generic header.
        DOIP_MEAS_DROP_DIAGMSG   0x02        Measurement index of dropped PDUs
                                             caused by invalid diag messages.
        DOIP_MEAS_ALL            0xFF        Represents all measurement indexes
        Description:             Index to select specific measurement data.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03104_GetAndResetMeasurementData_DiagMsg</srcid><srcstatus/><internalId>1169</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>695</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>824</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="DhcpHostName option">
    <specobject>
      <id>DoIP.dsn.Func0102.Config.DoIPDhcpHostNamePrefix_Conf</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13918</sourceline>
      <version>1</version>
      <description>
        Name DoIPDhcpHostNamePrefix
        Description This string can be filled out with vendor specific value which will be added
                    after prefix DoIP- and before the VIN in case that DoIPDhcpOptionVinUse option
                    is enabled.
        Multiplicity = 1
        Type = STRING
        Default value = ""
        ConfigurationClass = Pre-compile time X All Variants
        Scope / Dependency  scope: Local
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_870</srcid><srcstatus/><internalId>621</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0102.DhcpHostNameOption</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>671</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>825</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0102.DoIPDhcpHostNamePrefix_Used</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13945</sourceline>
      <version>1</version>
      <description>
        If parameter DoIPDhcpHostNamePrefix is not an empty string it will be added to the DHCP host
        name after DoIP- and prior to VIN if DoIPDhcpOptionVinUse parameter is enabled.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03109_LocalIpAddrAssignmentChg_DhcpHostNamePref</srcid><srcstatus/><internalId>1174</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0102.DhcpHostNameOption</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>671</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>826</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0102.SWS_DoIP_00155</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13966</sourceline>
      <version>1</version>
      <description>
        If the ASCII buffer returned in SWS_DoIP_00154 does not start with "DoIP-" and
        DoIPDhcpHostNamePrefix is an empty string and the configuration parameter
        DoIPDhcpOptionVinUse is set to FALSE the DoIP module shall call the
        SoAd_WriteDhcpHostNameOption with a pointer to the string "DoIP-" in order to set the
        hostname.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest04000_DoIPDhcpOptionVinUse_False</srcid><srcstatus/><internalId>1208</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00155</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0102.DhcpHostNameOption</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>671</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>827</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0102.SWS_DoIP_00156_UserGetVin</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>13994</sourceline>
      <version>1</version>
      <description>
        If the ASCII buffer returned in SWS_DoIP_00154 does not start with "DoIP-" and
        DoIPDhcpHostNamePrefix is an empty string and the configuration parameter
        DoIPDhcpOptionVinUse is set to TRUE, the DoIP module shall call the
        SoAd_WriteDhcpHostNameOption with a pointer to to the ASCII buffer
        "DoIP-vinnumberinascii" with vinnumberinascii representing the ASCII representation of
        the VIN.
        If a user has provided a callback function for retrieving VIN (as defined in
        [DoIP.EB.User_DoIPGetVin]), then VIN is retrieved via User_DoIPGetVin().
        If no valid VIN could be retrieved the DoIP shall use the configured
        DoIPVinInvalidityPattern in ASCII representation.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02001_InvalidityPattern</srcid><srcstatus/><internalId>1053</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05003_WriteDhcpHostNameOption_UserGetVin</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00156</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0102.DhcpHostNameOption</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>671</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>828</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0127.DeadlineMonitoring</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14027</sourceline>
      <version>1</version>
      <description>
        DoIP uses the following timers for its operation:
          1) Timer for releasing remote address (UDP connection)
          2) Timer for transmission of announcement messages (UDP announcement connection)
          3) Alive check timer (TCP connection)
          4) Inactivity timer (TCP connection).
        Implement common deadline monitoring functionality for all listed timers.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
        Correct functionality of deadline monitoring feature is done within feature testing.
        Test additionally the following use cases:
        - TCP connection gets reset due to unsuccessful Alive check process. Test that Inactivity
          timer was stopped for affected TCP connection.
          * Test case: DoIP_ConTest09001_SAOnDifferentTcp_NORESPONSE
        - Alive check process is initiated on a TCP connection. Before Alive check process finishes,
          TCP connection gets reset because inactivity timer expired. Test that Alive check
          timer was stopped for affected connection.
          * Test case: DoIP_ConTest09022_AliveCheckTimer_Expired
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09001_SAOnDifferentTcp_NORESPONSE</srcid><srcstatus/><internalId>1291</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09022_AliveCheckTimer_Expired</srcid><srcstatus/><internalId>1312</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0127.EB.DeadlineMonitoring</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>696</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>829</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Sending of Diagnostic message negative acknowledge responses">
    <specobject>
      <id>DoIP.dsn.Func0128.Config.DoIPResponseBeforeRoutingActivation_Conf</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14065</sourceline>
      <version>1</version>
      <description>
        Name DoIPResponseBeforeRoutingActivation
        Description This parameter enables or disables sending of Diagnostic message negative
                    acknowledge responses before connection state Registered [Routing Active] is
                    reached for this Tcp connection as described in ISO13400.
        Values      DOIP_ENABLE_ALL_DIAG_NACK - Diag Nack messages will always be sent.
                    DOIP_DISABLE_DIAG_NACK_0x06 - Diag Nack code 0x06 will not be sent before
                                                  Routing Activation.
        Multiplicity = 1
        Type = STRING
        Default value = "DOIP_ENABLE_ALL_DIAG_NACK"
        ConfigurationClass = Pre-compile time X All Variants
        Scope / Dependency  scope: Local
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1104</srcid><srcstatus/><internalId>624</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0128.EB.DoIPResponseBeforeRoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>697</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>830</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0128.SWS_DoIP_00127</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14095</sourceline>
      <version>1</version>
      <description>
        When configuration parameter DoIPResponseBeforeRoutingActivation is set to
        DOIP_ENABLE_ALL_DIAG_NACK and DoIP module receives a diagnostic message and the according
        "TargetAddress" was not activated by routing activation as described in SWS_DoIP_00113, the
        DoIP module shall send a diagnostic negative acknowledge message with the diagnostic message
        negative acknowledge code set to 0x06 as described in chapter 7.3.2.6.3. Additionally the
        message shall be discarded.
        When DoIPResponseBeforeRoutingActivation is set to DOIP_DISABLE_DIAG_NACK_0x06 sending of
        diagnostic message negative acknowledge will be skipped before the first routing activation
        is successfully completed on a Tcp connection where diagnostic message was received.
        Successfully completed means in a connection state "Registered[Routing Active]" as defined
        in ISO 13400.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
        The following use cases shall be tested:
        - Use case 1) common configuration:
          - DoIPResponseBeforeRoutingActivation is set to DOIP_ENABLE_ALL_DIAG_NACK
          - DoIPChannel_0(SA_0, TA_0) and DoIPChannel_1 (SA_0, TA_1) are configured, which are
            activated with RoutingActivation_1 and RoutingActivation_2 respectively.
          - RoutingActivation_1 has configured routing activation confirmation function.
          - SA_0 is not activated on any Tcp connection.
        - Use case 1.1)
          - Neither of channels have been activated, i.e. no routing activation message has been
            received.
          - Diagnostic message (SA_0, TA_0) is received on a TcpCon_0.
          It is expected that DoIP discards received message and transmits diagnostic negative
          acknowledge message with the diagnostic message negative acknowledge code set to 0x06.
          * Test case: DoIP_ConTest05032_DiagMsg_ROUTE_INACTIVE_1
        - Use case 1.2)
          - Routing activation message with SA_0 and RoutingActivation_1 is received on TcpCon_0,
            but routing activation is pending on confirmation.
          - Diagnostic message (SA_0, TA_0) is received on a TcpCon_0.
          It is expected that DoIP discards received message and transmits diagnostic negative
          acknowledge message with the diagnostic message negative acknowledge code set to 0x06.
          * Test case: DoIP_ConTest05032_DiagMsg_ROUTE_INACTIVE_1
        - Use case 1.3)
          - Routing activation message with SA_0 and RoutingActivation_1 is received on TcpCon_0,
            and Channel_0 is activated (confirmation succeeded).
          - Diagnostic message (SA_0, TA_1) is received on a TcpCon_0.
          It is expected that DoIP discards received message and transmits diagnostic negative
          acknowledge message with the  diagnostic message negative acknowledge code set to 0x06.
          * Test case: DoIP_ConTest05032_DiagMsg_ROUTE_INACTIVE_1
        - Use case 2) common configuration:
          - DoIPResponseBeforeRoutingActivation is set to DOIP_DISABLE_DIAG_NACK_0x06
          - DoIPChannel_0(SA_0, TA_0) and DoIPChannel_1 (SA_0, TA_1) are configured, which are
            activated with RoutingActivation_1 and RoutingActivation_2 respectively.
          - RoutingActivation_1 has configured routing activation confirmation function.
          - SA_0 is not activated on any Tcp connection.
        - Use case 2.1)
          - Neither of channels have been activated, i.e. no routing activation message has been
            received.
          - Diagnostic message (SA_0, TA_0) is received on a TcpCon_0.
          It is expected that DoIP silently discards received message without transmitting NACK
          message.
          * Test case: DoIP_ConTest05033_DiagMsg_ROUTE_INACTIVE_2
        - Use case 2.2)
          - Routing activation message with SA_0 and RoutingActivation_1 is received on TcpCon_0,
            but routing activation is pending on confirmation.
          - Diagnostic message (SA_0, TA_0) is received on a TcpCon_0.
          It is expected that DoIP silently discards received message without transmitting NACK
          message.
          * Test case: DoIP_ConTest05033_DiagMsg_ROUTE_INACTIVE_2
        - Use case 2.3)
          - Routing activation message with SA_0 and RoutingActivation_1 is received on TcpCon_0,
            and Channel_0 is activated (confirmation succeeded).
          - Diagnostic message (SA_0, TA_1) is received on a TcpCon_0.
          It is expected that DoIP discards received message and transmits diagnostic negative
          acknowledge message with the  diagnostic message negative acknowledge code set to 0x06.
          * Test case: DoIP_ConTest05033_DiagMsg_ROUTE_INACTIVE_2
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05038_DiagMsg_ROUTE_INACTIVE_1</srcid><srcstatus/><internalId>1251</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05039_DiagMsg_ROUTE_INACTIVE_2</srcid><srcstatus/><internalId>1252</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0128.EB.DoIPResponseBeforeRoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>697</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00127</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>831</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Routing activation callback functions">
    <specobject>
      <id>DoIP.dsn.Func0129.DoIPRoutingActivationCallbackList</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14188</sourceline>
      <version>1</version>
      <description>
        Container name:     DoIPRoutingActivationCallbackList
        Parent containers:  DoIPGeneral
        Description:        This container contains the list of user defined callback function names
                            of a type specified in [User_RoutingActivationCallback].
        Container multiplicity: 1
        Entry multiplicity: 0..255
        Type:               EcucFunctionNameDef
        Multiplicity Configuration Class: Pre-compile time
        Value Configuration Class: Pre-compile time
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1664</srcid><srcstatus/><internalId>642</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.RoutingActivationCallback</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>708</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>832</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0129.User_RoutingActivationCallback</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14218</sourceline>
      <version>2</version>
      <description>
        Service name: User_RoutingActivationCallback
        Syntax: (void) User_RoutingActivationCallback(
                                                       SoAd_SoConIdType SoConId,
                                                       uint16 SourceAddr,
                                                       uint8 ActivationType,
                                                       const uint8* OemSpecificPtr,
                                                       uint8* RespCodePtr,
                                                       boolean* CloseConnectionPtr
                                                     );
        Sync/Async: Synchronous
        Reentrancy: Reentrant
        Parameters (in):  SoConId            - SoConId of a Tcp connection on which routing activation was
                                               successfully preformed.
                          SourceAddr         - Copied from the received routing activation message.
                          ActivationType     - Copied from the received routing activation message.
                          OemSpecificPtr     - Pointer to the OEM specific field from the received
                                               routing activation message. NULL_PTR in case no OEM
                                               specific field was received.
        Parameters (out): RespCodePtr        - Pointer that can be used to modify Response code of Routing activation response message.
                                               If the callback function does not change the value, 0x10 (SUCCESS) shall be used.
                                               If the callback function is called after routing activation authentication or confirmation
                                               were pending, null pointer shall be provided, i.e. modification of response code shall not
                                               possible.
        Parameters (out): CloseConnectionPtr - Pointer to a flag indicating if Tcp connection shall be reset after transmission of response
                                               message.
                                               If the callback function does not change the value, the connection shall not be reset.
                                               If the callback function is called after routing activation authentication or confirmation
                                               were pending, null pointer shall be provided, i.e. connection reset could not be requested.

        Description: User defined callback function DoIP calls to report successful routing activation on a Tcp connection.
                     Optionally, user can alter response code and reset Tcp connection.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Int.h_1312</srcid><srcstatus/><internalId>540</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05015_RoutActAuthConf_PENDING_SUCCESS</srcid><srcstatus/><internalId>1228</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05021_RoutAct_E0_FurtherAction</srcid><srcstatus/><internalId>1234</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.RoutingActivationCallback</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>708</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>833</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0129.RoutingActivationCallback_Call</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14269</sourceline>
      <version>1</version>
      <description>
        If container DoIPRoutingActivationCallbackList is not empty, i.e. user have specified one or
        more callback function names, DoIP shall call all listed functions after routing activation
        has been successfully performed.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
        Test the following use cases:
        Use case 1):
        - Routing activation authentication and confirmation functions are not configured for a
          tested route.
        - Send routing activation message from a tester.
        - Configure Routing activation callback function not to alter RespCode and CloseConnection parameters.
        * Test case: DoIP_ConTest05032_RoutingActivationCallback_TpTransmit_1
        Use case 2):
        - Routing activation confirmation functions is configured and it returns DOIP_E_PENDING in
          the first call. In the subsequent call from DoIP_MainFunction() it shall return E_OK and
          Confirmed == TRUE.
        - Send routing activation message from a tester.
        * Test case: DoIP_ConTest05015_RoutActAuthConf_PENDING_SUCCESS
        Verify that in both use cases all configured routing activation callback functions shall be called.
        Verify also that Routing activation response message is transmitted with RespCode 0x10 (SUCCESS)
        and that Tcp connection is not reset after transmission confirmation is received.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05032_RoutingActivationCallback_TpTransmit_1</srcid><srcstatus/><internalId>1245</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_2366</srcid><srcstatus/><internalId>555</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_5591</srcid><srcstatus/><internalId>580</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.RoutingActivationCallback</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>708</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>834</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0129.RoutingActivationCallback_GetSoConId</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14310</sourceline>
      <version>1</version>
      <description>
        When DoIP needs to call routing activation callback functions(s), under conditions specified
        in [RoutingActivationCallback_Call], SoAd_GetSoConId() shall be called to retrieve SoConId.
        If SoAd_GetSoConId() returns other then E_OK, callback function call shall be skipped.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
        Test the following use cases:
        - Configure SoAd_GetSoConId() stub to return E_OK and verify that respective callback
          function is called.
         * Test case: DoIP_ConTest05032_RoutingActivationCallback_TpTransmit_1
        - Configure SoAd_GetSoConId() stub to return E_NOT_OK and verify that respective callback
          call was skipped.
         * Test case: DoIP_ConTest05031_RoutingAct_SoAdGetSoConId_NOK
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05031_RoutingAct_SoAdGetSoConId_NOK</srcid><srcstatus/><internalId>1244</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05032_RoutingActivationCallback_TpTransmit_1</srcid><srcstatus/><internalId>1245</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_6160</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.RoutingActivationCallback</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>708</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>835</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0129.RoutingActivationCallback_TpTransmit</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14342</sourceline>
      <version>1</version>
      <description>
        DoIP_TpTransmit() can be called in the context of callback functions, consequently:
        1) All related DoIP channels shall be activated prior callback call.
        2) Transmission of a routing activation response message shall be requested before callback
           function call.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
        Test the following use case:
        Use case 1):
        - Implement and configure user callback function to call DoIP_TpTransmit() in order to
          transmit test message on a channel that just got activated with a routing activation
          message.
        - Send routing activation message from a tester.
        - Verify that routing activation response message was transmitted first with a response code
          0x10 (SUCCESS).
        - Verify that test message was successfully transmitted afterwards on a respective channel.
        - Perform standard traffic test on a respective channel.
        * Test case: DoIP_ConTest05032_RoutingActivationCallback_TpTransmit_1
        Use case 2):
        - Configure Tester_0 with two DoIP channels (DoIPChannel_0 and DoIPChannel_1).
        - Configure DoIPChannel_0 to be activated with DoIPRoutingActivation_0 and DoIPChannel_1 to
          be activated with DoIPRoutingActivation_1.
        - Both DoIPRoutingActivation_0 and DoIPRoutingActivation_1 shall have authentication
          callback function configured, e.g. User_AuthCallback_0 and User_AuthCallback_1
          (confirmation functions shall not be configured).
        - Set both authentication stub functions to return E_PENDING state.
        - Send routing activation message from a Tester_0 with ActivationType matching
          DoIPRoutingActivation_0. Verify that User_AuthCallback_0() was called but no message is
          transmitted towards tester, since authentication is pending.
        - Send routing activation message from a Tester_0 with ActivationType matching
          DoIPRoutingActivation_1. Verify that User_AuthCallback_1() was called but no message is
          transmitted towards tester.
        - Set both authentication functions to return to E_OK and Authentified = TRUE.
        - Call DoIP_MainFunction() to process authentication callback functions.
        - Verify that User_AuthCallback_0() was called and routing activation response message was
          transmitted with a response code 0x10 (SUCCESS).
        - Verify that routing activation callback functions were called afterwards.
        - Call DoIP_MainFunction() again.
        - Verify that User_AuthCallback_1() was called and routing activation response message was
          transmitted with a response code 0x10 (SUCCESS).
        - Verify that routing activation callback functions were called afterwards.
        - Perform standard traffic test on DoIPChannel_0 and DoIPChannel_1.
        * Test case: DoIP_ConTest05033_RoutingActivationCallback_TpTransmit_2
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05032_RoutingActivationCallback_TpTransmit_1</srcid><srcstatus/><internalId>1245</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05035_RoutActAuthConf_DiffRoutingActIdx</srcid><srcstatus/><internalId>1248</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05036_RoutActAuthConf_DiffPendingRoutingActIdx</srcid><srcstatus/><internalId>1249</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05037_RoutActAuthConf_PendingRoutingAct2</srcid><srcstatus/><internalId>1250</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.RoutingActivationCallback</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>708</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>836</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0129.RoutingActivationCallback_RespCode_Change</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14403</sourceline>
      <version>1</version>
      <description>
        When Routing activation callback function(s) are called and routing activation authentication / confirmation callback functions
        were NOT pending before (or not configured), the initial values of parameters RespCodePtr and CloseConnectionPtr shall be set to
        DOIP_ROU_ACT_RESP_SUCCESS and FALSE respectively.
        The values retrieved from the last call of callback functions shall be used to determine RespCode for Routing activation response
        message and whether Tcp connection shall be reset or not after transmission confirmation is received.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
        Test the following use case(s):
        Use case 1):
        - Routing activation authentication and confirmation functions are not configured for a tested route.
        - Configure Routing activation callback function to set RespCode to 0x04 (NO_AUTHENTICATION) and CloseConnectionPtr to FALSE
          for the first callback and 0x01 (NO_FREE_TCP) and TRUE for the second callback.
        - Send routing activation message from a tester.
        Verify that routing activation callback functions have been called with above mentioned parameters values.
        Also verify that Routing activation response message is transmitted with the ResoCode = 0x01 (NO_FREE_TCP) and that Tcp connection
        got reset after receiving transmit confirmation.
        Use case 2):
        - Routing activation authentication and confirmation functions are configured.
        - Configure both Routing activation callback functions to set RespCode to 0x01 (NO_FREE_TCP) and CloseConnectionPtr to TRUE.
        - Configure authentication callback function to return E_OK and Authentified == TRUE and confirmation callback function to return
          E_OK and Confirmed == TRUE.
        - Send routing activation message from a tester.
        - Verify that routing activation callback functions are called with above mentioned parameters values.
        - Verify that routing activation response message is transmitted with RespCode == 0x01 (NO_FREE_TCP), and that Tcp connection reset
          after transmission is confirmed.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05050_RoutActCallback_Change_1</srcid><srcstatus/><internalId>1263</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05051_RoutActCallback_Change_2</srcid><srcstatus/><internalId>1264</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_5592</srcid><srcstatus/><internalId>581</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.RoutingActivationCallback</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>708</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>837</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0129.RoutingActivationCallback_RespCode_NoChange</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14448</sourceline>
      <version>1</version>
      <description>
        When Routing activation callback function(s) are called after routing activation authentication / confirmation callback functions
        were pending (return E_PENDING), RespCodePtr and CloseConnectionPtr parameters shall be set to null, i.e. change of response code
        or connection reset shall not be possible. Consequently, Response code transmitted in routing activation response message shall be
        0x10 (SUCCESS), and Tcp connection shall not reset after transmission is confirmed.
      </description>
      <comment>
        The rationale for this requirement is a contradiction between the following two requirements:
          1) Requirement not to send successful routing activation response after pending on confirmation.
          2) The requirement DoIP.dsn.Func0129.RoutingActivationCallback_TpTransmit (2), which requires to send response message
             prior calling of routing activation callback functions.
        Consequently, it is decided not to allow changing response code (and request connection reset) in case routing activation was
        pending on authentication or confirmation before callback(s) are called.
      </comment>
      <verifycrit>
        Test the following use cases:
        - Routing activation authentication and confirmation functions are configured.
        - Configure both Routing activation callback functions to set RespCode to 0x01 (NO_FREE_TCP) and CloseConnectionPtr to TRUE.
        Use case 1):
        - Configure authentication callback function to return E_PENDING and confirmation callback function to return E_OK and
          Confirmed == TRUE.
        - Send routing activation message from a tester.
        - Verify that no routing activation response message is transmitted as authentication is pending.
        - Configure authentication callback function to return E_OK and Authentified == TRUE.
        - Tick DoIP_MainFunction() once.
        - Verify that routing activation callback functions are called with RespCodePtr and CloseConnectionPtr set to null.
        - Verify that routing activation response message is transmitted with RespCode == 0x10 (SUCCESS), and that Tcp connection has not
          reset after transmission is confirmed.
        Use case 2):
        - Configure authentication callback function to return E_OK and Authentified == TRUE and confirmation callback function to return
          E_PENDING.
        - Send routing activation message from a tester.
        - Verify that no routing activation callbacks are called, and verify that routing activation response message is transmitted with
          RespCode == 0x11 (PENDING_CONFIRMATION).
        - Configure confirmation callback function to return E_OK and Confirmed == TRUE.
        - Tick DoIP_MainFunction() once.
        - Verify that routing activation response message is not transmitted and verify that routing activation callback functions are
          called with RespCodePtr and CloseConnectionPtr set to null.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05052_RoutActCallback_NoChange_1</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05053_RoutActCallback_NoChange_2</srcid><srcstatus/><internalId>1266</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_2374</srcid><srcstatus/><internalId>556</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.RoutingActivationCallback</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>708</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>838</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Post-build selectable support">
    <specobject>
      <id>DoIP.dsn.Func0129.EB.PostBuildSelectable.DoIPEid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14506</sourceline>
      <version>1</version>
      <description>
        Configuration parameter DoIPEid shall support multiple selectable variants.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP.xdm.m4_194</srcid><srcstatus/><internalId>603</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03111_PostBuildSelectable_Eid_LogAddr</srcid><srcstatus/><internalId>1176</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.PostBuildSelectable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>698</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>839</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0129.EB.PostBuildSelectable.DoIPLogicalAddress</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14526</sourceline>
      <version>1</version>
      <description>
        Configuration parameter DoIPLogicalAddress shall support multiple selectable variants.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP.xdm.m4_113</srcid><srcstatus/><internalId>602</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03111_PostBuildSelectable_Eid_LogAddr</srcid><srcstatus/><internalId>1176</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.PostBuildSelectable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>698</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>840</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0129.EB.PostBuildSelectable.DoIPTargetAddressValue</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14546</sourceline>
      <version>1</version>
      <description>
        Configuration parameter DoIPTargetAddressValue shall support multiple selectable variants.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP.xdm.m4_817</srcid><srcstatus/><internalId>607</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03112_PostBuildSelectable_TargetAddr</srcid><srcstatus/><internalId>1177</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.PostBuildSelectable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>698</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>841</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Tx Request queueing and transmitting requirements">
    <specobject>
      <id>DoIP.dsn.Func0131.DoIP_TpTransmit.TxConfirmationContext</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14569</sourceline>
      <version>1</version>
      <description>
        DoIP calls PduR_DoIPTpTxConfirmation() to inform PduR about the results of a current
        diagnostic message transmission.
        If PduR requests new transmission for the same TxPduId by calling DoIP_TpTransmit() within
        the context of PduR_DoIPTpTxConfirmation(), DoIP shall queue the request and process it
        within DoIP_MainFunction().
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03047_TransmitInContextTxConfirmation</srcid><srcstatus/><internalId>1113</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0131.DiagMsgTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>700</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>842</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0131.ProcessQueuedTxRequests</id>
      <status>approved</status>
      <source>RFC 69067</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14593</sourceline>
      <version>1</version>
      <description>
      For a active DoIP channel:
      If a Tx request are queued, they shall be processed during DoIP_MainFunction() in
      the order of arrival as soon as the Tx channel is available.
      During DoIP_MainFunction() Tx queues shall be processed for each Tcp connection.
      If the queue is not empty, and Tcp connection is ready for sending, SoAd_TpTransmit()
      shall be called with SoAdSrcPduId set to the according PduId of the socket connection,
      the SoAdSrcPduInfoPtr.SduLength set to the sum of the following lengths: DoIP header
      (8 Byte), the DoIP diagnostic message specific data (4 Byte) and the queued length of
      the user data.
    </description>
      <comment>
      See https://www.autosar.org/bugzilla/show_bug.cgi?id=69067
    </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03017_QueueTxRequests</srcid><srcstatus/><internalId>1084</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0131.DiagMsgTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>700</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>843</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0131.EB.SWS_DoIP_00231</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14623</sourceline>
      <version>1</version>
      <description>
        If the function DoIP_SoAdCopyTpTxData is called after a successful call to
        SoAd_TpTransmit for the use case "diagnostic message", with a valid TxPduId and
        the PduInfoPtr.SduLength is set to 0 the DoIP shall return BUFREQ_OK and set the
        parameter availableDataPtr to the size of generic and diagnostic headers plus the
        length of currently available payload.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03014_CopyTxData_SduLength_0</srcid><srcstatus/><internalId>1082</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest07002_CustomDiagMessageTransmit_LongPdu</srcid><srcstatus/><internalId>1268</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest08004_CustomMsg_BufferNotAvailable_Retry</srcid><srcstatus/><internalId>1278</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0131.DiagMsgTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>700</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>302</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>844</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0131.EB.SWS_DoIP_00230</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14651</sourceline>
      <version>1</version>
      <description>
        If the function DoIP_TpTransmit is called and the data package is allowed to be sent
        according to the current DoIP protocol related information, the DoIP module shall only
        queue the Tx request and return E_OK.
        Each Tcp connection has a separate queue, which stores TX requests (DoIPPduRPduId and
        user payload size from DoIPPduRTxInfoPtr.SduLength) in the order of arrival.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03012_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1080</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03017_QueueTxRequests</srcid><srcstatus/><internalId>1084</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15003_DiagnosticMessageTransmit</srcid><srcstatus/><internalId>1351</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15004_DiagnosticMessageReceive</srcid><srcstatus/><internalId>1352</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0131.DiagMsgTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>700</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>301</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>845</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Closing and resetting TCP connections">
    <specobject>
      <id>DoIP.dsn.Func0130.EB.SWS_DoIP_00058</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14683</sourceline>
      <version>1</version>
      <description>
        When a configuration parameter DoIPEnableTcpClosureWithFIN is ENABLED and connection
        needs to be closed based on DoIP specific behaviour and DoIP Activation Line status is
        DOIP_ACTIVATION_LINE_ACTIVE, the DoIP module shall call the function SoAd_CloseSoCon with
        the parameter abort set to FALSE and the SoConId determined by a call to the function
        SoAd_GetSoConId for the corresponding DoIPSoAdTcpTxPdu.
        If DoIPEnableTcpClosureWithFIN is DISABLED behaviour shall be as in SWS_DoIP_00358.
        Additionally, the inactivity timer shall be stopped in both cases.
        (SRS_Eth_00081, SRS_Eth_00028, SRS_Eth_00083)
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02010_DiagMsg_NoRoute</srcid><srcstatus/><internalId>1062</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02012_ResetInactiveLine</srcid><srcstatus/><internalId>1064</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03024_DiagNackMsg_INV_SRC_ADR</srcid><srcstatus/><internalId>1091</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP.SWS_DoIP_00014</srcid><srcstatus/><internalId>113</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0130.TcpCloseConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>699</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>846</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="External APIs for closing and resetting TCP connections">
    <specobject>
      <id>DoIP.dsn.Func0133.API.DoIP_DisconnectTester</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14719</sourceline>
      <version>1</version>
      <description>
        Service name: DoIP_DisconnectTester
        Syntax: Std_ReturnType DoIP_DisconnectTester
        (
          SoAd_SoConIdType SoConId,
          boolean Abort
        )

        Service ID[hex]: 0xf2
        Sync/Async: Synchronous
        Reentrancy: Reentrant
        Parameters:
        (in): SoConId - Socket connection index specifying which socket connection shall be closed.
              Abort - TRUE: Socket connection shall be closed with RST.
                    - FALSE: Socket connection shall be closed with FIN.
        Return value: Std_ReturnType - E_OK: Connection with specified SoConId found and
                                             scheduled for closing.
                                     - E_NOT_OK: Connection closure failed because connection with
                                                 a specified SoConId not found
        Description: An API to close individual DoIP Tcp connection. SoConId is provided via
        routing activation callback functions when configured, or it can be retrieved with
        DoIP_GetSoConIdFromRxPduId() and DoIP_GetSoConIdFromTxPduId() APIs.
        Actual connection closure is performed in the next main function call.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02011_DisconnectTester</srcid><srcstatus/><internalId>1063</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02015_DisconnectTester_ResetTcpCon</srcid><srcstatus/><internalId>1067</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0133.TcpClosureAPIs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>702</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>847</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0133.MainFunctionClosure</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14759</sourceline>
      <version>1</version>
      <description>
        The actual closure of a Tcp connection requested with DoIP_DisconnectTester() shall be
        postponed to the next main function call.
        DoIP_DisconnectTester() shall only set a flag to indicate that the closure needs to be
        performed.
        For a performance reasons a global flag shall be set to indicate that at least one TCP
        connection needs to be reset before looping over each connection.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02011_DisconnectTester</srcid><srcstatus/><internalId>1063</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02012_ResetInactiveLine</srcid><srcstatus/><internalId>1064</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0133.TcpClosureAPIs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>702</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>848</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0133.API.DoIP_GetSoConIdFromRxPduId</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14783</sourceline>
      <version>1</version>
      <description>
        Service name: DoIP_GetSoConIdFromRxPduId
        Syntax: Std_ReturnType DoIP_GetSoConIdFromRxPduId
        (
          PduIdType RxPduId,
          SoAd_SoConIdType* SoConIdPtr
        )

        Service ID[hex]: 0xf3
        Sync/Async: Synchronous
        Reentrancy: Reentrant
        Parameters:
        (in): RxPduId - Identification of the PDU for which SoConId shall be retrieved.
        (out) SoConIdPtr - Socket connection index of a Tcp connection to which PDU is assigned.
        Return value: Std_ReturnType - E_OK: SoConId successfully retrieved.
                                     - E_NOT_OK: Retrieving SoConId failed.
        Description: API to retrieve Socket connection index of a Tcp connection to which
        specified RxPduId is assigned.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02011_DisconnectTester</srcid><srcstatus/><internalId>1063</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02012_ResetInactiveLine</srcid><srcstatus/><internalId>1064</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0133.TcpClosureAPIs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>702</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>849</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0133.API.DoIP_GetSoConIdFromTxPduId</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14818</sourceline>
      <version>1</version>
      <description>
        Service name: DoIP_GetSoConIdFromTxPduId
        Syntax: Std_ReturnType DoIP_GetSoConIdFromTxPduId
        (
          PduIdType TxPduId,
          SoAd_SoConIdType* SoConIdPtr
        )

        Service ID[hex]: 0xf4
        Sync/Async: Synchronous
        Reentrancy: Reentrant
        Parameters:
        (in): TxPduId - Identification of the PDU for which SoConId shall be retrieved.
        (out) SoConIdPtr - Socket connection index of a Tcp connection to which PDU is assigned.
        Return value: Std_ReturnType - E_OK: SoConId successfully retrieved.
                                     - E_NOT_OK: Retrieving SoConId failed.
        Description: API to retrieve Socket connection index of a Tcp connection to which
        specified TxPduId is assigned.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest02011_DisconnectTester</srcid><srcstatus/><internalId>1063</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest02012_ResetInactiveLine</srcid><srcstatus/><internalId>1064</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0133.TcpClosureAPIs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>702</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>850</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0133.DoIPConnectionControl_Conf</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14854</sourceline>
      <version>1</version>
      <description>
        Parameter Name: DoIPConnectionControl
        Parent Container: DoIPGeneral
        Description: Enables / Disables APIs for closing Tcp connection(s).
        Multiplicity: 1
        Type: EcucBooleanParamDef
        Default value: true
        Post-Build Variant Value: false
        Value Configuration Class: Pre-compile time    X    All Variants
                                   Link time           -
                                   Post-build          -
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_837</srcid><srcstatus/><internalId>620</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0133.TcpClosureAPIs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>702</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>851</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Security events reporting to the IdsM">
    <specobject>
      <id>DoIP.dsn.Func0134.Config.DoIPEnableSecurityEventReporting</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14888</sourceline>
      <version>1</version>
      <description>
        There shall be a precompile configuration parameter DoIPGeneral/DoIPEnableSecurityEventReporting
        which globally enables or disables reporting of security events to the IdsM.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1235</srcid><srcstatus/><internalId>628</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>852</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0134.EB.DoIPSecurityEventRefs</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14908</sourceline>
      <version>1</version>
      <description>
        Name: DoIPSecurityEventRefs
        Container Type: Sub-Container
        Parent Containers: DoIPGeneral
        Description: Container for the references to IdsMEvent elements representing the security
        events that the DoIP module shall report to the IdsM in case the corresponding security
        related event occurs (and if DoIPEnableSecurityEventReporting is set to "true").
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Post-Build-Variant-Multiplicity: false
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1257</srcid><srcstatus/><internalId>629</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>853</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_UDP_INV_MSG</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14938</sourceline>
      <version>1</version>
      <description>
        Name: DOIP_SEV_DROP_UDP_INV_MSG
        Parameter Type: Reference
        Parent Container: DoIPSecurityEventRefs
        Description: DoIP message received on UDP connection discarded.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Type: Symbolic name reference to [IdsMEvent]
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity Configuration Class: Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Value Configuration Class:        Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest14009_IdsM_DoIPSevDropUdpInvMSG_1</srcid><srcstatus/><internalId>1342</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest14010_IdsM_DoIPSevDropUdpInvMSG_2</srcid><srcstatus/><internalId>1343</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>854</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0134.EB.DOIP_SEV_VEHICLE_ID_RESP_TX</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>14974</sourceline>
      <version>1</version>
      <description>
        Name: DOIP_SEV_VEHICLE_ID_RESP_TX
        Parameter Type: Reference
        Parent Container: DoIPSecurityEventRefs
        Description: Vehicle identification response message transmitted.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Type: Symbolic name reference to [IdsMEvent]
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity Configuration Class: Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Value Configuration Class:        Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest14011_UDP_IdsM_DoIPSevVehicleIdRespTx</srcid><srcstatus/><internalId>1344</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>855</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0134.EB.DOIP_SEV_ENTITY_STATUS_RESP_TX</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15010</sourceline>
      <version>1</version>
      <description>
        Name: DOIP_SEV_ENTITY_STATUS_RESP_TX
        Parameter Type: Reference
        Parent Container: DoIPSecurityEventRefs
        Description: DoIP entity status response message transmitted.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Type: Symbolic name reference to [IdsMEvent]
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity Configuration Class: Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Value Configuration Class:        Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest14012_UDP_IdsM_DoIPSevEntityStatusRespTx</srcid><srcstatus/><internalId>1345</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>856</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0134.EB.DOIP_SEV_POWER_MODE_RESP_TX</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15046</sourceline>
      <version>1</version>
      <description>
        Name: DOIP_SEV_POWER_MODE_RESP_TX
        Parameter Type: Reference
        Parent Container: DoIPSecurityEventRefs
        Description: DoIP power mode response message transmitted.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Type: Symbolic name reference to [IdsMEvent]
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity Configuration Class: Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Value Configuration Class:        Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05040_IdsM_PowerModeRespTx</srcid><srcstatus/><internalId>1253</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>857</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_TCP_GEN_HDR_ERR</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15082</sourceline>
      <version>1</version>
      <description>
        Name: DOIP_SEV_DROP_TCP_GEN_HDR_ERR
        Parameter Type: Reference
        Parent Container: DoIPSecurityEventRefs
        Description: DoIP message received on a TCP connection discarded due to generic header error.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Type: Symbolic name reference to [IdsMEvent]
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity Configuration Class: Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Value Configuration Class:        Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest14006_Tcp_IdsM_DoIPSevDropTCPGenHdrErr_1</srcid><srcstatus/><internalId>1339</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest14007_Tcp_IdsM_DoIPSevDropTCPGenHdrErr_2</srcid><srcstatus/><internalId>1340</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>858</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0134.EB.DOIP_SEV_ROUTING_ACT_RESP_TX</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15118</sourceline>
      <version>1</version>
      <description>
        Name: DOIP_SEV_ROUTING_ACT_RESP_TX
        Parameter Type: Reference
        Parent Container: DoIPSecurityEventRefs
        Description: Routing activation positive acknowledge transmitted.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Type: Symbolic name reference to [IdsMEvent]
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity Configuration Class: Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Value Configuration Class:        Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest14008_Tcp_IdsM_DoIPSevRoutingActRespTx</srcid><srcstatus/><internalId>1341</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>859</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0134.EB.DOIP_SEV_ALIVE_RESP_WRONG_SA_RESET</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15154</sourceline>
      <version>1</version>
      <description>
        Name: DOIP_SEV_ALIVE_RESP_WRONG_SA_RESET
        Parameter Type: Reference
        Parent Container: DoIPSecurityEventRefs
        Description: Tcp connection got reset because Alive check response message is received on a registered Tcp
                     connection with a wrong source address (received source address does not match the registered one).
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Type: Symbolic name reference to [IdsMEvent]
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity Configuration Class: Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Value Configuration Class:        Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09026_IdsM_AliveRespWrongSAReset</srcid><srcstatus/><internalId>1316</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>860</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0134.EB.DOIP_SEV_ALIVE_RESP</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15191</sourceline>
      <version>1</version>
      <description>
        Name: DOIP_SEV_ALIVE_RESP
        Parameter Type: Reference
        Parent Container: DoIPSecurityEventRefs
        Description: Alive check response message received on a registered Tcp connection with a
        registered source address, or received on an unregistered Tcp connection (ignored).
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Type: Symbolic name reference to [IdsMEvent]
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity Configuration Class: Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Value Configuration Class:        Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09027_IdsM_AliveResp_1</srcid><srcstatus/><internalId>1317</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09028_IdsM_AliveResp_2</srcid><srcstatus/><internalId>1318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>861</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_DIAG_MSG_DIAG_HDR</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15228</sourceline>
      <version>1</version>
      <description>
        Name: DOIP_SEV_DROP_DIAG_MSG_DIAG_HDR
        Parameter Type: Reference
        Parent Container: DoIPSecurityEventRefs
        Description: Diagnostic message discarded due to the following reasons:
                     - Invalid Source address (NACK code 0x02),
                     - Invalid Target address (NACK code 0x03,
                     - Message too long (NACK code 0x04),
                     - Inactive route (NACK code 0x06),
                     - Silent discard.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Type: Symbolic name reference to [IdsMEvent]
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity Configuration Class: Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Value Configuration Class:        Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest14000_IdsM_DoIPSevDropDiagMsgDiagHdr_1</srcid><srcstatus/><internalId>1333</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest14001_IdsM_DoIPSevDropDiagMsgDiagHdr_2</srcid><srcstatus/><internalId>1334</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest14002_IdsM_DoIPSevDropDiagMsgDiagHdr_3</srcid><srcstatus/><internalId>1335</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>862</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_DIAG_MSG_UL</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15269</sourceline>
      <version>1</version>
      <description>
        Name: DOIP_SEV_DROP_DIAG_MSG_UL
        Parameter Type: Reference
        Parent Container: DoIPSecurityEventRefs
        Description: Diagnostic message discarded because upper layer was not able to receive it
                     (diagnostic negative acknowledge message generated with NACK code 0x05 or 0x08).
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Type: Symbolic name reference to [IdsMEvent]
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity Configuration Class: Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Value Configuration Class:        Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest14003_DropDiagMsgUL_1</srcid><srcstatus/><internalId>1336</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest14004_DropDiagMsgUL_2</srcid><srcstatus/><internalId>1337</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>863</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0134.EB.DOIP_SEC_TCP_CONN_RESET_INACTIVITY_TIMER</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15306</sourceline>
      <version>1</version>
      <description>
        Name: DOIP_SEC_TCP_CONN_RESET_INACTIVITY_TIMER
        Parameter Type: Reference
        Parent Container: DoIPSecurityEventRefs
        Description: Tcp connection got reset because Inactivity timer expired.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Type: Symbolic name reference to [IdsMEvent]
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity Configuration Class: Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Value Configuration Class:        Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest14005_IdsM_DoIPSecTCPConnResetInactivityTimer</srcid><srcstatus/><internalId>1338</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>864</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0134.EB.DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15342</sourceline>
      <version>1</version>
      <description>
        Name: DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER
        Parameter Type: Reference
        Parent Container: DoIPSecurityEventRefs
        Description: Tcp connection got reset because Alive check timer expired.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Type: Symbolic name reference to [IdsMEvent]
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity Configuration Class: Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Value Configuration Class:        Pre-compile time: X VARIANT-PRE-COMPILE
                                          Link time:        X VARIANT-LINK-TIME
                                          Post-build time:  X VARIANT-POST-BUILD
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest09024_IdsM_ResetAliveCheckTimer_1</srcid><srcstatus/><internalId>1314</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest09025_IdsM_ResetAliveCheckTimer_2</srcid><srcstatus/><internalId>1315</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>865</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15378</sourceline>
      <version>1</version>
      <description>
        Configuration parameters in DoIPSecurityEventRefs container shall support multiple
        selectable variants.
      </description>
      <furtherinfo>
        WRN.impl.needscoverage.count - Linking all feature requirements to the single top-level
        requirement brings clear benefits and splitting them up would only increase complexity
        without any real improvements.
      </furtherinfo>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1290</srcid><srcstatus/><internalId>630</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1321</srcid><srcstatus/><internalId>631</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1352</srcid><srcstatus/><internalId>632</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1383</srcid><srcstatus/><internalId>633</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1414</srcid><srcstatus/><internalId>634</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1445</srcid><srcstatus/><internalId>635</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1478</srcid><srcstatus/><internalId>636</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1510</srcid><srcstatus/><internalId>637</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1550</srcid><srcstatus/><internalId>638</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1582</srcid><srcstatus/><internalId>639</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1613</srcid><srcstatus/><internalId>640</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1644</srcid><srcstatus/><internalId>641</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest14013_PostBuildSelectable_DoIPSecurityEventRefs_1</srcid><srcstatus/><internalId>1346</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest14014_PostBuildSelectable_DoIPSecurityEventRefs_2</srcid><srcstatus/><internalId>1347</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.PostBuildSelectable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>698</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>866</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Protocol Version">
    <specobject>
      <id>DoIP.dsn.Func0135.DoIPProtocolVersion_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15408</sourceline>
      <version>1</version>
      <description>
        Name: DoIPProtocolVersion
        Container Type: Sub-Container
        Parent Container: DoIPInterface
        Description: This parameter defines the protocol version of the DoIP entity.
        Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_53</srcid><srcstatus/><internalId>610</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>867</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0135.DoIP_ISO13400_2_2012_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15432</sourceline>
      <version>1</version>
      <description>
        Name: DoIP_ISO13400_2_2012
        Parameter Type: Boolean
        Parent Container: DoIPProtocolVersion
        Description: If this parameter is enabled, the DoIP entity supports communication
                     with ISO13400-2:2012 compliant tester using protocol version 0x02.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Default value: true
        Origin: Elektrobit Automotive GmbH
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Scope: LOCAL
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_66</srcid><srcstatus/><internalId>611</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>868</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0135.DoIP_ISO13400_2_2019_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15465</sourceline>
      <version>1</version>
      <description>
        Name: DoIP_ISO13400_2_2019
        Parameter Type: Boolean
        Parent Container: DoIPProtocolVersion
        Description: If this parameter is enabled, the DoIP entity supports communication
                     with ISO13400-2:2019 compliant tester using protocol version 0x03.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Default value: true
        Origin: Elektrobit Automotive GmbH
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Scope: LOCAL
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_88</srcid><srcstatus/><internalId>612</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>869</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0135.DoIPSecuredCommunicationForAllProtocolVersions_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15498</sourceline>
      <version>1</version>
      <description>
        Name: DoIPSecuredCommunicationforAllProtocolVersions
        Parameter Type: Boolean
        Parent Container: DoIPProtocolVersion
        Description: If this parameter is enabled, the DoIP entity supports
                     secured communication for all supported protocol version
                     (including 0x02). ISO13400-2:2012 complaint tester are able to use
                     TLS secured connections and will get the routing activation response
                     code 0x07 as defined by ISO13400-2:2019.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Default value: false
        Origin: Elektrobit Automotive GmbH
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Scope: LOCAL
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_110</srcid><srcstatus/><internalId>613</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>870</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15534</sourceline>
      <version>1</version>
      <description>
        If config parameter DoIP_ISO13400_2_2012 is enabled, the DoIP entity shall accept
        received frames with protocol version 0x02.
      </description>
      <furtherinfo>
        WRN.impl.needscoverage.count - Linking all feature requirements to the single top-level
        requirement brings clear benefits and splitting them up would only increase complexity
        without any real improvements.
        WRN.swuts.needscoverage.count - This requirement needs to be checked for all incoming
        frame types which requires a linkage to multiple tests.
      </furtherinfo>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_4805</srcid><srcstatus/><internalId>575</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03113_VehicleID_CorrectProtocolVersion</srcid><srcstatus/><internalId>1178</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03114_VehicleIDEid_WithProtocolVersion2and3</srcid><srcstatus/><internalId>1179</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03115_VehicleIDVin_WithProtocolVersion2and3</srcid><srcstatus/><internalId>1180</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03116_EntityStatusNoTcp_WithProtocolVersion2and3</srcid><srcstatus/><internalId>1181</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03117_RoutingActivation_WithProtocolVersion2and3</srcid><srcstatus/><internalId>1182</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03121_VehicleID_IncorrectProtocolVersion3</srcid><srcstatus/><internalId>1186</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03122_VehicleIDEid_WithIncorrectProtocolVersion3</srcid><srcstatus/><internalId>1187</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03123_VehicleIDVin_WithIncorrectProtocolVersion3</srcid><srcstatus/><internalId>1188</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03124_EntityStatusNoTcp_WithIncorrectPV3</srcid><srcstatus/><internalId>1189</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03125_RoutingActivation_WithIncorrectPV3</srcid><srcstatus/><internalId>1190</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03126_VehicleID_DefaultProtocolType_2</srcid><srcstatus/><internalId>1191</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03127_VehicleAnnouncement_DefaultProtocolType_2</srcid><srcstatus/><internalId>1192</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05041_PowerMode_WithProtocolVersion2and3</srcid><srcstatus/><internalId>1254</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05042_PowerMode_WithIncorrectProtocolVersion3</srcid><srcstatus/><internalId>1255</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15011_CorrectProtocolVersion</srcid><srcstatus/><internalId>1359</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>871</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15560</sourceline>
      <version>1</version>
      <description>
        If config parameter DoIP_ISO13400_2_2019 is enabled, the DoIP entity shall accept
        received frames with protocol version 0x03.
      </description>
      <furtherinfo>
        WRN.impl.needscoverage.count - Linking all feature requirements to the single top-level
        requirement brings clear benefits and splitting them up would only increase complexity
        without any real improvements.
        WRN.swuts.needscoverage.count - This requirement needs to be checked for all incoming
        frame types which requires a linkage to multiple tests.
      </furtherinfo>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_4814</srcid><srcstatus/><internalId>576</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03113_VehicleID_CorrectProtocolVersion</srcid><srcstatus/><internalId>1178</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03114_VehicleIDEid_WithProtocolVersion2and3</srcid><srcstatus/><internalId>1179</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03115_VehicleIDVin_WithProtocolVersion2and3</srcid><srcstatus/><internalId>1180</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03116_EntityStatusNoTcp_WithProtocolVersion2and3</srcid><srcstatus/><internalId>1181</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03117_RoutingActivation_WithProtocolVersion2and3</srcid><srcstatus/><internalId>1182</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03118_VehicleID_DefaultProtocolType_1</srcid><srcstatus/><internalId>1183</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03119_VehicleAnnouncement_DefaultProtocolType_1</srcid><srcstatus/><internalId>1184</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03120_VehicleID_IncorrectInverseProtocolVersion</srcid><srcstatus/><internalId>1185</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03128_VehicleID_IncorrectProtocolVersion2</srcid><srcstatus/><internalId>1193</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03129_VehicleIDEid_WithIncorrectProtocolVersion2</srcid><srcstatus/><internalId>1194</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03130_VehicleIDVin_WithIncorrectProtocolVersion2</srcid><srcstatus/><internalId>1195</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03131_EntityStatusNoTcp_WithIncorrectPV2</srcid><srcstatus/><internalId>1196</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03132_RoutingActivation_WithIncorrectPV2</srcid><srcstatus/><internalId>1197</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03133_VehicleID_DefaultProtocolType_3</srcid><srcstatus/><internalId>1198</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03134_VehicleAnnouncement_DefaultProtocolType_3</srcid><srcstatus/><internalId>1199</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05041_PowerMode_WithProtocolVersion2and3</srcid><srcstatus/><internalId>1254</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05043_PowerMode_WithIncorrectProtocolVersion2</srcid><srcstatus/><internalId>1256</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest15011_CorrectProtocolVersion</srcid><srcstatus/><internalId>1359</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>872</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15586</sourceline>
      <version>1</version>
      <description>
        For transmission of DoIP responses over UDP, the DoIP entity shall use the same
        protocol version as received from the request.
      </description>
      <furtherinfo>
        WRN.impl.needscoverage.count - Linking all feature requirements to the single top-level
        requirement brings clear benefits and splitting them up would only increase complexity
        without any real improvements.
      </furtherinfo>
      <comment>
        The protocol version 0xFF is an exception which is handled by.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_3711</srcid><srcstatus/><internalId>562</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03113_VehicleID_CorrectProtocolVersion</srcid><srcstatus/><internalId>1178</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03114_VehicleIDEid_WithProtocolVersion2and3</srcid><srcstatus/><internalId>1179</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03115_VehicleIDVin_WithProtocolVersion2and3</srcid><srcstatus/><internalId>1180</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03116_EntityStatusNoTcp_WithProtocolVersion2and3</srcid><srcstatus/><internalId>1181</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05041_PowerMode_WithProtocolVersion2and3</srcid><srcstatus/><internalId>1254</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>873</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0135.Tx.Udp.DefaultProtocolVersionResponse</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15613</sourceline>
      <version>1</version>
      <description>
        If a received vehicle identification request contains the default protocol version 0xFF,
        the DoIP entity shall use the highest configured protocol version in the response.
      </description>
      <furtherinfo>
        WRN.impl.needscoverage.count - Linking all feature requirements to the single top-level
        requirement brings clear benefits and splitting them up would only increase complexity
        without any real improvements.
      </furtherinfo>
      <comment>
        0xFF is used to find out the capability of the DoIP entity. Sending the highest supported
        protocol version tells the tester that functionalities of the highest protocol is
        available.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_4568</srcid><srcstatus/><internalId>571</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03118_VehicleID_DefaultProtocolType_1</srcid><srcstatus/><internalId>1183</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03126_VehicleID_DefaultProtocolType_2</srcid><srcstatus/><internalId>1191</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03133_VehicleID_DefaultProtocolType_3</srcid><srcstatus/><internalId>1198</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>874</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15642</sourceline>
      <version>1</version>
      <description>
        If a received DoIP request over Udp contains an invalid protocol version or not matching
        inverse protocol version, the DoIP entity shall use the highest configured protocol version
        in the response.
      </description>
      <furtherinfo>
        WRN.impl.needscoverage.count - Linking all feature requirements to the single top-level
        requirement brings clear benefits and splitting them up would only increase complexity
        without any real improvements.
      </furtherinfo>
      <comment>
        This requirement is an extension of SWS_DoIP_00014.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_4497</srcid><srcstatus/><internalId>570</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03120_VehicleID_IncorrectInverseProtocolVersion</srcid><srcstatus/><internalId>1185</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03121_VehicleID_IncorrectProtocolVersion3</srcid><srcstatus/><internalId>1186</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03122_VehicleIDEid_WithIncorrectProtocolVersion3</srcid><srcstatus/><internalId>1187</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03123_VehicleIDVin_WithIncorrectProtocolVersion3</srcid><srcstatus/><internalId>1188</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03124_EntityStatusNoTcp_WithIncorrectPV3</srcid><srcstatus/><internalId>1189</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03128_VehicleID_IncorrectProtocolVersion2</srcid><srcstatus/><internalId>1193</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03129_VehicleIDEid_WithIncorrectProtocolVersion2</srcid><srcstatus/><internalId>1194</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03130_VehicleIDVin_WithIncorrectProtocolVersion2</srcid><srcstatus/><internalId>1195</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03131_EntityStatusNoTcp_WithIncorrectPV2</srcid><srcstatus/><internalId>1196</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>875</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0135.Tx.Tcp.ProtocolVersion</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15670</sourceline>
      <version>1</version>
      <description>
        For transmission of DoIP responses over Tcp, the DoIP entity shall use the same
        protocol version as received from the first request of this tester.
      </description>
      <furtherinfo>
        WRN.impl.needscoverage.count - Linking all feature requirements to the single top-level
        requirement brings clear benefits and splitting them up would only increase complexity
        without any real improvements.
      </furtherinfo>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_4604</srcid><srcstatus/><internalId>572</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_4819</srcid><srcstatus/><internalId>577</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03117_RoutingActivation_WithProtocolVersion2and3</srcid><srcstatus/><internalId>1182</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03135_VehicleID_RoutingActivationNack4ProtocolVer3</srcid><srcstatus/><internalId>1200</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>876</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0135.Tx.Tcp.InitProtocolVersion</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15694</sourceline>
      <version>1</version>
      <description>
        If a transmission of DoIP message over Tcp is triggered before a reception took place,
        the DoIP entity shall use the highest configured protocol version.
      </description>
      <furtherinfo>
        WRN.impl.needscoverage.count - Linking all feature requirements to the single top-level
        requirement brings clear benefits and splitting them up would only increase complexity
        without any real improvements.
      </furtherinfo>
      <comment>
        This requirement can only take place if custom payload type is used for transmission before
        a reception took place.
        Further use case is that response is send before request and routing activation is disabled.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_5000</srcid><srcstatus/><internalId>578</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03119_VehicleAnnouncement_DefaultProtocolType_1</srcid><srcstatus/><internalId>1184</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03127_VehicleAnnouncement_DefaultProtocolType_2</srcid><srcstatus/><internalId>1192</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03134_VehicleAnnouncement_DefaultProtocolType_3</srcid><srcstatus/><internalId>1199</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>877</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0135.Tx.Tcp.InvalidProtocolVersion</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15723</sourceline>
      <version>1</version>
      <description>
        If the first received DoIP request over Tcp contains an invalid protocol version or not
        matching inverse protocol version, the DoIP entity shall use the highest configured protocol
        version in the response.
      </description>
      <furtherinfo>
        WRN.impl.needscoverage.count - Linking all feature requirements to the single top-level
        requirement brings clear benefits and splitting them up would only increase complexity
        without any real improvements.
      </furtherinfo>
      <comment>
        This requirement is an extension of SWS_DoIP_00014.
        Requirement is only valid if no protocol version was already learned from a previous
        request.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_5001</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03125_RoutingActivation_WithIncorrectPV3</srcid><srcstatus/><internalId>1190</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03132_RoutingActivation_WithIncorrectPV2</srcid><srcstatus/><internalId>1197</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>878</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0135.SecComForAllProtocolVersions</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15753</sourceline>
      <version>1</version>
      <description>
        If config parameters DoIP_ISO13400_2_2012 and DoIPSecuredCommunicationForAllProtocolVersions
        are enabled and a tester sends a routing activation request with protocol version
        0x02 on an unsecured connection to activate a secured route, then the DoIP entity shall
        send back the routing activation response 0x07
        (requiring a secure connection according to ISO13400-2:2019) with the same protocol
        version 0x02.
      </description>
      <furtherinfo>
        WRN.impl.needscoverage.count - Linking all feature requirements to the single top-level
        requirement brings clear benefits and splitting them up would only increase complexity
        without any real improvements.
      </furtherinfo>
      <comment>
        This requirement allows routing activation response 0x07 also for protocol
        version 0x02 to stay backward compatible.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_5693</srcid><srcstatus/><internalId>582</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03136_VehicleID_RoutingActivationP2NACK0x7</srcid><srcstatus/><internalId>1201</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>879</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0135.SecComForAllProtocolVersions.SecureTcpCon</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15785</sourceline>
      <version>1</version>
      <description>
        If config parameters DoIP_ISO13400_2_2012 and DoIPSecuredCommunicationForAllProtocolVersions
        are enabled the DoIP entity shall allow to communicate with testers using protocol version
        0x02 over DoIPTcpConnection with DoIPTcpConnectionSecurityRequired = true.
      </description>
      <furtherinfo>
        WRN.impl.needscoverage.count - Linking all feature requirements to the single top-level
        requirement brings clear benefits and splitting them up would only increase complexity
        without any real improvements.
      </furtherinfo>
      <comment>
        This requirement allows secure communication also for protocol
        version 0x02 to stay backward compatible.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_5710</srcid><srcstatus/><internalId>584</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03108_RoutActResp_SECURE_SUCCESS</srcid><srcstatus/><internalId>1173</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>880</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0135.NoSecureComForAllProtVersions.SecureRoute</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15814</sourceline>
      <version>1</version>
      <description>
        If config parameters DoIP_ISO13400_2_2012 is enabled,
        DoIPSecuredCommunicationForAllProtocolVersions is disabled and a tester sends a routing
        activation request with protocol version 0x02 on an unsecured connection to activate a
        secured route, then the DoIP entity shall
        send back the routing activation response 0x06
        (Routing activation denied due to unsupported routing activation type.) with the same
        protocol version 0x02.
      </description>
      <furtherinfo>
        WRN.impl.needscoverage.count - Linking all feature requirements to the single top-level
        requirement brings clear benefits and splitting them up would only increase complexity
        without any real improvements.
      </furtherinfo>
      <comment>
        According to ISO13400-2:2012 no secured routes can exists. However, in a version mixed
        scenario with DoIP_ISO13400_2_2012 and DoIP_ISO13400_2_2019 enabled, it can happen that
        secured routes are configured for ISO13400-2:2019 complaint testers.
        For ISO13400-2:2012 complaint testers, these secured routes should not be visible and if
        such a tester tries to activate these routes the DoIP entity returns that these routes are
        not available.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_5694</srcid><srcstatus/><internalId>583</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03138_VehicleID_RoutingActivationP2NACK0x6_1</srcid><srcstatus/><internalId>1203</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03140_VehicleID_RoutingActivationP3NACK0x7</srcid><srcstatus/><internalId>1205</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>881</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0135.NoSecureComForAllProtVersions.SecureTcpCon</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15851</sourceline>
      <version>1</version>
      <description>
        If config parameters DoIP_ISO13400_2_2012 is enabled,
        DoIPSecuredCommunicationForAllProtocolVersions is disabled and a tester sends a routing
        activation request with protocol version 0x02 on a secured connection then
        the DoIP entity shall send back the routing activation response 0x06
        (Routing activation denied due to unsupported routing activation type.) with the same
        protocol version 0x02.
      </description>
      <furtherinfo>
        WRN.impl.needscoverage.count - Linking all feature requirements to the single top-level
        requirement brings clear benefits and splitting them up would only increase complexity
        without any real improvements.
      </furtherinfo>
      <comment>
        According to ISO13400-2:2012 no secured TCP connections can exists. However, in a version
        mixed scenario with DoIP_ISO13400_2_2012 and DoIP_ISO13400_2_2019 enabled, it can happen
        that secured TCP connections configured for ISO13400-2:2019 complaint testers are used by
        ISO13400-2:2012 complaint testers. This requirement shall ensure that ISO13400-2:2012
        complaint testers can not communicate over secure connections unless explicitly enabled via
        DoIPSecuredCommunicationForAllProtocolVersions.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_5711</srcid><srcstatus/><internalId>585</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest03137_VehicleID_RoutingActivationP3NACK0x7</srcid><srcstatus/><internalId>1202</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest03139_VehicleID_RoutingActivationP2NACK0x6_2</srcid><srcstatus/><internalId>1204</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>882</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Report Issue Callout Function">
    <specobject>
      <id>DoIP.dsn.Func0136.DoIPReportIssueCallout_Conf</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15890</sourceline>
      <version>1</version>
      <description>
        Container name:     DoIPReportIssueCallout
        Parent containers:  DoIPGeneral
        Description:        This container holds user defined callout function name which has a prototype
                            specified in [User_DoIPReportIssue].
        Container multiplicity: 0..1
        Container Type:     Sub-Container
        Multiplicity Configuration Class: Pre-compile time
        Value Configuration Class:        Link time
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1016</srcid><srcstatus/><internalId>623</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.EB.ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>709</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>883</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0136.User_DoIPReportIssue</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15919</sourceline>
      <version>1</version>
      <description>
        Service name: User_DoIPReportIssue
        Syntax: (void) User_DoIPReportIssue(
                                              DoIP_ReportIdType ReportId,
                                              const DoIP_ReportIssueContextType* IssueContextPtr
                                           );
        Sync/Async: Synchronous
        Reentrancy: Reentrant
        Parameters (in): ReportId        - Identifier indicating event that caused frame (DoIP message) to be dropped.
                         IssueContextPtr - Structure holding information (context) about dropped frame.

        Description: User defined callout function DoIP calls to report dropped DoIP message (frame).
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Int.h_1497</srcid><srcstatus/><internalId>542</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05010_RoutActAuth_PayloadLen11_NoAuth</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05012_RoutActAuthConf_PayloadLen11_NoConf_1</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05013_RoutActAuthConf_PayloadLen11_NoConf_2</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05029_PowerMode_WrongLength</srcid><srcstatus/><internalId>1242</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05042_PowerMode_WithIncorrectProtocolVersion3</srcid><srcstatus/><internalId>1255</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05043_PowerMode_WithIncorrectProtocolVersion2</srcid><srcstatus/><internalId>1256</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05044_ReportIssue_ReportId_TcpGenHdrErr</srcid><srcstatus/><internalId>1257</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05045_ReportIssue_ReportId_AliveRespWrongSA</srcid><srcstatus/><internalId>1258</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05046_ReportIssue_ReportId_DiagMsgDiagHdr</srcid><srcstatus/><internalId>1259</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05047_ReportIssue_ReportId_DropDiagMsgUL</srcid><srcstatus/><internalId>1260</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.EB.ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>709</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>884</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0136.DoIP_ReportIssueContextType</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>15950</sourceline>
      <version>1</version>
      <description>
        Type name:          DoIP_ReportIssueContextType
        Type kind:          Structure
        Elements:           SrcIpAddrPtr
                            Type: const TcpIp_SockAddrType*
                            Comment: Pointer to a source IP address and port of a dropped frame.
                            DstIpAddrPtr
                            Type: const TcpIp_SockAddrType*
                            Comment: Pointer to a destination IP address and port of a dropped frame.
                            PduInfoPtr
                            Type: const PduInfoType*
                            Comment: Pointer to and the length of discarded DoIP message (frame) when received on an UDP connection.
                                     NULL_PTR and 0 in case message was received on a Tcp connection.
                            VlanId
                            Type: uint16
                            Comment: Vlan ID of a dropped frame (4096 if VLAN is not used).
                            SecurityEventId
                            Type: uint16
                            Comment: IdsM Security event Id, if respective event is configured, 0xFFFF if IdsM event is not configured.
                            DoIPSourceAddress
                            Type: uint16
                            Comment: DoIP source address when this information is part of event context data, i.e. callout function ReportId
                            is one of the following: DOIP_REPORT_ID_FRAME_DROPPED_ROUTING_ACT, DOIP_REPORT_ID_FRAME_DROPPED_ALIVE_RESP_WRONG_SA,
                            DOIP_REPORT_ID_FRAME_DROPPED_DIAG_MSG_DIAG_HDR, DOIP_REPORT_ID_FRAME_DROPPED_DIAG_MSG_UL).
                            DoIPTargetAddress
                            Type: uint16
                            Comment: DoIP target address when this information is part of event context data, i.e. callout function ReportId
                            is one of the following: DOIP_REPORT_ID_FRAME_DROPPED_DIAG_MSG_DIAG_HDR, DOIP_REPORT_ID_FRAME_DROPPED_DIAG_MSG_UL.
                            NackRespCode
                            Type: uint8
                            Comment: NACK or Response code when this information is part of event context data, i.e. callout function
                            ReportId is one of the following: DOIP_REPORT_ID_FRAME_DROPED_UDP_INV_MSG, DOIP_REPORT_ID_FRAME_DROPPED_TCP_GEN_HDR_ERR,
                            DOIP_REPORT_ID_FRAME_DROPPED_ROUTING_ACT, DOIP_REPORT_ID_FRAME_DROPPED_DIAG_MSG_DIAG_HDR,
                            DOIP_REPORT_ID_FRAME_DROPPED_DIAG_MSG_UL).
                            InterfaceId
                            Type: uint8
                            Comment: DoIP Interface Id on which frame is dropped.
        Description:        Structure holding detailed information about dropped frame (DoIP message).
        Available via:      DoIP.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Types.h_94</srcid><srcstatus/><internalId>547</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.EB.ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>709</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>885</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0136.DoIP_ReportIdType</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>16006</sourceline>
      <version>1</version>
      <description>
        Type name:          DoIP_ReportIdType
        Type kind:          Enumeration
        Derived from:       uint8
        Range:              DOIP_REPORT_ID_FRAME_DROPPED_UDP_INV_MSG         0    Frame dropped due to discarded DoIP message received on
                                                                                  UDP connection.
                            DOIP_REPORT_ID_FRAME_DROPPED_TCP_GEN_HDR_ERR     1    Frame dropped due to discarded DoIP message received on
                                                                                  TCP connection, because of generic header error.
                            DOIP_REPORT_ID_FRAME_DROPPED_ROUTING_ACT         2    Frame dropped due to discarded Routing activation message.
                            DOIP_REPORT_ID_FRAME_DROPPED_ALIVE_RESP_WRONG_SA 3    Frame dropped due to discarded Alive check response
                                                                                  message, which is received on a registered Tcp connection
                                                                                  with a wrong source address (received source address does
                                                                                  not match the registered one).
                            DOIP_REPORT_ID_FRAME_DROPPED_DIAG_MSG_DIAG_HDR   4    Frame dropped due to discarded diagnostic message
                                                                                  because of invalid source or target address or inactive route.
                            DOIP_REPORT_ID_FRAME_DROPPED_DIAG_MSG_UL         5    Frame dropped due to discarded diagnostic message because
                                                                                  upper layer was not able to receive it.
        Description:        Enumeration identifying reasons for a frame drop. It also defines which parameters in DoIP_ReportIssueContextType are
                            filled to describe context data which led to message (frame) discard.
        Available via:      DoIP.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP_Types.h_120</srcid><srcstatus/><internalId>548</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.EB.ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>709</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>886</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0136.ReportId.ContextData</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>16044</sourceline>
      <version>1</version>
      <description>
        The following table defines events that are reported throughout report issue user callout function, the condition which led to
        event reporting, corresponding IdsM event and relevant context data that defines event in more detail:
          Event id                            Description and context data
          ---------------------------------------------------------------------------------------------------------------------------------
          DOIP_REPORT_ID_FRAME_DROPPED_UDP_INV_MSG      Frame dropped due to discarded DoIP message received on a UDP connection.
                                                        IdsM security event name: DOIP_SEV_DROP_UDP_INV_MSG.
                                                        Context data: NackRespCode - filled with Generic header NACK code, 0xFF in case of
                                                                                     a silent discard.

          DOIP_REPORT_ID_FRAME_DROPPED_TCP_GEN_HDR_ERR  Frame dropped due to discarded DoIP message received on a TCP connection due to
                                                        generic header error.
                                                        IdsM security event name: DOIP_SEV_DROP_TCP_GEN_HDR_ERR.
                                                        Context data: NackRespCode - filled with Generic header NACK code, 0xFF in case of
                                                                                     a silent discard.
          DOIP_REPORT_ID_FRAME_DROPPED_ROUTING_ACT      Frame dropped due to discarded Routing activation message.
                                                        IdsM security event name: DOIP_SEV_ROUTING_ACT_RESP_TX.
                                                        Context data: DoIPSourceAddress - Source Address field from Routing activation request message.
                                                                      NackRespCode - Routing activation response code.
                                                        Event is reported for the following response codes:
                                                        DOIP_ROU_ACT_RESP_UNKNOWN_SRC (0x00),       DOIP_ROU_ACT_RESP_NO_FREE_TCP (0x01),
                                                        DOIP_ROU_ACT_RESP_WRONG_SRC (0x02),         DOIP_ROU_ACT_RESP_SRC_IN_USE (0x03),
                                                        DOIP_ROU_ACT_RESP_NO_AUTHENTICATION (0x04), DOIP_ROU_ACT_RESP_NO_CONFIRMATION (0x05),
                                                        DOIP_ROU_ACT_RESP_UNKNOWN_ACT_TYPE (0x06),  DOIP_ROU_ACT_RESP_TCP_CONN_UNSECURED (0x07).

          DOIP_REPORT_ID_FRAME_DROPPED_ALIVE_RESP_WRONG_SA   Frame dropped due to discarded Alive check response message, which is received
                                                             on a registered Tcp connection with a wrong source address (received source
                                                             address does not match the registered one).
                                                             IdsM security event name: DOIP_SEV_ALIVE_RESP_WRONG_SA_RESET.
                                                             Context data: DoIPSourceAddress - Source Address field from Alive check response message.

          DOIP_REPORT_ID_FRAME_DROPPED_DIAG_MSG_DIAG_HDR     Frame dropped due to discarded diagnostic message because of invalid source or
                                                             target address or inactive route.
                                                             IdsM security event name: DOIP_SEV_DROP_DIAG_MSG_DIAG_HDR.
                                                             Context data: DoIPSourceAddress - Source Address field from diagnostic message header.
                                                                           DoIPTargetAddress - Target Address field from diagnostic message header.
                                                                           NackRespCode - filled with diagnostic message NACK code, 0xFF for silent discard.
                                                             Event is reported for the silent discard and the following NACKs:
                                                             DOIP_DIAG_MSG_NACK_INV_SRC_ADDR (0x02), DOIP_DIAG_MSG_NACK_INV_TAR_ADDR (0x03),
                                                             DOIP_DIAG_MSG_NACK_ROUTE_INACTIVE (0x06).

          DOIP_REPORT_ID_FRAME_DROPPED_DIAG_MSG_UL      Frame dropped due to discarded diagnostic message because upper layer was not able
                                                        to receive it.
                                                        IdsM security event name: DOIP_SEV_DROP_DIAG_MSG_UL.
                                                        Context data: DoIPSourceAddress - Source Address field from diagnostic message header.
                                                                      DoIPTargetAddress - Target Address field from diagnostic message header.
                                                                      NackRespCode - filled with diagnostic message NACK code, 0xFF for silent discard.
                                                        Event is reported for the following NACKs:
                                                        DOIP_DIAG_MSG_NACK_PDUR_BUF_OVFL (0x05), DOIP_DIAG_MSG_NACK_PDUR_BUF_NOT_OK (0x08).
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_8048</srcid><srcstatus/><internalId>592</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05010_RoutActAuth_PayloadLen11_NoAuth</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05012_RoutActAuthConf_PayloadLen11_NoConf_1</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05013_RoutActAuthConf_PayloadLen11_NoConf_2</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05029_PowerMode_WrongLength</srcid><srcstatus/><internalId>1242</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05042_PowerMode_WithIncorrectProtocolVersion3</srcid><srcstatus/><internalId>1255</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05043_PowerMode_WithIncorrectProtocolVersion2</srcid><srcstatus/><internalId>1256</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05044_ReportIssue_ReportId_TcpGenHdrErr</srcid><srcstatus/><internalId>1257</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05045_ReportIssue_ReportId_AliveRespWrongSA</srcid><srcstatus/><internalId>1258</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05046_ReportIssue_ReportId_DiagMsgDiagHdr</srcid><srcstatus/><internalId>1259</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05047_ReportIssue_ReportId_DropDiagMsgUL</srcid><srcstatus/><internalId>1260</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.EB.ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>709</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>887</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0136.ReportIssueCallout_Call</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>16111</sourceline>
      <version>1</version>
      <description>
        If the container DoIPReportIssueCallout is not empty, i.e. user have enabled the container and specified valid
        callout function name, DoIP shall call that callout function for each of the events specified in [DoIP_ReportIdType]
        in the following sequence:
        1) Obtain SoConId as specified in [ReportIssueCallout_GetSoConId].
        2) Call SoAd_GetSoConInfo() to obtain LocalIpAddr, RemoteIpAddr, and VlanId, use this values to fill DoIP_ReportIssueContextType.
        3) Obtain IdsM Security event Id, if IdsM reporting is enabled and relevant IdsM event configured.
           Mapping between report issue event and IdsM event name is given in [ReportId.ContextData].
           If IdsM Security event Id is not available, fill SecurityEventId with 0xFFFF.
        4) Fill out context data based on report issue event id as specified in [ReportId.ContextData].
           Put non-relevant context data to all 0xFF.
        5) Call user callout function.
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Due to the feature complexity more then 10 test cases are
        required for complete testing.
      </furtherinfo>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
        Test the following:
        1) Configure user callout function as specified in [User_DoIPReportIssue].
        2) For each report issue event specified in [DoIP_ReportIdType], simulate all conditions described in
           [ReportId.ContextData] and verify that the sequence described in this requirement is followed.
        3) Verify that user callout function is called with expected parameters including context data.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05010_RoutActAuth_PayloadLen11_NoAuth</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05012_RoutActAuthConf_PayloadLen11_NoConf_1</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05013_RoutActAuthConf_PayloadLen11_NoConf_2</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05029_PowerMode_WrongLength</srcid><srcstatus/><internalId>1242</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05042_PowerMode_WithIncorrectProtocolVersion3</srcid><srcstatus/><internalId>1255</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05043_PowerMode_WithIncorrectProtocolVersion2</srcid><srcstatus/><internalId>1256</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05044_ReportIssue_ReportId_TcpGenHdrErr</srcid><srcstatus/><internalId>1257</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05045_ReportIssue_ReportId_AliveRespWrongSA</srcid><srcstatus/><internalId>1258</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05046_ReportIssue_ReportId_DiagMsgDiagHdr</srcid><srcstatus/><internalId>1259</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05047_ReportIssue_ReportId_DropDiagMsgUL</srcid><srcstatus/><internalId>1260</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05049_ReportIssue_GetSoConInfo_E_NOT_OK</srcid><srcstatus/><internalId>1262</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_8058</srcid><srcstatus/><internalId>593</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.EB.ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>709</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>888</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0136.ReportIssueCallout_GetSoConId</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>16153</sourceline>
      <version>1</version>
      <description>
        When DoIP needs to call report issue callout function, under conditions specified
        in [ReportIssueCallout_Call], SoAd_GetSoConId() shall be called to retrieve SoConId.
        If SoAd_GetSoConId() returns other then E_OK, callout function call shall be skipped.
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Due to the feature complexity more then 10 test cases are
        required for complete testing.
      </furtherinfo>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
        Test the following use cases:
        - Configure SoAd_GetSoConId() stub to return E_OK and verify that respective callout
          function is called.
        - Configure SoAd_GetSoConId() stub to return E_NOT_OK and verify that respective callout
          call was skipped.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ConTest05010_RoutActAuth_PayloadLen11_NoAuth</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05012_RoutActAuthConf_PayloadLen11_NoConf_1</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05013_RoutActAuthConf_PayloadLen11_NoConf_2</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05029_PowerMode_WrongLength</srcid><srcstatus/><internalId>1242</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05042_PowerMode_WithIncorrectProtocolVersion3</srcid><srcstatus/><internalId>1255</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05043_PowerMode_WithIncorrectProtocolVersion2</srcid><srcstatus/><internalId>1256</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05044_ReportIssue_ReportId_TcpGenHdrErr</srcid><srcstatus/><internalId>1257</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05045_ReportIssue_ReportId_AliveRespWrongSA</srcid><srcstatus/><internalId>1258</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05046_ReportIssue_ReportId_DiagMsgDiagHdr</srcid><srcstatus/><internalId>1259</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05047_ReportIssue_ReportId_DropDiagMsgUL</srcid><srcstatus/><internalId>1260</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05048_ReportIssue_GetSoConId_E_NOT_OK</srcid><srcstatus/><internalId>1261</internalId></linkedfrom><linkedfrom><srcid>DoIP_ConTest05049_ReportIssue_GetSoConInfo_E_NOT_OK</srcid><srcstatus/><internalId>1262</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_8037</srcid><srcstatus/><internalId>591</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.EB.ReportIssueCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>709</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>889</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Vehicle announcement connection optional">
    <specobject>
      <id>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledPostBuildVariables</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>16189</sourceline>
      <version>1</version>
      <description>
        If all instances of configuration parameter DoIPMaxVehicleAnnouncementCon are set to zero,
        the following variables / arrays shall not be generated in a post-build configuration file nor
        referenced in a source code.
          - UdpAnnConCfgRef
          - DoIP_UdpAnnConCfg[]
          - UdpAnnConMax
          - InitialVehicleAnnouncementTime
          - VehicleAnnouncementInterval
          - UdpAnnConFirstId
          - UdpAnnConCount
          - AnnStartAtTrigger
          - VehicleAnnouncementCount
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/DoIP.xgen_167</srcid><srcstatus/><internalId>660</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_var/xgen/DoIP.xgen_266</srcid><srcstatus/><internalId>661</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_var/xgen/DoIP.xgen_339</srcid><srcstatus/><internalId>662</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_var/xgen/DoIP.xgen_363</srcid><srcstatus/><internalId>663</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_var/xgen/DoIP.xgen_393</srcid><srcstatus/><internalId>664</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_var/xgen/DoIP.xgen_406</srcid><srcstatus/><internalId>665</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_var/xgen/DoIP.xgen_650</srcid><srcstatus/><internalId>666</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>890</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledFunctionality</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>16219</sourceline>
      <version>1</version>
      <description>
        If all instances of configuration parameter DoIPMaxVehicleAnnouncementCon are set to zero,
        functionality of Vehicle announcement shall be disabled in the code.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/DoIP.h_442</srcid><srcstatus/><internalId>526</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/DoIP_Int.h_1368</srcid><srcstatus/><internalId>541</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_1403</srcid><srcstatus/><internalId>551</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_1464</srcid><srcstatus/><internalId>552</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/DoIP.c.m4_1532</srcid><srcstatus/><internalId>553</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_ComTest_01_Features_Enabled</srcid><srcstatus/><internalId>955</internalId></linkedfrom><linkedfrom><srcid>DoIP_ComTest_02_Features_Disabled</srcid><srcstatus/><internalId>956</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0120.VehicleIdAnnouncement</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>891</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Tresos XDM checks">
    <specobject>
      <id>DoIP.EB.XDM.Udp.RxTxIds_NotEqual</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17627</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if DoIPSoAdUdpRxPduId and DoIPSoAdUdpTxPduId
        of a UDP connection are not equal.
      </description>
      <comment>
        Rationale:
        This check is necessary to protect the post build configuration structure to be filled with
        wrong values.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01006_Invalid_DoIP_Xdm_Udp_RxTxIds_NotEqual</srcid><srcstatus/><internalId>966</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>892</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.Tcp.RxTxIds_NotEqual</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17646</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if DoIPSoAdTcpRxPduId and DoIPSoAdTcpTxPduId
        of a TCP connection are not equal.
      </description>
      <comment>
        Rationale:
        This check is necessary to protect the post build configuration structure to be filled with
        wrong values.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01018_Invalid_DoIP_Xdm_Tcp_RxTxIds_NotEqual</srcid><srcstatus/><internalId>978</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>893</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.Udp.DoIPSoAdRxPduId_Consecutive</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17665</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if DoIPSoAdUdpRxPduId of the UDP connections are
        not consecutive over all interfaces.
      </description>
      <comment>
        Rationale:
        This check is necessary to protect the post build configuration structure to be filled with
        wrong values.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01007_Invalid_DoIP_Xdm_Udp_DoIPSoAdUdpRxPduId_NotConsecutive</srcid><srcstatus/><internalId>967</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_Extension.xdm.m4_238</srcid><srcstatus/><internalId>647</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>894</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.Udp.DoIPSoAdRxPduId_ZeroBased</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17685</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if DoIPSoAdUdpRxPduId of the UDP connections are
        not zero based over all interfaces.
      </description>
      <comment>
        Rationale:
        This check is necessary to protect the post build configuration structure to be filled with
        wrong values.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01008_Invalid_DoIP_Xdm_Udp_DoIPSoAdUdpRxPduId_NotZeroBased</srcid><srcstatus/><internalId>968</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_Extension.xdm.m4_237</srcid><srcstatus/><internalId>646</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>895</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.Tcp.DoIPSoAdRxPduId_Consecutive</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17705</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if DoIPSoAdTcpRxPduId of the TCP connections are not
        consecutive.
      </description>
      <comment>
        Rationale:
        This check is necessary to protect the post build configuration structure to be filled with
        wrong values.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01021_Invalid_DoIP_Xdm_Tcp_DoIPSoAdRxPduId_NotConsecutive</srcid><srcstatus/><internalId>980</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>896</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.Tcp.DoIPSoAdRxPduId_ZeroBased</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17724</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if DoIPSoAdTcpRxPduId of the TCP connections are not
        zero based.
      </description>
      <comment>
        Rationale:
        This check is necessary to protect the post build configuration structure to be filled with
        wrong values.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01022_Invalid_DoIP_Xdm_Tcp_DoIPSoAdRxPduId_NotZeroBased</srcid><srcstatus/><internalId>981</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>897</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.Channel.DoIPPduRRxPduId_Consecutive</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17743</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if DoIPPduRRxPduId of the channels are not
        consecutive.
      </description>
      <comment>
        Rationale:
        This check is necessary to protect the post build configuration structure to be filled with
        wrong values.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01023_Invalid_DoIP_Xdm_Channel_DoIPPduRRxPduId_NotConsecutive</srcid><srcstatus/><internalId>982</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>898</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.Channel.DoIPPduRRxPduId_ZeroBased</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17762</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if DoIPPduRRxPduId of the channels are not
        zero based.
      </description>
      <comment>
        Rationale:
        This check is necessary to protect the post build configuration structure to be filled with
        wrong values.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01024_Invalid_DoIP_Xdm_Channel_DoIPPduRRxPduId_NotZeroBased</srcid><srcstatus/><internalId>983</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>899</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.Channel.RouteDuplicate</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17781</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if more than one channel exists with
        same combination of DoIPChannelSARef and DoIPChannelTARef.
      </description>
      <comment>
        Rationale:
        This check is necessary to protect the post build configuration structure to be filled with
        wrong values.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01025_Invalid_DoIP_Xdm_Channel_RouteDuplicate</srcid><srcstatus/><internalId>984</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>900</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.Wrong_DoIPUdpVehicleAnnouncement_DoIPSoAdTxPduId</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17800</sourceline>
      <version>1</version>
      <description>
        An error shall be generated if DoIPUdpVehicleAnnouncementConnection/
        DoIPSoAdUdpVehicleAnnouncementTxPdu/DoIPSoAdUdpVehicleAnnouncementTxPduId
        is not consecutive and does not start with the next higher
        DoIPUdpConnection/DoIPSoAdUdpTxPdu/DoIPSoAdUdpTxPduId.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01001_Invalid_DoIP_Xdm_DoIPUdpVehicleAnnouncement_Wrong_DoIPSoAdTxPduId</srcid><srcstatus/><internalId>961</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_Extension.xdm.m4_318</srcid><srcstatus/><internalId>648</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>901</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.DoIPUdpConnection_Bad_DoIPSoAdTxPduRef</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17818</sourceline>
      <version>1</version>
      <description>
        An error shall be generated if
        DoIPUdpConnection/DoIPUdpConnection_1/DoIPSoAdUdpTxPdu/DoIPSoAdUdpRxPduRef and
        DoIPUdpVehicleAnnouncementConnection/DoIPUdpVehicleAnnouncementConnection_0/
        DoIPSoAdUdpVehicleAnnouncementTxPdu/DoIPSoAdUdpVehicleAnnouncementTxPduRef
        have the same reference path.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01002_Invalid_DoIP_Xdm_DoIPUdpConnection_Bad_DoIPSoAdTxPduRef</srcid><srcstatus/><internalId>962</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>902</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.VehicleIdentificationSyncStatus_ENABLED_DoIPSoAdTxPduRef</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17834</sourceline>
      <version>1</version>
      <description>
        If the configuration parameter DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/
        DoIPUseVehicleIdentificationSyncStatus is ENABLED for any transmit PDU reference
        to EcuC PduLength from DoIPUdpConnection or from DoIPUdpVehicleAnnouncementConnection,
        the value of EcuC PduLength must be higher or equal to 41.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01003_Invalid_DoIP_Xdm_VehicleIdentificationSyncStatus_ON_DoIPSoAdTxPduRef</srcid><srcstatus/><internalId>963</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>903</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.VehicleIdentificationSyncStatus_DISABLED_DoIPSoAdTxPduRef</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17849</sourceline>
      <version>1</version>
      <description>
        If the configuration parameter DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/
        DoIPUseVehicleIdentificationSyncStatus is DISABLED for any transmit PDU reference to EcuC
        PduLength from DoIPUdpConnection or from DoIPUdpVehicleAnnouncementConnection,
        the value of EcuC PduLength must be higher or equal to 40.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01004_Invalid_DoIP_Xdm_VehicleIdentificationSyncStatus_OFF_DoIPSoAdTxPduRef</srcid><srcstatus/><internalId>964</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>904</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.DoIPNumByteDiagAckNack_Oversized</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17864</sourceline>
      <version>1</version>
      <description>
        A warning shall be reported if a value of a parameter DoIPTester/DoIPNumByteDiagAckNack
        is greater then DoIPMaxNumByteDiagAckNack in case buffer pools are diabled.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01005_Invalid_DoIP_Xdm_DoIPNumByteDiagAckNack_Oversized</srcid><srcstatus/><internalId>965</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DoIPMaxNumByteDiagAckNack_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>905</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.CustomChannel.DoIPTcpConnectionRef.Invalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17883</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if more than one custom channel exists with the
        same DoIPTcpConnectionRef.
      </description>
      <comment>
        Rationale:
        This check is necessary to protect the post build configuration structure to be filled with
        wrong values.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01009_Invalid_DoIP_Xdm_CustomChannel_TcpConnRef</srcid><srcstatus/><internalId>969</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>906</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.CustomChannel.DoIPPduRRxPduRef.InvalidRef</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17902</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if custom channel parameter DoIPPduRRxPduRef
        does not point to a valid reference.
      </description>
      <comment>
        Rationale:
        This check is necessary to protect the post build configuration structure to be filled with
        wrong values.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01010_Invalid_DoIP_Xdm_CustomChannel_Invalid_DoIPPduRRxPduRef</srcid><srcstatus/><internalId>970</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>907</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.CustomChannel.DoIPPduRTxPduRef.InvalidRef</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17921</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if custom channel parameter DoIPPduRTxPduRef
        does not point to a valid reference.
      </description>
      <comment>
        Rationale:
        This check is necessary to protect the post build configuration structure to be filled with
        wrong values.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01011_Invalid_DoIP_Xdm_CustomChannel_Invalid_DoIPPduRTxPduRef</srcid><srcstatus/><internalId>971</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>908</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.CustomChannel.DoIPTcpConnectionRef.InvalidRef</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17940</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if custom channel parameter DoIPTcpConnectionRef
        does not point to a valid reference.
      </description>
      <comment>
        Rationale:
        This check is necessary to protect the post build configuration structure to be filled with
        wrong values.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01012_Invalid_DoIP_Xdm_CustomChannel_Invalid_DoIPTcpConnectionRef</srcid><srcstatus/><internalId>972</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>909</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.CustomChannel.DoIPPduRRxPduId.Consecutive</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17959</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if custom channel parameter DoIPPduRRxPduId is not
        consecutive and does not start with the next higher DoIPChannel/*/DoIPPduRRxPdu/DoIPPduRRxPduId.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01051_Invalid_DoIP_Xdm_CustomChannel_DoIPPduRRxPduId_Consecutive</srcid><srcstatus/><internalId>1010</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>910</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.CustomChannel.DoIPPduRTxPduId.Consecutive</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17973</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if custom channel parameter DoIPPduRTxPduId is not
        consecutive and does not start with the next higher DoIPChannel/*/DoIPPduRTxPdu/DoIPPduRTxPduId.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01050_Invalid_DoIP_Xdm_CustomChannel_DoIPPduRTxPduId_Consecutive</srcid><srcstatus/><internalId>1009</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>911</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.DoIPMaxChannels</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>17987</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if the number of channels (including custom
        channels) exceeds the parameter DoIPMaxChannels.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01013_Invalid_DoIP_Xdm_DoIPTester_Invalid_DoIPMaxChannels</srcid><srcstatus/><internalId>973</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>912</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.DoIPInvCustomChannelsNr</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18001</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if the number of custom channels differs from
        the number of Tcp connections.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01014_Invalid_DoIP_Xdm_DoIPTester_Invalid_DoIPCustomChannelsNr</srcid><srcstatus/><internalId>974</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>913</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.DoIPMaxTesterConnections.Oversized</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18015</sourceline>
      <version>1</version>
      <description>
        The generator shall raise a warning message if the parameter DoIPMaxTesterConnections
        is greater then number of configured Tcp connections, and that reducing
        the value of this parameter will reduce RAM consumption.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01016_Invalid_DoIP_Xdm_DoIPMaxTesterConnections_Oversized</srcid><srcstatus/><internalId>976</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>914</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.DoIPTester.NoRoutingActivation</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18030</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message when tester is not referenced by any channel with
        automatic routing activation and no routing activation reference is configured.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01017_Invalid_DoIP_Xdm_Tester_NoRoutingActivation</srcid><srcstatus/><internalId>977</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>915</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.RoutingActivation.EmptyRefLists</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18044</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message when routing activation object has an empty
        DoIPTargetAddressRef list.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01026_Invalid_DoIP_Xdm_RoutingActivation_EmptyRefLists</srcid><srcstatus/><internalId>985</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>916</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.MacAddress_false.NoDoIPEid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18058</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message when DoIPUseMacAddressForIdentification is set
        to false and no DoIPEid is configured.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01027_Invalid_DoIP_Xdm_NoDoIPUseMacAddressForIdentification_NoDoIPEid</srcid><srcstatus/><internalId>986</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_Extension.xdm.m4_25</srcid><srcstatus/><internalId>643</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>917</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XdmCheck.DoIPMaxUDPSocketConnections.Invalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18073</sourceline>
      <version>1</version>
      <description>
        Generator shall raise an error if DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/
        DoIPMaxUDPSocketConnections is configured to less value than number of configured UDP
        connections in /DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPConnections/DoIPUdpConnection
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01035_Invalid_DoIP_Xdm_MaxUDPSocketConnections</srcid><srcstatus/><internalId>994</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>918</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XdmCheck.RoutingActivation.TARef_Without_Channel</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18088</sourceline>
      <version>1</version>
      <description>
        Generator shall raise an error if target address referenced in
        DoIPRoutingActivation/DoIPTargetAddressRef is also not referenced in
        at least one channel.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01036_Invalid_DoIP_Xdm_RoutingActivation_TA_Reference_Without_Connection</srcid><srcstatus/><internalId>995</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>919</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XdmCheck.DoIPPowerMode.Empty</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18103</sourceline>
      <version>1</version>
      <description>
        Generator shall raise an error if DoIPGeneral/DoIPPowerModeCallback/DoIPPowerModeDirect is enabled,
        but user callback function name is not specified (field is empty).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01015_Invalid_DoIP_Xdm_DoIPPowerMode_Empty</srcid><srcstatus/><internalId>975</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>920</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XdmCheck.DynamicGIDSync.Enable</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18117</sourceline>
      <version>1</version>
      <description>
        If configuration parameter DoIPDynamicGIDMasterSelection is enabled then DoIPGetGidCallback
        must be enabled too. Vice versa, when DoIPGetGidCallback is enabled then
        DoIPDynamicGIDMasterSelection must be enabled too.
        If these conditions are not fulfilled generator shall raise an error.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01029_Invalid_DoIP_Xdm_DynamicGIDSync_Enable_1</srcid><srcstatus/><internalId>988</internalId></linkedfrom><linkedfrom><srcid>DoIP_GenTest_01030_Invalid_DoIP_Xdm_DynamicGIDSync_Enable_2</srcid><srcstatus/><internalId>989</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0110.SWS.EB.GidSync</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>679</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>921</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XdmCheck.DoIPDynamicGIDMasterSelection.CallbackName</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18139</sourceline>
      <version>1</version>
      <description>
        Generator shall raise an error if DoIPDynamicGIDMasterSelectionCallback container is enabled,
        but no callback function name is specified.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01031_Invalid_DoIP_Xdm_DoIPDynamicGIDMasterSelection_CallbackName</srcid><srcstatus/><internalId>990</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>922</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XdmCheck.DoIPGetGid.CallbackName</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18154</sourceline>
      <version>1</version>
      <description>
        Generator shall raise an error if DoIPGetGidCallback container is enabled, but no callback
        function name is specified.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01032_Invalid_DoIP_Xdm_DoIPGetGid_CallbackName</srcid><srcstatus/><internalId>991</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>923</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XdmCheck.No_Rte_Found</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18169</sourceline>
      <version>1</version>
      <description>
        DoIP shall display a warning message if DoIP is configured for Rte usage (configuration
        parameter DoIPRteUsage is enabled), but the Rte is not part of the configuration.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_1199</srcid><srcstatus/><internalId>625</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01028_Invalid_DoIP_Xdm_No_Rte_Found</srcid><srcstatus/><internalId>987</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>924</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XdmCheck.SoAdRxSocketConnOrSocketConnBundleRef.Invalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18186</sourceline>
      <version>1</version>
      <description>
        DoIP shall display an error message if Tcp connection used for diagnostic traffic,
        connected through DoIPSoAdRxPduRef to the reference SoAdRxSocketConnOrSocketConnBundleRef
        of related SoAdSocketRoute does not point to a Socket Connection.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01033_Invalid_DoIP_Xdm_SoAdRxSocketConnOrSocketConnBundleRef</srcid><srcstatus/><internalId>992</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>925</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XdmCheck.SoAdSocketTpRxBufferMin.Enable</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18203</sourceline>
      <version>1</version>
      <description>
        DoIP shall display an error message if Tcp connection used for diagnostic traffic,
        connected through DoIPSoAdRxPduRef and SoAdRxSocketConnOrSocketConnBundleRef to the
        parameter SoAdSocketTpRxBufferMin is not enabled for related SoAdSocketConnectionGroup.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01034_Invalid_DoIP_Xdm_SoAdSocketTpRxBufferMin</srcid><srcstatus/><internalId>993</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>926</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XdmCheck.DoIPHostNameSizeMax.MinWithVin</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18220</sourceline>
      <version>1</version>
      <description>
        If parameter DoIPDhcpOptionVinUse is set to 'true', DoIP shall display an error message if
        parameter DoIPHostNameSizeMax is smaller than the sum of: "DoIP-" string-length + size of
        VIN (17) + string-length of DoIPDhcpHostNamePrefix parameter.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01037_Invalid_DoIP_Xdm_DoIPHostNameSizeMax_WithVinOption</srcid><srcstatus/><internalId>996</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>927</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XdmCheck.DoIPHostNameSizeMax.MinNoVin</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18237</sourceline>
      <version>1</version>
      <description>
        If parameter DoIPDhcpOptionVinUse is set to 'false', DoIP shall display an error message if
        parameter DoIPHostNameSizeMax is smaller than the sum of: "DoIP-" string-length +
        string-length of DoIPDhcpHostNamePrefix parameter.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01038_Invalid_DoIP_Xdm_DoIPHostNameSizeMax_NoVinOption</srcid><srcstatus/><internalId>997</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>928</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XdmCheck.DoIPHostNameSizeMax.MaxValue</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18254</sourceline>
      <version>1</version>
      <description>
        DoIP shall display an error message if parameter DoIPHostNameSizeMax is set to value greater
        then 255.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01039_Invalid_DoIP_Xdm_DoIPHostNameSizeMax_InvalidMax</srcid><srcstatus/><internalId>998</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>929</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.Channel.TesterRoutingActivationType</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18270</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if DoIPChannels with same configured
        DoIPChannelSARef have different DoIPRoutingActivationTypes configured.
      </description>
      <comment>
        Rationale:
        This check is necessary because DoIPChannels with DOIP_ROUTING_ACTIVATION_AUTOMATIC are
        automatically in the ISO state Registered[Routing Active], while DoIP channels with
        DOIP_ROUTING_ACTIVATION_MSG are not, so they need to be split up.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01040_Invalid_DoIP_Xdm_Channel_TesterRoutingActivationType</srcid><srcstatus/><internalId>999</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>930</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.TcpConn.SoAdSocketSoConModeChgNotification</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18290</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if SoAd module config parameter
        SoAdSocketSoConModeChgNotification of corresponding SoAdSocketConnectionGroup is not set to
        TRUE for TCP connections used in DoIP.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01041_Invalid_DoIP_Xdm_SoAdSocketSoConModeChgNotification</srcid><srcstatus/><internalId>1000</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>931</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.TcpConn.SoAdSocketAutomaticSoConSetup</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18305</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if SoAd module config parameter
        SoAdSocketAutomaticSoConSetup of corresponding SoAdSocketConnectionGroup is not set to FALSE
        for TCP connections used in DoIP.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01042_Invalid_DoIP_Xdm_SoAdSocketAutomaticSoConSetup</srcid><srcstatus/><internalId>1001</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>932</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.TcpConn.SoAdPduHeaderEnable</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18320</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if SoAd module config parameter
        SoAdPduHeaderEnable of corresponding SoAdSocketConnectionGroup is not set to FALSE for TCP
        connections used in DoIP.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01043_Invalid_DoIP_Xdm_SoAdPduHeaderEnable</srcid><srcstatus/><internalId>1002</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>933</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.TcpConn.SoAdSocketTcpInitiate</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18335</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if SoAd module config parameter
        SoAdSocketTcpInitiate of corresponding SoAdSocketConnectionGroup is not set to FALSE for TCP
        connections used in DoIP.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01044_Invalid_DoIP_Xdm_SoAdSocketTcpInitiate</srcid><srcstatus/><internalId>1003</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>934</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.DoIPSoAdRxTxPduRef.SameSoAdSoConGroup</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18350</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if DoIPSoAdTcpTxPduRef and DoIPSoAdTcpRxPduRef do not
        belong to the same SoAd SoConGroup.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01045_Invalid_DoIP_Xdm_SameSoAdSoConGroup</srcid><srcstatus/><internalId>1004</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>935</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.DoIPSoAdRxPduRef.InvalidRef</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18364</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if configuration parameter DoIPSoAdTcpRxPduRef does
        not point to a valid reference.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01046_Invalid_DoIP_Xdm_DoIPSoAdRxPduRef_InvalidRef</srcid><srcstatus/><internalId>1005</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>936</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.DoIPSoAdRxPduRef.NotUnique</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18378</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if configuration parameter DoIPSoAdTcpRxPduRef is
        not unique.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01047_Invalid_DoIP_Xdm_DoIPSoAdRxPduRef_NotUnique</srcid><srcstatus/><internalId>1006</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>937</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.DoIPSoAdRxPduRef.SoAdRxPduRef</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18392</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if there is no SoAdSocketRouteDest/SoAdRxPduRef
        in SoAd referring to the same Rx PDU.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01048_Invalid_DoIP_Xdm_DoIPSoAdRxPduRef_Errors</srcid><srcstatus/><internalId>1007</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>938</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.DoIPSoAdRxPduRef.SoAdRxUpperLayerTypeTp</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18406</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if SoAdRxUpperLayerType in SoAd is not 'TP'.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01048_Invalid_DoIP_Xdm_DoIPSoAdRxPduRef_Errors</srcid><srcstatus/><internalId>1007</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>939</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.DoIPSoAdRxPduRef.SoAdRxPduIdEnabled</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18419</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if SoAdRxPduId in SoAd is not enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01048_Invalid_DoIP_Xdm_DoIPSoAdRxPduRef_Errors</srcid><srcstatus/><internalId>1007</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>940</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.SoAdRxPduRef.MultipleSoAdRxPduRef</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18432</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if multiple SoAdSocketRouteDest/SoAdRxPduRef are
        found in SoAd referring to the same Rx PDU.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01049_Invalid_DoIP_Xdm_DoIPSoAdRxPduRef_Multiple</srcid><srcstatus/><internalId>1008</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>941</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.DoIPSecurityEventRefs.Added</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18446</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if DoIPEnableSecurityEventReporting is enabled,
        but no DoIPSecurityEventRefs are defined.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_02001_Invalid_Xdm_Check_NoSecurityRefrence</srcid><srcstatus/><internalId>1011</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>942</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.DoIPSecurityEventRefs.Valid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18466</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if a reference contained in DoIPSecurityEventRefs
        container is not valid.
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Linking all feature requirements to the single top-level
        requirement brings clear benefits and splitting them up would only increase complexity
        without any real improvements.
      </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_02002_Xdm_Check_InvalidRef_DOIP_SEV_DROP_UDP_INV_MSG</srcid><srcstatus/><internalId>1012</internalId></linkedfrom><linkedfrom><srcid>DoIP_GenTest_02003_Xdm_Check_InvalidRef_DOIP_SEV_VEHICLE_ID_RESP_TX</srcid><srcstatus/><internalId>1013</internalId></linkedfrom><linkedfrom><srcid>DoIP_GenTest_02004_Xdm_Check_InvalidRef_DOIP_SEV_ENTITY_STATUS_RESP_TX</srcid><srcstatus/><internalId>1014</internalId></linkedfrom><linkedfrom><srcid>DoIP_GenTest_02005_Xdm_Check_InvalidRef_DOIP_SEV_POWER_MODE_RESP_TX</srcid><srcstatus/><internalId>1015</internalId></linkedfrom><linkedfrom><srcid>DoIP_GenTest_02006_Xdm_Check_InvalidRef_DOIP_SEV_DROP_TCP_GEN_HDR_ERR</srcid><srcstatus/><internalId>1016</internalId></linkedfrom><linkedfrom><srcid>DoIP_GenTest_02007_Xdm_Check_InvalidRef_DOIP_SEV_ROUTING_ACT_RESP_TX</srcid><srcstatus/><internalId>1017</internalId></linkedfrom><linkedfrom><srcid>DoIP_GenTest_02008_Xdm_Check_InvalidRef_DOIP_SEV_ALIVE_RESP_WRONG_SA_RESET</srcid><srcstatus/><internalId>1018</internalId></linkedfrom><linkedfrom><srcid>DoIP_GenTest_02009_Xdm_Check_InvalidRef_DOIP_SEV_ALIVE_RESP</srcid><srcstatus/><internalId>1019</internalId></linkedfrom><linkedfrom><srcid>DoIP_GenTest_02010_Xdm_Check_InvalidRef_DOIP_SEV_DROP_DIAG_MSG_DIAG_HDR</srcid><srcstatus/><internalId>1020</internalId></linkedfrom><linkedfrom><srcid>DoIP_GenTest_02011_Xdm_Check_InvalidRef_DOIP_SEV_DROP_DIAG_MSG_UL</srcid><srcstatus/><internalId>1021</internalId></linkedfrom><linkedfrom><srcid>DoIP_GenTest_02012_Xdm_Check_InvalidRef_DOIP_SEC_TCP_CONN_RESET_INACTIVITY_TIMER</srcid><srcstatus/><internalId>1022</internalId></linkedfrom><linkedfrom><srcid>DoIP_GenTest_02013_Xdm_Check_InvalidRef_DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER</srcid><srcstatus/><internalId>1023</internalId></linkedfrom><linkedfrom><srcid>DoIP_GenTest_02014_Xdm_Check_InvalidRef_AllEvents</srcid><srcstatus/><internalId>1024</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>943</internalId></specobject>
    <specobject>
      <id>DoIP.EB.XDM.DoIPSecurityEventRefs.Unique</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18491</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if a reference contained in DoIPSecurityEventRefs
        is not unique.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_02015_Invalid_Xdm_Check_SameReferenceOfEvents</srcid><srcstatus/><internalId>1025</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>944</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.XDM.SecureConnectionNotAllowed</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18511</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if configuration parameters DoIP_ISO13400_2_2019
        and DoIPSecuredCommunicationforAllProtocolVersions are disabled but at least one
        TCP connection requires security (DoIPTcpConnectionSecurityRequired = TRUE).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_02018_Invalid_Xdm_Check_NoSecureProtocolEnabled</srcid><srcstatus/><internalId>1028</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_Extension.xdm.m4_123</srcid><srcstatus/><internalId>644</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.SecureConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>694</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>945</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.XDM.SecureRoutingActivationRequiresSecuredConnection</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18537</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if DoIPRoutingActivationSecurityRequired is
        enabled but no TCP connection is configured to be secure (DoIPTcpConnectionSecurityRequired).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_02016_Invalid_Xdm_Check_NoSecureTcp</srcid><srcstatus/><internalId>1026</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_Extension.xdm.m4_366</srcid><srcstatus/><internalId>649</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.SecureConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>694</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>946</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.XDM.NoProtocolVersion</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18558</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if no protocol version is chosen
        (both DoIP_ISO13400_2_2012 and DoIP_ISO13400_2_2019 are disabled).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_02017_Invalid_Xdm_Check_NoProtocolVersion</srcid><srcstatus/><internalId>1027</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_EBParameters.xdm.m4_137</srcid><srcstatus/><internalId>614</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.ProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>947</internalId></specobject>
    <specobject>
      <id>DoIP.dsn.XDM.CheckSecuredSocketConnection</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/doc/project/design/pdf/DoIP_Design-profiled.xml</sourcefile>
      <sourceline>18579</sourceline>
      <version>1</version>
      <description>
        The generator shall raise an error message if a secured TCP connection
        (DoIPTcpConnectionSecurityRequired = TRUE) is pointing to a SoAd socket connection with
        disabled SoAdTlsConnectionRef.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>DoIP_GenTest_01019_Invalid_DoIP_Xdm_DoIPTcpConnectionSecurityRequired_InvalidRef</srcid><srcstatus/><internalId>979</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/DoIP_Extension.xdm.m4_183</srcid><srcstatus/><internalId>645</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.SecureConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>694</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>948</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_DoIP_DBGINST_001</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/common_req/DoIP_DbgInst_Trace_APIs.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
   Test Dbg
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  VP: Successful compilation test.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DBGINST001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>464</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.DBGINST002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.DBGINST003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.DBGINST004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>467</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.DBGINST005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>949</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_Test_IsValidConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/common_req/DoIP_PbcfgM_Main_Impl_Test.c</sourcefile>
      <sourceline>71</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the function DoIP_IsValidConfig() is implemented as specified.
  
Test Object: 
    DoIP_IsValidConfig()
  
Test Precondition: 
    The DoIP module is not initialized.
  
Test Execution: 
    01: Call the function DoIP_IsValidConfig() with an NULL_PTR.
    02: VP:
        The function must have returned with E_NOT_OK.
    03: Create an invalid configuration regarding the endianness and alignment.
    04: Call the function DoIP_IsValidConfig() with this invalid configuration.
    05: VP(DoIP.EB.PBCFGM106):
        The function must have returned with E_NOT_OK.
    The following 3 steps are only executed if the module has a link-time configuration:
        06: Create an invalid configuration regarding the link time configuration.
        07: Call the function DoIP_IsValidConfig() with this invalid configuration.
        08: VP(DoIP.EB.PBCFGM105):
                The function must have returned with E_NOT_OK.
    09: Create an invalid configuration regarding the compile time configuration.
    10: Call the function DoIP_IsValidConfig() with this invalid configuration.
    11: VP(DoIP.EB.PBCFGM104):
        The function must have returned with E_NOT_OK.
    12: Create an invalid configuration regarding the published information configuration.
    13: Call the function DoIP_IsValidConfig() with this invalid configuration.
    14: VP(DoIP.EB.PBCFGM104_1):
        The function must have returned with E_NOT_OK.
    15: Call the function DoIP_IsValidConfig() with a valid configuration.
    16: VP:
        The function must have returned with E_OK.
    17: VP(DoIP.EB.PBCFGM107):
        Check if DOIP_PBCFGM_SUPPORT_ENABLED is set to STD_ON.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.PBCFGM101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>469</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.PBCFGM102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.PBCFGM104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>471</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.PBCFGM104_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.PBCFGM105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.PBCFGM106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.PBCFGM107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>475</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>950</internalId></specobject>
    <specobject>
      <id>DoIP_Test_VerifyInitWithPcfgM</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/common_req/DoIP_PbcfgM_Main_Impl_Test.c</sourcefile>
      <sourceline>225</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the DoIP can be initialized via the PbcfgM.
  
Test Object: 
    DoIP_IsValidConfig()
  
Test Precondition: 
    The DoIP module must not have been initialized.
  
Test Execution: 
    01: Create an invalid configuration regarding the endianness and alignment.
    02: Call the function DoIP_Init() with this invalid configuration.
    03: VP:
        A Det call must have been performed correctly.
    04: Create an invalid configuration regarding the compile time configuration.
    05: Call the function DoIP_Init() with this invalid configuration.
    06: VP:
        A Det call must have been performed correctly.
    The following 3 steps are only executed if the module has a link-time configuration:
        07: Create an invalid configuration regarding the link time configuration.
        08: Call the function DoIP_Init() with this invalid configuration.
        09: VP:
            A Det call must have been performed correctly.
    10: Create an invalid configuration regarding the published information configuration.
    11: Call the function DoIP_Init() with this invalid configuration.
    12: VP:
        A Det call must have been performed correctly.
    13: Initialize the PbcfgM_GetConfig() stub that way that it can return a valid function.
    14: Call the function DoIP_Init() with a null pointer.
    15: VP:
        The function PbcfgM_GetConfig() must have been called once.
    16: VP:
        No Det call must have been performed.
    17: VP:
        The module internal configuration pointer DoIP_RootPtr must equal
        the pointer supplied to the initialization function
    18: PbcfgM_GetConfig shall return E_NOT_OK.
        set the configuration pointer which is returned to NULL_PTR
    19: Call DoIP_Init with NULL_PTR.
    20: VP(DoIP.EB.PBCFGM110):
        Check if Det error is reported.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.PBCFGM110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>477</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>951</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_Test_PBcfgM_Off</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/common_req/DoIP_PbcfgM_Off_Compile_Test.c</sourcefile>
      <sourceline>26</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      Verify that if PbcfgM support is disabled then DoIP_PBCfg.c shall define
      TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME.
      DOIP_PBCFGM_SUPPORT_ENABLED shall be set to STD_OFF.
      DOIP_RELOCATABLE_CFG_ENABLE shall be set to STD_OFF.
    
Test Object: None.
Test Precondition: 
      - PbcfgM configuration does not refer to module DoIP (or no config exists)
      - Include DoIP_PBcfg.c only for step 01 and 02.
      - Include DoIP_Cfg.h for step 03.
    
Test Execution: 
        01: VP(DoIP.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME exists.
        02: VP(DoIP.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME has the value
            DoIP_ConfigLayoutType and DOIP_CONFIG_NAME respectively.
        03: VP (DoIP.EB.PBCFGM107):
            Verify that DOIP_PBCFGM_SUPPORT_ENABLED is set to STD_OFF.
        04: VP(DoIP.EB.PBCFGM108, DoIP.EB.RelocatablePBCfg):
            DOIP_RELOCATABLE_CFG_ENABLE shall be STD_OFF
    
Test Input: 
    
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.PbcfgM_General_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>480</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.PBCFGM107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>475</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>476</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>952</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_Test_PBcfgM_On</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/common_req/DoIP_PbcfgM_On_Compile_Test.c</sourcefile>
      <sourceline>24</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      1.)
      Verify that DOIP_RELOCATABLE_CFG_ENABLE is defined
      in the header file DoIP_Cfg.h.
      2.)
      Verify that if PbcfgM support is enabled then DoIP_PBCfg.c shall NOT define
      TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME.
    
Test Object: None.
Test Precondition: 
        - DOIP_PBCFGM_SUPPORT_ENABLED = STD_ON
    
Test Execution: 
        ------------------------ 1.) ---------------------
        01: VP (DoIP.EB.PbcfgM_General_3,
                DoIP.EB.PBCFGM108,
                DoIP.EB.RelocatablePBCfg):
            Verify that DOIP_RELOCATABLE_CFG_ENABLE is set to STD_ON.
        ------------------------ 2.) ---------------------
        02: Include DoIP_PBcfg.c.
        03: VP(DoIP.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME exist.
    
Test Input: 
        None.
    
Test Output: 
        Binary file.
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.PbcfgM_General_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.PbcfgM_General_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>480</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>476</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>953</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_DoIP_VerifyCodeStub</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/build/reqm/common_req/DoIP_VerifyStub_testspec.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the code stub of the module is consistent with the
    implementation.
  
Test Object: 
    Relocatable post-build configuration macros generation.
  
Test Precondition: 
    Permutation [VerifyStub == true]:
      - Unit test contains its own code stub
      - Module is excluded from generation and compilation
    Permutation [VerifyStub == false]:
      - unit test excludes its own code stub
  
Test Execution: 
    01: Invoke all module APIs
    02: VP(DoIP.EB.Interface.Consistency):
        Unit test compiles (implicitly tested)
  
Test Input: 
  
Test Output: 
    Test is correctly generated and compiled.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.Interface.Consistency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>954</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ComTest_01_Features_Enabled</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_ComTest_01_Features_Enabled/source/application/DoIP_ComTest_01.c</sourcefile>
      <sourceline>35</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      Test to compile the module for the following configuration:
      - DoIPDevErrorDetect enabled.
      - DoIPVersionInfoApi enabled.
    &lt;/para&gt;
  
Test Object: 
    All APIs, syntax IDs and DET values.
  
Test Precondition: None.
Test Execution: None.
Test Input: None.
Test Output: 
    Test correctly generates and compiles.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>309</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00245</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>310</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_91000</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>358</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Initial_2_Rx_Offline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>753</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Initial_2_Tx_Offline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>787</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Offline_2_Rx_Ready</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>751</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Offline_2_Tx_Idle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>786</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementDataApi</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>812</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledFunctionality</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>891</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>955</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ComTest_02_Features_Disabled</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_ComTest_02_Features_Disabled/source/application/DoIP_ComTest_02.c</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      Test to compile the module for the following configuration:
      - DoIPDevErrorDetect disabled.
      - DoIPVersionInfoApi disabled.
    &lt;/para&gt;
  
Test Object: 
    All APIs, syntax IDs and DET values.
  
Test Precondition: None.
Test Execution: None.
Test Input: None.
Test Output: 
    Test correctly generates and compiles.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>309</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0120.AnnouncementConnOptional.DisabledFunctionality</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>891</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>956</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ComTest_03_ServiceId_ErrorId</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_ComTest_03_ServiceId_ErrorId/source/application/DoIP_ComTest_03.c</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      Test to compile the module for the following configuration:
      - DoIPDevErrorDetect enabled.
      - DoIPVersionInfoApi enabled.
    &lt;/para&gt;
  
Test Object: 
    All APIs, syntax IDs and DET values.
  
Test Precondition: None.
Test Execution: None.
Test Input: None.
Test Output: 
    Test correctly generates and compiles.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>309</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00148.ValueCheck.DOIP_E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00148.ValueCheck.DOIP_E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00148.ValueCheck.DOIP_E_INVALID_PDU_SDU_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00148.ValueCheck.DOIP_E_INVALID_PARAMETER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00245</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>310</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_91000</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>358</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIP_GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>811</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>957</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ComTest_04_Mandatory_Interfaces</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_ComTest_04_Mandatory_Interfaces/source/application/DoIP_ComTest_04.c</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      Verify that only the mandatory interfaces are actually required(following APIs are
      explicitly enabled in PduR_StubCfg.h and SoAd_StubCfg.h):
      - PduR_DoIPTpRxIndication
      - PduR_DoIPStartOfReception
      - PduR_DoIPTpTxConfirmation
      - PduR_DoIPCopyRxData
      - PduR_DoIPCopyTxData
      - SoAd_CloseSoCon
      - SoAd_GetLocalAddr
      - SoAd_GetPhysAddr
      - SoAd_GetRemoteAddr
      - SoAd_GetSoConId
      - SoAd_IfTransmit
      - SoAd_OpenSoCon
      - SoAd_ReadDhcpHostNameOption
      - SoAd_ReleaseIpAddrAssignment
      - SoAd_RequestIpAddrAssignment
      - SoAd_ReleaseRemoteAddr
      - SoAd_SetUniqueRemoteAddr
      - SoAd_TpCancelReceive
      - SoAd_TpCancelTransmit
      - SoAd_TpTransmit
      - SoAd_WriteDhcpHostNameOption
    &lt;/para&gt;
  
Test Object: None.
Test Precondition: None.
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>958</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ComTest_05_HandleIdGenerator</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_ComTest_05_HandleIdGenerator/source/application/application.c</sourcefile>
      <sourceline>16</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test checks that invoking the handle ID autocalc wizard creates a valid configuration
    (i.e., a configuration adhering to the constraints of the module's generator (e.g., zero-based,
    dense, and unique)) out of an invalid configuration (i.e., a configuration violating the
    constraints of the module's generator (e.g., not zero-based, not dense, and not unique))

    Handle Id wizard support generation of handle Ids for the following parameters:
      - DoIPInterface/DoIPInterfaceId
      - DoIPUdpConnection/DoIPSoAdRxPduId
      - DoIPUdpConnection/DoIPSoAdTxPduId
      - DoIPTcpConnection/DoIPSoAdTcpRxPduId
      - DoIPTcpConnection/DoIPSoAdTcpTxPduId
      - DoIPPduRRxPduId
      - DoIPPduRTxPdus
  
Test Object: None.
Test Precondition: None.
Test Execution: 
    Ts5 build environment steps:
        The handle ID wizard is started by command line via the Merged_Makefile.mak.
        The module configuration generator provides the missing generated handle ids, thus
        enabling successful module generation.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.HandleIDWizard.DoIPPduRRxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.HandleIDWizard.DoIPPduRTxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.HandleIDWizard.DoIPUdpConnection_DoIPSoAdRxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.HandleIDWizard.DoIPUdpConnection_DoIPSoAdTxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.HandleIDWizard.DoIPTcpConnection_DoIPSoAdRxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.HandleIDWizard.DoIPTcpConnection_DoIPSoAdTxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.HandleIDWizard.DoIPInterface_DoIPInterfaceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>959</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ComTest_NoPBCfg</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_ComTest_NoPBCfg/source/application/DoIP_ComTest_NoPBCfg.c</sourcefile>
      <sourceline>22</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall prove that that the DoIP also compiles without any post build information
  
Test Object: 
    Compile test
  
Test Precondition: 
    * Set TS_DOIP_COMPILE_WITH_POSTBUILD to FALSE in the merged make file to prevent the compilation
      of the post build C file.
    * The merged make file holds a rule which removes all post build files after generation.
  
Test Execution: 
    The test run is successful when the DoIP compiles under sticking to the precondition.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.PostBuild_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>478</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>960</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_GenTest_01001_Invalid_DoIP_Xdm_DoIPUdpVehicleAnnouncement_Wrong_DoIPSoAdTxPduId</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error is generated if
  DoIPUdpVehicleAnnouncementConnection/DoIPSoAdUdpVehicleAnnouncementTxPdu/
  DoIPSoAdUdpVehicleAnnouncementTxPduId  is not consecutive and doesn't
  start with the next higher DoIPUdpConnection/DoIPSoAdUdpTxPdu/DoIPSoAdUdpTxPduId.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPConnections/DoIPUdpVehicleAnnouncementConnection/
    DoIPUdpVehicleAnnouncementConnection_0/DoIPSoAdUdpVehicleAnnouncementTxPdu/
    DoIPSoAdUdpVehicleAnnouncementTxPduId = 1.
    DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPConnections/DoIPUdpConnection/DoIPUdpConnection_1/
    DoIPSoAdUdpTxPdu/DoIPSoAdUdpTxPduId = 1.

Test Execution: 
  VP(DoIP.EB.XDM.Wrong_DoIPUdpVehicleAnnouncement_DoIPSoAdTxPduId):
  The following error must be issued:
  DoIPUdpVehicleAnnouncementConnection/DoIPSoAdUdpVehicleAnnouncementTxPdu/DoIPSoAdUdpVehicleAnnouncementTxPduId
  shall be consecutive over all interfaces and start with the next higher
  DoIPUdpConnection/DoIPSoAdUdpTxPdu/DoIPSoAdUdpTxPduId of the last interface.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.Wrong_DoIPUdpVehicleAnnouncement_DoIPSoAdTxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>901</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>961</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01002_Invalid_DoIP_Xdm_DoIPUdpConnection_Bad_DoIPSoAdTxPduRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>62</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error is generated if
  DoIPUdpConnection/DoIPUdpConnection_1/DoIPSoAdUdpTxPdu/DoIPSoAdUdpRxPduRef has the same reference
  as DoIPUdpVehicleAnnouncementConnection/DoIPUdpVehicleAnnouncementConnection_0/
  DoIPSoAdUdpVehicleAnnouncementTxPdu/DoIPSoAdUdpVehicleAnnouncementTxPduRef.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIPUdpConnection/DoIPUdpConnection_1/DoIPSoAdUdpTxPdu/DoIPSoAdUdpRxPduRef and
  DoIPUdpVehicleAnnouncementConnection/DoIPUdpVehicleAnnouncementConnection_0/
  DoIPSoAdUdpVehicleAnnouncementTxPdu/DoIPSoAdUdpVehicleAnnouncementTxPduRef
  refer the same /EcuC/EcuC/EcucPduCollection/Udp_Con2_SoAd_Tx.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPUdpConnection_Bad_DoIPSoAdTxPduRef): The following error must be issued:
  This DoIPSoAdUdpTxPduRef is already configured in DoIPConnections/DoIPUdpVehicleAnnouncementConnection/
  DoIPSoAdUdpVehicleAnnouncementTxPdu/DoIPSoAdUdpVehicleAnnouncementTxPduRef but shall be unique.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPUdpConnection_Bad_DoIPSoAdTxPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>902</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>962</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01003_Invalid_DoIP_Xdm_VehicleIdentificationSyncStatus_ON_DoIPSoAdTxPduRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>94</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error is generated:
  - if DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPUseVehicleIdentificationSyncStatus is
    ENABLED and the reference DoIPUdpVehicleAnnouncementConnection/DoIPUdpVehicleAnnouncementConnection_0/
    DoIPSoAdUdpVehicleAnnouncementTxPdu/DoIPSoAdUdpVehicleAnnouncementTxPduRef points to
    EcuC/ELEMENTS/EcuC/EcucPduCollection/Pdu/Udp_AnnCon0_SoAd_Tx/PduLength &lt; 41;
  - and if DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPUseVehicleIdentificationSyncStatus is
    ENABLED and the reference
    DoIPConnections/DoIPUdpConnection/DoIPUdpConnection_0/DoIPSoAdUdpTxPdu/DoIPSoAdUdpTxPduRef points to
    EcuC/ELEMENTS/EcuC/EcucPduCollection/Pdu/Udp_Con0_SoAd_Tx &lt; 41.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPUseVehicleIdentificationSyncStatus = ENABLED
  and EcuC/ELEMENTS/EcuC/EcucPduCollection/Pdu/Udp_AnnCon0_SoAd_Tx/PduLength &lt; 41,
  EcuC/ELEMENTS/EcuC/EcucPduCollection/Pdu/Udp_Con0_SoAd_Tx &lt; 41.

Test Execution: 
  VP(DoIP.EB.XDM.VehicleIdentificationSyncStatus_ENABLED_DoIPSoAdTxPduRef):
  The following error must be issued for DoIPUdpVehicleAnnouncementConnection and for DoIPUdpConnection:
  The value of EcuC PduLength must be at least 41.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.VehicleIdentificationSyncStatus_ENABLED_DoIPSoAdTxPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>903</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>963</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01004_Invalid_DoIP_Xdm_VehicleIdentificationSyncStatus_OFF_DoIPSoAdTxPduRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>130</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error is generated:
  - if DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPUseVehicleIdentificationSyncStatus is
    DISABLED and the reference DoIPUdpVehicleAnnouncementConnection/DoIPUdpVehicleAnnouncementConnection_0/
    DoIPSoAdUdpVehicleAnnouncementTxPdu/DoIPSoAdUdpVehicleAnnouncementTxPduRef points to
    EcuC/ELEMENTS/EcuC/EcucPduCollection/Pdu/Udp_AnnCon0_SoAd_Tx/PduLength &lt; 40;
  - and if DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPUseVehicleIdentificationSyncStatus is
    DISABLED and the reference DoIPConnections/DoIPUdpConnection/DoIPUdpConnection_0/DoIPSoAdUdpTxPdu/
    DoIPSoAdUdpTxPduRef points to EcuC/ELEMENTS/EcuC/EcucPduCollection/Pdu/Udp_Con0_SoAd_Tx &lt; 40.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPUseVehicleIdentificationSyncStatus = DISABLED
  and EcuC/ELEMENTS/EcuC/EcucPduCollection/Pdu/Udp_AnnCon0_SoAd_Tx/PduLength &lt; 40,
  EcuC/ELEMENTS/EcuC/EcucPduCollection/Pdu/Udp_Con0_SoAd_Tx &lt; 40.

Test Execution: 
  VP(DoIP.EB.XDM.VehicleIdentificationSyncStatus_DISABLED_DoIPSoAdTxPduRef):
  The following error must be issued for DoIPUdpVehicleAnnouncementConnection and for DoIPUdpConnection:
  The value of EcuC PduLength must be at least 40.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.VehicleIdentificationSyncStatus_DISABLED_DoIPSoAdTxPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>904</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>964</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01005_Invalid_DoIP_Xdm_DoIPNumByteDiagAckNack_Oversized</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>166</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that a warning shall be reported if a value of a parameter
  DoIPTester/DoIPNumByteDiagAckNack is greater then DoIPMaxNumByteDiagAckNack.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 

Test Execution: 
  VP(DoIP.EB.XDM.DoIPNumByteDiagAckNack_Oversized):
  The warning will be issued for DoIPTester/DoIPTester_0/DoIPNumByteDiagAckNack since the he value
  (4) is greater DoIPMaxNumByteDiagAckNack (3).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPNumByteDiagAckNack_Oversized</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>905</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>965</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01006_Invalid_DoIP_Xdm_Udp_RxTxIds_NotEqual</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>192</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if a value of a parameter
  DoIPUdpConnection_0/DoIPSoAdUdpRxPdu/DoIPSoAdUdpRxPduId is not equal to a value of parameter
  DoIPUdpConnection_0/DoIPSoAdUdpTxPdu/DoIPSoAdUdpTxPduId
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIPConnections/DoIPUdpConnection/DoIPUdpConnection_0/DoIPSoAdUdpRxPdu/DoIPSoAdUdpRxPduId = 0.
  In DoIPConnections/DoIPUdpConnection/DoIPUdpConnection_0/DoIPSoAdUdpTxPdu/DoIPSoAdUdpTxPduId = 2.

Test Execution: 
  VP(DoIP.EB.XDM.Udp.RxTxIds_NotEqual):
  The following error must be issued: DoIPSoAdUdpTxPduId and DoIPSoAdUdpRxPduId shall be equal.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.Udp.RxTxIds_NotEqual</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>892</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>966</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01007_Invalid_DoIP_Xdm_Udp_DoIPSoAdUdpRxPduId_NotConsecutive</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>220</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if DoIPSoAdUdpRxPduId of the UDP connections
  are not consecutive.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPConnections/DoIPUdpConnection/DoIPUdpConnection_0/
  DoIPSoAdUdpRxPdu/DoIPSoAdUdpRxPduId = 0.
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPConnections/DoIPUdpConnection/DoIPUdpConnection_1/
  DoIPSoAdUdpRxPdu/DoIPSoAdUdpRxPduId = 3.

Test Execution: 
  VP(DoIP.EB.XDM.Udp.DoIPSoAdRxPduId_Consecutive):
  The following error must be issued: DoIPSoAdUdpRxPduId shall be 0-based and dense over all interfaces.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.Udp.DoIPSoAdRxPduId_Consecutive</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>894</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>967</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01008_Invalid_DoIP_Xdm_Udp_DoIPSoAdUdpRxPduId_NotZeroBased</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>249</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if DoIPSoAdUdpRxPduId of the UDP connections
  are not zero based.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPConnections/DoIPUdpConnection/DoIPUdpConnection_0/
  DoIPSoAdUdpRxPdu/DoIPSoAdUdpRxPduId = 1.
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPConnections/DoIPUdpConnection/DoIPUdpConnection_1/
  DoIPSoAdUdpRxPdu/DoIPSoAdUdpRxPduId = 2.

Test Execution: 
  VP(DoIP.EB.XDM.Udp.DoIPSoAdRxPduId_ZeroBased):
  The following error must be issued: DoIPSoAdUdpRxPduId shall be 0-based and dense over all interfaces.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.Udp.DoIPSoAdRxPduId_ZeroBased</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>895</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>968</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01009_Invalid_DoIP_Xdm_CustomChannel_TcpConnRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>278</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if two custom channels exist with the
  same DoIPTcpConnectionRef.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPCustomChannel/DoIPCustomChannel_0/DoIPTcpConnectionRef
  and DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPCustomChannel/DoIPCustomChannel_1/DoIPTcpConnectionRef
  both have the same DoIPTcpConnectionRef.

Test Execution: 
  VP(DoIP.EB.XDM.CustomChannel.DoIPTcpConnectionRef.Invalid):
  The following error must be issued: DoIPTcpConnectionRef should be unique within Custom channel.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.CustomChannel.DoIPTcpConnectionRef.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>906</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>969</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01010_Invalid_DoIP_Xdm_CustomChannel_Invalid_DoIPPduRRxPduRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>306</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if custom channel parameter DoIPPduRRxPduRef
  does not point to a valid reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPCustomChannel/DoIPCustomChannel_0/
  DoIPPduRRxPdu/DoIPPduRRxPduRef points to invalid reference.

Test Execution: 
  VP(DoIP.EB.XDM.CustomChannel.DoIPPduRRxPduRef.InvalidRef):
  The following error must be issued: Reference shall point to a valid node.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.CustomChannel.DoIPPduRRxPduRef.InvalidRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>907</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>970</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01011_Invalid_DoIP_Xdm_CustomChannel_Invalid_DoIPPduRTxPduRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>333</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if custom channel parameter DoIPPduRTxPduRef
  does not point to a valid reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPCustomChannel/DoIPCustomChannel_0/
  DoIPPduRTxPdu/DoIPPduRTxPduRef points to invalid reference.

Test Execution: 
  VP(DoIP.EB.XDM.CustomChannel.DoIPPduRTxPduRef.InvalidRef):
  The following error must be issued: Reference shall point to a valid node.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.CustomChannel.DoIPPduRTxPduRef.InvalidRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>908</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>971</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01012_Invalid_DoIP_Xdm_CustomChannel_Invalid_DoIPTcpConnectionRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>360</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if custom channel parameter
  DoIPTcpConnectionRef does not point to a valid reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPCustomChannel/DoIPCustomChannel_0/
  DoIPTcpConnectionRef points to invalid reference.

Test Execution: 
  VP(DoIP.EB.XDM.CustomChannel.DoIPTcpConnectionRef.InvalidRef):
  The following error must be issued: Reference shall point to a valid node.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.CustomChannel.DoIPTcpConnectionRef.InvalidRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>909</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>972</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01013_Invalid_DoIP_Xdm_DoIPTester_Invalid_DoIPMaxChannels</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>387</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if the number of channels (including custom
  channels) exceeds the parameter DoIPMaxChannels.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPChannel has the value smaller then
  number of configured channels.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPMaxChannels):
  The following error must be issued: The total amount of channels (including custom channels)
  must not exceed /DoIPConfigSet/DoIPInterface/DoIPMaxChannels.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPMaxChannels</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>912</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>973</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01014_Invalid_DoIP_Xdm_DoIPTester_Invalid_DoIPCustomChannelsNr</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>415</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if the number of custom channels differs
  from the number of Tcp connections.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPCustomChannel list has different number of
  elements then DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPConnections/DoIPTcpConnection
  list.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPInvCustomChannelsNr):
  The following error must be issued: The number of custom channels must be equal to the number
  of Tcp connections.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPInvCustomChannelsNr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>913</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>974</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01015_Invalid_DoIP_Xdm_DoIPPowerMode_Empty</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>444</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that generator shall report an error if the container
  DoIPGeneral/DoIPPowerMode is enabled, but no callback function name is specified (field is empty).
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIP/DoIPGeneral/DoIPPowerModeCallback/DoIPPowerModeDirect is enabled
  DoIP/DoIPGeneral/DoIPPowerModeCallback/DoIPPowerModeDirect is empty

Test Execution: 
  VP(DoIP.EB.XdmCheck.DoIPPowerMode.Empty):
  The following error must be issued:
  When DoIPPowerModeDirect is enabled, user callback function name needs to be specified.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XdmCheck.DoIPPowerMode.Empty</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>920</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>975</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01016_Invalid_DoIP_Xdm_DoIPMaxTesterConnections_Oversized</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>469</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that a warning shall be reported if the parameter DoIPMaxTesterConnections
  is greater then number of configured Tcp connections, and that reducing the value of this
  parameter will reduce RAM consumption.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPMaxTesterConnections = 5.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPMaxTesterConnections.Oversized):
  The following warning must be issued: The value is greater then the number of configured Tcp
  connections. Reducing the value to the number of configured Tcp connections will reduce RAM
  consumption.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPMaxTesterConnections.Oversized</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>914</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>976</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01017_Invalid_DoIP_Xdm_Tester_NoRoutingActivation</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>498</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if tester is not referenced by any channel
  with automatic routing activation and no routing activation reference is configured.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPTester/DoIPTester_3 does not have a
  DoIPRoutingActivationRef configured.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPTester.NoRoutingActivation):
  The following error must be issued:
  If tester is not referenced by channel with automatic routing activation then it requires at
  least one routing activation reference configured.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPTester.NoRoutingActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>915</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>977</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01018_Invalid_DoIP_Xdm_Tcp_RxTxIds_NotEqual</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>527</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if a value of a parameter
  DoIPTcpConnection_0/DoIPSoAdTcpRxPdu/DoIPSoAdTcpRxPduId is not equal to a value of parameter
  DoIPTcpConnection_0/DoIPSoAdTcpTxPdu/DoIPSoAdTcpTxPduId.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIPConnections/DoIPTcpConnection/DoIPTcpConnection_0/DoIPSoAdTcpRxPdu/DoIPSoAdTcpRxPduId = 0.
  In DoIPConnections/DoIPTcpConnection/DoIPTcpConnection_0/DoIPSoAdTcpTxPdu/DoIPSoAdTcpTxPduId = 2.

Test Execution: 
  VP(DoIP.EB.XDM.Tcp.RxTxIds_NotEqual):
  The following error must be issued: DoIPSoAdTcpRxPduId and DoIPSoAdTcpTxPduId shall be equal.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.Tcp.RxTxIds_NotEqual</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>893</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>978</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01019_Invalid_DoIP_Xdm_DoIPTcpConnectionSecurityRequired_InvalidRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>555</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if DoIPTcpConnectionSecurityRequired is set
  while corresponding SoAdSocketRoute uses a SoAdSocketConnection with disabled SoAdTlsConnectionRef
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  Parameter SoAdTlsConnectionRef of corresponding SoAdSocketRoute is disabled.

Test Execution: 
  VP(DoIP.dsn.XDM.CheckSecuredSocketConnection):
  The following error must be issued: This DoIPTcpConnection requires security
  (DoIPTcpConnectionSecurityRequired), but the corresponding SoAdSocketRoute uses a
  SoAdSocketConnection with disabled SoAdTlsConnectionRef

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.XDM.CheckSecuredSocketConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>979</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01021_Invalid_DoIP_Xdm_Tcp_DoIPSoAdRxPduId_NotConsecutive</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>583</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if DoIPSoAdTcpRxPduId of the TCP connections
  are not consecutive.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPTcpConnection/DoIPTcpConnection_0/
  DoIPSoAdRxPdu/DoIPSoAdTcpRxPduId = 0.
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPTcpConnection/DoIPTcpConnection_1/
  DoIPSoAdRxPdu/DoIPSoAdTcpRxPduId = 3.

Test Execution: 
  VP(DoIP.EB.XDM.Tcp.DoIPSoAdRxPduId_Consecutive):
  The following error must be issued: DoIPTcpConnection/DoIPSoAdTcpRxPduId shall be 0-based and dense.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.Tcp.DoIPSoAdRxPduId_Consecutive</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>896</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>980</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01022_Invalid_DoIP_Xdm_Tcp_DoIPSoAdRxPduId_NotZeroBased</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>612</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if DoIPSoAdTcpRxPduId of the TCP connections
  are not zero based.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPTcpConnection/DoIPTcpConnection_0/
  DoIPSoAdRxPdu/DoIPSoAdTcpRxPduId = 3.

Test Execution: 
  VP(DoIP.EB.XDM.Tcp.DoIPSoAdRxPduId_ZeroBased):
  The following error must be issued: DoIPTcpConnection/DoIPSoAdTcpRxPduId shall be 0-based and dense.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.Tcp.DoIPSoAdRxPduId_ZeroBased</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>897</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>981</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01023_Invalid_DoIP_Xdm_Channel_DoIPPduRRxPduId_NotConsecutive</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>639</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if DoIPPduRRxPduId of the channels are not
  consecutive.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPChannel/DoIPChannel_0/
  DoIPPduRRxPdu/DoIPPduRRxPduId = 0.
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPChannel/DoIPChannel_1/
  DoIPPduRRxPdu/DoIPPduRRxPduId = 3.

Test Execution: 
  VP(DoIP.EB.XDM.Channel.DoIPPduRRxPduId_Consecutive):
  The following error must be issued: DoIPPduRRxPduId shall be 0-based and dense.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.Channel.DoIPPduRRxPduId_Consecutive</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>898</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>982</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01024_Invalid_DoIP_Xdm_Channel_DoIPPduRRxPduId_NotZeroBased</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>668</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if DoIPPduRRxPduId of the channels are not
  zero based.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPChannel/DoIPChannel_0/
  DoIPPduRRxPdu/DoIPPduRRxPduId = 3.

Test Execution: 
  VP(DoIP.EB.XDM.Channel.DoIPPduRRxPduId_ZeroBased):
  The following error must be issued: DoIPPduRRxPduId shall be 0-based and dense.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.Channel.DoIPPduRRxPduId_ZeroBased</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>899</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>983</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01025_Invalid_DoIP_Xdm_Channel_RouteDuplicate</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>695</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if more than one channel exists with the
  same combination of DoIPChannelSARef and DoIPChannelTARef.
  zero based.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIPChannel_0/DoIPChannelSARef == DoIPChannel_1/DoIPChannelSARef  &amp;&amp;
  DoIPChannel_0/DoIPChannelTARef == DoIPChannel_1/DoIPChannelSARef

Test Execution: 
  VP(DoIP.EB.XDM.Channel.RouteDuplicate):
  The following error must be issued: For each channel the combination of DoIPChannelSARef and
  DoIPChannelTARef shall be unique.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.Channel.RouteDuplicate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>900</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>984</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01026_Invalid_DoIP_Xdm_RoutingActivation_EmptyRefLists</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>724</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if routing activation object has an empty
  DoIPTargetAddressRef list.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIPRoutingActivation_2 has no DoIPTargetAddressRef list.

Test Execution: 
  VP(DoIP.EB.XDM.RoutingActivation.EmptyRefLists):
  The following error must be issued: DoIPRoutingActivation shall have at least one valid reference
  to DoIPTargetAddressRef.
  DoIPTargetAddressRef has not enough children! It has "0" child - allowed are "1" to "65535" children.
  The children are: []

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.RoutingActivation.EmptyRefLists</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>916</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>985</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01027_Invalid_DoIP_Xdm_NoDoIPUseMacAddressForIdentification_NoDoIPEid</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>753</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if config parameter
  DoIPEid is not set and DoIPUseMacAddressForIdentification is set to false.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPConfigSet/DoIPEid not set
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPUseMacAddressForIdentification = false

Test Execution: 
  VP(DoIP.EB.XDM.MacAddress_false.NoDoIPEid):
  The following error must be issued: If DoIPUseMacAddressForIdentification is set to FALSE,
  DoIPEid must be enabled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.MacAddress_false.NoDoIPEid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>917</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>986</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01028_Invalid_DoIP_Xdm_No_Rte_Found</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>781</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that a warning shall be reported if DoIP is configured for Rte usage
  (configuration parameter DoIPRteUsage is enabled), but the Rte is not part of the configuration.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIP/DoIPGeneral/DoIPGetVIN/DoIPRteUsage is enabled
  Rte.xdm is missing

Test Execution: 
  VP(DoIP.EB.XdmCheck.No_Rte_Found):
  The warning will be issued for DoIP/DoIPGeneral/DoIPGetVIN/DoIPRteUsage since the RTE is disabled
  or missing.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XdmCheck.No_Rte_Found</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>924</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>987</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01029_Invalid_DoIP_Xdm_DynamicGIDSync_Enable_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>806</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that generator shall report an error if the container
  DoIPDynamicGIDMasterSelection is enabled and the container DoIPGetGidCallback is disabled.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIP/DoIPGeneral/DoIPDynamicGIDMasterSelection is enabled
  DoIP/DoIPGeneral/DoIPGetGidCallback is disabled

Test Execution: 
  VP(DoIP.EB.XdmCheck.DynamicGIDSync.Enable):
  The following error must be issued:
  When DoIPDynamicGIDMasterSelectionCallback is enabled DoIPGetGidCallback must be enabled too.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XdmCheck.DynamicGIDSync.Enable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>921</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>988</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01030_Invalid_DoIP_Xdm_DynamicGIDSync_Enable_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>831</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that generator shall report an error if the container
  DoIPGetGidCallback is enabled and the container DoIPDynamicGIDMasterSelection is disabled.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIP/DoIPGeneral/DoIPGetGidCallback is enabled
  DoIP/DoIPGeneral/DoIPDynamicGIDMasterSelection is disabled

Test Execution: 
  VP(DoIP.EB.XdmCheck.DynamicGIDSync.Enable):
  The following error must be issued:
  When DoIPGetGidCallback is enabled DoIPDynamicGIDMasterSelectionCallback must be enabled too.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XdmCheck.DynamicGIDSync.Enable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>921</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>989</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01031_Invalid_DoIP_Xdm_DoIPDynamicGIDMasterSelection_CallbackName</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>856</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that generator shall report an error if the container
  DoIPDynamicGIDMasterSelectionCallback is enabled, but no callback function name is specified.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIP/DoIPGeneral/DoIPDynamicGIDMasterSelection is enabled
  DoIP/DoIPGeneral/DoIPDynamicGIDMasterSelection/DoIPDynamicGIDMasterSelection is empty

Test Execution: 
  VP(DoIP.EB.XdmCheck.DoIPDynamicGIDMasterSelection.CallbackName):
  The following error must be issued:
  Callback function name must be specified when DoIPDynamicGIDMasterSelectionCallback
  container is enabled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XdmCheck.DoIPDynamicGIDMasterSelection.CallbackName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>922</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>990</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01032_Invalid_DoIP_Xdm_DoIPGetGid_CallbackName</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>884</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that generator shall report an error if the container
  DoIPGetGid is enabled, but no callback function name is specified.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIP/DoIPGeneral/DoIPGetGidCallback is enabled
  DoIP/DoIPGeneral/DoIPGetGidCallback/DoIPGetGidDirect is empty

Test Execution: 
  VP(DoIP.EB.XdmCheck.DoIPGetGid.CallbackName):
  The following error must be issued:
  Callback function name must be specified when DoIPGetGidCallback container is enabled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XdmCheck.DoIPGetGid.CallbackName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>923</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>991</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01033_Invalid_DoIP_Xdm_SoAdRxSocketConnOrSocketConnBundleRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>909</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that generator shall report an error if reference
  SoAdRxSocketConnOrSocketConnBundleRef of related SoAdSocketRoute does not point to a
  Socket Connection.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  SoAd/SoAdConfig/SoAdConfig/SoAdSocketRoute/SoAdSocketRoute_3/SoAdRxSocketConnOrSocketConnBundleRef
  is empty

Test Execution: 
  VP(DoIP.EB.XdmCheck.SoAdRxSocketConnOrSocketConnBundleRef.Invalid):
  The following error must be issued:
  Reference SoAdRxSocketConnOrSocketConnBundleRef of related SoAdSocketRoute must point
  to a Socket Connection.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XdmCheck.SoAdRxSocketConnOrSocketConnBundleRef.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>925</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>992</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01034_Invalid_DoIP_Xdm_SoAdSocketTpRxBufferMin</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>938</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that generator shall report an error if parameter SoAdSocketTpRxBufferMin
  is not enabled for related SoAdSocketConnectionGroup.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  SoAd/SoAdConfig/SoAdConfig/SoAdSocketConnectionGroup/TCP/SoAdSocketTpRxBufferMin
  is disabled

Test Execution: 
  VP(DoIP.EB.XdmCheck.SoAdSocketTpRxBufferMin.Enable):
  The following error must be issued:
  Parameter SoAdSocketTpRxBufferMin must be set for related SoAdSocketConnectionGroup.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XdmCheck.SoAdSocketTpRxBufferMin.Enable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>926</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>993</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01035_Invalid_DoIP_Xdm_MaxUDPSocketConnections</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>965</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that generator shall report an error if the parameter
  DoIPMaxUDPSocketConnections is configured to less value than number of configured UDP connections
  in /DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPConnections/DoIPUdpConnection.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPMaxUDPSocketConnections set to less than
  DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPConnections/DoIPUdpConnection

Test Execution: 
  VP(DoIP.EB.XdmCheck.DoIPMaxUDPSocketConnections.Invalid):
  The following error must be issued:
  The value is less then the number of configured Udp connections.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XdmCheck.DoIPMaxUDPSocketConnections.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>918</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>994</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01036_Invalid_DoIP_Xdm_RoutingActivation_TA_Reference_Without_Connection</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>993</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that generator shall report an error if routing activation object has
  referenced a target address in DoIPTargetAddressRef that is not configured in any DoIP Channel.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIPRoutingActivation_1 has referenced a target address which is not configured in any channel.

Test Execution: 
  VP(DoIP.EB.XdmCheck.RoutingActivation.TARef_Without_Channel):
  The following error must be issued:
  Referenced target address shall be cofigured in at least one channel.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XdmCheck.RoutingActivation.TARef_Without_Channel</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>919</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>995</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01037_Invalid_DoIP_Xdm_DoIPHostNameSizeMax_WithVinOption</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>1019</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that generator shall report an error if parameter DoIPHostNameSizeMax
  is smaller than the sum of "DoIP-" string-length + size of VIN (17) + string-length of
  DoIPDhcpHostNamePrefix parameter.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIP/DoIPGeneral/DoIPHostNameSizeMax is set to value smaller then the sum of
  5(DoIP-) + 17(VIN size) + string-length(DoIPDhcpHostNamePrefix).

Test Execution: 
  VP(DoIP.EB.XdmCheck.DoIPHostNameSizeMax.MinWithVin):
  The following error must be issued:
  DoIPHostNameSizeMax is too small. If DoIPDhcpOptionVinUse is enabled, DoIP_VIN is used which is
  5 + 17. In case DoIPDhcpHostNamePrefix is not empty this size also has to be added.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XdmCheck.DoIPHostNameSizeMax.MinWithVin</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>927</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>996</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01038_Invalid_DoIP_Xdm_DoIPHostNameSizeMax_NoVinOption</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>1048</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that generator shall report an error if parameter DoIPHostNameSizeMax
  is smaller than the sum of 5(DoIP-) + string-length(DoIPDhcpHostNamePrefix).
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIP/DoIPGeneral/DoIPHostNameSizeMax is set to value smaller then the sum of
  5(DoIP-) + string-length(DoIPDhcpHostNamePrefix)

Test Execution: 
  VP(DoIP.EB.XdmCheck.DoIPHostNameSizeMax.MinNoVin):
  The following error must be issued:
  DoIPHostNameSizeMax is too small. If DoIPDhcpOptionVinUse is enabled, DoIP_VIN is used which is 5
  + 17. In case DoIPDhcpHostNamePrefix is not empty this size also has to be added.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XdmCheck.DoIPHostNameSizeMax.MinNoVin</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>928</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>997</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01039_Invalid_DoIP_Xdm_DoIPHostNameSizeMax_InvalidMax</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>1076</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that generator shall report an error if parameter DoIPHostNameSizeMax
  is greater then 255.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIP/DoIPGeneral/DoIPHostNameSizeMax is set to 256.

Test Execution: 
  VP(DoIP.EB.XdmCheck.DoIPHostNameSizeMax.MaxValue):
  The following error must be issued:
  Value out of range: is "256" but must be "&gt;= 5" and "&lt;= 255"

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XdmCheck.DoIPHostNameSizeMax.MaxValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>929</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>998</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01040_Invalid_DoIP_Xdm_Channel_TesterRoutingActivationType</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>1102</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that the generator shall raise an error message if DoIPChannels with the same
  configured DoIPChannelSARef have different DoIPRoutingActivationTypes configured.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIPChannel_0 has DoIPRoutingActivationType set to DOIP_ROUTING_ACTIVATION_MSG, and
  DoIPChannel_2 has DoIPRoutingActivationType set to DOIP_ROUTING_ACTIVATION_AUTOMATIC, while
  both share the same DoIPTester_0.

Test Execution: 
  VP(DoIP.EB.XDM.Channel.TesterRoutingActivationType):
  The following error must be issued:
  Mixing of automatic and manual routing activation types for a single tester is not supported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.Channel.TesterRoutingActivationType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>930</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>999</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01041_Invalid_DoIP_Xdm_SoAdSocketSoConModeChgNotification</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>1130</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that the generator shall raise an error message if SoAd module config
  parameter SoAdSocketSoConModeChgNotification of corresponding SoAdSocketConnectionGroup is not set
  to TRUE for TCP connection used in DoIP.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  Parameter SoAdSocketSoConModeChgNotification set to FALSE for TCP connection used in DoIP.

Test Execution: 
  VP(DoIP.EB.XDM.TcpConn.SoAdSocketSoConModeChgNotification):
  The following error must be issued:
  Config parameter SoAdSocketSoConModeChgNotification
  of corresponding SoAdSocketConnectionGroup needs to be set to TRUE for TCP connections used in
  DoIP.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.TcpConn.SoAdSocketSoConModeChgNotification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>931</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1000</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01042_Invalid_DoIP_Xdm_SoAdSocketAutomaticSoConSetup</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>1159</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that the generator shall raise an error message if SoAd module config
  parameter SoAdSocketSoConModeChgNotification of corresponding SoAdSocketConnectionGroup is not set
  to FALSE for TCP connection used in DoIP.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  Parameter SoAdSocketAutomaticSoConSetup set to TRUE for TCP connections used in DoIP.

Test Execution: 
  VP(DoIP.EB.XDM.TcpConn.SoAdSocketAutomaticSoConSetup):
  The following error must be issued:
  Parameter SoAdSocketAutomaticSoConSetup of corresponding SoAdSocketConnectionGroup needs to be set
  to FALSE for TCP connections used in DoIP.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.TcpConn.SoAdSocketAutomaticSoConSetup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>932</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1001</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01043_Invalid_DoIP_Xdm_SoAdPduHeaderEnable</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>1187</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that the generator shall raise an error message if SoAd module config
  parameter SoAdPduHeaderEnable of corresponding SoAdSocketConnectionGroup is not set to FALSE for
  TCP connection used in DoIP.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  Parameter SoAdPduHeaderEnable set to TRUE for TCP connections used in DoIP.

Test Execution: 
  VP(DoIP.EB.XDM.TcpConn.SoAdPduHeaderEnable):
  The following error must be issued:
  Parameter SoAdPduHeaderEnable of corresponding SoAdSocketConnectionGroup needs to be set to FALSE
  for TCP connections used in DoIP.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.TcpConn.SoAdPduHeaderEnable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>933</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1002</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01044_Invalid_DoIP_Xdm_SoAdSocketTcpInitiate</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>1215</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that the generator shall raise an error message if SoAd module config
  parameter SoAdSocketTcpInitiate of corresponding SoAdSocketConnectionGroup is not set to FALSE for
  TCP connection used in DoIP.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  Parameter SoAdSocketTcpInitiate of corresponding SoAdSocketConnectionGroup set to TRUE.

Test Execution: 
  VP(DoIP.EB.XDM.TcpConn.SoAdSocketTcpInitiate):
  The following error must be issued:
  Parameter SoAdSocketTcpInitiate of corresponding SoAdSocketConnectionGroup needs to be set to
  FALSE for TCP connections used in DoIP.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.TcpConn.SoAdSocketTcpInitiate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>934</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1003</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01045_Invalid_DoIP_Xdm_SameSoAdSoConGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>1243</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that the generator shall raise an error message if DoIPSoAdTcpTxPduRef and
  DoIPSoAdTcpRxPduRef belong to different SoAd SoConGroups.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  SoAdTxSocketConnOrSocketConnBundleRef used by DoIPSoAdTcpTxPduRef set to different SoAd SoConGroup.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSoAdRxTxPduRef.SameSoAdSoConGroup):
  The following error must be issued:
  DoIPSoAdTcpTxPduRef and DoIPSoAdTcpRxPduRef shall belong to the same SoAd SoConGroup.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSoAdRxTxPduRef.SameSoAdSoConGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>935</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1004</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01046_Invalid_DoIP_Xdm_DoIPSoAdRxPduRef_InvalidRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>1269</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that the generator shall raise an error message if DoIPSoAdTcpRxPduRef does not
  point to a valid node.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIPSoAdTcpRxPduRef invalid.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSoAdRxPduRef.InvalidRef):
  The following error must be issued:
  Reference shall point to a valid node.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSoAdRxPduRef.InvalidRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>936</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1005</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01047_Invalid_DoIP_Xdm_DoIPSoAdRxPduRef_NotUnique</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>1295</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that the generator shall raise an error message if DoIPSoAdTcpRxPduRef is not
  unique.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIPTcpConnection_0 and DoIPTcpConnection_1 shall have the same DoIPSoAdTcpRxPduRef.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSoAdRxPduRef.NotUnique):
  The following error must be issued: DoIPSoAdTcpRxPduRef references must be unique.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSoAdRxPduRef.NotUnique</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>937</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1006</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01048_Invalid_DoIP_Xdm_DoIPSoAdRxPduRef_Errors</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>1320</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that the generator shall raise error messages if DoIPSoAdTcpRxPduRef is not
  set correctly.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  SoAdSocketRouteDest/SoAdRxPduRef of SoAdSocketRoute_2 not valid.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSoAdRxPduRef.SoAdRxPduRef):
  The following errors must be issued:
  No SoAdSocketRouteDest/SoAdRxPduRef found in SoAd referring to the same Rx PDU. Exactly one must exist.
  VP(DoIP.EB.XDM.DoIPSoAdRxPduRef.SoAdRxUpperLayerTypeTp):
  SoAdRxUpperLayerType in SoAd must be 'TP'.
  VP(DoIP.EB.XDM.DoIPSoAdRxPduRef.SoAdRxPduIdEnabled): SoAdRxPduId in SoAd must be enabled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSoAdRxPduRef.SoAdRxPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>938</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSoAdRxPduRef.SoAdRxUpperLayerTypeTp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>939</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSoAdRxPduRef.SoAdRxPduIdEnabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>940</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1007</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01049_Invalid_DoIP_Xdm_DoIPSoAdRxPduRef_Multiple</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>1355</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that the generator shall raise an error message multiple
  SoAdSocketRouteDest/SoAdRxPduRef are found in SoAd referring to the same Rx PDU.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  SoAdSocketRoute_2 and SoAdSocketRoute_3 shall have the same SoAdRxPduRef.

Test Execution: 
  VP(DoIP.EB.XDM.SoAdRxPduRef.MultipleSoAdRxPduRef):
  The following error must be issued:
  Multiple SoAdSocketRouteDest/SoAdRxPduRef found in SoAd referring to the same Rx PDU.
  Exactly one must exist.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.SoAdRxPduRef.MultipleSoAdRxPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>941</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1008</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01050_Invalid_DoIP_Xdm_CustomChannel_DoIPPduRTxPduId_Consecutive</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>1382</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if custom channel parameter DoIPPduRTxPduId
  is not consecutive.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIPPduRTxPdu containers in DoIPChannel are not enabled.

Test Execution: 
  VP(DoIP.EB.XDM.CustomChannel.DoIPPduRTxPduId.Consecutive):
  The following error must be issued: DoIPCustomChannel/DoIPPduRTxPdu/DoIPPduRTxPduId shall be
  consecutive and start with the next higher DoIPChannel/DoIPPduRTxPdu/DoIPPduRTxPduId.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.CustomChannel.DoIPPduRTxPduId.Consecutive</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>911</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1009</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_01051_Invalid_DoIP_Xdm_CustomChannel_DoIPPduRRxPduId_Consecutive</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>1409</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test will check that an error shall be reported if custom channel parameter DoIPPduRRxPduId
  is not consecutive.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  DoIPPduRRxPdu containers in DoIPCustomChannel are not consecutive.

Test Execution: 
  VP(DoIP.EB.XDM.CustomChannel.DoIPPduRRxPduId.Consecutive):
  The following error must be issued: DoIPCustomChannel/DoIPPduRRxPdu/DoIPPduRRxPduId shall be
    consecutive and start with the next higher DoIPChannel/DoIPPduRRxPdu/DoIPPduRRxPduId.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.CustomChannel.DoIPPduRRxPduId.Consecutive</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>910</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1010</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_GenTest_02001_Invalid_Xdm_Check_NoSecurityRefrence</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if DoIPEnableSecurityEventReporting is enabled
  and there are not any defined event in DoIPGeneral/DoIPSecurityEventRefs.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPGeneral/DoIPEnableSecurityEventReporting = true.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs there are no enabled references.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSecurityEventRefs.Added):
  The following error must be issued: /DoIP/DoIPGeneral/DoIPSecurityEventRefs
  If DoIPEnableSecurityEventReporting is enabled, at least one reference has to be added.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSecurityEventRefs.Added</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>942</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1011</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02002_Xdm_Check_InvalidRef_DOIP_SEV_DROP_UDP_INV_MSG</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>52</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if DoIPEnableSecurityEventReporting and
  DOIP_SEV_DROP_UDP_INV_MSG are enabled but DOIP_SEV_DROP_UDP_INV_MSG has wrong reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPGeneral/DoIPEnableSecurityEventReporting = true.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_DROP_UDP_INV_MSG is enabled and has invalid
    reference.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSecurityEventRefs.Valid):
  The following error must be issued:
    Reference DOIP_SEV_DROP_UDP_INV_MSG must be valid.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSecurityEventRefs.Valid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1012</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02003_Xdm_Check_InvalidRef_DOIP_SEV_VEHICLE_ID_RESP_TX</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>78</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if DoIPEnableSecurityEventReporting and
  DOIP_SEV_VEHICLE_ID_RESP_TX are enabled but DOIP_SEV_VEHICLE_ID_RESP_TX has wrong reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPGeneral/DoIPEnableSecurityEventReporting = true.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_VEHICLE_ID_RESP_TX is enabled and has invalid
    reference.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSecurityEventRefs.Valid):
  The following error must be issued:
    Reference DOIP_SEV_VEHICLE_ID_RESP_TX must be valid.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSecurityEventRefs.Valid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1013</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02004_Xdm_Check_InvalidRef_DOIP_SEV_ENTITY_STATUS_RESP_TX</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>104</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if DoIPEnableSecurityEventReporting and
  DOIP_SEV_ENTITY_STATUS_RESP_TX are enabled but DOIP_SEV_ENTITY_STATUS_RESP_TX has wrong reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPGeneral/DoIPEnableSecurityEventReporting = true.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_ENTITY_STATUS_RESP_TX is enabled and has invalid
    reference.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSecurityEventRefs.Valid):
  The following error must be issued:
    Reference DOIP_SEV_ENTITY_STATUS_RESP_TX must be valid.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSecurityEventRefs.Valid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1014</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02005_Xdm_Check_InvalidRef_DOIP_SEV_POWER_MODE_RESP_TX</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>130</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if DoIPEnableSecurityEventReporting and
  DOIP_SEV_POWER_MODE_RESP_TX are enabled but DOIP_SEV_POWER_MODE_RESP_TX has wrong reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPGeneral/DoIPEnableSecurityEventReporting = true.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_POWER_MODE_RESP_TX is enabled and has invalid
    reference.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSecurityEventRefs.Valid):
  The following error must be issued:
    Reference DOIP_SEV_POWER_MODE_RESP_TX must be valid.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSecurityEventRefs.Valid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1015</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02006_Xdm_Check_InvalidRef_DOIP_SEV_DROP_TCP_GEN_HDR_ERR</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>156</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if DoIPEnableSecurityEventReporting and
  DOIP_SEV_DROP_TCP_GEN_HDR_ERR are enabled but DOIP_SEV_DROP_TCP_GEN_HDR_ERR has wrong reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPGeneral/DoIPEnableSecurityEventReporting = true.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_DROP_TCP_GEN_HDR_ERR is enabled and has
    invalid reference.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSecurityEventRefs.Valid):
  The following error must be issued:
    Reference DOIP_SEV_DROP_TCP_GEN_HDR_ERR must be valid.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSecurityEventRefs.Valid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1016</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02007_Xdm_Check_InvalidRef_DOIP_SEV_ROUTING_ACT_RESP_TX</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>183</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if DoIPEnableSecurityEventReporting and
  DOIP_SEV_ROUTING_ACT_RESP_TX are enabled but DOIP_SEV_ROUTING_ACT_RESP_TX has wrong reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPGeneral/DoIPEnableSecurityEventReporting = true.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_ROUTING_ACT_RESP_TX is enabled and has
    invalid reference.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSecurityEventRefs.Valid):
  The following error must be issued:
    Reference DOIP_SEV_ROUTING_ACT_RESP_TX must be valid.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSecurityEventRefs.Valid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1017</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02008_Xdm_Check_InvalidRef_DOIP_SEV_ALIVE_RESP_WRONG_SA_RESET</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>209</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if DoIPEnableSecurityEventReporting and
  DOIP_SEV_ALIVE_RESP_WRONG_SA_RESET are enabled but DOIP_SEV_ALIVE_RESP_WRONG_SA_RESET has wrong
  reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPGeneral/DoIPEnableSecurityEventReporting = true.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_ALIVE_RESP_WRONG_SA_RESET is enabled and has
    invalid reference.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSecurityEventRefs.Valid):
  The following error must be issued:
    Reference DOIP_SEV_ALIVE_RESP_WRONG_SA_RESET must be valid.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSecurityEventRefs.Valid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1018</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02009_Xdm_Check_InvalidRef_DOIP_SEV_ALIVE_RESP</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>236</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if DoIPEnableSecurityEventReporting and
  DOIP_SEV_ALIVE_RESP are enabled but DOIP_SEV_ALIVE_RESP has wrong reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPGeneral/DoIPEnableSecurityEventReporting = true.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_ALIVE_RESP is enabled and has invalid
    reference.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSecurityEventRefs.Valid):
  The following error must be issued:
    Reference DOIP_SEV_ALIVE_RESP must be valid.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSecurityEventRefs.Valid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1019</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02010_Xdm_Check_InvalidRef_DOIP_SEV_DROP_DIAG_MSG_DIAG_HDR</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>262</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if DoIPEnableSecurityEventReporting and
  DOIP_SEV_DROP_DIAG_MSG_DIAG_HD are enabled but DOIP_SEV_DROP_DIAG_MSG_DIAG_HD has wrong reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPGeneral/DoIPEnableSecurityEventReporting = true.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_DROP_DIAG_MSG_DIAG_HD is enabled and has
    invalid reference.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSecurityEventRefs.Valid):
  The following error must be issued:
    Reference DOIP_SEV_DROP_DIAG_MSG_DIAG_HD must be valid.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSecurityEventRefs.Valid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1020</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02011_Xdm_Check_InvalidRef_DOIP_SEV_DROP_DIAG_MSG_UL</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>288</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if DoIPEnableSecurityEventReporting and
  DOIP_SEV_DROP_DIAG_MSG_UL are enabled but DOIP_SEV_DROP_DIAG_MSG_UL has wrong reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPGeneral/DoIPEnableSecurityEventReporting = true.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_DROP_DIAG_MSG_UL is enabled and has invalid
    reference.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSecurityEventRefs.Valid):
  The following error must be issued:
    Reference DOIP_SEV_DROP_DIAG_MSG_UL must be valid.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSecurityEventRefs.Valid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1021</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02012_Xdm_Check_InvalidRef_DOIP_SEC_TCP_CONN_RESET_INACTIVITY_TIMER</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>314</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if DoIPEnableSecurityEventReporting and
  DOIP_SEC_TCP_CONN_RESET_INACTIVITY_TIMER are enabled but DOIP_SEC_TCP_CONN_RESET_INACTIVITY_TIMER
  has wrong reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPGeneral/DoIPEnableSecurityEventReporting = true.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEC_TCP_CONN_RESET_INACTIVITY_TIMER is enabled and
    has invalid reference.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSecurityEventRefs.Valid):
  The following error must be issued:
    Reference DOIP_SEC_TCP_CONN_RESET_INACTIVITY_TIMER must be valid.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSecurityEventRefs.Valid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1022</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02013_Xdm_Check_InvalidRef_DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>341</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if DoIPEnableSecurityEventReporting and
  DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER are enabled but DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER
  has wrong reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPGeneral/DoIPEnableSecurityEventReporting = true.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER is enabled and
    have invalid reference.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSecurityEventRefs.Valid):
  The following error must be issued:
    Reference DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER must be valid.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSecurityEventRefs.Valid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1023</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02014_Xdm_Check_InvalidRef_AllEvents</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>368</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if DoIPEnableSecurityEventReporting and
  all events are enabled, but all events will have a wrong reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPGeneral/DoIPEnableSecurityEventReporting = true.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_DROP_UDP_INV_MSG is enabled and the reference
    is invalid.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_VEHICLE_ID_RESP_TX is enabled and the reference
    is invalid.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_ENTITY_STATUS_RESP_TX is enabled and the reference
    is invalid.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_POWER_MODE_RESP_TX is enabled and the reference
    is invalid.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_DROP_TCP_GEN_HDR_ERR is enabled and the reference
    is invalid.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_DROP_ROUTING_ACT is enabled and the reference
    is invalid.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_ROUTING_ACT_RESP_TX is enabled and the
  reference is invalid.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_ALIVE_RESP_WRONG_SA_RESET is enabled and the
  reference is invalid.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_ALIVE_RESP is enabled and the reference
    is invalid.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_DROP_DIAG_MSG_DIAG_HD is enabled and the reference
    is invalid.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_DROP_DIAG_MSG_UL is enabled and the reference
    is invalid.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER is enabled and
    the reference is invalid.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEC_TCP_CONN_RESET_INACTIVITY_TIMER is enabled and
    the reference is invalid.

Test Execution: 
  VP(DoIP.EB.XDM.DoIPSecurityEventRefs.Valid):
  The following error must be issued:
    - Reference DOIP_SEV_DROP_UDP_INV_MSG must be valid.
    - Reference DOIP_SEV_VEHICLE_ID_RESP_TX must be valid.
    - Reference DOIP_SEV_ENTITY_STATUS_RESP_TX must be valid.
    - Reference DOIP_SEV_POWER_MODE_RESP_TX must be valid.
    - Reference DOIP_SEV_DROP_TCP_GEN_HDR_ERR must be valid.
    - Reference DOIP_SEV_DROP_ROUTING_ACT must be valid.
    - Reference DOIP_SEV_ROUTING_ACT_RESP_TX must be valid.
    - Reference DOIP_SEV_ALIVE_RESP_WRONG_SA_RESET must be valid.
    - Reference DOIP_SEV_ALIVE_RESP must be valid.
    - Reference DOIP_SEV_DROP_DIAG_MSG_DIAG_HD must be valid.
    - Reference DOIP_SEV_DROP_DIAG_MSG_UL must be valid.
    - Reference DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER must be valid.
    - Reference DOIP_SEC_TCP_CONN_RESET_INACTIVITY_TIMER must be valid.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSecurityEventRefs.Valid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>943</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1024</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02015_Invalid_Xdm_Check_SameReferenceOfEvents</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>430</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if DoIPEnableSecurityEventReporting and
  at least two events are enabled and have same reference.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPGeneral/DoIPEnableSecurityEventReporting = true.
  In DoIP/DoIPGeneral/DoIPSecurityEventRefs/DOIP_SEV_DROP_UDP_INV_MSG and DOIP_SEV_VEHICLE_ID_RESP_TX
    are both enabled and have same reference.
  
Test Execution: 
  VP(DoIP.EB.XDM.DoIPSecurityEventRefs.Unique):
  The following error must be issued:
    DOIP_SEV_DROP_UDP_INV_MSG reference must be unique.
    DOIP_SEV_VEHICLE_ID_RESP_TX reference must be unique.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.XDM.DoIPSecurityEventRefs.Unique</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>944</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1025</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02016_Invalid_Xdm_Check_NoSecureTcp</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>457</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if DoIPRoutingActivationSecurityRequired is enabled
  but no TCP connection is configured to be secure (DoIPTcpConnectionSecurityRequired).
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/
  DoIPRoutingActivation/DoIPRoutingActivationSecurityRequired = true.
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/
  DoIPConnections/DoIPTcpConnection/DoIPTcpConnectionSecurityRequired = false.

Test Execution: 
  VP(DoIP.dsn.XDM.SecureRoutingActivationRequiresSecuredConnection):
  The following error must be issued:
    If routing activation requires security, there has to be TCP connections
    with DoIPTcpConnectionSecurityRequired enabled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.XDM.SecureRoutingActivationRequiresSecuredConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1026</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02017_Invalid_Xdm_Check_NoProtocolVersion</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>487</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if neither DoIP_ISO13400_2_2012 nor
  DoIP_ISO13400_2_2019 are enabled.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPProtocolVersion/
  DoIP_ISO13400_2_2012 = false.
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPProtocolVersion/
  DoIP_ISO13400_2_2019 = false.

Test Execution: 
  VP(DoIP.dsn.XDM.NoProtocolVersion):
  The following error must be issued:
    At least one protocol version needs to be enabled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.XDM.NoProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>947</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1027</internalId></specobject>
    <specobject>
      <id>DoIP_GenTest_02018_Invalid_Xdm_Check_NoSecureProtocolEnabled</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Compile/IN/DoIP_GenTest_02_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>514</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  The test shall verify that an error is reported if both DoIP_ISO13400_2_2019 and
  DoIPSecuredCommunicationforAllProtocolVersions are disabled while at least one
  DoIPTcpConnectionSecurityRequired is enabled.
&lt;/para&gt;

Test Object: XDM check
Test Precondition: 
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPProtocolVersion/
  DoIPSecuredCommunicationforAllProtocolVersions = false.
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPProtocolVersion/
  DoIP_ISO13400_2_2019 = false.
  In DoIP/DoIPConfigSet/DoIPInterface/DoIPInterface_0/DoIPConnections/
  DoIPTcpConnection/DoIPTcpConnectionSecurityRequired = true.

Test Execution: 
  VP(DoIP.dsn.XDM.SecureConnectionNotAllowed):
  The following error must be issued:
    Secured connections shall only be configured if DoIP_ISO13400_2_2019 or
    DoIPSecuredCommunicationForAllProtocolVersions is enabled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.XDM.SecureConnectionNotAllowed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>945</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1028</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ConTest01017_MainFunction</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>55</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP_MainFunction() is called before DoIP_Init(),
    its processing is skipped and no DET is generated.
  
Test Object: 
    DoIP_MainFunction().
  
Test Precondition: 
    DoIP not initialized.
  
Test Execution: 
    01: Call DoIP_MainFunction().
    02: VP(DoIP.EB.MainFunctionDoIPNotInit): Verify that no DET is generated.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.MainFunctionDoIPNotInit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1029</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01018_MainFunctionTx</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>97</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP_MainFunctionTx() is called before DoIP_Init(),
    its processing is skipped and no DET is generated.
  
Test Object: 
    DoIP_MainFunctionTx().
  
Test Precondition: 
    DoIP not initialized.
  
Test Execution: 
    01: Call DoIP_MainFunctionTx().
    02: VP(DoIP.EB.MainFunctionTxDoIPNotInit): Verify that no DET is generated.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.MainFunctionTxDoIPNotInit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1030</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01000_Uninit</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>141</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Call all APIs while DoIP module is uninitialized.
  
Test Object: 
    Verify APIs reaction when called while DoIP is uninitialized.
  
Test Precondition: 
    DoIP uninitialized
  
Test Execution: 
    01: Call DoIP_TpTransmit().
    02: VP(DoIP.SWS_DoIP_00162): Verify that it returned E_NOT_OK.
    03: VP(DoIP.SWS_DoIP_00162): Verify that DOIP_E_UNINIT was reported to DET.
    04: Call DoIP_SoAdTpCopyTxData().
    05: VP(DoIP.SWS_DoIP_00175): Verify that it returned E_NOT_OK.
    06: VP(DoIP.SWS_DoIP_00175): Verify that DOIP_E_UNINIT was reported to DET.
    07: Call DoIP_SoAdTpTxConfirmation().
    08: VP(DoIP.SWS_DoIP_00180): Verify that DOIP_E_UNINIT was reported to DET.
    09: Call DoIP_SoAdTpCopyRxData().
    10: VP(DoIP.SWS_DoIP_00183): Verify that it returned BUFREQ_E_NOT_OK.
    11: VP(DoIP.SWS_DoIP_00183): Verify that DOIP_E_UNINIT was reported to DET.
    12: Call DoIP_SoAdTpStartOfReception().
    13: VP(DoIP.SWS_DoIP_00186): Verify that it returned BUFREQ_E_NOT_OK.
    14: VP(DoIP.SWS_DoIP_00186): Verify that DOIP_E_UNINIT was reported to DET.
    15: Call DoIP_SoAdTpRxIndication().
    16: VP(DoIP.SWS_DoIP_00190): Verify that DOIP_E_UNINIT was reported to DET.
    17: Call DoIP_SoAdIfRxIndication().
    18: VP(DoIP.SWS_DoIP_00246): Verify that DOIP_E_UNINIT was reported to DET.
    19: Call DoIP_SoConModeChg().
    20: VP(DoIP.SWS_DoIP_00193): Verify that DOIP_E_UNINIT was reported to DET.
    21: Call DoIP_LocalIpAddrAssignmentChg().
    22: VP(DoIP.SWS_DoIP_00195): Verify that DOIP_E_UNINIT was reported to DET.
    23: Call DoIP_ActivationLineSwitch(0U, active = TRUE).
    24: VP(DoIP.SWS_DoIP_00285):
        Verify that DOIP_E_UNINIT was reported to DET.
    25: Call DoIP_SoAdIfTxConfirmation().
    26: VP(DoIP.SWS_DoIP_00249): Verify that DOIP_E_UNINIT was reported to DET.
    27: Call DoIP_CancelTransmit().
    28: VP(DoIP.SWS_DoIP_00166): Verify that it returned E_NOT_OK.
    29: VP(DoIP.SWS_DoIP_00166): Verify that DOIP_E_UNINIT was reported to DET.
    30: Call DoIP_CancelReceive().
    31: VP(DoIP.SWS_DoIP_00169): Verify that it returned E_NOT_OK.
    32: VP(DoIP.SWS_DoIP_00169): Verify that DOIP_E_UNINIT was reported to DET.
    33: Call DoIP_GetAndResetMeasurementData().
    34: VP(DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_Uninit): Verify that DOIP_E_UNINIT
        was reported to DET.
    35: Call DoIP_GetSoConIdFromTxPduId().
    36: VP(DoIP.EB.Det.GetSoConIdFromTxPduId.Uninit): Verify that it returned E_NOT_OK.
    37: VP(DoIP.EB.Det.GetSoConIdFromTxPduId.Uninit): Verify that DOIP_E_UNINIT was reported to DET.
    38: Call DoIP_GetSoConIdFromRxPduId().
    39: VP(DoIP.EB.Det.GetSoConIdFromRxPduId.Uninit): Verify that it returned E_NOT_OK.
    40: VP(DoIP.EB.Det.GetSoConIdFromRxPduId.Uninit): Verify that DOIP_E_UNINIT was reported to DET.
    41: Call DoIP_DisconnectTester().
    42: VP(DoIP.EB.Det.GetSoConIdFromRxPduId.Uninit): Verify that it returned E_NOT_OK.
    43: VP(DoIP.EB.Det.GetSoConIdFromRxPduId.Uninit): Verify that DOIP_E_UNINIT was reported to DET.
    44: Call DoIP_TriggerVehicleAnnouncement().
    45: VP(DoIP.SWS_BSW_00243.UnInitChecking): Verify that DOIP_E_UNINIT was reported to DET.
    46: Call DoIP_ControlInternalInterface().
    47: VP(DoIP.SWS_BSW_00243.UnInitChecking): Verify that DOIP_E_UNINIT was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00183</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00186</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00190</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00246</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>311</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00193</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00195</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00249</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>314</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00169</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.Det.GetSoConIdFromTxPduId.Uninit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>718</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.Det.GetSoConIdFromRxPduId.Uninit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>721</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.Det.DisconnectTester.Uninit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>724</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00285</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>339</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_Uninit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>821</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_BSW_00243.UnInitChecking</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1031</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01001_VersionInfo_NullPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>444</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DoIP_GetVersionInfo() with invalid pointer.
  
Test Object: 
    DoIP_GetVersionInfo().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_GetVersionInfo(NULL_PTR).
    02: VP(DoIP.SWS_DoIP_00172): Verify that DOIP_E_PARAM_POINTER was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00172</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1032</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01002_Init_NullPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>490</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DoIP_Init() with invalid pointer.
  
Test Object: 
    DoIP_Init().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_Init(NULL_PTR).
    02: VP(DoIP.ASR41.SWS_DoIP_00171): Verify that DOIP_E_PARAM_POINTER was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ASR41.SWS_DoIP_00171</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1033</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01003_Transmit_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>535</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DoIP_TpTransmit() with invalid parameters.
  
Test Object: 
    DoIP_TpTransmit().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_TpTransmit() with DoIPPduRTxInfoPtr = NULL_PTR.
    02: VP(DoIP.SWS_DoIP_0016): Verify that it returned E_NOT_OK.
    03: VP(DoIP.SWS_DoIP_00164, DoIP.SWS_BSW_00212.NullPointerChecking):
        Verify that DOIP_E_PARAM_POINTER was reported to DET.
    04: Call DoIP_TpTransmit() with invalid DoIPPduRTxId.
    05: VP(DoIP.SWS_DoIP_00163): Verify that it returned E_NOT_OK.
    06: VP(DoIP.SWS_DoIP_00163, DoIP.SWS_BSW_00049.ApiParameterChecking):
        Verify that DOIP_E_INVALID_PDU_SDU_ID was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00163</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_BSW_00212.NullPointerChecking</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_BSW_00049.ApiParameterChecking</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1034</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01004_SoAdTpCopyTxData_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>611</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DoIP_SoAdTpCopyTxData() with invalid pointers.
  
Test Object: 
    DoIP_SoAdTpCopyTxData().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyTxData() with PduInfoPtr = NULL_PTR.
    02: VP(DoIP.SWS_DoIP_00177): Verify that it returned BUFREQ_E_NOT_OK.
    03: VP(DoIP.SWS_DoIP_00177): Verify that DOIP_E_PARAM_POINTER was reported to DET.
    04: Call DoIP_SoAdTpCopyTxData() with AvailableDataPtr = NULL_PTR.
    05: VP(DoIP.SWS_DoIP_00177): Verify that it returned BUFREQ_E_NOT_OK.
    06: VP(DoIP.SWS_DoIP_00177): Verify that DOIP_E_PARAM_POINTER was reported to DET.
    07: Call DoIP_SoAdTpCopyTxData() with Retry different than NULL_PTR.
    08: VP(DoIP.SWS_DoIP_00178): Verify that it returned BUFREQ_E_NOT_OK.
    09: VP(DoIP.SWS_DoIP_00178): Verify that DOIP_E_INVALID_PARAMETER was reported to DET.
    10: Call DoIP_SoAdTpCopyTxData() using invalid TxPduId.
    11: VP(DoIP.SWS_DoIP_00176): Verify that it returned BUFREQ_E_NOT_OK.
    12: VP(DoIP.SWS_DoIP_00176): Verify that DOIP_E_INVALID_PDU_SDU_ID was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00176</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1035</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01005_SoAdTpCopyRxData_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>716</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DoIP_SoAdTpCopyRxData() with invalid parameters.
  
Test Object: 
    DoIP_SoAdTpCopyRxData().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() with PduInfoPtr = NULL_PTR.
    02: VP(DoIP.SWS_DoIP_00184): Verify that it returned BUFREQ_E_NOT_OK.
    03: VP(DoIP.SWS_DoIP_00184): Verify that DOIP_E_PARAM_POINTER was reported to DET.
    04: Call DoIP_SoAdTpCopyRxData() with SduLength !=0 and SduDataPtr = NULL_PTR.
    05: VP(DoIP.EB.Det.SoAdTpCopyRxData.SduDataPtr.Invalid): Verify that it returned BUFREQ_E_NOT_OK.
    06: VP(DoIP.EB.Det.SoAdTpCopyRxData.SduDataPtr.Invalid): Verify that DOIP_E_PARAM_POINTER was
        reported to DET.
    07: Call DoIP_SoAdTpCopyRxData() with BufferSizePtr = NULL_PTR.
    08: VP(DoIP.SWS_DoIP_00184): Verify that it returned BUFREQ_E_NOT_OK.
    09: VP(DoIP.SWS_DoIP_00184): Verify that DOIP_E_PARAM_POINTER was reported to DET.
    10: Call DoIP_SoAdTpCopyRxData() using invalid RxPduId.
    11: VP(DoIP.SWS_DoIP_00036): Verify that it returned BUFREQ_E_NOT_OK.
    12: VP(DoIP.SWS_DoIP_00036): Verify that DOIP_E_INVALID_PDU_SDU_ID was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00184</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.Det.SoAdTpCopyRxData.SduDataPtr.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>717</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1036</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01006_SoAdTpStartOfReception_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>828</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DoIP_SoAdTpStartOfReception() with invalid parameters.
  
Test Object: 
    DoIP_SoAdTpStartOfReception().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() with BufferSizePtr = NULL_PTR.
    02: VP(DoIP.SWS_DoIP_00188): Verify that it returned BUFREQ_E_NOT_OK.
    03: VP(DoIP.SWS_DoIP_00188): Verify that DOIP_E_PARAM_POINTER was reported to DET.
    04: Call DoIP_SoAdTpStartOfReception() with TpSduLength different than 0.
    05: VP(DoIP.SWS_DoIP_00189): Verify that it returned BUFREQ_E_NOT_OK.
    06: VP(DoIP.SWS_DoIP_00189): Verify that DOIP_E_INVALID_PARAMETER was reported to DET.
    07: Call DoIP_SoAdTpStartOfReception() using invalid RxPduId.
    08: VP(DoIP.SWS_DoIP_00187): Verify that it returned BUFREQ_E_NOT_OK.
    09: VP(DoIP.SWS_DoIP_00187): Verify that DOIP_E_INVALID_PDU_SDU_ID was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00187</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>267</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1037</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01007_SoAdIfRxIndication_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>916</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DoIP_SoAdIfRxIndication() with BufferSizePtr = NULL_PTR, SduDataPtr = NULL_PTR and
    invalid RxPduId.
  
Test Object: 
    DoIP_SoAdIfRxIndication().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with PduInfoPtr = NULL_PTR.
    02: VP(DoIP.SWS_DoIP_00248): Verify that DOIP_E_PARAM_POINTER was reported to DET.
    03: Call DoIP_SoAdIfRxIndication() with invalid RxPduId.
    04: VP(DoIP.SWS_DoIP_00247): Verify that DOIP_E_INVALID_PDU_SDU_ID was reported to DET.
    05: Set PduInfoPtr.SduDataPtr as NULL pointer.
    06: Call DoIP_SoAdIfRxIndication() with invalid SduDataPtr.
    07: VP(DoIP.EB.Det.SoAdIfRxIndication.SduDataPtr.Invalid): Verify that DOIP_E_PARAM_POINTER
           was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00248</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>313</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00247</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>312</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.Det.SoAdIfRxIndication.SduDataPtr.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>716</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1038</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01008_SoAdTpRxIndication_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>994</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DoIP_SoAdTpRxIndication() with invalid RxPduId.
  
Test Object: 
    DoIP_SoAdTpRxIndication().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdTpRxIndication() with invalid RxPduId.
    02: VP(DoIP.SWS_DoIP_00191): Verify that DOIP_E_INVALID_PDU_SDU_ID was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>269</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1039</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01009_SoAdTpTxConfirmation_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>1040</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DoIP_SoAdTpTxConfirmation() with invalid TxPduId.
  
Test Object: 
    DoIP_SoAdTpTxConfirmation().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdTpTxConfirmation() with invalid TxPduId.
    02: VP(DoIP.SWS_DoIP_00181): Verify that DOIP_E_INVALID_PDU_SDU_ID was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00181</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1040</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01010_SoAdIfTxConfirmation_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>1086</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DoIP_SoAdIfTxConfirmation() with invalid RxPduId.
  
Test Object: 
    DoIP_SoAdIfTxConfirmation().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdIfTxConfirmation() with invalid TxPduId.
    02: VP(DoIP.SWS_DoIP_00250): Verify that DOIP_E_INVALID_PDU_SDU_ID was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00250</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>315</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1041</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01011_SoConModeChg_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>1132</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DoIP_SoConModeChg() with invalid Mode.
  
Test Object: 
    DoIP_SoConModeChg().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoConModeChg() with invalid Mode.
    02: VP(DoIP.SWS_DoIP_00194): Verify that DOIP_E_INVALID_PARAMETER was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00194</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1042</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01012_LocalIpAddrAssignmentChg_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>1178</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DoIP_LocalIpAddrAssignmentChg() with invalid State.
  
Test Object: 
    DoIP_LocalIpAddrAssignmentChg().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_LocalIpAddrAssignmentChg() with invalid State.
    02: VP(DoIP.SWS_DoIP_00196): Verify that DOIP_E_INVALID_PARAMETER was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00196</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1043</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01013_CancelTransmit_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>1225</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DoIP_CancelTransmit() with invalid parameters.
  
Test Object: 
    DoIP_CancelTransmit().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_CancelTransmit() with invalid DoIPPduRTxId.
    02: VP(DoIP.SWS_DoIP_00167): Verify that DOIP_E_INVALID_PDU_SDU_ID was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1044</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01014_CancelReceive_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>1270</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DoIP_CancelReceive() with invalid parameters.
  
Test Object: 
    DoIP_CancelReceive().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_CancelReceive() with invalid DoIPPduRRxId.
    02: VP(DoIP.SWS_DoIP_00170): Verify that DOIP_E_INVALID_PDU_SDU_ID was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1045</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01019_GetSoConIdFromTxPduId_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>1315</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DoIP_GetSoConIdFromTxPduId() with invalid parameters.
  
Test Object: 
    DoIP_GetSoConIdFromTxPduId().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_GetSoConIdFromTxPduId() with invalid SoConIdPtr.
    02: VP(DoIP.EB.Det.GetSoConIdFromTxPduId.SoConIdPtr.Invalid):
        Verify that it returned E_NOT_OK, and DOIP_E_PARAM_POINTER was reported to DET.
    03: Call DoIP_GetSoConIdFromTxPduId() with invalid TxPduId.
    04: VP(DoIP.EB.Det.GetSoConIdFromTxPduId.TxPduId.Invalid):
        Verify that it returned E_NOT_OK, and DOIP_E_INVALID_PDU_SDU_ID was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.Det.GetSoConIdFromTxPduId.SoConIdPtr.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>719</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.Det.GetSoConIdFromTxPduId.TxPduId.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>720</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1046</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01020_GetSoConIdFromRxPduId_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>1380</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DoIP_GetSoConIdFromRxPduId() with invalid parameters.
  
Test Object: 
    DoIP_GetSoConIdFromRxPduId().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_GetSoConIdFromRxPduId() with invalid SoConIdPtr.
    02: VP(DoIP.EB.Det.GetSoConIdFromRxPduId.SoConIdPtr.Invalid):
        Verify that it returned E_NOT_OK, and DOIP_E_PARAM_POINTER was reported to DET.
    03: Call DoIP_GetSoConIdFromRxPduId() with invalid TxPduId.
    04: VP(DoIP.EB.Det.GetSoConIdFromRxPduId.RxPduId.Invalid):
        Verify that it returned E_NOT_OK, and DOIP_E_INVALID_PDU_SDU_ID was reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.Det.GetSoConIdFromRxPduId.SoConIdPtr.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>722</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.Det.GetSoConIdFromRxPduId.RxPduId.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>723</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1047</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01021_TriggerVehicleAnnouncement_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>1445</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies DET checks for an API DoIP_TriggerVehicleAnnouncement() when called with invalid parameters.
  
Test Object: 
    DoIP_TriggerVehicleAnnouncement().
    DET checks enabled.
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_TriggerVehicleAnnouncement() with an invalid InterfaceId.
    02: VP(SWS_DoIP_00305):
        Verify that DOIP_E_INVALID_PARAMETER was reported to DET with the correct SID.
    03: Call DoIP_TriggerVehicleAnnouncement() with an and interface id that has DoIPInterfaceAnnouncementStart
        configured to DOIP_AUTOMATIC_ANNOUNCE.
    04: VP(DoIP.EB.Det.TriggerVehicleAnnouncement.InterfaceAnnouncementStart.Invalid):
        Verify that DOIP_E_INVALID_PARAMETER was reported to DET with the correct SID.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00305</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>357</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.Det.TriggerVehicleAnnouncement.InterfaceAnnouncementStart.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>725</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1048</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01022_ActivationLineSwitch_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>1505</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies DET checks for an API DoIP_ActivationLineSwitch() when called with invalid parameters.
  
Test Object: 
    DoIP_ActivationLineSwitch().
    DET checks enabled.
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_ActivationLineSwitch() with an invalid InterfaceId.
    02: VP(SWS_DoIP_00303):
        Verify that DOIP_E_INVALID_PARAMETER was reported to DET with the correct SID.
    03: Call DoIP_ActivationLineSwitch() with an invalid ActivePtr, NULL_PTR.
    04: VP(ActivationLineSwitch.ActivePtr.Invalid):
        Verify that DOIP_E_PARAM_POINTER was reported to DET with the correct SID.
    05: Call DoIP_ActivationLineSwitch() with an and interface id that has DoIPInterfaceActLineCtrl
        configured to FALSE.
    06: VP(SWS_DoIP_00302):
        Verify that DOIP_E_INVALID_PARAMETER was reported to DET with the correct SID.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00302</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>354</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00303</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>355</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.Det.ActivationLineSwitch.ActivePtr.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>715</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1049</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01023_ControlInternalInterface_InvalidParam1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>1579</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies DET checks for an API DoIP_ControlInternalInterface() when called with invalid parameters.
  
Test Object: 
    DoIP_ControlInternalInterface().
    DET checks enabled.
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_ControlInternalInterface() with an invalid InterfaceId.
    02: VP(DoIP.EB.Det.ControlInternalInterface.InterfaceId.Invalid):
        Verify that DOIP_E_INVALID_PARAMETER was reported to DET with the correct SID.
    03: Call DoIP_ControlInternalInterface() with an invalid ActivePtr, NULL_PTR.
    04: VP(DoIP.EB.Det.ControlInternalInterface.ActivePtr.Invalid):
        Verify that DOIP_E_PARAM_POINTER was reported to DET with the correct SID.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.Det.ControlInternalInterface.InterfaceId.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>727</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.Det.ControlInternalInterface.ActivePtr.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>726</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1050</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest01024_ControlInternalInterface_InvalidParam2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest01_DetChecks/source/application/DoIP_ConTest01_DetChecks.c</sourcefile>
      <sourceline>1640</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies DET checks for an API DoIP_ControlInternalInterface() when called with invalid parameters.
  
Test Object: 
    DoIP_ControlInternalInterface().
    DET checks enabled.
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_ControlInternalInterface() with an interface id that has DoIPInterfaceActLineCtrl
        configured to TRUE.
    02: VP(DoIP.EB.Det.ControlInternalInterface.DoIPInterfaceActLineCtrl.Invalid):
        Verify that DOIP_E_INVALID_PARAMETER was reported to DET with the correct SID.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.Det.ControlInternalInterface.DoIPInterfaceActLineCtrl.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>728</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1051</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ConTest02000_Transition_InactiveToActive</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest02_ConnectionEstablishment/source/application/DoIP_ConTest02_ConnectionEstablishment.c</sourcefile>
      <sourceline>85</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the transition from DOIP_ACTIVATION_LINE_INACTIVE to
    DOIP_ACTIVATION_LINE_ACTIVE.
  
Test Object: 
    DoIP_ActivationLineSwitch().
    DoIP_LocalIpAddrAssignmentChg().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_ActivationLineSwitch() with active set to TRUE.
    02: VP(SWS_DoIP_00306, SWS_DoIP_00201, SWS_DoIP_91000):
        Verify that for each connection (Udp and Tcp) for which DoIPRequestAddressAssignment is set
        to TRUE, SoAd_GetSoConId() is called to retrieve SoConId.
    03: VP(SWS_DoIP_00306, SWS_DoIP_91000): Verify that for each of these connections
        SoAd_RequestIpAddrAssignment() is called with LocalIpAddrPtr set to NULL_PTR and Type
        set to TCPIP_IPADDR_ASSIGNMENT_ALL.
    04: VP(SWS_DoIP_00306, SWS_DoIP_91000): Verify that for each of configured connections
        (irrespective of the value of DoIPRequestAddressAssignment) DoIP calls SoAd_OpenSoCon().
    05: Call DoIP_LocalIpAddrAssignmentChg() with IdAddrStateType = TCPIP_IPADDR_STATE_ASSIGNED
        for each configured connection.
    06: VP(DoIP.EB.SWS_DoIP_00154): Verify that SoAd_ReadDhcpHostNameOption() was called, because
        DoIPUpdateDhcpHostNameOption is TRUE for all connections.
    07: Call DoIP_ActivationLineSwitch() with active set to TRUE..
    08: VP(ActivationLineState, SWS_DoIP_00201): Verify that DoIP_ActivationLineSwitch(TRUE)
        produced no calls because activation line state is already ACTIVE.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00306</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0101.EB.ActivationLineState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>788</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_91000</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>358</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1052</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest02001_InvalidityPattern</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest02_ConnectionEstablishment/source/application/DoIP_ConTest02_ConnectionEstablishment.c</sourcefile>
      <sourceline>244</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case that ASCII buffer returned in SoAd_ReadDhcpHostNameOption does not
    start with "DoIP-" and DoIPDhcpOptionVinUse is set to TRUE.
  
Test Object: 
    DoIP_ActivationLineSwitch().
    DoIP_LocalIpAddrAssignmentChg().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Bring the activation line to ACTIVE status.
    02: For the first two configured connections call DoIP_LocalIpAddrAssignmentChg()
        with State equals TCPIP_IPADDR_STATE_ASSIGNED, and perform steps 03 - 05.
    03: VP(DoIP.EB.SWS_DoIP_00154): Verify that SoAd_ReadDhcpHostNameOption() was called, because
        DoIPUpdateDhcpHostNameOption is TRUE for all connections.
    04: VP(DoIP.dsn.Func0102.SWS_DoIP_00156_UserGetVin): Verify that SoAd_WriteDhcpHostNameOption()
        was called with the buffer filled with invalidity pattern.
    05: Reset ReadDhcpHostName buffer to a non "DoIP-" value.
    06: Set SoAd_ReadDhcpHostNameOption stub to return length parameter 4 (less then a size
        required to fit a string "DoIP-").
    07: Repeat steps 02 - 05 for the remaining two connections.

  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0102.SWS_DoIP_00156_UserGetVin</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>828</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1053</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest02002_Transition_ActiveToInactive</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest02_ConnectionEstablishment/source/application/DoIP_ConTest02_ConnectionEstablishment.c</sourcefile>
      <sourceline>395</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the transition from DOIP_ACTIVATION_LINE_ACTIVE to
    DOIP_ACTIVATION_LINE_INACTIVE.
  
Test Object: 
    DoIP_ActivationLineSwitch().
    DoIP_LocalIpAddrAssignmentChg().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Bring the activation line to ACTIVE status.
    02: Call DoIP_ActivationLineSwitch() with active state set to FALSE.
    03: VP(SWS_DoIP_00358, DoIP.dsn.Func0101.EB.SWS_DoIP_00234, DoIP.SWS_DoIP_91000):
        Verify that all configured socket connections (UDP and TCP) will be closed by calls to
        SoAd_GetSoConId() and SoAd_CloseSoCon() with Abort=FALSE if DoIPEnableTcpClosureWithFIN is
        enabled or with Abort=TRUE if disabled.
    04: Call DoIP_MainFunction EBTEST_LOCAL_IP_ADDRESS_RELEASE_DELAY - 1U times.
        If EBTEST_LOCAL_IP_ADDRESS_RELEASE_DELAY == 1U then skip step 04 since timeout will happen
        in next DoIP_MainFunction() call.
    05: VP(DoIP.dsn.Func0101.EB.SWS_DoIP_00235): Check that release of IP addresses is not yet
        started.
    06: Call DoIP_MainFunction one more time to time out the IP address assignment release timer.
    07: VP(DoIP.dsn.Func0101.EB.SWS_DoIP_00235): Verify that for each connection (UDP and TCP) for
        which DoIPRequestAddressAssignment is set to TRUE, SoAd_GetSoConId() is called to
        retrieve SoConId.
    08: VP(DoIP.dsn.Func0101.EB.SWS_DoIP_00235): Verify that for each of these connections
        SoAd_ReleaseIpAddrAssignment() is called to release the corresponding IP Address.
    09: Call DoIP_ActivationLineSwitch() with active state set to FALSE.
    10: VP(DoIP.dsn.Func0101.EB.ActivationLineState):
        Verify that DoIP_ActivationLineSwitch() with active state set to FALSE produced no calls
        because activation line state is already INACTIVE.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00358</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0101.EB.SWS_DoIP_00234</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>789</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0101.EB.SWS_DoIP_00235</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>790</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0101.EB.ActivationLineState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>788</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_91000</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>358</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1054</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest02003_SoConModeChg_OFFLINE</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest02_ConnectionEstablishment/source/application/DoIP_ConTest02_ConnectionEstablishment.c</sourcefile>
      <sourceline>542</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP_SoConModeChg() is called for a Tcp connection with Mode
    set to a value other then ONLINE, DoIP will reset that connection including the following:
    - unregister and release the socket connection to the related Tester,
    - discard the ongoing diagnostic message processing and,
    - reset the inactivity timer of the given socket connection.
  
Test Object: 
    DoIP_ActivationLineSwitch().
    DoIP_LocalIpAddrAssignmentChg().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Bring the activation line to ACTIVE status.
    02: Call DoIP_SoAdTpStartOfReception() to initiate Tp reception on TcpCon_1.
    03: Send valid routing activation message from Tester_1 (SA_1) on TcpCon_1.
    04: Send diagnostic message generic and diagnostic headers and incomplete payload on TcpCon_1.
    05: Call MainFunction() in a loop up to inactivity timeout threshold.
    06: Call DoIP_SoConModeChg(OFFLINE) for TcpCon_1.
    07: VP(SWS_DoIP_00115, SWS_DoIP_00243): Verify that ongoing diagnostic message processing is
        discarded by calling PduR_DoIPTpRxIndication() with BUFREQ_E_NOT_OK.
    08: VP(SWS_DoIP_00115,SWS_DoIP_00243,SWS_DoIP_00358): Verify that the connection was reset and
        SoAd_CloseSoCon was called with Abort=TRUE.
    09: Call DoIP_SoAdTpStartOfReception() to initiate Tp reception on TcpCon_1.
    10: Send valid routing activation message from Tester_0 (SA_0) on TcpCon_1.
    11: VP(SWS_DoIP_00243): Verify that tester was unregistered  and released for this the socket
        connection in step 06. This is verified by the fact that Tester_0 was successfully
        registered.
    12: Call MainFunction() in a loop up to inactivity timeout threshold.
    13: VP(SWS_DoIP_00243): Verify that the connection was not reset - this verifies that
        inactivity timer was reset in step 06.
    14: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon1 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>308</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00115</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>452</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00358</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1055</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest02004_ActiveLineSwitch_GetSoConId_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest02_ConnectionEstablishment/source/application/DoIP_ConTest02_ConnectionEstablishment.c</sourcefile>
      <sourceline>755</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the transition from DOIP_ACTIVATION_LINE_INACTIVE to
    DOIP_ACTIVATION_LINE_ACTIVE and vice versa in case SoAd_GetSoConId() returns E_NOT_OK.
    In that case SoAd_RequestIpAddrAssignment() / SoAd_ReleaseIpAddrAssignment() and
    SoAd_OpenSoCon() / SoAd_CloseSoCon() will not be called.
  
Test Object: 
    DoIP_ActivationLineSwitch().
    DoIP_ActivationLineSwitch().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_ActivationLineSwitch() with active set to TRUE.
    02: VP(SWS_DoIP_00306): Verify that SoAd_GetSoConId() is called for each connection with
        DoIPRequestAddressAssignment set to TRUE.
    03: VP(SWS_DoIP_00306): Verify that SoAd_GetSoConId() is called for each connection.
    04: VP(SWS_DoIP_00306): Verify that no call to SoAd_RequestIpAddrAssignment nor
        SoAd_OpenSoCon() have been made because SoAd_GetSoConId() is set to return E_NOT_OK.
    05: Call DoIP_ActivationLineSwitch() with active set to FALSE, and then call DoIP_MainFunction()
        EBTEST_LOCAL_IP_ADDRESS_RELEASE_DELAY time to timeout timer and release
        IP addresses of all connections (DoIP_RequestReleaseIpAddrAllConn).
    06: VP(SWS_DoIP_00234): Verify that SoAd_GetSoConId() is called for each connection.
    07: VP(SWS_DoIP_00235): Verify that SoAd_GetSoConId() is called for each connection
        with DoIPRequestAddressAssignment set to TRUE.
    08: VP(SWS_DoIP_00234, SWS_DoIP_00235): Verify that no
        call to SoAd_ReleaseIpAddrAssignment nor SoAd_CloseSoCon() have been made because
        SoAd_GetSoConId() is set to return E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00306</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0101.EB.SWS_DoIP_00234</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>789</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0101.EB.SWS_DoIP_00235</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>790</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1056</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest02005_UpdateHostname_GetSoConId_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest02_ConnectionEstablishment/source/application/DoIP_ConTest02_ConnectionEstablishment.c</sourcefile>
      <sourceline>892</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case when SoAd_GetSoConId() returns E_NOT_OK while DoIP tries to
    retrieve the parameter DoIPUpdateDhcpHostNameOption, as a result of a call
    DoIP_LocalIpAddrAssignmentChg( TCPIP_IPADDR_STATE_ASSIGNED ).
    In such a case update of DHCP host name option will be performed.
  
Test Object: 
    DoIP_LocalIpAddrAssignmentChg().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Bring the activation line to ACTIVE status.
    02: For each configured connection (Tcp and Udp) call DoIP_LocalIpAddrAssignmentChg()
        with State equals TCPIP_IPADDR_STATE_ASSIGNED.
    03: VP(DoIP.EB.SWS_DoIP_00154): Verify that SoAd_ReadDhcpHostNameOption() was not called,
        because SoAd_GetSoConId() is set to return E_NOT_OK. i.e. connection was not found.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1057</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest02006_SoConModeChg_GetSoConId_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest02_ConnectionEstablishment/source/application/DoIP_ConTest02_ConnectionEstablishment.c</sourcefile>
      <sourceline>993</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case when SoAd_GetSoConId() returns E_NOT_OK while DoIP tries to
    locate connection for which DoIP_SoConModeChg() was called.
    In such a case connection state change will not be evaluated.
  
Test Object: 
    DoIP_SoConModeChg().
  
Test Precondition: 
    DoIP initialized.
    Activation line active.
    SoAd_GetSoConId_Stub configured to return E_NOT_OK.
  
Test Execution: 
    01: Call DoIP_SoConModeChg() to set vehicle announcement connection state to ONLINE.
    02: Call DoIP_MainFunction() to elapse DoIPInitialVehicleAnnouncementTime + 1.
    03: VP(SWS_DoIP_00205): Verify that nothing was called because SoAd_GetSoConId() was set
        to return E_NOT_OK.
    04: Call DoIP_SoAdTpStartOfReception() to initiate Tp reception on TcpCon_1.
    05: Call DoIP_SoConModeChg() to set TcpConn_1 connection state to OFFLINE.
    06: VP(SWS_DoIP_00243): Verify that connection was not reset (SoAd_CloseSoCon() not called)
        because SoAd_GetSoConId() was set to return E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>308</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1058</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest02007_InactivityTimer</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest02_ConnectionEstablishment/source/application/DoIP_ConTest02_ConnectionEstablishment.c</sourcefile>
      <sourceline>1102</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that DoIP module maintains an General and Initial inactivity timers
    for each registered TCP connection and that DoIP module closes the connection if
    inactivity timer elapse.
  
Test Object: 
    Inactivity timeout feature.
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() to initiate Tp reception on TcpCon_0.
    02: Call DoIP_MainFunction() DoIPInitalInactivityTimer - 1 times and verify that timer
        has not elapsed.
    03: Call DoIP_MainFunction() to tick one more time so DoIPInitialInactivityTimer is elapsed.
    04: VP(SWS_DoIP_00143, SWS_DoIP_00144,SWS_DoIP_00358): Verify that DoIP module has closed the
        socket connection if no Routing Activations request was received within configured
        DoIPInitialInactivityTime. Connection closed and SoAd_CloseSoCon was called with Abort=TRUE.
    05: Call DoIP_SoAdTpStartOfReception() to initiate Tp reception on TcpCon_0.
    06: Send valid routing activation message from Tester_1 (SA_1) on TcpCon_0.
    07: Call DoIP_MainFunction() EBTEST_GEN_INACTIVITY_TIMEOUT times and verify that timer has
        not elapsed.
    08: Call DoIP_MainFunction() to tick one more time so DoIPGeneralInactivityTimer is elapsed.
    09: VP(SWS_DoIP_00146, SWS_DoIP_00159, SWS_DoIP_00358): Verify that DoIP module has called
        SoAd_CloseSoCon with Abort=TRUE and closed the socket connection if the inactivity timer has
        reached the time configured in DoIPGeneralInactivityTime. This also indicates that the
        DoIPGeneralInactivityTimer has been started in step 06.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00143</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00144</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>453</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00146</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00358</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00159</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1059</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest02008_SoAd_ReadDhcpHostNameOption_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest02_ConnectionEstablishment/source/application/DoIP_ConTest02_ConnectionEstablishment.c</sourcefile>
      <sourceline>1237</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: None.
Test Object: 
    DoIP_LocalIpAddrAssignmentChg().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_ActivationLineSwitch() with active set to TRUE.
    02: Configure SoAd_ReadDhcpHostNameOption stub to return E_NOT_OK.
    03: Call DoIP_LocalIpAddrAssignmentChg() with IdAddrStateType = TCPIP_IPADDR_STATE_ASSIGNED
        for each configured connection.
    04: VP(DoIP.EB.SWS_DoIP_00154): Verify that SoAd_ReadDhcpHostNameOption() was called, because
        DoIPUpdateDhcpHostNameOption is TRUE for all connections.
    05: VP(DoIP.EB.SWS_DoIP_00154): Verify that SoAd_WriteDhcpHostNameOption() was called
        because SoAd_ReadDhcpHostNameOption() returned E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1060</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest02009_LocalIpAddrAssignmentChg_Ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest02_ConnectionEstablishment/source/application/DoIP_ConTest02_ConnectionEstablishment.c</sourcefile>
      <sourceline>1366</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: None.
Test Object: 
    DoIP_LocalIpAddrAssignmentChg().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_ActivationLineSwitch() with active set to TRUE.
    02: Call DoIP_LocalIpAddrAssignmentChg() with State set to TCPIP_IPADDR_STATE_UNASSIGNED.
    03: VP(DoIP.EB.LocalIpAddrAssignmentChg.Ignore): Verify that DoIP has ignored the request.
    04: Call DoIP_LocalIpAddrAssignmentChg() with State set to TCPIP_IPADDR_STATE_ONHOLD.
    05: VP(DoIP.EB.LocalIpAddrAssignmentChg.Ignore): Verify that DoIP has ignored the request.
    06: Call DoIP_LocalIpAddrAssignmentChg() with State set to TCPIP_IPADDR_STATE_ASSIGNED.
    07: VP(DoIP.EB.SWS_DoIP_00154): Verify that SoAd_ReadDhcpHostNameOption() was called.
    08: VP(DoIP.EB.SWS_DoIP_00154): Verify that SoAd_WriteDhcpHostNameOption() was called.

  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.LocalIpAddrAssignmentChg.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1061</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest02010_DiagMsg_NoRoute</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest02_ConnectionEstablishment/source/application/DoIP_ConTest02_ConnectionEstablishment.c</sourcefile>
      <sourceline>1457</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP module receives a diagnostic message with an unknown
    "Source Address", i.e. no Tester (DoIPTesterSA) is configured with received source address,
    DoIP shall send a diagnostic negative acknowledge message with negative acknowledge code
    set to 0x02.
  
Test Object: 
    Diagnostic negative acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    DoIPActivationLine active.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() to initiate Tp reception on TcpCon_1.
    02: Call DoIP_SoAdTpCopyRxData() on TcpCon_1 to provide generic header.
    03: Call DoIP_SoAdTpCopyRxData() on TcpCon_1 to provide diag message with an invalid
        (not configured) Source address.
    04: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    05: VP(SWS_DoIP_00123, SWS_DoIP_00135, SWS_DoIP_00136): Verify that DoIP has generated
        Diagnostic negative acknowledge message, with a swapped source and target addresses
        and negative acknowledge code set to 0x02.
    06: VP(SWS_DoIP_00123,SWS_DoIP_00058): Verify that SoAd_CloseSoCon was called with Abort=FALSE
        if DoIPEnableTcpClosureWithFIN is enabled or with Abort=TRUE if disabled.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00123</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00135</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00136</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0130.EB.SWS_DoIP_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>846</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1062</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest02011_DisconnectTester</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest02_ConnectionEstablishment/source/application/DoIP_ConTest02_ConnectionEstablishment.c</sourcefile>
      <sourceline>1604</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP_DisconnectTester() is called and specified SoConId found,
    connection shall scheduled for closing. The actual closure of a TCP connection shall be
    postponed to the next main function call.
    If abort is TRUE socket connection shall be closed with RST and if abort is FALSE socket
    connection shall be closed with FIN.
  
Test Object: 
    DoIP_DisconnectTester()
    DoIP_MainFunction()
    DoIP_GetSoConIdFromRxPduId()
    DoIP_GetSoConIdFromTxPduId()
  
Test Precondition: 
    DoIP initialized.
    Tester connected.
    DoIP Activation Line Switch is Active.
    Routing Activated for tester SA 140, TcpCon1
  
Test Execution: 
    01: Call DoIP_GetSoConIdFromTxPduId to get SoConId for TCP connection to which PDU is assigned
        i.e. TcpCon1.
    02: VP(DoIP_GetSoConIdFromTxPduId): Verify that SoAd_GetSoConId() was called to retrieve SoConId
        of a TCP connection to which TxPduId (DoIPChannel) was assigned during routing activation.
    03: Call DoIP_GetSoConIdFromRxPduId to get SoConId for TCP connection to which PDU is assigned
        i.e. TcpCon1.
    04: VP(DoIP_GetSoConIdFromRxPduId): Check that SoAd_GetSoConId was called from
        DoIP_GetSoConIdFromRxPduId and that received SoConId is actually TcpCon1-&gt;SoConId.
    05: Configure SoAd_GetSoConId_Stub to return E_NOT_OK and call DoIP_DisconnectTester()
        to close TcpCon1.
    06: VP(DoIP_DisconnectTester): Verify that SoAd_GetSoConId() was called and
        DoIP_DisconnectTester() returned E_NOT_OK since connection with the specified SoConId was
        not found.
    07: Configure SoAd_GetsoConId_Stub to return E_OK and repeat the step 5.
    08: VP(DoIP_DisconnectTester): Check that SoAd_GetSoConId() was called and
        DoIP_DisconnectTester() returned E_OK, indicating that the connection is queued for closing.
    09: Call DoIP_MainFunction(), to perform actual closing of connection.
        DoIP_MainFunction will close connection scheduled for closing.
    10: VP(MainFunctionClosure): Check that reset was performed on desired connection.
    11: Call DoIP_DisconnectTester on same, now closed connection.
    12: VP(DoIP_DisconnectTester): Check that E_NOT_OK is returned and nothing is called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0133.API.DoIP_DisconnectTester</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>847</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0133.MainFunctionClosure</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>848</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0133.API.DoIP_GetSoConIdFromRxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>849</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0133.API.DoIP_GetSoConIdFromTxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>850</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1063</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest02012_ResetInactiveLine</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest02_ConnectionEstablishment/source/application/DoIP_ConTest02_ConnectionEstablishment.c</sourcefile>
      <sourceline>1793</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that DoIP_GetSoConIdFromTxPduId and DoIP_GetSoConIdFromRxPduId shall return
    E_NOT_OK when called and retrieving of SoConId fails. Test case also verifies that when
    activation line is inactive reset of TCP connections will not close connections again.
  
Test Object: 
    DoIP_GetSoConIdFromTxPduId()
    DoIP_GetSoConIdFromRxPduId()
    DoIP_ResetTcpCon()
  
Test Precondition: 
    DoIP initialized.
    DoIP Activation Line Switch is Active.
  
Test Execution: 
    01: Call DoIP_GetSoConIdFromTxPduId on an inactive channel.
    02: VP(DoIP_GetSoConIdFromTxPduId): Check that RetVal is NOT_OK, since specified TxPduId
        (corresponding channel) was not activated..
    03: Call DoIP_GetSoConIdFromRxPduId on an inactive channel.
    04: VP(DoIP_GetSoConIdFromRxPduId): Check that RetVal is NOT_OK, since specified RxPduId
        (corresponding channel) was not activated..
    05: Call DoIP_SoAdTpStartOfReception() to initiate Tp reception on TcpCon1.
    06: Send valid routing activation message from Tester_1 (SA_1) on TcpCon1.
    07: Receive successful response from routing activation.
    08: Call DoIP_ActivationLineSwitch() with active set to FALSE to deactivate line switch.
    09: Call DoIP_SoAdTpRxIndication which in turn will call reset tcp connection but line switch
        will be inactive so SoAd_GetSoConId, SoAd_CloseSoCon,SoAd_OpenSoCon shall not be called.
    10: VP(SWS_DoIP_00058,SWS_DoIP_00358): Verify that nothing was called during reset of Tcp
        connection.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0133.MainFunctionClosure</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>848</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0133.API.DoIP_GetSoConIdFromTxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>850</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0133.API.DoIP_GetSoConIdFromRxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>849</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0130.EB.SWS_DoIP_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>846</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00358</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1064</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest02013_ActivateLineDuringReleaseIpAddresses</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest02_ConnectionEstablishment/source/application/DoIP_ConTest02_ConnectionEstablishment.c</sourcefile>
      <sourceline>1945</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that addresses shall be correctly released and requested when on active line
    DoIP_ActivationLineSwitch(FALSE) is called and release IP addresses timer is started,
    when timer times out DoIP_ProcessTimeout shall start releasing of IP addresses,
    interrupt will activate line again (call DoIP_ActivationLineSwitch(TRUE)) before releasing of
    addresses is finished. Addresses shall be requested again because of unknown state of IP
    addresses after interrupt.
  
Test Object: 
    DoIP_ActivationLineSwitch()
    DoIP_MainFunction()
    DoIP_ProcessTimeout()
    DoIP_RequestReleaseIpAddrAllConn()
  
Test Precondition: 
    DoIP initialized.
    DoIP Activation Line Switch is Active.
  
Test Execution: 
    01: Call DoIP_ActivationLineSwitch() with active set to FALSE to close connections and start IP
        addresses release timer.
    02: VP(SWS_DoIP_00234): Check that connections are closed.
    03: Configure call-out of SoAd_ReleaseIpAddrAssignment_Stub. Configured call-out will
        in the first pass call DoIP_ActivationLineSwitch() with active set to TRUE
        as if it happened during interrupt.
    04: Call DoIP_MainFunction to start IP address release timer and repeat calling until
        timer timeouts.
    05: VP(SWS_DoIP_00235): Check that timeout occurred and that SoAd_GetSoConId() and
        SoAd_ReleaseIpAddrAssignment() are called for the first connection.
        Also verify that next connection release is started before interrupt occurred.
    06: VP (SWS_DoIP_00306): Check that during interrupt DoIP_ActivationLineSwitch() with active set to
        TRUE was called and addresses were correctly assigned and connections were opened.
    07: VP(SWS_DoIP_00235): Check that release of addresses was continued after
        interrupt.
    08: VP(): Check that addresses were assigned again after release was finished cause
        interrupt left unknown state of addresses.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0101.EB.SWS_DoIP_00234</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>789</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0101.EB.SWS_DoIP_00235</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>790</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00306</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1065</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest02014_ActivateInactiveLineBeforeTimeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest02_ConnectionEstablishment/source/application/DoIP_ConTest02_ConnectionEstablishment.c</sourcefile>
      <sourceline>2134</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies addresses are correctly requested when on active line
    DoIP_ActivationLineSwitch(FALSE) is called and release IP addresses timer is started,
    before timeout occurs line is activated again DoIP_ActivationLineSwitch(TRUE)
    connections shall be correctly opened and requested, and when timeout occurs nothing
    shall be released.
  
Test Object: 
    DoIP_ActivationLineSwitch()
    DoIP_MainFunction()
    DoIP_ProcessTimeout()
    DoIP_RequestReleaseIpAddrAllConn()
  
Test Precondition: 
    DoIP initialized.
    DoIP Activation Line Switch is Active.
  
Test Execution: 
    01: Call DoIP_ActivationLineSwitch() with active set to FALSE to close connections and set flag
        to start IP addresses release timer.
    02: VP(SWS_DoIP_00234): Check that connections are closed meaning that release addresses timer
        start is requested and shall be started during next DoIP_MainFunction.
    03: Call DoIP_MainFunction to start IP address release timer and repeat calling
        (EBTEST_LOCAL_IP_ADDRESS_RELEASE_DELAY-1 number of times) until before timer timeouts.
        If EBTEST_LOCAL_IP_ADDRESS_RELEASE_DELAY == 1U then skip step 03 since timeout will happen
        in next DoIP_MainFunction() call.
    04: Check that nothing has yet happened (no call has been made).
    05: Call DoIP_ActivationLineSwitch() with active set to TRUE to activate line again before timeout occurs.
    06: VP(SWS_DoIP_00306): Check that addresses are assigned correctly.
    07: VP(SWS_DoIP_00306): Check that connections are opened.
    08: Call DoIP_MainFunction one more time for timeout of release IP address to occur.
    09: VP(DoIP.dsn.Func0101.EB.ActivationLineState): Verify that no call has been made and
        no addresses were released during timeout.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0101.EB.SWS_DoIP_00234</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>789</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00306</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1066</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest02015_DisconnectTester_ResetTcpCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest02_ConnectionEstablishment/source/application/DoIP_ConTest02_ConnectionEstablishment.c</sourcefile>
      <sourceline>2308</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that DoIP_DisconnectTester() will return E_OK if the connection with a
    specified SoConId got reset during DoIP_DisconnectTester() call.
  
Test Object: 
    DoIP_DisconnectTester()
  
Test Precondition: 
    DoIP initialized.
    Tester connected.
    DoIP Activation Line Switch is Active.
    Routing Activated for tester SA 140, TcpCon1.
  
Test Execution: 
    01: Call DoIP_GetSoConIdFromTxPduId() to get SoConId for TCP connection to which PDU is assigned
        i.e. TcpCon1.
    02: Configure SoAd_GetSoConId() stub callout which resets TcpCon_1, by calling
        DoIP_SoAdTpRxIndication(). This way we are testing the use case when connection gets reset
        during the call to DoIP_DisconnectTester().
    03: Call DoIP_DisconnectTester() to initiate disconnecting TcpCon_1.
    04: VP(): Verify that DoIP_DisconnectTester() returned E_OK.
    05: Call DoIP_MainFunction(), to perform actual connection closing.
    06: VP(): Verify that the sequence SoAd_GetSoConId(), SoAd_CloseSoCon() and SoAd_OpenSoCon()
        was not called indicating that the TcpCon_1 connection was not scheduled for closing
        since it was already closed during DoIP_DisconnectTester().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0133.API.DoIP_DisconnectTester</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>847</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1067</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ConTest03000_Udp_GenHeaderNack_INCORRECT_PATTERN</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>168</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if an invalid protocol information in DoIP header is used, NACK code
    0x00 is sent and payload type 0x0000.
  
Test Object: 
    DoIP_SoAdIfRxIndication().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to send the DoIP message with invalid protocol version.
    02: VP(DoIP.SWS_DoIP_00012, DoIP.SWS_DoIP_00198):
        Verify that SoAd_IfTransmit()  was called with the  correct TxPdu.
    03: VP(DoIP.SWS_DoIP_00012, DoIP.SWS_DoIP_00014, DoIP.SWS_DoIP_00198):
        Verify that the complete message have been transmitted, with NACK code 0x01 and
        payload type 0x0000.
    04: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00198</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>276</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1068</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03001_Udp_GenHeaderNack_UNKNOWN_PL_TYPE</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>276</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if an invalid payload type in DoIP header is used, NACK code 0x01 will
    be sent.
  
Test Object: 
    DoIP_SoAdIfRxIndication().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Open all socket connections.
    02: Call DoIP_SoAdIfRxIndication() to send the DoIP message with invalid payload type.
    03: VP(DoIP.SWS_DoIP_00016, SWS_DoIP_00198):
        Verify that SoAd_IfTransmit() was called with the correct TxPdu.
    04: VP(DoIP.SWS_DoIP_00016, DoIP.SWS_DoIP_00198):
        Verify that the complete message have been transmitted, with NACK code 0x01 and
        payload type 0x0000.
    05: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00198</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>276</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1069</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03002_Udp_GenHeaderNack_INVALID_PL_LENGTH_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>381</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if an invalid payload length for the specific payload type, NACK code
    0x04 will be sent.
  
Test Object: 
    DoIP_SoAdIfRxIndication().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Open all socket connections.
    02: Call DoIP_SoAdIfRxIndication() to send the DoIP message with invalid payload length.
    03: VP(DoIP.SWS_DoIP_00019): Verify that SoAd_IfTransmit() was called for correct TxPdu.
    04: VP(DoIP.SWS_DoIP_00019): Verify that NACK code 0x04 was sent.
    05: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1070</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03003_Udp_GenHeaderNack_INVALID_PL_LENGTH_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>483</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if an invalid payload length for the specific payload type, NACK code
    0x04 will be sent.
  
Test Object: 
    DoIP_SoAdIfRxIndication().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Open all socket connections.
    02: Call DoIP_SoAdIfRxIndication() to send the DoIP message with invalid payload length.
    03: VP(DoIP.SWS_DoIP_00019): Verify that SoAd_IfTransmit() was called for correct TxPdu.
    04: VP(DoIP.SWS_DoIP_00019): Verify that NACK code 0x04 was sent.
    05: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1071</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03004_Udp_GenHeaderNack_INVALID_PL_LENGTH_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>585</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if an invalid payload length for the specific payload type, NACK code
    0x04 will be sent.
  
Test Object: 
    DoIP_SoAdIfRxIndication().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Open all socket connections.
    02: Call DoIP_SoAdIfRxIndication() to send the DoIP message with invalid payload length.
    03: VP(DoIP.SWS_DoIP_00019): Verify that SoAd_IfTransmit() was called for correct TxPdu.
    04: VP(DoIP.SWS_DoIP_00019): Verify that NACK code 0x04 was sent.
    05: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00068</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1072</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03005_VehicleIdentificationRequest</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>687</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0001 is received on the
    configured Udp connection, DoIP module shall respond with a Vehicle identification response/
    Vehicle announcement message fulfilling the following requirements:
      - The "LA" of a vehicle identification response/vehicle announcement message shall contain the
    configured DoIPLogicalAddress(0).
    - The "EID" of a vehicle identification response/vehicle announcement message shall contain the
    configured DoIPEID(400000).
    - The "GID" of a vehicle identification response/vehicle announcement message shall contain the
    configured DoIPGID(500000).
    - The "VIN" of a vehicle identification response/vehicle announcement message shall contain the
    configured DoIPVinInvalidityPattern.(0).
    - The "Further action" byte of a vehicle identification response/vehicle announcement message
    shall contain the value 0x00, if no DoIPRoutingActivation with DoIPRoutingActivationNumber
    equal to 0xE0 is configured.
  
Test Object: 
    Vehicle announcement messages.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
  
Test Execution: 
    01: VP(DoIP.SWS_DoIP_00059, SWS_DoIP_00015): Call DoIP_SoAdIfRxIndication() with message
        payload type = 0x0001(vehicle identification request) and default protocol type (0xFF).
    02: VP(SWS_DoIP_00060): Verify that SoAd_IfTransmit() was called to send Vehicle
        identification response
    03: VP(SWS_DoIP_00072_UserGetVin_NotDefined, SWS_DoIP_00073, SWS_DoIP_00075,
        SWS_DoIP_00078, SWS_DoIP_00083, SWS_DoIP_00086, SWS_DoIP_00015):
        Verify that the expected Vehicle identification response message was sent.
    04: Call DoIP_SoAdIfTxConfirmation().
    05: VP(DoIP.dsn.Func0124.UdpReleaseRemoteAddr.IfTxConfirmation): Verify that SoAd_ReleaseRemoteAddr() was
        called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00072_UserGetVin_NotDefined</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R23-11.SWS_DoIP_00075</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>458</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.IfTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>710</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1073</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03006_VehicleAnnouncement</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>812</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the first Vehicle announcement message will be sent after
    DoIPInitialVehicleAnnouncementTime and will be repeated
    DoIPVehicleAnnouncementCount(2) times, with a delay of DoIPVehicleAnnouncementInterval.
  
Test Object: 
    Vehicle announcement messages.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
  
Test Execution: 
    01: Call DoIP_MainFunction() to elapse DoIPInitialVehicleAnnouncementTime.
    02: VP(SWS_DoIP_00205): Verify that nothing was transmitted because vehicle announcement
        connection is OFFLINE.
    03: Call DoIP_SoConModeChg() to set vehicle announcement connection state to ONLINE.
    04: Call DoIP_MainFunction() to tick EBTEST_INC01_VEH_ANN_INIT_TIMEOUT - 1U times.
    05: VP(SWS_DoIP_00071): Verify that nothing was called, i.e. timer has not expired.
    06: Call DoIP_MainFunction() one tick one more time.
    07: Verify that SoAd_IfTransmit() was called.
    08: VP(DoIP.EB.SWS_DoIP_00071): Verify that the first Vehicle announcement message was
        sent after DoIPInitialVehicleAnnouncementTime.
    09: Call DoIP_MainFunction() to tick EBTEST_INC01_VEH_ANN_TIMEOUT - 1U times.
    10: VP(SWS_DoIP_00071): Verify that nothing was called, i.e. timer has not expired.
    11: Call DoIP_MainFunction() to tick one more time.
    12: VP(DoIP.EB.SWS_DoIP_00071): Verify that SoAd_IfTransmit() was called and that the second
        vehicle announcement message was sent after DoIPVehicleAnnouncementInterval.
    13: Call DoIP_MainFunction() to elapse DoIPVehicleAnnouncementInterval.
    14: VP(DoIP.EB.SWS_DoIP_00071): Verify that nothing was called - vehicle announcement
        message was already transmitted DoIPVehicleAnnouncementCount (2) times.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1074</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03007_VehicleIdentificationRequestEID</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>958</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies:
    - if a DoIP message with payload Type 0x0002 is received on the configured DoIPUDPConnection,
    the DoIP module shall further process the message.
    - the expected payload length for vehicle identification request message with payload type
    0x0002 shall be exactly 6.
    - the received "EID" 6 payload data bytes shall be compared to the configured DoIPEID.
    If they match the DoIP module shall respond with a vehicle identification response/vehicle
    announcement message with payload type 0x0004.
  
Test Object: 
    Vehicle announcement messages.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Received "EID" is the same as the configured DoIPEID.
  
Test Execution: 
    01: VP(DoIP.SWS_DoIP_00063): Call DoIP_SoAdIfRxIndication() with message payload type =
        0x0002(Vehicle identification request message with EID) which has payload length = 6 bytes.
    02: Verify that SoAd_IfTransmit() was called to send a vehicle identification response, with
        payload type 0x0004.
    03: Confirm vehicle identification response transmission.
    04: Call DoIP_SoConModeChg() to set vehicle announcement connection state to ONLINE.
    05: Call DoIP_MainFunction() to tick EBTEST_INC01_VEH_ANN_INIT_TIMEOUT - 1U times.
    06: Verify that nothing was called, i.e. timer has not expired.
    07: Call DoIP_MainFunction() one tick one more time.
    08: VP(DoIP.SWS_DoIP_00064): Verify that SoAd_IfTransmit() was called.
    09: VP(DoIP.SWS_DoIP_00064, DoIP.SWS_DoIP_00066):
        Verify that the vehicle announcement message was sent after
        DoIPInitialVehicleAnnouncementTime(2).
    10: Confirm vehicle announcement transmission.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1075</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03008_VehicleIdentificationRequestEID_NOTOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>1109</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies:
    - If the received EID does not match the configured EID then the DoIP module shall not respond
    with a vehicle identification response.
  
Test Object: 
    Vehicle identification.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Received "EID" is different from the configured DoIPEID.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message with incorrect EID.
    02: VP(DoIP.SWS_DoIP_00066, DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse):
        Verify that SoAd_IfTransmit() was not called to respond with
        vehicle identification response. Instead the UDP socket gets immediately released.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>712</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1076</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03009_VehicleIdentificationRequestVIN</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>1188</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies:
    - if a DoIP message with payload Type 0x0003 is received on the configured DoIPUDPConnection,
    the DoIP module shall further process the message.
    - the expected payload length for vehicle identification request message with payload type
    0x0003, shall be exactly 17.
    - if a user has not provided a callback function for retrieving VIN (as defined in
      [DoIP.EB.User_DoIPGetVin]), no comparison of VIN is made - Vehicle identification response
      message is generated according to SWS_DoIP_00072.
  
Test Object: 
    Vehicle announcement messages.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0003.
    02: VP(SWS_DoIP_00068, SWS_DoIP_00069, SWS_DoIP_00070_UserGetVin_NotDefined):
        Verify that vehicle identification response message has been transmitted.
    03: Call DoIP_SoAdIfTxConfirmation().
    04: Call DoIP_SoConModeChg()  to set vehicle announcement connection state to ONLINE.
    05: Call DoIP_MainFunction() to tick EBTEST_INC01_VEH_ANN_INIT_TIMEOUT - 1U times.
    06: Verify that nothing was called, i.e. timer has not expired.
    07: Call DoIP_MainFunction() tick one more time to trigger timeout.
    08: VP(DoIP.SWS_DoIP_00069): Verify that SoAd_IfTransmit() was called.
    09: VP(DoIP.SWS_DoIP_00069):
        Verify that the vehicle announcement message was sent after
        DoIPInitialVehicleAnnouncementTime(2s = 2000 MainFunctions).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00068</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00069</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00070_UserGetVin_NotDefined</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1077</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03010_RoutingActivation</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>1336</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies:
    - the expected payload length for Routing Activation Request Message with payload type 0x0005
      shall be exactly 7.
    - if a routing activation request message is received with a valid DoIP header, the DoIP module
      shall process further to SWS_DoIP_00103, if the field "Source address" matches a configured
      DoIPTesterSA( 7654 ).
    - if the function DoIP_SoAdTpStartOfReception() is called with TpSduLength set to 0, the DoIP
      module shall fill the bufferSizePtr the available buffer size in the DoIP for the reception
      of the TCP message, lock the according buffer for other TCP connections and return BUFREQ_OK.
    - if the function DoIP_SoAdTpCopyRxData() is called at the start of a new DoIP message with
      PduInfoPtr.SduLength not set to 0 and the DoIP TCP buffer is big enough to copy all the
      data, the DoIP module shall copy the received data to the internal TCP buffer, return the
      parameter bufferSizePtr set to the available buffer after copying and return BUFREQ_OK.
  
Test Object: 
    Routing activation request.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() with TpSduLength set to 0.
    02: VP(DoIP.SWS_DoIP_00207):
        Verify that BufferSizePtr returned is 8(generic header) and BUFREQ_OK was returned.
    03: Call DoIP_SoAdTpCopyRxData() with a segment of routing activation request generic header.
    04: VP(DoIP.EB.DoIPReceiveSegmented_TcpHeader, Rx_Offline_2_Rx_Ready):
        Verify that BUFREQ_OK was returned and BufferSizePtr returned is generic header size - size
        of received segment.
        This also verifies that the connection Rx state machine was in the state RX_READY. Since
        after initialization connection was in the state RX_OFFLINE, it is verified that the call to
        DoIP_SoAdTpStartOfReception() performed transition RX_OFFLINE -&gt; RX_READY.
    05: Call DoIP_SoAdTpCopyRxData() with another segment of routing activation req. generic header.
    06: VP(DoIP.EB.DoIPReceiveSegmented_TcpHeader, Rx_Ready_2_Rx_Ready):
        Verify that BUFREQ_OK was returned and BufferSizePtr returned is generic header size -
        sizes of received segments.
        This processing was done in RX_READY state, as described in step 04.
        Since Generic header is not yet completed (BufferSizePtr contains the size of a header yet
        to be received), the connection remains in RX_READY state (transition RX_READY -&gt;
        RX_READY).
    07: Call DoIP_SoAdTpCopyRxData() with last segment of routing activation req generic header.
    08: VP(DoIP.SWS_DoIP_00209, Rx_Diag_Header_2_Rx_Diag_Header):
        Verify that BufferSizePtr returned is 7(payload length) and BUFREQ_OK was returned.
        This also verifies the transition RX_READY -&gt; RX_DIAG_HEADER.
    09: Call DoIP_SoAdTpCopyRxData() with a segment of routing activation request payload.
    10: VP(DoIP.EB.DoIPReceiveSegmented_RoutingActMsg, Rx_Route_Act_2_Rx_Route_Act):
        Verify that BUFREQ_OK was returned and BufferSizePtr returned is
        DOIP_PL_LENGTH_ROUTE_ACT_REQ - size of received segment and there was no state transition in
        state RX_ROUTE_ACT.
    11: Call DoIP_SoAdTpCopyRxData() with last segment of routing activation request payload.
    12: VP(DoIP.EB.DoIPReceiveSegmented_RoutingActMsg, Tx_Idle_2_Tx_Route_Act): Verify that
        BUFREQ_OK was returned and BufferSizePtr returned 0 indicating connection RX side is blocked
        until acknowledge confirmation is received and that state transition
        TX_IDLE to TX_ROUTE_ACT has occurred.
    13: VP(DoIP.SWS_DoIP_00220): Verify that SoAd_TpTransmit() was called with correct
        Socket Id and SoAdSrcPduInfoPtr.SduLength to the size of a routing activation response.
    14: Call DoIP_SoAdTpCopyTxData().
    15: VP(DoIP.SWS_DoIP_00225):
        Verify that AvaliableDataPtr after the copy process is 0 and returned value is BUFREQ_OK.
    16: VP(DoIP.SWS_DoIP_00219): Verify that routing activation message payload has been
        received in subsequent calls to DoIP_SoAdTpCopyRxData(steps 09, 11), and that request
        message was processed which resulted in a routing activation response message generation
        and transmission.
    17: Call DoIP_SoAdTpTxConfirmation() to confirm routing activation response.
    18: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (on channels 0 and 2) to verify that connection is operational.
    19: Call DoIP_SoAdTpRxIndication() to close the connection.
    20: VP(DoIP.EB.TcpRxSM.Rx_Ack_Conf_Wait_2_Rx_Offline,
        DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_2_Tx_Offline): Verify that transition to state OFFLINE has
        occurred.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00116</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.RoutingActivationType.MSG</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00117.Length7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00118</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00207</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>283</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>285</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00225</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>297</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.DoIPReceiveSegmented_TcpHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.DoIPReceiveSegmented_RoutingActMsg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>292</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Idle_2_Tx_Route_Act</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>785</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Offline_2_Rx_Ready</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>751</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Ack_Conf_Wait_2_Rx_Offline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>754</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_2_Tx_Offline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>770</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Diag_Header_2_Rx_Diag_Header</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>738</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Route_Act_2_Rx_Route_Act</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>758</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Ready</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>746</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1078</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03011_DiagnosticMessageReceive</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>1629</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies:
    - the expected payload length for diagnostic messages with payload type 0x8001 shall be at
      least 5 bytes.
    - if the PduR accepted all Data, the DoIP module shall send a diagnostic acknowledge message.
    - if the DoIP module needs to send a diagnostic acknowledge message the "Source Address" shall
      be set to the according "TargetAddress" of the received message.
    - if the DoIP module needs to send a diagnostic acknowledge message the "Target Address" shall
      be set to the according "SourceAddress" of the received message.
    - if the DoIP module has received sufficient data to evaluate the DoIP header, the payload type
      is diagnostic message and the routing was already activated for the
      SourceAddress/TargetAddress combination, the DoIP module shall call the
      PduR_DoIPStartOfReception() with the according id set to the DoIPPduRRxPduId matching the
      SourceAddress/TargetAddress combination of the diagnostic message, set the info.SduLength to
      the already received diagnostic data, set the info-SduDataPtr to the buffer containing the
      received diagnostic data and set the TpSduLength to the total size of the diagnostic message
      extracted from DoIP Header.
    - if PduR_DoIPStartOfReception() returns BUFREQ_OK the reception was accepted and the DoIP
      module shall forward already received data of the diagnostic message to the upper layer by
      subsequent calls to PduR_DoIPCopyRxData.
    - if all diagnostic data was successfully forwarded to the PduR the DoIP module shall call the
      PduR_DoIPTpRxIndication() with the according PduId and the result set to E_OK.
  
Test Object: 
    Diagnostic messages.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing activation done.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() to indicate reception of DoIP generic header - a part of
        Diagnostic message.
    02: Set PduInfo to a segment of Diagnostic message header.
    03: Call DoIP_SoAdTpCopyRxData() to indicate reception of a part of Diagnostic message header.
    04: VP(DoIP.EB.DoIPReceiveSegmented_TcpHeader):  Verify that BUFREQ_OK was returned and
        BufferSizePtr returned is diagnostic header size - size of received segment.
    05: Call DoIP_SoAdTpCopyRxData() to indicate reception of 2nd part of Diagnostic message header.
    06: VP(DoIP.EB.DoIPReceiveSegmented_TcpHeader):  Verify that BUFREQ_OK was returned and
        BufferSizePtr returned is diagnostic header size - size of received segments.
    07: Call DoIP_SoAdTpCopyRxData() to indicate reception of last part of Diagnostic message header.
    08: VP(DoIP.EB.DoIPReceiveSegmented_TcpHeader):  Verify that BUFREQ_OK was returned and
        BufferSizePtr returned zero.
    09: VP(DoIP.SWS_DoIP_00212, DoIP.SWS_DoIP_00260): Verify that
        PduR_DoIPStartOfReception() was called with correct id, TpSduLength( 18 - 12 = 6 ),
        BufferSizePtr = 0 and RetVal = BUFREQ_OK.
    10: Call DoIP_SoAdTpCopyRxData() with a Diagnostic message payload (6 bytes), and verify it
        returned BUFREQ_OK.
    11: VP(DoIP.SWS_DoIP_00218, DoIP.SWS_DoIP_00128): Verify that PduR_DoIPCopyRxData()
        was called and message payload is successfully delivered to PduR.
    12: Verify that SoAd_TpTransmit was called to transmit the diagnostic acknowledge message
        (size=13).
    13: VP(DoIP.SWS_DoIP_00221): Verify that PduR_DoIPTpRxIndication was called and returned
        BUFREQ_OK.
    14: Call DoIP_SoAdTpCopyTxData() to read-out acknowledge message generated by DoIP.
    15: VP(DoIP.SWS_DoIP_00129, DoIP.SWS_DoIP_00131, DoIP.SWS_DoIP_00134,
        Tx_Diag_Ack_Nack_Start_2_Tx_Diag_Ack_Nack): Verify that the correct diagnostic acknowledge
        message was sent and that state transition TX_DIAG_ACK_NACK_START - TX_DIAG_ACK_NACK has
        occurred.
    16: Call DoIP_SoAdTpTxConfirmation().
    17: VP(Tx_Diag_Ack_Nack_2_Tx_Idle): Verify that state transition TX_DIAG_ACK_NACK to TX_IDLE has
        occurred.
    18: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00131</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00132</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00133</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>287</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00218</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>291</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00260</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>321</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>294</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00134</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.DoIPReceiveSegmented_TcpHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_2_Tx_Idle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>771</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_Start_2_Tx_Diag_Ack_Nack</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>772</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1079</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03012_DiagnosticMessageTransmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>1929</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the correct functioning of transmit diagnostic messages.
  
Test Object: 
    DoIP_TpTransmit().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_TpTransmit() indicate a transmission and DoIP_MainFunction() process the
        transmission request.
    02: VP(DoIP.dsn.Func0131.EB.SWS_DoIP_00230): Verify that SoAd_TpTransmit() was called with
        correct TxPduId and returned the correct bufferSize(18).
    03: Call DoIP_SoAdTpCopyTxData().
    04: VP(DoIP.SWS_DoIP_00232, DoIP.SWS_DoIP_00173, Tx_Diag_Msg_Start_2_Tx_Diag_Msg):
        Verify that the complete message was copied correctly, including user data payload which is
        identical to the data provided by PduR and that state transition TX_DIAG_MSG_START -
        TX_DIAG_MSG has occurred.
    05: VP(DoIP.SWS_DoIP_00233, DoIP.SWS_DoIP_00254): Verify that PduR_DoIPCopyTxData()
        was called with correct parameters.
    06: Call DoIP_SoAdTpTxConfirmation().
    07: VP(DoIP.SWS_DoIP_00233, DoIP.SWS_DoIP_00229, Tx_Diag_Msg_2_Tx_Idle): Verify that
        PduR_DoIPTpTxConfirmation() was called and state transition TX_DIAG_MSG to TX_IDLE.
    08: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00173</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>300</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0131.EB.SWS_DoIP_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>845</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00254</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>317</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Diag_Msg_2_Tx_Idle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>776</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Diag_Msg_Start_2_Tx_Diag_Msg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>777</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1080</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03013_CopyRxData_SduLength_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>2093</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies:
    - if DoIP_SoAdTpCopyRxData() is called with PduInfoPtr.SduLength set to 0, directly after
    DoIPSoAdTpStartOfReception succeeded, the DoIP module shall return in the parameter
    bufferSizePtr the length to the maximum necessary bytes to evaluate the DoIP relevant data for
    routing of diagnostic data and BUFREQ_OK.
  
Test Object: 
    DoIP_SoAdTpCopyRxData()
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing activation done.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() with SduLength = 0, directly after DoIPSoAdTpStartOfReception
        succeeded.
    02: VP(DoIP.SWS_DoIP_00208): Verify that BufferSizePtr = 8U.
    03: VP(DoIP.SWS_DoIP_00208): Verify that it returned BUFREQ_OK.
    04: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>284</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1081</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03014_CopyTxData_SduLength_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>2181</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP_SoAdCopyTxData() is called after a successful call to
    SoAd_TpTransmit for the use case "diagnostic message" and PduInfoPtr.SduLength is set to 0,
    then DoIP shall return BUFREQ_OK and set the parameter availableDataPtr to the length of
    created generic and diagnostic headers plus the size of available payload.
  
Test Object: 
    DoIP_SoAdTpCopyTxData().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to indicate a transmission and DoIP_MainFunction() to process the
        transmission request.
    02: VP(): Verify that SoAd_TpTransmit() was successfully called.
    03: Call DoIP_SoAdTpCopyTxData() with SduLength = 0.
    04: VP(): Verify that BUFREQ_OK was returned and total available data size is set to
              the size of generic and diagnostic headers plus available payload size (18).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0131.EB.SWS_DoIP_00231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>844</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1082</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03016_CloseTcpConnection_RxIncomplete</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>2275</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a diagnostic message reception is in progress and
    DoIP_SoAdTpRxIndication() is called, DoIP shall call PduR_DoIPTpRxIndication() with
    E_NOT_OK and the TCP connection will reset.
  
Test Object: 
    DoIP_SoAdTpRxIndication
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing activation done.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() to receive the generic header.
    02: Call DoIP_SoAdTpCopyRxData() to receive the diagnostic message header.
    03: Call DoIP_SoAdTpRxIndication(E_OK) to indicate a lost connection, but no data
        is left in SoAd queue.
    04: VP(): Verify that PduR_DoIPTpRxIndication() is called with result E_NOT_OK,
              indication that message reception was incomplete.
    05: VP(): Verify that TCP connection got closed and reopened again.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1083</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03017_QueueTxRequests</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>2395</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies the process of queuing of Tx requests during DoIP_TpTransmit() and
    their processing in DoIP_MainFunction().
  
Test Object: 
    DoIP_TpTransmit().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Start Routing activation for Tcp connection 0.
    02: VP(DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Ack_Conf_Wait,
           DoIP.EB.TcpRxSM.Rx_Ack_Conf_Wait_2_Rx_Ready): Verify that state transitions:
        RX_READY - RX_ACK_CONF_WAIT - RX_READY were successful.
    03: Receive a diagnostic message. TCP Tx connection is occupied with sending diagnostic message
        acknowledgment.
    04: VP(DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Diag_Header, DoIP.EB.TcpRxSM.Rx_Diag_Header_2_Rx_Diag_Msg,
           DoIP.EB.TcpRxSM.Rx_Diag_Msg_2_Rx_Ack_Conf_Wait): Verify that state transitions:
           RX_READY - RX_DIAG_HEADER - RX_DIAG_MSG - RX_ACK_CONF_WAIT were successful.
    05: Call DoIP_TpTransmit() for DoIP channel 2.
    06: VP(SWS_DoIP_00230): Verify that the API returned E_OK, indicating that Tx request for DoIP
        channel 2 has been successfully queued.
    07: Call DoIP_TpTransmit() for DoIP channel 0.
    08: VP(SWS_DoIP_00230): Verify that the API returned E_OK, indicating that Tx request for DoIP
        channel 0 has been successfully queued.
    09: Call DoIP_MainFunction().
    10: VP(ProcessQueuedTxRequests): Verify that no transmission is started since TCP connection
        is busy.
    11: Finish diagnostic message positive acknowledge.
    12: Call DoIP_SoAdTpTxConfirmation() to finish diagnostic acknowledgment transmission and make
        state transition from RX_ACK_CONF_WAIT to RX_READY.
    13: VP(DoIP.EB.TcpRxSM.Rx_Ack_Conf_Wait_2_Rx_Ready): Verify that no further action occurred.
    14: Call DoIP_MainFunction().
    15: VP(ProcessQueuedTxRequests): Verify that Tx request in the correct order was used to start
        next transmission.
    16: Finish transmission.
    17: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    18: Call DoIP_MainFunction().
    19: VP(ProcessQueuedTxRequests): Verify that Tx request in the correct order was used to start
        next transmission.
    20: Call DoIP_SoAdTpCopyTxData() to fetch the transmitted message.
    21: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    22: Call DoIP_MainFunction().
    23: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0131.EB.SWS_DoIP_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>845</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0131.ProcessQueuedTxRequests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>843</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Ack_Conf_Wait</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>749</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Ack_Conf_Wait_2_Rx_Ready</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>752</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Diag_Header</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>741</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Diag_Header_2_Rx_Diag_Msg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>737</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Diag_Msg_2_Rx_Ack_Conf_Wait</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>736</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1084</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03018_RoutActResp_SUCCESS_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>2667</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when routing activation request message is received and all checks
    have successfully passed, DoIP module shall send a routing activation response message with the
    activation response code set to 0x10.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Send routing activation request with the expected (configured) values of source address
        and activation number.
    02: VP(): Verify that DoIP has generated routing activation response message, with a correct
        parameters and routing activation response code set to 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
    03: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1085</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03019_RoutActResp_NACK_WRONG_SRC</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>2762</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when routing activation request message is received with a valid
    source address but the connection this routing activation was received on is already
    registered to another source address, the DoIP module shall send routing activation response
    message with the routing activation response code set to 0x02.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a socket connection 0, with a DoIPTesterSA = 7654U.
  
Test Execution: 
    01: Send routing activation request on the TCP socket connection 0 with a SA set to 140 -
        a connection that has already activated routing with a different source address.
    02: VP(DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Route_Act, Rx_Route_Act_2_Rx_Ack_Conf_Wait,
        Tx_Route_Act_2_Tx_Offline): Verify that routing activation was successful and state
        transitions RX_READY - RX_ROUTE_ACT - RX_ACK_CONF_WAIT as well as TX_ROUTE_ACT - TX_OFFLINE
        have occurred.
    03: VP(SWS_DoIP_00106): Verify that DoIP has generated Routing activation response message, with
        a correct parameters and routing activation response code set to
        0x02 (DOIP_ROU_ACT_RESP_WRONG_SRC) and TCP connection was closed by calling SoAd_CloseSoCon()
        with parameter Abort set to FALSE in case DoIPEnableTcpClosureWithFIN was enabled,
        otherwise TRUE.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Route_Act</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>748</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Route_Act_2_Rx_Ack_Conf_Wait</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>759</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Route_Act_2_Tx_Offline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>784</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1086</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03020_RoutActResp_NACK_UNKNOWN_SRC</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>2893</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when routing activation request message is received with a
    source address that does not match any of configured DoIPTesterSA, DoIP module shall send back
    routing activation response message with the routing activation response code set to 0x00.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Send routing activation request on the TCP socket connection 0 with a SA set to 0xFFFF -
        a value not configured as DoIPTesterSA.
    02: VP(): Verify that DoIP has generated Routing activation response message, with a correct
        parameters and routing activation response code set to 0x00 (DOIP_ROU_ACT_RESP_UNKNOWN_SRC).
        Also verify that SoAd_CloseSoCon was called with Abort=FALSE if DoIPEnableTcpClosureWithFIN
        is enabled or with Abort=TRUE if disabled.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1087</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03021_RoutActResp_NACK_UNKNOWN_SRC_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>2981</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when routing activation message is received for the second time
    on a Tcp connection with already registered Source address, DoIP shall check if the received SA
    is valid (configured) prior further checks.
    New request is received with a non configured DoIPTesterSA and the DoIP shall send back routing
    activation response message with the routing activation response code set to 0x00.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a socket connection 0, with a DoIPTesterSA = 7654U.
  
Test Execution: 
    01: Send routing activation request on the TCP socket connection 0 with a SA set to 0xFFFF -
        a value not configured as DoIPTesterSA and connection already has activated routing with
        a different source address.
    02: VP():
        Verify that DoIP has generated Routing activation response message, with
        a correct parameters and routing activation response code set to
        0x00 (DOIP_ROU_ACT_RESP_UNKNOWN_SRC) and TCP connection was closed by calling SoAd_CloseSoCon()
        with parameter Abort set to FALSE in case DoIPEnableTcpClosureWithFIN was enabled,
        otherwise TRUE.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1088</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03022_RoutActResp_NACK_UNKNOWN_ACT_TYPE</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>3099</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when routing activation request message is received with an
    invalid activation type, DoIP module shall send back routing activation response message
    with the routing activation response code set to 0x06.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Send routing activation request on the TCP socket connection 0 with a SA set to 0xFFFF -
        a value not configured as DoIPTesterSA.
    02: VP(): Verify that DoIP has generated Routing activation response message, with a correct
        parameters and routing activation response code set to 0x00
        (DOIP_ROU_ACT_RESP_UNKNOWN_ACT_TYPE).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00160</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1089</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03023_DiagNackMsg_PdurCopyRxData_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>3182</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when PduR_DoIPCopyRxData returns BUFREQ_E_NOT_OK, DoIP module shall
    send a diagnostic negative acknowledge message with a negative acknowledge code set to 0x08.
    Additionally the message shall be discarded.
  
Test Object: 
    Diagnostic negative acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Set PduR stub to return BUFREQ_E_NOT_OK when PduR_DoIPCopyRxData() is called.
    02: Send valid diagnostic message on a TCP socket connection 0.
    03: VP(SWS_DoIP_00217): Verify that the message is discarded, i.e. PduR_DoIPTpRxIndication()
        is called with an error code to indicate message interruption.
    04: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    05: VP(SWS_DoIP_00174, SWS_DoIP_00138, DoIPPduRBufferNotOkNackValue_Conf):
        Verify that DoIP has generated Diagnostic negative acknowledge message, with a part of the
        previously received diagnostic message and negative acknowledge code set to 0x08 if
        DoIPPduRBufferNotOkNackValue is disabled or negative acknowledge code is set to configured value.
    06: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>290</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00138</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.DoIPPduRBufferNotOkNackValue_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1090</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03024_DiagNackMsg_INV_SRC_ADR</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>3324</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP module receives a diagnostic message with an unknown
    "Source Address", i.e. not registered on an establish socket connection, DoIP shall
    send a diagnostic negative acknowledge message with negative acknowledge code set to 0x02.
  
Test Object: 
    Diagnostic negative acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send diagnostic message on a TCP socket connection 0 with an invalid (not configured)
        Source address (0xFFFF).
    02: VP(Tx_Idle_2_Tx_Diag_Ack_Nack_Start): Verify that state transition from TX_IDLE to
        TX_DIAG_ACK_NACK_START has occurred as NACK has been sent to UL.
    03: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    04: VP(SWS_DoIP_00123, SWS_DoIP_00135, SWS_DoIP_00136): Verify that DoIP has generated
        Diagnostic negative acknowledge message, with a swapped source and target addresses
        and negative acknowledge code set to 0x02.
    05: Call DoIP_SoAdTpTxConfirmation() to confirm transmission of diagnostic acknowledgment.
    06: VP(Tx_Diag_Ack_Nack_2_Tx_Offline): Verify that state transition TX_DIAG_ACK_NACK to
        TX_OFFLINE has occurred when connection is reset.
    07: VP(SWS_DoIP_00123,SWS_DoIP_00058) Verify that SoAd_CloseSoCon was called with
        Abort=FALSE if DoIPEnableTcpClosureWithFIN is enabled or with Abort=TRUE if disabled.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Idle_2_Tx_Diag_Ack_Nack_Start</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>775</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00123</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00135</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00136</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0130.EB.SWS_DoIP_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>846</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_2_Tx_Offline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>770</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1091</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03025_DiagNackMsg_INV_TAR_ADR</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>3479</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP module receives a diagnostic message with an unknown
    "Target Address", DoIP shall send a diagnostic negative acknowledge message with
    negative acknowledge code set to 0x03. Additionally the message shall be discarded.
  
Test Object: 
    Diagnostic negative acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send generic header of a diagnostic message on a TCP socket connection 0.
    02: VP(Rx_Ready_2_Rx_Diag_Header): Verify that transition RX_READY - RX_DIAG_HEADER has
        occurred.
    03: Send diagnostic message header with an unknown (not configured) Target address (0xFFFF).
    04: VP(Rx_Diag_Header_2_Rx_Discard_Diag_Msg): Verify that transition RX_DIAG_HEADER -
        RX_DISCARD_DIAG_MSG has occurred.
    05: Send diagnostic message payload.
    06: VP(SWS_DoIP_00124, Rx_Discard_Diag_Msg_2_Rx_Ack_Conf_Wait): Verify that the message is
        discarded (not forwarded to PduR), i.e. PduR_DoIPStartOfReception() and
        PduR_DoIPCopyRxData() are not called and transition RX_DISCARD_DIAG_MSG - RX_CONF_WAIT has
        occurred.
    07: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    08: VP(SWS_DoIP_00124, SWS_DoIP_00135, SWS_DoIP_00136): Verify that DoIP has generated
        Diagnostic negative acknowledge message, with a swapped source and target addresses
        and negative acknowledge code set to 0x03.
    09: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    10: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00124</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00135</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00136</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Diag_Header</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>741</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Diag_Header_2_Rx_Discard_Diag_Msg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>739</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Discard_Diag_Msg_2_Rx_Ack_Conf_Wait</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>763</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1092</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03027_Tcp_GenHeaderNack_MSG_TO_LONG</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>3662</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when DoIP module receives generic DoIP header where payload length
    exceeds the value configured by DoIPMaxRequestBytes, generic header negative acknowledge
    message will be sent, with NACK code set to 0x02. The test is performed on a TCP connection.
  
Test Object: 
    Diagnostic negative acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send diagnostic message on TCP socket connection 0 with an oversized payload relative
        to parameter DoIPMaxRequestBytes.
    02: Send the remaining message part (payload).
    03: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit() was called for a correct TxPdu and length.
    04: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    05: VP(SWS_DoIP_00017): Verify that DoIP has generated Generic header negative acknowledge
        message, with NACK code set to 0x02.
    06: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    07: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1093</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03028_Tcp_GenHeaderNack_UNKNOWN_PL_TYPE</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>3812</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when invalid payload type in generic DoIP header is received,
    generic header negative acknowledge message will be sent, with NACK code set to 0x01.
    The test is performed on a TCP connection, for a set of invalid payload type values.
  
Test Object: 
    Generic header negative acknowledge message on a TCP connection.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Execute steps 02 - 07 in a loop for a predefined set of invalid payload type values.
    02: Send message on a TCP socket connection 0 with a generic header containing
        invalid payload type.
    03: VP(Rx_Ready_2_Rx_Ack_Conf_Wait, Tx_Idle_2_Tx_GenHeader_Nack, Tx_GenHeader_Nack_2_Tx_Idle):
        Verify that transitions from state RX_READY to state RX_ACK_CONF_WAIT and from
        TX_GENHEADER_NACK - TX_IDLE - TX_GENHEADER_NACK have occurred.
    04: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit() was called for a correct TxPdu and length.
    05: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    06: VP(SWS_DoIP_00016): Verify that DoIP has generated Generic header negative acknowledge
        message, with NACK code set to 0x01.
    07: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    08: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Ack_Conf_Wait</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>749</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_GenHeader_Nack_2_Tx_Idle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>767</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Idle_2_Tx_GenHeader_Nack</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>769</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1094</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03029_Tcp_GenHeaderNack_INCORRECT_PATTERN</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>3963</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when DoIP receives generic DoIP header with incorrect protocol
    information, generic header negative acknowledge message will be sent, with NACK code
    set to 0x00. The test is performed on a TCP connection.
    It also verifies that after the connection have been reset (closed), DoIP will return E_NOT_OK,
    on request to send diagnostic message.
  
Test Object: 
    Generic header negative acknowledge message on a TCP connection.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send message on a TCP socket connection 0 with a generic header containing
        invalid protocol information.
    02: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit() was called for a correct TxPdu and length.
    03: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    04: VP(SWS_DoIP_00014): Verify that DoIP has generated Generic header negative acknowledge
        message, with NACK code set to 0x00.
    05: Call DoIP_SoAdTpTxConfirmation() to confirm transmission of diagnostic acknowledgment.
    06: VP(Tx_GenHeader_Nack_2_Tx_Offline): Verify that state transition
        TX_GENHEADER_NACK to TX_OFFLINE has occurred.
    07: (SWS_DoIP_00014): Verify that TCP connection was closed and SoAd_CloseSoCon was called with
        Abort=FALSE if DoIPEnableTcpClosureWithFIN is enabled or with Abort=TRUE if disabled.
    08: Call DoIP_TpTransmit() to initiate transmission of diagnostic message. Note that connection
        has been closed due to a previously detected generic header error.
    09: VP(SWS_DoIP_00130): Verify that DoIP has returned with E_NOT_OK, because the connection has
        been closed.
    10: Repeat sending message on a TCP socket connection 0, by calling DoIP_SoAdTpCopyRxData().
    11: VP(Rx_Ack_Conf_Wait_2_Rx_Offline): Verify that DoIP_SoAdTpCopyRxData() has returned
        E_NOT_OK, indicating that connection is OFFLINE.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_GenHeader_Nack_2_Tx_Offline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>768</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Ack_Conf_Wait_2_Rx_Offline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>754</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1095</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03030_Tcp_GenHeaderNack_INVALID_PL_LENGTH_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>4131</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when DoIP module receives generic DoIP header with payload length
    that is not valid, generic header negative acknowledge message will be sent, with NACK code
    set to 0x04. The test is performed on a TCP connection for Routing activation request message.
  
Test Object: 
    Generic header negative acknowledge message on a TCP connection.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send Routing activation request message on a TCP socket connection 0 with generic
        header containing invalid payload length.
    02: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit() was called for a correct TxPdu and length.
    03: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    04: VP(SWS_DoIP_00019, SWS_DoIP_00117.Length7): Verify that DoIP has generated Generic header
        negative acknowledge message, with NACK code set to 0x04.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00117.Length7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1096</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03031_Tcp_GenHeaderNack_INVALID_PL_LENGTH_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>4255</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when DoIP module receives generic DoIP header with payload length
    that is not valid, generic header negative acknowledge message will be sent, with NACK code
    set to 0x04. The test is performed on a TCP connection for Routing activation request message
    with OEM specific field send.
  
Test Object: 
    Generic header negative acknowledge message on a TCP connection.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send Routing activation (OEM) request message on a TCP socket connection 0 with
        generic header containing invalid payload length.
    02: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit() was called for a correct TxPdu and length.
    03: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    04: VP(SWS_DoIP_00019, SWS_DoIP_00117.Length7): Verify that DoIP has generated Generic header
        negative acknowledge message, with NACK code set to 0x04.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00117.Length7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1097</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03032_Tcp_GenHeaderNack_INVALID_PL_LENGTH_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>4381</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when DoIP module receives generic DoIP header with payload length
    that is not valid, generic header negative acknowledge message will be sent, with NACK code
    set to 0x04. The test is performed on a TCP connection for Diagnostic message.
  
Test Object: 
    Generic header negative acknowledge message on a TCP connection.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send diagnostic message on a TCP socket connection 0 with a generic header containing
        invalid payload length - less then a minimum payload length of 5 bytes.
    02: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit() was called for a correct TxPdu and length.
    03: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    04: VP(SWS_DoIP_00019, SWS_DoIP_00122): Verify that DoIP has generated Generic header
        negative acknowledge message, with NACK code set to 0x04.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1098</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03033_Udp_GenHeaderNack_MSG_TO_LONG</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>4504</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if an invalid payload type in DoIP header is used, NACK code 0x01 will
    be sent.
  
Test Object: 
    DoIP_SoAdIfRxIndication().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Open all socket connections.
    02: Call DoIP_SoAdIfRxIndication() to send the DoIP message with invalid payload type.
    03: VP(DoIP.SWS_DoIP_00016): Verify that SoAd_IfTransmit() was called for correct TxPdu.
    04: VP(DoIP.SWS_DoIP_00016): Verify that NACK code 0x01 and
        payload type 0x0000 were sent.
    05: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1099</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03034_DiagAckMsg_SegmentedReception</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>4606</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies the process of reception of a Diagnostic message, where payload is received
    in several segments. Test case includes verification of generation of Diagnostic message
    positive acknowledge, and forwarding message payload to PduR.
  
Test Object: 
    Diagnostic positive acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Configure PduR stub for the function PduR_DoIPStartOfReception() as PduR can accept payload
        chunk of 2 bytes.
    02: Call DoIP_SoAdTpCopyRxData() to dispatch DoIP header.
    03: Call DoIP_SoAdTpCopyRxData() to dispatch Diagnostic message header.
    04: Call DoIP_SoAdTpCopyRxData() to dispatch first chunk of Diag. message payload(2 bytes).
    05: VP(DoIP.SWS_DoIP_00259): Verify that DoIP_SoAdTpCopyRxData() has returned the value
        of BufferSizePtr set to the value returned by PduR_DoIPCopyRxData()
    06: Call DoIP_SoAdTpCopyRxData() to dispatch the second chunk of Diag. message payload(3 bytes).
    07: VP(DoIP.SWS_DoIP_00259): Verify that DoIP_SoAdTpCopyRxData() has returned the value
        of BufferSizePtr set to the value returned by PduR_DoIPCopyRxData()
    08: Call DoIP_SoAdTpCopyRxData() to dispatch third chunk of Diag. message payload(1 byte).
    09: VP(DoIP.SWS_DoIP_00128): Verify that PduR has received the complete Diagnostic message
        payload.
    10: VP(DoIP.SWS_DoIP_00220): Verify that SoAd_TpTransmit() was called with correct
        Socket Id and SoAdSrcPduInfoPtr.SduLength to the size of a routing activation response.
    11: VP(DoIP.SWS_DoIP_00221): Verify that PduR_DoIPTpRxIndication was called and returned
        BUFREQ_OK.
    12: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    13: VP(DoIP.SWS_DoIP_00129, DoIP.SWS_DoIP_00131): Verify that the correct
        diagnostic acknowledge message was sent.
    14: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    15: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>294</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00131</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>320</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1100</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03035_DiagAckMsg_SegmentedAckTransmission</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>4838</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies the process of transmitting positive Diagnostic acknowledge message, where
    SoAd is not able to receive the complete message at once, but in several segments.
  
Test Object: 
    Diagnostic positive acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send a valid diagnostic message on a TCP socket connection 0.
    02: Set Pdu size to the size of generic header(8) + diagnostic acknowledge header(5) - 1.
    03: Call DoIP_SoAdTpCopyTxData() to read-out a part of acknowledge message.
    04: VP(SWS_DoIP_00232): Verify that the part of acknowledge message has been copied and DoIP
        has returned number of remaining bytes (3).
    05: Call DoIP_SoAdTpCopyTxData() to read-out the remaining byte.
    06: VP(SWS_DoIP_00232): Verify that the remaining part of acknowledge message has been copied.
    07: Set Pdu size to 1 byte.
    08: Call DoIP_SoAdTpCopyTxData() to read-out a part of acknowledge message and verify that DoIP
        returned BUFREQ_OK, and requested the buffer size for the remaining part of ack. message
        (1 byte).
    09: Set Pdu size to 1 byte.
    10: Call DoIP_SoAdTpCopyTxData() to read-out a the last part of acknowledge message and verify
        that DoIP returned BUFREQ_OK, and the DoIP does not request further buffer size (0).
    11: VP(SWS_DoIP_00129): Verify that the correct diagnostic acknowledge message was received.
    12: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    13: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00134</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1101</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03036_DiagAckMsg_RxBlocked</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>5029</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that reception of a new diagnostic message will be rejected in case
    confirmation for the previously sent acknowledge message have not yet been received.
  
Test Object: 
    Diagnostic message receive.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send a valid diagnostic message on a TCP socket connection 0.
    02: Send a second diagnostic message on the same socket connection prior confirmation for the
        previously received diagnostic message have been received.
    03: VP(DoIP.EB.BlockMsgRx, Rx_Ack_Conf_Wait_2_Rx_Ack_Conf_Wait):
        Verify that when DoIP_SoAdTpCopyRxData() is called while connection is in state
        RX_ACK_CONF_WAIT, i.e. waiting for acknowledge message confirmation, DoIP shall return
        BUFREQ_E_BUSY and BufferSizePtr 0.
    04: Call DoIP_SoAdTpCopyRxData() with SduLength set to 0.
    05: VP(DoIP.EB.BlockMsgRx, SWS_DoIP_00208): Verify that DoIP_SoAdTpCopyRxData() returned
        BUFREQ_E_BUSY and BufferSizePtr set to 0.
    06: Call DoIP_SoAdTpCopyTxData() to read-out acknowledge message.
    07: VP(DoIP.SWS_DoIP_00129): Verify that the correct diagnostic acknowledge message
        was sent.
    08: Call DoIP_SoAdTpTxConfirmation() to confirm transmission of diagnostic acknowledgment.
    09: Call DoIP_SoAdTpCopyRxData() with SduLength set to 0.
    10: VP(DoIP.EB.BlockMsgRx, SWS_DoIP_00208): Verify that DoIP_SoAdTpCopyRxData() returned
        BUFREQ_E_BUSY and BufferSizePtr set to 0.
    11: Send again a valid diagnostic message on a TCP socket connection 0.
    12: VP(DoIP.SWS_DoIP_00129): Verify that diagnostic message was successfully received and
        acknowledge returned.
    13: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    14: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.BlockMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Ack_Conf_Wait_2_Rx_Ack_Conf_Wait</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>762</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>284</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1102</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03037_Tcp_GenHeaderNack_RxBlocked</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>5221</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that reception of a new message will be rejected in case confirmation
    for the previously sent generic header acknowledge message have not yet been received.
  
Test Object: 
    Diagnostic negative acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send generic header of diagnostic message on TCP socket connection 0 with an oversized
        payload relative to parameter DoIPMaxRequestBytes.
    02: Send the rest of diagnostic message (diagnostic header + payload)
    03: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    04: VP(SWS_DoIP_00017): Verify that DoIP has generated Generic header negative acknowledge
        message, with NACK code set to 0x02.
    05: Send again message from step 01.
    06: VP(BlockMsgRx): Verify that DoIP has returned BUFREQ_E_BUSY - indicating blocking of
        reception until confirmation for previously transmitted acknowledge is received.
    07: Call DoIP_SoAdTpTxConfirmation() to confirm reception of acknowledge message.
    08: Send again message from step 01.
    09: Verify that DoIP has returned BUFREQ_OK, and generated acknowledge message -
        Rx is unblocked.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.BlockMsgRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1103</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03038_DoIPNumByteDiagAckNack_Oversized</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>5383</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when value of DoIPTester/DoIPNumByteDiagAckNack is greater then
    DoIPMaxNumByteDiagAckNack, the  number of bytes of the original Diagnostic message that will
    be copied into the response (ack/nack) message will be limited to DoIPMaxNumByteDiagAckNack.
  
Test Object: 
    Diagnostic acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 0x1DE6U and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send valid diagnostic message on a TCP socket connection 0.
    02: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    03: VP(): Verify that DoIP has generated Diagnostic positive acknowledge message, with a part
        of the previously received diagnostic message of a size DoIPMaxNumByteDiagAckNack.
    04: Call DoIP_SoAdTpTxConfirmation() to confirm diagnostic message.
    05: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DoIPNumByteDiagAckNack_Limited</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1104</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03039_DiagMsg_SegmentedHeaders</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>5513</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies the process of reception of a Diagnostic message, where headers (both
    generic nad diagnostic) and payload are received in several segments. Test case includes
    verification of generation of Diagnostic message positive acknowledge, and forwarding message
    payload to PduR.
  
Test Object: 
    Diagnostic positive acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Configure PduR stub for the function PduR_DoIPStartOfReception() as PduR can accept payload
        chunk of 2 bytes.
    02: Call DoIP_SoAdTpCopyRxData() to dispatch DoIP header byte by byte.
    03: Call DoIP_SoAdTpCopyRxData() to dispatch Diagnostic message header byte by byte.
    04: Call DoIP_SoAdTpCopyRxData() to dispatch first chunk of Diag. message payload(2 bytes).
    05: Call DoIP_SoAdTpCopyRxData() to dispatch the second chunk of Diag. message payload(3 bytes).
    06: Call DoIP_SoAdTpCopyRxData() to dispatch third chunk of Diag. message payload(1 byte).
    07: VP(DoIP.SWS_DoIP_00128): Verify that PduR has received the complete Diagnostic message
        payload.
    08: VP(DoIP.SWS_DoIP_00220): Verify that SoAd_TpTransmit() was called with correct
        Socket Id and SoAdSrcPduInfoPtr.SduLength to the size of a routing activation response.
    09: VP(DoIP.SWS_DoIP_00221): Verify that PduR_DoIPTpRxIndication was called and returned
        BUFREQ_OK.
    10: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    11: VP(DoIP.SWS_DoIP_00129, DoIP.SWS_DoIP_00131): Verify that the correct
        diagnostic acknowledge message was sent.
    12: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    13: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>294</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00131</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1105</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03040_Diag_Entity_Status_Req_TCP_closed</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>5754</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that after a valid Diagnostic entity status request message is received,
    DoIP module shall send a Diagnostic entity status response message on the configured
    DoIPUDPConnection.
  
Test Object: 
    Diagnostic entity status messages.
  
Test Precondition: 
    DoIP initialized.
    TCP socket connections not opened.
    DoIPEntityStatusMaxByteFieldUse set to true.
  
Test Execution: 
    01: VP(SWS_DoIP_00095): Call DoIP_SoAdIfRxIndication() with message payload type = 0x4001
        (Diagnostic entity status request).  Payload length for this message type is 0.
    02: VP(SWS_DoIP_00096): Verify that SoAd_IfTransmit() was called.
    03: VP(SWS_DoIP_00096, SWS_DoIP_00097, SWS_DoIP_00098, SWS_DoIP_00099, SWS_DoIP_00100):
        Verify that Diagnostic entity status response was sent with configured parameters.
    04: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00095</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00099</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1106</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03040_Diag_Entity_Status_Req_TCP_opened</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>5852</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that after a valid Diagnostic entity status request message is received and
    TCP connections are opened, DoIP module shall send a Diagnostic entity status response message
    on the configured DoIPUDPConnection.
  
Test Object: 
    Diagnostic entity status messages.
  
Test Precondition: 
    DoIP initialized.
    Two TCP socket connections are opened.
    DoIPEntityStatusMaxByteFieldUse set to true.
  
Test Execution: 
    01: VP(SWS_DoIP_00095): Call DoIP_SoAdIfRxIndication() with message payload type = 0x4001
        (Diagnostic entity status request).  Payload length for this message type is 0.
    02: VP(SWS_DoIP_00096): Verify that SoAd_IfTransmit() was called.
    03: VP(SWS_DoIP_00096, SWS_DoIP_00097, SWS_DoIP_00098, SWS_DoIP_00099, SWS_DoIP_00100):
        Verify that Diagnostic entity status response was sent with configured parameters.
    04: Call DoIP_SoAdIfTxConfirmation().
    05: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) and TcpCon1 (Channel_1) to verify that connection
        is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00095</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00099</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1107</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03041_Diag_Entity_Status_Req_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>5995</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when a Diagnostic entity status request message with invalid payload
    size is received, NACK code 0x004 is sent.
  
Test Object: 
    Diagnostic entity status messages.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: VP(SWS_DoIP_00095): Call DoIP_SoAdIfRxIndication() with message payload type = 0x4001
        (Diagnostic entity status request) and an invalid payload length.
    02: VP(DoIP.SWS_DoIP_00019): Verify that SoAd_IfTransmit() was called for correct TxPdu.
    03: VP(DoIP.SWS_DoIP_00019): Verify that NACK code 0x04 was sent.
    04: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00095</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1108</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03042_PowerMode_Ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>6096</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that a valid Diagnostic power mode request message shall be ignored if
    User callback function &lt;User&gt;_DoIPGetPowerModeCallback is not configured.
  
Test Object: 
    Diagnostic power mode information request.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    User function &lt;User&gt;_DoIPGetPowerModeCallback not configured &amp; provided (linked).
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to send Diagnostic power mode information request
        (payload type 0x4003).
    02: VP(DoIP.EB.DoIP_PowerModeCallback_NotConfigured, DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse):
        Verify that DoIP ignored PowerModeReq message. Instead the UDP socket gets
        immediately released.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DoIP_PowerModeCallback_NotConfigured</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>712</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1109</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03044_DiagAckMsg_CopyTxData_SduLength_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>6178</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that when DoIP_SoAdTpCopyTxData() is called with PduInfoPtr.SduLength set to 0,
    after a successful call to SoAd_TpTransmit() as a result of generation of positive acknowledge
    diagnostic message, DoIP module shall return BUFREQ_OK and in the parameter availableDataPtr
    the total size of acknowledge message including a part of previously received diag. message.
  
Test Object: 
    DoIP_SoAdTpCopyTxData()
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 0x1DE6U and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Receive a valid diagnostic message on a TCP socket connection 0. The message contains
        payload length of 2 bytes, while DoIPMaxNumByteDiagAckNack is 3.
    02: Call DoIP_SoAdTpCopyTxData() with PduInfo.SduLength = 0.
    03: VP(SWS_DoIP_00224): Verify that DoIP has returned parameter AvailableDataPtr correctly set
        to the size of diagnostic acknowledge message headers and response code including previous
        diagnostic message payload), and that return value is BUFREQ_OK.
    04: Call DoIP_SoAdTpCopyTxData() to read-out message.
    05: VP(SWS_DoIP_00134): Verify that DoIP has generated Diagnostic positive acknowledge message,
        with a part of the previously received diagnostic message of a size
        DoIPMaxNumByteDiagAckNack.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00134</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1110</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03045_DiagNackMsg_CopyTxData_SduLength_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>6316</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that when DoIP_SoAdTpCopyTxData() is called with PduInfoPtr.SduLength set to 0,
    after a successful call to SoAd_TpTransmit() as a result of generation of negative acknowledge
    diagnostic message, DoIP module shall return BUFREQ_OK and in the parameter availableDataPtr
    the total size of acknowledge message excluding a part of previously received diag. message.
  
Test Object: 
    Diagnostic acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 0x1DE6U and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Receive a valid diagnostic message on a TCP socket connection 0. The message contains
        payload length of 2 bytes, while DoIPMaxNumByteDiagAckNack is 3.
    02: Call DoIP_SoAdTpCopyTxData() with PduInfo.SduLength = 0.
    03: VP(SWS_DoIP_00224): Verify that DoIP has returned parameter AvailableDataPtr correctly set
        to the size of diagnostic acknowledge message (including previous diagnostic message), and
        that return value is BUFREQ_OK.
    04: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    05: VP(SWS_DoIP_00134): Verify that DoIP has generated Diagnostic positive acknowledge message,
        with a part of the previously received diagnostic message of a size
        DoIPMaxNumByteDiagAckNack.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00134</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1111</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03046_DiagAckMsg_TxBlocked</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>6457</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP needs to send a diagnostic acknowledge message on TCP
    connection, the DoIP shall call SoAd_TpTransmit() with the  SoAdSrcPduId containing
    the Id of the according socket, the SoAdSrcPduInfoPtr.SduLength set to the size of the
    data to be transmitted.
    Test case verifies described functionality in case that diagnostic message is received while
    TX process is in progress.
  
Test Object: 
    Generating diagnostic acknowledge message
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to initiate a transmission (TX side) and DoIP_MainFunction()
        to process the transmission request.
    02: VP(): Verify that SoAd_TpTransmit() is called with correct parameters.
    03: Initiate reception (RX side) of a valid diagnostic message on the same socket connection.
    04: Query DoIP of available data on a connection by calling DoIP_SoAdTpCopyTxData().
    05: Call DoIP_SoAdTpCopyTxData() to fetch TX diagnostic message.
    06: Call DoIP_SoAdTpTxConfirmation() to confirm successful transmission of TX diag. message.
    07: VP(): Verify that SoAd_TpTransmit() is called with correct parameters.
    08: Query DoIP of available data on a connection by calling DoIP_SoAdTpCopyTxData().
    09: Call DoIP_SoAdTpCopyTxData() to fetch RX diagnostic acknowledge message.
    10: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    11: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1112</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03047_TransmitInContextTxConfirmation</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>6694</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when PduR requests diagnostic message transmission within the context
    of PduR_DoIPTpTxConfirmation(), for the same TxPduId that is being confirmed, DoIP will queue
    the request and process it within DoIP_MainFunction().
  
Test Object: 
    DoIP_TpTransmit(), DoIP_SoAdTpTxConfirmation().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing successfully activated.
    PduR_DoIPTpTxConfirmation stub set to call DoIP_TpTransmit().
  
Test Execution: 
    01: Call DoIP_TpTransmit() to request a transmission and DoIP_MainFunction() to process the
        transmission request.
    02: Fetch diagnostic message by calling DoIP_SoAdTpCopyTxData().
    03: Indicate successful transmission by calling DoIP_SoAdTpTxConfirmation().
    04: Call DoIP_MainFunction() to process DoIP_TpTransmit().
    05: VP(TxConfirmationContext): Verify that SoAd_TpTransmit() is called, i.e. DoIP_TpTransmit()
        received within PduR_DoIPTpTxConfirmation() context have been queued and processed within
        DoIP_MainFunction().
    06: Set PduR_DoIPTpTxConfirmation stub to NULL to avoid calling DoIP_TpTransmit() in a loop.
    07: Fetch diagnostic message by calling DoIP_SoAdTpCopyTxData().
    08: Indicate successful transmission by calling DoIP_SoAdTpTxConfirmation().
    09: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0131.DoIP_TpTransmit.TxConfirmationContext</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>842</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1113</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03048_DiscardDiagMsg_PDUR_BUFF_NOT_OK_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>6870</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP module receives a diagnostic message and PduR is not
    able to receive a message (PduR_DoIPStartOfReception return BUFREQ_E_NOT_OK), than DoIP module
    will send a diagnostic negative acknowledge message with acknowledge code set to 0x08.
    Additionally the message shall be discarded.
  
Test Object: 
    PduR is not able to received data.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Configure PduR stub PduR_DoIPStartOfReception() to return BUFREQ_E_NOT_OK.
    02: Send a valid diagnostic message towards DoIP (with payload transmitted in two parts).
    03: VP(SWS_DoIP_00174): Verify that the message is discarded, i.e. the complete message
        is consumed by DoIP.
    04: VP(SWS_DoIP_00174,SWS_DoIP_00216): Verify that DoIP has generated diagnostic negative acknowledge
        message with negative acknowledge code set to 0x08.
    05: Configure PduR stub PduR_DoIPStartOfReception() to return BUFREQ_OK.
    06: Send valid diagnostic message towards DoIP.
    07: VP(SWS_DoIP_00129): Verify that DoIP has generated positive acknowledge message, indicating
        that reception was successful. This also verifies that the previous message was
        discarded
    08: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    09: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1114</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03049_DiscardDiagMsg_PDUR_BUFF_NOT_OK_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>7029</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP module receives a diagnostic message and PduR is not
    able to receive a message (PduR_DoIPCopyRxData return E_NOT_OK), than DoIP module
    will send a diagnostic negative acknowledge message with acknowledge code set to 0x08.
    Additionally the message shall be discarded.
  
Test Object: 
    PduR is not able to received data.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Configure PduR stub PduR_DoIPCopyRxData() to return BUFREQ_E_NOT_OK.
    02: Send a valid diagnostic message towards DoIP (with payload transmitted in two parts).
    03: VP(SWS_DoIP_00174, Rx_Diag_Msg_2_Rx_Discard_Diag_Msg): Verify that the message is discarded,
        i.e. the complete message is consumed by DoIP and that state transition from state
        RX_DIAG_MSG to state RX_DISCARD_DIAG_MSG has occurred.
    04: VP(SWS_DoIP_00174): Verify that DoIP has generated diagnostic negative acknowledge
        message with negative acknowledge code set to 0x08.
    05: Configure PduR stub PduR_DoIPCopyRxData() to return BUFREQ_OK.
    06: Send valid diagnostic message towards DoIP.
    07: VP(SWS_DoIP_00129): Verify that DoIP has generated positive acknowledge message, indicating
        that reception was successful. This also verifies that the previous message was
        discarded.
    08: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    09: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Diag_Msg_2_Rx_Discard_Diag_Msg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>734</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1115</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03050_DiscardDiagMsg_PDUR_BUFF_OVFL_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>7190</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP module receives a diagnostic message and and PduR is not
    able to receive a message (PduR_DoIPStartOfReception return BUFREQ_E_OVFL), than DoIP module
    will send a diagnostic negative acknowledge message with acknowledge code set to 0x05.
    Additionally the message shall be discarded.
  
Test Object: 
    PduR is not able to received data.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Configure PduR stub PduR_DoIPStartOfReception() to return BUFREQ_E_OVFL.
    02: Send a valid diagnostic message towards DoIP (with payload transmitted in two parts).
    03: VP(SWS_DoIP_00126): Verify that the message is discarded, i.e. the complete message
        is consumed by DoIP.
    04: VP(SWS_DoIP_00126): Verify that DoIP has generated diagnostic negative acknowledge
        message with negative acknowledge code set to 0x05.
    05: Configure PduR stub PduR_DoIPStartOfReception() to return BUFREQ_OK.
    06: Send valid diagnostic message towards DoIP.
    07: VP(SWS_DoIP_00129): Verify that DoIP has generated positive acknowledge message, indicating
        that reception was successful. This also verifies that the previous message was
        discarded.
    08: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    09: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1116</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03051_DiscardDiagMsg_PDUR_BUFF_OVFL_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>7347</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP module receives a diagnostic message and and PduR is not
    able to receive a message (PduR_DoIPCopyRxData return BUFREQ_E_OVFL), than DoIP module
    will send a diagnostic negative acknowledge message with acknowledge code set to 0x05.
    Additionally the message shall be discarded.
  
Test Object: 
    PduR is not able to received data.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Configure PduR stub PduR_DoIPCopyRxData() to return BUFREQ_E_OVFL.
    02: Send a valid diagnostic message towards DoIP (with payload transmitted in two parts).
    03: VP(SWS_DoIP_00126): Verify that the message is discarded, i.e. the complete message
        is consumed by DoIP.
    04: VP(SWS_DoIP_00126): Verify that DoIP has generated diagnostic negative acknowledge
        message with negative acknowledge code set to 0x05.
    05: Configure PduR stub PduR_DoIPCopyRxData() to return BUFREQ_OK.
    06: Send valid diagnostic message towards DoIP.
    07: VP(SWS_DoIP_00129): Verify that DoIP has generated positive acknowledge message, indicating
        that reception was successful. This also verifies that the previous message was
        discarded.
    08: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    09: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1117</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03052_Udp_IgnoreGenericNack</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>7504</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when generic header negative acknowledge message
    (payload type = 0x0000) is received on Udp connection, it will be ignored.
  
Test Object: 
    DoIP_SoAdIfRxIndication().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Open all socket connections.
    02: Call DoIP_SoAdIfRxIndication() to receive generic header NACK message.
    03: VP(DoIP.SWS_DoIP_00292, DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse):
        Verify that NACK message has been ignored, i.e. no response message has been
        generated. Instead the UDP socket gets immediately released.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>346</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>712</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1118</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03053_Udp_IgnoreVehicleAnnouncementMsg</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>7585</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when Vehicle announcement message (payload type = 0x0004) is
    received by DoIP module, it shall be ignored.
  
Test Object: 
    DoIP_SoAdIfRxIndication().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Open all socket connections.
    02: Call DoIP_SoAdIfRxIndication() to receive Vehicle announcement message.
    03: VP(DoIP.SWS_DoIP_00293, DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse):
        Verify that the message has been ignored, i.e. no response message has been
        generated. Instead the UDP socket gets immediately released.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00293</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>347</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>712</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1119</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03054_Tcp_IgnoreGenericNack</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>7672</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when generic header negative acknowledge message
    (payload type = 0x0000) is received on Tcp connection, it will be ignored.
  
Test Object: 
    Diagnostic negative acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send NACK message generic header on TCP socket connection 0.
    02: VP(Rx_Ready_2_Rx_Discard_Msg): Verify that transition from state RX_READY to RX_DISCARD_MSG
        has occurred.
    03: Send NACK message payload (1 byte).
    04: VP(DoIP.SWS_DoIP_00292, Rx_Discard_Msg_2_Rx_Ready): Verify that NACK message has been
        ignored, i.e. no response message has been generated i.e. SoAd_TpTransmit() has not been
        called and that state transition from RX_DISCARD_MSG to state RX_READY has occurred.
    05: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>346</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Discard_Msg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>747</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Discard_Msg_2_Rx_Ready</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>750</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1120</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03056_ReturnVersionInformation</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>7789</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check if DoIP_GetVersionInfo() returns correct version information for enabled
    development error detection.
  
Test Object: 
    DoIP_GetVersionInfo().
  
Test Precondition: 
   - DoIPDevErrorDetect is enabled
   - DoIPVersionInfoApi is enabled
   - Macros DOIP_VENDOR_ID,.. are defined properly
  
Test Execution: 
    01: DoIP_GetVersionInfo() is called with valid pointer to versionInfo.
    02: VP(): DOIP_VENDOR_ID, DOIP_MODULE_ID, DOIP_SW_MAJOR_VERSION, DOIP_SW_MINOR_VERSION
              and DOIP_SW_PATCH_VERSION are returned by versionInfo.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.GetVersionInfo</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1121</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03057_CancelTransmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>7841</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that DoIP_CancelTransmit() with valid parameters is called and returned
    E_NOT_OK in case a function body was not implemented.
  
Test Object: 
    DoIP_CancelTransmit().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_CancelTransmit() with valid parameters.
    02: VP(): Verify that DoIP_CancelTransmit() returns E_NOT_OK if the function body was
    not implemented.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.ApiFunctionBodyNotImplemented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1122</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03058_CancelReceive</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>7894</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that DoIP_CancelReceive() with valid parameters is called and returned
    E_NOT_OK in case a function body was not implemented.
  
Test Object: 
    DoIP_CancelReceive().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_CancelReceive() with valid parameters.
    02: VP(DoIP.EB.ApiFunctionBodyNotImplemented):  Verify that DoIP_CancelReceive() returns
    E_NOT_OK if the function body was not implemented.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.ApiFunctionBodyNotImplemented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1123</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03059_SoAd_TpTransmit_NOT_OK_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>7947</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when SoAd_TpTransmit() returns E_NOT_OK during the transmission of
    diagnostic message (initiated by a call to DoIP_TpTransmit()), DoIP module shall discard the
    message and notify upper layer about failed transmission by calling PduR_DoIPTpTxConfirmation()
    with result set to E_NOT_OK.
  
Test Object: 
    Call of SoAd_TpTransmit() within a context of DoIP_MainFunction(), as a result
    of DoIP_TpTransmit().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing activation performed on TcpCon_0.
  
Test Execution: 
    01: Configure SoAd_TpTransmit() stub to return E_NOT_OK.
    02: Call DoIP_TpTransmit() to request a transmission of diagnostic message on Channel_0.
    03: Call DoIP_TpTransmit() to request a transmission of diagnostic message on Channel_2.
    04: Call DoIP_MainFunction() to process the first transmission request (Channel_0).
    05: VP(SWS_DoIP_00228): Verify that PduR_DoIPTpTxConfirmation() was called for Channel_0 with
        result set to E_NOT_OK indicating failed transmission request.
    06: Call DoIP_SoAdTpCopyTxData() with SduLength = 0 to check the size of available message.
    07: VP(SWS_DoIP_00228): Verify that BUFREQ_E_NOT_OK is returned, indicating that message is
        not available, i.e. message has been discarded.
    08: Call DoIP_MainFunction() to process the second transmission request (Channel_2).
    09: VP(SWS_DoIP_00228): Verify that PduR_DoIPTpTxConfirmation() was called for Channel_2 with
        result set to E_NOT_OK indicating failed transmission request.
    10: Call DoIP_SoAdTpCopyTxData() with SduLength = 0 to check the size of available message.
    11: VP(SWS_DoIP_00228): Verify that BUFREQ_E_NOT_OK is returned, indicating that message is
        not available, i.e. message has been discarded.
    12: Configure SoAd_TpTransmit() stub to return E_OK.
    13: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic
        message on TcpCon0 (Channel_0 and Channel_2) to verify that the connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>299</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1124</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03060_SoAd_TpTransmit_NOT_OK_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>8089</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when SoAd_TpTransmit() returns E_NOT_OK during the transmission of
    negative acknowledge message, DoIP module shall discard the message.
  
Test Object: 
    Call of SoAd_TpTransmit() when requesting transmission of negative acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Configure SoAd_TpTransmit() stub to return E_NOT_OK.
    02: Call DoIP_SoAdTpCopyRxData() to indicate reception of a message with invalid payload type.
    03: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit() was called.
    04: Call DoIP_SoAdTpCopyTxData() with SduLength = 0 to check the size of NACK message.
    05: VP(SWS_DoIP_00223): Verify that BUFREQ_E_NOT_OK was returned, indicating that NACK message
        is not available, i.e. message has been discarded.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1125</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03061_PendningTxRequests</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>8194</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a DoIP Tx channel is busy (Tx request pending or in progress),
    then a call to DoIP_TpTransmit() for this channel shall be ignored, and DoIP_TpTransmit() shall
    return E_NOT_OK.
  
Test Object: 
    DoIP_TpTransmit().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing activation successfully performed for Channel_0.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to initiate transmission of a diagnostic message on channel 0.
    02: Repeat a call to DoIP_TpTransmit() for channel 0, prior DoIP_MainFunction() is called
        to process previous request.
    03: VP(): Verify that DoIP_TpTransmit() returned E_NOT_OK.
    04: Call DoIP_MainFunction() to process the first transmission request.
    05: Call DoIP_MainFunction() to process the second transmission request.
    06: VP(): Verify that SoAd_TpTransmit() was not called, i.e. second message was discarded.
    07: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.IgnoreTxRequests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1126</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03062_CopyRxData_OFFLINE</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>8314</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP_SoAdTpCopyRxData() is called before successful call to
    DoIP_SoAdTpStartOfReception(), DoIP shall reject the message, return BUFREQ_E_NOT_OK and set
    BufferSizePtr to the size of generic header.
  
Test Object: 
    DoIP_SoAdTpCopyRxData().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() before DoIP_SoAdTpStartOfReception() is called for the same
        connection.
    02: VP(): Verify that BufferSizePtr is set to the size of generic header and BUFREQ_E_NOT_OK
              is returned.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.CopyRxData.OFFLINE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1127</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03063_IfRxIndication_FrameTooSmall</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>8390</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that when DoIP_SoAdIfRxIndication() is called with an incomplete generic header
    (PduInfo.SduLength &lt; 8 ), DoIP shall ignore the frame.
  
Test Object: 
    DoIP_SoAdIfRxIndication().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to receive DoIP message with incomplete generic header.
    02: VP(DoIP.EB.SoAdIfRxIndication.FrameTooSmall,
           DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse):
        Verify that frame is ignored - no NACK message have been sent.
        Instead the UDP socket gets immediately released.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SoAdIfRxIndication.IncompleteGenericHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>712</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1128</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03064_CopyRxData_SduLength_Oversized_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>8472</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP_SoAdTpCopyRxData() is called at the start of a new DoIP
    message with PduInfoPtr.SduLength larger then the buffer size provided to SoAd with previous
    calls DoIPSoAdTpStartOfReception() or DoIP_SoAdTpCopyRxData(), DoIP shall return
    BUFREQ_E_NOT_OK.
  
Test Object: 
    DoIP_SoAdTpCopyRxData().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() to initiate start of Tp reception.
    02: Call DoIP_SoAdTpCopyRxData() with a message size larger then the buffer size provided with
        previous call to DoIP_SoAdTpStartOfReception().
    03: VP(): Verify that DoIP_SoAdTpCopyRxData() has returned BUFREQ_E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>286</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1129</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03065_CopyRxData_SduLength_Oversized_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>8556</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP_SoAdTpCopyRxData() is called to copy diagnostic message
    payload, and PduInfoPtr.SduLength is larger then the payload size specified in generic header,
    DoIP shall return BUFREQ_E_NOT_OK.
  
Test Object: 
    DoIP_SoAdTpCopyRxData().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing activation done.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() to indicate reception of DoIP generic header.
    02: Call DoIP_SoAdTpCopyRxData() to indicate reception of Diagnostic message header.
    03: Call DoIP_SoAdTpCopyRxData() to indicate reception of Diagnostic message payload,
        with SduLength set to the value of payload length from generic header + 1.
    04: VP(DoIP.EB.CopyRxData.SduLength.Oversized, Rx_Diag_Msg_2_Rx_Diag_Msg): Verify that
        DoIP_SoAdTpCopyRxData returned BUFREQ_E_NOT_OK and that there was no state transition from
        state RX_DIAG_MSG.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.CopyRxData.SduLength.Oversized</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Diag_Msg_2_Rx_Diag_Msg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>735</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1130</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03066_CopyRxData_SduLength_Oversized_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>8671</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP_SoAdTpCopyRxData() is called to copy diagnostic message
    payload after an error in diagnostic header is detected and PduInfoPtr.SduLength is larger
    then the payload size specified in generic header, DoIP shall return BUFREQ_E_NOT_OK.
  
Test Object: 
    DoIP_SoAdTpCopyRxData().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing activation done.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() to indicate reception of DoIP generic header.
    02: Call DoIP_SoAdTpCopyRxData() to indicate reception of Diagnostic message header with
        invalid Target address.
    03: Call DoIP_SoAdTpCopyRxData() to indicate reception of Diagnostic message payload,
        with SduLength set to the value of payload length from generic header + 1.
    04: VP(DoIP.EB.CopyRxData.SduLength.Oversized, Rx_Discard_Diag_Msg_2_Rx_Discard_Diag_Msg):
        Verify that DoIP_SoAdTpCopyRxData returned BUFREQ_E_NOT_OK and that there was no transition
        from state RX_DISCARD_DIAG_MSG.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.CopyRxData.SduLength.Oversized</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Discard_Diag_Msg_2_Rx_Discard_Diag_Msg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>765</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1131</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03067_CopyRxData_SduLength_Oversized_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>8787</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP_SoAdTpCopyRxData() is called to copy (release) diagnostic
    message payload after an error in generic header is detected and PduInfoPtr.SduLength is larger
    then the payload size specified in generic header, DoIP shall return BUFREQ_E_NOT_OK.
  
Test Object: 
    DoIP_SoAdTpCopyRxData().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() to initiate start of Tp reception.
    02: Call DoIP_SoAdTpCopyRxData() to indicate reception of DoIP generic header with invalid
        payload type.
    03: VP(Rx_Ready_2_Rx_Discard_Msg): Verify that state transition from RX_READY to RX_DISCARD_MSG
        has occurred.
    04: Call DoIP_SoAdTpCopyRxData() to indicate reception of diagnostic message payload,
        with SduLength set to the value of payload length from generic header + 1.
    05: VP(DoIP.EB.CopyRxData.SduLength.Oversized, Rx_Discard_Msg_2_Rx_Discard_Msg): Verify that
        DoIP_SoAdTpCopyRxData() has returned BUFREQ_E_NOT_OK and that there was no transition from
        state RX_DISCARD_MSG.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.CopyRxData.SduLength.Oversized</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Discard_Msg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>747</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Discard_Msg_2_Rx_Discard_Msg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>766</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1132</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03068_GeneralInactivityTimer_Reset_DoIPTransmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>8889</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that after routing activation is performed DoIP shall reset General
    inactivity timer when DoIP_TpTransmit() is called.
  
Test Object: 
    DoIPGeneralInactivityTimer
  
Test Precondition: 
    DoIP initialized.
    Routing activation done.
  
Test Execution: 
    01: Call DoIP_MainFunction() to elapse half of DoIPGeneralInactivityTime.
    02: Call DoIP_TpTransmit() and DoIP_MainFunction() to restart DoIPGeneralInactivityTime.
    03: Call DoIP_MainFunction() to elapse half of DoIPGeneralInactivityTime.
    04: VP(): Verify that timer is reset by checking that connection is not closed.
    05: Call DoIP_MainFunction() to elapse other half of DoIPGeneralInactivityTime.
    06: Call DoIP_MainFunction() to tick one more time so DoIPGeneralInactivityTime is elapsed.
    07: VP(): Verify that the connection is closed after DoIPGeneralInactivityTime
        DoIP_MainFunction() ticks, indicating that the call of DoIP_TpTransmit() in
        step 02 has reset general inactivity timer.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.GeneralInactivityTimer.Reset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1133</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03069_GeneralInactivityTimer_Reset_RxDiagMsg</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>9002</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that after routing activation is performed DoIP shall reset General
    inactivity timer whenever a valid diagnostic message is received.
  
Test Object: 
    DoIPGeneralInactivityTime
  
Test Precondition: 
    DoIP initialized.
    Routing activation done.
  
Test Execution: 
    01: Call DoIP_MainFunction() to elapse half of DoIPGeneralInactivityTime.
    02: Receive a diagnostic message and call DoIP_MainFunction() to restart
        DoIPGeneralInactivityTime.
    03: Call DoIP_MainFunction() to elapse other half of DoIPGeneralInactivityTime.
    04: VP(DoIP.EB.GeneralInactivityTimer.Reset):
        Verify that timer is reset by checking that connection is not closed.
    05: Call DoIP_MainFunction() to elapse other half of DoIPGeneralInactivityTime.
    06: Call DoIP_MainFunction() to tick one more time so DoIPGeneralInactivityTime is elapsed.
    07: VP(DoIP.EB.GeneralInactivityTimer.Reset, Tx_Diag_Ack_Nack_Start_2_Tx_Offline):
        Verify that the connection is closed after EBTEST_GEN_INACTIVITY_TIMEOUT
        DoIP_MainFunction() ticks, indicating that the the reception of valid diagnostic message
        in step 02 has reset general inactivity timer.
        This also verifies the transition from TX_DIAG_ACK_NACK_START to TX_OFFLINE.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.GeneralInactivityTimer.Reset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_Start_2_Tx_Offline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>773</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1134</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03070_IfRxIndication_ActivationLineInactive</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>9122</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP_SoAdIfRxIndication() is called while activation line state is
    inactive, DoIP shall ignore the request.
  
Test Object: 
    DoIP_SoAdIfRxIndication().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to receive valid DoIP message prior a call to
        DoIP_ActivationLineSwitch(TRUE).
    02: VP(DoIP.SWS_DoIP_00202, DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse):
        Verify that frame is ignored - no response message have been sent.
        Instead the UDP socket gets immediately released.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>712</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1135</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03071_GeneralInactivityTimer_Reset_AliveResp</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>9197</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that after routing activation is performed DoIP shall reset General
    inactivity timer whenever valid Alive check response message is received, i.e. received
    Source address matches the registered one.
  
Test Object: 
    DoIPGeneralInactivityTime
  
Test Precondition: 
    DoIP initialized.
    Routing activation done.
  
Test Execution: 
    01: Call DoIP_MainFunction() to elapse half of DoIPGeneralInactivityTime.
    02: Call DoIP_SoAdTpCopyRxData() to receive Alive check response message.
    03: Call DoIP_MainFunction() to elapse other half of DoIPGeneralInactivityTime.
    04: VP(): Verify that timer is reset by checking that connection is not closed.
    05: Call DoIP_MainFunction() to elapse other half of DoIPGeneralInactivityTime.
    06: Call DoIP_MainFunction() to tick one more time so DoIPGeneralInactivityTime is elapsed.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.GeneralInactivityTimer.Reset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1136</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03072_DiagNackMsg_TxBlocked</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>9315</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP needs to send a diagnostic negative acknowledge message on TCP
    connection, the DoIP shall call SoAd_TpTransmit() with the  SoAdSrcPduId containing
    the Id of the according socket, the SoAdSrcPduInfoPtr.SduLength set to the size of the
    data to be transmitted.
    Test case verifies described functionality in case that diagnostic message is received while
    TX process is in progress.
  
Test Object: 
    Generating diagnostic negative acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to initiate a transmission (TX side) and DoIP_MainFunction()
        to process the transmission request.
    02: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit() is called with correct parameters.
    03: Initiate reception (RX side) of a diagnostic message with invalid source address on the
        same socket connection.
    04: VP(Rx_Diag_Header_2_Rx_Ack_Conf_Wait): Verify that transition
        RX_DIAG_HEADER - RX_ACK_CONF_WAIT has occurred.
    05: Query DoIP of available data on a connection by calling DoIP_SoAdTpCopyTxData().
    06: Call DoIP_SoAdTpCopyTxData() to fetch TX diagnostic message.
    07: Call DoIP_SoAdTpTxConfirmation() to confirm successful transmission of TX diag. message.
    08: VP(SWS_DoIP_00220: Verify that SoAd_TpTransmit() is called with correct parameters.
    09: Query DoIP of available data on a connection by calling DoIP_SoAdTpCopyTxData().
    10: Call DoIP_SoAdTpCopyTxData() to fetch RX diagnostic negative acknowledge message.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Diag_Header_2_Rx_Ack_Conf_Wait</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>740</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1137</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03073_GenHeaderNackMsg_TxBlocked</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>9542</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies the functionality of generating and sending generic header negative
    acknowledge while TX process is in progress.
  
Test Object: 
    Generic header negative acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to initiate a transmission (TX side) and DoIP_MainFunction()
        to process the transmission request.
    02: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit() is called with correct parameters.
    03: Initiate reception (RX side) of a diagnostic message with invalid generic header on the
        same socket connection.
    04: VP(DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Ack_Conf_Wait): Verify that transition from state
        RX_READY to state RX_ACK_CONF_WAIT has occurred.
    05: Query DoIP of available data on a connection by calling DoIP_SoAdTpCopyTxData().
    06: Call DoIP_SoAdTpCopyTxData() to fetch TX diagnostic message.
    07: Call DoIP_SoAdTpTxConfirmation() to confirm successful transmission of TX diag. message.
    08: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit() is called with correct parameters.
    09: Query DoIP of available data on a connection by calling DoIP_SoAdTpCopyTxData().
    10: Call DoIP_SoAdTpCopyTxData() to fetch generic header negative acknowledge message.
    11: Call DoIP_SoAdTpTxConfirmation() to confirm successful transmission of generic header
        negative acknowledge message.
    12: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Ack_Conf_Wait</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>749</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1138</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03074_DigMsgTx_PduR_BUFREQ_E_BUSY</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>9786</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when during diagnostic message TX process DoIP forwards calls of
    DoIP_SoAdTpCopyTxData() to the call of PduR_DoIPCopyTxData(), it also propagates
    PduR_DoIPCopyTxData() return value back to SoAd.
  
Test Object: 
    DoIP_SoAdTpCopyTxData()
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to request a transmission and DoIP_MainFunction() to process the
        transmission request.
    02: Call DoIP_SoAdTpCopyTxData() with SduLength = 0, to query available buffer size.
    03: Set PduR_DoIPCopyTxData stub to return BUFREQ_E_BUSY.
    04: Call DoIP_SoAdTpCopyTxData() with SduLength = 0, to query available buffer size.
    05: VP(DoIP.EB.CopyTxData.ReturnValue): Verify that DoIP_SoAdTpCopyTxData() returned
        BUFREQ_E_BUSY.
    06: Call DoIP_SoAdTpCopyTxData() to fetch the complete diagnostic message.
    07: VP(DoIP.EB.CopyTxData.ReturnValue): Verify that DoIP_SoAdTpCopyTxData() returned
        BUFREQ_E_BUSY.
    08: Set PduR_DoIPCopyTxData stub to return BUFREQ_OK.
    09: Repeat a call to DoIP_SoAdTpCopyTxData() to fetch diagnostic message payload.
    10: VP(DoIP.EB.CopyTxData.ReturnValue): Verify that DoIP_SoAdTpCopyTxData() returned BUFREQ_OK.
    11: Call DoIP_SoAdTpTxConfirmation() to confirm successful transmission diagnostic message.
    12: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.CopyTxData.ReturnValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1139</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03075_SoAd_TpTransmit_NOT_OK_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>9968</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when SoAd_TpTransmit() returns E_NOT_OK during the processing of
    DoIP_SoAdTpTxConfirmation(), DoIP module shall discard the message.
  
Test Object: 
    Generic header negative acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to initiate a transmission (TX side) and DoIP_MainFunction()
        to process the transmission request.
    02: Initiate reception (RX side) of a diagnostic message with invalid generic header on the
        same socket connection.
    03: Call DoIP_SoAdTpCopyTxData() to fetch TX diagnostic message.
    04: Set SoAd_TpTransmit stub to return E_NOT_OK.
    05: Call DoIP_SoAdTpTxConfirmation() to confirm successful transmission of TX diag. message.
    06: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit() is called with correct parameters.
    07: Query DoIP of available data on a connection by calling DoIP_SoAdTpCopyTxData().
    08: VP(SWS_DoIP_00223): Verify that BUFREQ_E_NOT_OK was returned, indicating that NACK message
        is not available, i.e. message has been discarded.
    09: Set SoAd_TpTransmit stub to return E_OK.
    10: Initiate reception of valid diagnostic message.
    11: VP(SWS_DoIP_00129): Verify that positive acknowledge diagnostic message has been
        transmitted, indicating that RX state machine is reset during confirmation.
    12: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1140</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03076_Discard_VehicleIdReqOnTcp</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>10192</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the cases when DoIP message with payload Type 0x0001, 0x0002 or 0x0003 is
    received on the configured Tcp connection, DoIP module shall discard the message and generic
    header negative acknowledge message shall be sent with NACK code 0x01.
  
Test Object: 
    DoIP_SoAdTpCopyRxData().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing activation done.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() with message payload type =
        0x0001(vehicle identification request). Payload length for this message type is 0.
    02: VP(DoIP.SWS_DoIP_00061): Verify that DoIP has generated Generic header negative
        acknowledge message, with NACK code set to 0x01.
    03: Call DoIP_SoAdTpCopyRxData() with payload type = 0x0002(vehicle identification request with
        EID) to indicate reception of DoIP generic header. Payload length for this message type
        is 6.
    04: Call DoIP_SoAdTpCopyRxData() to indicate reception of diagnostic message payload.
    05: VP(DoIP.SWS_DoIP_00062): Verify that DoIP has generated Generic header negative
        acknowledge message, with NACK code set to 0x01.
    06: Call DoIP_SoAdTpCopyRxData() with payload type = 0x0003(vehicle identification request with
        VIN) to indicate reception of DoIP generic header. Payload length for this message type
        is 17.
    07: Call DoIP_SoAdTpCopyRxData() to indicate reception of diagnostic message payload.
    08: VP(DoIP.SWS_DoIP_00067, DoIP.EB.TcpRxSM.Rx_Discard_Msg_2_Rx_Ack_Conf_Wait): Verify
        that DoIP has generated Generic header negative acknowledge message, with NACK code set to
        0x01.
    09: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00062</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00067</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Discard_Msg_2_Rx_Ack_Conf_Wait</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>764</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1141</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03077_Discard_DiagnosticReqOnTcp</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>10357</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the cases when DoIP message with payload Type 0x4003 or 0x4001 is received
    on the configured Tcp connection, DoIP module shall discard the message and generic header
    negative acknowledge message shall be sent with NACK code 0x01.
  
Test Object: 
    DoIP_SoAdTpCopyRxData().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing activation done.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type =
        0x4003(diagnostic power mode information request). Payload length for this
        message type is 0.
    02: VP(DoIP.SWS_DoIP_00090): Verify that DoIP has generated Generic header negative
        acknowledge message, with NACK code set to 0x01.
    03: Call transmission confirmation to confirm NACK.
    04: Call DoIP_SoAdIfRxIndication() with message payload type =
        0x4001(diagnostic entity status request). Payload length for this message type is 0.
    05: VP(DoIP.SWS_DoIP_00094): Verify that DoIP has generated Generic header negative
        acknowledge message, with NACK code set to 0x01.
    06: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00090</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1142</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03078_Discard_TcpMessagesOnUdp</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>10473</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the cases when DoIP message with payload Type 0x0005 (Routing activation
    request) or 0x8001 (Diagnostic message) is received on the configured Udp connection,
    DoIP module shall discard the message and generic header negative acknowledge message shall be
    sent with NACK code 0x01.
  
Test Object: 
    DoIP_SoAdIfRxIndication().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to send the DoIP message with 0x0005 payload type.
    02: VP(DoIP.SWS_DoIP_00101): Verify that generic header negative acknowledge message was
        sent with NACK code 0x01 and payload type 0x0000.
    03: Call DoIP_SoAdIfTxConfirmation().
    04: Call DoIP_SoAdIfRxIndication() to send the DoIP message with 0x8001 payload type.
    05: VP(DoIP.SWS_DoIP_00121): Verify that generic header negative acknowledge message was
        sent with NACK code 0x01 and payload type 0x0000.
    06: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1143</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03079_RxOnActivationLineInactive</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>10617</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP_SoAdTpStartOfReception() is called and activation line status
    is DOIP_ACTIVATION_LINE_INACTIVE the DoIP module shall ignore all requests and return a negative
    value as a return value.
  
Test Object: 
    DoIP_SoAdTpStartOfReception().
  
Test Precondition: 
    DoIP initialized.
    DOIP_ACTIVATION_LINE_INACTIVE
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception().
    02: VP(): Verify that DoIP_SoAdTpStartOfReception() returned BUFREQ_E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1144</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03080_AvailableDataPtr_CopyTxData_SduLength_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>10673</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if the function DoIP_SoAdTpCopyTxData() is called  after a successful
    call to SoAd_TpTransmit() with a valid TxPduId and the PduInfoPtr.SduLength is set to 0 the
    DoIP returns BUFREQ_OK and that availableDataPtr is set to the total available data size of the
    current DoIP message to be transmitted.
  
Test Object: 
    DoIP_SoAdTpCopyTxData with PduInfoPtr.SduLength set to 0
  
Test Precondition: 
    DoIP initialized.
    Initiated Tp reception on TcpCon_0.
  
Test Execution: 
    01: Send valid routing activation message from Tester_1 (SA_1) on TcpCon_0.
    02: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    03: VP(): Verify that AvailableDataPtr is set to the same value as the
        EBTEST_ROUTE_ACT_RESPONSE_LENGTH.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1145</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03081_DiagMsgRx_Loop</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>10759</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies the process of receiving diagnostic message and generating positive
    acknowledge message. Test performs RX and TX operation in a loop, thus testing resource
    (buffer) acquire/release process.
  
Test Object: 
    DoIPGeneralInactivityTime
  
Test Precondition: 
    DoIP initialized.
    Routing activation done.
  
Test Execution: 
    01: Execute steps 02-04 in the loop:
    02: Receive valid diagnostic message.
    03: Fetch diagnostic acknowledge message.
    04: VP(): Verify that the transmitted acknowledge message has expected length and content.
    05: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1146</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03082_SoAd_TpTransmit_NOT_OK_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>10881</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when SoAd_TpTransmit() returns E_NOT_OK during the transmission of
    positive acknowledge message, DoIP module shall discard the message reset RX state machine and
    release buffers.
  
Test Object: 
    Generic header negative acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Set SoAd_TpTransmit stub to return E_NOT_OK.
    02: Receive valid diagnostic message on TcpCon0.
    03: Call DoIP_SoAdTpCopyTxData() with SduLength set to 0 to get the size of available Tx message.
    04: VP(SWS_DoIP_00223): Verify that BUFREQ_E_NOT_OK was returned, indicating that NACK message
        is not available, i.e. message has been discarded.
    05: Set SoAd_TpTransmit stub to return E_OK.
    06: Repeat reception of a valid diagnostic message on TcpCon0.
    07: VP(SWS_DoIP_00129): Verify that positive acknowledge message has been transmitted, verifying
        that RX state machines and buffers are reset after SoAd_TpTransmit() returned E_NOT_OK.
    08: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1147</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03083_RoutActResp_SUCCESS_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>11023</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when routing activation request message is received and all checks
    have successfully passed, DoIP module shall send a routing activation response message with the
    activation response code set to 0x10. This test verifies test configuration with multiple
    Routing activation objects configured.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Send routing activation request with the expected (configured) values of source address
        and activation number.
    02: VP(): Verify that DoIP has generated routing activation response message, with a correct
        parameters and routing activation response code set to 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
    03: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1148</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03084_DiagAckNackStart_Idle</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>11120</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies Tx state transition from state TX_DIAG_ACK_NACK_START to state TX_IDLE.
  
Test Object: 
    Tx State machine.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send diagnostic message on a TCP socket connection 0.
    02: Call DoIP_SoAdTpTxConfirmation().
    03: VP(Tx_Diag_Ack_Nack_Start_2_Tx_Idle): Verify that state transition TX_DIAG_ACK_NACK_START to
        TX_IDLE has occurred.
    04: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Diag_Ack_Nack_Start_2_Tx_Idle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>774</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1149</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03085_AvailableDataPtr_CopyTxData_SduLength_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>11213</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if DoIP_SoAdTpCopyTxData() is called for a connection for which
    transmission is not initiated, i.e. DoIP_SoAdTpStartOfReception() not called, DoIP will
    return BUFREQ_E_NOT_OK indicating that data has not been copied.
  
Test Object: 
    DoIP_SoAdTpCopyTxData()
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyTxData() before the call to DoIP_SoAdTpStartOfReception().
    02: VP(): Verify that DoIP_SoAdTpCopyTxData() has returned BUFREQ_E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1150</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03086_VehicleIdentificationRequestGIDSync</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>11273</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that "GID" of vehicle identification response/vehicle announcement message
    contains same value as DoIPGID when DoIPGID is set, parameter DoIPUseEIDasGID is set to false
    and Dynamic GID Synchronization is disabled.
  
Test Object: 
    DoIPGID
    VIN/GID status
    Vehicle identification response/vehicle announcement message
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type =  0x0001 (Vehicle identification
        request) which has payload length = 0 bytes.
    02: Confirm vehicle identification response transmission.
    03: VP(DoIP.EB.SWS_DoIP_00078, DoIP.EB.SWS_DoIP_00088): Verify that Vehicle identification
        response / vehicle announcement message was sent and contains DoIPGID as "GID" and
        0x10U as VIN/GID status.
    04: Confirm vehicle announcement transmission.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1151</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03087_SoAdIfTxConfirmation_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>11392</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case when function DoIP_SoAdIfTxConfirmation() is called to confirm PDU
    transmission on UDP connection and the attempt to retrieve SoConId by calling SoAd_GetSoConId()
    fails.
  
Test Object: 
    DoIP_SoAdIfTxConfirmation().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Set SoAd_GetSoConId_Stub to return E_NOT_OK.
    02: Call DoIP_SoAdIfRxIndication() with message
        payload type = 0x0001(vehicle identification request) and default protocol type (0xFF).
    03: Call DoIP_SoAdIfTxConfirmation().
    04: VP(DoIP.dsn.Func0124.UdpReleaseRemoteAddr.GetSoConId_NOK): Verify that
        SoAd_ReleaseRemoteAddr() was not called as call of SoAd_GetSoConId() has failed.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.GetSoConId_NOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>711</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1152</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03088_Udp_GenHeaderNack_DefProtoV_InvalidPayload</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>11491</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if an Default Protocol Version with any type of payload that is not
    Vehicle ID is used in DoIP header, NACK code 0x00 is sent and payload type 0x0000.
  
Test Object: 
    DoIP_SoAdIfRxIndication().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to send the DoIP message with with default protocol version
        and payload type that is not Vehicle ID.
    02: VP(): Verify that the complete message have been transmitted, with NACK code 0x00 and
        payload type 0x0000.
    03: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1153</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03089_GeneralInactivityTimer_GNACK_NoReset</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>11593</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that DoIP message that contains generic header error received before a valid
    Routing activation does not start nor reset GeneralInactivityTimer.
  
Test Object: 
    DoIPGeneralInactivityTimer
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() to initiate Tp reception on TcpCon_0.
    02: Call DoIP_MainFunction() EBTEST_INITAL_INACTIVITY_TIMEOUT - 1 times and verify that timer
        has not elapsed.
    03: Send message on a TcpCon_0 with a generic header containing invalid protocol information.
    04: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP and verify that DoIP
        has generated Generic header negative acknowledge message.
    05: Call DoIP_SoAdTpTxConfirmation() to confirm transmission of message acknowledgment.
    06: Call DoIP_MainFunction() to tick one more time so DoIPInitialInactivityTimer elapses.
    07: VP(DoIP.EB.GeneralInactivityTimer.NoReset): Verify that reception of DoIP message that
        contains generic header error did not start nor reset general inactivity timer, i.e.
        that initial inactivity timer was not affected by this reception, since it has expired.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.GeneralInactivityTimer.NoReset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1154</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03090_GeneralInactivityTimer_DiagMsg_NoReset</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>11720</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that received DoIP diagnostic message before a valid Routing activation
    does not start nor reset GeneralInactivityTimer.
  
Test Object: 
    DoIPGeneralInactivityTimer
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() to initiate Tp reception on TcpCon_0.
    02: Call DoIP_MainFunction() EBTEST_INITAL_INACTIVITY_TIMEOUT - 1 times and verify that timer
        has not elapsed.
    03: Send generic header of a diagnostic message on a TCP socket connection 0.
    04: Send diagnostic message header with a valid source and target addresses but before
        route is activated.
    05: Send diagnostic message payload.
    06: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP and verify that DoIP
        has generated Generic header negative acknowledge message.
    07: Call DoIP_SoAdTpTxConfirmation() to confirm transmission of message acknowledgment.
    08: Call DoIP_MainFunction() to tick one more time so DoIPInitialInactivityTimer elapses.
    09: VP(DoIP.EB.GeneralInactivityTimer.NoReset): Verify that reception of a valid DoIP message
         did not start nor reset general inactivity timer, i.e. that initial inactivity timer was
         not affected by this reception, since it has expired.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.GeneralInactivityTimer.NoReset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1155</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03091_GeneralInactivityTimer_Rx_GNACK_NoReset</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>11882</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when generic header negative acknowledge message (payload type = 0x0000)
    is received before a valid Routing activation, it does not start nor reset
    GeneralInactivityTimer.
  
Test Object: 
    DoIPGeneralInactivityTimer
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() to initiate Tp reception on TcpCon_0.
    02: Call DoIP_MainFunction() EBTEST_INITAL_INACTIVITY_TIMEOUT - 1 times and verify that timer
        has not elapsed.
    03: Send generic header of a NACK message on a TCP socket connection 0.
    04: Send NACK message payload.
    05: Call DoIP_SoAdTpTxConfirmation() to confirm transmission of message acknowledgment.
    06: Call DoIP_MainFunction() to tick one more time so DoIPInitialInactivityTimer elapses.
    07: VP(DoIP.EB.GeneralInactivityTimer.NoReset): Verify that reception of DoIP message that
        contains generic header error did not start nor reset general inactivity timer, i.e.
        that initial inactivity timer was not affected by this reception, since it has expired.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.GeneralInactivityTimer.NoReset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1156</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03092_GeneralInactivityTimer_Reset_CopyTxData</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>12002</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that after routing activation is performed, DoIP resets general
    inactivity timer whenever a segment of diagnostic message payload is transmitted.
  
Test Object: 
    DoIPGeneralInactivityTimer
  
Test Precondition: 
    DoIP initialized.
    Routing activation done.
  
Test Execution: 
    01: Call DoIP_TpTransmit() and DoIP_MainFunction() to initiate transmission of
        diagnostic message.
    02: Call DoIP_MainFunction() to elapse half of DoIPGeneralInactivityTime.
    03: Call DoIP_SoAdTpCopyTxData() to transmit diagnostic message segment.
    04: Call DoIP_MainFunction() to elapse half of DoIPGeneralInactivityTime.
    05: VP(): Verify that timer is reset by checking that connection is not closed.
    06: Call DoIP_MainFunction() to elapse other half of DoIPGeneralInactivityTime.
    07: Call DoIP_MainFunction() to tick one more time so DoIPGeneralInactivityTime is elapsed.
    08: VP(): Verify that the connection is closed after EBTEST_GEN_INACTIVITY_TIMEOUT
        DoIP_MainFunction() ticks, indicating that the transmission of a segment of diagnostic
        message payload in step 03 has reset general inactivity timer.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.GeneralInactivityTimer.Reset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1157</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03093_GeneralInactivityTimer_Reset_ULNoBuff_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>12132</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that after routing activation is performed DoIP shall reset General
    inactivity timer whenever a valid diagnostic message is received, even if upper layer cannot
    accept the message due to insufficient buffers.
    UL reports insufficient buffers upon PduR_DoIPStartOfReception() call.
  
Test Object: 
    DoIPGeneralInactivityTime
  
Test Precondition: 
    DoIP initialized.
    Routing activation done.
  
Test Execution: 
    01: Configure PduR stub PduR_DoIPStartOfReception() to return BUFREQ_E_OVFL.
    02: Call DoIP_MainFunction() to elapse half of DoIPGeneralInactivityTime.
    03: Receive a diagnostic message and call DoIP_MainFunction() to restart
        DoIPGeneralInactivityTime.
    04: Call DoIP_MainFunction() to elapse other half of DoIPGeneralInactivityTime.
    05: VP(DoIP.EB.GeneralInactivityTimer.Reset):
        Verify that timer is reset by checking that connection is not closed.
    06: Call DoIP_MainFunction() to elapse other half of DoIPGeneralInactivityTime.
    07: Call DoIP_MainFunction() to tick one more time so DoIPGeneralInactivityTime is elapsed.
    08: VP(DoIP.EB.GeneralInactivityTimer.Reset): Verify that the connection is closed after
        EBTEST_GEN_INACTIVITY_TIMEOUT DoIP_MainFunction() ticks, indicating that the
        reception of a valid diagnostic message, even if upper layer cannot accept the message
        due to insufficient buffers, resets general inactivity timer.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.GeneralInactivityTimer.Reset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1158</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03094_GeneralInactivityTimer_Reset_ULNoBuff_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>12258</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that after routing activation is performed DoIP shall reset General
    inactivity timer whenever a valid diagnostic message is received, even if upper layer cannot
    accept the message due to insufficient buffers.
    UL reports insufficient buffers during PduR_DoIPCopyRxData() is called.
  
Test Object: 
    DoIPGeneralInactivityTime
  
Test Precondition: 
    DoIP initialized.
    Routing activation done.
  
Test Execution: 
    01: Configure PduR stub PduR_DoIPStartOfReception() to return BUFREQ_E_OVFL.
    02: Call DoIP_MainFunction() to elapse half of DoIPGeneralInactivityTime.
    03: Receive a diagnostic message and call DoIP_MainFunction() to restart
        DoIPGeneralInactivityTime.
    04: Call DoIP_MainFunction() to elapse other half of DoIPGeneralInactivityTime.
    05: VP(DoIP.EB.GeneralInactivityTimer.Reset):
        Verify that timer is reset by checking that connection is not closed.
    06: Call DoIP_MainFunction() to elapse other half of DoIPGeneralInactivityTime.
    07: Call DoIP_MainFunction() to tick one more time so DoIPGeneralInactivityTime is elapsed.
    08: VP(DoIP.EB.GeneralInactivityTimer.Reset): Verify that the connection is closed after
        EBTEST_GEN_INACTIVITY_TIMEOUT DoIP_MainFunction() ticks, indicating that the
        reception of a valid diagnostic message, even if upper layer cannot accept the message
        due to insufficient buffers, resets general inactivity timer.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.GeneralInactivityTimer.Reset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1159</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03095_GeneralInactivityTimer_Reset_RoutAct</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>12380</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that after routing activation is performed DoIP shall reset General
    inactivity timer on all subsequently received routing activation messages.
  
Test Object: 
    DoIPGeneralInactivityTime
  
Test Precondition: 
    DoIP initialized.
    Routing activation done.
  
Test Execution: 
    01: Call DoIP_MainFunction() to elapse half of DoIPGeneralInactivityTime.
    02: Receive a valid routing activation message and call DoIP_MainFunction() to restart
        DoIPGeneralInactivityTime.
    03: Call DoIP_MainFunction() to elapse other half of DoIPGeneralInactivityTime.
    04: VP(DoIP.EB.GeneralInactivityTimer.Reset):
        Verify that timer is reset by checking that connection is not closed.
    05: Call DoIP_MainFunction() to elapse other half of DoIPGeneralInactivityTime.
    06: Call DoIP_MainFunction() to tick one more time so DoIPGeneralInactivityTime is elapsed.
    07: VP(): Verify that the connection is closed after EBTEST_GEN_INACTIVITY_TIMEOUT
        DoIP_MainFunction() ticks, indicating that reception of routing activation message in
        step 02 has reset general inactivity timer.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.GeneralInactivityTimer.Reset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1160</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03096_UdpReleaseRemoteAddr_IfTransmitNotOk</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>12479</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a request was received via UDP connection and sending of
    the response message fails (SoAd_IfTransmit() returns NOT_OK), the UDP connections shall
    be released.
    For this test a valid Diagnostic entity status request/response sequence is used.
  
Test Object: 
    Release of UDP remote address.
  
Test Precondition: 
    DoIP initialized.
    DoIPEntityStatusMaxByteFieldUse set to true.
  
Test Execution: 
    01: Prepare SoAd_IfTransmit() to return E_NOT_OK.
    02: Call DoIP_SoAdIfRxIndication() with message payload type = 0x4001
        (Diagnostic entity status request).  Payload length for this message type is 0.
    03: VP(): Verify that SoAd_IfTransmit() was called (to send diagnostic entity status response).
    04: VP(): Verify that due to the failed transmit request the remote address gets released
        for the corresponding UDP connection.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.IfTransmitNotOk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>713</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1161</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03097_UdpReleaseRemoteAddr_MissingIfTxConfirmation</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>12571</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a request was received via UDP connection and sending of
    the response message was successful (SoAd_IfTransmit() returns E_OK), a deadline monitoring
    shall be started to ensure that corresponding UDP connection get released if SoAd does not call
    DoIP_SoAdIfTxConfirmation() for that connection.
    For this test a valid Diagnostic entity status request/response sequence is used.
  
Test Object: 
    Deadline monitoring of UDP remote address release.
  
Test Precondition: 
    DoIP initialized.
    DoIPEntityStatusMaxByteFieldUse set to true.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to start timer for UdpCon0.
    02: Call DoIP_MainFunction() to tick timer once.
    03: Call DoIP_SoAdIfRxIndication() to start timer for UdpCon1.
    04: Call DoIP_MainFunction() to tick timer once.
    05: Call DoIP_SoAdIfRxIndication() to start timer for UdpCon2.
    06: Call DoIP_MainFunction() to tick timer DOIP_RELEASE_REMOTEADDR_TIMEOUT times - 3
        DoIP_MainFunction() calls.
    07: VP(): Verify that DoIP_MainFunction() did not release any UDP connection.
    08: Call DoIP_MainFunction() to trigger the first UDP connection release.
    09: VP(): Verify that the last DoIP_MainFunction() call triggered UDP release for UdpCon0.
    10: Call DoIP_MainFunction() to trigger next UDP connection release.
    11: VP(): Verify that the last DoIP_MainFunction() call triggered UDP release for UdpCon1.
    12: Call DoIP_MainFunction() to trigger next UDP connection release.
    13: VP(): Verify that the last DoIP_MainFunction() call triggered UDP release for UdpCon2.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.MissingIfTxConfirmation</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>714</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1162</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03098_DiagMsg_SA_USED_NACK6_ROUTE_INACTIVE_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>12720</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP module receives a valid diagnostic message (channel exist
    with a received combination of SA and TA) on an unregistered Tcp connection (SA is not assigned
    to that connection), and the received SA is registered at another Tcp connection, and
    DoIPResponseBeforeRoutingActivation is set to DOIP_ENABLE_ALL_DIAG_NACK, DoIP shall discard the
    received message and return a diagnostic negative acknowledge message with negative acknowledge
    code set to 0x06, indicating that the route is not activated.
  
Test Object: 
    Diagnostic message reception, NACK code 0x06.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPResponseBeforeRoutingActivation set to DOIP_ENABLE_ALL_DIAG_NACK.
  
Test Execution: 
    01: Send valid routing activation request to TcpCon1.
    02: Call DoIP_SoAdTpStartOfReception() for TcpCon0.
    03: Send diagnostic message to TcpCon0 with source and target address that match the route
        activated on TcpCon1 in step 1.
    04: VP(DoIP.EB.DiagMsgNack_RouteInactive_SourceAddressInUse):
        Verify that DoIP has generated diagnostic negative acknowledge message on TcpCon0, with a
        negative acknowledge code set to 0x06 (DOIP_ROUTING_INACTIVE), and that the message was
        discarded (PduR_DoIPStartOfReception() was not called).
    05: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon1 (Channel_0) to verify that the connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DiagMsgNack_RouteInactive_SourceAddressInUse</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>729</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1163</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03099_IfRxIndication_IncompleteUdpFrame</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>12851</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that when DoIP_SoAdIfRxIndication() is called with a frame that contains
    the complete generic header, but the frame size is smaller then the message size indicated
    by Payload length field, DoIP shall ignore the frame.
  
Test Object: 
    DoIP_SoAdIfRxIndication().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to indicate reception of incomplete Vehicle identification
        request with EID message. Generic header payload type is set correctly, but UDP frame
        length is one byte smaller then the required length.
    02: VP(): Verify that frame is ignored - no response / NACK message have been sent and UDP
              socket gets released.
    03: Call DoIP_SoAdIfRxIndication() to indicate reception of incomplete Vehicle identification
        request with VIN message. Generic header payload type is set correctly, but UDP frame
        length is one byte smaller then the required length.
    04: VP(): Verify that frame is ignored - no response / NACK message have been sent and UDP
              socket gets released.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SoAdIfRxIndication.IncompleteUdpFrame</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1164</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03100_IfTxConfirmation_After_UdpReleaseRemoteAddr</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>12960</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that DoIP_SoAdIfTxConfirmation() call will release UDP connection and try to
    the timer even if it was stopped in the last DoIP_MainFunction() call.
  
Test Object: 
    Deadline monitoring of UDP remote address release.
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to start timer for UdpCon0.
    02: Call DoIP_MainFunction() to tick timer DOIP_RELEASE_REMOTEADDR_TIMEOUT times - 1
        DoIP_MainFunction() calls.
    03: VP(): Verify that DoIP_MainFunction() did not release any UDP connection.
    04: Call DoIP_MainFunction() one more time to trigger the UDP connection release.
    05: VP(): Verify that the last DoIP_MainFunction() call triggered UDP release for UdpCon0.
    06: Call DoIP_SoAdIfTxConfirmation() to try to stop timer one more time.
    07: VP(): Verify that DoIP_SoAdIfTxConfirmation() called SoAd_ReleaseRemoteAddr() even after
              releasing the UDP connection in the last DoIP_MainFunction() call.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.MissingIfTxConfirmation</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>714</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1165</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03101_IfTxConfirmation_ForSecondUDPConnection_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>13068</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies if DoIP_SoAdIfTxConfirmation() was called for the chronologically second
    active UDP connection DoIP will release exact UDP connection and stop the timer for correct one.
  
Test Object: 
    Deadline monitoring of UDP remote address release.
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to start timer for UdpCon0.
    02: Call DoIP_MainFunction() to tick timer once so connections have different timeout values.
    03: Call DoIP_SoAdIfRxIndication() to start timer for UdpCon1.
    04: Call DoIP_SoAdIfTxConfirmation() for UdpCon1.
    05: VP(): Verify that DoIP_SoAdIfTxConfirmation() called SoAd_ReleaseRemoteAddr() for UdpCon1.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.MissingIfTxConfirmation</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>714</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1166</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03102_IfTxConfirmation_ForSecondUDPConnection_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>13163</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that timer will be set correctly for the next UDP timeout after the first
    UDP timeout was released upon DoIP_SoAdIfTxConfirmation() call. Further DoIP shall release
    next timeouts at the correct time.
  
Test Object: 
    Deadline monitoring of UDP remote address release.
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to start Udp release timer for UdpCon0.
    02: Call DoIP_MainFunction() to tick timer once so that next timer (UdpCon2) has a different
        value.
    03: Call DoIP_SoAdIfRxIndication() to start timer for UdpCon2.
    04: Call DoIP_SoAdIfRxIndication() to start Udp release timer for UdpCon1. UdpCon1 and UdpCon2
        expire at the same time.
    05: Call DoIP_SoAdIfTxConfirmation() for UdpCon0.
    06: VP(): Verify that DoIP_SoAdIfTxConfirmation() called SoAd_ReleaseRemoteAddr() for UdpCon0.
    07: Call DoIP_MainFunction() to tick timer DOIP_RELEASE_REMOTEADDR_TIMEOUT times - 1
        DoIP_MainFunction() calls.
    08: VP(): Verify that DoIP_MainFunction() did not release any UDP connection.
    09: Call DoIP_MainFunction() to trigger the UDP connection release.
    10: VP(): Verify that DoIP_SoAdIfTxConfirmation() called SoAd_ReleaseRemoteAddr() for UdpCon1
              and UdpCon2.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.MissingIfTxConfirmation</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>714</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1167</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03103_GetAndResetMeasurementData_GenHdr</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>13301</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies functionality of DoIP_GetAndResetMeasurementData() for invalid Generic
    header.
  
Test Object: 
    DoIP_GetAndResetMeasurementData()
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing activation done for Tcp0 and Tcp1.
  
Test Execution: 
    01: Call DoIP_GetAndResetMeasurementData() with measurement index DOIP_MEAS_ALL
        and flag set to TRUE to reset all Measurement counters.
    02: Call DoIP_GetAndResetMeasurementData() with measurement index DOIP_MEAS_DROP_GENHDR.
    03: VP(DoIPGetAndResetMeasurementDataIndex, DoIPGetAndResetMeasurementData_Reset,
        DoIPGetAndResetMeasurementData_ResetAll): Verify that measurement data is set to 0.
    04: Call DoIP_SoAdTpCopyRxData() for reception of DoIP generic header with invalid payload
        length on Tcp0.
    05: Call DoIP_SoAdTpCopyRxData() for reception of DoIP generic header with invalid payload
        length on Tcp1.
    06: Call DoIP_GetAndResetMeasurementData() with DOIP_MEAS_DROP_GENHDR and NULL_PTR.
    07: VP(DoIPGetAndResetMeasurementData_DataPtr): Verify that function returned E_OK.
    08: Call DoIP_GetAndResetMeasurementData() with measurement index DOIP_MEAS_DROP_GENHDR and
        valid MeasurementDataPtr.
    09: VP(DoIPDroppedGenericHeaderFrames, DoIPGetAndResetMeasurementData_Count): Verify that
        measurement data equals the number of dropped datagrams caused by invalid Generic header.
    10: Call DoIP_GetAndResetMeasurementData() with not supported measurement index.
    11: VP(DoIPGetAndResetMeasurementData_NOT_OK): Verify that E_NOT_OK is returned.
    12: Call DoIP_GetAndResetMeasurementData() with measurement index DOIP_MEAS_ALL and flag set to
        FALSE.
    13: VP(DoIPGetAndResetMeasurementData_ResetAll): Verify that measurement data counter is not
        reset.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementDataIndex</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>813</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_Reset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>817</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_ResetAll</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>818</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_DataPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>820</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPDroppedGenericHeaderFrames</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>814</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>816</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_Count</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>822</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1168</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03104_GetAndResetMeasurementData_DiagMsg</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>13498</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies functionality of DoIP_GetAndResetMeasurementData() for invalid Diag
    message.
  
Test Object: 
    DoIP_GetAndResetMeasurementData()
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing activation done for Tcp0 and Tcp1.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() for reception of DoIP generic header and then diag
        message header with invalid Source address on Tcp0.
    02: Call DoIP_SoAdTpCopyRxData() for reception of DoIP generic header and then diag
        message header with invalid Source address on Tcp1.
    03: Call DoIP_GetAndResetMeasurementData() with DOIP_MEAS_DROP_DIAGMSG and NULL_PTR.
    04: VP(DoIPGetAndResetMeasurementData_DataPtr): Verify that function returned E_OK.
    05: Call DoIP_GetAndResetMeasurementData() with DOIP_MEAS_DROP_DIAGMSG and flag set to
        TRUE.
    06: VP(DoIPGetAndResetMeasurementData_MeasurementIdxType,DoIPDroppedGenericHeaderFrames,
           DoIPGetAndResetMeasurementData_Count): Verify that measurement data equals the number
           of dropped datagrams caused by invalid Diag headers.
    07: Call DoIP_GetAndResetMeasurementData() with measurement index DOIP_MEAS_DROP_DIAGMSG and
        flag set to FALSE to read out the counter.
    08: VP(DoIPGetAndResetMeasurementDataIndex, DoIPGetAndResetMeasurementData_Reset):
        Verify that measurement data is set to 0.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_DataPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>820</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPDroppedDiagnosticMessages</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>815</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_MeasurementIdxType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>824</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_Count</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>822</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1169</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03105_GetAndResetMeasurementData_MaxGenHdrCnt</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>13664</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that Generic header measurement counter does not overrun.
  
Test Object: 
    DoIP_GetAndResetMeasurementData()
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing activation done for Tcp0 and Tcp1.
  
Test Execution: 
    01: Set DoIP_MeasurementDropData_GenHdr counter to maximal value.
    02: Call DoIP_SoAdTpCopyRxData() for reception of DoIP generic header with invalid payload
        length on Tcp0.
    03: Call DoIP_SoAdTpCopyRxData() for reception of DoIP generic header with invalid payload
        length on Tcp1.
    04: Call DoIP_GetAndResetMeasurementData() with DOIP_MEAS_DROP_GENHDR.
    05: VP(): Verify that Generic header measurement counter did not overrun.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_NoOverrun</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>819</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1170</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03106_GetAndResetMeasurementData_MaxDiagMsgCnt</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>13777</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that Diag message measurement counter does not overrun.
  
Test Object: 
    DoIP_GetAndResetMeasurementData()
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing activation done for Tcp0 and Tcp1.
  
Test Execution: 
    01: Set DoIP_MeasurementDropData_DiagMsg counter to maximal value.
    02: Call DoIP_SoAdTpCopyRxData() for reception of DoIP generic header and then diag
        message header with invalid Source address on Tcp0.
    03: Call DoIP_SoAdTpCopyRxData() for reception of DoIP generic header and then diag
        message header with invalid Source address on Tcp1.
    04: Call DoIP_GetAndResetMeasurementData() with DOIP_MEAS_DROP_DIAGMSG.
    05: VP(): Verify that Diag message measurement counter did not overrun.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0126.EB.DoIPGetAndResetMeasurementData_NoOverrun</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>819</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1171</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03107_RoutActResp_NOTSECURE</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>13931</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when routing activation request message is received and the matching
    DoIPRoutingActivation has the attribute DoIPRoutingActivationSecurityRequired set to TRUE and
    the matching Tcp connection has the attribute DoIPTcpConnectionSecurityRequired set to
    FALSE, DoIP module shall send a routing activation response message with the activation response
    code set to 0x07 (DOIP_ROU_ACT_RESP_TCP_CONN_UNSECURED).
    This test verifies test configuration with multiple Routing activation objects configured.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPTcpConnection/DoIPTcpConnectionSecurityRequired is set to FALSE.
    DoIPRoutingActivationSecurityRequired is set to TRUE.
  
Test Execution: 
    01: Send routing activation request with the expected (configured) values of source address
        and activation number.
    02: VP(): Verify that DoIP has generated routing activation response message, with a correct
        parameters and routing activation response code set to 0x07
        (DOIP_ROU_ACT_RESP_TCP_CONN_UNSECURED).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00294</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>348</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1172</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03108_RoutActResp_SECURE_SUCCESS</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>14021</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when routing activation request message is received and the matching
    DoIPRoutingActivation has the attribute DoIPRoutingActivationSecurityRequired set to TRUE and
    the matching Tcp connection has the attribute DoIPTcpConnectionSecurityRequired set to
    TRUE, DoIP module shall send a routing activation response message with the activation response
    code set to 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
    This test verifies test configuration with multiple Routing activation objects configured.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPTcpConnection/DoIPTcpConnectionSecurityRequired is set to TRUE.
    DoIPRoutingActivationSecurityRequired is set to TRUE.
  
Test Execution: 
    01: Send routing activation request with the expected (configured) values of source address
        and activation number.
    02: VP(DoIP.dsn.Func0135.SecComForAllProtocolVersions.SecureTcpCon):
        Verify that DoIP has generated routing activation response message, with a correct
        parameters and routing activation response code set to 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00295</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>349</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.SecComForAllProtocolVersions.SecureTcpCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>880</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1173</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03109_LocalIpAddrAssignmentChg_DhcpHostNamePref</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>14117</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case when vendor specific name option is added to the DHCP host name.
  
Test Object: 
    Vehicle announcement messages.
  
Test Precondition: 
    DoIP initialized.
    Socket connection opened.
    DoIPDhcpHostNamePrefix string is defined.
  
Test Execution: 
    01: Call DoIP_LocalIpAddrAssignmentChg().
    02: VP(DoIP.dsn.Func0102.SWS_DoIP_00156_UserGetVin): Verify that SoAd_WriteDhcpHostNameOption()
        was called for this connection.
    03: VP(DoIP.dsn.Func0102.DoIPDhcpHostNamePrefix_Used): Verify that DoIPDhcpHostNamePrefix string
        was added to the DHCP host name after DoIP-.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0102.DoIPDhcpHostNamePrefix_Used</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>826</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1174</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03110_DiagMsg_SA_USED_NONACK_ROUTE_INACTIVE_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>14208</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP module receives a valid diagnostic message (channel exist
    with a received combination of SA and TA) on an unregistered Tcp connection (SA is not assigned
    to that connection), and the received SA is registered at another Tcp connection, and
    DoIPResponseBeforeRoutingActivation is set to DOIP_DISABLE_DIAG_NACK_0x06, DoIP shall discard
    the received message without sending diagnostic message negative acknowledge.
  
Test Object: 
    Diagnostic message reception.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPResponseBeforeRoutingActivation set to DOIP_DISABLE_DIAG_NACK_0x06.
  
Test Execution: 
    01: Send valid routing activation request to TcpCon1.
    02: Call DoIP_SoAdTpStartOfReception() for TcpCon0.
    03: Send diagnostic message to TcpCon0 with source and target address that match the route
        activated on TcpCon1 in step 1.
    04: VP(DoIP.EB.DiagMsgNack_RouteInactive_SourceAddressInUse):
        Verify that DoIP has not generated diagnostic negative acknowledge message on
        TcpCon0 (helper function called with DiagNackMsg set to NULL_PTR), and that the message
        was discarded (PduR_DoIPStartOfReception() was not called).
    05: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon1 (Channel_0) to verify that the connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DiagMsgNack_RouteInactive_SourceAddressInUse</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>729</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1175</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03111_PostBuildSelectable_Eid_LogAddr</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>14324</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies support of post-build selectable feature, by initializing DoIP with
    two different variants and verifying that Vehicle identification response message contains
    EID and Logical address field values that belong to different variant sets.
  
Test Object: 
    Post-build selectable support.
  
Test Precondition: 
    Two post-build variants configured.
  
Test Execution: 
    01: VP(DoIP.EB.PBSelectable.Master): Check that DevAuth_PBcfg.h exists and can be included.
    02: VP(DoIP.EB.PBSelectable.FileName): Verify that files DoIP_V1_PBcfg.h and DoIP_V2_PBcfg.h
        exist and are included.
    03: VP(DoIP.EB.PBSelectable.TypeName): Verify that types DoIP_V1_ConstConfigLayoutType,
        DoIP_V2_ConstConfigLayoutType, DoIP_V1_ConfigLayoutType and DoIP_V2_ConfigLayoutType exist.
    04: VP(DoIP.EB.PBSelectable.TypeName, DoIP.EB.PBSelectable.FileName): Call DoIP_Init()
        with DoIP_V1_ConfigLayout to initialize DoIP with V1 configuration. This verifies that
        DoIP_V1_ConfigLayout exist and indirectly that DoIP_V1_PBcfg.c is compiled and linked.
    05: Open all socket connections.
    06: Call DoIP_SoAdIfRxIndication() with Vehicle identification request message.
    07: VP(PostBuildSelectable.DoIPEid, PostBuildSelectable.DoIPLogicalAddress):
        Verify that transmitted Vehicle identification response message contains EID and Logical
        address values that match configuration parameters set in variant V1.
    08: VP(DoIP.EB.PBSelectable.TypeName, DoIP.EB.PBSelectable.FileName): Call DoIP_Init()
        with DoIP_V2_ConfigLayout to initialize DoIP with V2 configuration. This verifies that
        DoIP_V2_ConfigLayout exist and indirectly that DoIP_V2_PBcfg.c is compiled and linked.
    09: Open all socket connections.
    10: Call DoIP_SoAdIfRxIndication() with Vehicle identification request message.
    11: VP(PostBuildSelectable.DoIPEid, PostBuildSelectable.DoIPLogicalAddress):
        Verify that transmitted Vehicle identification response message contains EID and Logical
        address values that match configuration parameters set in variant V2. This also verifies
        that DoIP contains two post-build selectable variants and that DoIP can be initialized with
        both of them.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.PBSelectable.Master</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>484</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.PBSelectable.FileName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.PBSelectable.TypeName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>483</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.PostBuildSelectable.DoIPEid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>839</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.PostBuildSelectable.DoIPLogicalAddress</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>840</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1176</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03112_PostBuildSelectable_TargetAddr</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>14473</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies support of post-build selectable feature by initializing DoIP with
    two different variants and sending and receiving diagnostic messages containing target
    addresses that belong to different variant sets.
  
Test Object: 
    Post-build selectable support.
  
Test Precondition: 
    Two post-build variants configured.
  
Test Execution: 
    01: Call DoIP_Init() with DoIP_V1_ConfigLayout to initialize DoIP with V1 configuration.
    02: Open all socket connections.
    03: Call DoIP_SoAdTpStartOfReception() for TcpCon_0.
    04: Send routing activation message on TcpCon_0 to activate Channel_0 (SA_0, TA_0) and
        Channel_2 (SA_0, TA_1).
    05: VP(PostBuildSelectable.DoIPTargetAddressValue):
        Verify successful transmission and reception of diagnostic messages on Channel_0 and
        Channel_2, using target addresses from V1, which implicitly verifies that DoIP was
        initialized with target address values from V1 variant.
    06: Call DoIP_Init() with DoIP_V2_ConfigLayout to initialize DoIP with V2 configuration.
    07: Open all socket connections.
    08: Call DoIP_SoAdTpStartOfReception() for TcpCon_0.
    09: Send routing activation message on TcpConn_0 to activate Channel_0 (SA_0, TA_0) and
        Channel_2 (SA_0, TA_1).
    10: VP(PostBuildSelectable.DoIPTargetAddressValue):
        Verify successful transmission and reception of diagnostic messages on Channel_0 and
        Channel_2, using target addresses from V2, which implicitly verifies that DoIP was
        initialized with target address values from V2 variant.
        This also verifies that DoIP contains two post-build selectable variants and that DoIP
        can be initialized with both of them.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.EB.PostBuildSelectable.DoIPTargetAddressValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>841</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1177</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03113_VehicleID_CorrectProtocolVersion</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>14619</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0001 and with protocol type 2 or 3
    is received on the configured Udp connection, DoIP module shall respond with a Vehicle identification response
    with same protocol type as received.
  
Test Object: 
    Vehicle announcement messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to true.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0001(vehicle identification request) and
        protocol type ISO13400-2:2012 (0x02).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012, DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion):
        Verify that the expected Vehicle identification response message was sent with same protocol version as
        received (0x02).
    03: Set PduInfo to protocol type ISO13400-2:2019 (0x03).
    04: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0001(vehicle identification request) and
        protocol type ISO13400-2:2019 (0x03).
    05: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019, DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion):
        Verify that the expected Vehicle identification response message was sent with same protocol version as
        received (0x03).
    06: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>871</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>873</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1178</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03114_VehicleIDEid_WithProtocolVersion2and3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>14747</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0002 (Vehicle ID request with EID) and with protocol type 2 or 3
    is received on the configured Udp connection, DoIP module shall respond with a Vehicle identification response
    with same protocol type as received.
  
Test Object: 
    Vehicle announcement messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to true.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0002(vehicle identification request with EID) and
        protocol type ISO13400-2:2012 (0x02).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012, DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion):
        Verify that the expected Vehicle identification response message was sent with same protocol version as
        received (0x02).
    03: Set PduInfo to protocol type ISO13400-2:2019 (0x03).
    04: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0002(vehicle identification request with EID) and
        protocol type ISO13400-2:2019 (0x03).
    05: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019, DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion):
        Verify that the expected Vehicle identification response message was sent with same protocol version as
        received (0x03).
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>871</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>873</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1179</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03115_VehicleIDVin_WithProtocolVersion2and3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>14866</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0003 (Vehicle ID request with VIN) and with protocol type 2 or 3
    is received on the configured Udp connection, DoIP module shall respond with a Vehicle identification response
    with same protocol type as received.
  
Test Object: 
    Vehicle announcement messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to true.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0003(vehicle identification request with VIN) and
        protocol type ISO13400-2:2012 (0x02).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012, DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion):
        Verify that the expected Vehicle identification response message was sent with same protocol version as
        received (0x02).
    03: Set PduInfo to protocol type ISO13400-2:2019 (0x03).
    04: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0003(vehicle identification request with VIN) and
        protocol type ISO13400-2:2019 (0x03).
    05: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019, DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion):
        Verify that the expected Vehicle identification response message was sent with same protocol version as
        received (0x03).
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>871</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>873</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1180</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03116_EntityStatusNoTcp_WithProtocolVersion2and3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>14988</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type for Entity Status (0x4001) and with protocol type 2 or 3
    is received on the configured Udp connection, DoIP module shall respond with same protocol type as received.
  
Test Object: 
    Entity status messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to true.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type for Entity Status and protocol type ISO13400-2:2012 (0x02).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012, DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion):
        Verify that the expected response message was sent with same protocol version as received (0x02).
    03: Set PduInfo to protocol type ISO13400-2:2019 (0x03).
    04: Call DoIP_SoAdIfRxIndication() with message payload type for Entity Status and protocol type ISO13400-2:2019 (0x03).
    05: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019, DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion):
        Verify that the expected response message was sent with same protocol version as received (0x03).
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>871</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>873</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1181</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03117_RoutingActivation_WithProtocolVersion2and3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>15105</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP receives routing activation request message with protocol type 2 or 3,
    DoIP module shall respond with same protocol type as received on Tcp connection.
  
Test Object: 
    Routing activation messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    Initiated Tp reception on TcpCon_0.
    DoIPSecuredCommunicationForAllProtocolVersions is set to true.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() with a segment of routing activation request generic header, with
        protocol version ProtocolVersion_ISO13400_2_2012 (0x02).
    02: Call DoIP_SoAdTpCopyRxData() with a segment of routing activation request with SA and activation type.
    03: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    04: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012, DoIP.dsn.Func0135.Tx.Tcp.ProtocolVersion):
        Verify that a routing activation response message generation and transmission was performed with
        called protocol version ProtocolVersion_ISO13400_2_2012 (0x02).
    05: Seting up routing activation request message for protocol version ProtocolVersion_ISO13400_2_2019 (0x03).
    06: Call DoIP_SoAdTpCopyRxData() with a segment of routing activation request generic header, with
        protocol version ProtocolVersion_ISO13400_2_2019 (0x03).
    07: Call DoIP_SoAdTpCopyRxData() with a segment of routing activation request with SA and activation type.
    08: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    09: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019, DoIP.dsn.Func0135.Tx.Tcp.ProtocolVersion):
        Verify that a routing activation response message generation and transmission was performed with
        called protocol version ProtocolVersion_ISO13400_2_2019 (0x03).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>871</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Tcp.ProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>876</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1182</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03118_VehicleID_DefaultProtocolType_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>15339</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0001 and with default protocol type 0xFF
    is received on the configured Udp connection, DoIP module shall respond with a Vehicle identification response
    with highest protocol type (0x03).
  
Test Object: 
    Vehicle announcement messages with default protocol type.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to true.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0001(vehicle identification request) and
        protocol type 0xFF.
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019, DoIP.dsn.Func0135.Tx.Udp.DefaultProtocolVersionResponse):
        Verify that the expected Vehicle identification response message was sent with highest protocol version (0x03).
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.DefaultProtocolVersionResponse</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>874</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1183</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03119_VehicleAnnouncement_DefaultProtocolType_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>15429</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the Vehicle announcement message will be sent with highest protocol version
    that is enabled (0x03).
  
Test Object: 
    Vehicle announcement messages with default protocol type.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to true.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoConModeChg() to set vehicle announcement connection state to ONLINE.
    02: Call DoIP_MainFunction() to tick EBTEST_INC01_VEH_ANN_INIT_TIMEOUT times.
    03: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019, DoIP.dsn.Func0135.Tx.Tcp.InitProtocolVersion):
        Verify that the Vehicle announcement message was sent with highest enabled protocol version (0x03).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Tcp.InitProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>877</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1184</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03120_VehicleID_IncorrectInverseProtocolVersion</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>15516</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0001 and with protocol type 2 or 3,
    but with invalid inverse protocol type is received on the configured Udp connection.
    DoIP module shall respond with a NACK code 0x00 for incorrect pattern.
  
Test Object: 
    Vehicle announcement messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to true.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0001(vehicle identification request) and
        protocol type ISO13400-2:2019 (0x03) but with invalid inverse protocol type.
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019, DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion):
        Verify that message contain NACK code 0x00 for incorrect pattern.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>875</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1185</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03121_VehicleID_IncorrectProtocolVersion3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>15617</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0001 and with protocol type 3,
    when is disabled DoIP_ISO13400_2_2019, is received on the configured Udp connection.
    DoIP module shall respond with a NACK code 0x00 for incorrect pattern.
  
Test Object: 
    Vehicle announcement messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to false.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0001(vehicle identification request) and
        protocol type ISO13400-2:2019 (0x03).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012, DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion):
        Verify that message contain NACK code 0x00 for incorrect pattern.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>871</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>875</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1186</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03122_VehicleIDEid_WithIncorrectProtocolVersion3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>15716</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0002 (Vehicle ID request with EID) and with protocol type 3,
    when is disabled DoIP_ISO13400_2_2019, is received on the configured Udp connection.
    DoIP module shall respond with a NACK code 0x00 for incorrect pattern.
  
Test Object: 
    Vehicle announcement messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to false.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0002(vehicle identification request with EID) and
        protocol type ISO13400-2:2019 (0x03).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012, DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion):
        Verify that the expected message was sent with protocol version 0x02, since protocol type
        ISO13400-2:2019 isn't supported and contain NACK code 0x00 for incorrect pattern.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>871</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>875</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1187</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03123_VehicleIDVin_WithIncorrectProtocolVersion3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>15817</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0003 (Vehicle ID request with VIN) and with protocol type 3,
    when DoIP_ISO13400_2_2019 is disabled, is received on the configured Udp connection.
    DoIP module shall respond with a NACK code 0x00 for incorrect pattern.
  
Test Object: 
    Vehicle announcement messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to false.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0003(vehicle identification request with VIN) and
        protocol type ISO13400-2:2019 (0x03).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012, DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion):
        Verify that the expected message was sent with protocol version 0x02, since protocol type
        ISO13400-2:2019 isn't supported and contain NACK code 0x00 for incorrect pattern.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>871</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>875</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1188</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03124_EntityStatusNoTcp_WithIncorrectPV3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>15921</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type for Entity Status (0x4001) and with protocol type 3,
    when DoIP_ISO13400_2_2019 is disabled, is received on the configured Udp connection.
    DoIP module shall respond with a NACK code 0x00 for incorrect pattern.
  
Test Object: 
    Entity status messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to false.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type for Entity Status and protocol type ISO13400-2:2019 (0x03).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012, DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion):
        Verify that the expected response message was sent with with protocol version 0x02, since protocol type
        ISO13400-2:2019 isn't supported and response message contain NACK code 0x00 for incorrect pattern.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>871</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>875</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1189</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03125_RoutingActivation_WithIncorrectPV3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>16024</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP receives routing activation request message with protocol type type 3,
    when DoIP_ISO13400_2_2019 is disabled, is received on the configured Tcp connection.
    DoIP module shall respond with a NACK code 0x00 for incorrect pattern.
  
Test Object: 
    Routing activation messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    Initiated Tp reception on TcpCon_0.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to false.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() with a segment of routing activation request generic header, with
        protocol version ProtocolVersion_ISO13400_2_2012 (0x02).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012, DoIP.dsn.Func0135.Tx.Tcp.InvalidProtocolVersion):
        Verify that the expected response message was sent with with protocol version 0x02, since protocol type
        ISO13400-2:2019 isn't supported and response message contain NACK code 0x00 for incorrect pattern.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>871</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Tcp.InvalidProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>878</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1190</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03126_VehicleID_DefaultProtocolType_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>16151</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0001 and with default protocol type 0xFF
    is received on the configured Udp connection, DoIP module shall respond with a Vehicle identification response
    with highest protocol type (0x02).
  
Test Object: 
    Vehicle announcement messages with default protocol type.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to false.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0001(vehicle identification request) and
        protocol type 0xFF.
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012, DoIP.dsn.Func0135.Tx.Udp.DefaultProtocolVersionResponse):
        Verify that the expected Vehicle identification response message was sent with highest protocol version (0x02).
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>871</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.DefaultProtocolVersionResponse</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>874</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1191</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03127_VehicleAnnouncement_DefaultProtocolType_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>16241</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the Vehicle announcement message will be sent with highest protocol version
    that is enabled (0x02).
  
Test Object: 
    Vehicle announcement messages with default protocol type.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to false.
  
Test Execution: 
    01: Call DoIP_SoConModeChg() to set vehicle announcement connection state to ONLINE.
    02: Call DoIP_MainFunction() to tick EBTEST_INC01_VEH_ANN_INIT_TIMEOUT times.
    03: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012, DoIP.dsn.Func0135.Tx.Tcp.InitProtocolVersion):
        Verify that the Vehicle announcement message was sent with highest enabled protocol version (0x02).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>871</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Tcp.InitProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>877</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1192</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03128_VehicleID_IncorrectProtocolVersion2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>16328</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0001 and with protocol type 2,
    when DoIP_ISO13400_2_2012 is disabled, is received on the configured Udp connection.
    DoIP module shall respond with a NACK code 0x00 for incorrect pattern.
  
Test Object: 
    Vehicle announcement messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to false.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0001(vehicle identification request) and
        protocol type ISO13400-2:2019 (0x03).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019, DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion):
        Verify that message contain NACK code 0x00 incorrect pattern.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>875</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1193</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03129_VehicleIDEid_WithIncorrectProtocolVersion2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>16428</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0002 (Vehicle ID request with EID) and with protocol type 2,
    when DoIP_ISO13400_2_2012 is disabled, is received on the configured Udp connection.
    DoIP module shall respond with a NACK code 0x00 for incorrect pattern.
  
Test Object: 
    Vehicle announcement messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to false.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0002(vehicle identification request with EID) and
        protocol type ISO13400-2:2012 (0x02).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019, DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion):
        Verify that the expected message was sent with protocol version 0x03, since protocol type
        ISO13400-2:2012 isn't supported and contain NACK code 0x00 for incorrect pattern.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>875</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1194</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03130_VehicleIDVin_WithIncorrectProtocolVersion2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>16529</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0003 (Vehicle ID request with VIN) and with protocol type 2,
    when DoIP_ISO13400_2_2012 is disabled, is received on the configured Udp connection.
    DoIP module shall respond with a NACK code 0x00 for incorrect pattern.
  
Test Object: 
    Vehicle announcement messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to false.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0003(vehicle identification request with VIN) and
        protocol type ISO13400-2:2012 (0x02).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019, DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion):
        Verify that the expected message was sent with protocol version 0x03, since protocol type
        ISO13400-2:2012 isn't supported and contain NACK code 0x00 for incorrect pattern.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>875</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1195</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03131_EntityStatusNoTcp_WithIncorrectPV2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>16633</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type (0x4001) for Entity Status and with protocol type 2,
    when DoIP_ISO13400_2_2012 is disabled, is received on the configured Udp connection.
    DoIP module shall respond with a NACK code 0x00 for incorrect pattern.
  
Test Object: 
    Entity status messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to false.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type for Entity Status and protocol type ISO13400-2:2012 (0x02).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019, DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion):
        Verify that the expected response message was sent with with protocol version 0x03, since protocol type
        ISO13400-2:2012 isn't supported and response message contain NACK code 0x00 for incorrect pattern.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.InvalidProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>875</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1196</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03132_RoutingActivation_WithIncorrectPV2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>16736</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP receives routing activation request message with protocol type type 2,
    when DoIP_ISO13400_2_2012 is disabled, is received on the configured Tcp connection.
    DoIP module shall respond with a NACK code 0x00 for incorrect pattern.
  
Test Object: 
    Routing activation messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    Initiated Tp reception on TcpCon_0.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to false.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() with a segment of routing activation request generic header, with
        protocol version ProtocolVersion_ISO13400_2_2012 (0x02).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019, DoIP.dsn.Func0135.Tx.Tcp.InvalidProtocolVersion):
        Verify that the expected response message was sent with with protocol version 0x03, since protocol type
        ISO13400-2:2012 isn't supported and response message contain NACK code 0x00 for incorrect pattern.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Tcp.InvalidProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>878</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1197</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03133_VehicleID_DefaultProtocolType_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>16863</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0001 and with default protocol type 0xFF
    is received on the configured Udp connection, DoIP module shall respond with a Vehicle identification response
    with highest protocol type (0x03).
  
Test Object: 
    Vehicle announcement messages with default protocol type.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to false.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0001(vehicle identification request) and
        protocol type 0xFF.
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019, DoIP.dsn.Func0135.Tx.Udp.DefaultProtocolVersionResponse):
        Verify that the expected Vehicle identification response message was sent with highest protocol version (0x03).
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.DefaultProtocolVersionResponse</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>874</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1198</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03134_VehicleAnnouncement_DefaultProtocolType_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>16953</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the Vehicle announcement message will be sent with highest protocol version
    that is enabled (0x03).
  
Test Object: 
    Vehicle announcement messages with default protocol type.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to false.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoConModeChg() to set vehicle announcement connection state to ONLINE.
    02: Call DoIP_MainFunction() to tick EBTEST_INC01_VEH_ANN_INIT_TIMEOUT times.
    03: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019, DoIP.dsn.Func0135.Tx.Tcp.InitProtocolVersion):
        Verify that the Vehicle announcement message was sent with highest enabled protocol version (0x03).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Tcp.InitProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>877</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1199</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03135_VehicleID_RoutingActivationNack4ProtocolVer3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>17042</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP Routing Activation for Protocol Version 3 is requested
    after already succesfully requesting Routing Activation for Protocol Version 2 with configuration
    that has both of those protocols enabled with the secured communication for all protocol versions enabled.
  
Test Object: 
    Routing activation with correct protocol versions.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to true.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to true
  
Test Execution: 
    01: Send routing activation request on the TCP socket connection 0 with a SA set to 0x1DE6.
    02: VP(DoIP.dsn.Func0135.Tx.Tcp.ProtocolVersion):
        Verify that Routing Activation for Protocol Version 2 was successful.
    03: Call DoIP_SoAdTpStartOfReception to start the process for routing activation request
        for protocol version 3.
    04: Call DoIP_SoAdTpCopyRxData to send first part of the message for Routing Activation for
        Protocol Version 3.
    05: Copy the respond message into dedicated buffer for comparison.
    06: VP(DoIP.dsn.Func0135.Tx.Tcp.ProtocolVersion):
        Verify that the routing activation request for protocol version 3 failed with NACK as it has
        already been accepted for protocol version 2.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Tcp.ProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>876</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1200</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03136_VehicleID_RoutingActivationP2NACK0x7</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>17204</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when routing activation request message is received and the
    DoIPSecuredCommunicationForAllProtocolVersions is set to TRUE with
    the matching Tcp connection attribute DoIPTcpConnectionSecurityRequired set to
    FALSE, DoIP module shall send a routing activation response message with the activation response
    code set to 0x07 (DOIP_ROU_ACT_RESP_TCP_CONN_UNSECURED).
    This test verifies test configuration with multiple Routing activation objects configured.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPTcpConnection/DoIPTcpConnectionSecurityRequired is set to FALSE.
    DoIPRoutingActivationSecurityRequired is set to FALSE.
    DoIPSecuredCommunicationForAllProtocolVersions is set to true.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to true
  
Test Execution: 
    01: Send routing activation request with the expected (configured) values of source address
        and activation number.
    02: VP(DoIP.dsn.Func0135.SecComForAllProtocolVersions):
        Verify that DoIP has generated routing activation response message, with a correct
        parameters and routing activation response code set to 0x07
        (DOIP_ROU_ACT_RESP_TCP_CONN_UNSECURED).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.SecComForAllProtocolVersions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>879</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1201</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03137_VehicleID_RoutingActivationP3NACK0x7</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>17300</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when routing activation request message is received for protocol version 3
    and the matching DoIPRoutingActivation has the attribute DoIPRoutingActivationSecurityRequired
    set to TRUE and the matching Tcp connection has the attribute DoIPTcpConnectionSecurityRequired set to
    FALSE, DoIP module shall send a routing activation response message with the activation response
    code set to 0x07 (DOIP_ROU_ACT_RESP_TCP_CONN_UNSECURED).
    This test verifies test configuration with multiple Routing activation objects configured.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPTcpConnection/DoIPTcpConnectionSecurityRequired is set to FALSE.
    DoIPRoutingActivationSecurityRequired is set to TRUE.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to false.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Send routing activation request for protocol version 3 with the expected (configured) values of
    source address and activation number.
    02: VP(DoIP.dsn.Func0135.NoSecureComForAllProtVersions.SecureTcpCon):
        Verify that DoIP has generated routing activation response message, with a correct
        parameters and routing activation response code set to 0x07
        (DOIP_ROU_ACT_RESP_TCP_CONN_UNSECURED).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.NoSecureComForAllProtVersions.SecureTcpCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>882</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1202</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03138_VehicleID_RoutingActivationP2NACK0x6_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>17395</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when routing activation request message is received for protocol version 2
    and the matching DoIPRoutingActivation has the attribute DoIPRoutingActivationSecurityRequired
    set to TRUE and the matching Tcp connection has the attribute DoIPTcpConnectionSecurityRequired set to
    FALSE, DoIP module shall send a routing activation response message with the activation response
    code set to 0x06 (DOIP_ROU_ACT_RESP_UNKNOWN_ACT_TYPE).
    This test verifies test configuration with multiple Routing activation objects configured.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPTcpConnection/DoIPTcpConnectionSecurityRequired is set to FALSE.
    DoIPRoutingActivationSecurityRequired is set to TRUE.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to true
  
Test Execution: 
    01: Send routing activation request for protocol version 3 with the expected (configured) values of
    source address and activation number.
    02: VP(DoIP.dsn.Func0135.NoSecureComForAllProtVersions.SecureRoute):
        Verify that DoIP has generated routing activation response message, with a correct
        parameters and routing activation response code set to 0x06
        (DOIP_ROU_ACT_RESP_UNKNOWN_ACT_TYPE).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.NoSecureComForAllProtVersions.SecureRoute</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>881</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1203</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03139_VehicleID_RoutingActivationP2NACK0x6_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>17491</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when routing activation request message is received for protocol version 3
    and the matching DoIPRoutingActivation has the attribute DoIPRoutingActivationSecurityRequired
    set to TRUE and the matching Tcp connection has the attribute DoIPTcpConnectionSecurityRequired set to
    FALSE, DoIP module shall send a routing activation response message with the activation response
    code set to 0x06 (DOIP_ROU_ACT_RESP_UNKNOWN_ACT_TYPE).
    This test verifies test configuration with multiple Routing activation objects configured.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPTcpConnection/DoIPTcpConnectionSecurityRequired is set to FALSE.
    DoIPRoutingActivationSecurityRequired is set to TRUE.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Send routing activation request for protocol version 3 with the expected (configured) values of
    source address and activation number.
    02: VP(DoIP.dsn.Func0135.NoSecureComForAllProtVersions.SecureTcpCon):
        Verify that DoIP has generated routing activation response message, with a correct
        parameters and routing activation response code set to 0x06
        (DOIP_ROU_ACT_RESP_UNKNOWN_ACT_TYPE).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.NoSecureComForAllProtVersions.SecureTcpCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>882</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1204</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03140_VehicleID_RoutingActivationP3NACK0x7</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>17586</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when routing activation request message is received for protocol version 3
    and the matching DoIPRoutingActivation has the attribute DoIPRoutingActivationSecurityRequired
    set to TRUE and the matching Tcp connection has the attribute DoIPTcpConnectionSecurityRequired set to
    FALSE, DoIP module shall send a routing activation response message with the activation response
    code set to 0x07 (DOIP_ROU_ACT_RESP_TCP_CONN_UNSECURED).
    This test verifies test configuration with multiple Routing activation objects configured.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPTcpConnection/DoIPTcpConnectionSecurityRequired is set to FALSE.
    DoIPRoutingActivationSecurityRequired is set to TRUE.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Send routing activation request for protocol version 3 with the expected (configured) values of
    source address and activation number.
    02: VP(DoIP.dsn.Func0135.NoSecureComForAllProtVersions.SecureRoute):
        Verify that DoIP has generated routing activation response message, with a correct
        parameters and routing activation response code set to 0x07
        (DOIP_ROU_ACT_RESP_TCP_CONN_UNSECURED).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.NoSecureComForAllProtVersions.SecureRoute</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>881</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1205</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03141_VehicleAnnouncement_Trigger_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>17681</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Test case verifies start of transmission of Vehicle announcement messages when DoIPInterfaceAnnouncementStart is
    set to DOIP_ONTRIGGER_ANNOUNCE.
  
Test Object: 
    Vehicle announcement transmission when DoIPInterfaceAnnouncementStart = DOIP_ONTRIGGER_ANNOUNCE.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoConModeChg() to bring the first Vehicle announcement connection of Interface_1 to ONLINE.
    02: Call DoIP_MainFunction() DoIPInitialVehicleAnnouncementTime times to expire the Initial vehicle announcement timer.
    03: VP(SWS_DoIP_00298): Verify that Vehicle announcement message was not transmitted as this interface is configured with
        DoIPInterfaceAnnouncementStart = DOIP_ONTRIGGER_ANNOUNCE and DoIP_TriggerVehicleAnnouncement() has not yet been called.
    04: Call DoIP_TriggerVehicleAnnouncement() for Interface_1.
    05: Call DoIP_MainFunction() DoIPInitialVehicleAnnouncementTime -1 times.
    06: VP(SWS_DoIP_00071): Verify that Vehicle announcement message was not transmitted since Initial vehicle announcement timer
        has not yet expired.
    07: Call DoIP_MainFunction() one more time to expire the Initial vehicle announcement timer.
    08: VP(SWS_DoIP_00298, SWS_DoIP_00205, SWS_DoIP_00071): Verify that Vehicle announcement message is transmitted as
        DoIP_TriggerVehicleAnnouncement() has been called, the corresponding connection is ONLINE and the Initial vehicle announcement
        timer has expired.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00298</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>352</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1206</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest03142_VehicleAnnouncement_Trigger_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest03_VehicleIdentification/source/application/DoIP_ConTest03_VehicleIdentification.c</sourcefile>
      <sourceline>17789</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP_TriggerVehicleAnnouncement() is called, but the corresponding socket is not yet ONLINE
    the request is remembered and vehicle announcement transmission triggered when the socket goes ONLINE.
  
Test Object: 
    Vehicle announcement transmission when DoIPInterfaceAnnouncementStart = DOIP_ONTRIGGER_ANNOUNCE.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_TriggerVehicleAnnouncement() for Interface_1.
    02: Call DoIP_MainFunction() DoIPInitialVehicleAnnouncementTime times to expire the Initial vehicle announcement timer.
    03: VP(SWS_DoIP_00205): Verify that Vehicle announcement message was not transmitted because vehicle announcement connections
        are OFFLINE.
    04: Call DoIP_SoConModeChg() to bring the first Vehicle announcement connection of Interface_1 to ONLINE.
    05: Call DoIP_MainFunction() DoIPInitialVehicleAnnouncementTime -1 times.
    06: VP(SWS_DoIP_00071): Verify that Vehicle announcement message was not transmitted since the Initial vehicle announcement timer
        has not yet expired.
    07: Call DoIP_MainFunction() one more time to expire the Initial vehicle announcement timer.
    08: VP(SWS_DoIP_00299): Verify that Vehicle announcement message is transmitted after the Initial vehicle announcement timer has
        expired. This also verifies that DoIP remembers the call to DoIP_TriggerVehicleAnnouncement() before the socket is ONLINE.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00299</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1207</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ConTest04000_DoIPDhcpOptionVinUse_False</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest04_DisabledFeature/source/application/DoIP_ConTest04_DisabledFeature.c</sourcefile>
      <sourceline>69</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case that ASCII buffer returned in SoAd_ReadDhcpHostNameOption does not
    start with "DoIP-" and DoIPDhcpOptionVinUse is set to FALSE.
  
Test Object: 
    DoIP_ActivationLineSwitch().
    DoIP_LocalIpAddrAssignmentChg().
  
Test Precondition: 
    DoIP initialized.
    DoIPDhcpOptionVinUse = false.
  
Test Execution: 
    01: Bring the activation line to ACTIVE status.
    02: For each configured connection (Tcp and Udp) call DoIP_LocalIpAddrAssignmentChg()
        with State equals TCPIP_IPADDR_STATE_ASSIGNED.
    03: VP(DoIP.EB.SWS_DoIP_00154): Verify that SoAd_ReadDhcpHostNameOption() was called only
        for TcpCon0, where DoIPUpdateDhcpHostNameOption is set to TRUE.
    04: VP(DoIP.dsn.Func0102.SWS_DoIP_00155): Verify that SoAd_WriteDhcpHostNameOption() was
        called was called only for TcpCon0, where DoIPUpdateDhcpHostNameOption is set to TRUE,
        with a pointer to the string "DoIP-".
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0102.SWS_DoIP_00155</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>827</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1208</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest04001_VehicleAnnouncement_DoIPGIDInvalidityPattern</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest04_DisabledFeature/source/application/DoIP_ConTest04_DisabledFeature.c</sourcefile>
      <sourceline>181</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies:
    - The "GID" of a vehicle identification response/vehicle announcement message shall consists
      of 6 bytes according to the configured DoIPGIDInvalidityPattern if the parameter DoIPGID is
      not configured, the parameter DoIPUseEIDasGID is set to false and Dynamic GID
      Synchronization is disabled or not yet completed.
  
Test Object: 
    Vehicle announcement messages, GroupID
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIP_SoConModeChg() called for announcement connection.
    DoIPGID not configured.
    DoIPUseEIDasGID = false.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to send the vehicle identification request.
    02: VP(DoIP.EB.DoIPGIDInvalidityPattern): Verify that SoAd_IfTransmit() was called to transmit
        Vehicle identification response with a GID set to GIDInvalidityPattern (255).
    03: Call DoIP_MainFunction() to tick EBTEST_INC01_VEH_ANN_INIT_TIMEOUT - 1U times.
    04: Verify that nothing was called, i.e. timer has not expired.
    05: Call DoIP_MainFunction() to trigger DoIPInitialVehicleAnnouncementTime.
    06: VP(DoIP.EB.DoIPGIDInvalidityPattern):  Verify that SoAd_IfTransmit() was called to send the
        Vehicle announcement message after DoIPInitialVehicleAnnouncementTime with a GID set to
        GIDInvalidityPattern (255).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DoIPGIDInvalidityPattern</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1209</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest04002_RequestAddressAssignment_FALSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest04_DisabledFeature/source/application/DoIP_ConTest04_DisabledFeature.c</sourcefile>
      <sourceline>308</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the transition from DOIP_ACTIVATION_LINE_INACTIVE to
    DOIP_ACTIVATION_LINE_ACTIVE in case DoIPRequestAddressAssignment is set FALSE
    for Udp, Udp announcement and Tcp connections.
  
Test Object: 
    DoIP_ActivationLineSwitch().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_ActivationLineSwitch() with active set to TRUE.
    02: VP(SWS_DoIP_00306): Verify that SoAd_RequestIpAddrAssignment() is not called,
        because DoIPRequestAddressAssignment is set to FALSE for all connections.
    03: VP(SWS_DoIP_00306): Verify that for each of configured connections (irrespective
        of the fact that DoIPRequestAddressAssignment is FALSE) DoIP calls SoAd_OpenSoCon().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00306</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1210</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest04003_ActiveLineSwitch_GetSoConId_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest04_DisabledFeature/source/application/DoIP_ConTest04_DisabledFeature.c</sourcefile>
      <sourceline>408</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the transition from DOIP_ACTIVATION_LINE_INACTIVE to
    DOIP_ACTIVATION_LINE_ACTIVE and vice versa in case SoAd_GetSoConId() returns E_NOT_OK.
    In that case SoAd_OpenSoCon / SoAd_CloseSoCon() will not be called.
  
Test Object: 
    DoIP_ActivationLineSwitch().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_ActivationLineSwitch() with active set to TRUE.
    02: VP(SWS_DoIP_00306): Verify that SoAd_OpenSoCon() will not be called, since
        SoAd_GetSoConId() is set to return E_NOT_OK.
    03: Call DoIP_ActivationLineSwitch() with active set to FALSE.
    04: VP(DoIP.dsn.Func0101.EB.SWS_DoIP_00234): Verify that SoAd_CloseSoCon() will not be called,
        since SoAd_GetSoConId() is set to return return E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00306</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0101.EB.SWS_DoIP_00234</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>789</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1211</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest04004_MaxParallelTester</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest04_DisabledFeature/source/application/DoIP_ConTest04_DisabledFeature.c</sourcefile>
      <sourceline>523</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that DoIP_SoAdTpStartOfReception() returns BUFREQ_E_NOT_OK in case more
    testers try to connect than configured in DoIPMaxTesterConnections + 1 (additional connectoin
    is used to provide Alice check.
  
Test Object: 
    DoIP_SoAdTpStartOfReception().
  
Test Precondition: 
    DoIP initialized.
    DoIP_ActivationLineSwitch(TRUE) called.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() to initiate Tp reception on TcpCon_0.
    02: Call DoIP_SoAdTpStartOfReception() to try to initiate Tp reception on TcpCon_1.
    03: VP(): Verify that DoIP_SoAdTpStartOfReception() has returned BUFREQ_E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.MaxTesterConnections.Exceeded</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1212</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest04005_Diag_Entity_Status_Resp_Gateway</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest04_DisabledFeature/source/application/DoIP_ConTest04_DisabledFeature.c</sourcefile>
      <sourceline>599</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that after a valid Diagnostic entity status request message is received,
    DoIP module shall send a Diagnostic entity status response message without Max. data size bytes
    when configuration parameter DoIPEntityStatusMaxByteFieldUse is set to FALSE on the configured
    DoIPUDPConnection.
  
Test Object: 
    Diagnostic entity status messages.
  
Test Precondition: 
    DoIP initialized.
    DOIP_NODE_TYPE set to DOIP_GATEWAY.
    DoIPEntityStatusMaxByteFieldUse set to false.
  
Test Execution: 
    01: VP(SWS_DoIP_00095): Call DoIP_SoAdIfRxIndication() with message payload type = 0x4001
        (Diagnostic entity status request).  Payload length for this message type is 0.
    02: VP(SWS_DoIP_00096): Verify that SoAd_IfTransmit() was called.
    03: VP(SWS_DoIP_00096, SWS_DoIP_00097, SWS_DoIP_00098, SWS_DoIP_00099, SWS_DoIP_00100):
        Verify that Diagnostic entity status response was sent with configured parameters.
    04: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00095</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00099</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1213</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ConTest05001_VIR_VIN_UserGetVin_Match</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>295</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies:
    - if a DoIP message with a payload Type 0x0003 is received on the configured DoIPUDPConnection,
      the DoIP module shall further process the message.
    - the expected payload length for vehicle identification request message with payload type
      0x0003 shall be exactly 17.
    - the received "VIN" 17 payload data bytes shall be compared to the VIN retrieved by calling
      DoIP_UserGetVin().
    - the further action byte of vehicle identification response message shall contain 0x10 value
      if there is any DoIPRoutingActivationNumber equal to 0xE0 and RoutingActivation was
      not yet successfully performed.
    If they match the DoIP module shall respond with a vehicle identification response/vehicle
    announcement message with payload type 0x0004.
  
Test Object: 
    Vehicle Identification request with VIN.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    User function DoIP_UserGetVin() configured and provided (linked).
  
Test Execution: 
    01: Configure DoIP_UserGetVin() stub to copy VIN and return E_OK.
    02: Call DoIP_SoAdIfRxIndication() to send Vehicle Identification request with VIN (payload
        type 0x0003).
    03: VP(DoIP.EB.SWS_DoIP_00070_UserGetVin_OK, DoIP.EB.User_DoIPGetVin):Verify that
        DoIP_UserGetVin() is called to retrieve VIN to be compared with received one.
    04: VP(DoIP.EB.SWS_DoIP_00072_UserGetVin_EOK, DoIP.EB.User_DoIPGetVin):Verify that
        DoIP_UserGetVin() is called to retrieve VIN to assemble vehicle identification response
        message.
    05: VP(DoIP.EB.SWS_DoIP_00072_UserGetVin_EOK, SWS_DoIP_00073, SWS_DoIP_00075, SWS_DoIP_00078,
        SWS_DoIP_00087):
        Verify that vehicle identification response message has been transmitted with a correctly
        configured VIN, LA, EID,GID, Further Action Required and VIN/GID sync. status field.
    06: VP(DoIP.SWS_DoIP_00082): Verify that "Further action" byte of a vehicle identification
        response contains the value 0x10 since there is one Routine Activation
        object with DoIPRoutingActivationNumber 0xE0.
    07: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00070_UserGetVin_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00072_UserGetVin_EOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R23-11.SWS_DoIP_00075</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>458</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00087</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.User_DoIPGetVin</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1214</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05002_VIR_VIN_UserGetVin_NoMatch</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>436</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when Vehicle identification request message with VIN (payload type
    0x0003) is received and DoIP_UserGetVin() function is configured and provided, and when
    received VIN does not match the one received from DoIP_UserGetVin(), no vehicle identification
    response message will be generated.
  
Test Object: 
    Vehicle Identification request with VIN.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    User function DoIP_UserGetVin() configured and provided (linked).
  
Test Execution: 
    01: Configure DoIP_UserGetVin() stub to copy VIN and return E_OK.
    02: Call DoIP_SoAdIfRxIndication() to send Vehicle Identification request with VIN (payload
        type 0x0003) - VIN does not match the one returned by DoIP_UserGetVin().
    03: VP(DoIP.EB.SWS_DoIP_00070_UserGetVin_OK, DoIP.EB.User_DoIPGetVin):Verify that
        DoIP_UserGetVin() is called to retrieve VIN to be compared with received one.
    04: VP(DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse): Verify that UDP socket gets
        released instead of transmitting a response.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00070_UserGetVin_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.User_DoIPGetVin</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>712</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1215</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05003_WriteDhcpHostNameOption_UserGetVin</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>535</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case that ASCII buffer returned in SoAd_ReadDhcpHostNameOption does not
    start with "DoIP-", DoIPDhcpOptionVinUse is set to TRUE and User_DoIPGetVin() function is
    configured.
    In this case SoAd_WriteDhcpHostNameOption is called with a pointer to the ASCII buffer
    "DoIP-VIN&lt;vinnumberinascii&gt;" with &lt;vinnumberinascii&gt; filled with VIN retrieved via
    User_DoIPGetVin().
  
Test Object: 
    DoIP_ActivationLineSwitch().
    DoIP_LocalIpAddrAssignmentChg().
    User_DoIPGetVin()
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Configure DoIP_UserGetVin() stub to copy VIN and return E_OK.
    02: Bring the activation line to ACTIVE status.
    03: For each configured connection (Tcp and Udp) call DoIP_LocalIpAddrAssignmentChg()
        with State equals TCPIP_IPADDR_STATE_ASSIGNED, and perform steps 03 - 07.
    04: VP(DoIP.EB.SWS_DoIP_00154): Verify that SoAd_ReadDhcpHostNameOption() was called.
    05: VP(DoIP.dsn.Func0102.SWS_DoIP_00156_UserGetVin): Verify that DoIP_UserGetVin() is called to
        retrieve VIN.
    06: VP(DoIP.dsn.Func0102.SWS_DoIP_00156_UserGetVin): Verify that  SoAd_WriteDhcpHostNameOption()
        was called with the buffer filled with VIN retrieved from User_DoIPGetVin().
    07: Reset ReadDhcpHostName buffer to a non "DoIP-" value.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0102.SWS_DoIP_00156_UserGetVin</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>828</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1216</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05004_VIR_VIN_UserGetVin_NotOk</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>665</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when Vehicle identification response message is being generated,
    and a user has provided a callback function for retrieving VIN and that callback returns
    E_NOT_OK, 17 bytes of VIN will be filled with the configured DoIPVinInvalidityPattern,
    with "Further Action Required" field set to 0x00 and VIN/GID sync. status field set to
    0x10 if (DoIPUseVehicleIdentificationSyncStatus) is set to true.
  
Test Object: 
    Vehicle Identification request with VIN.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    User function DoIP_UserGetVin() configured and provided (linked).
  
Test Execution: 
    01: Configure DoIP_UserGetVin() stub to return E_OK on the first invocation and E_NOT_OK
        on the second. First call is used to check the matching of incoming VIN to the one
        provided with the callback. The second one is used to generate Vehicle Identification
        response message.
    02: Call DoIP_SoAdIfRxIndication() to send Vehicle Identification request with VIN (payload
        type 0x003).
    03: VP(): Verify that DoIP_UserGetVin() is called to retrieve VIN to assemble vehicle
        identification response message.
    04: VP(): Verify that vehicle identification response message has been transmitted with
        a correctly configured VIN, LA, EID, GID, Further Action Required and VIN/GID sync.
        status field.
    05: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00072_UserGetVin_E_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1217</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05005_RoutActAuth_PayloadLen7_SUCCESS</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>788</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies:
    - When routing activation request message without OEM specific field (payload length is 7)
      is received and Routing activation has authentication function configured, then this
      function will be called.
    - When authentication function returns E_OK with Authentified parameter set to TRUE,
      DoIP module will send a routing activation response message with the activation response
      code set to 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication stub function to return E_OK and
        sets Authentified to TRUE.
    02: Send routing activation request of a payload size 7 bytes (without OEM specific field),
        with the expected (configured) values of source address and activation number.
    03: VP(Tx_Route_Act_2_Tx_Idle): Verify that Tx state transition TX_ROUTE_ACT to TX_IDLE has
        occurred.
    04: VP(SWS_DoIP_00109): Verify that the configured callback function is called.
    05: VP(SWS_DoIP_00161): Verify that activation authentication was successful, i.e. that DoIP
        has generated a routing activation response message with a routing activation response
        code set to 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
    06: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Route_Act_2_Tx_Idle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>783</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1218</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05006_RoutActAuth_PayloadLen_7_NoAuth_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>910</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies:
    - When routing activation request message without OEM specific field (payload length is 7)
      is received and Routing activation has authentication function configured, then this
      function will be called.
    - When authentication function returns E_OK with Authentified parameter set to FALSE,
      DoIP module will send a routing activation response message with the activation response
      code set to 0x04 (NO_AUTHENTICATION).
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication stub function to return E_OK and
        sets Authentified to TRUE.
    02: Send routing activation request of a payload size 7 bytes (without OEM specific field),
        with the expected (configured) values of source address and activation number.
    03: VP(SWS_DoIP_00109): Verify that the configured callback function is called.
    04: VP(SWS_DoIP_00111): Verify that DoIP has generated routing activation response message,
        with a correct parameters and routing activation response code set to 0x04
        (NO_AUTHENTICATION).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1219</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05007_RoutActAuth_PayloadLen_7_NoAuth_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>1016</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies:
    - When routing activation request message without OEM specific field (payload length is 7)
      is received and Routing activation has authentication function configured, then this
      function will be called.
    - When authentication function returns E_NOT_OK, DoIP module will send a routing activation
      response message with the activation response code set to 0x04 (NO_AUTHENTICATION).
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication stub function to return E_NOT_OK.
    02: Send routing activation request of a payload size 7 bytes (without OEM specific field),
        with the expected (configured) values of source address and activation number.
    03: VP(SWS_DoIP_00109): Verify that the configured callback function is called.
    04: VP(SWS_DoIP_00111): Verify that DoIP has generated routing activation response message,
        with a correct parameters and routing activation response code set to 0x04
        (DOIP_ROU_ACT_RESP_NO_AUTHENTICATION).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1220</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05008_RoutActAuth_PayloadLen11_SUCCESS_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>1120</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies:
    - When routing activation request message with OEM specific field (payload length is 11)
      is received and Routing activation has authentication function configured, then this
      function will be called.
    - Since AuthenticationReqData is configured to 0, routing activation callback function
      will be called with the parameter AuthenticationReqData set to NULL.
    - When authentication function returns E_OK with Authentified parameter set to TRUE,
      DoIP module will send a routing activation response message with the activation response
      code set to 0x10.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication stub function to return E_OK and
        sets Authentified field to TRUE.
    02: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        with the expected (configured) values of source address and activation number.
    03: VP(SWS_DoIP_00117.Length11): Verify that a routing activation message with payload length
        of 11 bytes (with OEM field) is accepted by DoIP module.
    04: VP(SWS_DoIP_00109): Verify that the configured callback function is called.
    05: VP(DoIP.EB.AuthenticationReqData.NULL): Verify that the configured callback function is
        called with a parameter AuthenticationReqData set to NULL (AuthenticationReqLength = 0).
    06: VP(SWS_DoIP_00161): Verify that activation authentication was successful, i.e. that DoIP
        has generated a routing activation response message with a routing activation response
        code set to 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
    07: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.AuthenticationReqData.NULL</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00117.Length11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1221</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05009_RoutActAuth_PayloadLen11_SUCCESS_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>1252</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies:
    - When routing activation request message with OEM specific field (payload length is 11)
      is received and Routing activation has authentication function configured, then this
      function will be called.
    - Since AuthenticationReqLength is configured to 3, routing activation callback function
      will be called with the parameter AuthenticationReqData set to OEM specific field begin.
    - When authentication function returns E_OK with Authentified parameter set to TRUE,
      DoIP module will send a routing activation response message with the activation response
      code set to 0x10.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication stub function to return E_OK and
        sets Authentified field to TRUE.
    02: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        with the expected (configured) values of source address and activation number.
    03: VP(SWS_DoIP_00109): Verify that the configured callback function is called.
    04: VP(SWS_DoIP_00109): Verify that the configured callback function is called with the
        parameter AuthenticationReqData set to the beginning of OEM field.
    05: VP(SWS_DoIP_00161): Verify that activation authentication was successful, i.e. that DoIP
        has generated a routing activation response message with a routing activation response
        code set to 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
    06: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1222</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05010_RoutActAuth_PayloadLen11_NoAuth</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>1390</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies:
    - When routing activation request message with OEM specific field (payload length is 11)
      is received and Routing activation has authentication function configured, then this
      function will be called.
    - When authentication function returns E_OK with Authentified parameter set to FALSE,
      DoIP module will send a routing activation response message with the  activation response
      code set to 0x04.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication stub function to return E_OK and
        sets Authentified field to FALSE.
    02: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        with the expected (configured) values of source address and activation number.
    03: VP(SWS_DoIP_00109): Verify that the configured callback function is called.
    04: VP(ReportIssueCallout_GetSoConId, ReportIssueCallout_Call):
        Verify that SoAd_GetSoConId() is called as part of procedure of ReportIssue when response message
        is DOIP_ROU_ACT_RESP_NO_AUTHENTICATION (0x04).
    05: VP(ReportIssueCallout_Call):
        Verify that SoAd_GetSoConInfo() is called as part of procedure of ReportIssue, after SoAd_GetSoConId()
        returned E_OK.
    06: VP(ReportIssueCallout_Call, User_DoIPReportIssue):
        Verify that user's callback function User_DoIPReportIssue() is called as part of procedure
        of ReportIssue, after it got Info from SoAd_GetSoConInfo().
    07: VP(ReportId.ContextData):
        Verify that user's callback function User_DoIPReportIssue() has correctly filled ContextData.
    08: VP(SWS_DoIP_00109): Verify that the configured callback function is with the parameter
        AuthenticationReqData set to the beginning OEM field.
    09: VP(SWS_DoIP_00111): Verify that DoIP has generated routing activation response message,
        with a correct parameters and routing activation response code set to 0x04
        (DOIP_ROU_ACT_RESP_NO_AUTHENTICATION).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>889</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>888</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.User_DoIPReportIssue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>884</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportId.ContextData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>887</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1223</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05011_RoutActAuthConf_PayloadLen11_SUCCESS_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>1561</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies:
    - When routing activation request message with OEM specific field (payload length is 11)
      is received and Routing activation has authentication and confirmation function configured,
      then both of these functions will be called.
    - Since DoIPRoutingActivationAuthenticationCallback is configured to 1, routing activation
      callback function will be called with the parameter AuthenticationReqData set OEM specific
      field begin.
    - Since DoIPRoutingActivationAuthenticationCallback is configured to 2, routing confirmation
      callback function will be called with the parameter ConfirmationReqData set third byte of
      OEM specific field.
    - When authentication and confirmation are successful, DoIP will generate routing activation
      response message with the activation response code set to 0x10 and "OEM specific" field
      filled with callback function return values AuthenticationResData and ConfirmationResData.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication and RoutingActivationConfirmation stub functions
        to return E_OK and set Authentified and Confirmed fields to TRUE.
    02: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        with the expected (configured) values of source address and activation number.
    03: VP(Tx_Idle_2_Tx_Route_Act_Oem): Verify that state transition TX_IDLE to TX_ROUTE_ACT_OEM has
        occurred.
    04: VP(SWS_DoIP_00109): Verify that the configured authentication callback function is called.
    05: VP(SWS_DoIP_00112): Verify that the configured confirmation callback function is called.
    06: VP(DoIP.EB.SWS_DoIP_00109, Tx_Route_Act_Oem_2_Tx_Idle): Verify that the configured
        authentication callback function is called with a parameter AuthenticationReqData set to the
        beginning of OEM specific field and that state transition TX_ROUTE_ACT_OEM to TX_IDLE has
        occurred.
    07: VP(DoIP.EB.SWS_DoIP_00112): Verify that the configured confirmation callback function is
        called with a parameter ConfirmationReqData set to the third byte of OEM specific field.
    08: VP(SWS_DoIP_00120): Verify that "OEM specific" field (of the routing activation response)
        is filled with the callback return values: AuthenticationResData and ConfirmationResData.
    09: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00120</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Idle_2_Tx_Route_Act_Oem</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>782</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Route_Act_Oem_2_Tx_Idle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>780</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1224</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05012_RoutActAuthConf_PayloadLen11_NoConf_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>1732</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies:
    - When routing activation request message with OEM specific field (payload length is 11)
      is received and Routing activation has authentication and confirmation function configured,
      then both of these functions will be called.
    - When authentication function returns E_OK with Authentified parameter set to TRUE,
      and confirmation function returns E_OK with Confirmed parameter set to FALSE,
      DoIP module will send a routing activation response message with the activation response
      code set to 0x05 (DOIP_ROU_ACT_RESP_NO_CONFIRMATION).
    - Since configuration parameters AuthenticationResLength &gt; 0 and ConfirmationResLength &gt; 0
      then response message will have "OEM specific" field filled with callback function return
      values AuthenticationResData and ConfirmationResData.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication and RoutingActivationConfirmation stub functions
        to return E_OK and set Authentified field to TRUE and Confirmed field to FALSE.
    02: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        with the expected (configured) values of source address and activation number.
    03: VP(SWS_DoIP_00109): Verify that the configured authentication callback function is called.
    04: VP(SWS_DoIP_00112): Verify that the configured confirmation callback function is called.
    05: VP(ReportIssueCallout_GetSoConId, ReportIssueCallout_Call):
        Verify that SoAd_GetSoConId() is called as part of procedure of ReportIssue when response message
        is DOIP_ROU_ACT_RESP_NO_CONFIRMATION (0x05).
    06: VP(ReportIssueCallout_Call):
        Verify that SoAd_GetSoConInfo() is called as part of procedure of ReportIssue, after SoAd_GetSoConId()
        returned E_OK.
    07: VP(ReportIssueCallout_Call, User_DoIPReportIssue):
        Verify that user's callback function User_DoIPReportIssue() is called as part of procedure
        of ReportIssue, after it got Info from SoAd_GetSoConInfo().
    08: VP(ReportId.ContextData):
        Verify that user's callback function User_DoIPReportIssue() has correctly filled ContextData.
    09: VP(SWS_DoIP_00274, SWS_DoIP_00120, Tx_Route_Act_Oem_2_Tx_Offline): Verify that a routing
        activation response message is transmitted with the activation response code set to 0x05
        (NO_AUTHENTICATION). erify that "OEM specific" field (of the routing activation response) is
        filled with the callback return values: AuthenticationResData and ConfirmationResData and
        that state transition TX_ROUTE_ACT_OEM - TX_OFFLINE has occurred.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00120</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00274</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>333</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Route_Act_Oem_2_Tx_Offline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>781</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>889</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>888</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.User_DoIPReportIssue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>884</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportId.ContextData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>887</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1225</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05013_RoutActAuthConf_PayloadLen11_NoConf_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>1927</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies:
    - When routing activation request message with OEM specific field (payload length is 11)
      is received and Routing activation has authentication and confirmation function configured,
      then both of these functions will be called.
    - When authentication function returns E_OK with Authentified parameter set to TRUE,
      and confirmation function returns E_NOT_OK, DoIP module will send a routing activation
      response message with the activation response code set to 0x05
      (DOIP_ROU_ACT_RESP_NO_AUTHENTICATION).
    - Since configuration parameters AuthenticationResLength &gt; 0 and ConfirmationResLength &gt; 0
      then response message will have "OEM specific" field filled with callback function return
      values AuthenticationResData and ConfirmationResData.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication stub functions to return E_OK and Authentified
        field to TRUE and RoutingActivationConfirmation stub function to return E_NOT_OK.
    02: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        with the expected (configured) values of source address and activation number.
    03: VP(SWS_DoIP_00109): Verify that the configured authentication callback function is called.
    04: VP(SWS_DoIP_00112): Verify that the configured confirmation callback function is called.
    05: VP(ReportIssueCallout_GetSoConId, ReportIssueCallout_Call):
        Verify that SoAd_GetSoConId() is called as part of procedure of ReportIssue when response message
        is DOIP_ROU_ACT_RESP_NO_CONFIRMATION (0x05).
    06: VP(ReportIssueCallout_Call):
        Verify that SoAd_GetSoConInfo() is called as part of procedure of ReportIssue, after SoAd_GetSoConId()
        returned E_OK.
    07: VP(ReportIssueCallout_Call, User_DoIPReportIssue):
        Verify that user's callback function User_DoIPReportIssue() is called as part of procedure
        of ReportIssue, after it got Info from SoAd_GetSoConInfo().
    08: VP(ReportId.ContextData):
        Verify that user's callback function User_DoIPReportIssue() has correctly filled ContextData.
    09: VP(SWS_DoIP_00274, SWS_DoIP_00120): Verify that a routing activation response message is
        transmitted with the activation response code set to 0x05 (NO_AUTHENTICATION).
        Verify that "OEM specific" field (of the routing activation response) is filled with the
        callback return values: AuthenticationResData and ConfirmationResData.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00274</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>333</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>889</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>888</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.User_DoIPReportIssue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>884</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportId.ContextData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>887</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1226</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05014_RoutActConf_PayloadLen11_SUCCESS</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>2118</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies:
    - When routing activation request message with OEM specific field (payload length is 11)
      is received and Routing activation confirmation function is configured, then this function
      will be called.
    - Since ConfirmationReqLength is configured to 0, routing confirmation callback function
      will be called with the parameter ConfirmationReqData set to NULL.
    - When confirmation function returns E_OK with Confirmed parameter is set to TRUE,
      DoIP module will send a routing activation response message with the activation response
      code set to 0x10.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationConfirmation stub function to return E_OK and sets Confirmed
        fields to TRUE.
    02: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        with the expected (configured) values of source address and activation number.
    03: VP(SWS_DoIP_00112): Verify that the configured confirmation callback function is called.
    04: VP(ConfirmationReqData.NULL): Verify that the configured confirmation callback function is
        called with a parameter ConfirmationReqData set to NULL (ConfirmationReqLength = 0).
    05: VP(SWS_DoIP_00112): Verify that routing activation confirmation have been considered as
        successful, i.e. that DoIP has generated routing activation response message with a
        correct parameters and routing activation response code set to 0x10
        (DOIP_ROU_ACT_RESP_SUCCESS).
    06: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.ConfirmationReqData.NULL</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1227</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05015_RoutActAuthConf_PENDING_SUCCESS</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>2246</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies:
    - When routing authentication callback function returns DOIP_E_PENDING DoIP module will
      trigger the callback at next DoIP_MainFunction() call again until something else than
      DOIP_E_PENDING is returned.
    - When routing confirmation callback function returns DOIP_E_PENDING DoIP module will
      trigger the callback at next DoIP_MainFunction call again until something else than
      DOIP_E_PENDING is returned.
      Additionally the DoIP module shall send a routing activation response message with the
      activation response code set to 0x11.
    - That the Routing activation shall be considered as confirmed from the moment the
      routing confirmation callback function returns E_OK.
    - That if valid routing activation request message is received for already activated channel,
      new authentication/confirmation process will be skipped, i.e. callback functions
      will not be called.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication and RoutingActivationConfirmation stub functions
        to return DOIP_E_PENDING.
    02: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        with the expected (configured) values of source address and activation number.
    03: VP(Rx_Ready_2_Rx_Route_Act): Verify that state transitions RX_READY - RX_ROUTE_ACT
        have occurred.
    04: Call MainFunction() for 3 times.
    05: VP(SWS_DoIP_00110): Verify that routing authentication callback function is triggered
        with each MainFunctoin() call.
    06: Set RoutingActivationAuthentication stub to return E_OK.
    07: Call MainFunction() once again.
    08: VP(SWS_DoIP_00110): Verify that routing authentication callback function is called followed
        by a call to routing confirmation callback function.
    09: VP(SWS_DoIP_00114): Verify that DoIP module transmitted routing activation response message
        with the activation response code set to 0x11.
    10: Call MainFunction() for 3 times.
    11: VP(SWS_DoIP_00114): Verify that routing confirmation callback function is triggered
        with each MainFunctoin() call.
    12: Set RoutingActivationConfirmation stub to return E_OK.
    13: Call MainFunction() for 3 times.
    14: VP(SWS_DoIP_00114): Verify that routing confirmation callback function is triggered
        only for the first call.
    15: VP(User_RoutingActivationCallback): Verify that all configured routing activation callback
           functions - DoIP_UserRoutingActivation_1 &amp; DoIP_UserRoutingActivation_2 - were called and their
           parameter RespCodePtr is set to 0x10.
    16: Send again the same routing activation request as in 02.
    17: Fetch routing activation response message.
    18: VP(SWS_DoIP_00113): Verify that DoIP module transmitted routing activation response message
        with the activation response code set to 0x10.
    19: VP(DoIP.EB.RoutingActivation.AlreadyActive): Verify that callback function is not called.
    20: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Route_Act</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>748</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>334</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0129.User_RoutingActivationCallback</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>833</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.RoutingActivation.AlreadyActive</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1228</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05016_RoutActAuthConf_DiffOemSpecific</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>2501</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies the following scenario:
    When two routing activation request messages are sent to two different TCP connections
    (different Testers) and both messages have the same routing activation number, but different
    OEM specific fields, routing activation is pending, and then in each MainFunction() call,
    routing confirmation function will be called twice - once for each OEM specific field,
    as received in the respective routing activation message.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationConfirmation stub function to return DOIP_E_PENDING.
    02: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        for 1st tester on TcpCon0.
    03: Fetch routing activation response message.
    04: Send routing activation request of a payload size 11 bytes (with different OEM specific
        field), for 2st tester on TcpCon1.
    05: Fetch routing activation response message.
    06: Call MainFunction() 3 times.
    07: VP(DoIP.EB.RoutingActivation.Pending.DifferentTcpConn): Verify that routing authentication
        callback function is triggered for both connections with each MainFunction() call.
    08: Set RoutingActivationConfirmation stub to return E_OK.
    09: Call MainFunction() 3 times.
    10: VP(DoIP.EB.RoutingActivation.Pending.DifferentTcpConn): Verify that routing confirmation
        callback function is triggered once per affected TCP connection.
    11: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) and TcpCon1 (Channel_2) to verify that connection
        is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.RoutingActivation.Pending.DifferentTcpConn</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1229</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05017_RoutActAuthConf_DiffChannels</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>2673</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies the following scenario:
    When two routing activation request messages are sent to different TCP connections
    (different Testers) and both messages have the same routing activation number, and routing
    activation is pending then in each MainFunction() call, routing authentication / confirmation
    functions will be called separately for each Tcp connection.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication &amp; RoutingActivationConfirmation stub functions to
        return DOIP_E_PENDING.
    02: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        for 1st tester on TcpCon0.
    03: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        for 2st tester on TcpCon1.
    04: Call MainFunction() 3 times.
    05: VP(DoIP.EB.RoutingActivation.Pending.DifferentTcpConn): Verify that routing authentication
        callback function is triggered for each Tcp connection during MainFunctoin() call.
    06: Set RoutingActivationAuthentication stub to return E_OK.
    07: Call MainFunction().
    08: VP(DoIP.EB.RoutingActivation.Pending.DifferentTcpConn): Verify that routing authentication
        and confirmation callback functions are triggered for each Tcp connection during
        MainFunctoin() call.
    09: Fetch routing activation response message on TcpCon0.
    10: Fetch routing activation response message TcpCon1.
    11: Set RoutingActivationConfirmation stub to return E_OK.
    12: Call MainFunction() 3 times.
    13: VP(DoIP.EB.RoutingActivation.Pending.DifferentTcpConn): Verify that routing confirmation
        callback function is triggered only once for each Tcp connection.
    14: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) and TcpCon1 (Channel_2) to verify that connection
        is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.RoutingActivation.Pending.DifferentTcpConn</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1230</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05018_RoutActConf_Pending</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>2856</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when valid routing activation request message is received for a channel
    that has already pending confirmation process, this process will continue under MainFunction
    and OEM special field will not be updated.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication and RoutingActivationConfirmation stub functions
        to return DOIP_E_PENDING.
    02: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        with the expected (configured) values of source address and activation number.
    03: Call MainFunction() for 3 times.
    04: VP(SWS_DoIP_00110): Verify that routing authentication callback function is triggered
        with each MainFunctoin() call.
    05: Set RoutingActivationAuthentication stub to return E_OK.
    06: Call MainFunction() once again.
    07: VP(SWS_DoIP_00110): Verify that routing authentication callback function is called followed
        by a call to routing confirmation callback function.
    08: VP(SWS_DoIP_00114): Verify that DoIP module transmitted routing activation response message
        with the activation response code set to 0x11.
    09: Call MainFunction() for 3 times.
    10: VP(SWS_DoIP_00114): Verify that routing confirmation callback function is triggered
        with each MainFunctoin() call.
    11: Send again the same routing activation request as in 02.
    12: VP(DoIP.EB.RoutingActivation.AlreadyPending, Rx_Route_Act_2_Rx_Route_Act): Verify that DoIP
        has generated Routing activation response message, with a correct parameters and routing
        activation response code and that there was no state transition from state RX_ROUTE_ACT.
    13: VP(DoIP.EB.RoutingActivation.AlreadyPending): Verify that callback function is not called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>334</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.RoutingActivation.AlreadyPending</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Route_Act_2_Rx_Route_Act</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>758</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1231</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05019_RoutActAuth_Pending</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>3035</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when valid routing activation request message is received for a channel
    that has already pending authentification process, this process will continue under MainFunction
    and OEM special field will not be updated.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication and RoutingActivationConfirmation stub functions
        to return DOIP_E_PENDING.
    02: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        with the expected (configured) values of source address and activation number.
    03: VP(Rx_Ready_2_Rx_Route_Act): Verify that transitions RX_READY - RX_ROUTE_ACT have occurred.
    04: Send the same routing activation request again.
    05: VP(DoIP.EB.RoutingActivation.AlreadyPending): Verify that no action is taken because an
        previous authentification is already pending.
    06: Call MainFunction().
    07: VP(DoIP.EB.RoutingActivation.AlreadyPending): Verify that routing authentication callback
        function is triggered with MainFunctoin() call.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Route_Act</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>748</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.RoutingActivation.AlreadyPending</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1232</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05020_RoutActAuth_PENDING_RoutActConf_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>3139</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies:
    - When routing authentication callback function returns DOIP_E_PENDING DoIP module will
      trigger the callback at next DoIP_MainFunction() call again until something else than
      DOIP_E_PENDING is returned.
    - When routing authentication callback function returns E_OK DoIP module will trigger
      the confirmation callback function immediately after.
    - When routing confirmation callback function returns E_OK DoIP module will send a routing
      activation response message with the activation response code set to 0x10
      (DOIP_ROU_ACT_RESP_SUCCESS).
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication stub function to return DOIP_E_PENDING and
        RoutingActivationConfirmation stub function to return E_OK (with Confirmed set to TRUE).
    02: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        with the expected (configured) values of source address and activation number.
    03: Call MainFunction() for 3 times.
    04: VP(SWS_DoIP_00110): Verify that routing authentication callback function is triggered
        with each MainFunctoin() call.
    05: Set RoutingActivationAuthentication stub to return E_OK and Authentified set to TRUE.
    06: Call MainFunction() once again.
    07: VP(SWS_DoIP_00110, SWS_DoIP_00112): Verify that routing authentication callback function
        is called followed by a call to routing confirmation callback function.
    08: VP(SWS_DoIP_00112, SWS_DoIP_00113): Verify that DoIP module transmitted routing activation
        response message with the activation response code set to 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
    09: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1233</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05021_RoutAct_E0_FurtherAction</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>3296</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that "Further action" byte in vehicle identification response message
    contains 0x10 before a route(s) with routing activation number 0xE0 is activated, and 0x00 after
    the route is successfully activated.
  
Test Object: 
    Further action byte
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIP_SoAdTpStartOfReception() is called.
    Routing activation authentication and confirmation functions are not configured for the tested
    route.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to send Vehicle Identification request (payload type 0x0001).
    02: VP(DoIP.SWS_DoIP_00082): Verify that "Further action" byte of a vehicle identification
        response contains the value 0x10 since there is one Routine Activation
        object with DoIPRoutingActivationNumber 0xE0.
    03: Call DoIP_SoAdIfTxConfirmation().
    04: Send routing activation message on a Tcp connection 0, with Routing activation number 0xE0.
    05: VP(DoIP.dsn.Func0128.User_RoutingActivationCallback): Verify that configured
        DoIP_UserRoutingActivation functions were called after successful routing activation.
    06: Fetch routing activation response message on TcpCon0.
    07: Call DoIP_SoAdIfRxIndication() to send Vehicle Identification request (payload type 0x0001).
    08: Call DoIP_SoAdIfTxConfirmation().
    09: VP(DoIP.SWS_DoIP_00084): Verify that "Further action" byte of a vehicle identification
        response shall contain the value 0x00.
    10: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00084</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0129.User_RoutingActivationCallback</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>833</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1234</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05022_VIR_VIN_UserGetVin_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>3469</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when Vehicle identification request message with VIN (payload type
    0x0003) is received and DoIP_UserGetVin() function is configured and provided, and a call to
    this function returns E_NOT_OK, then no vehicle identification response message will be
    generated.
  
Test Object: 
    Vehicle Identification request with VIN.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    User function DoIP_UserGetVin() configured and provided (linked).
  
Test Execution: 
    01: Configure DoIP_UserGetVin() stub to return E_NOT_OK.
    02: Call DoIP_SoAdIfRxIndication() to receive Vehicle Identification request with VIN (payload
        type 0x0003).
    03: VP(DoIP.EB.SWS_DoIP_00070_UserGetVin_NOK, DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse):
        Verify that no vehicle identification response message is generated
        since DoIP_UserGetVin() returned E_NOT_OK. Instead the UDP socket gets immediately released.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00070_UserGetVin_NOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0124.UdpReleaseRemoteAddr.NoResponse</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>712</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1235</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05023_VehicleIdentificationRequestMAC</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>3568</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that "EID" of vehicle identification response/vehicle announcement message
    contains MAC addres derived by Soad_GetPhysAddr if Parameter DoIPUseMacAdressForIdentification
    is set to true.
  
Test Object: 
    Vehicle announcement messages.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Received "EID" is the same as the configured MacAddress.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type =  0x0002(Vehicle identification
        request message with EID) which has payload length = 6 bytes.
    02: VP(DoIP.SWS_DoIP_00065): Verify that SoAd_IfTransmit() was called to send a vehicle
        identification response, with payload type 0x0004.
    03: Confirm vehicle identification response transmission.
    04: Call DoIP_SoConModeChg() to set vehicle announcement connection state to ONLINE.
    05: Call DoIP_MainFunction() to tick EBTEST_INC01_VEH_ANN_INIT_TIMEOUT - 1U times.
    06: Verify that nothing was called, i.e. timer has not expired.
    07: Call DoIP_MainFunction() one tick one more time.
    08: VP(DoIP.ASR_R23-11.SWS_DoIP_00074): Verify that the vehicle announcement message was sent
        after DoIPInitialVehicleAnnouncementTime(2).
    09: Confirm vehicle announcement transmission.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R23-11.SWS_DoIP_00074</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>457</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1236</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05024_VehicleIdentificationRequestMAC_NOTOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>3734</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that EID will be used instead of MacAddress if Parameter
    DoIPUseMacAdressForIdentification is set to true and if SoAd_GetPhysAddr returns E_NOT_OK.
  
Test Object: 
    Vehicle identification.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Received "EID" is different from the configured DoIPMAC.
    SoAd_GetPhysAddr_Stub is configured to return E_NOT_OK
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type =
        0x0002(Vehicle identification request message with EID) which has payload length = 6 bytes.
    02: Confirm vehicle identification response transmission.
    03: Call DoIP_SoConModeChg() to set vehicle announcement connection state to ONLINE.
    04: VP(Call_User_TcpSoConModeChg): Verify that User_TcpSoConModeChg is called.
    05: Call DoIP_MainFunction() to tick EBTEST_INC01_VEH_ANN_INIT_TIMEOUT - 1U times.
    06: Verify that nothing was called, i.e. timer has not expired.
    07: Call DoIP_MainFunction() one tick one more time.
    08: VP(SWS_DoIP_00065_SoAd_GetPhysAddr_NOK):
        Verify that configured EID parameter is used instead of MacAddress.
    09: Confirm vehicle announcement transmission.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00065_SoAd_GetPhysAddr_NOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.Call_User_TcpSoConModeChg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>810</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1237</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05025_InvalidVIN_GIDSyncSuccessful</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>3895</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies what when GID synchronization was successful but valid VIN could not be
    requested, "VIN/GID status" byte of vehicle response message will be 0x00.
  
Test Object: 
    GID synchronization
    VIN/GID status
  
Test Precondition: 
  
Test Execution: 
    01: Configure stub to set DoIP entity as GID master.
    02: Call DoIP_Init() to initialize DoIP.
    03: VP(DoIP.EB.DoIPDynamicGIDMasterSelection): Verify that User_DoIPDynamicGIDMasterSelection()
        was called.
    04: Open all sockets.
    05: Configure DoIP_UserGetVin() stub to return E_OK on the first invocation and E_NOT_OK
        on the second. First call is used to check the matching of incoming VIN to the one
        provided with the callback. The second one is used to generate Vehicle Identification
        response message.
    06: Call DoIP_SoAdIfRxIndication() to send Vehicle Identification request with VIN (payload
        type 0x003).
    07: VP(DoIP.EB.SWS_DoIP_00089): Verify that vehicle identification response message has been
        transmitted with a correctly configured VIN/GID sync. status field with value 0x00.
    08: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.DoIPDynamicGIDMasterSelection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1238</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05026_GIDSyncComplete</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>4026</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that GID is set to EID until GID is synchronized and after GID
    synchronization was successfully completed, GID will be set to a new value returned by a
    callback function User_DoIPGetGID().
  
Test Object: 
    DoIPGID
    VIN/GID status
    Dynamic GID Synchronization process
    User_DoIPGetGID()
  
Test Precondition: 
  
Test Execution: 
    01: Configure stub to set DoIP entity as GID slave.
    02: Call DoIP_Init() to initialize DoIP.
    03: VP(DoIP.EB.DoIPDynamicGIDMasterSelection): Verify that User_DoIPDynamicGIDMasterSelection()
        was called.
    04: Open all sockets.
    05: Set User_DoIPGetGID_Stub.RetVal to return E_NOT_OK;
    06: Call DoIP_SoAdIfRxIndication() with message payload type =  0x0001 (Vehicle identification
        request message).
    07: VP(DoIP.EB.SWS_DoIP_00077, &gt;DoIP.EB.SWS_DoIP_00079): Verify that GID part of the vehicle
        identification response message contains the same value as EID.
    08: Confirm vehicle identification response transmission.
    09: Call DoIP_MainFunction() 5 times.
    10: VP(SWS_DoIP_00051, DoIP.EB.DoIPDynamicGIDMasterSelection): Verify that DoIP_MainFunction()
        calls User_DoIPGetGID() as long as return value is not E_OK.
    11: Set User_DoIPGetGID_Stub.RetVal to return E_OK and Call DoIP_MainFunction().
    12: Call DoIP_SoAdIfRxIndication() with message payload type =  0x0001 (Vehicle identification
        request message).
    13: VP(DoIP.EB.SWS_DoIP_00051): Verify that GID is synchronized and set to a new value.
    14: Confirm vehicle announcement transmission.
    15: VP(DoIP.EB.SWS_DoIP_00051): Call DoIP_MainFunction() to verify that no call to
        User_DoIPGetGid() is made since synchronization is complete.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00051</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00079</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.DoIPDynamicGIDMasterSelection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1239</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05027_VIDRequestRecievedCallout</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>4245</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if config parameter DoIPVIDRequestReceived is configured
    with a user function name, then DoIP calls this user callout function for every
    valid received vehicle identification request.
  
Test Object: 
    Vehicle Identification request.
    DoIPVIDRequestReceived
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    User function DoIP_UserGetVin() configured and provided (linked).
    DoIPVIDRequestReceived configured.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to send Vehicle Identification request with VIN (payload
        type 0x0003).
    02: VP: Verify that User_VIDRequestReceived() was called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0125.Call_User_VIDRequestReceived</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>794</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1240</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05028_PowerMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>4357</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that upon receiving a valid Diagnostic power mode request message, an
    Diagnostic Power mode information response message shell be sent on the same connection.
  
Test Object: 
    Diagnostic power mode information request.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    User function DoIPPowerModeCallback configured and provided (linked).
  
Test Execution: 
    01: Configure PowerMode stub to DOIP_READY.
    02: VP(DoIP.SWS_DoIP_00091): Call DoIP_SoAdIfRxIndication() to send Diagnostic power mode
        information request (payload type 0x4003). Payload length for this message type is 0.
    03: VP(DoIP.SWS_DoIP_00047): Verify that configured DoIPPowerModeCallback function is
        called with provided parameters.
    04: VP(DoIP.SWS_DoIP_00092, DoIP.SWS_DoIP_00093):
        Verify that Diagnostic power mode information response has been transmitted.
    05: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00092</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00093</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1241</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05029_PowerMode_WrongLength</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>4464</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when a Diagnostic power mode information request message with invalid
    payload size is received, NACK code 0x004 is sent.
  
Test Object: 
    Diagnostic power mode information request.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x4003
        (Diagnostic entity status request) and an invalid payload length.
    02: VP(DoIP.SWS_DoIP_00019): Verify that SoAd_IfTransmit() was called for correct TxPdu.
    03: VP(DoIP.SWS_DoIP_00019): Verify that NACK code 0x04 was sent.
    04: VP(ReportIssueCallout_GetSoConId, ReportIssueCallout_Call):
        Verify that SoAd_GetSoConId() is called when message is dropped on UDP connection because
        of invalid header as part of Report issue.
    05: VP(ReportIssueCallout_Call):
        Verify that SoAd_GetSoConInfo() is called as part of procedure of ReportIssue, after SoAd_GetSoConId()
        returned E_OK.
    06: VP(ReportIssueCallout_Call, User_DoIPReportIssue):
        Verify that user's callback function User_DoIPReportIssue() is called as part of procedure
        of ReportIssue, after it got Info from SoAd_GetSoConInfo().
    07: VP(ReportId.ContextData):
        Verify that user's callback function User_DoIPReportIssue() has correctly filled ContextData.
    08: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>889</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>888</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.User_DoIPReportIssue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>884</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportId.ContextData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>887</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1242</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05030_PowerMode_E_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>4607</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if DoIPPowerModeCallback() returns E_NOT_OK, Diagnostic PowerMode
    shall be set to 0x00 to indicate that the power mode is not ready.
  
Test Object: 
    Diagnostic power mode information request.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    User function DoIPPowerModeCallback configured and provided (linked).
  
Test Execution: 
    01: Configure PowerMode stub to return E_NOT_OK.
    02: Call DoIP_SoAdIfRxIndication() to send Diagnostic power mode
        information request (payload type 0x4003).
    03: VP(DoIP.SWS_DoIP_00047): Verify that configured DoIPPowerModeCallback function
        returned E_NOT_OK &amp; DOIP_NOT_READY.
    04: VP(DoIP.SWS_DoIP_00092, DoIP.SWS_DoIP_00093):
        Verify that Diagnostic power mode information response has been transmitted.
    05: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00092</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00093</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1243</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05031_RoutingAct_SoAdGetSoConId_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>4710</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that DoIP_UserRoutingActivation is not called when previous call
    to SoAd_GetSoConId function does not return E_OK.
  
Test Object: 
    DoIP_UserRoutingActivation functionality
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIP_SoAdTpStartOfReception() is called.
  
Test Execution: 
    01: Set SoAd_GetSoConId_Stub to return E_NOT_OK.
    02: Send routing activation message on a Tcp connection 0.
    03: VP(RoutingActivationCallback_GetSoConId): Verify that SoAd_GetSoConId was called and that
        configured DoIP_UserRoutingActivation functions were not called.
    04: Set SoAd_GetSoConId_Stub to return E_OK.
    05: Send routing activation message on a Tcp connection 1.
    06: VP(RoutingActivationCallback_GetSoConId): Verify that configured DoIP_UserRoutingActivation
        functions were called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.RoutingActivationCallback_GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>835</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1244</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05032_RoutingActivationCallback_TpTransmit_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>4818</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that DoIP_TpTransmit() can be called in the context of callback functions and
    that afterwards test message will be successfully transmitted on respective channel.
  
Test Object: 
    DoIP_UserRoutingActivation functionality
  
Test Precondition: None.
Test Execution: 
    01: Send Routing activation message on a Tcp connection 0.
    02: VP(RoutingActivationCallback_TpTransmit): Verify that transmission of routing activation
        response message was requested.
    03: VP(RoutingActivationCallback_GetSoConId, RoutingActivationCallback ): Verify that
        SoAd_GetSoConId was called and that all configured DoIP_UserRoutingActivation functions were
        called as well.
    04: Call DoIP_SoAdTpCopyTxData() to transmit routing activation response message.
    05: Call DoIP_SoAdTpTxConfirmation() to confirm routing activation response message and then
        DoIP_MainFunction().
    06: VP(RoutingActivationCallback_TpTransmit): Verify that transmission of test message was
        requested.
    07: Call DoIP_SoAdTpCopyTxData() and DoIP_SoAdTpTxConfirmation() to transmit and confirm
        transmission of a test message.
    08: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.RoutingActivationCallback_GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>835</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0129.RoutingActivationCallback_TpTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>836</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0129.RoutingActivationCallback_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>834</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1245</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05033_RoutingActivationCallback_TpTransmit_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>4959</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies TpTransmit functionality in the context of callback functions.
  
Test Object: 
    DoIP_UserRoutingActivation functionality
  
Test Precondition: None.
Test Execution: 
    01: Set both authentication stub functions to return E_PENDING state.
    02: Send Routing activation message on a Tcp connection 0 for Tester_0 with ActivationType
        matching User_RoutActAuth_1.
    03: VP(RoutingActivationCallback_TpTransmit): Verify that transmission of routing activation
        response message was requested, but activation callback function is not called, since
        authentication is pending.
    04: Send another Routing activation message on a Tcp connection 0 for Tester_0 with
        ActivationType matching User_RoutActAuth_2.
    05: VP(RoutingActivationCallback_TpTransmit): Verify that transmission of routing activation
        response message was requested, but activation callback function is not called, since
        authentication is pending.
    06: Set both authentication stub functions to return E_OK and Authentified = TRUE.
    07: Call DoIP_MainFunction().
    08: VP(RoutingActivationCallback_TpTransmit): Verify that User_RoutActAuth_1() was called,
        transmission of routing activation response message was requested and routing activation
        callback functions were called afterwards.
    09: Call DoIP_SoAdTpCopyTxData() to transmit routing activation response message.
    10: VP(SWS_DoIP_00161): Verify that activation authentication was successful, i.e. that DoIP
        has generated a routing activation response message with a routing activation response
        code set to 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
    11: Call DoIP_SoAdTpTxConfirmation() to confirm transmission of routing activation response
        message and then DoIP_MainFunction().
    12: VP(RoutingActivationCallback_TpTransmit): Verify that User_RoutActAuth_2() was called,
        transmission of routing activation response message was requested and routing activation
        callback functions were called afterwards.
    13: Call DoIP_SoAdTpCopyTxData().
    14: VP(SWS_DoIP_00161): Verify that activation authentication was successful, i.e. that DoIP
        has generated a routing activation response message with a routing activation response
        code set to 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
    15: Call DoIP_SoAdTpTxConfirmation() to confirm transmission of routing activation response
        message and then DoIP_MainFunction().
    16: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 &amp; Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1246</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05034_RoutActAuthConf_PendingReset</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>5169</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies the following scenario:
    When two routing activation request messages are sent to two different TCP connections
    (different Testers) and both messages have the same routing activation number, but different
    OEM specific fields, routing activation is pending. When one of those TCP connections is reset
    the other is still pending on routing activation and in each MainFunction() call, routing
    confirmation function will be called.
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure RoutingActivationConfirmation stub function to return DOIP_E_PENDING.
    02: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        for 1st tester on TcpCon0.
    03: Fetch routing activation response message.
    04: Send routing activation request of a payload size 11 bytes (with different OEM specific
        field), for 2st tester on TcpCon1.
    05: Fetch routing activation response message.
    06: Call MainFunction() 3 times.
    07: VP(DoIP.EB.RoutingActivation.Pending.DifferentTcpConn): Verify that routing authentication
        callback function is triggered for both connections with each MainFunction() call.
    08: Call DoIP_SoAdTpRxIndication() for TcpCon0. This will reset this TcpCon.
    09: Set RoutingActivationConfirmation stub to return E_OK.
    10: Call MainFunction() 3 times.
    11: VP(DoIP.EB.RoutingActivation.Pending.DifferentTcpConn): Verify that routing confirmation
        callback function is triggered once per affected TCP connection.
    12: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon1 (Channel_2) to verify that connection which was not reset is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.RoutingActivation.Pending.DifferentTcpConn</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1247</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05035_RoutActAuthConf_DiffRoutingActIdx</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>5337</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies TpTransmit functionality in the context of callback functions.
  
Test Object: 
    DoIP_UserRoutingActivation functionality
  
Test Precondition: None.
Test Execution: 
    01: Set first authentication stub functions to return E_PENDING state.
    02: Send Routing activation message on a Tcp connection 0 for Tester_0 with ActivationType
        matching User_RoutActAuth_2.
    03: VP(RoutingActivationCallback_TpTransmit): Verify that User_RoutActAuth_2() was called,
        transmission of routing activation response message was requested and routing activation
        callback functions were called afterwards.
    04: VP(SWS_DoIP_00161): Verify that activation authentication was successful, i.e. that DoIP
        has generated a routing activation response message with a routing activation response
        code set to 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
    05: Send another Routing activation message on a Tcp connection 0 for Tester_0 with
        ActivationType matching User_RoutActAuth_1.
    06: VP(RoutingActivationCallback_TpTransmit): Verify that User_RoutActAuth_2() was called,
        transmission of routing activation response message was requested and routing activation
        callback functions were called afterwards. And verify that User_RoutActAuth_1() was not
        called, since it is pending.
    07: Call DoIP_MainFunction().
    08: Set User_RoutActConf_2_Stub to return E_OK to activate Channel_0.
    09: Call DoIP_MainFunction() again.
    10: VP(RoutingActivationCallback_TpTransmit): Verify that User_RoutActAuth_2() was called,
        and routing activation callback functions were called afterwards.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.RoutingActivationCallback_TpTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>836</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1248</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05036_RoutActAuthConf_DiffPendingRoutingActIdx</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>5483</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies TpTransmit functionality in the context of callback functions.
  
Test Object: 
    DoIP_UserRoutingActivation functionality
  
Test Precondition: None.
Test Execution: 
    01: Set all authentication stub functions to return E_PENDING state.
    02: Send Routing activation message on a Tcp connection 0 for Tester_0 and DoIPChannel_0 with
        ActivationType matching User_RoutActAuth_1.
    03: VP(RoutingActivationCallback_TpTransmit): Verify that User_RoutActAuth_1() was called,
        but no other functions were called since authentication is pending.
    04: Send Routing activation message on a Tcp connection 0 for Tester_0 and DoIPChannel_2 with
        ActivationType matching User_RoutActAuth_2.
    05: VP(RoutingActivationCallback_TpTransmit): Verify that User_RoutActAuth_2() was called,
        but no other functions were called since authentication is pending.
    06: Send Routing activation message on a Tcp connection 0 for Tester_0 and DoIPChannel_2 with
        ActivationType matching User_RoutActAuth_2.
    07: VP(RoutingActivationCallback_TpTransmit): Verify that User_RoutActAuth_2() was called,
        but no other functions were called since authentication is pending.
    08: Set all authentication stub functions E_OK to activate Channel_0.
    09: Call DoIP_MainFunction().
    10: VP(RoutingActivationCallback_TpTransmit): Verify that User_RoutActAuth_2() was called,
        and routing activation callback functions were called afterwards.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.RoutingActivationCallback_TpTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>836</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1249</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05037_RoutActAuthConf_PendingRoutingAct2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>5618</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies TpTransmit functionality in the context of callback functions.
  
Test Object: 
    DoIP_UserRoutingActivation functionality
  
Test Precondition: None.
Test Execution: 
    01: Set all authentication stub functions to return E_PENDING state.
    02: Send Routing activation message on a Tcp connection 0 for Tester_0 and DoIPChannel_0 with
        ActivationType matching User_RoutActAuth_1.
    03: VP(RoutingActivationCallback_TpTransmit): Verify that User_RoutActAuth_1() was called,
        but no other functions were called since authentication is pending.
    04: Send Routing activation message on a Tcp connection 0 for Tester_0 and DoIPChannel_2 &amp;
        DoIPChannel_3 with ActivationType matching User_RoutActAuth_2.
    05: VP(RoutingActivationCallback_TpTransmit): Verify that User_RoutActAuth_2() was called,
        but no other functions were called since authentication is pending.
    06: Call DoIP_MainFunction().
    07: Set all authentication stub functions E_OK to activate Channel_0.
    08: Call DoIP_MainFunction() again.
    09: VP(RoutingActivationCallback_TpTransmit): Verify that User_RoutActAuth_2() was called,
        and routing activation callback functions were called afterwards.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.RoutingActivationCallback_TpTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>836</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1250</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05038_DiagMsg_ROUTE_INACTIVE_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>5738</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when configuration parameter DoIPResponseBeforeRoutingActivation is set
    to DOIP_ENABLE_ALL_DIAG_NACK and DoIP module receives a diagnostic message and the according
    "TargetAddress" was not activated by routing activation, the DoIP module shall send a diagnostic
    negative acknowledge message with the diagnostic message negative acknowledge code set
    to 0x06. Additionally the message shall be discarded.
  
Test Object: 
    Diagnostic message reception, NACK 0x06.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPResponseBeforeRoutingActivation set to DOIP_ENABLE_ALL_DIAG_NACK.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() for TcpCon_0.
    02: Send diagnostic message to TcpCon_0 on Channel_2 (SA_0, TA_1).
    03: VP(): Verify that DoIP has discarded the received message and generated diagnostic negative
        acknowledge message on TcpCon_0, with a negative acknowledge code set to 0x06
        (DOIP_ROUTING_INACTIVE).
    04: Set User_RoutActConf_1 callback function to return E_PENDING.
    05: Send routing activation message to TcpCon_0 with a routing activation type 9. Channel_0
        shall not be activated since it is pending on User_RoutActConf_1.
    06: Fetch routing activation response message.
    07: Send diagnostic message to TcpCon_0 on Channel_2 (SA_0, TA_1).
    08: VP(): Verify that DoIP has discarded the received message and generated diagnostic negative
        acknowledge message on TcpCon_0, with a negative acknowledge code set to 0x06
        (DOIP_ROUTING_INACTIVE).
    09: Set User_RoutActConf_1 callback function to return E_OK and Confirmed to TRUE and call
        DoIP_MainFunction() to process confirmation callback function. Channel_0 shall be activated.
    10: Send diagnostic message to TcpCon_0 on Channel_2 (SA_0, TA_1).
    11: VP(): Verify that DoIP has discarded the received message and generated diagnostic negative
        acknowledge message on TcpCon_0, with a negative acknowledge code set to 0x06
        (DOIP_ROUTING_INACTIVE).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0128.SWS_DoIP_00127</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>831</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1251</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05039_DiagMsg_ROUTE_INACTIVE_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>5916</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when configuration parameter DoIPResponseBeforeRoutingActivation is set
    to DOIP_DISABLE_DIAG_NACK_0x06 and DoIP module receives a valid diagnostic message (channel
    exist with a received combination of SA and TA) and the according "TargetAddress" was not
    activated by routing activation, the DoIP module shall silently discard the message.
    It also verifies that sending of acknowledge message with the negative acknowledge code 0x06
    shall be skipped before the first routing activation is successfully completed on that Tcp
    connection, including successful completion of authentication and confirmation functions when
    they are configured.
  
Test Object: 
    Diagnostic message reception, suppression of NACK 0x06.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPResponseBeforeRoutingActivation set to DOIP_DISABLE_DIAG_NACK_0x06.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() for TcpCon_0.
    02: Send diagnostic message to TcpCon_0 on Channel_2 (SA_0, TA_1).
    03: VP(): Verify that DoIP has discarded the received message without generating NACK 0x06
        (helper function called with DiagNackMsg set to NULL_PTR, indicating no NACK is expected).
    04: Set User_RoutActConf_1 callback function to return E_PENDING.
    05: Send routing activation message to TcpCon_0 with a routing activation type 5. Channel_0
        shall not be activated since it is pending on User_RoutActConf_1.
    06: Fetch routing activation response message.
    07: Send diagnostic message to TcpCon_0 on Channel_2 (SA_0, TA_1).
    08: VP(): Verify that DoIP has discarded the received message without generating NACK 0x06.
    09: Set User_RoutActConf_1 callback function to return E_OK and Confirmed to TRUE and call
        DoIP_MainFunction() to process confirmation callback function. Channel_0 shall be activated.
    10: Send diagnostic message to TcpCon_0 on Channel_2 (SA_0, TA_1).
    11: VP(): Verify that DoIP has discarded the received message and generated diagnostic negative
        acknowledge message on TcpCon_0, with a negative acknowledge code set to 0x06
        (DOIP_ROUTING_INACTIVE).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0128.SWS_DoIP_00127</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>831</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1252</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05040_IdsM_PowerModeRespTx</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>6092</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that upon receiving a valid Diagnostic power mode request message, an
    Diagnostic Power mode information response message shell be sent on the same connection and
    notify IdsM that was power mode response message transmitted.
  
Test Object: 
    Diagnostic power mode information request.
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    User function DoIPPowerModeCallback configured and provided (linked).
  
Test Execution: 
    01: Configure PowerMode stub to DOIP_READY.
    02: Call DoIP_SoAdIfRxIndication() to send Diagnostic power mode
        information request (payload type 0x4003). Payload length for this message type is 0.
    03: VP(DoIP.dsn.Func0134.EB.DOIP_SEV_POWER_MODE_RESP_TX):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_POWER_MODE_RESP_TX security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEV_POWER_MODE_RESP_TX</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>857</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1253</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05041_PowerMode_WithProtocolVersion2and3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>6193</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type for Power mode (0x4003) and with protocol type 2 or 3
    is received on the configured Udp connection, DoIP module shall respond with same protocol type as received.
  
Test Object: 
    Power mode messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to true.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type for Power mode and protocol type ISO13400-2:2012 (0x02).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012, DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion):
        Verify that the expected response message was sent with same protocol version as received (0x02).
    03: Set PduInfo to protocol type ISO13400-2:2019 (0x03).
    04: Call DoIP_SoAdIfRxIndication() with message payload type for Entity Status and protocol type ISO13400-2:2019 (0x03).
    05: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019, DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion):
        Verify that the expected response message was sent with same protocol version as received (0x03).
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>871</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Tx.Udp.ProtocolVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>873</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1254</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05042_PowerMode_WithIncorrectProtocolVersion3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>6316</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type for Power mode (0x4003) and with protocol type 3,
    when DoIP_ISO13400_2_2019 is disabled, is received on the configured Udp connection.
    DoIP module shall respond with a NACK code 0x00 for incorrect pattern.
  
Test Object: 
    Power mode messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to true.
    DoIP_ISO13400_2_2019 is set to false.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type for Entity Status and protocol type ISO13400-2:2019 (0x03).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012):
        Verify that the expected response message was sent with with protocol version 0x02, since protocol type
        ISO13400-2:2019 isn't supported and response message contain NACK code 0x00 for incorrect pattern.
    03: VP(ReportIssueCallout_GetSoConId, ReportIssueCallout_Call):
        Verify that SoAd_GetSoConId() is called when message is dropped on UDP connection because
        of invalid header pattern as part of Report issue.
    04: VP(ReportIssueCallout_Call):
        Verify that SoAd_GetSoConInfo() is called as part of procedure of ReportIssue, after SoAd_GetSoConId()
        returned E_OK.
    05: VP(ReportIssueCallout_Call, User_DoIPReportIssue):
        Verify that user's callback function User_DoIPReportIssue() is called as part of procedure
        of ReportIssue, after it got Info from SoAd_GetSoConInfo().
    06: VP(ReportId.ContextData):
        Verify that user's callback function User_DoIPReportIssue() has correctly filled ContextData.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>871</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>889</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>888</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.User_DoIPReportIssue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>884</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportId.ContextData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>887</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1255</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05043_PowerMode_WithIncorrectProtocolVersion2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>6461</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type for Power mode (0x4003) and with protocol type 2,
    when DoIP_ISO13400_2_2012 is disabled, is received on the configured Udp connection.
    DoIP module shall respond with a NACK code 0x00 for incorrect pattern.
  
Test Object: 
    Power mode messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to false.
    DoIP_ISO13400_2_2012 is set to false.
    DoIP_ISO13400_2_2019 is set to true.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type for Entity Status and protocol type ISO13400-2:2012 (0x02).
    02: VP(DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019):
        Verify that the expected response message was sent with with protocol version 0x03, since protocol type
        ISO13400-2:2012 isn't supported and response message contain NACK code 0x00 for incorrect pattern.
    03: VP(ReportIssueCallout_GetSoConId, ReportIssueCallout_Call):
        Verify that SoAd_GetSoConId() is called when message is dropped on UDP connection because
        of invalid header pattern as part of Report issue.
    04: VP(ReportIssueCallout_Call):
        Verify that SoAd_GetSoConInfo() is called as part of procedure of ReportIssue, after SoAd_GetSoConId()
        returned E_OK.
    05: VP(ReportIssueCallout_Call, User_DoIPReportIssue):
        Verify that user's callback function User_DoIPReportIssue() is called as part of procedure
        of ReportIssue, after it got Info from SoAd_GetSoConInfo().
    06: VP(ReportId.ContextData):
        Verify that user's callback function User_DoIPReportIssue() has correctly filled ContextData.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>889</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>888</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.User_DoIPReportIssue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>884</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportId.ContextData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>887</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1256</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05044_ReportIssue_ReportId_TcpGenHdrErr</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>6605</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when DoIP module receives generic DoIP header with payload length
    that is not valid, generic header negative acknowledge message will be sent, with NACK code
    set to 0x04 and it will call user defined callout function for an
    event DOIP_REPORT_ID_FRAME_DROPPED_TCP_GEN_HDR_ERR.
  
Test Object: 
    ReportIssue user callout function.
    Frame dropped due to discarded DoIP message received on a TCP connection due to generic header error.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Send Routing activation (OEM) request message on a TCP socket connection 0 with
        generic header containing invalid payload length.
    02: VP(ReportIssueCallout_GetSoConId, ReportIssueCallout_Call):
        Verify that SoAd_GetSoConId() is called when message is dropped on TCP connection because
        of invalid header as part of Report issue.
    03: VP(ReportIssueCallout_Call):
        Verify that SoAd_GetSoConInfo() is called as part of procedure of ReportIssue, after SoAd_GetSoConId()
        returned E_OK.
    04: VP(ReportIssueCallout_Call, User_DoIPReportIssue):
        Verify that user's callback function User_DoIPReportIssue() is called as part of procedure
        of ReportIssue, after it got Info from SoAd_GetSoConInfo().
    05: VP(ReportId.ContextData):
        Verify that user's callback function User_DoIPReportIssue() has correctly filled ContextData.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>889</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>888</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.User_DoIPReportIssue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>884</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportId.ContextData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>887</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1257</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05045_ReportIssue_ReportId_AliveRespWrongSA</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>6740</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when Alive check response message is received after the routing
    activation is performed (connection is registered) and the field "SourceAddress" does not
    match the registered Source Address of the socket connection, DoIP will notify user that message
    is dropped with user defined callout function for event DOIP_REPORT_ID_FRAME_DROPPED_ALIVE_RESP_WRONG_SA.
  
Test Object: 
    ReportIssue user callout function.
    Frame dropped due to discarded DoIP message received on a TCP connection.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address EBTEST_TESTER_SA_0
        and verify that the route is successfully activated.
    02: Receive Alive check response message on TcpCon0 with a source address different from the
        one registered in the step 01 (EBTEST_TESTER_SA_1).
    03: VP(ReportIssueCallout_GetSoConId, ReportIssueCallout_Call):
        Verify that SoAd_GetSoConId() is called when message is received on TCP connection for Alive
        Response with invalid SA as part of Report issue.
    04: VP(ReportIssueCallout_Call):
        Verify that SoAd_GetSoConInfo() is called as part of procedure of ReportIssue, after SoAd_GetSoConId()
        returned E_OK.
    05: VP(ReportIssueCallout_Call, User_DoIPReportIssue):
        Verify that user's callback function User_DoIPReportIssue() is called as part of procedure
        of ReportIssue, after it got Info from SoAd_GetSoConInfo().
    06: VP(ReportId.ContextData):
        Verify that user's callback function User_DoIPReportIssue() has correctly filled ContextData.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>889</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>888</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.User_DoIPReportIssue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>884</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportId.ContextData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>887</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1258</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05046_ReportIssue_ReportId_DiagMsgDiagHdr</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>6870</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP module receives a diagnostic message with an unknown
    "Source Address", the message shall be discarded and notify user through user defined callout
    function with an event DOIP_REPORT_ID_FRAME_DROPPED_DIAG_MSG_DIAG_HDR.
  
Test Object: 
    ReportIssue user callout function.
    Frame dropped due to discarded DoIP message received on a TCP connection.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send generic header of a diagnostic message on a TCP socket connection 0.
    02: Send diagnostic message header with an unknown (not configured) Source address (0xFFFF).
    03: VP(ReportIssueCallout_GetSoConId, ReportIssueCallout_Call):
        Verify that SoAd_GetSoConId() is called when message is received on TCP connection for Diagnostic
        message with invalid SA as part of Report issue.
    04: VP(ReportIssueCallout_Call):
        Verify that SoAd_GetSoConInfo() is called as part of procedure of ReportIssue, after SoAd_GetSoConId()
        returned E_OK.
    05: VP(ReportIssueCallout_Call, User_DoIPReportIssue):
        Verify that user's callback function User_DoIPReportIssue() is called as part of procedure
        of ReportIssue, after it got Info from SoAd_GetSoConInfo().
    06: VP(ReportId.ContextData):
        Verify that user's callback function User_DoIPReportIssue() has correctly filled ContextData.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>889</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>888</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.User_DoIPReportIssue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>884</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportId.ContextData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>887</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1259</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05047_ReportIssue_ReportId_DropDiagMsgUL</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>7009</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP module receives a diagnostic message and PduR is not able to
    receive a message (PduR_DoIPStartOfReception return BUFREQ_E_OVFL), the message shall be
    discarded and notify user through user defined callout function with an event
    DOIP_REPORT_ID_FRAME_DROPPED_DIAG_MSG_UL.
  
Test Object: 
    ReportIssue user callout function.
    Frame dropped due to discarded DoIP message received on a TCP connection.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Route is activated for tester EBTEST_TESTER_SA_1.
  
Test Execution: 
    01: Configure PduR stub PduR_DoIPStartOfReception() to return BUFREQ_E_OVFL.
    02: Send a valid diagnostic message towards DoIP (with payload transmitted in two parts).
    03: VP(ReportIssueCallout_GetSoConId, ReportIssueCallout_Call):
        Verify that SoAd_GetSoConId() is called when message is received on TCP connection for Diagnostic
        message with invalid SA as part of Report issue.
    04: VP(ReportIssueCallout_Call):
        Verify that SoAd_GetSoConInfo() is called as part of procedure of ReportIssue, after SoAd_GetSoConId()
        returned E_OK.
    05: VP(ReportIssueCallout_Call, User_DoIPReportIssue):
        Verify that user's callback function User_DoIPReportIssue() is called as part of procedure
        of ReportIssue, after it got Info from SoAd_GetSoConInfo().
    06: VP(ReportId.ContextData):
        Verify that user's callback function User_DoIPReportIssue() has correctly filled ContextData.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>889</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>888</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.User_DoIPReportIssue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>884</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportId.ContextData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>887</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1260</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05048_ReportIssue_GetSoConId_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>7151</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when DoIP module wants to call user defined callout function but function
    SoAd_GetSoConId() returned E_NOT_OK, and callout function call shall be skipped.
  
Test Object: 
    ReportIssue user callout function.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Send Routing activation (OEM) request message on a TCP socket connection 0 with
        generic header containing invalid payload length.
    02: VP():
        Verify that SoAd_GetSoConId() is called when message is dropped on TCP connection because
        of invalid header as part of Report issue.
    03: VP():
        Verify that other function aren't called when SoAd_GetSoConId() returned E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>889</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1261</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05049_ReportIssue_GetSoConInfo_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>7257</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when DoIP module wants to call user defined callout function but function
    SoAd_GetSoConInfo() returned E_NOT_OK, and callout function call shall be skipped.
  
Test Object: 
    ReportIssue user callout function.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Send Routing activation (OEM) request message on a TCP socket connection 0 with
        generic header containing invalid payload length.
    02: VP(ReportIssueCallout_GetSoConId, ReportIssueCallout_Call):
        Verify that SoAd_GetSoConId() is called when message is dropped on TCP connection because
        of invalid header as part of Report issue.
    03: VP(ReportIssueCallout_Call):
        Verify that SoAd_GetSoConInfo() is called as part of procedure of ReportIssue, after SoAd_GetSoConId()
        returned E_OK.
    04: VP():
        Verify that other function aren't called when SoAd_GetSoConInfo() returned E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>889</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0136.ReportIssueCallout_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>888</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1262</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05050_RoutActCallback_Change_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>7371</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Test case verifies that Routing activation callback functions can successfully modify response code and initiate connection reset when
    routing activation authentication and confirmation callback functions are not configured for respective Routing activation.
  
Test Object: 
    Routing activation request response with user callback.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIP_SoAdTpStartOfReception() is called.
    Routing activation authentication and confirmation functions are not configured for the tested
    route.
  
Test Execution: 
    01: Configure routing activation user callback function stub_1 to return DOIP_ROU_ACT_RESP_NO_AUTHENTICATION and CloseConnection = FALSE,
        and stub_2 to return DOIP_ROU_ACT_RESP_NO_FREE_TCP and CloseConnection = TRUE.
    02: Send routing activation message on a Tcp connection 0, with Routing activation number 0xE0.
    03: VP(): Verify that configured DoIP_UserRoutingActivation functions were called after successful routing activation.
    04: Fetch routing activation response message on TcpCon0.
    05: VP(): Verify that "Response Code" of a routing activation response message shall contain the value retrieved from the last routing
        activation user callback function.
    06: VP(): Verify that Tcp connection got reset.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.RoutingActivationCallback_RespCode_Change</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>837</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1263</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05051_RoutActCallback_Change_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>7483</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Test case verifies that Routing activation callback functions can successfully modify response code and initiate connection reset although
    routing activation authentication and confirmation callback function are configured, but they do not return E_PENDING state during routing
    activation.
  
Test Object: 
    Routing activation request response with user callback.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure routing activation user callback functions to return DOIP_ROU_ACT_RESP_NO_FREE_TCP and CloseConnection = TRUE.
    02: Configure RoutingActivationAuthentication and RoutingActivationConfirmation stub functions to return E_OK and Authentified and Confirmed TRUE
        respectively.
    03: Send routing activation message on a Tcp connection 0, with Routing activation number 0x04.
    04: VP(): Verify that configured User_RoutActAuth_2 and User_RoutActConf_2 were called during routing activation, and DoIP_UserRoutingActivation
        functions were called after successful routing activation.
    05: Fetch routing activation response message on TcpCon0.
    06: VP(): Verify that "Response Code" of a routing activation response message contains the value retrieved from the last routing activation user
        callback function.
    07: VP(): Verify that Tcp connection got reset.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.RoutingActivationCallback_RespCode_Change</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>837</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1264</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05052_RoutActCallback_NoChange_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>7601</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Test case verifies that Routing activation callback functions cannot modify response code or initiate connection reset
    when routing activation authentication callback functions was pending during routing activation process.
  
Test Object: 
    Routing activation request response with user callback.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure routing activation user callback functions to return DOIP_ROU_ACT_RESP_NO_FREE_TCP and CloseConnection = TRUE.
    02: Configure RoutingActivationAuthentication to return DOIP_E_PENDING and RoutingActivationConfirmation stub function
        to return E_OK with parameter Confirmed set as TRUE.
    03: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        with the expected (configured) values of source address and activation number.
    04: Configure routing activation authentication callback stub to return E_OK and Authentified == TRUE, as this will indicate that
        authentication is successful, and confirmation shall be checked next.
    05: Call MainFunction().
    06: VP(): Verify that configured User_RoutActAuth_2, User_RoutActConf_2 are called during routing activation, and DoIP_UserRoutingActivation
        functions were called after successful routing activation with RespCodePtr and CloseConnectionPtr set to null.
    07: Fetch routing activation response message on TcpCon0.
    08: VP(): Verify that Routing activation callback function did not change "Response Code", (0x10 - DOIP_ROU_ACT_RESP_SUCCESS was transmitted),
        because authentication function was pending.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.RoutingActivationCallback_RespCode_NoChange</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>838</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1265</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest05053_RoutActCallback_NoChange_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest05_Callbacks/source/application/DoIP_ConTest05_Callbacks.c</sourcefile>
      <sourceline>7741</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Test case verifies that Routing activation callback functions cannot modify response code or initiate connection
    reset when routing activation confirmation callback functions was pending during routing activation process.
  
Test Object: 
    Routing activation request response with user callback.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Configure routing activation user callback functions to return DOIP_ROU_ACT_RESP_NO_FREE_TCP and CloseConnection = TRUE.
    02: Configure RoutingActivationAuthentication to return E_OK and Authenticated TRUE. Configure RoutingActivationConfirmation
        to return DOIP_E_PENDING. Configure DoIP_UserRoutingActivation callouts.
    03: Send routing activation request of a payload size 11 bytes (with OEM specific field),
        with the expected (configured) values of source address and activation number.
    04: Fetch routing activation response message on TcpCon0.
    05: VP(): Verify that "Response Code" of a routing activation response message shall contain the value
        0x11, DOIP_ROU_ACT_RESP_PENDING_CONFIRMATION.
    06: Configure routing activation confirmation callback stub to return E_OK and Confirmed = TRUE.
    07: Call MainFunction().
    08: VP(): Verify that configured User_RoutActConf_2 and DoIP_UserRoutingActivation functions
        were called and that routing activation callback functions are called with RespCodePtr and CloseConnectionPtr set to null.
    09: VP(): Verify that no routing activation response message had been sent.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0129.RoutingActivationCallback_RespCode_NoChange</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>838</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1266</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ConTest07001_DiagMessageTransmit_LongPdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest07_LongPdu/source/application/DoIP_ConTest07_LongPdu.c</sourcefile>
      <sourceline>159</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test case verifies transmission of a diagnostic messages with a maximum PDU size
  of 65535 bytes (not including Generic and diagnostic message headers).
  
Test Object: 
    DoIP_TpTransmit().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Socket Route activated.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to request a transmission and DoIP_MainFunction() to process the
        transmission request.
    02: VP(Tx_Idle_2_Tx_Diag_Msg_Start): Verify that state transition TX_IDLE to TX_DIAG_MSG_START
        has occurred.
    03: Call DoIP_SoAdTpCopyTxData() to copy data from PduR, with a requested PDU size
        provided with a previous call to SoAd_TpTransmit().
    04: VP(): Verify that message was copied correctly. The message should include Generic and
        DiagMsg headers + (65535 - 8 - 4) bytes of a payload.
    05: Call DoIP_SoAdTpTxConfirmation() to confirm DoIP about successful reception of the first
        data block.
    06: VP(): Verify that SoAd_TpTransmit() was called to request transmission of the remaining
        payload bytes.
    07: Call DoIP_SoAdTpCopyTxData() to copy data from PduR, with a requested PDU size
        provided with a previous (second) call to SoAd_TpTransmit().
    08: VP(): Verify that copied data contain the second part of the original PduR payload.
    09: Call DoIP_SoAdTpTxConfirmation() to confirm DoIP about successful reception of the second
        data block.
    10: VP(): Verify that PduR_DoIPTpTxConfirmation() was called to notify
        PduR about successful transmission of the complete data block.
    11: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DoIP_TpTransmit.PduSize.64K</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Idle_2_Tx_Diag_Msg_Start</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>779</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1267</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest07002_CustomDiagMessageTransmit_LongPdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest07_LongPdu/source/application/DoIP_ConTest07_LongPdu.c</sourcefile>
      <sourceline>363</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies transmission of a custom diagnostic messages with a maximum PDU size
    of 65535 bytes (not including generic header).
  
Test Object: 
    DoIP_TpTransmit().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Socket Route activated.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to request transmission of a custom payload diagnostic message
        with payload size 65535 bytes.
    02: Call DoIP_MainFunction() to process transmission request.
    03: Call DoIP_SoAdTpCopyTxData() with SduLength = 0.
    04: VP(SWS_DoIP_00231): Verify that BUFREQ_OK and total available data size of the current
        DoIP message to be transmitted(65535) was returned.
    05: Call DoIP_SoAdTpCopyTxData() to fetch message from DoIP buffer, with a requested PDU size
        provided with a previous call to SoAd_TpTransmit().
    06: VP(DoIP_TpTransmit.PduSize.64K): Verify that message was copied correctly. The message
        should include generic header + (65535 - 8 ) bytes of a payload.
    07: Call DoIP_SoAdTpTxConfirmation() to confirm DoIP about successful reception of the first
        data block.
    08: VP(DoIP_TpTransmit.PduSize.64K): Verify that SoAd_TpTransmit() was called to request
        transmission of the remaining payload bytes.
    09: Call DoIP_SoAdTpCopyTxData() to copy data from PduR, with a requested PDU size
        provided with a previous (second) call to SoAd_TpTransmit().
    10: VP(DoIP_TpTransmit.PduSize.64K): Verify that copied data contain the second part of the
        original PduR payload.
    11: Call DoIP_SoAdTpTxConfirmation() to confirm DoIP about successful reception of the second
        data block.
    12: VP(DoIP_TpTransmit.PduSize.64K): Verify that PduR_DoIPTpTxConfirmation() was called to
        notify PduR about successful transmission of the complete data block.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DoIP_TpTransmit.PduSize.64K</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0131.EB.SWS_DoIP_00231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>844</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1268</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest07003_SoAd_TpTransmit_NOT_OK_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest07_LongPdu/source/application/DoIP_ConTest07_LongPdu.c</sourcefile>
      <sourceline>572</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when SoAd_TpTransmit() returns E_NOT_OK during the transmission of
    diagnostic message with a maximum PDU size of 65535 bytes, DoIP module shall discard the
    message.
  
Test Object: 
    Call of SoAd_TpTransmit() during transmission of a long PDU message, in the context of
    DoIP_SoAdTpTxConfirmation().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Socket Route activated.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to request a transmission of a long PDU and DoIP_MainFunction()
        to process the transmission request.
    02: Call DoIP_SoAdTpCopyTxData() to copy data from PduR, with a requested PDU size provided
        with a previous call to SoAd_TpTransmit().
    03: Configure SoAd_TpTransmit() stub to return E_NOT_OK.
    04: Call DoIP_SoAdTpTxConfirmation() to confirm DoIP about successful transmission of the first
        data block, and initiate second data block transmission.
    05: VP(DoIP.EB.DoIP_TpTransmit.PduSize.64K): Verify that SoAd_TpTransmit() was called to
        request transmission of the remaining payload bytes.
    06: Call DoIP_SoAdTpCopyTxData() with SduLength = 0 to check the size of the remaining message.
    07: VP(SWS_DoIP_00223): Verify that BUFREQ_E_NOT_OK was returned, indicating that NACK message
        is not available, i.e. message has been discarded.
    08: VP(DoIP.EB.DoIP_TpTransmit.PduSize.64K): Verify that PduR_DoIPTpTxConfirmation() was called
        with E_NOT_OK to notify PduR about failed transmission.
    09: Configure SoAd_TpTransmit() stub to return E_OK.
    10: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.DoIP_TpTransmit.PduSize.64K</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1269</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest07005_Tcp_GenHeaderNack_MSG_TO_LONG</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest07_LongPdu/source/application/DoIP_ConTest07_LongPdu.c</sourcefile>
      <sourceline>728</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies the case when DoIP receives generic header where payload length exceeds the value
    configured in DoIPMaxRequestBytes, and DoIPMaxRequestBytes is set to 65535 (maximum value
    if PduLengthType is uint16).
    Test verifies that DoIP will consume the complete message (in order of free SoAd buffers),
    and generate generic header negative acknowledge message with NACK code 0x02.
  
Test Object: 
    Diagnostic negative acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() to indicate reception of diagnostic message header
        with an oversized payload relative to parameter DoIPMaxRequestBytes (0xFFFF + 4 + 1).
    02: Call DoIP_SoAdTpCopyRxData() to indicate reception of the first chunk of payload (0xFFFF).
    03: Call DoIP_SoAdTpCopyRxData() to indicate reception of the second (last) chunk of payload(1).
    04: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit() was called for a correct TxPdu and length.
    05: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    06: VP(SWS_DoIP_00017): Verify that DoIP has generated Generic header negative acknowledge
        message, with NACK code set to 0x02.
    07: Call DoIP_SoAdTpTxConfirmation() to confirm generic header NACK message.
    08: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1270</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest07006_DiagMessageReceive_LongPdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest07_LongPdu/source/application/DoIP_ConTest07_LongPdu.c</sourcefile>
      <sourceline>885</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies reception of diagnostic message with maximum payload size (65535 + 4)  when
    PduLengthType is set to uint16.
  
Test Object: 
    Diagnostic negative acknowledge message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() to indicate reception of a diagnostic message generic header
        with a maximum payload length when PduLengthType uint16 (EBTEST_PDULENGTHTYPE_U16_MAX + 4).
    02: Call DoIP_SoAdTpCopyRxData() to indicate reception of diagnostic message header (4).
    03: Call DoIP_SoAdTpCopyRxData() to indicate reception of a diagnostic message payload (0xFFFF).
    04: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit() was called for a correct TxPdu and length.
    05: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    06: VP(SWS_DoIP_00129): Verify that DoIP has generated diagnostic positive acknowledge message.
    07: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    08: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1271</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest07007_Tx_Diag_Msg_Start_2_Tx_Idle</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest07_LongPdu/source/application/DoIP_ConTest07_LongPdu.c</sourcefile>
      <sourceline>1067</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies state transition from state TX_DIAG_MSG_START to TX_IDLE.
  
Test Object: 
    Tx State machine.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Socket Route activated.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to request a transmission of a long PDU and DoIP_MainFunction()
        to process the transmission request and initiate Tx state transition to TX_DIAG_MSG_START.
    02: Call DoIP_SoAdTpTxConfirmation() with E_NOT_OK to initiate Tx state transition to TX_IDLE.
    03: VP(DoIP.EB.TcpTxSM.Tx_Diag_Msg_Start_2_Tx_Idle): Verify that state transition
        TX_DIAG_MSG_START to TX_IDLE has occurred.
    04: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Diag_Msg_Start_2_Tx_Idle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>778</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1272</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest07008_DiagMessageTransmit_Pdu32uint</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest07_LongPdu/source/application/DoIP_ConTest07_LongPdu.c</sourcefile>
      <sourceline>1171</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies transmission of a diagnostic messages with payload size (65536 + 1) when
    PduLengthTypeEnum is configured to uint32.
  
Test Object: 
    DoIP_TpTransmit().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Socket Route activated.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to request a transmission and DoIP_MainFunction() to process the
        transmission request.
    02: VP(Tx_Idle_2_Tx_Diag_Msg_Start): Verify that state transition TX_IDLE to TX_DIAG_MSG_START
        has occurred.
    03: Call DoIP_SoAdTpCopyTxData() to copy data from PduR, with a requested PDU size
        provided with a previous call to SoAd_TpTransmit().
    04: VP(DoIP.EB.PDULENGTHTYPE001): Verify that message was copied correctly.
        The message should include Generic and DiagMsg headers + payload.
    05: Call DoIP_SoAdTpTxConfirmation() to confirm DoIP about successful reception.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Idle_2_Tx_Diag_Msg_Start</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>779</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1273</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest07009_DiagMessageReceive_Pdu32uint</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest07_LongPdu/source/application/DoIP_ConTest07_LongPdu.c</sourcefile>
      <sourceline>1327</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies reception of diagnostic message with maximum payload size (65536 + 1)  when
    PduLengthType is set to uint32.
  
Test Object: 
    Diagnostic message reception.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() to indicate reception of a diagnostic message generic header
        with a payload length set to (65536 + 1 + 4), i.e. user payload size is larger then uint16.
    02: Call DoIP_SoAdTpCopyRxData() to provide diagnostic message header.
    03: Call DoIP_SoAdTpCopyRxData() to provide diagnostic message payload (65536 + 1).
    04: VP(DoIP.EB.PDULENGTHTYPE001): Verify that PduR has received the complete message.
    05: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit() was called for a correct TxPdu and length.
    06: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1274</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ConTest08001_CustomMsg_Receive</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest08_CustomPayloadType/source/application/DoIP_ConTest08_CustomPayloadType.c</sourcefile>
      <sourceline>63</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies reception of a message with custom payload type.
  
Test Object: 
    DoIP_SoAdTpCopyRxData() for custom payload type message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() to provide first part of custom payload message generic header.
    02: Call DoIP_SoAdTpCopyRxData() to provide last part of custom payload message generic header.
    03: VP(RxCustomMsg.CustomPayloadType_OK): Verify that DoIP_SoAdTpCopyRxData() returned
        available buffer size equal to custom message payload size.
    04: VP(RxCustomMsg.EcuC_SetMetaData): Verify that SoAd_GetSoConId, EcuC_SetMetaDataPayloadType
        and EcuC_SetMetaDataSoConId were called.
    05: VP(RxCustomMsg.PduR_StartOfReception): Verify that PduR_DoIPStartOfReception was called
        successfully.
    06: Call DoIP_SoAdTpCopyRxData() to dispatch part of the custom payload (16-4) bytes.
    07: VP(RxCustomMsg.PduR_CopyRxData): Verify that DoIP_SoAdTpCopyRxData() returned BUFREQ_OK,
        available buffer size is set to the remaining payload length (4).
    08: Call DoIP_SoAdTpCopyRxData() to provide the remaining custom message payload.
    09: VP(RxCustomMsg.PduR_TpRxIndication_OK): Verify that DoIP_SoAdTpCopyRxData() returned
        BUFREQ_OK and available buffer size is set for the next generic header (8). Also
        PduR_DoIPTpRxIndication() is called to notify PduR about received custom payload message.
    10: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Custom message
        on TcpCon1 (CustomChannel_0) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.CustomPayloadType_OK</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>800</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.EcuC_SetMetaData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>801</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.PduR_StartOfReception</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>802</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.PduR_CopyRxData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>803</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.PduR_TpRxIndication_OK</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>804</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1275</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest08002_CustomMsg_Transmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest08_CustomPayloadType/source/application/DoIP_ConTest08_CustomPayloadType.c</sourcefile>
      <sourceline>230</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies transmission of a message with custom payload type.
  
Test Object: 
    DoIP_TpTransmit() for custom payload type message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to request transmission of a custom payload message.
    02: VP(TxCustomMsg.EcuC_GetMetaDataPayloadType): Verify that EcuC_GetMetaDataPayloadType() was
        called to retrieve stored payload type.
    03: VP(TxCustomMsg.QueueTxRequest): Verify that DoIP_TpTransmit() returned E_OK, indicating
        successful message buffering and queuing.
    04: Call MainFunction() to process Tp transmission request.
    05: Call DoIP_SoAdTpCopyTxData() with SduLength = 0.
    06: VP(SWS_DoIP_00231): Verify that BUFREQ_OK and total available data size of the current
        Custom message to be transmitted was returned.
    07: Call DoIP_SoAdTpCopyTxData() to fetch custom message.
    08: VP(TxCustomMsg.SoAdCopyTxData, CustomChannel.ChannelActivation): Verify that transmitted
        message has expected generic header and payload.
    09: Call DoIP_SoAdTpTxConfirmation() to indicate successful Tp transmission.
    10: VP(TxCustomMsg.SoAdTpTxConfirmation): Verify that PduR_DoIPTpTxConfirmation() is called
        with the correct parameter PduRTxPduId.
    11: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Custom message
        on TcpCon1 (CustomChannel_0) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.TxCustomMsg.EcuC_GetMetaDataPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>806</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.TxCustomMsg.QueueTxRequest</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>807</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.TxCustomMsg.SoAdCopyTxData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>808</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.CustomChannel.ChannelActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>798</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.TxCustomMsg.SoAdTpTxConfirmation</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>809</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1276</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest08003_GenHeaderNack_UNKNOWN_PL_TYPE</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest08_CustomPayloadType/source/application/DoIP_ConTest08_CustomPayloadType.c</sourcefile>
      <sourceline>407</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies reception of a message with unknown payload type.
  
Test Object: 
    DoIP_SoAdTpCopyRxData() for unsuported payload type.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIP_SoAdTpStartOfReception() called to initiate Tp reception.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() to activate channels connected to this Tcp connection.
    02: VP(CustomChannel.ChannelActivation): Verify that custom channel is ready to receive Generic
        header.
    03: Call DoIP_SoAdTpCopyRxData() to provide custom message generic header with unsupported
        payload type.
    04: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    05: VP(SWS_DoIP_00016): Verify that DoIP has generated Generic header negative acknowledge
        message, with NACK code set to 0x01.
    06: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    07: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon (CustomChannel_0) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.CustomChannel.ChannelActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>798</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1277</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest08004_CustomMsg_BufferNotAvailable_Retry</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest08_CustomPayloadType/source/application/DoIP_ConTest08_CustomPayloadType.c</sourcefile>
      <sourceline>540</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that DoIP will retry transmission of a message with custom payload type in
    the next DoIP_SoAdTpCopyTxData() call if buffer was not available.
  
Test Object: 
    DoIP_TpTransmit() for custom payload type message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    PduR_DoIPCopyTxData_Stub.RetVal set to BUFREQ_E_NOT_OK.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to request transmission of a custom payload message.
    02: VP(TxCustomMsg.EcuC_GetMetaDataPayloadType): Verify that EcuC_GetMetaDataPayloadType() was
        called to retrieve stored payload type.
    03: VP(TxCustomMsg.QueueTxRequest): Verify that DoIP_TpTransmit() returned E_OK, indicating
        successful message buffering and queuing.
    04: Call MainFunction() to process Tp transmission request.
    05: Call DoIP_SoAdTpCopyTxData() with SduLength = 0.
    06: VP(DoIP.EB.CopyTxData.ReturnValue): Verify that DoIP_SoAdTpCopyTxData() returned
        BUFREQ_E_NOT_OK was returned as buffer is not available.
    07: PduR_DoIPCopyTxData_Stub.RetVal set to BUFREQ_OK.
    08: Call DoIP_SoAdTpCopyTxData() again.
    09: VP(SWS_DoIP_00231): Verify that BUFREQ_OK and total available data size of the current
        DoIP message header to be transmitted(8) was returned.
    10: Call DoIP_SoAdTpCopyTxData() to fetch custom message.
    11: VP(TxCustomMsg.SoAdCopyTxData): Verify that transmitted message has expected generic header
        and payload.
    12: Call DoIP_SoAdTpTxConfirmation() to indicate successful Tp transmission.
    13: VP(TxCustomMsg.SoAdTpTxConfirmation): Verify that PduR_DoIPTpTxConfirmation() is called
        with the correct parameter PduRTxPduId.
    14: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Custom message
        on TcpCon1 (CustomChannel_0) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.TxCustomMsg.EcuC_GetMetaDataPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>806</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.TxCustomMsg.QueueTxRequest</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>807</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.TxCustomMsg.SoAdCopyTxData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>808</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.TxCustomMsg.SoAdTpTxConfirmation</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>809</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0131.EB.SWS_DoIP_00231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>844</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.CopyTxData.ReturnValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1278</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest08005_CustomMsg_PduRCopyRxData_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest08_CustomPayloadType/source/application/DoIP_ConTest08_CustomPayloadType.c</sourcefile>
      <sourceline>740</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies functionality of DoIP_SoAdTpCopyRxData when PduR_DoIPCopyRxData returns
    BUFREQ_E_NOT_OK.
  
Test Object: 
    DoIP_SoAdTpCopyRxData() for custom payload type message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() to provide custom message generic header.
    02: VP(CustomPayloadType_OK): Verify that DoIP_SoAdTpCopyRxData() returned available buffer
        size equal to custom message payload size.
    03: Set PduR stub to return BUFREQ_E_NOT_OK when PduR_DoIPCopyRxData() is called.
    04: Call DoIP_SoAdTpCopyRxData() to dispatch payload.
    05: VP(RxCustomMsg.PduR_TpRxIndication_NOT_OK): Verify that PduR_DoIPTpRxIndication was called
        with the according PduId and the result set to E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.CustomPayloadType_OK</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>800</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.PduR_TpRxIndication_NOT_OK</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>805</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1279</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest08006_CustomMsg_PduRStartReception_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest08_CustomPayloadType/source/application/DoIP_ConTest08_CustomPayloadType.c</sourcefile>
      <sourceline>864</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when during a call of DoIP_SoAdTpCopyRxData, PduR_DoIPStartOfReception
    returns BUFREQ_E_NOT_OK, DoIP module shall silently discard the message without generating NACK
    message.
  
Test Object: 
    DoIP_SoAdTpCopyRxData() for custom payload type message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Set PduR stub to return BUFREQ_E_NOT_OK when PduR_DoIPStartOfReception() is called.
    02: Call DoIP_SoAdTpCopyRxData() to provide custom message generic header.
    03: Call DoIP_SoAdTpCopyRxData() to provide Custom message payload.
    04: VP(): Verify that PduR_DoIPCopyRxData() was not called as message was silently discarded.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.PduR_StartOfReception</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>802</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1280</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest08007_CustomMsg_SegmentedPduRCopyRxData_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest08_CustomPayloadType/source/application/DoIP_ConTest08_CustomPayloadType.c</sourcefile>
      <sourceline>980</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies when PduR_DoIPCopyRxData returns BUFREQ_E_NOT_OK on passing of payload,
    DoIP module shall silently discard the message.
  
Test Object: 
    DoIP_SoAdTpCopyRxData() for custom payload type message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() to provide custom message generic header.
    02: VP(RxCustomMsg.CustomPayloadType_OK): Verify that DoIP_SoAdTpCopyRxData() returned available
        buffer size equal to custom message payload size.
    03: Call DoIP_SoAdTpCopyRxData() to dispatch a part of Custom message payload (3).
    04: Set PduR stub to return BUFREQ_E_NOT_OK when PduR_DoIPCopyRxData() is called.
    05: Call DoIP_SoAdTpCopyRxData() to provide the rest of custom message payload.
    06: VP(RxCustomMsg.PduR_TpRxIndication_NOT_OK): Verify that PduR_DoIPTpRxIndication was called
        with the according PduId and the result set to E_NOT_OK.
    07: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Custom message
        on TcpCon0 (CustomChannel_1) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.CustomPayloadType_OK</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>800</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.PduR_TpRxIndication_NOT_OK</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>805</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1281</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest08008_CustomMsg_PldBufferOverflow</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest08_CustomPayloadType/source/application/DoIP_ConTest08_CustomPayloadType.c</sourcefile>
      <sourceline>1125</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies when PduR_DoIPCopyRxData returns BUFREQ_E_OVFL on passing of payload,
    DoIP module shall discard the message.
  
Test Object: 
    DoIP_SoAdTpCopyRxData() for custom payload type message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() to provide custom payload message generic header.
    02: VP(CustomPayloadType_OK): Verify that DoIP_SoAdTpCopyRxData() returned available buffer
        size equal to custom message payload size.
    03: Set PduR stub to return BUFREQ_E_OVFL when PduR_DoIPCopyRxData() is called.
    04: Call DoIP_SoAdTpCopyRxData() to dispatch first part of Custom message payload.
    05: VP(RxCustomMsg.PduR_TpRxIndication_NOT_OK): Verify that PduR_DoIPTpRxIndication was called
        with the according PduId and the result set to BUFREQ_E_OVFL.
    06: Call DoIP_SoAdTpCopyRxData() to dispatch last part of Custom message payload.
    07: VP(RxCustomMsg.PduR_TpRxIndication_NOT_OK): Verify that PduR_DoIPCopyRxData() was not called
        as message was silently discarded.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.CustomPayloadType_OK</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>800</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.PduR_TpRxIndication_NOT_OK</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>805</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1282</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest08009_CopyRxData_SduLength_Oversized</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest08_CustomPayloadType/source/application/DoIP_ConTest08_CustomPayloadType.c</sourcefile>
      <sourceline>1264</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP_SoAdTpCopyRxData() is called for passing Custom message
    payload with PduInfoPtr.SduLength larger then the buffer size provided to SoAd with previous
    calls of DoIP_SoAdTpCopyRxData(), DoIP shall return BUFREQ_E_NOT_OK.
  
Test Object: 
    DoIP_SoAdTpCopyRxData() for custom payload type message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() to provide custom payload message generic header.
    02: Call DoIP_SoAdTpCopyRxData() with a message size larger then the buffer size provided with
        previous call to DoIP_SoAdTpCopyRxData().
    03: VP(): Verify that DoIP_SoAdTpCopyRxData() has returned BUFREQ_E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>286</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1283</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest08010_TpTransmit_EcuC_GetMetaDataPayloadType_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest08_CustomPayloadType/source/application/DoIP_ConTest08_CustomPayloadType.c</sourcefile>
      <sourceline>1358</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies the behavior of DoIP_TpTransmit() in case when API
    EcuC_GetMetaDataPayloadType returns with result other then E_OK. In that case transmission shall
    be rejected and DoIP_TpTransmit() will return E_NOT_OK.
  
Test Object: 
    DoIP_TpTransmit() for custom payload type message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Set EcuC_GetMetaDataPayloadType_Stub to return E_NOT_OK.
    02: Call DoIP_TpTransmit() to request transmission of a custom payload message.
    03: VP(): Verify that DoIP_TpTransmit() has returned E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.TxCustomMsg.EcuC_GetMetaDataPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>806</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1284</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest08011_HandleCustomMsg_SoAdGetSoConId_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest08_CustomPayloadType/source/application/DoIP_ConTest08_CustomPayloadType.c</sourcefile>
      <sourceline>1442</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if during the reception of a message with custom payload type
    SoAd_GetSoConId returns E_NOT_OK, message will be discarded and no NACK shall be generated.
  
Test Object: 
    DoIP_SoAdTpCopyRxData() for custom payload type message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Set SoAd_GetSoConId_Stub to return E_NOT_OK.
    02: Call DoIP_SoAdTpCopyRxData() to provide custom payload message generic header.
    03: Call DoIP_SoAdTpCopyRxData() to provide custom payload.
    04: VP(): Verify that DoIP_SoAdTpCopyRxData() returned BUFREQ_OK, available buffer size is set
        to the size of generic header. PduR_DoIPCopyRxData() was not called as message was discarded
        and no NACK was generated.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.EcuC_SetMetaData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>801</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1285</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest08012_EcuC_SetMetaDataPayloadType_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest08_CustomPayloadType/source/application/DoIP_ConTest08_CustomPayloadType.c</sourcefile>
      <sourceline>1552</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if EcuC_SetMetaDataPayloadType returns E_NOT_OK during a call of
    DoIP_SoAdTpCopyRxData(), message will be silently discarded and no NACK shall be generated.
  
Test Object: 
    DoIP_SoAdTpCopyRxData() for custom payload type message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Set EcuC_SetMetaDataPayloadType_Stub to return E_NOT_OK.
    02: Call DoIP_SoAdTpCopyRxData() to provide custom payload message generic header.
    03: VP(): Verify that SoAd_GetSoConId, EcuC_SetMetaDataPayloadType and EcuC_SetMetaDataSoConId
              were called but PduR_DoIPStartOfReception was not called because message is silently
              discarded.
    04: Call DoIP_SoAdTpCopyRxData() to provide custom payload.
    05: VP(): Verify that SoAd_TpTransmit was not called because message is silently discarded and
              no NACK is generated.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.EcuC_SetMetaData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>801</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1286</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest08013_ResetTcpConCustom_PduR_DoIPTpRxIndication_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest08_CustomPayloadType/source/application/DoIP_ConTest08_CustomPayloadType.c</sourcefile>
      <sourceline>1658</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if the function DoIP_SoAdTpRxIndication is called during ongoing
    reception of the custom payload message, DoIp module shall release all data connected to the
    reception and forward the result E_NOT_OK to PduR_DoIPTpRxIndication.
  
Test Object: 
    DoIP_SoAdTpRxIndication() for custom payload type message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() to provide custom payload message generic header.
    02: Call DoIP_SoAdTpRxIndication() while custom channel is receiving data.
    03: VP(): Verify that PduR_DoIPTpRxIndication was called with result E_NOT_OK and that
              Tcp connection is reset.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.CustomChannel.TcpConReset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>799</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1287</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest08014_ResetTcpConCustom_PendingRequest</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest08_CustomPayloadType/source/application/DoIP_ConTest08_CustomPayloadType.c</sourcefile>
      <sourceline>1761</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if the function DoIP_SoAdTpRxIndication is called during ongoing
    transmission of the custom payload message, DoIp module shall release all data connected to the
    transmission and forward the result E_NOT_OK to PduR_DoIPTpTxConfirmation.
  
Test Object: 
    DoIP_SoAdTpRxIndication() for custom payload type message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to request transmission of a custom payload message.
    02: Call MainFunction() to process Tp transmission request.
    03: Call DoIP_SoAdTpRxIndication() while custom channel is transmitting data.
    04: Verify that PduR_DoIPTpTxConfirmation was called with result E_NOT_OK and that Tcp
        connection is reset.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.CustomChannel.TcpConReset</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>799</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1288</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest08015_CustomMsg_Receive_Itf1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest08_CustomPayloadType/source/application/DoIP_ConTest08_CustomPayloadType.c</sourcefile>
      <sourceline>1854</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies reception of a message with custom payload type on multiple interfaces.
  
Test Object: 
    DoIP_SoAdTpCopyRxData() for custom payload type message on multiple interfaces.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() to provide custom payload message generic header on Interface 0.
    02: Call DoIP_SoAdTpCopyRxData() to provide custom payload message generic header on Interface 1.
    03: VP(RxCustomMsg.CustomPayloadType_OK): Verify that DoIP_SoAdTpCopyRxData() returned
        available buffer size equal to custom message payload size on Interface 1.
    04: VP(RxCustomMsg.EcuC_SetMetaData, RxCustomMsg.PduR_StartOfReception):
        Verify that SoAd_GetSoConId, EcuC_SetMetaDataPayloadType, EcuC_SetMetaDataSoConId and
        PduR_DoIPStartOfReception were called for Interface 1.
    05: Call DoIP_SoAdTpCopyRxData() to dispatch part of the custom payload (16-4) bytes for Interface 0.
    06: Call DoIP_SoAdTpCopyRxData() to dispatch part of the custom payload (16-4) bytes for Interface 1.
    07: VP(RxCustomMsg.PduR_CopyRxData): Verify that DoIP_SoAdTpCopyRxData() returned BUFREQ_OK,
        available buffer size is set to the remaining payload length (4) on Interface 1.
    08: Call DoIP_SoAdTpCopyRxData() to provide the remaining custom message payload on Interface 0.
    09: Call DoIP_SoAdTpCopyRxData() to provide the remaining custom message payload on Interface 1.
    10: VP(RxCustomMsg.PduR_TpRxIndication_OK): Verify that DoIP_SoAdTpCopyRxData() returned
        BUFREQ_OK and available buffer size is set for the next generic header (8). Also
        PduR_DoIPTpRxIndication() is called to notify PduR about received custom payload message from
        Interface 1.
    11: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Custom message
        on TcpCon_1_0 (CustomChannel_1_0) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.CustomPayloadType_OK</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>800</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.PduR_StartOfReception</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>802</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.PduR_CopyRxData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>803</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.RxCustomMsg.PduR_TpRxIndication_OK</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>804</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1289</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest08016_CustomMsg_Transmit_Itf1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest08_CustomPayloadType/source/application/DoIP_ConTest08_CustomPayloadType.c</sourcefile>
      <sourceline>2048</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies transmission of a message with custom payload type on multiple interfaces.
  
Test Object: 
    DoIP_TpTransmit() for custom payload type message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to request transmission of a custom payload message for Interface 0.
    02: Call DoIP_TpTransmit() to request transmission of a custom payload message for Interface 1.
    03: VP(TxCustomMsg.EcuC_GetMetaDataPayloadType, TxCustomMsg.QueueTxRequest):
        verify that DoIP_TpTransmit() returned E_OK, indicating successful message buffering and queuing, and
        that EcuC_GetMetaDataPayloadType() was called to retrieve stored payload type on Interface 1.
    04: Call MainFunction() to process Tp transmission request.
    05: Call DoIP_SoAdTpCopyTxData() to fetch custom message from Interface 1.
    06: VP(TxCustomMsg.SoAdCopyTxData, CustomChannel.ChannelActivation): Verify that transmitted
        message has expected generic header and payload.
    07: Call DoIP_SoAdTpTxConfirmation() to indicate successful Tp transmission.
    08: VP(TxCustomMsg.SoAdTpTxConfirmation): Verify that PduR_DoIPTpTxConfirmation() is called
        with the correct parameter PduRTxPduId.
    09: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Custom message
        on TcpCon1_0 (CustomChannel_1_0) to verify that connection is operational.
    10: Finish the process of transmitting the custom payload message for interface 0.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0117.TxCustomMsg.EcuC_GetMetaDataPayloadType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>806</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.TxCustomMsg.QueueTxRequest</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>807</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.TxCustomMsg.SoAdCopyTxData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>808</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0117.CustomChannel.ChannelActivation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>798</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1290</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ConTest09001_SAOnDifferentTcp_NORESPONSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>127</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if the received "Source Address" is already registered to another
    connection, an alive check request to this connection shall be triggered and it shall be waiting
    for the alive check response message. If the alive check response was not received within the
    configured time, the DoIP module shall send a routing activation response message with the
    activation response code set to 0x10 and register "Source Address" to a new connection.
    Test case also verifies that when Tcp connection is reset it's Inactivity timer gets disabled.
  
Test Object: 
    Single connection Alive check
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0 and TcpCon1.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address SA_1.
    02: VP(SWS_DoIP_00113): Verify that DoIP has generated Routing activation response message,
        with response code 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
    03: Send routing activation request message on TcpCon1 with the same source address (SA_1),
        as used in step 01.
    04: VP(SWS_DoIP_00105, SWS_DoIP_00139, Rx_Route_Act_2_Rx_Single_Alive_Check_Wait):
        Verify that DoIP has transmitted Alive check request message with expected structure and
        length on TcpCon0, because SA_1 is already assigned to this connection.
        This also verifies the transition of RX state machine from RX_ROUTE_ACT -&gt;
        RX_SINGLE_ALIVE_CHECK_WAIT.
    05: Call DoIP_SoAdTpCopyRxData() with PduLeghth == 0, to request size of available data buffer.
    06: VP(Rx_Single_Alive_Check_Wait_2_Rx_Single_Alive_Check_Wait):
        Verify that when DoIP_SoAdTpCopyRxData() is called while connection is in
        RX_ALL_CON_ALIVE_CHECK_WAIT state, it will return E_BUSY and remain in the same state.
        RX_ALL_CON_ALIVE_CHECK_WAIT to the state RX_ALL_CON_ALIVE_CHECK_WAIT
    07: Call DoIP_MainFunction() EBTEST_ALIVE_CHECK_RESP_TIMEOUT -1 times to tick Alive check
        timer for TcpCon0.
    08: Call DoIP_MainFunction() one more time to elapse DoIPAliveCheckResponseTimeout timeout.
    09: VP(SWS_DoIP_00105): Verify that TcpCon0 connection got closed and reopened again.
    10: VP(SWS_DoIP_00105): Verify that DoIP has generated Routing activation response message,
        with response code 0x10 (DOIP_ROU_ACT_RESP_SUCCESS) and that TcpCon0 is reset.
    11: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 to verify that connection is operational.
    12: Continue ticking DoIP_MainFunction() until Inactivity timer almost ticks out.
    13: Call DoIP_MainFunction() to expire Inactivity timer.
    14: VP(DoIP.dsn.Func0127.DeadlineMonitoring): Verify that TcpCon0 did not reset again, because
        Inactivity timer has been disabled during first reset.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00139</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Route_Act_2_Rx_Single_Alive_Check_Wait</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>760</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Single_Alive_Check_Wait_2_Rx_Single_Alive_Check_Wait</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>761</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0127.DeadlineMonitoring</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>829</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1291</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09002_SAOnDifferentTcp_RESPONSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>338</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if the received "Source Address" is already registered to another
    connection, an alive check request to this connection shall be triggered and it shall be waiting
    for the alive check response message. If the alive check response was received within the
    configured time, the DoIP module shall send a routing activation response message with the
    activation response code set to 0x03 and reset connection afterwards.
  
Test Object: 
    Single connection Alive check
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0 and TcpCon1.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address SA_1.
    02: VP(SWS_DoIP_00113): Verify that DoIP has generated Routing activation response message,
        with response code 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
    03: Send routing activation request message on TcpCon1 with the same source address (SA_1),
        as used in step 01.
    04: VP(): Verify that DoIP has transmitted Alive check request message on TcpCon0, because
        SA_1 is already assigned to this connection.
    05: Call DoIP_SoAdTpCopyRxData() to Provide Alive check response message Generic header
        on TcpCon0.
    06: VP(Rx_Ready_2_Rx_Alive_Check_Resp): Verify that DoIP_SoAdTpCopyRxData() has returned
        BUFREQ_OK and BufferSize equals 2 (Alive check response payload). This verifies Rx state
        machine transition RX_READY -&gt; RX_ALIVE_CHECK_RESP.
    07: Call DoIP_SoAdTpCopyRxData() to Provide Alive check response message payload.
    08: VP(SWS_DoIP_00105): Verify that DoIP has generated Routing activation response message,
        with response code 0x03 (DOIP_ROU_ACT_RESP_SRC_IN_USE).
    09: VP(SWS_DoIP_00105): Verify that TcpCon1 connection got closed and reopened again.
    10: VP(DoIP.EB.TestingStrategy.BasicTrafficTest, Rx_Alive_Check_Resp_2_Rx_Ready):
        Transmit and receive simple Diagnostic message on TcpCon0 to verify that connection is
        operational. This way it is also verified that the TcpCon0 was in RX_READY state after
        receiving Alive check response message, i.e. transition RX_ALIVE_CHECK_RESP -&gt; RX_READY is
        verified.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Alive_Check_Resp_2_Rx_Ready</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>742</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Ready_2_Rx_Alive_Check_Resp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>745</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1292</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09003_AliveReqToAllConRESPONSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>556</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if the amount of registered connections is as much as in configured
    DoIPMaxTesterConnections, an Alive check request shall be sent to all registered connections.
    If none of the alive checks times out the DoIP module shall send a routing activation response
    message with the activation response code set to 0x01 and reset the connection.
  
Test Object: 
    All connections Alive check
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0, TcpCon1 and TcpCon2.
  
Test Execution: 
    01: Receive routing activation request message on TcpCon0 with source address SA_0 and verify
        that the route is successfully activated (ACK transmitted with response code 0x10).
    02: Receive routing activation request message on TcpCon1 with source address SA_1 and verify
        that the route is successfully activated (ACK transmitted with response code 0x10).
    03: Receive routing activation request message on TcpCon2 with source address SA_2 and verify
        that the route is successfully activated (ACK transmitted with response code 0x10).
    04: Receive routing activation request message on TcpCon3 with the source address (SA_3).
    05: Call DoIP_MainFunction() to trigger all connection Alive check.
    06: VP(SWS_DoIP_00107, Rx_Route_Act_2_Rx_All_Conn_Alive_Check_Wait):
        Verify that DoIP has transmitted Alive check request message on TcpCon0, TcpCon1 and
        TcpCon2. This also verifies RX state machine transition RX_ROUTE_ACT -&gt;
        RX_ALL_CON_ALIVE_CHECK_WAIT.
    07: Call DoIP_SoAdTpCopyRxData() with PduLeghth == 0, to request size of available data buffer.
    08: VP(Rx_All_Con_Alive_Check_Wait_2_Rx_All_Con_Alive_Check_Wait):
        Verify that when DoIP_SoAdTpCopyRxData() is called while connection is in
        RX_ALL_CON_ALIVE_CHECK_WAIT state, it will return E_BUSY and remain in the same state.
        RX_ALL_CON_ALIVE_CHECK_WAIT to the state RX_ALL_CON_ALIVE_CHECK_WAIT
    09: Call DoIP_MainFunction() to tick alive check timer EBTEST_ALIVE_CHECK_RESP_TIMEOUT- 3
        times.
    10: VP(SWS_DoIP_00107): Verify that neither ACK nor NACK messages have been
        generated and no connection got reset, i.e. Alive check is still in progress.
    11: Receive Alive check response message on TcpCon0 with SA matching already registered SA_0.
    12: VP(SWS_DoIP_00107): Call DoIP_MainFunction() verify that neither ACK nor NACK messages have
        been generated and no connection got reset, i.e. Alive check is still in progress.
    13: Receive Alive check response message on TcpCon1 with SA matching already registered SA_1.
    14: VP(SWS_DoIP_00107): Call DoIP_MainFunction() verify that neither ACK nor NACK messages have
        been generated and no connection got reset, i.e. Alive check is still in progress.
    15: Receive Alive check response message on TcpCon2 with SA matching already registered SA_2.
    16: Call DoIP_MainFunction().
    17: VP(SWS_DoIP_00107, Rx_All_Con_Alive_Check_Wait_2_Rx_Ack_Conf_Wait):
        Verify that DoIP has generated Routing activation response message on TcpCon3, with response
        code 0x01 (DOIP_ROU_ACT_RESP_NO_FREE_TCP), because non of connections in Alive check
        timed-out. Also verify that TcpCon3 got reset and SoAd_CloseSoCon was called with
        Abort=FALSE if DoIPEnableTcpClosureWithFIN is enabled or with Abort=TRUE if disabled.
        This also verifies Rx state machine transition:
        RX_ALL_CON_ALIVE_CHECK_WAIT -&gt; RX_ACK_CONF_WAIT
    18: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0, TcpCon1 and TcpCon2 to verify that connections are operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_All_Con_Alive_Check_Wait_2_Rx_All_Con_Alive_Check_Wait</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>755</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Route_Act_2_Rx_All_Conn_Alive_Check_Wait</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>757</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_All_Con_Alive_Check_Wait_2_Rx_Ack_Conf_Wait</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>756</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1293</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09004_AliveReqToAllConNORESPONSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>864</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if the amount of registered connections is as much as in configured
    DoIPMaxTesterConnections, an alive check request shall be sent to all registered connections and
    it shall be waiting for the alive check response message. If any of the alive checks times out
    the DoIP module shall send a routing activation response message with the activation response
    code set to 0x01 and reset connection afterwards.
  
Test Object: 
    All connections Alive check
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0, TcpCon1 and TcpCon2.
  
Test Execution: 
    01: Receive routing activation request message on TcpCon0 with source address SA_0 and verify
        that the route is successfully activated (ACK transmitted with response code 0x10).
    02: Receive routing activation request message on TcpCon1 with source address SA_1 and verify
        that the route is successfully activated (ACK transmitted with response code 0x10).
    03: Receive routing activation request message on TcpCon2 with source address SA_2 and verify
        that the route is successfully activated (ACK transmitted with response code 0x10).
    04: Receive routing activation request message on TcpCon3 with the source address (SA_3).
    05: Call DoIP_MainFunction() to trigger all connection Alive check.
    06: VP(SWS_DoIP_00107): Verify that DoIP has transmitted Alive check request message on
        TcpCon0, TcpCon1 and TcpCon2.
    07: Call DoIP_MainFunction() EBTEST_ALIVE_CHECK_RESP_TIMEOUT -1 times to tick Alive check
        timer for TcpCon0.
    08: Call DoIP_MainFunction() one more time to elapse DoIPAliveCheckResponseTimeout timeout.
    09: VP(SWS_DoIP_00140): Verify that TcpCon0 got reset because Alive check timer expired.
    10: VP(SWS_DoIP_00107, SWS_DoIP_00113, Rx_All_Con_Alive_Check_Wait_2_Rx_Ack_Conf_Wait):
        Verify that DoIP has generated Routing activation ACK message, with response code 0x10
        (DOIP_ROU_ACT_RESP_SUCCESS) on TcpCon3 because reset of TcpCon0 free up space.
        This also verifies the Rx state machine transition:
        RX_ALL_CON_ALIVE_CHECK_WAIT -&gt; RX_ACK_CONF_WAIT.
    11: VP(SWS_DoIP_00107): Verify that TcpCon1 and TcpCon2 got reset because Alive check timer
        expired.
    12: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon3 to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_All_Con_Alive_Check_Wait_2_Rx_Ack_Conf_Wait</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>756</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1294</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09005_SingleAndAllAliveCheck_Response</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>1130</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies the case when single connection Alive check is in progress, and new Routing
    activation request arrives while no free Tcp connection is available.
    Test case verifies that when Alive check response message is received before Alive check timer
    expires, two Routing activation response messages will be generated. NACK with response code
    0x03 on the connection that was pending on a single alive check, and ACK response code 0x10
    for the connection which was pending on free Tcp connection.
  
Test Object: 
    Single and all connections alive check combined
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0, TcpCon1, TcpCon2 and TcpCon3.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address SA_0 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    02: Send routing activation request message on TcpCon3 with source address SA_3 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    03: Send routing activation request message on TcpCon1 with the same source address (SA_0),
        as used in step 01.
    04: VP(SWS_DoIP_00105): Verify that DoIP has transmitted Alive check request message on TcpCon0,
        because SA_0 is already assigned to this connection.
    05: Send routing activation request message on TcpCon2 with the source address (SA_2).
    06: Call DoIP_MainFunction() to start all connection Alive check process.
    07: VP(SWS_DoIP_00107): Verify that DoIP has transmitted Alive check request message on TcpCon3,
        as a part of all connection Alive check.
    08: VP(DoIP.EB.AliveCheckReq.NotDuplicated): Verify that no Alive check request messages have
        been transmitted on TcpCon0 because Alive check is already running.
    09: Call DoIP_MainFunction() to tick TcpCon0 alive check timer
        EBTEST_ALIVE_CHECK_RESP_TIMEOUT -2 times.
    10: VP(SWS_DoIP_00105, SWS_DoIP_00107): Verify that neither ACK nor NACK messages have been
        generated and no connection got reset, i.e. Alive check is still in progress.
    11: Receive Alive check response message on TcpCon0 with SA matching already registered SA_0.
        Receive Alive check payload in a segmented manor, i.e. byte by byte.
    12: VP(SWS_DoIP_00105, Rx_Alive_Check_Resp_2_Rx_Alive_Check_Resp):
        Verify that DoIP has generated Routing activation NACK message, with response code 0x03
        (DOIP_ROU_ACT_RESP_SRC_IN_USE) on TcpCon1 and that connection got reset and SoAd_CloseSoCon
        was called with Abort=FALSE if DoIPEnableTcpClosureWithFIN is enabled or with
        Abort=TRUE if disabled. This step also verifies the self-transition
        RX_ALIVE_CHECK_RESP -&gt; RX_ALIVE_CHECK_RESP, when receiving Alive check payload byte by byte.
    13: VP(SWS_DoIP_00107, SWS_DoIP_00113): Verify that DoIP has generated Routing activation ACK
        message, with response code 0x10 (DOIP_ROU_ACT_RESP_SUCCESS) on TcpCon2 because reset of
        TcpCon1 free up one connection.
    14: Receive Alive check response message on TcpCon3 with SA matching already registered SA_3.
    15: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 and TcpCon3 to verify that connections are operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.AliveCheckReq.NotDuplicated</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Alive_Check_Resp_2_Rx_Alive_Check_Resp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>743</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1295</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09006_SingleAndAllAliveCheck_NoResponse</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>1373</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies the case when single connection Alive check is in progress, and new Routing
    activation request arrives while no free Tcp connection is available.
    Test case verifies that when Alive check timer expires before Alive check response message is
    received, two Routing activation response messages will be generated. NACK with response code
    0x03 on the connection that was pending on a single alive check, and ACK response code 0x10
    on the connection which was pending on free Tcp connection (because reset of TcpCon1 free up
    one connection).
  
Test Object: 
    Single and all connections alive check combined
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0, TcpCon1, TcpCon2 and TcpCon3.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address SA_0 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    01: Send routing activation request message on TcpCon3 with source address SA_3 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    03: Send routing activation request message on TcpCon1 with the same source address (SA_0),
        as used in step 01.
    04: VP(SWS_DoIP_00105): Verify that DoIP has transmitted Alive check request message on TcpCon0,
        because SA_0 is already assigned to this connection.
    05: Send routing activation request message on TcpCon2 with the source address (SA_2).
    06: Call DoIP_MainFunction() to start all connection Alive check process.
    07: VP(SWS_DoIP_00107): Verify that DoIP has transmitted Alive check request message on TcpCon3,
        as a part of all connection Alive check.
    08: VP(DoIP.EB.AliveCheckReq.NotDuplicated): Verify that no Alive check request messages have
        been transmitted on TcpCon0 because Alive check is already running.
    09: Call DoIP_MainFunction() to tick TcpCon0 alive check timer
        EBTEST_ALIVE_CHECK_RESP_TIMEOUT -1 times.
    10: VP(SWS_DoIP_00105, SWS_DoIP_00107): Verify that neither ACK nor NACK messages have been
        generated and no connection got reset, i.e. Alive check is still in progress.
    11: Call DoIP_MainFunction() to tick TcpCon0 alive check timer one more time.
    12: VP(SWS_DoIP_00140): Verify that TcpCon0 got reset and SoAd_CloseSoCon was called with
        Abort=TRUE because of Alive check timer expired.
    13: VP(SWS_DoIP_00105, SWS_DoIP_00107): Verify that SoAd_TpTransmit() is called for TcpCon2
        and TcpCon1 in order to transmit routing activation acknowledge message.
    14: VP(SWS_DoIP_00105, SWS_DoIP_00113): Verify that DoIP has generated Routing activation ACK
        message, with response code 0x10 (DOIP_ROU_ACT_RESP_SUCCESS) on TcpCon1 since SA has
        been released.
    15: VP(SWS_DoIP_00107, SWS_DoIP_00113): Verify that DoIP has generated Routing activation ACK
        message, with response code 0x10 (DOIP_ROU_ACT_RESP_SUCCESS) on TcpCon2 because reset of
        TcpCon0 free up one connection.
    16: Receive Alive check response message on TcpCon3 with SA matching already registered SA_3.
    17: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon1 and TcpCon3 to verify that connections are operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00140</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>455</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.AliveCheckReq.NotDuplicated</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1296</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09007_RequestSA_3X</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>1632</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies the case when single connection Alive check is in progress, and new Routing
    activation request arrives on a new connection with the same source address. In such a case
    DoIP will generate NACK with response code 0x03 (DOIP_ROU_ACT_RESP_SRC_IN_USE) on the connection
    where last Routing request was received and the connection get reset.
  
Test Object: 
    Single connection Alive check
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0, TcpCon1 and TcpCon2.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address SA_0 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    02: Send routing activation request message on TcpCon1 with the same source address (SA_0),
        as used in step 01.
    03: VP(SWS_DoIP_00105): Verify that DoIP has transmitted Alive check request message on TcpCon0,
        because SA_0 is already assigned to this connection.
    04: Send routing activation request message on TcpCon2 with the same source address (SA_0),
        as used in step 01.
    05: VP(DoIP.EB.SingleAliveCheck.NotDuplicated): Verify that DoIP has generated Routing
        activation NACK message, with response code 0x03 (DOIP_ROU_ACT_RESP_SRC_IN_USE) on TcpCon2
        and that connection got reset.
    06: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SingleAliveCheck.NotDuplicated</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1297</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09008_AliveCheckTimer</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>1793</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that each Tcp connection has separate Alive check timer that ticks
    EBTEST_ALIVE_CHECK_RESP_TIMEOUT before expiring.
  
Test Object: 
    Alive check
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0, TcpCon1, TcpCon2 and TcpCon3.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address SA_0 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    02: Send routing activation request message on TcpCon1 with the same source address (SA_0),
        as used in step 01.
    03: VP(SWS_DoIP_00105): Verify that DoIP has transmitted Alive check request message on TcpCon0,
        because SA_0 is already assigned to this connection.
    04: Call DoIP_MainFunction() to tick TcpCon0 alive check timer
        EBTEST_ALIVE_CHECK_RESP_TIMEOUT / 2 times.
    05: Send routing activation request message on TcpCon2 with source address SA_2 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    06: Send routing activation request message on TcpCon3 with the same source address (SA_2),
        as used in step 05.
    07: VP(SWS_DoIP_00105): Verify that DoIP has transmitted Alive check request message on TcpCon2,
        because SA_2 is already assigned to this connection.
    08: Call DoIP_MainFunction() to tick TcpCon0 alive check timer
        (EBTEST_ALIVE_CHECK_RESP_TIMEOUT / 2) - 1 times.
    09: Call DoIP_MainFunction() to tick TcpCon0 alive check timer one more time.
    10: VP(SWS_DoIP_00140): Verify that TcpCon0 got reset because of Alive check timer expired.
    11: VP(SWS_DoIP_00105): Verify that SoAd_TpTransmit() is called for TcpCon1 in order to
        transmit routing activation acknowledge message.
    12: VP(SWS_DoIP_00105, SWS_DoIP_00113): Verify that DoIP has generated Routing activation ACK
        message, with response code 0x10 (DOIP_ROU_ACT_RESP_SUCCESS) on TcpCon1 since SA has
        been released.
    13: Call DoIP_MainFunction() to tick TcpCon2 alive check timer
        (EBTEST_ALIVE_CHECK_RESP_TIMEOUT / 2) - 1 times.
    14: Call DoIP_MainFunction() to tick TcpCon2 alive check timer one more time.
    15: VP(SWS_DoIP_00140): Verify that TcpCon2 got reset because of Alive check timer expired.
    16: VP(SWS_DoIP_00105): Verify that SoAd_TpTransmit() is called for  TcpCon3 in order to
        transmit routing activation acknowledge message.
    17: VP(SWS_DoIP_00105, SWS_DoIP_00113): Verify that DoIP has generated Routing activation ACK
        message, with response code 0x10 (DOIP_ROU_ACT_RESP_SUCCESS) on TcpCon3 since SA has
        been released.
    18: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon1 and TcpCon3 to verify that connections are operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00140</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>455</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1298</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09009_ExternalConReset</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>2058</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies the case when connection that is running single connection Alive check gets
    reset due to reasons other then Alive check timeout (e.g. incorrect protocol information).
    In such a case the connection that is pending on Alive check results continues with Routing
    activation process.
  
Test Object: 
    Alive check
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0, TcpCon2 and TcpCon3.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address SA_0 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    02: Send routing activation request message on TcpCon2 with source address SA_2 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    03: Send routing activation request message on TcpCon3 with the same source address (SA_2),
        as used in step 05.
    04: VP(SWS_DoIP_00105): Verify that DoIP has transmitted Alive check request message on TcpCon2,
        because SA_2 is already assigned to this connection.
    05: Call DoIP_SoAdTpCopyRxData() to receive a message on TcpCon0 with invalid protocol type,
        which will result in connection reset.
    06: Call DoIP_SoAdTpCopyTxData() to transmit NACK message.
    07: Call DoIP_SoAdTpTxConfirmation() to confirm NACK message transmission.
    08: VP(SWS_DoIP_00014): Verify that TcpCOn0 has been closed and SoAd_CloseSoCon was called with
        Abort=FALSE if DoIPEnableTcpClosureWithFIN is enabled or with Abort=TRUE if disabled.
    09: Call DoIP_SoAdTpCopyRxData() to receive a message on TcpCon2 with invalid protocol type,
        which will result in a connection reset. The connection is running Alive check.
    10: Call DoIP_SoAdTpCopyTxData() to transmit NACK message.
    11: Call DoIP_SoAdTpTxConfirmation() to confirm NACK message transmission.
    12: VP(SWS_DoIP_00014): Verify that the connection TcpCon2 got reset and SoAd_CloseSoCon was
        called with Abort=FALSE if DoIPEnableTcpClosureWithFIN is enabled or
        with Abort=TRUE if disabled.
    13: VP(SWS_DoIP_00105): Verify that SoAd_TpTransmit() is called for  TcpCon3 in order to
        transmit routing activation acknowledge message.
    14: VP(SWS_DoIP_00105, SWS_DoIP_00113): Verify that DoIP has generated Routing activation ACK
        message, with response code 0x10 (DOIP_ROU_ACT_RESP_SUCCESS) on TcpCon3 since SA has
        been released.
    15: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon3 to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1299</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09010_Tcp_GenHeaderNack_INVALID_PL_LENGTH_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>2300</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when DoIP module receives generic DoIP header with payload length
    that is not valid, generic header negative acknowledge message will be sent, with NACK code
    set to 0x04. The test is performed on a TCP connection for Alive check response message.
  
Test Object: 
    Generic header negative acknowledge message on a TCP connection.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 0x1DE6U and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Receive Alive check response message on a TCP socket connection 0 with generic header
        containing invalid payload length.
    02: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit() was called for a correct TxPdu and length.
    03: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    04: VP(SWS_DoIP_00019): Verify that DoIP has generated Generic header
        negative acknowledge message, with NACK code set to 0x04.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1300</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09011_SAOnDifferentTcp_RESPONSE_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>2425</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies the case when 2 single alive check processes are running simultaneously.
  
Test Object: 
    Single connection Alive check
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0, TcpCon1, TcpCon2 and TcpCon3.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address SA_0 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    02: Send routing activation request message on TcpCon1 with the same source address (SA_0),
        as used in step 01.
    03: VP(SWS_DoIP_00105): Verify that DoIP has transmitted Alive check request message on TcpCon0,
        because SA_0 is already assigned to this connection.
    04: Call DoIP_MainFunction() to tick TcpCon0 alive check timer
        EBTEST_ALIVE_CHECK_RESP_TIMEOUT / 2 times.
    05: Send routing activation request message on TcpCon2 with source address SA_2 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    06: Send routing activation request message on TcpCon3 with the same source address (SA_2),
        as used in step 05.
    07: VP(SWS_DoIP_00105): Verify that DoIP has transmitted Alive check request message on TcpCon2,
        because SA_2 is already assigned to this connection.
    08: Call DoIP_MainFunction() to tick TcpCon0 alive check timer
        (EBTEST_ALIVE_CHECK_RESP_TIMEOUT / 2) - 1 times.
    09: Receive Alive check response message on TcpCon2 with SA matching already registered SA_2.
    10: VP(SWS_DoIP_00105): Verify that DoIP has transmitted on TcpCon3 Routing activation NACK
        message, with response code 0x03 (DOIP_ROU_ACT_RESP_SRC_IN_USE).
    11: VP(SWS_DoIP_00105): Verify that the connection TcpCon3 got reset.
    12: Receive Alive check response message on TcpCon0 with SA matching already registered SA_0.
    13: VP(SWS_DoIP_00105): Verify that DoIP has transmitted on TcpCon1 Routing activation NACK
        message, with response code 0x03 (DOIP_ROU_ACT_RESP_SRC_IN_USE).
    14: VP(SWS_DoIP_00105): Verify that the connection TcpCon1 got reset.
    15: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 and TcpCon2 to verify that connections are operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1301</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09012_AliveCheckResp_WrongSA</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>2666</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when Alive check response message is received after the routing
    activation is performed (connection is registered) and the field "SourceAddress" does not
    match the registered Source Address of the socket connection, DoIP will close the socket connection.
  
Test Object: 
    Alive Check response message
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address EBTEST_TESTER_SA_0
        and verify that the route is successfully activated
        (ACK transmitted with response code 0x10).
    02: Receive Alive check response message on TcpCon0 with a source address different from the
        one registered in the step 01 (EBTEST_TESTER_SA_1).
    03: VP(DoIP.EB.AliveCheckResp.ConnRegistered, Rx_Alive_Check_Resp_2_Rx_Offline):
        Verify that TcpCon0 got reset and SoAd_CloseSoCon was called with Abort=TRUE because
        of wrong source address received in Alive check response message.
        This also verifies the RX state machine transition RX_ALIVE_CHECK_RESP -&gt; RX_OFFLINE.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.AliveCheckResp.ConnRegistered</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Alive_Check_Resp_2_Rx_Offline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>744</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1302</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09013_AliveCheckResp_MatchSA</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>2764</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when Alive check message is received after the routing activation
    is performed (connection is registered)  and the field SourceAddress matches the registered
    Source Address of the socket connection the response was received on, the DoIP module shall
    do nothing.
  
Test Object: 
    Alive Check response message
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address SA_0 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    02: Receive Alive check response message on TcpCon0 with a source address equal the one used
        in step 01.
    03: VP(DoIP.EB.AliveCheckResp.ConnRegistered): Verify that DoIP has ignored
        the message.
    04: Receive Alive check response message on TcpCon0 with a source address equal the one used
        in step 01.
    05: VP(DoIP.EB.AliveCheckResp.ConnRegistered): Verify that DoIP has ignored
        the message.
    06: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.AliveCheckResp.ConnRegistered</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1303</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09014_AliveReq_RxInProgress</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>2866</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that transmitting of Alive check request message does not interrupt data
    reception on RX side.
  
Test Object: 
    All connections Alive check
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0, TcpCon1 and TcpCon2.
  
Test Execution: 
    01: Receive routing activation request message on TcpCon0 with source address SA_0 and verify
        that the route is successfully activated (ACK transmitted with response code 0x10).
    02: Receive routing activation request message on TcpCon1 with source address SA_1 and verify
        that the route is successfully activated (ACK transmitted with response code 0x10).
    03: Receive routing activation request message on TcpCon2 with source address SA_2 and verify
        that the route is successfully activated (ACK transmitted with response code 0x10).
    04: Receive routing activation request message on TcpCon3 with the source address (SA_3).
    05: Call DoIP_SoAdTpCopyRxData() with generic header to start data reception.
    06: Call DoIP_MainFunction() to trigger all connection Alive check.
    07: VP(SWS_DoIP_00107): Verify that DoIP has transmitted Alive check request message on
        TcpCon0, TcpCon1 and TcpCon2.
    08: Call DoIP_SoAdTpCopyRxData() to receive Diagnostic message header.
    09: Call DoIP_SoAdTpCopyRxData() to receive Diagnostic message payload.
    10: VP(DoIP.SWS_DoIP_00129): Verify that diagnostic acknowledge message was sent,
        indicating successful reception of diagnostic message.
    11: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0, TcpCon1 and TcpCon2 to verify that connections are operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1304</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09015_AliveCheckReq_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>3129</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that Alive check request will not transmitted when TX side is busy.
  
Test Object: 
    Alive check
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0 and TcpCon1.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address SA_1.
    02: VP(SWS_DoIP_00113): Verify that DoIP has generated Routing activation response message,
        with response code 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
    03: Set SoAd_TpTransmit_Stub to return E_NOT_OK.
    04: Send routing activation request message on TcpCon1 with the same source address (SA_1),
        as used in step 01.
    05: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit was sent on both connections.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1305</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09016_AliveCheckReq_TxBusy</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>3239</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that Alive check request will not transmitted when TX side is busy.
  
Test Object: 
    Alive check
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0 and TcpCon1.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address SA_1.
    02: Send routing activation request message on TcpCon1 with the same source address (SA_1),
        as used in step 01.
    03: VP(SWS_DoIP_00220): Verify that SoAd_TpTransmit was sent on both connections.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1306</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09017_VehicleAnnouncement</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>3335</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the Vehicle announcement message will be sent after only
    one DoIP_MainFunction() call when DoIPInitialVehicleAnnouncementTime is configured
    to 0.
  
Test Object: 
    Vehicle announcement messages.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
  
Test Execution: 
    01: Call DoIP_MainFunction() to elapse DoIPInitialVehicleAnnouncementTime timer (1 tick).
    02: VP(SWS_DoIP_00205): Verify that nothing was transmitted because vehicle announcement
        connection is OFFLINE.
    03: Call DoIP_SoConModeChg() to set vehicle announcement connection state to ONLINE.
    04: Call DoIP_MainFunction() to elapse DoIPInitialVehicleAnnouncementTime timer.
    05: VP(DoIP.EB.SWS_DoIP_00071): Verify that the first Vehicle announcement message was
        transmitted after DoIPInitialVehicleAnnouncementTime.
    06: Call DoIP_MainFunction() to elapse DoIPVehicleAnnouncementInterval timer.
    07: VP(DoIP.EB.SWS_DoIP_00071): Verify that the second Vehicle announcement message was
        transmitted after DoIPInitialVehicleAnnouncementTime time.
    08: Call DoIP_MainFunction() to elapse DoIPVehicleAnnouncementInterval timer.
    09: VP(DoIP.EB.SWS_DoIP_00071): Verify that the third Vehicle announcement message was
        not transmitted since DoIPVehicleAnnouncementCount is set to 2.
    10: Call DoIP_SoConModeChg() to set vehicle announcement connection state to OFFLINE.
    11: Call DoIP_SoConModeChg() to set vehicle announcement connection state to ONLINE.
    12: Call DoIP_MainFunction() to elapse DoIPInitialVehicleAnnouncementTime.
    13: VP(DoIP.EB.SWS_DoIP_00071): Verify that the first Vehicle announcement message was
        transmitted after DoIPInitialVehicleAnnouncementTime.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1307</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09018_AliveCheckResp_Ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>3508</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when Alive check response message is received before the connection is
    in "registered" state, i.e. before Routing activation is performed, it shall be ignored.
  
Test Object: 
    Alive Check response message
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0.
  
Test Execution: 
    01: Receive Alive check response message on TcpCon0.
    02: VP(): Verify that alive check response message is ignored.
    03: Send routing activation request message on TcpCon0 with source address SA_1.
    04: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.AliveCheckResp.ConnUnregistered</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1308</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09019_StdCh_RoutingActReq_AUTOMATIC_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>3599</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that standard channel configured for automatic routing activation, can
    be activated manually by sending routing activation request message.
    Test is conducted in the configuration where custom payload type feature is disabled.
  
Test Object: 
    DoIPChannel.DoIPRoutingActivationType (DOIP_ROUTING_ACTIVATION_AUTOMATIC)
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIP_SoAdTpStartOfReception() called to initiate Tp reception.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to initiate transmission on standard channel configured for
        automatic routing activation (DoIPRoutingActivationType == ROUTING_ACTIVATION_AUTOMATIC).
    02: VP(SWS_DoIP_00226): Verify that DoIP_TpTransmit() returned E_NOT_OK, indicating that
        channel is not active.
    03: Send routing activation request message with Source address matching channel SA, and
        invalid activation number.
    04: VP(RoutingActivationType.StandardCh.AUTOMATIC) Verify that standard channel with automatic
        routing activation was activated as Routing activation response code is
        DOIP_ROU_ACT_RESP_SUCCESS.
    05: Repeat call to DoIP_TpTransmit() from step 1.
    06: VP(RoutingActivationType.StandardCh.AUTOMATIC) Verify that standard channel with automatic
        routing activation was activated with routing activation request message.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.RoutingActivationType.AUTOMATIC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>298</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1309</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09020_DiagMsg_SA_USED_NACK6_ROUTE_INACTIVE_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>3710</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies the following test scenario:
      - DoIPResponseBeforeRoutingActivation set to DOIP_ENABLE_ALL_DIAG_NACK.
      - DoIP module receives a valid diagnostic message (channel exist with a received combination
        of SA and TA).
      - The channel is configured for AUTOMATIC routing activation.
      - Tcp connection that the message is received on does not have registered Source address
        (UNASSIGNED).
      - The other Tcp connection exist that has registered SA equal to the one from the received
        diagnostic message.
    Test case verifies that in aforementioned test scenario DoIP shall ignore the received message,
    and transmit a diagnostic negative acknowledge message with response code set to 0x06.
  
Test Object: 
    Diagnostic message reception, NACK 0x06.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPResponseBeforeRoutingActivation set to DOIP_ENABLE_ALL_DIAG_NACK.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() for TcpCon1.
    02: Activate Channel_2 on TcpCon1 by sending diagnostic message (AUTOMATIC routing activation).
    03: Call DoIP_SoAdTpStartOfReception() for TcpCon0.
    04: Send diagnostic message to TcpCon0 with source and target address that match the route
        activated on TcpCon1 in step 2.
    05: VP(DoIP.EB.DiagMsgNack_RouteInactive_SourceAddressInUse):
        Verify that DoIP has discarded the received message and generated diagnostic negative
        acknowledge message on TcpCon0, with a negative acknowledge code set to 0x06.
        (DOIP_ROUTING_INACTIVE).
    06: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon1 (Channel_3) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DiagMsgNack_RouteInactive_SourceAddressInUse</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>729</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1310</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09021_StdCh_RoutingActReq_AUTOMATIC_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>3865</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that standard channel configured for automatic routing activation, can
    be activated automatically by receiving a valid diagnostic message on that channel.
    It also verifies that in such a case DoIP will activate all channels with automatic routing
    activation that origin from the same Tester (have the same Source Address configured).
  
Test Object: 
    DoIPChannel.DoIPRoutingActivationType (DOIP_ROUTING_ACTIVATION_AUTOMATIC)
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() for TcpCon1.
    02: Activate Channel_4 on TcpCon1 by sending diagnostic message - AUTOMATIC routing activation.
    03: VP(RoutingActivationType.StandardCh.AUTOMATIC) Verify that standard channel with automatic
        routing activation was activated automatically by receiving valid diagnostic message
        on that channel.
    04: VP(RoutingActivationType.StandardCh.AUTOMATIC) Verify that activation of Channel_4
        in step 03, has also activated Channel_3 as they are both have AUTOMATIC routing activation,
        and originate from the same Tester.
    05: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon1 (Channel_3 and Channel_4) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.RoutingActivationType.AUTOMATIC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1311</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09022_AliveCheckTimer_Expired</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>3995</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: he
    Test case verifies that when Tcp connection is reset its Alive check timer gets disabled.
  
Test Object: 
    Check of Alive check timer after Tcp connection reset
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address SA_1.
    02: VP(SWS_DoIP_00113): Verify that DoIP has generated Routing activation response message,
        with response code 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
    03: Call DoIP_MainFunction() EBTEST_ALIVE_CHECK_RESP_TIMEOUT - 1000 times.
    04: Initiate Tp reception on TcpCon1.
    05: Send routing activation request message on TcpCon1 with the same source address (SA_1),
        as used in step 01.
    06: VP(SWS_DoIP_00105, SWS_DoIP_00139):
        Verify that DoIP has transmitted Alive check request message with expected structure and
        length on TcpCon0, because SA_1 is already assigned to this connection.
    07: Call DoIP_MainFunction() 1000 - 1 times to almost tick DoIPGeneralInactivityTimer for
        TcpCon0.
    08: Call DoIP_MainFunction() one more time to elapse DoIPGeneralInactivityTimer timeout.
    09: VP(SWS_DoIP_00146, SWS_DoIP_00358): Verify that TcpCon0 connection got closed with and
        SoAd_CloseSoCon was called with Abort=TRUE and reopened again.
    10: VP(SWS_DoIP_00146): Verify that DoIP has generated Routing activation response message,
        with response code 0x10 (DOIP_ROU_ACT_RESP_SUCCESS) and that TcpCon0 is reset.
    11: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon1 to verify that connection is operational.
    12: Continue ticking DoIP_MainFunction() until Alive check timer almost ticks
        out.
    13: Call DoIP_MainFunction() to expire Alive check timer.
    14: VP(DoIP.dsn.Func0127.DeadlineMonitoring): Verify that TcpCon0 did not reset again, because
        DoIPAliveCheckResponseTimeout timer has been disabled during first reset.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00139</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00146</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00358</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpRxSM.Rx_Single_Alive_Check_Wait_2_Rx_Single_Alive_Check_Wait</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>761</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0127.DeadlineMonitoring</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>829</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1312</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09023_DiagMsg_SA_USED_NONACK_ROUTE_INACTIVE_6</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>4189</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies the following test scenario:
      - DoIPResponseBeforeRoutingActivation set to DOIP_DISABLE_DIAG_NACK_0x06.
      - DoIP module receives a valid diagnostic message (channel exist with a received combination
        of SA and TA).
      - The channel is configured for AUTOMATIC routing activation.
      - Tcp connection that the message is received on does not have registered Source address
        (UNASSIGNED).
      - The other Tcp connection exist that has registered SA equal to the one from the received
        diagnostic message.
    Test case verifies that in aforementioned test scenario DoIP shall ignore the received message,
    and transmit a diagnostic negative acknowledge message with response code set to 0x06.
  
Test Object: 
    Diagnostic message reception, NACK 0x06 suppressed.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPResponseBeforeRoutingActivation set to DOIP_DISABLE_DIAG_NACK_0x06.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() for TcpCon1.
    02: Activate Channel_2 on TcpCon1 by sending diagnostic message (AUTOMATIC routing activation).
    03: Call DoIP_SoAdTpStartOfReception() for TcpCon0.
    04: Send diagnostic message to TcpCon0 with source and target address that match the route
        activated on TcpCon1 in step 2.
    05: VP(DoIP.EB.DiagMsgNack_RouteInactive_SourceAddressInUse):
        Verify that DoIP has not generated diagnostic negative acknowledge message on
        TcpCon0 (helper function called with DiagNackMsg set to NULL_PTR), and that the message
        was discarded (PduR_DoIPStartOfReception() was not called).
    06: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon1 (Channel_3) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DiagMsgNack_RouteInactive_SourceAddressInUse</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>729</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1313</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09024_IdsM_ResetAliveCheckTimer_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>4331</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when alive check timer expires, as a result of all connection alive check
    process, DoIP will notify IdsM with DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER event.
  
Test Object: 
    All connections Alive check.
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0, TcpCon1 and TcpCon2.
  
Test Execution: 
    01: Receive routing activation request message of TcpCon0, TcpCon1, TcpCon2 and TcpCon3.
    02: Call DoIP_MainFunction() to trigger all connection Alive check.
    03: Call DoIP_MainFunction() EBTEST_ALIVE_CHECK_RESP_TIMEOUT -1 times to tick Alive check
        timer.
    04: Call DoIP_MainFunction() one more time to elapse DoIPAliveCheckResponseTimeout timeout.
    05: VP(DoIP.dsn.Func0134.EB.DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER):
        Verify that IdsM_SetSecurityEvent() was called three times for
        EBTEST_SEV_TCP_CONN_RESET_ALIVE_CHECK_TIMER security event since alive check timer expired
        for TcpCon0, TcpCon1 and TcpCon2.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>865</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1314</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09025_IdsM_ResetAliveCheckTimer_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>4581</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when alive check timer expires, as a result of single connection alive check
    process, DoIP will notify IdsM with DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER event.
  
Test Object: 
    Alive check.
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0, TcpCon1, TcpCon2 and TcpCon3.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address SA_0 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    02: Send routing activation request message on TcpCon1 with the same source address (SA_0),
        as used in step 01.
    03: Call DoIP_MainFunction() to tick TcpCon0 alive check timer
        EBTEST_ALIVE_CHECK_RESP_TIMEOUT - 1 times.
    04: Call DoIP_MainFunction() to tick TcpCon0 alive check timer one more time.
    05: VP(DoIP.dsn.Func0134.EB.DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_TCP_CONN_RESET_ALIVE_CHECK_TIMER
        security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEC_TCP_CONN_RESET_ALIVE_CHECK_TIMER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>865</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1315</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09026_IdsM_AliveRespWrongSAReset</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>4737</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when Alive check response message is received after the routing
    activation is performed (connection is registered) and the field "SourceAddress" does not
    match the registered Source Address of the socket connection, DoIP will close the socket connection
    and notify IdsM.
  
Test Object: 
    Alive Check response message.
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address EBTEST_TESTER_SA_0
        and verify that the route is successfully activated
        (ACK transmitted with response code 0x10).
    02: Receive Alive check response message on TcpCon0 with a source address different from the
        one registered in the step 01 (EBTEST_TESTER_SA_1).
    03: VP(DoIP.dsn.Func0134.EB.DOIP_SEV_ALIVE_RESP_WRONG_SA_RESET):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_ALIVE_RESP_WRONG_SA_RESET
        security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEV_ALIVE_RESP_WRONG_SA_RESET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>860</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1316</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09027_IdsM_AliveResp_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>4838</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when Alive check message is received after the routing activation
    is performed (connection is registered)  and the field SourceAddress matches the registered
    Source Address of the socket connection the response was received on, the DoIP module shall
    notify IdsM about alive check.
  
Test Object: 
    Alive Check response message.
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address SA_0 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    02: Receive Alive check response message on TcpCon0 with a source address equal the one used
        in step 01.
    03: VP(DoIP.dsn.Func0134.EB.DOIP_SEV_ALIVE_RESP):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_ALIVE_RESP security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEV_ALIVE_RESP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>861</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1317</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest09028_IdsM_AliveResp_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest09_AliveCheck/source/application/DoIP_ConTest09_AliveCheck.c</sourcefile>
      <sourceline>4925</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when Alive check response message is received before the connection is
    in "registered" state, i.e. before Routing activation is performed, it shall be ignored. IdsM
    will be notified that alive check response message is received.
  
Test Object: 
    Alive Check response message.
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0.
  
Test Execution: 
    01: Receive Alive check response message on TcpCon0, before routing activation is performed
        on that connection.
    02: VP(DoIP.dsn.Func0134.EB.DOIP_SEV_ALIVE_RESP):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_ALIVE_RESP security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEV_ALIVE_RESP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>861</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1318</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ConTest10001_RoutActResp_SUCCESS_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest10_LargeConfigTest/source/application/DoIP_ConTest10_LargeConfigTest.c</sourcefile>
      <sourceline>117</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when routing activation request message is received and all checks
    have successfully passed, DoIP module shall send a routing activation response message with the
    activation response code set to 0x10. This test verifies test configuration where number of
    routes exceeds 256 (uint8).
  
Test Object: 
    Routing activation request response.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Send routing activation request with the expected (configured) values of source address
        and activation number.
    02: VP(): Verify that DoIP has generated routing activation response message, with a correct
        parameters and routing activation response code set to 0x10 (DOIP_ROU_ACT_RESP_SUCCESS).
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1319</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest10002_AliveCheckTimer</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest10_LargeConfigTest/source/application/DoIP_ConTest10_LargeConfigTest.c</sourcefile>
      <sourceline>207</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that each Tcp connection has separate Alive check timer that ticks
    DoIPAliveCheckResponseTimeout before expiring.
  
Test Object: 
    Alive Check response message
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon0 .. TcpCon5.
  
Test Execution: 
    01: Send routing activation request message on TcpCon0 with source address SA_0 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    02: Send routing activation request message on TcpCon1 with the same source address (SA_0),
        as used in step 01.
    03: VP(SWS_DoIP_00105): Verify that DoIP has transmitted Alive check request message on TcpCon0,
        because SA_0 is already assigned to this connection.
    04: Call DoIP_MainFunction() to tick TcpCon0 alive check timer
        EBTEST_INC01_ALIVE_CHECK_RESP_TIMEOUT / 3 times.
    05: Send routing activation request message on TcpCon2 with source address SA_1 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    06: Send routing activation request message on TcpCon3 with the same source address (SA_1),
        as used in step 05.
    07: VP(SWS_DoIP_00105): Verify that DoIP has transmitted Alive check request message on TcpCon2,
        because SA_1 is already assigned to this connection.
    08: Call DoIP_MainFunction() to tick TcpCon0 and TcpCon2 alive check timer
        (EBTEST_INC01_ALIVE_CHECK_RESP_TIMEOUT / 3) times.
    09: Send routing activation request message on TcpCon4 with source address SA_2 and verify that
        the route is successfully activated (ACK transmitted with response code 0x10).
    10: Send routing activation request message on TcpCon5 with the same source address (SA_2),
        as used in step 09.
    11: VP(SWS_DoIP_00105): Verify that DoIP has transmitted Alive check request message on TcpCon4,
        because SA_2 is already assigned to this connection.
    12: Call DoIP_MainFunction() to tick TcpCon0, TcpCon2 and TcpCon4 alive check timer
        (EBTEST_INC01_ALIVE_CHECK_RESP_TIMEOUT / 3) times.
    13: VP(SWS_DoIP_00140): Verify that TcpCon0 got reset because of Alive check timer expired.
    14: VP(SWS_DoIP_00105): Verify that SoAd_TpTransmit() is called for TcpCon1 in order to
        transmit routing activation acknowledge message.
    15: VP(SWS_DoIP_00105, SWS_DoIP_00113): Verify that DoIP has generated Routing activation ACK
        message, with response code 0x10 (DOIP_ROU_ACT_RESP_SUCCESS) on TcpCon1 since SA has
        been released.
    16: Call DoIP_MainFunction() to tick TcpCon2 and TcpCon4 alive check timer
        (EBTEST_INC01_ALIVE_CHECK_RESP_TIMEOUT / 3) times.
    17: VP(SWS_DoIP_00140): Verify that TcpCon2 got reset because of Alive check timer expired.
    18: VP(SWS_DoIP_00105): Verify that SoAd_TpTransmit() is called for TcpCon3 in order to
        transmit routing activation acknowledge message.
    19: VP(SWS_DoIP_00105, SWS_DoIP_00113): Verify that DoIP has generated Routing activation ACK
        message, with response code 0x10 (DOIP_ROU_ACT_RESP_SUCCESS) on TcpCon3 since SA has
        been released.
    20: Call DoIP_MainFunction() to tick TcpCon4 alive check timer
        (EBTEST_INC01_ALIVE_CHECK_RESP_TIMEOUT / 3) times.
    21: VP(SWS_DoIP_00140): Verify that TcpCon4 got reset because of Alive check timer expired.
    22: VP(SWS_DoIP_00105): Verify that SoAd_TpTransmit() is called for TcpCon5 in order to
        transmit routing activation acknowledge message.
    23: VP(SWS_DoIP_00105, SWS_DoIP_00113): Verify that DoIP has generated Routing activation ACK
        message, with response code 0x10 (DOIP_ROU_ACT_RESP_SUCCESS) on TcpCon5 since SA has
        been released.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00140</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>455</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1320</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest10003_VehicleIDResponse_GIDInvalidityPattern</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest10_LargeConfigTest/source/application/DoIP_ConTest10_LargeConfigTest.c</sourcefile>
      <sourceline>534</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that "EID" of vehicle identification response/vehicle announcement message
    contains DoIPGIDInvalidityPattern if SoAd_GetPhysAddr returns E_NOT_OK  and DoIPEID is not set.
  
Test Object: 
    DoIPEID
    DoIPGIDInvalidityPattern
  
Test Precondition: 
    DoIP initialized.
    SoAd_GetPhysAddr_Stub.RetVal set to return E_NOT_OK.
    DoIPEID is not configured.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type =  0x0001 (Vehicle identification
        request message) which has payload length = 0 bytes.
    02: VP(DoIP.EB.SWS_DoIP_00065_SoAd_GetPhysAddr_NOK): Verify that Vehicle identification
        response / vehicle announcement message was sent and contains
        DoIPGIDInvalidityPattern as "EID".
    03: Confirm vehicle identification response transmission.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00065_SoAd_GetPhysAddr_NOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1321</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest10004_DoIPTargetAddressRef_257</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest10_LargeConfigTest/source/application/DoIP_ConTest10_LargeConfigTest.c</sourcefile>
      <sourceline>648</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that DoIP supports configuring &gt;256 Target addresses and that &gt;256 Target
    addresses can be referenced by a single Routing activation object.
  
Test Object: 
    Configuration with &gt;256 Target addresses.
    Routing activation object with &gt;256 Target address references (DoIPTargetAddressRef).
  
Test Precondition: 
    DoIP initialized.
    Line switched active.
  
Test Execution: 
    01: Send routing activation request on TcpCon0 with activation number 100
        (DoIPRoutingActivation_100), which has 257 Target addresses configured.
    02: VP(DoIP.ECUC_DoIP_00032, DoIP.ECUC_DoIP_00034):
        Transmit and receive simple Diagnostic message on TcpCon0 on 3 channels with Target
        addresses 100, 228 and 356, i.e. first, last and element in the middle of
        DoIPTargetAddressRef range of DoIPRoutingActivation_100.
        This verifies that DoIP supports configuring &gt;256 Target addresses and &gt;256 Target address
        references in a single Routing activation object.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
        <provcov>
          <linksto>DoIP.ECUC_DoIP_00034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>391</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1322</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ConTest11000_DiagnosticMessageTransmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest11_MainFunctionTx/source/application/DoIP_ConTest11_MainFunctionTx.c</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the correct functioning of transmit diagnostic messages via MainFunctionTx.
  
Test Object: 
    DoIP_TpTransmit().
  
Test Precondition: 
    DoIPEnableMainFunctionTx = true
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_TpTransmit() indicate a transmission and DoIP_MainFunctionTx() process the
        transmission request.
    02: VP(DoIP.SWS_DoIP_00220): Verify that SoAd_TpTransmit() was called with
        correct TxPduId and returned the correct bufferSize(18).
    03: Call DoIP_SoAdTpCopyTxData().
    04: VP(DoIP.SWS_DoIP_00232, DoIP.SWS_DoIP_00173, Tx_Diag_Msg_Start_2_Tx_Diag_Msg):
        Verify that the complete message was copied correctly, including user data payload which is
        identical to the data provided by PduR and that state transition TX_DIAG_MSG_START -
        TX_DIAG_MSG has occurred.
    05: VP(DoIP.SWS_DoIP_00233, DoIP.SWS_DoIP_00254): Verify that PduR_DoIPCopyTxData()
        was called with correct parameters.
    06: Call DoIP_SoAdTpTxConfirmation().
    07: VP(DoIP.SWS_DoIP_00233, DoIP.SWS_DoIP_00229, Tx_Diag_Msg_2_Tx_Idle): Verify that
        PduR_DoIPTpTxConfirmation() was called and state transition TX_DIAG_MSG to TX_IDLE.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00173</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>300</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00254</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>317</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Diag_Msg_2_Tx_Idle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>776</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Diag_Msg_Start_2_Tx_Diag_Msg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>777</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TriggerableMainfunctionTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1323</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ConTest12001_SVC_PowerMode_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest12_RTE_ServiceInterfaces/source/application/DoIP_ConTest12_RTE_ServiceInterfaces.c</sourcefile>
      <sourceline>132</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the use of DoIP Service component interface CallbackGetPowerMode to
    request the value of the Power mode for DoIP diagnostic power mode handling.
    In particular it verifies that when GetPowerMode() returns E_OK, the retrieved value of
    PowerStateReady shall be used when generating Power mode response message.
  
Test Object: 
    Diagnostic power mode information request over Service component interface.
  
Test Precondition: 
    RTE usage (DoIPRteUsage) is enabled.
    DoIPPowerModeCallback is enabled.
    DoIPPowerMode (user callback function) is empty.
    DoIP is initialized.
    RTE is initialized.
    All socket connections are opened.
  
Test Execution: 
    01: Configure Service component interface stub function GetPowerMode to return E_OK and
        set PowerStateReady to DOIP_READY.
    02: Call DoIP_SoAdIfRxIndication() to receive Diagnostic power mode information request.
    03: VP(SWS_DoIP_00054, SWS_DoIP_00261): Verify that configured GetPowerMode function is called.
    04: VP(SWS_DoIP_00092): Verify that Diagnostic power mode information response has been
        transmitted, with Diagnostic power mode set to DOIP_READY (0x01).
    05: Call DoIP_SoAdIfTxConfirmation() to confirm Diagnostic power mode information
        response transmission.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>322</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00092</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1324</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest12002_SVC_PowerMode_E_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest12_RTE_ServiceInterfaces/source/application/DoIP_ConTest12_RTE_ServiceInterfaces.c</sourcefile>
      <sourceline>241</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the use of DoIP Service component interface CallbackGetPowerMode to
    request the value of the Power mode for DoIP diagnostic power mode handling.
    In particular it verifies that when GetPowerMode() returns E_NOT_OK, Diagnostic power mode field
    of Diagnostic power mode response message will be set to 0x00 indicating that the power mode is
    not ready.
  
Test Object: 
    Diagnostic power mode information request over Service component interface.
  
Test Precondition: 
    RTE usage (DoIPRteUsage) is enabled.
    DoIPPowerModeCallback is enabled.
    DoIPPowerMode (user callback function) is empty.
    DoIP is initialized.
    RTE is initialized.
    All socket connections are opened.
  
Test Execution: 
    01: Configure Service component interface stub function GetPowerMode to return E_NOT_OK.
    02: Call DoIP_SoAdIfRxIndication() to receive Diagnostic power mode information request.
    03: VP(SWS_DoIP_00054, SWS_DoIP_00261): Verify that configured GetPowerMode function is called.
    04: VP(SWS_DoIP_00092): Verify that Diagnostic power mode information response has been
        transmitted, with Diagnostic power mode set to DOIP_NOT_READY (0x00).
    05: Call DoIP_SoAdIfTxConfirmation() to confirm Diagnostic power mode information
        response transmission.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>322</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00092</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1325</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest12003_SVC_RoutActAuthConf_RA_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest12_RTE_ServiceInterfaces/source/application/DoIP_ConTest12_RTE_ServiceInterfaces.c</sourcefile>
      <sourceline>348</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the use of DoIP Service component interface
    &lt;RoutingActivation&gt;_RoutingActivation to handle Routing activation authentication and
    confirmation functionality.
    In particular it verifies Routing activation object (RA_0), where both Authentication and
    Confirmation functions are configured as SVC interface, and all 4 Length fields are &gt; 0.
  
Test Object: 
    Routing activation request message with Authentication and Confirmation functions implemented
    as SVC interface.
  
Test Precondition: 
    RTE usage (DoIPRteUsage) is enabled.
    DoIPRoutingActivationAuthenticationCallback is enabled.
    DoIPRoutingActivationAuthenticationFunc is empty.
    DoIPRoutingActivationAuthenticationReqLength = 1.
    DoIPRoutingActivationAuthenticationResLength = 2.
    DoIPRoutingActivationConfirmationCallback is enabled.
    DoIPRoutingActivationConfirmationFunc is empty.
    DoIPRoutingActivationConfirmationReqLength = 3.
    DoIPRoutingActivationConfirmationResLength = 2.
    DoIP is initialized.
    RTE is initialized.
    All socket connections are opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication and RoutingActivationConfirmation SVC interface
        stub functions to return E_OK and set Authentified and Confirmed fields to TRUE.
    02: Send routing activation request message with OEM specific field, DoIPTesterSA = 7654 and
        Activation number = 1 (RA_0).
    03: VP(SWS_DoIP_00055, SWS_DoIP_00262): Verify that the SVC interface authentication callback
        function is called.
    04: VP(SWS_DoIP_00055, SWS_DoIP_00262): Verify that the SVC interface confirmation callback
        function is called.
    05: Fetch Routing activation response message.
    06: VP(SWS_DoIP_00120): Verify that "OEM specific" field (of the routing activation response)
        is filled with the callback return values: AuthenticationResData and ConfirmationResData.
    07: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>323</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00120</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1326</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest12004_SVC_RoutActAuthConf_RA_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest12_RTE_ServiceInterfaces/source/application/DoIP_ConTest12_RTE_ServiceInterfaces.c</sourcefile>
      <sourceline>514</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the use of DoIP Service component interface
    &lt;RoutingActivation&gt;_RoutingActivation to handle Routing activation authentication and
    confirmation functionality.
    In particular it verifies Routing activation object (RA_1), where both Authentication and
    Confirmation functions are configured as SVC interface, and AuthenticationReqLength and
    ConfirmationReqLength are &gt; 0 and AuthenticationResLength and ConfirmationResLength are set
    to 0 (OEM specific field is not set in response mssage).
  
Test Object: 
    Routing activation request message with Authentication and Confirmation functions implemented
    as SVC interface.
  
Test Precondition: 
    RTE usage (DoIPRteUsage) is enabled.
    DoIPRoutingActivationAuthenticationCallback is enabled.
    DoIPRoutingActivationAuthenticationFunc is disabled.
    DoIPRoutingActivationAuthenticationReqLength = 1.
    DoIPRoutingActivationAuthenticationResLength = 2.
    DoIPRoutingActivationConfirmationCallback is enabled.
    DoIPRoutingActivationConfirmationFunc is empty.
    DoIPRoutingActivationConfirmationReqLength = 3.
    DoIPRoutingActivationConfirmationResLength = 2.
    DoIP is initialized.
    RTE is initialized.
    All socket connections are opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication and RoutingActivationConfirmation SVC interface
        stub functions to return E_OK and set Authentified and Confirmed fields to TRUE.
    02: Send routing activation request message with OEM specific field, DoIPTesterSA = 7654 and
        Activation number = 2 (RA_1).
    03: VP(SWS_DoIP_00055, SWS_DoIP_00262): Verify that the SVC interface authentication callback
        function is called.
    04: VP(SWS_DoIP_00055, SWS_DoIP_00262): Verify that the SVC interface confirmation callback
        function is called.
    05: Fetch Routing activation response message.
    06: VP(SWS_DoIP_00113): Verify Routing activation response message has been transmitted.
    07: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>323</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1327</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest12005_SVC_RoutActAuthConf_RA_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest12_RTE_ServiceInterfaces/source/application/DoIP_ConTest12_RTE_ServiceInterfaces.c</sourcefile>
      <sourceline>680</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the use of DoIP Service component interface
    &lt;RoutingActivation&gt;_RoutingActivation to handle Routing activation authentication and
    confirmation functionality.
    In particular it verifies Routing activation object (RA_2), where both Authentication and
    Confirmation functions are configured as SVC interface,  AuthenticationReqLength and
    ConfirmationReqLength are set to 0 (not delivered to callback functions) but
    AuthenticationResLength and ConfirmationResLength are &gt; 0 (OEM specific field of response
    message is set by callback functions).
  
Test Object: 
    Routing activation request message with Authentication and Confirmation functions implemented
    as SVC interface.
  
Test Precondition: 
    RTE usage (DoIPRteUsage) is enabled.
    DoIPRoutingActivationAuthenticationCallback is enabled.
    DoIPRoutingActivationAuthenticationFunc is disabled.
    DoIPRoutingActivationAuthenticationReqLength = 0.
    DoIPRoutingActivationAuthenticationResLength = 1.
    DoIPRoutingActivationConfirmationCallback is enabled.
    DoIPRoutingActivationConfirmationFunc is empty.
    DoIPRoutingActivationConfirmationReqLength = 0.
    DoIPRoutingActivationConfirmationResLength = 1.
    DoIP is initialized.
    RTE is initialized.
    All socket connections are opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication and RoutingActivationConfirmation SVC interface
        stub functions to return E_OK and set Authentified and Confirmed fields to TRUE.
    02: Send routing activation request message with OEM specific field, DoIPTesterSA = 7654 and
        Activation number = 3 (RA_2).
    03: VP(SWS_DoIP_00055, SWS_DoIP_00262): Verify that the SVC interface authentication callback
        function is called.
    04: VP(SWS_DoIP_00055, SWS_DoIP_00262): Verify that the SVC interface confirmation callback
        function is called.
    05: Fetch Routing activation response message.
    06: VP(SWS_DoIP_00120): Verify that "OEM specific" field (of the routing activation response)
        is filled with the callback return values: AuthenticationResData and ConfirmationResData.
    07: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>323</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00120</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1328</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest12006_SVC_RoutActAuthConf_RA_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest12_RTE_ServiceInterfaces/source/application/DoIP_ConTest12_RTE_ServiceInterfaces.c</sourcefile>
      <sourceline>849</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the use of DoIP Service component interface
    &lt;RoutingActivation&gt;_RoutingActivation to handle Routing activation authentication and
    confirmation functionality.
    In particular it verifies Routing activation object (RA_2), where both Authentication and
    Confirmation functions are configured as SVC interface, all 4 Length fields are set to 0,
    meaning that OEM specific field is not handled neither in received nor in transmitted response
    message.
  
Test Object: 
    Routing activation request message with Authentication and Confirmation functions implemented
    as SVC interface.
  
Test Precondition: 
    RTE usage (DoIPRteUsage) is enabled.
    DoIPRoutingActivationAuthenticationCallback is enabled.
    DoIPRoutingActivationAuthenticationFunc is disabled.
    DoIPRoutingActivationAuthenticationReqLength = 0.
    DoIPRoutingActivationAuthenticationResLength = 0.
    DoIPRoutingActivationConfirmationCallback is enabled.
    DoIPRoutingActivationConfirmationFunc is empty.
    DoIPRoutingActivationConfirmationReqLength = 0.
    DoIPRoutingActivationConfirmationResLength = 0.
    DoIP is initialized.
    RTE is initialized.
    All socket connections are opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication and RoutingActivationConfirmation SVC interface
        stub functions to return E_OK and set Authentified and Confirmed fields to TRUE.
    02: Send routing activation request message with OEM specific field, DoIPTesterSA = 7654 and
        Activation number = 4 (RA_3).
    03: VP(SWS_DoIP_00055, SWS_DoIP_00262): Verify that the SVC interface authentication callback
        function is called.
    04: VP(SWS_DoIP_00055, SWS_DoIP_00262): Verify that the SVC interface confirmation callback
        function is called.
    05: Fetch Routing activation response message.
    06: VP(SWS_DoIP_00113): Verify Routing activation response message has been transmitted.
    07: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>323</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1329</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest12007_SVC_RoutActAuthConf_RA_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest12_RTE_ServiceInterfaces/source/application/DoIP_ConTest12_RTE_ServiceInterfaces.c</sourcefile>
      <sourceline>992</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the use of user defined Routing activation callback functions to handle
    Routing activation authentication and confirmation functionality.
    In particular it verifies Routing activation object (RA_4), where both Authentication and
    Confirmation functions are configured as user defined callback functions, and all 4 Length
    fields are set to 0, meaning that OEM specific field is not handled neither in received nor in
    transmitted response message.
  
Test Object: 
    Routing activation request message with Authentication and Confirmation functions implemented
    as SVC interface.
  
Test Precondition: 
    DoIPRoutingActivationAuthenticationCallback is enabled.
    DoIPRoutingActivationAuthenticationFunc is enabled and set to User_RoutActAuth_1.
    DoIPRoutingActivationAuthenticationReqLength = 0.
    DoIPRoutingActivationAuthenticationResLength = 0.
    DoIPRoutingActivationConfirmationCallback is enabled.
    DoIPRoutingActivationAuthenticationFunc is enabled and set to User_RoutActConf_1.
    DoIPRoutingActivationConfirmationReqLength = 0.
    DoIPRoutingActivationConfirmationResLength = 0.
    DoIP is initialized.
    RTE is initialized.
    All socket connections are opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication and RoutingActivationConfirmation stub functions
        to return E_OK and set Authentified and Confirmed fields to TRUE.
    02: Send routing activation request message with OEM specific field, DoIPTesterSA = 7654 and
        Activation number = 5 (RA_4).
    03: VP(SWS_DoIP_00109): Verify that the configured authentication callback function is called.
    04: VP(SWS_DoIP_00112): Verify that the configured confirmation callback function is called.
    05: Fetch Routing activation response message.
    06: VP(SWS_DoIP_00113): Verify Routing activation response message has been transmitted.
    07: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1330</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest12008_SVC_RoutActAuthConf_RA_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest12_RTE_ServiceInterfaces/source/application/DoIP_ConTest12_RTE_ServiceInterfaces.c</sourcefile>
      <sourceline>1132</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies combined use of user defined Routing activation callback function and SVC
    interface callback function within a single Routing activation object.
    In particular it verifies Routing activation object (RA_5), where Authentication function is
    configured as SVC interface function and Confirmation function is configured as user defined
    callback function.
  
Test Object: 
    Routing activation request message with Authentication configured as SVC callback function and
    Confirmation configured as user defined callback function.
  
Test Precondition: 
    DoIPRoutingActivationAuthenticationCallback is enabled.
    DoIPRoutingActivationAuthenticationFunc is empty.
    DoIPRoutingActivationAuthenticationReqLength = 4.
    DoIPRoutingActivationAuthenticationResLength = 0.
    DoIPRoutingActivationConfirmationCallback is enabled.
    DoIPRoutingActivationAuthenticationFunc is enabled and set to User_RoutActConf_1.
    DoIPRoutingActivationConfirmationReqLength = 4.
    DoIPRoutingActivationConfirmationResLength = 0.
    DoIP is initialized.
    RTE is initialized.
    All socket connections are opened.
  
Test Execution: 
    01: Configure RoutingActivationAuthentication and RoutingActivationConfirmation SVC interface
        and user stub functions to return E_OK and set Authentified and Confirmed fields to TRUE.
    02: Send routing activation request message with OEM specific field, DoIPTesterSA = 7654 and
        Activation number = 5 (RA_4).
    03: VP(SWS_DoIP_00109): Verify that the configured authentication callback function is called.
    04: VP(SWS_DoIP_00112): Verify that the configured confirmation callback function is called.
    05: Fetch Routing activation response message.
    06: VP(SWS_DoIP_00113): Verify Routing activation response message has been transmitted.
    07: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon0 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>323</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1331</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ConTest1300_ResourceConsumption</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest13_ResourceConsumption/source/application/DoIP_ConTest13_ResourceConsumption.c</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This is not a functional test - it is used to estimate and verify RAM/ROM consumption of the
    reference configuration.
    It is implemented as a conformance test since compile tests do not produce required format of
    linker .map file.
  
Test Object: 
    DoIP RAM and ROM consumption.
  
Test Precondition: None.
Test Execution: 
    01: Call all mandatory DoIP external APIs in order to link them into library.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.swdd.ROMConsumption_RefCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>730</internalId></provcov>
        <provcov>
          <linksto>DoIP.swdd.RAMConsumption_RefCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>732</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1332</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ConTest14000_IdsM_DoIPSevDropDiagMsgDiagHdr_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest14_IdsMSecurityEvents/source/application/DoIP_ConTest14_IdsMSecurityEvents.c</sourcefile>
      <sourceline>108</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP module receives a diagnostic message with an unknown
    "Source Address", DoIP shall send a diagnostic negative acknowledge message with
    negative acknowledge code set to 0x02U. Additionally the message shall be discarded and send
    an event to IdsM.
  
Test Object: 
    Diagnostic negative acknowledge message.
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send generic header of a diagnostic message on a TCP socket connection 0.
    02: Send diagnostic message header with an unknown (not configured) Source address (0xFFFF).
    03: Call DoIP_SoAdTpTxConfirmation() to send event to IdsM and reset connection.
    04: VP(DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_DIAG_MSG_DIAG_HDR):
        Verify that IdsM_SetSecurityEvent() was called for a EBTEST_SEV_DROP_DIAG_MSG_DIAG_HDR
        security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_DIAG_MSG_DIAG_HDR</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>862</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1333</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest14001_IdsM_DoIPSevDropDiagMsgDiagHdr_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest14_IdsMSecurityEvents/source/application/DoIP_ConTest14_IdsMSecurityEvents.c</sourcefile>
      <sourceline>223</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP module receives a diagnostic message with an unknown
    "Target Address", DoIP shall send a diagnostic negative acknowledge message with
    negative acknowledge code set to 0x03. Additionally the message shall be discarded and send
    an event to IdsM.
  
Test Object: 
    Diagnostic negative acknowledge message.
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send generic header of a diagnostic message on a TCP socket connection 0.
    02: Send diagnostic message header with an unknown (not configured) Target address (0xFFFF).
    03: VP(DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_DIAG_MSG_DIAG_HDR):
        Verify that IdsM_SetSecurityEvent() was called for a EBTEST_SEV_DROP_DIAG_MSG_DIAG_HDR
        security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_DIAG_MSG_DIAG_HDR</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>862</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1334</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest14002_IdsM_DoIPSevDropDiagMsgDiagHdr_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest14_IdsMSecurityEvents/source/application/DoIP_ConTest14_IdsMSecurityEvents.c</sourcefile>
      <sourceline>331</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that received DoIP diagnostic message before a valid Routing activation which
    will notify IdsM with the event DOIP_SEV_DROP_DIAG_MSG_DIAG_HDR and generate and send a diagnostic
    negative acknowledge message with NACK set to 0x06.
  
Test Object: 
    DoIPGeneralInactivityTimer.
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() to initiate Tp reception on TcpCon_0.
    02: Send generic header of a diagnostic message on a TCP socket connection 0.
    03: Send diagnostic message header with a valid source and target addresses but before
        route is activated and generate NACK 0x06U.
    04: VP(DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_DIAG_MSG_DIAG_HDR):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_DROP_DIAG_MSG_DIAG_HDR
        security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_DIAG_MSG_DIAG_HDR</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>862</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1335</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest14003_DropDiagMsgUL_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest14_IdsMSecurityEvents/source/application/DoIP_ConTest14_IdsMSecurityEvents.c</sourcefile>
      <sourceline>434</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP module receives a diagnostic message and PduR is not able to
    receive a message (PduR_DoIPStartOfReception return BUFREQ_E_OVFL), than DoIP module
    will send a diagnostic negative acknowledge message with acknowledge code set to 0x05.
    Additionally the message shall be discarded and IdsM notified about the event DOIP_SEV_DROP_DIAG_MSG_UL.
  
Test Object: 
    PduR is not able to received data.
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Configure PduR stub PduR_DoIPStartOfReception() to return BUFREQ_E_OVFL.
    02: Send a valid diagnostic message towards DoIP (with payload transmitted in two parts).
    03: VP(DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_DIAG_MSG_UL):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_DROP_DIAG_MSG_UL security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_DIAG_MSG_UL</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>863</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1336</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest14004_DropDiagMsgUL_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest14_IdsMSecurityEvents/source/application/DoIP_ConTest14_IdsMSecurityEvents.c</sourcefile>
      <sourceline>526</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that when DoIP_SoAdTpCopyRxData() is called with shorter payload length and generate
    a diagnostic negative acknowledge message with NACK set to 0x08. IdsM shall be inform about
    invalid diagnostic message with the event DOIP_SEV_DROP_DIAG_MSG_UL.
  
Test Object: 
    Diagnostic acknowledge message.
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 0x1DE6U and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() to provide generic message header.
    02: Call DoIP_SoAdTpCopyRxData() to provide diagnostic message header.
    03: Call DoIP_SoAdTpCopyRxData() to provide diagnostic message payload.
    04: Generic header negative acknowledge message will be sent with NACK 0x08U.
    05: VP(DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_DIAG_MSG_UL):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_DROP_DIAG_MSG_UL security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_DIAG_MSG_UL</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>863</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1337</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest14005_IdsM_DoIPSecTCPConnResetInactivityTimer</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest14_IdsMSecurityEvents/source/application/DoIP_ConTest14_IdsMSecurityEvents.c</sourcefile>
      <sourceline>657</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that after routing activation is elapsed DoIPGeneralInactivityTime,
    Tcp connection will be reset and inform IdsM about the event DOIP_SEC_TCP_CONN_RESET_INACTIVITY_TIMER.
  
Test Object: 
    DoIPGeneralInactivityTimer.
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    Routing activation done.
  
Test Execution: 
    01: Call DoIP_MainFunction() to elapse half of DoIPGeneralInactivityTime.
    02: Call DoIP_MainFunction() to elapse other half of DoIPGeneralInactivityTime.
    03: Call DoIP_MainFunction() to tick one more time so DoIPGeneralInactivityTime is elapsed.
    04: VP(DoIP.dsn.Func0134.EB.DOIP_SEC_TCP_CONN_RESET_INACTIVITY_TIMER):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_TCP_CONN_RESET_INACTIVITY_TIMER
        security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEC_TCP_CONN_RESET_INACTIVITY_TIMER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>864</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1338</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest14006_Tcp_IdsM_DoIPSevDropTCPGenHdrErr_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest14_IdsMSecurityEvents/source/application/DoIP_ConTest14_IdsMSecurityEvents.c</sourcefile>
      <sourceline>747</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when DoIP module receives generic DoIP header with payload length
    that is not valid, generic header negative acknowledge message will be sent, with NACK code
    set to 0x04 and inform IdsM that there was generic header error with event
    DOIP_SEV_DROP_TCP_GEN_HDR_ERR.
  
Test Object: 
    Generic header negative acknowledge message on a TCP connection.
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send Routing activation (OEM) request message on a TCP socket connection 0 with
        generic header containing invalid payload length.
    02: VP(): Verify that SoAd_TpTransmit() was called for a correct TxPdu and length.
    03: VP(DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_TCP_GEN_HDR_ERR):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_DROP_TCP_GEN_HDR_ERR security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_TCP_GEN_HDR_ERR</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>858</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1339</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest14007_Tcp_IdsM_DoIPSevDropTCPGenHdrErr_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest14_IdsMSecurityEvents/source/application/DoIP_ConTest14_IdsMSecurityEvents.c</sourcefile>
      <sourceline>853</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when DoIP module receives generic DoIP header with an oversized payload,
    the message will be discarded and IdsM notified with DOIP_SEV_DROP_TCP_GEN_HDR_ERR event.
  
Test Object: 
    Diagnostic negative acknowledge message.
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Routing is activated for a DoIPTesterSA = 140 and DoIPRoutingActivationNumber = 1.
  
Test Execution: 
    01: Send generic header of diagnostic message on TCP socket connection 0 with an oversized
        payload relative to parameter DoIPMaxRequestBytes.
    02: VP(DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_TCP_GEN_HDR_ERR):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_DROP_TCP_GEN_HDR_ERR security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_TCP_GEN_HDR_ERR</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>858</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1340</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest14008_Tcp_IdsM_DoIPSevRoutingActRespTx</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest14_IdsMSecurityEvents/source/application/DoIP_ConTest14_IdsMSecurityEvents.c</sourcefile>
      <sourceline>957</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when DoIP receives routing activation request message and consequently
    transmits routing activation response message it will notify IdsM for security event
    DOIP_SEV_ROUTING_ACT_RESP_TX.
  
Test Object: 
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    Initiated Tp reception on TcpCon_0.
  
Test Execution: 
    01: Send valid routing activation message from Tester_1 (SA_1) on TcpCon_0.
    02: Call DoIP_SoAdTpCopyTxData() to read-out message generated by DoIP.
    03: Call DoIP_SoAdTpTxConfirmation() to confirm transmitted message.
    04: VP(DoIP.dsn.Func0134.EB.DOIP_SEV_ROUTING_ACT_RESP_TX):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_ROUTING_ACT_RESP_TX security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEV_ROUTING_ACT_RESP_TX</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>859</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1341</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest14009_IdsM_DoIPSevDropUdpInvMSG_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest14_IdsMSecurityEvents/source/application/DoIP_ConTest14_IdsMSecurityEvents.c</sourcefile>
      <sourceline>1048</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0005 (Routing activation
    request) is received on the configured Udp connection, DoIP module will discard the message and
    generic header negative acknowledge message will be sent with NACK code 0x01 and IdsM will be notified.
  
Test Object: 
    DoIP_SoAdIfRxIndication().
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to send the DoIP message with 0x0005 payload type.
    02: VP(DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_UDP_INV_MSG):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_DROP_UDP_INV_MSG security event.
    03: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_UDP_INV_MSG</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>854</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1342</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest14010_IdsM_DoIPSevDropUdpInvMSG_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest14_IdsMSecurityEvents/source/application/DoIP_ConTest14_IdsMSecurityEvents.c</sourcefile>
      <sourceline>1147</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if an invalid protocol information in DoIP header is used, NACK code
    is sent and IdsM will be notified.
  
Test Object: 
    DoIP_SoAdIfRxIndication().
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to send the DoIP message with invalid protocol version.
    02: VP(DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_UDP_INV_MSG):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_DROP_UDP_INV_MSG security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEV_DROP_UDP_INV_MSG</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>854</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1343</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest14011_UDP_IdsM_DoIPSevVehicleIdRespTx</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest14_IdsMSecurityEvents/source/application/DoIP_ConTest14_IdsMSecurityEvents.c</sourcefile>
      <sourceline>1240</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0001 is received on the
    configured Udp connection, DoIP module will respond with a Vehicle identification response and
    notify IdsM that was Vehicle identification response message transmitted.
  
Test Object: 
    Vehicle announcement messages.
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0001(vehicle identification request)
        and default protocol type (0xFF).
    02: VP(DoIP.dsn.Func0134.EB.DOIP_SEV_VEHICLE_ID_RESP_TX):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_VEHICLE_ID_RESP_TX security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEV_VEHICLE_ID_RESP_TX</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>855</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1344</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest14012_UDP_IdsM_DoIPSevEntityStatusRespTx</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest14_IdsMSecurityEvents/source/application/DoIP_ConTest14_IdsMSecurityEvents.c</sourcefile>
      <sourceline>1328</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that after a valid Diagnostic entity status request message is received,
    DoIP module will send a Diagnostic entity status response message on the configured
    DoIPUDPConnection and notify IdsM about it.
  
Test Object: 
    Diagnostic entity status messages.
    IdsM_SetSecurityEvent().
  
Test Precondition: 
    DoIP initialized.
    TCP socket connections not opened.
    DoIPEntityStatusMaxByteFieldUse set to true.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x4001
        (Diagnostic entity status request).  Payload length for this message type is 0.
    02: VP(DoIP.dsn.Func0134.EB.DOIP_SEV_ENTITY_STATUS_RESP_TX):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_ENTITY_STATUS_RESP_TX security event.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.DOIP_SEV_ENTITY_STATUS_RESP_TX</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>856</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1345</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest14013_PostBuildSelectable_DoIPSecurityEventRefs_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest14_IdsMSecurityEvents/source/application/DoIP_ConTest14_IdsMSecurityEvents.c</sourcefile>
      <sourceline>1418</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies support of post-build selectable feature by initializing DoIP Security Event
    reference DOIP_SEV_DROP_TCP_GEN_HDR_ERR with two different variants and sending to
    IdsM_SetSecurityEvent() same event with two different values.
  
Test Object: 
    Post-build selectable support.
    Post-build variant value.
  
Test Precondition: 
    Two post-build variants configured.
  
Test Execution: 
    01: Call DoIP_Init() with DoIP_V1_ConfigLayout to initialize DoIP with V1 configuration.
    02: Open all socket connections.
    03: Send routing activation message on TcpCon_0 to activate Channel.
    04: Send Routing activation request message on a TCP socket connection 0 with generic header
        containing invalid payload length.
    05: VP(DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_DROP_TCP_GEN_HDR_ERR_V1
        security event, using event value from V1.
    06: Call DoIP_Init() with DoIP_V2_ConfigLayout to initialize DoIP with V2 configuration.
    07: Open all socket connections.
    08: Send routing activation message on TcpCon_0 to activate Channel.
    09: Send Routing activation request message on a TCP socket connection 0 with generic header
        containing invalid payload length.
    10: VP(DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_DROP_TCP_GEN_HDR_ERR_V2
        security event, using event value from V2.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>866</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1346</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest14014_PostBuildSelectable_DoIPSecurityEventRefs_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest14_IdsMSecurityEvents/source/application/DoIP_ConTest14_IdsMSecurityEvents.c</sourcefile>
      <sourceline>1557</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies support of post-build selectable feature by initializing DoIP Security Event
    DOIP_SEV_DROP_UDP_INV_MSG in V1, but in V2 event DOIP_SEV_DROP_UDP_INV_MSG is disabled.
  
Test Object: 
    Post-build selectable support.
    Post build variant multiplicity.
  
Test Precondition: 
    Two post-build variants configured.
  
Test Execution: 
    01: Call DoIP_Init() with DoIP_V1_ConfigLayout to initialize DoIP with V1 configuration.
    02: Open all socket connections.
    03: Send routing activation message on TcpCon_0 to activate Channel.
    04: Call DoIP_SoAdIfRxIndication() to send the DoIP message with 0x0005 payload type.
    05: VP(DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs):
        Verify that IdsM_SetSecurityEvent() was called for EBTEST_SEV_DROP_UDP_INV_MSG
        security event, because event is enabled in V1.
    06: Call DoIP_Init() with DoIP_V2_ConfigLayout to initialize DoIP with V2 configuration.
    07: Open all socket connections.
    08: Send routing activation message on TcpCon_0 to activate Channel.
    09: Call DoIP_SoAdIfRxIndication() to send the DoIP message with 0x0005 payload type.
    10: VP(DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs):
        Verify that IdsM_SetSecurityEvent() was not called for EBTEST_SEV_DROP_UDP_INV_MSG
        security event, because event is disabled in V2.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0134.EB.PostBuildSelectable.DoIPSecurityEventRefs</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>866</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1347</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>DoIP_ConTest15000_VehicleAnnouncement</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest15_Interfaces/source/application/DoIP_ConTest15_Interfaces.c</sourcefile>
      <sourceline>138</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies transmission of Vehicle announcement messages on two configured interfaces.
  
Test Object: 
    Vehicle announcement messages.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoConModeChg() to set the state of Vehicle announcement connection 0 of Interface_0 to ONLINE.
    02: Call DoIP_SoConModeChg() to set the state of Vehicle announcement connection 0 of Interface_1 to ONLINE.
    03: Call DoIP_MainFunction() to tick timers EBTEST_ITF0_VEH_ANN_INIT_TIMEOUT - 1U times.
    04: Verify that nothing was called, i.e. timer has not expired.
    05: Call DoIP_MainFunction() one tick one more time.
    06: VP(DoIP.SWS_DoIP_00064): Verify that SoAd_IfTransmit() was called to transmit Vehicle announcement message
        on Interface_0.
    07: Call DoIP_SoAdIfTxConfirmation() for Vehicle announcement connection 0 of Interface_0 to confirm transmission.
    08: Call DoIP_MainFunction() to tick timers EBTEST_ITF1_VEH_ANN_INIT_TIMEOUT - 1U times.
    09: Verify that nothing was called, i.e. timer has not expired.
    10: Call DoIP_MainFunction() one tick one more time.
    11: VP(DoIP.SWS_DoIP_00064): Verify that SoAd_IfTransmit() was called to transmit Vehicle announcement message
        on Interface_1.
    12: Call DoIP_SoAdIfTxConfirmation() for Vehicle announcement connection 0 of Interface_1 to confirm transmission.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1348</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest15001_VehicleAnnouncement_Interval_Count</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest15_Interfaces/source/application/DoIP_ConTest15_Interfaces.c</sourcefile>
      <sourceline>305</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Test case verifies timing and repetition of Vehicle announcement messages transmission on two configured interfaces.
  
Test Object: 
    Vehicle announcement messages.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoConModeChg() to set the start Vehicle announcement connection 0 of Interface_0 and Interface_1 to ONLINE.
    02: For the intervals calculated based on configuration parameters of both interfaces - DoIPInitialVehicleAnnouncementTime,
        DoIPVehicleAnnouncementInterval and DoIPVehicleAnnouncementCount tick DoIP_MainFunction() interval -1 times.
    03: Verify that nothing was called, i.e. timer has not expired.
    04: Call DoIP_MainFunction() to tick one more time.
    05: VP(DoIP.EB.SWS_DoIP_00071): Verify that SoAd_IfTransmit() was called to transmit Vehicle announcement message
        on required interface.
    07: Call DoIP_SoAdIfTxConfirmation() for Vehicle announcement connection to confirm transmission.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.SWS_DoIP_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1349</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest15002_RoutingActivation</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest15_Interfaces/source/application/DoIP_ConTest15_Interfaces.c</sourcefile>
      <sourceline>420</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies parallel reception of Routing activation messages on two interfaces.
  
Test Object: 
    Routing activatoin message.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() for TcpCon_1 of Interface_0 (TcpCon_0_1) to initiate data reception.
    02: Call DoIP_SoAdTpStartOfReception() for TcpCon_1 of Interface_1 (TcpCon_1_1) to initiate data reception.
    03: Call DoIP_SoAdTpCopyRxData() for TcpCon_0_1 to receive Generic header of Routing activation message.
    04: Call DoIP_SoAdTpCopyRxData() for TcpCon_1_1 to receive Generic header of Routing activation message.
    05: Call DoIP_SoAdTpCopyRxData() for TcpCon_0_1 to receive the remaining part of Routing activation message.
    06: Call DoIP_SoAdTpCopyRxData() for TcpCon_1_1 to receive the remaining part of Routing activation message.
    07: VP(): Fetch and verify Routing activation response message on TcpCon_0_1.
    08: VP(): Fetch and verify Routing activation response message on TcpCon_1_1.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1350</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest15003_DiagnosticMessageTransmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest15_Interfaces/source/application/DoIP_ConTest15_Interfaces.c</sourcefile>
      <sourceline>585</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies parallel transmission of diagnostic messages on two interfaces.
  
Test Object: 
    DoIP_TpTransmit().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIP_SoAdTpStartOfReception() called for TcpCon_0_1 and TcpCon_1_0 to initiate reception.
    Routing activation message request/response processed on TcpCon_0_1 TcpCon_1_0 to
    register SA_0 and SA_1 respectively.
  
Test Execution: 
    01: Call DoIP_TpTransmit() to request transmission on TcpCon_1 of Interface_0 (TcpCon_0_1),
        and DoIP_MainFunction() process the transmission request.
    02: Call DoIP_TpTransmit() to request transmission on TcpCon_0 of Interface_1 (TcpCon_1_0),
        and DoIP_MainFunction() process the transmission request.
    03: Call DoIP_SoAdTpCopyTxData() to copy diagnostic message from TcpCon_0_1.
    04: VP(SWS_DoIP_00230, SWS_DoIP_00232, SWS_DoIP_00233):
        Verify that the complete message was copied correctly.
    05: Call DoIP_SoAdTpTxConfirmation() to confirm transmission.
    06: Call DoIP_SoAdTpCopyTxData() to copy diagnostic message from TcpCon_1_0.
    07: VP(SWS_DoIP_00230, SWS_DoIP_00232, SWS_DoIP_00233):
        Verify that the complete message was copied correctly.
    08: Call DoIP_SoAdTpTxConfirmation() to confirm transmission.
    09: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon_0_1 (Channel_0 and Channel_2) to verify that connection is operational.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0131.EB.SWS_DoIP_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>845</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Diag_Msg_2_Tx_Idle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>776</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TcpTxSM.Tx_Diag_Msg_Start_2_Tx_Diag_Msg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>777</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1351</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest15004_DiagnosticMessageReceive</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest15_Interfaces/source/application/DoIP_ConTest15_Interfaces.c</sourcefile>
      <sourceline>797</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies parallel reception of diagnostic messages on two interfaces.
  
Test Object: 
    DoIP_TpTransmit().
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIP_SoAdTpStartOfReception() called for TcpCon_0_1 and TcpCon_1_0 to initiate reception.
    Routing activation message request/response processed on TcpCon_0_1 TcpCon_1_0 to
    register SA_0 and SA_1 respectively.
  
Test Execution: 
    01: Call DoIP_SoAdTpCopyRxData() to provide Generic header of Diagnostic message on TcpCon_1
        of Interface_0 (TcpCon_0_1).
    02: Call DoIP_SoAdTpCopyRxData() to provide Generic header of Diagnostic message on TcpCon_0
        of Interface_1 (TcpCon_1_0).
    03: Call DoIP_SoAdTpCopyRxData() to provide Diagnostic header on TcpCon_0_1.
    04: Call DoIP_SoAdTpCopyRxData() to provide Diagnostic header on TcpCon_1_0.
    05: Call DoIP_SoAdTpCopyRxData() to provide Diagnostic message payload on TcpCon_0_1.
    06: VP(): Verify that the correct diagnostic acknowledge message is transmitted on TcpCon_0_1,
        indicating successful diagnostic message reception.
    07: Call DoIP_SoAdTpCopyRxData() to provide Diagnostic message payload on TcpCon_1_0.
    08: VP(): Verify that the correct diagnostic acknowledge message is transmitted on TcpCon_1_0,
        indicating successful diagnostic message reception.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0131.EB.SWS_DoIP_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>845</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1352</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest15005_AliveCheck_SAOnDifferentInterface_RESPONSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest15_Interfaces/source/application/DoIP_ConTest15_Interfaces.c</sourcefile>
      <sourceline>1053</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Test verifies the case when two parallel single alive check processes are running on two interfaces simultaneously.
  
Test Object: 
    Single connection Alive check
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Initiated Tp reception on TcpCon_0 and TcpCon_1_0.
  
Test Execution: 
    01: Send routing activation request message on TcpCon_0_0 (interface 0) and on TcpCon_1_0 (interface 1)
        with source address SA_0 and verify that the route is successfully activated (ACK transmitted with response code 0x10).
    02: Send routing activation request message on TcpCon_0_1 (interface 0) and on TcpCon_1_1 (interface 1)
        with the same source address (SA_0), as used in step 01.
    03: VP(SWS_DoIP_00105): Verify that DoIP has transmitted Alive check request message on TcpCon_0_0,
        because SA_0 is already assigned to this connection.
    04: Call DoIP_MainFunction() to tick TcpCon_0_0 alive check timer
        EBTEST_ITF0_ALIVE_CHECKRESP_TIMEOUT -1U times.
    05: Receive Alive check response message on TcpCon_0_0 with SA matching already registered SA_0.
    06: VP(SWS_DoIP_00105): Verify that DoIP has transmitted on TcpCon_0_1 Routing activation NACK
        message, with response code 0x03 (DOIP_ROU_ACT_RESP_SRC_IN_USE).
    07: VP(SWS_DoIP_00105): Verify that the connection TcpCon_0_1 got reset.
    08: Call DoIP_MainFunction() to tick TcpCon_1_0 alive check timer
        EBTEST_ITF1_ALIVE_CHECKRESP_TIMEOUT -1U times.
    09: Receive Alive check response message on TcpCon_1_0 with SA matching already registered SA_0.
    10: VP(SWS_DoIP_00105): Verify that DoIP has transmitted on TcpCon_1_1 Routing activation NACK
        message, with response code 0x03 (DOIP_ROU_ACT_RESP_SRC_IN_USE).
    11: VP(SWS_DoIP_00105): Verify that the connection TcpCon_1_1 got reset.
    12: VP(DoIP.EB.TestingStrategy.BasicTrafficTest): Transmit and receive simple Diagnostic message
        on TcpCon_0_0 and on TcpCon_1_0 to verify that connections are operational.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.TestingStrategy.BasicTrafficTest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1353</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest15006_InactivityTimer_Expired</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest15_Interfaces/source/application/DoIP_ConTest15_Interfaces.c</sourcefile>
      <sourceline>1299</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies the case when two parallel inactivity timers are running simultaneously on two interfaces,
    TcpCon_0_0 connection on interface 0 with inactivity time EBTEST_ITF0_INACTIVITY_TIM_TIMEOUT and TcpCon_1_0
    on interface 1 with inactivity time EBTEST_ITF1_INACTIVITY_TIM_TIMEOUT.
  
Test Object: 
    Expired inactivity timer.
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_SoAdTpStartOfReception() for TcpCon_0_0 and TcpCon_1_0 connection to initiate inactivity timer.
    02: Call DoIP_MainFunction() to tick TcpCon_0_0 inactivity timer
        EBTEST_ITF0_INACTIVITY_TIM_TIMEOUT -1U times.
    03: Call DoIP_MainFunction() to tick one more inactivity timer.
    04: VP(): Verify that expired inactivity timer on interface 0 will reset TcpCon_0_0 connection.
    05: Call DoIP_MainFunction() to tick TcpCon_1_0 alive check timer
        EBTEST_ITF1_INACTIVITY_TIM_TIMEOUT -1U times.
    06: Call DoIP_MainFunction() to tick one more inactivity timer.
    07: VP(): Verify that expired inactivity timer on interface 1 will reset TcpCon_1_0 connection.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.ASR_R21-11.SWS_DoIP_00144</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>453</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1354</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest15007_VehicleIdentificationRequest</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest15_Interfaces/source/application/DoIP_ConTest15_Interfaces.c</sourcefile>
      <sourceline>1430</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP message with payload Type 0x0001 is received on the
    configured Udp connection on both interfaces, DoIP module shall respond with a Vehicle identification response
    (Vehicle announcement message) on each interface.
  
Test Object: 
    Vehicle announcement messages.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0001(vehicle identification request)
        and default protocol type (0xFF) on UdpCon_0_0 (interface 0).
    02: VP(SWS_DoIP_00060): Verify that SoAd_IfTransmit() was called on UdpCon_0_0 to send Vehicle
        identification response
    03: VP(SWS_DoIP_00083, SWS_DoIP_00086):
        Verify that the expected Vehicle identification response message was sent on UdpCon_0_0.
    04: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0001(vehicle identification request)
        and default protocol type (0xFF) on UdpCon_1_0 (interface 1).
    05: VP(SWS_DoIP_00060): Verify that SoAd_IfTransmit() was called on UdpCon_1_0 to send Vehicle
        identification response
    06: VP(SWS_DoIP_00083, SWS_DoIP_00086):
        Verify that the expected Vehicle identification response message was sent on UdpCon_1_0.
    07: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1355</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest15008_RoutAct_E0_FurtherAction</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest15_Interfaces/source/application/DoIP_ConTest15_Interfaces.c</sourcefile>
      <sourceline>1598</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that "Further action" byte in vehicle identification response message
    contains 0x10 before a route(s) with routing activation number 0xE0 is activated, and 0x00 after
    the route is successfully activated.
  
Test Object: 
    Further action byte
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIP_SoAdTpStartOfReception() is called.
    Routing activation authentication and confirmation functions are not configured for the tested
    route.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() to send Vehicle Identification request (payload type 0x0001)
        on UdpCon_0_0 connection (interface 0).
    02: VP(DoIP.SWS_DoIP_00082): Verify that "Further action" byte of a vehicle identification
        response on interface 0 contains the value 0x10 since there is one Routing Activation
        object with DoIPRoutingActivationNumber 0xE0.
    03: Call DoIP_SoAdIfRxIndication() to send Vehicle Identification request (payload type 0x0001)
        on UdpCon_1_0 connection (interface 1).
    04: VP(DoIP.SWS_DoIP_00082): Verify that "Further action" byte of a vehicle identification
        response on interface 1 contains the value 0x00 since there is no Routing Activation
        object with DoIPRoutingActivationNumber 0xE0.
    05: Call DoIP_SoAdIfTxConfirmation() on UdpCon_0_0 connection (interface 0).
    06: Call DoIP_SoAdIfTxConfirmation() on UdpCon_1_0 connection (interface 0).
    07: Send routing activation message on a Tcp connection 0 on interface 0, with Routing activation number 0xE0.
    08: Fetch routing activation response message on TcpCon0.
    09: Send routing activation message on a Tcp connection 0 on interface 1, with Routing activation number 0xE0.
        Routing action should failed, because interface 1 dosen't have Route with Routing activation number 0xE0.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00084</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1356</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest15009_AutomaticActivationOfAllConnection_Itf0</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest15_Interfaces/source/application/DoIP_ConTest15_Interfaces.c</sourcefile>
      <sourceline>1795</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies automatic activation of all connections on interface 0 during initialization.
    In this test case Physical address is used instead of EID in response message and sockets for
    interface 1 aren't open with function call EbTest_Inc04_DoIP_OpenAllSockets_Itf().
  
Test Object: 
    Vehicle announcement messages.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    Set up DoIPUseMacAddressForIdentification = 1, for interface 1.
    DoIPInterfaceActLineCtrl set to FALSE on interface 0.
  
Test Execution: 
    01: Call DoIP_SoConModeChg() to set the state of Vehicle announcement connection 0 of Interface_0 to ONLINE.
    02: Call DoIP_SoConModeChg() to set the state of Vehicle announcement connection 0 of Interface_1 to ONLINE.
    03: Call DoIP_MainFunction() to tick timers EBTEST_ITF0_VEH_ANN_INIT_TIMEOUT - 1U times.
    04: Verify that nothing was called, i.e. timer has not expired.
    05: Call DoIP_MainFunction() one tick one more time.
    06: VP(DoIP.SWS_DoIP_00064): Verify that SoAd_IfTransmit() was called to transmit Vehicle announcement message
        on Interface_0.
    07: Call DoIP_SoAdIfTxConfirmation() for Vehicle announcement connection 0 of Interface_0 to confirm transmission.
    08: Call DoIP_MainFunction() to tick timers EBTEST_ITF1_VEH_ANN_INIT_TIMEOUT - 1U times.
    09: Verify that nothing was called, i.e. timer has not expired.
    10: Call DoIP_MainFunction() one tick one more time.
    11: VP(DoIP.SWS_DoIP_00064): Verify that SoAd_IfTransmit() was called to transmit Vehicle announcement message
        on Interface_1.
    12: Call DoIP_SoAdIfTxConfirmation() for Vehicle announcement connection 0 of Interface_1 to confirm transmission.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.SWS_DoIP_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1357</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest15010_TransitionActiveToInactive_MultipleInterfaces</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest15_Interfaces/source/application/DoIP_ConTest15_Interfaces.c</sourcefile>
      <sourceline>1952</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the transition from DOIP_ACTIVATION_LINE_ACTIVE to DOIP_ACTIVATION_LINE_INACTIVE.
  
Test Object: 
    EbTest_DoIP_ActivationLineSwitchInactive().
    DoIP_LocalIpAddrAssignmentChg().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Bring the activation line to ACTIVE status.
    02: Call DoIP_ActivationLineSwitch(FALSE) for Interface_0.
    03: Call DoIP_MainFunction EBTEST_LOCAL_IP_ADDRESS_RELEASE_DELAY - 1U times.
    04: VP(DoIP.dsn.Func0101.EB.SWS_DoIP_00235):
        Check that release of IP addresses is not yet started.
    05: Call DoIP_MainFunction one more time to time out the IP address assignment release timer.
    06: VP(DoIP.dsn.Func0101.EB.SWS_DoIP_00235):
        Verify that for each connection (UDP and TCP) for which DoIPRequestAddressAssignment is set
        to TRUE SoAd_GetSoConId() is called and SoAd_ReleaseIpAddrAssignment() is called to release
        the corresponding IP Address.
    07: Call DoIP_ActivationLineSwitch(FALSE) for Interface_0 and
        DoIP_ActivationLineSwitch(TRUE) for Interface_1.
    08: VP(DoIP.dsn.Func0101.EB.ActivationLineState):
        Verify that DoIP_ActivationLineSwitch(FALSE) for Interface_0 and DoIP_ActivationLineSwitch(TRUE)
        for Interface_1 produced no calls because activation line state is already INACTIVE.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0101.EB.SWS_DoIP_00235</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>790</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0101.EB.ActivationLineState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>788</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1358</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest15011_CorrectProtocolVersion</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest15_Interfaces/source/application/DoIP_ConTest15_Interfaces.c</sourcefile>
      <sourceline>2054</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the case when DoIP has configured different protocol versions on each interface.
    Interface_0 has protocol version 2 enabled and when it receives a message with protocol version 3,
    it shall drop the message and send NACK response message. New received message, with protocol version 2,
    shall be accepted and a Vehicle identification response message shall be sent.
    Interface_1 has protocol version 3 enabled and when it receives a message with protocol version 2,
    it shall drop the message and send NACK response message. But a newly received message with protocol version 3
    shall be accepted and a Vehicle identification response message shall be sent.
  
Test Object: 
    Vehicle announcement messages with correct protocol version.
  
Test Precondition: 
    DoIP initialized.
    All socket connections opened.
    DoIPUseMacAdressForIdentification is set to false.
    DoIPSecuredCommunicationForAllProtocolVersions is set to true.
    DoIP_ISO13400_2_2012 is set to true for Interface_0.
    DoIP_ISO13400_2_2019 is set to false for Interface_0.
    DoIP_ISO13400_2_2012 is set to false for Interface_1.
    DoIP_ISO13400_2_2019 is set to true for Interface_1.
  
Test Execution: 
    01: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0001(vehicle identification request) and
        protocol type ISO13400-2:2019 (0x03) to Udp connection on Interface_0.
    02: VP(ProtocolVersion_ISO13400_2_2012):
        Verify that DoIP sent NACK response message with code 0x00 (invalid protocol information) and
        with protocol version ISO13400-2:2012 (0x02).
    03: Set PduInfo to protocol type ISO13400-2:2012 (0x02).
    04: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0001(vehicle identification request) and
        protocol type ISO13400-2:2012 (0x02) to Udp connection on Interface_0.
    05: VP(ProtocolVersion_ISO13400_2_2012):
        Verify that the expected Vehicle identification response message was sent with same protocol version as
        received (0x02).
    06: Call DoIP_SoAdIfTxConfirmation().
    07: Modify stubs and change protocol versions of Response messages for Udp connection on Interface_1.
    08: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0001(vehicle identification request) and
        protocol type ISO13400-2:2012 (0x02) to Udp connection on Interface_1.
    09: VP(ProtocolVersion_ISO13400_2_2019):
        Verify that DoIP sent NACK response message with code 0x00 (invalid protocol information) and
        with protocol version ISO13400-2:2019 (0x03).
    10: Set PduInfo to protocol type ISO13400-2:2019 (0x03).
    11: Call DoIP_SoAdIfRxIndication() with message payload type = 0x0001(vehicle identification request) and
        protocol type ISO13400-2:2019 (0x03) to Udp connection on Interface_1.
    12: VP(ProtocolVersion_ISO13400_2_2019):
        Verify that the expected Vehicle identification response message was sent with same protocol version as
        received (0x03).
    13: Call DoIP_SoAdIfTxConfirmation().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>871</internalId></provcov>
        <provcov>
          <linksto>DoIP.dsn.Func0135.Rx.ProtocolVersion_ISO13400_2_2019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>872</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1359</internalId></specobject>
    <specobject>
      <id>DoIP_ConTest15012_TransitionActiveToInactive_ControlInternalInterface</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Conformance/IN/DoIP_ConTest15_Interfaces/source/application/DoIP_ConTest15_Interfaces.c</sourcefile>
      <sourceline>2265</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This test verifies the transition from DOIP_ACTIVATION_LINE_INACTIVE to DOIP_ACTIVATION_LINE_ACTIVE for internal tester,
    when DoIPInterfaceActLineCtrl is configured to FALSE.
  
Test Object: 
    DoIP_ControlInternalInterface().
  
Test Precondition: 
    DoIP initialized.
  
Test Execution: 
    01: Call DoIP_ControlInternalInterface with Active == TRUE, while the activation line state is already set to ACTIVE.
        DoIP should ignore this call.
    02: VP(DoIP.EB.DoIP_ControlInternalInterface):
        Verify that DoIP ignored the call.
    03: Bring the activation line to INACTIVE status by calling DoIP_ControlInternalInterface().
    04: VP(DoIP.EB.DoIP_ControlInternalInterface):
        Verify that Interface_0 is being set to state INACTIVE.
    05: Call DoIP_MainFunction EBTEST_LOCAL_IP_ADDRESS_RELEASE_DELAY - 1U times.
    06: Call DoIP_MainFunction one more time to time out the IP address assignment release timer.
    07: VP(DoIP.EB.DoIP_ControlInternalInterface.ChangeStatus):
        Verify that for each connection (UDP and TCP) for which DoIPRequestAddressAssignment is set
        to TRUE SoAd_GetSoConId() is called and SoAd_ReleaseIpAddrAssignment() is called to release
        the corresponding IP Address.
    08: Call DoIP_ControlInternalInterface with the same activation line state as the selected interface is already in.
    09: VP(DoIP.EB.DoIP_ControlInternalInterface.ChangeStatus):
        Verify that no change has occurred.
    10: Call DoIP_ControlInternalInterface to set the Interface_0 into ACTIVE state.
    11: VP(DoIP.EB.DoIP_ControlInternalInterface.ChangeStatus):
        Verify that Interface_0 activation line state changed to ACTIVE.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.DoIP_ControlInternalInterface</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>84</internalId></provcov>
        <provcov>
          <linksto>DoIP.EB.DoIP_ControlInternalInterface.ChangeStatus</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1360</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_DOIP_Gen_00000_OnlyPbCfg</id>
      <status>approved</status>
      <source>EB test case specification (asc_DoIP)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_DoIP/test/ts5/Generic/IN/DoIP_GenTest_00_OnlyPbCfg/source/application/DoIP_GenTest_00_OnlyPbCfg.h</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall prove that the DOIP post build configuration also compiles stand alone.
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * Set TS_BUILD_POST_BUILD_BINARY to TRUE to prevent compilation of non post build files.
    * Remove all generated DOIP C files except post build files if there are any.

Test Execution: 
    The test run is successful when the DOIP compiles under sticking to the precondition and a
    binary file is generated.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>DoIP.EB.PostBuild_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>478</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1361</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
