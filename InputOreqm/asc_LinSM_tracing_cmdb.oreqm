<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_LinSM_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_Native/asc_LinSM_public_modulereference_integration_req.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_Native/asc_LinSM_requirements_AUTOSAR_SWS_LinSM_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_Native/asc_LinSM_requirements_LinSM_4_0_3.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_Native/asc_LinSM_requirements_LinSM_EBExtensions.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_Native/asc_LinSM_requirements_LinSM_refinement.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/common_req/LinSM_DbgInst_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/common_req/LinSM_VerifyStub_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_DocBookImporter/reqm_SWDD.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</commandline>
    <timestamp>Mon Jun 17 19:41:57 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_LinSM_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_Native/asc_LinSM_public_modulereference_integration_req.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_Native/asc_LinSM_requirements_AUTOSAR_SWS_LinSM_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_Native/asc_LinSM_requirements_LinSM_4_0_3.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_Native/asc_LinSM_requirements_LinSM_EBExtensions.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_Native/asc_LinSM_requirements_LinSM_refinement.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/common_req/LinSM_DbgInst_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/common_req/LinSM_VerifyStub_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_DocBookImporter/reqm_SWDD.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/1018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>swpad</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swts</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/1010: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>

      <!-- legacy items -->
      <regex>dev</regex>
      <regex>man</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>
    <!-- The Ruleset for RMP4.0 is currently identical to the previous rule set. This rule is
        intoduce to show that the right file is uses. It will be removed when the RMP4.0 rule set is
    reworked -->
    <rule>
      <name>INFO.Rule set RMP4.0</name>
      <description>This rules indicates that RMP4.0 rule set is used.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.general.doctypes</name>
      <description>The used doctype is not part of the tracing model</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobjects/@doctype</applyto>
          <condition>((. != 'creq') or (. != 'fea') or (. != 'swpad') or (. != 'swts') or (. != 'swrs') or (. !='swad') or (. != 'swintts') or (.!= 'swdd') or (. != 'swurs') or (. != 'swmts') or (. != 'swuts') or (. != 'impl') or (. != 'dev') or (. != 'man') or (. != 'lim'))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected.coverage</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.count</name>
      <description>Unit requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swrs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swurs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd') and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.doctypes</name>
      <description>Requirements can be covered only by swurs, swad, dev, lim, swdd, impl, swuts, swmts, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs')]</applyto>
          <condition>(./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swurs, swad, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swuts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swmts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swintts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.impl.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='impl')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes"))</condition>
        </conditioncheck>
      </conditionchecks>
          </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

  </rules>
    <oreqmRules>

        <rule>
            <name>WRN.swts.needscoverage.count</name>
            <description>Violated if there are more than 10 swts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.man.needscoverage.count</name>
            <description>Violated if there are more than 10 man specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>man.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swintts.needscoverage.count</name>
            <description>Violated if there are more than 10 swintts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swintts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swmts.needscoverage.count</name>
            <description>Violated if there are more than 10 swmts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swmts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swuts.needscoverage.count</name>
            <description>Violated if there are more than 10 swuts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swuts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swpad.needscoverage.count</name>
            <description>Violated if there are more than 10 swpad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swpad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.needscoverage.count</name>
            <description>Violated if there are more than 10 swrs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.needscoverage.count</name>
            <description>Violated if there are more than 10 swad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.needscoverage.count</name>
            <description>Violated if there are more than 10 swurs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.needscoverage.count</name>
            <description>Violated if there are more than 10 swdd specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.impl.needscoverage.count</name>
            <description>Violated if there are more than 10 impl specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>impl.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swrs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.fulfilledby.count</name>
            <description>Violated if there are more than 10 swad specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swurs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.fulfilledby.count</name>
            <description>Violated if there are more than 10 swdd specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="lim">
    <specobject>
      <id>lim.LinSM.EB_INTREQ_LinSM_0001</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
      The <code>LinSM_RequestComMode</code> function is non-reentrant if called for a
      transition from <code>LINSM_FULL_COM</code> to <code>LINSM_NO_COM</code> state for a channel
      that uses sleep support. During such a transition, the LinIf function
      <code>LinIf_GotoSleep</code> must be called which itself is non-reentrant.
      </description>
      <rationale>
      </rationale>
      <providescoverage>
        <provcov>
          <linksto>dsn.LinSM.Preemption1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>402</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>
    <specobject>
      <id>lim.LinSM.EB_INTREQ_LinSM_0002</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
      <!-- [ASCLINSM-128] -->
      <code>LinSM_ScheduleRequest</code> is non-reentrant for the same LIN channel.
      According to LINSM113, the <code>LinSM_ScheduleRequest</code> function shall be reentrant.
      Contrary to this, the <code>LinSM_ScheduleRequest</code> function implementation is non-reentrant
      for the same LIN channel.
      </description>
      <rationale>
      </rationale>
      <providescoverage>
        <provcov>
          <linksto>dsn.LinSM.Preemption2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>403</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>
    <specobject>
      <id>lim.LinSM.EB_INTREQ_LinSM_0003</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
      <!-- [ASCLINSM-398] -->
      If the LinSM schedule table will be created for each channel, the name NULL_SCHEDULE has
      to be extended with the channel index (_0 for first channel, _1 for second channel and so on).
      The extension will be related to the index, not to the name of the channel, so it is needed
      to have the channels 0-based and consecutive, if numbering is used for channels.
      </description>
      <rationale>
      Considering that LinSM does not provide an ID for its channels, the index of the channel (meaning
      its order in the channel list) will be used to differentiate the channels.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>LinSM.ECUC_LinSM_00001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: LinSMScheduleIndex
        Parameter Type: Integer
        Parent Containers: LinSMSchedule,
        Description: This index parameter can be used by the BswM as a SymbolicNameReference target. 
        The LinSM just forwards the request from the BswM to LinIf. Note that the value of the 
        LinSMScheduleIndex shall be the same as the value from the LinIf.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: true
        Max-Value: 255
        Min-Value: 0
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SYMBOLICNAMEVALUES</srcid><srcstatus/><internalId>474</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.OnlyPreCompileSupported</srcid><srcstatus/><internalId>297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>
    <specobject>
      <id>LinSM.ECUC_LinSM_00139</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: LinSMGeneral
        Container Type: Container
        Description: This container contains general parameters of LIN State Manager module.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        &lt;pre&gt;This is a configuration parameter requirement without functional specification.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>
    <specobject>
      <id>LinSM.ECUC_LinSM_00140</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: LinSMVersionInfoApi
        Parameter Type: Boolean
        Parent Containers: LinSMGeneral,
        Description: Switches the LinSM_GetVersionInfo function ON or OFF.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        &lt;pre&gt;This is a configuration parameter requirement without functional specification.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.OnlyPreCompileSupported</srcid><srcstatus/><internalId>297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>
    <specobject>
      <id>LinSM.ECUC_LinSM_00141</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: LinSMMainProcessingPeriod
        Parameter Type: FloatValue
        Parent Containers: LinSMGeneral,
        Description: Fixed period that the MainFunction shall be called.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: OPEN)
        Min-Value: 0 (Type: OPEN)
      </description>
      <comment>
        &lt;pre&gt;This is a configuration parameter requirement without functional specification.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.OnlyPreCompileSupported</srcid><srcstatus/><internalId>297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>
    <specobject>
      <id>LinSM.ECUC_LinSM_00142</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: LinSMChannel
        Container Type: Sub-Container
        Parent Containers: LinSMConfigSet,
        Sub-Containers: LinSMSchedule 
        Description: Describes each LIN channel the LinSM is connected to.
        Lower Multiplicity: 1
      </description>
      <comment>
        &lt;pre&gt;This is a configuration parameter requirement without functional specification.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>
    <specobject>
      <id>LinSM.ECUC_LinSM_00144</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: LinSMConfirmationTimeout
        Parameter Type: FloatValue
        Parent Containers: LinSMChannel,
        Description: Timeout in seconds for the goto sleep, wakeup and schedule request calls to LinIf.
        The timeout must be longer than a goto-sleep command on the bus (i.e. it is bit rate dependent)
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: LINK, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        &lt;pre&gt;This is a configuration parameter requirement without functional specification.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.OnlyPreCompileSupported</srcid><srcstatus/><internalId>297</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/LinSM_Extension.xdm.m4_167</srcid><srcstatus/><internalId>394</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_CONF</srcid><srcstatus/><internalId>529</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>
    <specobject>
      <id>LinSM.ECUC_LinSM_00145</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: LinSMComMNetworkHandleRef
        Parameter Type: Reference
        Parent Containers: LinSMChannel,
        Description: Unique handle to identify one certain LIN network. Reference to one of the network 
        handles configured in the ComM.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: LINK, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/ComM/ComMConfigSet/ComMChannel
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
        Included Containers 
        Container Name | Multiplicity | Scope / Dependency
        LinSMSchedule  |      0..*    | The schedule references to a schedule that is located in the LinIf configuration.
                                        Moreover, the PDU groups are located in the COM configuration. Note that there are
                                        two references to PDU groups. The simple reason is that a PDU group is only allowed
                                        to contain one direction (TX or RX).
                                        Only applicable to LIN master nodes.
      </description>
      <comment>
        &lt;pre&gt;This is a configuration parameter requirement without functional specification.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.OnlyPreCompileSupported</srcid><srcstatus/><internalId>297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>
    <specobject>
      <id>LinSM.ECUC_LinSM_00146</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: LinSMSchedule
        Container Type: Sub-Container
        Parent Containers: LinSMChannel,
        Description: The schedule references to a schedule that is located in the LinIf configuration. 
        Moreover, the PDU groups are located in the COM configuration. Note that there are two 
        references to PDU groups. The simple reason is that a PDU group is only allowed to contain one 
        direction (TX or RX)
        Introduction: Only applicable to LIN master nodes.
        Lower Multiplicity: 0
      </description>
      <comment>
        &lt;pre&gt;This is a configuration parameter requirement without functional specification.&lt;/pre&gt;
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/LinSM_Extension.xdm.m4_375</srcid><srcstatus/><internalId>400</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>
    <specobject>
      <id>LinSM.ECUC_LinSM_00149</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: LinSMScheduleIndexRef
        Parameter Type: Reference (Symbolic name reference to [ LinIfScheduleTable ]
        Parent Containers: LinSMSchedule,
        Description: Reference to a schedule table in the LinIf configuration
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/LinIf/LinIfGlobalConfig/LinIfChannel/LinIfScheduleTable
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        &lt;pre&gt;This is a configuration parameter requirement without functional specification.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.OnlyPreCompileSupported</srcid><srcstatus/><internalId>297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>
    <specobject>
      <id>LinSM.ECUC_LinSM_00202</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: LinSMTransceiverPassiveMode
        Parameter Type: Boolean
        Parent Containers: LinSMChannel,
        Description: Selects STANDBY (true) or SLEEP (false) transceiver mode when entering 
        LINSM_NO_COM.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Post-Build-Variant-Value: false
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: LINK, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: LINK, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        &lt;pre&gt;This is a configuration parameter requirement without functional specification.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.OnlyPreCompileSupported</srcid><srcstatus/><internalId>297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>
    <specobject>
      <id>LinSM.ECUC_LinSM_00206</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: LinSMDevErrorDetect
        Parameter Type: Boolean
        Parent Containers: LinSMGeneral,
        Description: Switches the development error detection and notification on or off.
        Introduction: * true: detection and notification is enabled. * false: detection and 
        notification is disabled.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        &lt;pre&gt;This is a configuration parameter requirement without functional specification.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.OnlyPreCompileSupported</srcid><srcstatus/><internalId>297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>
    <specobject>
      <id>LinSM.ECUC_LinSM_00207</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: LinSMConfigSet
        Container Type: Container
        Sub-Containers: LinSMChannel 
        Description: This container contains the configuration parameters and sub containers of the 
        AUTOSAR LinSm module.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        &lt;pre&gt;This is a configuration parameter requirement without functional specification.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00001</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        LIN Interface - LinIf
      </description>
      <comment>
        &lt;pre&gt;This requirement is informational only.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The LinSM module shall not use or access the LIN driver or assume information about it any way 
        other than what the LinIf module provides through the function calls to the LinIf module listed 
        above.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30031</srcid><srcstatus/><internalId>463</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00005</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        A LinSM implementation shall provide a header file LinSM.h that contains all data exported from 
        the LinSM - API declarations (except callbacks), extern types, and global data.
      </description>
      <comment>
        Types: LinSM_ModeType, LinSM_ConfigType API functions: LinSM_Init, LinSM_ScheduleRequest, LinSM_GetVersionInfo, LinSM_GetCurrentComMode, LinSM_RequestComMode, LinSM_MainFunction,
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WITHOUT_CBK</srcid><srcstatus/><internalId>465</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00013</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The LinSM module shall include the ComM.h file
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/LinSM_Api.h_23</srcid><srcstatus/><internalId>322</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00019</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The LinSM module shall be able to handle one or more LIN networks.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_TIMER_NETW_INDEPENDENT</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00020</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The LinSM module shall have one state-machine containing the states LINSM_UNINIT and LINSM_INIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.SWS_LinSM_00022</srcid><srcstatus/><internalId>22</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_00024</srcid><srcstatus/><internalId>23</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00021</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In LINSM_INIT each network may be in the sub-states LINSM_NO_COM or LINSM_FULL_COM 
        independently.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_GOTOSLEEP_NOTOK</srcid><srcstatus/><internalId>582</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00173</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00022</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        There shall be a state called LINSM_UNINIT
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ_UNINIT</srcid><srcstatus/><internalId>488</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_CURMOD_UNINIT</srcid><srcstatus/><internalId>490</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQNOCOM_UNINIT</srcid><srcstatus/><internalId>491</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQFULLCOM_UNINIT</srcid><srcstatus/><internalId>492</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKECONF_UNINIT</srcid><srcstatus/><internalId>493</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SLEEPCONF_UNINIT</srcid><srcstatus/><internalId>494</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCHREQCONF_UNINIT</srcid><srcstatus/><internalId>495</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00024</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        There shall be a state called LINSM_INIT
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_NO_SCHEDULE_ON_SLAVE</srcid><srcstatus/><internalId>563</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQ_IND_REQ_CONF</srcid><srcstatus/><internalId>564</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_REQ_CONF</srcid><srcstatus/><internalId>565</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_CONF_REQ</srcid><srcstatus/><internalId>566</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_REQ_NOCONF_TIMEOUT</srcid><srcstatus/><internalId>567</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_CONF_NOREQ_TIMEOUT</srcid><srcstatus/><internalId>568</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_UNINIT_NOCOM</srcid><srcstatus/><internalId>575</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_FULLCOM_NOCOM</srcid><srcstatus/><internalId>576</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_NOCOM_NOCOM</srcid><srcstatus/><internalId>577</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTOSLEEP_NOCOM</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKEUP_NOCOM</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>23</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00025</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The LinSM state-machine shall transit from any state or sub-state to the state LINSM_INIT when 
        LinSM_Init is called.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_NO_SCHEDULE_ON_SLAVE</srcid><srcstatus/><internalId>563</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQ_IND_REQ_CONF</srcid><srcstatus/><internalId>564</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_REQ_CONF</srcid><srcstatus/><internalId>565</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_CONF_REQ</srcid><srcstatus/><internalId>566</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_REQ_NOCONF_TIMEOUT</srcid><srcstatus/><internalId>567</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_CONF_NOREQ_TIMEOUT</srcid><srcstatus/><internalId>568</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_UNINIT_NOCOM</srcid><srcstatus/><internalId>575</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_FULLCOM_NOCOM</srcid><srcstatus/><internalId>576</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_NOCOM_NOCOM</srcid><srcstatus/><internalId>577</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTOSLEEP_NOCOM</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKEUP_NOCOM</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>24</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00026</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        There shall be a sub-state called LINSM_NO_COM in the state LINSM_INIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.SWS_LinSM_00021</srcid><srcstatus/><internalId>21</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00027</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        When entering LINSM_NO_COM the LinSM module shall notify (with the exception [SWS_LinSM_00166) 
        ComM of the state change by calling the ComM_BusSM_ModeIndication with the parameter 
        COMM_NO_COMMUNICATION for the specific network.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.LINSM027_EB</srcid><srcstatus/><internalId>242</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00028</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        When LINSM_NO_COM is active, the LinSM module shall not command the LinIf module to communicate 
        for the selected network, i.e. bus shall be silent. Note: Upon entering or exiting the 
        LINSM_NO_COM state the LinSM module will not set the hardware interface or µ-controller into a 
        new power mode. This is not in the scope of the LinSM
      </description>
      <comment>
        "... shall not command the LinIf module to communicate ..." meaning that no schedule table request shall be forwarded to LinIf in state NO_COM
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.EB.LINSM0211_EB</srcid><srcstatus/><internalId>246</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00032</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        There shall be a sub-state called LINSM_FULL_COM for each network in the state LINSM_INIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.SWS_LinSM_00021</srcid><srcstatus/><internalId>21</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00033</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        When entering LINSM_FULL_COM the ComM shall be notified of the state change by calling the 
        ComM_BusSM_ModeIndication with the parameter COMM_FULL_COMMUNICATION for the specified network.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.LINSM033_EB</srcid><srcstatus/><internalId>243</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00035</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The LinSM module may only call LinIf_GotoSleep API in LinIf when the state LINSM_FULL_COM and 
        the sub-state LINSM_RUN_COMMUNICATION is active.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.LinIfGoToSleepNewSubState</srcid><srcstatus/><internalId>298</internalId></linkedfrom><linkedfrom><srcid>dev.LinSM.GotoSleepIndStates</srcid><srcstatus/><internalId>303</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00036</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the ComM module calls LinSM_RequestComMode requesting COMM_NO_COMMUNICATION the LinSM module 
        shall directly call (and not wait for next main function call) the LinIf module function 
        LinIf_GotoSleep on the specified network.
      </description>
      <comment>
        &lt;pre&gt;Only if state is FULL_COM or WAKEUP and SleepSupport is true.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_GOTOSLEEP_NOTOK</srcid><srcstatus/><internalId>582</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQCOM_NOCOM_FALSE</srcid><srcstatus/><internalId>583</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30147</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00043</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        When entering LINSM_INIT the LinSM shall be put in an init state. Init state means that global 
        variables, etc, shall be set to default value (reset value)
      </description>
      <comment>
        &lt;pre&gt;This requirement is informational only.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00046</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        When LinSM_GotoSleepConfirmation is called, and the current state/substate is LINSM_FULL_COM/
        LINSM_GOTOSLEEP, the LinSM shall set the state to LINSM_NO_COM, regardless of the "success" 
        parameter. In any other state, the LinSM_GotoSleepConfirmation shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.LinSM_GotoSleepConfirmationNewState</srcid><srcstatus/><internalId>299</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00047</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the ComM requests COMM_FULL_COMMUNICATION the LinSM shall call LinIf_Wakeup directly (and 
        not wait for next main function call) to transmit a wake up signal on the requested network, 
        except in the case of SWS_LinSM_00237.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_RequestComMode.c_555</srcid><srcstatus/><internalId>380</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_RequestComMode.c_563</srcid><srcstatus/><internalId>381</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_ENTER_FULL_COM</srcid><srcstatus/><internalId>581</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00049</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the LinIf notifies that the WakeUp is successfully sent (success = true), the state shall 
        be set to LINSM_FULL_COM.
      </description>
      <comment>
        &lt;pre&gt;'notifies that the WakeUp is successfully sent' meaning that LinSM_WakeupConfirmation(success = true) was called.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_ENTER_FULL_COM</srcid><srcstatus/><internalId>581</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00053</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Type of error | Related error code | Error value 
        API called without initialization of LinSM | LINSM_E_UNINITLinSm.LINSM_E_UNINIT | 0x00 
        Referenced network does not exist (identification is out of range) | 
        LINSM_E_NONEXISTENT_NETWORKLinSm.LINSM_E_NONEXISTENT_NETWORK | 0x20 
        API service called with wrong parameter | LINSM_E_PARAMETERLinSm.LINSM_E_PARAMETER | 0x30 
        API service called with invalid pointer | LINSM_E_PARAM_POINTERLinSm.LINSM_E_PARAM_POINTER | 
        0x40 
        Init function failed | LINSM_E_INIT_FAILEDLinSm.LINSM_E_INIT_FAILED | 0x50 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ChangeOfDevelopmentErrorsMacros</srcid><srcstatus/><internalId>300</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00073</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The LinSM module shall not make any consistency check of the configuration in run-time in 
        production software. It may, however, be done if the Development Error Detection is enabled.
      </description>
      <comment>
        &lt;pre&gt;This requirement is not applicable.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00079</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the function LinSM_ScheduleRequest is called, the LinSM module shall forward (and not wait 
        for the next main function call) the request to the LinIf module using the function call 
        LinIf_ScheduleRequest.
      </description>
      <comment>
        &lt;pre&gt;Only if the state is FULL_COM&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ</srcid><srcstatus/><internalId>508</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00085</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Diagnostic Event Manager - DEM
      </description>
      <comment>
        &lt;pre&gt;This requirement is informational only.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00086</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Default Error Tracer - DET
      </description>
      <comment>
        &lt;pre&gt;This requirement is informational only.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00100</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Before the LinSM calls the LinIf_GotoSleep, LinIf_Wakeup or LinIf_ScheduleRequest is called, 
        the LinSM module shall start a timer.
      </description>
      <comment>
        &lt;pre&gt;Timer shall be started in the context of LinSM_RequestComMode or LinSM_ScheduleRequest function&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_TIMER_START</srcid><srcstatus/><internalId>603</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00101</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        When a timer expires, i.e. greater than the configuration parameter LinSMConfirmationTimeout, a 
        timeout occurs.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ_TIMEOUT</srcid><srcstatus/><internalId>547</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30074</srcid><srcstatus/><internalId>550</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30075</srcid><srcstatus/><internalId>552</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_REQ_NOCONF_TIMEOUT</srcid><srcstatus/><internalId>567</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_CONF_NOREQ_TIMEOUT</srcid><srcstatus/><internalId>568</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00102</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        When a timeout occurs, the error code LINSM_E_CONFIRMATION_TIMEOUT shall be reported to the DET 
        module.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.LINSM102.Wakeup</srcid><srcstatus/><internalId>253</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM102.Sleep</srcid><srcstatus/><internalId>254</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM102.Schedule</srcid><srcstatus/><internalId>255</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00103</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the configuration parameter LinSMConfirmationTimeout is set to zero the timer is not used, 
        and hence a timeout cannot occur. This means that requirements [SWS_LinSM_00102, [
        SWS_LinSM_00170 and [SWS_LinSM_00215 will not happen.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.LINSM103.GotoSleep</srcid><srcstatus/><internalId>256</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM103.Wakeup</srcid><srcstatus/><internalId>257</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM103.ScheduleRequest</srcid><srcstatus/><internalId>258</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00105</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Communication Manager - ComM
      </description>
      <comment>
        &lt;pre&gt;This requirement is informational only.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00113</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | LinSM_ScheduleRequest 
        Syntax 
        Std_ReturnType LinSM_ScheduleRequest (NetworkHandleType network, LinIf_SchHandleType schedule)
        Service ID [hex] | 0x10 
        Sync/Async | Asynchronous 
        Reentrancy | Reentrant 
        Parameters (in) | network | Identification of the LIN channel 
        schedule | Pointer to the new Schedule table 
        Parameters (inout) | None 
        Parameters (out) | None 
        Return value | Std_ReturnType | E_OK - Schedule table request has been accepted.E_NOT_OK - Not 
        possible to perform the request, e.g. not initialized.
        Description | The upper layer requests a schedule table to be changed on one LIN network.
        Available via | LinSM.h 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30031</srcid><srcstatus/><internalId>463</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30036</srcid><srcstatus/><internalId>473</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00114</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the network parameter has an invalid value then the error-
        code LINSM_E_NONEXISTENT_NETWORK shall be reported to the DET module and E_NOT_OK shall be 
        returned.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ_NONEXCHANNEL</srcid><srcstatus/><internalId>501</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00115</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the schedule parameter has an invalid value, then the 
        error-code LINSM_E_PARAMETER shall be reported to the DET module and E_NOT_OK shall be returned.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ConsecutiveScheduleIndices</srcid><srcstatus/><internalId>290</internalId></linkedfrom><linkedfrom><srcid>dev.LinSM.PartlyImplementedFunctionalities</srcid><srcstatus/><internalId>302</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00116</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the state LINSM_UNINIT is active then the error-code 
        LINSM_E_UNINIT shall be reported to the DET module and E_NOT_OK shall be returned.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ_UNINIT</srcid><srcstatus/><internalId>488</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00117</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | LinSM_GetVersionInfo 
        Syntax 
        void LinSM_GetVersionInfo (Std_VersionInfoType* versioninfo)
        Service ID [hex] | 0x02 
        Sync/Async | Synchronous 
        Reentrancy | Reentrant 
        Parameters (in) | None 
        Parameters (inout) | None 
        Parameters (out) | versioninfo | Pointer to where to store the version information of this 
        module.
        Return value | None 
        Description 
        Available via | LinSM.h 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30031</srcid><srcstatus/><internalId>463</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30032</srcid><srcstatus/><internalId>467</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30036</srcid><srcstatus/><internalId>473</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00119</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>2</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the versioninfo pointer parameter is invalid (e.g. NULL)
        the error-code LINSM_E_PARAM_POINTER shall be reported to the DET module and E_NOT_OK shall be 
        returned.
      </description>
      <comment>&lt;pre&gt;LinSM_GetVersionInfo() doesn`t return any value so E_NOT_OK won`t be returned.&lt;/pre&gt;</comment>
      <releases>
        <release>AUTOSAR R20-11</release>
         <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ChangeOfDevelopmentErrorsMacros</srcid><srcstatus/><internalId>300</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_GETVER_NULLPTR</srcid><srcstatus/><internalId>521</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>51</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00122</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | LinSM_GetCurrentComMode 
        Syntax 
        Std_ReturnType LinSM_GetCurrentComMode (NetworkHandleType network, ComM_ModeType* mode)
        Service ID [hex] | 0x11 
        Sync/Async | Synchronous 
        Reentrancy | Reentrant 
        Parameters (in) | network | Identification of the LIN channel 
        Parameters (inout) | None 
        Parameters (out) | mode | Returns the active mode, see ComM_ModeType for descriptions of the 
        modes 
        Return value | Std_ReturnType | E_OK - OkE_NOT_OK - Not possible to perform the request, e.g. 
        not initialized.
        Description | Function to query the current communication mode.
        Available via | LinSM.h 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30031</srcid><srcstatus/><internalId>463</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30036</srcid><srcstatus/><internalId>473</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00123</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the network parameter has an invalid value, then the 
        error-code LINSM_E_NONEXISTENT_NETWORK shall be reported to the DET module and E_NOT_OK shall 
        be returned.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_CURMOD_NONEX_CHANNEL</srcid><srcstatus/><internalId>514</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00124</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>2</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the mode pointer parameter is invalid (e.g. NULL), then 
        the error-code LINSM_E_PARAM_POINTER shall be reported to the DET module and E_NOT_OK shall be 
        returned.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ChangeOfDevelopmentErrorsMacros</srcid><srcstatus/><internalId>300</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_GETCURCOMMODE_NULLPTR</srcid><srcstatus/><internalId>522</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>54</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00125</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the state LINSM_UNINIT is active, then the error-code 
        LINSM_E_UNINIT shall be reported to the DET module and E_NOT_OK shall be returned
      </description>
      <comment>
        &lt;pre&gt;when calling LinSM_GetCurrentComMode&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_CURMOD_UNINIT</srcid><srcstatus/><internalId>490</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_MODE_UNINIT</srcid><srcstatus/><internalId>496</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>55</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00126</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | LinSM_RequestComMode 
        Syntax 
        Std_ReturnType LinSM_RequestComMode (NetworkHandleType network, ComM_ModeType mode)
        Service ID [hex] | 0x12 
        Sync/Async | Asynchronous 
        Reentrancy | Reentrant 
        Parameters (in) | network | Identification of the LIN channel 
        mode | Request mode 
        Parameters (inout) | None 
        Parameters (out) | None 
        Return value | Std_ReturnType | E_OK - Request acceptedE_NOT_OK - Not possible to perform the 
        request, e.g. not initialized.
        Description | Requesting of a communication mode. The mode switch will not be made instant. The 
        LinSM will notify the caller when mode transition is made.
        Available via | LinSM.h 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30031</srcid><srcstatus/><internalId>463</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30036</srcid><srcstatus/><internalId>473</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>56</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00127</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the network parameter has an invalid value, then the 
        error-code LINSM_E_NONEXISTENT_NETWORK shall be reported to the DET module and E_NOT_OK shall 
        be returned.
      </description>
      <comment>
        &lt;pre&gt;when calling LinSM_RequestComMode&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQCOM_NONEX_CHANNEL</srcid><srcstatus/><internalId>515</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>57</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00128</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the state LINSM_UNINIT is active, then the error-code 
        LINSM_E_UNINIT shall be reported to the DET module and E_NOT_OK shall be returned.
      </description>
      <comment>
        &lt;pre&gt;when calling LinSM_RequestComMode&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQNOCOM_UNINIT</srcid><srcstatus/><internalId>491</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQFULLCOM_UNINIT</srcid><srcstatus/><internalId>492</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>58</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00129</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | LinSM_ScheduleRequestConfirmation 
        Syntax 
        void LinSM_ScheduleRequestConfirmation (NetworkHandleType network, LinIf_SchHandleType schedule)
        Service ID [hex] | 0x20 
        Sync/Async | Synchronous 
        Reentrancy | Reentrant 
        Parameters (in) | network | Identification of the LIN channel 
        schedule | Pointer to the new active Schedule table 
        Parameters (inout) | None 
        Parameters (out) | None 
        Return value | None 
        Description | The LinIf module will call this callback when the new requested schedule table is 
        active.
        Available via | LinSM.h 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30031</srcid><srcstatus/><internalId>463</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30036</srcid><srcstatus/><internalId>473</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>59</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00130</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the network parameter has an invalid value, then the 
        error-code LINSM_E_NONEXISTENT_NETWORK shall be reported to the DET module.
      </description>
      <comment>
        &lt;pre&gt;when calling LinSM_ScheduleRequestConfirmation&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQCONF_NONEXCHANNEL</srcid><srcstatus/><internalId>518</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>60</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00131</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the state LINSM_UNINIT is active, then the error-code 
        LINSM_E_UNINIT shall be reported to DET module.
      </description>
      <comment>
        Removed "and E_NOT_OK shall be returned" as decided in RfC #55436. This happens when LinSM_ScheduleRequestConfirmation is called.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQCONF_UNINIT</srcid><srcstatus/><internalId>495</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>61</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00132</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | LinSM_WakeupConfirmation 
        Syntax 
        void LinSM_WakeupConfirmation (NetworkHandleType network, boolean success)
        Service ID [hex] | 0x21 
        Sync/Async | Synchronous 
        Reentrancy | Reentrant 
        Parameters (in) | network | Identification of the LIN channel 
        success | True if wakeup was successfully sent, false otherwise 
        Parameters (inout) | None 
        Parameters (out) | None 
        Return value | None 
        Description | The LinIf will call this callback when the wake up signal command is sent not 
        successfully/successfully on the network.
        Available via | LinSM.h 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30031</srcid><srcstatus/><internalId>463</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30036</srcid><srcstatus/><internalId>473</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>62</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00133</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the network parameter has an invalid value, then the 
        error-code LINSM_E_NONEXISTENT_NETWORK shall be reported to the DET module.
      </description>
      <comment>
        &lt;pre&gt;when calling LinSM_WakeupConfirmation&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKECONF_NONEXCHANNEL</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>63</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00134</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the state LINSM_UNINIT is active, then the error-code 
        LINSM_E_UNINIT shall be reported to the DET module.
      </description>
      <comment>
        &lt;pre&gt;when calling LinSM_WakeupConfirmation&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKECONF_UNINIT</srcid><srcstatus/><internalId>493</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>64</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00135</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | LinSM_GotoSleepConfirmation 
        Syntax 
        void LinSM_GotoSleepConfirmation (NetworkHandleType network, boolean success)
        Service ID [hex] | 0x22 
        Sync/Async | Synchronous 
        Reentrancy | Reentrant 
        Parameters (in) | network | Identification of the LIN channel 
        success | True if goto sleep was successfully sent, false otherwise 
        Parameters (inout) | None 
        Parameters (out) | None 
        Return value | None 
        Description | The LinIf will call this callback when the go to sleep command is sent 
        successfully or not sent successfully on the network.
        Available via | LinSM.h 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30031</srcid><srcstatus/><internalId>463</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30036</srcid><srcstatus/><internalId>473</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>65</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00136</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the network parameter has an invalid value, then the 
        error-code LINSM_E_NONEXISTENT_NETWORK shall be reported to the DET module.
      </description>
      <comment>
        &lt;pre&gt;when calling LinSM_GotoSleepConfirmation&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLEEPCONF_NONEXCHANNEL</srcid><srcstatus/><internalId>517</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>66</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00137</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the state LINSM_UNINIT is active, then the error-code 
        LINSM_E_UNINIT shall be reported to the DET module.
      </description>
      <comment>
        &lt;pre&gt;when calling LinSM_GotoSleepConfirmation&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLEEPCONF_UNINIT</srcid><srcstatus/><internalId>494</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>67</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00138</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>2</version>
      <description>
        API Function | Header File | Description 
        Det_ReportError | Det.h | Service to report development errors.
        LinIf_SetTrcvMode | LinIf.h | Set the given LIN transceiver to the given mode.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.SWS_LinSM_00138_DET</srcid><srcstatus/><internalId>236</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.SWS_LinSM_00138_Trcv_Mode</srcid><srcstatus/><internalId>237</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>68</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00151</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        No other LinSM API or other module's (e.g. LinIf) API shall be called from the LinSM_Init 
        function. Other modules may not be initialized.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_INIT</srcid><srcstatus/><internalId>497</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00152</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The LinSM state-machine shall transit from any state or sub-state to sub-state LINSM_NO_COM for 
        all networks when LinSM_Init is called.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQSAMECOM</srcid><srcstatus/><internalId>512</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_UNINIT_NOCOM</srcid><srcstatus/><internalId>575</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_FULLCOM_NOCOM</srcid><srcstatus/><internalId>576</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_NOCOM_NOCOM</srcid><srcstatus/><internalId>577</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTOSLEEP_NOCOM</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKEUP_NOCOM</srcid><srcstatus/><internalId>579</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_INIT_IN_FULLCOM</srcid><srcstatus/><internalId>611</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKEUP_AND_GOTOSLEEP_TO_NO_COM</srcid><srcstatus/><internalId>615</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00160</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00154</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the LinIf module calls the confirmation callback before the timeout occurs, the active timer 
        shall stop, so that the timeout will not occur.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.LINSM154.Wakeup</srcid><srcstatus/><internalId>259</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM154.Sleep</srcid><srcstatus/><internalId>260</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM154.Schedule</srcid><srcstatus/><internalId>261</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00155</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | LinSM_Init 
        Syntax 
        void LinSM_Init (const LinSM_ConfigType* ConfigPtr)
        Service ID [hex] | 0x01 
        Sync/Async | Synchronous 
        Reentrancy | Non reentrant 
        Parameters (in) | ConfigPtr | Pointer to the LinSM post-build configuration data.
        Parameters (inout) | None 
        Parameters (out) | None 
        Return value | None 
        Description | This function initializes the LinSM.
        Available via | LinSM.h 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30031</srcid><srcstatus/><internalId>463</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30036</srcid><srcstatus/><internalId>473</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00156</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | LinSM_MainFunction 
        Syntax 
        void LinSM_MainFunction (void)
        Service ID [hex] | 0x30 
        Description | Periodic function that runs the timers of different request timeouts 
        Available via | SchM_LinSm.h 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30031</srcid><srcstatus/><internalId>463</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30036</srcid><srcstatus/><internalId>473</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00157</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The LinSM_MainFunction shall handle the timers that are attached to the functions 
        LinIf_GotoSleep, LinIf_Wakeup or LinIf_ScheduleRequest (see paragraph [REF]
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_MAIN_FCT_HANDLES_TIMERS</srcid><srcstatus/><internalId>601</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00159</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        All request timers shall have a time that is a divisible by the LinSM_MainFunction (i.e. 
        LinSM_MainFunction period * m; m integer &gt;0)
      </description>
      <comment>
        If a timeout is not a multiple of LinSMMainProcessingPeriod, it shall be handled according to items [ecuc_sws_7000] and [ecuc_sws_7002] of the AUTOSAR document "Specification of ECU configuration V3.2.0 R4.0 Rev 3".
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.SWS_LinSM_00159_EB</srcid><srcstatus/><internalId>248</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00160</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The sub-state LINSM_NO_COM shall be active when entering the LINSM_INIT state, for all networks 
        when LinSM_Init is called.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.SWS_LinSM_00152</srcid><srcstatus/><internalId>70</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00161</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The state LINSM_UNINIT shall be active at start-up, before any API is called.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ_UNINIT</srcid><srcstatus/><internalId>488</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00162</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The handling (countdown and expiration) of the all request timers used by the LinSM module 
        shall be made done in the LinSM_MainFunction.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_TIMER_NETW_INDEPENDENT</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00163</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the function LinSM_ScheduleRequest is called and another request is in process on the same 
        network, the LinSM_ScheduleRequest shall return directly with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ_ACTIVE_REQ</srcid><srcstatus/><internalId>513</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>79</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00164</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The LinSM module shall use the same NetworkHandle value, received through an API, when 
        interfacing to the LinIf module (when LIN network is required as a parameter)
      </description>
      <comment>
        This applies to the following function calls: LinSM_RequestComMode calling LinIf_WakeUp LinSM_RequestComMode calling LinIf_GotoSleep LinSM_ScheduleRequest calling LinIf_ScheduleRequest
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.LINSM164.Wakeup</srcid><srcstatus/><internalId>262</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM164.GotoSleep</srcid><srcstatus/><internalId>263</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM164.ScheduleRequest</srcid><srcstatus/><internalId>264</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00166</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The LinSM module shall not notify the state change to LINSM_NO_COM when the LinSM is executing 
        the LinSM_Init function, i.e. the LinSM_Init function shall neither call 
        ComM_BusSM_ModeIndication nor BswM_LinSM_CurrentState.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_UNINIT_NOCOM</srcid><srcstatus/><internalId>575</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_FULLCOM_NOCOM</srcid><srcstatus/><internalId>576</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_NOCOM_NOCOM</srcid><srcstatus/><internalId>577</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTOSLEEP_NOCOM</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKEUP_NOCOM</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00168</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the LinSM called LinIf_ScheduleRequest from a call to LinSM_ScheduleRequest, it shall 
        forward the return value to its caller.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.SWS_LinSM_00168_1</srcid><srcstatus/><internalId>270</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_00168_2</srcid><srcstatus/><internalId>271</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00170</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If request timer elapses (i.e. module LinIf is not notifying within the timeout) and the 
        maximum number of retries have been reached, in the case of a LinIf_Wakeup request, the LinSM 
        module shall notify ComM module with same state.
      </description>
      <comment>
        &lt;pre&gt;replaced by LinSM.ASR40.LINSM170_EB&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ModeIndication</srcid><srcstatus/><internalId>287</internalId></linkedfrom><linkedfrom><srcid>dev.LinSM.PartlyImplementedFunctionalities</srcid><srcstatus/><internalId>302</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00172</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinIf module calls the confirmation callback after the timer has elapsed, no further 
        notification shall be made to the ComM modules, i.e. the confirmation is ignored.
      </description>
      <comment>
        If LinSM_ScheduleRequestConfirmation is called, BswM_LinSM_CurrentSchedule shall be called according to LinSM.ASR40.LINSM207.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ_TIMEOUT</srcid><srcstatus/><internalId>547</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>84</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00173</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the LINSM_INIT there shall be a sub-state-machine for each network with the states 
        LINSM_NO_COM and LINSM_FULL_COM.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.SWS_LinSM_00021</srcid><srcstatus/><internalId>21</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>85</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00175</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        There shall be request timers for each network. One network shall be independent of another 
        network.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.SWS_LinSM_00175_INDEP</srcid><srcstatus/><internalId>232</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>86</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00176</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the LinIf_Wakeup returns E_NOT_OK the LinSM_RequestComMode shall return E_NOT_OK directly 
        with no further action
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ComMHarmonization</srcid><srcstatus/><internalId>291</internalId></linkedfrom><linkedfrom><srcid>dev.LinSM.PartlyImplementedFunctionalities</srcid><srcstatus/><internalId>302</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>87</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00177</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the LinIf_GotoSleep returns E_NOT_OK the LinSM_RequestComMode shall return E_NOT_OK. If the 
        LinSM module returns LinSM_RequestComMode with E_NOT_OK, the same state shall be set (so that a 
        ComM_BusSM_ModeIndication and BswM_LinSM_CurrentState are called)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ModeIndication</srcid><srcstatus/><internalId>287</internalId></linkedfrom><linkedfrom><srcid>dev.LinSM.ComMHarmonization</srcid><srcstatus/><internalId>291</internalId></linkedfrom><linkedfrom><srcid>dev.LinSM.PartlyImplementedFunctionalities</srcid><srcstatus/><internalId>302</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_DURING_GOTOSLEEP</srcid><srcstatus/><internalId>584</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTOSLEEP_DURING_WAKEUP</srcid><srcstatus/><internalId>585</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>88</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00178</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In all other cases from [SWS_LinSM_00047 the LinSM module shall not call LinIf_Wakeup.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.SWS_LinSM_00178_FULLCOMM</srcid><srcstatus/><internalId>228</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.SWS_LinSM_00178_UNINIT</srcid><srcstatus/><internalId>229</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.SWS_LinSM_00178_SLEEP_FALSE</srcid><srcstatus/><internalId>230</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.SWS_LinSM_00178_SLEEP_FALSE_2</srcid><srcstatus/><internalId>231</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>89</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00180</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If active state is LINSM_NO_COM the state COMM_NO_COMMUNICATION shall be returned.
      </description>
      <comment>
        &lt;pre&gt;when calling LinSM_GetCurrentComMode&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30091</srcid><srcstatus/><internalId>556</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>90</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00181</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If active state is LINSM_FULL_COM the state COMM_FULL_COMMUNICATION shall be returned.
      </description>
      <comment>
        &lt;pre&gt;when calling LinSM_GetCurrentComMode&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30090</srcid><srcstatus/><internalId>555</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00182</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If active state is LINSM_UNINIT the state COMM_NO_COMMUNICATION shall be returned. This is also 
        captured above when the DET is enabled. This is to be defensive.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_MODE_UNINIT</srcid><srcstatus/><internalId>496</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00183</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If COMM_SILENT_COMMUNICATION is requested the function shall return E_NOT_OK directly without 
        action
      </description>
      <comment>
        &lt;pre&gt;when calling LinSM_RequestComMode&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ComMHarmonization</srcid><srcstatus/><internalId>291</internalId></linkedfrom><linkedfrom><srcid>dev.LinSM.PartlyImplementedFunctionalities</srcid><srcstatus/><internalId>302</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00191</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the mode parameter has an invalid value, then the error-
        code LINSM_E_PARAMETER shall be reported to the DET module and E_NOT_OK shall be returned.
      </description>
      <comment>
        &lt;pre&gt;when calling LinSM_RequestComMode&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQCOM_MODEINVALID</srcid><srcstatus/><internalId>524</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00192</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        When entering LINSM_FULL_COM the BswM shall be notified of the state change by calling the 
        BswM_LinSM_CurrentState with the parameter LINSM_FULL_COM for the specified network.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.LINSM033_EB</srcid><srcstatus/><internalId>243</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00193</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        When entering LINSM_NO_COM the LinSM module shall notify (with the exception [SWS_LinSM_00166) 
        BswM of the state change by calling the BswM_LinSM_CurrentState with the parameter LINSM_NO_COM 
        for the specific network.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_FULLCOM_NOCOMM_FALSE</srcid><srcstatus/><internalId>504</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_NOCOM_TIMEOUT_EXPIRE</srcid><srcstatus/><internalId>549</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQ_IND_REQ_CONF</srcid><srcstatus/><internalId>564</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_REQ_CONF</srcid><srcstatus/><internalId>565</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_CONF_REQ</srcid><srcstatus/><internalId>566</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00196</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        BSW Mode Manager - BswM
      </description>
      <comment>
        &lt;pre&gt;This requirement is informational only.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00201</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The LinSM module shall include the BswM_LinSM.h
      </description>
      <comment>
        &lt;pre&gt;see Bugzilla RfC #52381&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.SWS_LinSM_00201_EB</srcid><srcstatus/><internalId>201</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00202</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In all other cases from [SWS_LinSM_00049 the state shall be set same state as previous to the 
        request (so that a mode indication callback is made to BswM and ComM)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ModeIndication</srcid><srcstatus/><internalId>287</internalId></linkedfrom><linkedfrom><srcid>dev.LinSM.PartlyImplementedFunctionalities</srcid><srcstatus/><internalId>302</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00203</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        When entering LINSM_NO_COM the transceiver shall be set to STANDBY if 
        LinSMTransceiverPassiveMode is true and SLEEP otherwise by using the LinIf_SetTrcvMode. This 
        requirement is applicable only when LinSMTransceiverPassiveMode is configured for the channel.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.SWS_LinSM_00203_PassiveTrue</srcid><srcstatus/><internalId>240</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.SWS_LinSM_00203_PassiveFalse</srcid><srcstatus/><internalId>241</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00204</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The LinIf_SetTrcvMode shall not be called from the function LinSM_Init. Note: There is no need 
        to set the mode in the LinSM init function since the Transceiver will set the mode in its init 
        function. The mode is selected in the Transceiver configuration.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_CONF_NOTIF_TRCV</srcid><srcstatus/><internalId>595</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00205</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        When entering LINSM_FULL_COM the transceiver shall be set to active by using the 
        LinIf_SetTrcvMode. This requirement is applicable only when LinSMTransceiverPassiveMode is 
        configured for the channel.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_CONF_NOTIF_TRCV</srcid><srcstatus/><internalId>595</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00206</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the LinSM module gets the confirmation of setting a schedule table from the LinIf module 
        the BswM_LinSM_CurrentSchedule shall be called, if not timer has elapsed.
      </description>
      <comment>
        &lt;pre&gt;Removed "..., if not timer has elapsed.". According to LINSM207 BswM shall also be notified if timer has elapsed.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCH_REQ_CONF_BEFORE_TIMEOUT</srcid><srcstatus/><internalId>546</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00207</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the LinIf confirms a schedule switch without a preceding call to request new schedule table 
        the BswM_LinSM_CurrentSchedule shall be called
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHEDULE_REQ_CONF_INTERRUPT</srcid><srcstatus/><internalId>545</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCHREQ_TIMEOUT</srcid><srcstatus/><internalId>547</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_UNREQUESTED_SCHEDREQCONF_FULL_COM</srcid><srcstatus/><internalId>548</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00208</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The LinSM module shall perform a consistency check between code files and header files based on 
        pre-process-checking the version numbers of related code files and header files.
      </description>
      <comment>
        see http://wiki.elektrobit.com/index.php/Project:EB_tresos/Engineering_AutoCore/Software_Construction/Coding_Guidelines, BSWM_CHK_401.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM.c.m4_10</srcid><srcstatus/><internalId>333</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00211</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        These requirements are not applicable to this specification.
      </description>
      <comment>
        &lt;pre&gt;This requirement is informational only: Requirement for the specification&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00213</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinIf_ScheduleRequest returns with E_NOT_OK the LinSM module shall call 
        BswM_LinSM_CurrentSchedule with the old schedule table in the next main function call.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCH_REQ_NOT_OK</srcid><srcstatus/><internalId>557</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCH_REQ_NOT_OK_NULL</srcid><srcstatus/><internalId>558</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00214</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If timer has elapsed, the LinSM module shall call BswM_LinSM_CurrentSchedule with unchanged 
        schedule table. Be aware of that the LinIf will switch to a NULL schedule when entering sleep, 
        then it may make a schedule switch callback.
      </description>
      <comment>
        &lt;pre&gt;while waiting for LinSM_ScheduleRequestConfirmation&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ_TIMEOUT</srcid><srcstatus/><internalId>547</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00215</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If request timer elapses (i.e. module LinIf is not notifying within the timeout)) and the 
        maximum number of retries have been reached, in the case of a LinIf_Wakeup request, the LinSM 
        module shall notify BswM module with same state.
      </description>
      <comment>
        &lt;pre&gt;replaced by LinSM.ASR40.LINSM170_EB&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ModeIndication</srcid><srcstatus/><internalId>287</internalId></linkedfrom><linkedfrom><srcid>dev.LinSM.PartlyImplementedFunctionalities</srcid><srcstatus/><internalId>302</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00216</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The LinSM_Init function shall set the schedule type NULL_SCHEDULE for each configured channel. 
        This requirement is only applicable for LIN master node.
      </description>
      <comment>
        &lt;pre&gt;see Deviation: LinSM_Init does not set NULL_SCHEDULE for configured channels&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.Init</srcid><srcstatus/><internalId>285</internalId></linkedfrom><linkedfrom><srcid>dev.LinSM.PartlyImplementedFunctionalities</srcid><srcstatus/><internalId>302</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00219</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Module | Header File | Imported Type 
        ComM | Rte_ComM_Type.h | ComM_ModeType 
        ComStack_Types | ComStack_Types.h | NetworkHandleType 
        LinIf | LinIf.h | LinIf_SchHandleType 
        LinTrcv | Lin_GeneralTypes.h | LinTrcv_TrcvModeType 
        Std | Std_Types.h | Std_ReturnType 
        Std_Types.h | Std_VersionInfoType 
      </description>
      <comment>
        &lt;pre&gt;This requirement is informational only.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00220</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | LinSM_ModeType 
        Kind | Type 
        Derived from | uint8 
        Range | LINSM_FULL_COM | 0x01 | Full communication 
        LINSM_NO_COM | 0x02 | No communication 
        Description | Type used to report the current mode to the BswM 
        Available via | LinSM.h 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_MODETYPE</srcid><srcstatus/><internalId>559</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00221</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | LinSM_ConfigType 
        Kind | Structure 
        Elements | implementation specific 
        Type 
        Comment 
        Description | Data structure type for the post-build configuration parameters.
        Available via | LinSM.h 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.PostBuild</srcid><srcstatus/><internalId>280</internalId></linkedfrom><linkedfrom><srcid>dev.LinSM.PartlyImplementedFunctionalities</srcid><srcstatus/><internalId>302</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>113</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00223</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        LinSM_RequestComMode shall store the requested mode, if the return value is E_OK. The next 
        activation of the LinSM_MainFunction will then process this request when processing the state 
        machine. Note, that the state machine definition in section [REF] refers to this stored request 
        as reqComMode.
      </description>
      <comment>
        LinSM_RequestComMode shall also store the requested mode in the case when LinIf_Wakeup or LinIf_GotoSleep are called and return E_NOT_OK
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLEEP_NOTOK</srcid><srcstatus/><internalId>532</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKEUP_NOTOK</srcid><srcstatus/><internalId>534</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQCOMMODE_WHILE_STORED_MODE_IS_PROCESSED</srcid><srcstatus/><internalId>535</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKEUP_REPETITION_2</srcid><srcstatus/><internalId>538</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKEUP_REPETITION_3</srcid><srcstatus/><internalId>541</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTOSLEEP_REPETITION</srcid><srcstatus/><internalId>542</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>114</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_10208</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the state is LINSM_FULL_COM, the ComM requests COMM_NO_COMMUNICATION; the LinSM shall call 
        LinIf_GotoSleep to transmit a goto sleep command on the requested network.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_GOTO_SLEEP</srcid><srcstatus/><internalId>525</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>115</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_10209</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In all other cases from [SWS_LinSM_10208] the LinIf_GotoSleep shall not be called.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.SWS_LinSM_10209_UNINIT</srcid><srcstatus/><internalId>224</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_10209_SLEEP_FALSE</srcid><srcstatus/><internalId>225</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_10209_FULL_SLEEP_FALSE</srcid><srcstatus/><internalId>226</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_10209_NOCOMM</srcid><srcstatus/><internalId>227</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>116</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_10211</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the function LinSM_ScheduleRequest is called and the state is not LINSM_FULL_COM, the 
        LinSM_ScheduleRequest shall return directly with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LINSM.ScheduleRequestDet</srcid><srcstatus/><internalId>282</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>117</internalId></specobject>
    <specobject>
      <id>LinSM.ECUC_LinSM_00208</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: LinSMModeRequestRepetitionMax
        Parameter Type: Integer
        Parent Containers: LinSMConfigSet,
        Description: Specifies the maximal amount of mode request repetitions without a respective mode 
        indication from the LinIf module until the LinSM module reports a Development Error to the Det 
        and tries to go back to no communication.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 255
        Min-Value: 0
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/LinSM_Extension.xdm.m4_122</srcid><srcstatus/><internalId>393</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLEEP_NOTOK</srcid><srcstatus/><internalId>532</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SLEEP_NOTOK_REP_0</srcid><srcstatus/><internalId>533</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTOSLEEP_STATE</srcid><srcstatus/><internalId>616</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>118</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00301</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        When entering LINSM_FULL_COM, the sub-state LINSM_RUN_COMMUNICATION will be entered.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.NewStateRunComm</srcid><srcstatus/><internalId>301</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>119</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00302</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the LinIf_GotoSleep returns E_OK the LinSM sets the sub-state LINSM_GOTOSLEEP.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_RequestComMode.c_343</srcid><srcstatus/><internalId>374</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLAVESTATES_01</srcid><srcstatus/><internalId>619</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>120</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00304</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If request timout has occurred for LinIf_Wakeup and the maximum retries (
        LinSMModeRequestRepetitionMax) have not been reached, the LinIf_Wakeup request will be sent 
        again.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_REPETITION_2</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>121</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00305</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The LinSM module shall include the ComM_BusSM.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_REPETITION</srcid><srcstatus/><internalId>537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>122</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00224</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Type of error | Related error code | Error value 
        Timeout of the callbacks from LinIf | LINSM_E_CONFIRMATION_TIMEOUTLinSm.
        LINSM_E_CONFIRMATION_TIMEOUT | 0x00 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ConfTimeoutError</srcid><srcstatus/><internalId>295</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.LINSM053_LINSM_E_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>269</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>123</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00307</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The timer elapses for LinIf_Wakeup only, in the sense of [SWS_LinSM_00170 and [SWS_LinSM_00215,
        if the maximum number of retries (LinSMModeRequestRepetitionMax) has been reached.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_MainFunction.c_198</srcid><srcstatus/><internalId>361</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SILENCE_AFTER_WU_NOCONF</srcid><srcstatus/><internalId>570</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>124</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00229</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_LINStateManager.pdf, R20-11</source>
      <version>1</version>
      <description>
        API Function                 Header File    Description
        BswM_LinSM_CurrentSchedule   BswM_LinSM.h   Function called by LinSM to indicate the currently active schedule table for a specific LIN channel.
        BswM_LinSM_CurrentState      BswM_LinSM.h   Function called by LinSM to indicate its current state.
        ComM_BusSM_BusSleepMode      ComM.h         Notification of the corresponding Bus State Manager that the actual bus mode is Bus-Sleep.
                                                    Only applicable for ComM channels with ComMNmVariant set to SLAVE_ACTIVE or SLAVE_PASSIVE.
                                                    E.g. LIN slaves (ComMNMVariant = SLAVE_ACTIVE) or Ethernet channels with OA TC10 compliant Ethernet hardware which act as passive communication slave (ComMNMVariant = SLAVE_PASSIVE and EthTrcvActAsSlavePassiveEnabled set to TRUE)
        ComM_BusSM_ModeIndication    ComM.h         Indication of the actual bus mode by the corresponding Bus State Manager. ComM shall propagate the indicated state to the users with means of the RTE and BswM.
        Det_ReportRuntimeError       Det.h          Service to report runtime errors. If a callout has been configured then this callout shall be called.
        LinIf_GotoSleep              LinIf.h        Initiates a transition into the Sleep Mode on the selected channel.
        LinIf_ScheduleRequest        LinIf.h        Requests a schedule table to be executed. Only used for LIN master nodes.
        LinIf_Wakeup                 LinIf.h        Initiates the wake up process.
      </description>
      <comment>
        This requirement is informational only.
        Rationale:
        This is a list of APIs which are provided from other modules for LinSM. This requirement
        does not contain any information on how the APIs shall be used by LinSM.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>125</internalId></specobject>
    <specobject>
      <id>LinSM.ECUC_LinSM_00210</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: LinSMSilenceAfterWakeupTimeout
        Parameter Type: FloatValue
        Parent Containers: LinSMChannel,
        Description: Timeout in seconds after a failed wakeup sequence until a new wakeup process is 
        started.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: LINK, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
        Dependency:This parameter is only applicable for LIN slave nodes, depending on parameter LinSMNodeType.
      </description>
      <comment>&lt;pre&gt;This is a configuration parameter requirement without functional specification.&lt;/pre&gt;</comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/LinSM_Extension.xdm.m4_338</srcid><srcstatus/><internalId>398</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SILENCE_AFTER_WU_NOCONF</srcid><srcstatus/><internalId>570</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>126</internalId></specobject>
    <specobject>
      <id>LinSM.ECUC_LinSM_00211</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: LinSMNodeType
        Parameter Type: Enumeration
        Parent Containers: LinSMChannel,
        Description: Specifies the LIN node type of this channel.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Enumeration Literal: MASTER, AUTOSAR_ECUC
        Enumeration Literal: SLAVE, AUTOSAR_ECUC
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/LinSM_Extension.xdm.m4_313</srcid><srcstatus/><internalId>395</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQ_IND_REQ_CONF</srcid><srcstatus/><internalId>564</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>127</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00230</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the state is LINSM_FULL_COM, the ComM requests COMM_NO_COMMUNICATION; the LinSM shall store 
        the requested communication mode and return E_OK without further action.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.NothingStoredSlaveNodes</srcid><srcstatus/><internalId>293</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.SWS_LinSM_00230_EB</srcid><srcstatus/><internalId>249</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>128</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00231</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>2</version>
      <description>
        When LinSM_GotoSleepIndication is called, and the current state is LINSM_FULL_COM, the LinSM 
        shall directly call LinIf_GotoSleep (and not wait for next main function call) to enter sleep 
        mode on the requested network.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.GotoSleepIndStates</srcid><srcstatus/><internalId>303</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.SWS_LinSM_00231_EB</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>129</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00232</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In all other cases from SWS_LinSM_00231 the LinIf_GotoSleep shall not be called.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepIndication.c_80</srcid><srcstatus/><internalId>354</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLAVESTATES_01</srcid><srcstatus/><internalId>619</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>130</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00233</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the current state is LINSM_FULL_COM, the LinIf_GotoSleep returns E_OK and the requested 
        communication mode by ComM module is COMM_NO_COMMUNICATION, the ComM shall be notified of the 
        bus sleep event by calling ComM_BusSM_BusSleepMode for the specified network.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.BusSleepModeCall</srcid><srcstatus/><internalId>294</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.SWS_LinSM_00233_EB</srcid><srcstatus/><internalId>250</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>131</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00234</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the case of [SWS_LinSM_00046] and the requested communication mode by ComM module is 
        COMM_FULL_COMMUNICATION, the LinSM shall restart the wakeup up process.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.WUDuringSleep</srcid><srcstatus/><internalId>296</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>132</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00235</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of SWS_LinSM_00307, the LinSM shall start the silence-after-wakeup timer with value 
        given by configuration parameter LinSMSilenceAfterWakeupTimeout.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_MainFunction.c_338</srcid><srcstatus/><internalId>365</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SILENCE_AFTER_WU_NOCONF</srcid><srcstatus/><internalId>570</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SILENCE_AFTER_WU_NOK</srcid><srcstatus/><internalId>571</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>133</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00236</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the silence-after-wakeup timout has occurred, and the requested communication mode by ComM 
        module is COMM_FULL_COMMUNICATION, the LinSM shall restart the wakeup process.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_MainFunction.c_317</srcid><srcstatus/><internalId>364</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SILENCE_AFTER_WU_NOCONF</srcid><srcstatus/><internalId>570</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SILENCE_AFTER_WU_NOK</srcid><srcstatus/><internalId>571</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>134</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00237</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the silence-after-wakeup timer is running and the ComM requests COMM_FULL_COMMUNICATION, the 
        LinSM shall delay the call of LinIf_Wakeup until the silence-after-wakeup timer has timed out.
        see also SWS_LinSM_00047)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_RequestComMode.c_535</srcid><srcstatus/><internalId>379</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SILENCE_AFTER_WU_NOCONF</srcid><srcstatus/><internalId>570</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SILENCE_AFTER_WU_NOK</srcid><srcstatus/><internalId>571</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>135</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00239</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the network parameter has an invalid value, then the 
        error-code LINSM_E_NONEXISTENT_NETWORK shall be reported to the DET module.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepIndication.c_64</srcid><srcstatus/><internalId>353</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_GOTOSLEEPINDICATIONDET</srcid><srcstatus/><internalId>562</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>136</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00240</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: If the state LINSM_UNINIT is active, then the error-code 
        LINSM_E_UNINIT shall be reported to DET module.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepIndication.c_57</srcid><srcstatus/><internalId>352</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_GOTOSLEEPINDICATIONDET</srcid><srcstatus/><internalId>562</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>137</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00241</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function LinSM_ScheduleRequest is only available if the LinSM module is configured as LIN 
        master node on at least one channel. In a pure LIN slave configuration, this function is not 
        available. This depends on the configuration parameters LinSMNodeType.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_ScheduleRequest.c_9</srcid><srcstatus/><internalId>383</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_MANDATORY_INTERFACES</srcid><srcstatus/><internalId>466</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>138</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00242</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The callback function LinSM_ScheduleRequestConfirmation is only available if the LinSM module 
        is configured as LIN master node on at least one channel. In a pure LIN slave configuration, 
        this function is not available. This depends on the configuration parameters LinSMNodeType.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_ScheduleRequestConfirmation.c_9</srcid><srcstatus/><internalId>387</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_MANDATORY_INTERFACES</srcid><srcstatus/><internalId>466</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>139</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00243</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        The callback function LinSM_GotoSleepIndication is only available if the LinSM module is 
        configured as LIN slave node on at least one channel. In a pure LIN master configuration, this 
        function is not available. This depends on the configuration parameters LinSMNodeType.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepIndication.c_20</srcid><srcstatus/><internalId>348</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQ_IND_REQ_CONF</srcid><srcstatus/><internalId>564</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>140</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_91000</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | LinSM_GotoSleepIndication 
        Syntax 
        void LinSM_GotoSleepIndication (NetworkHandleType Channel)
        Service ID [hex] | 0x03 
        Sync/Async | Synchronous 
        Reentrancy | Reentrant 
        Parameters (in) | Channel | Identification of the LIN channel 
        Parameters (inout) | None 
        Parameters (out) | None 
        Return value | None 
        Description | The LinIf will call this callback when the go to sleep command is received on the 
        network or a bus idle timeout occurs. Only applicable for LIN slave nodes.
        Available via | LinSM.h 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.CbkHeaderExport</srcid><srcstatus/><internalId>292</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.SWS_LinSM_91000_EB</srcid><srcstatus/><internalId>251</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>141</internalId></specobject>
    <specobject>
      <id>LinSM.ECUC_LinSM_00209</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_R20-11.arxml</source>
      <version>1</version>
      <description>
        See"LinSM_x_Module"
        Module Name | LinSM 
        Module Description | Configuration of the Lin State Manager module.
        Post-Build Variant Support | true 
        Supported Config Variants | VARIANT-LINK-TIME, VARIANT-POST-BUILD, VARIANT-PRE-COMPILE 
        Included containers: "LinSM_x_Included_Containers"
        Included Containers 
        Container Name | Multiplicity | Scope / Dependency 
        LinSMConfigSet | 1 | This container contains the configuration parameters and sub containers of 
        the AUTOSAR LinSm module.
        LinSMGeneral | 1 | This container contains general parameters of LIN State Manager module.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.OnlyPreCompileSupported</srcid><srcstatus/><internalId>297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>142</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>LinSM.ASR40.ECUC_LinSM_00143</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>Name LinSMSleepSupport {LINSM_SLEEP_SUPPORT} Description Some LIN clusters does not need sleep, they will just shut off. This parameter will affect the behavior to achieve the no communication state. Multiplicity 1 Type EcucBooleanParamDef Default value -ConfigurationClass Pre-compile time X VARIANT-PRE-COMPILE Link time X VARIANT-LINK-TIME, VARIANT-POST BUILD Post-build time -Scope / Dependency scope: Module</description>
      <comment>&lt;pre&gt;This is a configuration parameter requirement without functional specification.&lt;/pre&gt;</comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30035</srcid><srcstatus/><internalId>472</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>143</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        A c-file LinSM_Lcfg.c shall exist and contain all link time configurable parameters
      </description>
      <comment>
        &lt;pre&gt;The implementation only supports pre-compile time configuration.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ConfigVariant</srcid><srcstatus/><internalId>288</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>144</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>A LinSM implementation shall provide a header file LinSM_Cbk.h that contains function declarations for the callback functions in the LinSM.</description>
      <comment>&lt;pre&gt;API functions: LinSM_ScheduleRequestConfirmation, LinSM_GotoSleepConfirmation, LinSM_WakeupConfirmation&lt;/pre&gt;</comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_CBK_FCT</srcid><srcstatus/><internalId>469</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>145</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00007</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>&lt;pre&gt;A header file LinSM_Cfg.h shall exist that contains the pre compile time parameters.&lt;/pre&gt;</description>
      <comment>&lt;pre&gt;Applicable to all config parameters in container LinSMGeneral&lt;/pre&gt;</comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_PRECOMPILE_CFG</srcid><srcstatus/><internalId>561</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>146</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00012</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>&lt;pre&gt;The LinSM module shall include the LinIf.h file.&lt;/pre&gt;</description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/LinSM_Api.h_21</srcid><srcstatus/><internalId>321</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>147</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00014</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>&lt;pre&gt;The LinSM module shall include the MemMap.h file.&lt;/pre&gt;</description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/LinSM_Cfg.h.m4_137</srcid><srcstatus/><internalId>304</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/LinSM_Cfg.h.m4_143</srcid><srcstatus/><internalId>305</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/LinSM_InternalCfg.h_588</srcid><srcstatus/><internalId>307</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/LinSM_InternalCfg.h_594</srcid><srcstatus/><internalId>308</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/LinSM_InternalCfg.h_599</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/LinSM_InternalCfg.h_605</srcid><srcstatus/><internalId>310</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/LinSM_InternalCfg.h_612</srcid><srcstatus/><internalId>311</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/LinSM_InternalCfg.h_627</srcid><srcstatus/><internalId>312</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/src/LinSM_Cfg.c_61</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/src/LinSM_Cfg.c_111</srcid><srcstatus/><internalId>315</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/src/LinSM_Cfg.c_116</srcid><srcstatus/><internalId>316</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/src/LinSM_Cfg.c_122</srcid><srcstatus/><internalId>317</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/src/LinSM_Cfg.c_129</srcid><srcstatus/><internalId>318</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/src/LinSM_Cfg.c_151</srcid><srcstatus/><internalId>319</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/LinSM_Api.h_265</srcid><srcstatus/><internalId>323</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/LinSM_Api.h_406</srcid><srcstatus/><internalId>324</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/LinSM_Cbk.h_24</srcid><srcstatus/><internalId>325</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/LinSM_Cbk.h_115</srcid><srcstatus/><internalId>326</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/LinSM_Internal.h.m4_97</srcid><srcstatus/><internalId>328</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/LinSM_Internal.h.m4_103</srcid><srcstatus/><internalId>329</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/LinSM_Internal.h.m4_108</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/LinSM_Internal.h.m4_139</srcid><srcstatus/><internalId>331</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM.c.m4_27</srcid><srcstatus/><internalId>334</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM.c.m4_32</srcid><srcstatus/><internalId>335</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_GetCurrentComMode.c_25</srcid><srcstatus/><internalId>336</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_GetCurrentComMode.c_96</srcid><srcstatus/><internalId>337</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_GetVersionInfo.c_25</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_GetVersionInfo.c_57</srcid><srcstatus/><internalId>339</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepConfirmation.c_26</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepConfirmation.c_58</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepConfirmation.c_69</srcid><srcstatus/><internalId>343</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepConfirmation.c_161</srcid><srcstatus/><internalId>345</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepConfirmation.c_166</srcid><srcstatus/><internalId>346</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepConfirmation.c_255</srcid><srcstatus/><internalId>347</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepIndication.c_42</srcid><srcstatus/><internalId>350</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepIndication.c_96</srcid><srcstatus/><internalId>356</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_Init.c_35</srcid><srcstatus/><internalId>357</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_Init.c_85</srcid><srcstatus/><internalId>359</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_MainFunction.c_25</srcid><srcstatus/><internalId>360</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_MainFunction.c_407</srcid><srcstatus/><internalId>369</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_RequestComMode.c_53</srcid><srcstatus/><internalId>370</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_RequestComMode.c_590</srcid><srcstatus/><internalId>382</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_ScheduleRequest.c_28</srcid><srcstatus/><internalId>384</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_ScheduleRequest.c_132</srcid><srcstatus/><internalId>386</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_ScheduleRequestConfirmation.c_30</srcid><srcstatus/><internalId>388</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_ScheduleRequestConfirmation.c_99</srcid><srcstatus/><internalId>389</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_WakeupConfirmation.c_37</srcid><srcstatus/><internalId>390</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_WakeupConfirmation.c_128</srcid><srcstatus/><internalId>392</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>148</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00015</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>2</version>
      <description>
        The LinSM module shall include the Det.h file in case LinSMDevErrorDetect is enabled
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.SWS_LinSM_00015_1</srcid><srcstatus/><internalId>272</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>149</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00016</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>&lt;pre&gt;The LinSM module shall include the ComStack_Types.h&lt;/pre&gt;</description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/LinSM.h_8</srcid><srcstatus/><internalId>320</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>150</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00035</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        The LinSM module may only call LinIf_GotoSleep API in LinIf when the state LINSM_FULL_COM is 
        active, E_NOT_OK is returned otherwise.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.SWS_LinSM_00035_EB</srcid><srcstatus/><internalId>244</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ComMHarmonization</srcid><srcstatus/><internalId>291</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>151</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00044</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        After the ComM module requests COMM_NO_COMMUNICATION, the LinSM module shall return E_NOT_OK 
        for any requests for the same network until the LinIf notifies or request timer has elapsed.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ComMHarmonization</srcid><srcstatus/><internalId>291</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>152</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00045</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>After the LinIf module notifies that the goto-sleep command was sent successfully (success = true) on the bus, the sub-state LINSM_NO_COM shall be set.</description>
      <comment>'LinIf module notifies that the goto-sleep command was sent successfully' meaning that LinSM_GotoSleepConfirmation(success=true) was sent before a confirmation timeout occured.</comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30150</srcid><srcstatus/><internalId>587</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00046</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        The sub-state LINSM_FULL_COM for the specific network shall be set, after the LinIf module 
        notifies that the goto-sleep command was NOT sent successfully (success = false) on the bus.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQCOM_NOCOM_FALSE</srcid><srcstatus/><internalId>583</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00053</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        Type or error | Relevance | Related error code | Value [hex]
        API called without initialization of LinSM | Development | LINSM_E_UNINIT | 0x00 
        Referenced network does not exist (identification is out of range) | Development | 
        LINSM_E_NONEXISTENT_NETWORK | 0x20 
        API service called with wrong parameter | Development | LINSM_E_PARAMETER | 0x30 
        API service called with invalid pointer | Development | LINSM_E_PARAMETER_POINTER | 0x40 
        Timeout of the callbacks from LinIf | Development | LINSM_E_CONFIRMATION_TIMEOUT | 0x50 
        Table 1 - Error codes for DET and DEM
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.LINSM053_LINSM_E_UNINIT</srcid><srcstatus/><internalId>265</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM053_LINSM_E_NONEXISTENT_NETWORK</srcid><srcstatus/><internalId>266</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM053_LINSM_E_PARAMETER</srcid><srcstatus/><internalId>267</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM053_LINSM_E_PARAMETER_POINTER</srcid><srcstatus/><internalId>268</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM053_LINSM_E_CONFIRMATION_TIMEOUT</srcid><srcstatus/><internalId>269</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00054</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>The detection of development errors is configurable (ON / OFF) at precompile time. The switch LinSMDevErrorDetect (see chapter 10) shall activate or deactivate the detection of all development errors.</description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30031</srcid><srcstatus/><internalId>463</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30032</srcid><srcstatus/><internalId>467</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30036</srcid><srcstatus/><internalId>473</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00055</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>If the LinSMDevErrorDetect switch is enabled, API parameter checking is enabled. The detailed description of the detected errors can be found in chapter 7.3 and chapter 8.</description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ_NONEXCHANNEL</srcid><srcstatus/><internalId>501</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_CURMOD_NONEX_CHANNEL</srcid><srcstatus/><internalId>514</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQCOM_NONEX_CHANNEL</srcid><srcstatus/><internalId>515</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKECONF_NONEXCHANNEL</srcid><srcstatus/><internalId>516</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SLEEPCONF_NONEXCHANNEL</srcid><srcstatus/><internalId>517</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCHREQCONF_NONEXCHANNEL</srcid><srcstatus/><internalId>518</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GETVER_NULLPTR</srcid><srcstatus/><internalId>521</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GETCURCOMMODE_NULLPTR</srcid><srcstatus/><internalId>522</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQCOM_SILENT</srcid><srcstatus/><internalId>523</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQCOM_MODEINVALID</srcid><srcstatus/><internalId>524</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>157</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00057</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>Detected development errors will be reported to the Det_ReportError API of the Development Error Tracer (DET) [5] module if the pre-processor switch LinSMDevErrorDetect is set (see paragraph 10).</description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.SWS_LinSM_00114</srcid><srcstatus/><internalId>47</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_00115</srcid><srcstatus/><internalId>48</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_00116</srcid><srcstatus/><internalId>49</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_00123</srcid><srcstatus/><internalId>53</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_00125</srcid><srcstatus/><internalId>55</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_00127</srcid><srcstatus/><internalId>57</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_00130</srcid><srcstatus/><internalId>60</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_00131</srcid><srcstatus/><internalId>61</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_00133</srcid><srcstatus/><internalId>63</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_00134</srcid><srcstatus/><internalId>64</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_00136</srcid><srcstatus/><internalId>66</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_00137</srcid><srcstatus/><internalId>67</internalId></linkedfrom><linkedfrom><srcid>LinSM.SWS_LinSM_00191</srcid><srcstatus/><internalId>94</internalId></linkedfrom><linkedfrom><srcid>LinSM.EB.LINSM0211_EB</srcid><srcstatus/><internalId>246</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM102.Wakeup</srcid><srcstatus/><internalId>253</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM102.Sleep</srcid><srcstatus/><internalId>254</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM102.Schedule</srcid><srcstatus/><internalId>255</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.swurs.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>158</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00078</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>&lt;pre&gt;A c-file LinSM_Cfg.c shall exist and contain all pre compile parameters that are "const".&lt;/pre&gt;</description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/LinSM_Cfg.c_3</srcid><srcstatus/><internalId>313</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>159</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00118</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>The LinSM_GetVersionInfo function shall return the version information of this module. The version information includes: - Module Id [2] - Vendor Id - Vendor specific version numbers (BSW00407 [3])</description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30087</srcid><srcstatus/><internalId>554</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>160</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00121</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>&lt;pre&gt;This function shall be pre compile time configurable On/Off by the configuration parameter: LinSMVersionInfoApi.&lt;/pre&gt;</description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30031</srcid><srcstatus/><internalId>463</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30032</srcid><srcstatus/><internalId>467</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30034</srcid><srcstatus/><internalId>468</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30036</srcid><srcstatus/><internalId>473</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>161</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00165</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>&lt;pre&gt;It shall be possible to call this function at any time (e.g. before the init function is called).&lt;/pre&gt;</description>
      <comment>&lt;pre&gt;LinSM_GetVersionInfo&lt;/pre&gt;</comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_GETVER_UNINIT</srcid><srcstatus/><internalId>489</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>162</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00174</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>2</version>
      <description>If the function LinSM_RequestComMode is called and another request is in process on the same network, the LinSM_RequestComMode shall drop the old and process the new request.</description>
      <comment>&lt;pre&gt;If another LinSM_RequestComMode is already in process or a mode request was stored and is processed.&lt;/pre&gt;</comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQCOM</srcid><srcstatus/><internalId>511</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQCOMMODE_WHILE_STORED_MODE_IS_PROCESSED</srcid><srcstatus/><internalId>535</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>163</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00179</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        If LinSMDevErrorDetect is enabled: The function LinSM_MainFunction shall raise the error 
        LINSM_E_UNINIT when the state LINSM_UNINIT is active.
      </description>
      <comment>
        In order to reduce startup issues, all main functions shall allow being called before initialization. In this case they shall not perform any actions (compare new requirement LinSM.ASR40.BSW00450).
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.MainFunction</srcid><srcstatus/><internalId>283</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>164</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00184</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        Each variable that shall be accessible by AUTOSAR Debugging, shall be defined as global 
        variable.
      </description>
      <comment>
        &lt;pre&gt;The implementation does not support the debugging mechanisms as described in the SWS specification&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.AutosarDebugging</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>165</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00185</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        All type definitions of variables which shall be debugged, shall be accessible by the header 
        file LinSM.h.
      </description>
      <comment>
        &lt;pre&gt;The implementation does not support the debugging mechanisms as described in the SWS specification&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.AutosarDebugging</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>166</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00186</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        The declaration of variables in the header file shall be such, that it is possible to calculate 
        the size of the variables by C-"sizeof"
      </description>
      <comment>
        &lt;pre&gt;The implementation does not support the debugging mechanisms as described in the SWS specification&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.AutosarDebugging</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>167</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00187</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        Variables available for debugging shall be described in the respective Basic Software Module 
        Description
      </description>
      <comment>
        &lt;pre&gt;The implementation does not support the debugging mechanisms as described in the SWS specification&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.AutosarDebugging</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>168</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00188</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        The state of the state-machine (LINSM_UNINIT and LINSM_INIT) shall be accessible for debugging.
      </description>
      <comment>
        &lt;pre&gt;The implementation does not support the debugging mechanisms as described in the SWS specification&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.AutosarDebugging</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>169</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00189</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        The state of the sub-state-machine (LINSM_NO_COM and LINSM_FULL_COM) shall be accessible for 
        debugging.
      </description>
      <comment>
        &lt;pre&gt;The implementation does not support the debugging mechanisms as described in the SWS specification&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.AutosarDebugging</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>170</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00195</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>&lt;pre&gt;The LinSM implementation shall include the header file SchM_LinSM.h&lt;/pre&gt;</description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/LinSM_Internal.h.m4_13</srcid><srcstatus/><internalId>327</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>171</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00198</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        The LinSM_WakeupConfirmation shall be configurable.
      </description>
      <comment>
        &lt;pre&gt;see Deviation: Some API functions are not configurable&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ApiNotConfigurable</srcid><srcstatus/><internalId>286</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>172</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00199</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        The LinSM_GotoSleepConfirmation shall be configurable.
      </description>
      <comment>
        &lt;pre&gt;see Deviation: Some API functions are not configurable&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ApiNotConfigurable</srcid><srcstatus/><internalId>286</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>173</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00200</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        Additional errors that are detected because of specific implementation and/or specific hardware 
        properties shall be added in the module's implementation documentation. The classification and 
        enumeration shall be compatible to the errors listed above
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.EB.UnexpectedCallout</srcid><srcstatus/><internalId>184</internalId></linkedfrom><linkedfrom><srcid>LinSM.EB.ScheduleRequest_OfflineDet</srcid><srcstatus/><internalId>185</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>174</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00209</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        The LinSM module shall perform inter module checks to avoid integration of incompatible files. 
        The imported header files shall be checked by preprocessing directives. The following version 
        numbers shall be verified:
        MODULENAME&gt;_AR_RELEASE_MAJOR_VERSION
        MODULENAME&gt;_AR_RELEASE_MINOR_VERSION
        where &lt;MODULENAME&gt; is the module short name of the other (external) modules which provide 
        header files included by the LinSM module. If the values are not identical to the expected 
        values, an error shall be reported.
      </description>
      <comment>
        &lt;pre&gt;The EB implementation won't perform intermodule checks. This was agreed in the EB guideline BSWM_CHK_401.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.InterModVerChk</srcid><srcstatus/><internalId>284</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>175</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00210</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>The standardized common published parameters as required by BSW00402 in the General Requirements on Basic Software Modules [3] shall be published within the header file of this module and need to be provided in the BSW Module Description. The according module abbreviation can be found in the List of Basic Software Modules [1].</description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/LinSM_Version.h.m4_1</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/LinSM_Bswmd.arxml.m4_245</srcid><srcstatus/><internalId>401</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>176</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00217</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        In case of a post-build variant and if LinSMDevErrorDetect is enabled: If the ConfigPtr pointer 
        parameter is invalid (e.g. NULL), the error code LINSM_E_PARAMETER_POINTER shall be reported to 
        the DET module.
      </description>
      <comment>
        &lt;pre&gt;Post-build configuration is not supported.&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ConfigVariant</srcid><srcstatus/><internalId>288</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>177</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00218</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        In case of a pre-compile or link-time variant and if LinSMDevErrorDetect is enabled: If the 
        ConfigPtr pointer parameter is not NULL, the error-code LINSM_E_PARAMETER_POINTER shall be 
        reported to the DET module.
      </description>
      <comment>
        This requirement is replaced by LinSM.ASR40.LINSM0218_EB. This requirement prevents EcuM from initializing all modules in a uniform way by calling them with a pointer to a default post-build configuration structure.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.InitPtr</srcid><srcstatus/><internalId>281</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>178</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_10210</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LinSM_4_0_3.xml</source>
      <version>1</version>
      <description>
        If the requested mode is the same as the current active mode, the function shall return 
        E_NOT_OK directly without action.
      </description>
      <comment>
        &lt;pre&gt;when calling LinSM_RequestComMode&lt;/pre&gt;
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.LinSM.ComMHarmonization</srcid><srcstatus/><internalId>291</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.EB.LINSM0210</srcid><srcstatus/><internalId>188</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>179</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.BSW00450</id>
      <status>approved</status>
      <source>AUTOSAR_SRS_BSWGeneral.pdf, V3.1.4</source>
      <version>1</version>
      <description>If a main function of an un-initialized module is called from the BSW Scheduler, then it shall return immediately without performing any functionality and without raising any errors.</description>
      <comment>&lt;pre&gt;Source: AUTOSAR_SRS_BSWGeneral.pdf, requirement BSW00450.&lt;/pre&gt;</comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_MAIN_FUNCT_UNINIT</srcid><srcstatus/><internalId>596</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>180</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>LinSM.EB.BSWMDGeneration_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      The LinSM module's generator shall generate a basic software
      module description (BSWMD) based on the LinSM module's
      configuration containing information on the exclusive areas
      required by the LinSM module's implementation.
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LinSM_SCHM</srcid><srcstatus/><internalId>471</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>181</internalId></specobject>
    <specobject>
      <id>LinSM.EB.BSWMDGeneration_2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      The LinSM module's generator shall generate a basic software
      module description (BSWMD) based on the LinSM module's
      configuration containing information on the scheduled
      MainFunctions together with the scheduling period.
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LinSM_SCHM</srcid><srcstatus/><internalId>471</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>182</internalId></specobject>
    <specobject>
      <id>LinSM.EB.BSWMDGeneration_3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      The LinSM module's BSWMD shall be generated using a generator
      mode named "generate_swcd".
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LinSM_SCHM</srcid><srcstatus/><internalId>471</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>183</internalId></specobject>
    <specobject>
      <id>LinSM.EB.UnexpectedCallout</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      To ensure proper operation, the current channel state will be checked by the confirmation 
      functions and no state change will be performed if the current state is not as expected.
      In this case, the vendor-specific DET error code LINSM_E_UNEXPECTED_CALLOUT (0x60) shall 
      be reported to DET.
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30075</srcid><srcstatus/><internalId>552</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40016</srcid><srcstatus/><internalId>598</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40025</srcid><srcstatus/><internalId>599</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40026</srcid><srcstatus/><internalId>600</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCH_REQ_CONF_NO_COM</srcid><srcstatus/><internalId>605</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCH_REQ_CONF_WAKEUP</srcid><srcstatus/><internalId>606</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCH_REQ_CONF_SLEEP</srcid><srcstatus/><internalId>607</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTOSLEEP_CONF_UNINIT</srcid><srcstatus/><internalId>608</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTOSLEEP_CONF_WAKEUP</srcid><srcstatus/><internalId>609</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTOSLEEP_CONF_FULL_COM</srcid><srcstatus/><internalId>610</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>184</internalId></specobject>
    <specobject>
      <id>LinSM.EB.ScheduleRequest_OfflineDet</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      If Development Error Detection is enabled, LinSM_ScheduleRequest shall report the vendor specific error
      code LINSM_E_NOT_IN_RUN_SCHEDULE with value 0x51 if the specified channel is not in sub-state FULL_COM.
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCH_REQ_IN_NOCOM</srcid><srcstatus/><internalId>597</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
        <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>185</internalId></specobject>
    <specobject>
      <id>LinSM.EB.ScheduleRequestActiveTable</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      If the previously requested and successfully confirmed schedule table is requested again by a 
      call to LinSM_ScheduleRequest:
      - LinIf_Schedulerequest shall be called
      - Timeout observation shall be started
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCH_REQ_ACTIVE_SCHEDULE</srcid><srcstatus/><internalId>540</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCH_REQ_CONF_TIMEOUT_0</srcid><srcstatus/><internalId>544</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>186</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LINSM044</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      After the ComM module requests COMM_NO_COMMUNICATION, the LinSM module shall return 
      E_OK for any other LinSM_RequestComMode calls for the same network.
    &lt;/pre&gt;</description>
      <comment>&lt;pre&gt;
      LinIf_Wakeup() will be called for the case when FULL_COMM is requested.
      Nothing will be called for the case when NO_COM is requested.
    &lt;/pre&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQ_FULLCOM_IN_GOTOSLEEP_STATE</srcid><srcstatus/><internalId>528</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>187</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LINSM0210</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      If the requested mode is the same as the current active mode, the
      function shall return E_OK directly without action.
    &lt;/pre&gt;</description>
      <comment>&lt;pre&gt; when calling LinSM_RequestComMode &lt;/pre&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQ_NOCOMM</srcid><srcstatus/><internalId>502</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQ_NOCOMM_FALSE</srcid><srcstatus/><internalId>503</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_FULLCOM_NOCOMM_FALSE</srcid><srcstatus/><internalId>504</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQSAMECOM</srcid><srcstatus/><internalId>512</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_10210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>188</internalId></specobject>
    <specobject>
      <id>LinSM.EB.ConfigCheck1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      If a 1:1 relation between LinIf channels and LinSM channels is not  respected,
      an error will be reported.
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01001_Err_LinSM_Channels_Same_ComM</srcid><srcstatus/><internalId>475</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>189</internalId></specobject>
    <specobject>
      <id>LinSM.EB.ConfigCheck2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      If LinSMScheduleIndexRef does not reference a valid LinIfScheduleTable, 
      an error will be reported.
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01002_Err_LinSM_ScheduleIndexRef_Empty</srcid><srcstatus/><internalId>476</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>190</internalId></specobject>
    <specobject>
      <id>LinSM.EB.ConfigCheck3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      If the LinIfScheduleTableIndex provided by LinIfScheduleTable is not valid, 
      an error will be reported.
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01006_LinIfScheduleTableIndex_Empty</srcid><srcstatus/><internalId>480</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>191</internalId></specobject>
    <specobject>
      <id>LinSM.EB.ConfigCheck4</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      If a 1:1 relation between LinIf and LinSM schedule tables is not respected,
      an error will be reported.
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01003_Err_Schedule_Referenced_More_Than_Once</srcid><srcstatus/><internalId>477</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>192</internalId></specobject>
    <specobject>
      <id>LinSM.EB.ConfigCheck5</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      If the LinIfScheduleTableIndex provided by LinIfScheduleTable has a value greater than 255,
      an error will be reported.
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01005_LinIfScheduleTableIndex_Greater_Than_255</srcid><srcstatus/><internalId>479</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>193</internalId></specobject>
    <specobject>
      <id>LinSM.EB.ConfigCheck6</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      If the LinIfScheduleTable referenced does not belong to the LinIfChannel associated through 
      the LinSMComMNetworkHandleRef reference, an error will be reported.
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01004_Schedule_Channel_Missmatch</srcid><srcstatus/><internalId>478</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>194</internalId></specobject>
    <specobject>
      <id>LinSM.EB.ConfigCheck7</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      If LinSMTransceiverPassiveMode is ENABLED and configured as FALSE, LinSMSleepSupport has to
      be ENABLED as well.
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01007_Sleep_Support_Conflict</srcid><srcstatus/><internalId>481</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>195</internalId></specobject>
    <specobject>
      <id>LinSM.EB.ConfigCheck8</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      If LinSMScheduleIndex is configured with the value 0, the name of the schedule has
      to be NULL_SCHEDULE.
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01008_LinSMScheduleIndex_0_Name_NOK</srcid><srcstatus/><internalId>482</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>196</internalId></specobject>
    <specobject>
      <id>LinSM.EB.ConfigCheck9</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      If a LinSMSchedule has the name NULL_SCHEDULE, the associated LinSMScheduleIndex has to be 0.
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01009_NULL_SCHEDULE_Index_NOK</srcid><srcstatus/><internalId>483</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>197</internalId></specobject>
    <specobject>
      <id>LinSM.EB.ConfigCheck10</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      A LinSM schedule table has to have a unique name.
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01010_Err_Schedule_Name_Not_Unique</srcid><srcstatus/><internalId>484</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>198</internalId></specobject>
    <specobject>
      <id>LinSM.EB.ScheduleRequestOngoingTransition</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      If the function LinSM_ScheduleRequest() is called after LinIf_GotoSleep() returns E_NOT_OK, 
      LinSM_ScheduleRequest() shall reject the request and return E_NOT_OK if the maximum number 
      of retries (LinSMModeRequestRepetitionMax) has not been reached.
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ_MODCHANGE_2</srcid><srcstatus/><internalId>527</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>199</internalId></specobject>
    <specobject>
      <id>LinSM.EB.SchM_Call_ModeIndication</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;
      If MultiCore Support is enabled for LinSM, then LinSM will call
      SchM_Call_LinSM_RequiredCSEntry_ComM_BusSM_ModeIndication_[network_short_name] instead of 
      ComM_BusSM_ModeIndication.
    &lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCH_REQ_CONF</srcid><srcstatus/><internalId>498</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_FULLCOM_NOCOMM_FALSE</srcid><srcstatus/><internalId>504</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQ_NOCOM_SLEEP_FALSE</srcid><srcstatus/><internalId>505</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQ_FULLCOMM_FALSE</srcid><srcstatus/><internalId>506</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQCOMM_FALSE</srcid><srcstatus/><internalId>507</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCHREQ</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQFULLCOM</srcid><srcstatus/><internalId>509</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKEUP_AND_WAKEUPCONF_SAME_CONTEXT</srcid><srcstatus/><internalId>510</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQCOM</srcid><srcstatus/><internalId>511</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQSAMECOM</srcid><srcstatus/><internalId>512</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCHREQ_ACTIVE_REQ</srcid><srcstatus/><internalId>513</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTO_SLEEP</srcid><srcstatus/><internalId>525</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCHREQ_MODCHANGE</srcid><srcstatus/><internalId>526</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCHREQ_MODCHANGE_2</srcid><srcstatus/><internalId>527</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQ_FULLCOM_IN_GOTOSLEEP_STATE</srcid><srcstatus/><internalId>528</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKEUP_CONF</srcid><srcstatus/><internalId>529</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SLEEP_SCHEDULE_TIMEOUT</srcid><srcstatus/><internalId>531</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SLEEP_NOTOK</srcid><srcstatus/><internalId>532</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SLEEP_NOTOK_REP_0</srcid><srcstatus/><internalId>533</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKEUP_GOTOSLEEP_NOK</srcid><srcstatus/><internalId>536</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_TIMER_NETW_INDEPENDENT</srcid><srcstatus/><internalId>539</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCH_REQ_ACTIVE_SCHEDULE</srcid><srcstatus/><internalId>540</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTOSLEEP_REPETITION</srcid><srcstatus/><internalId>542</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTO_SLEEP_TIMEOUT</srcid><srcstatus/><internalId>543</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>200</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00201_EB</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;The LinSM module shall include the BswM_LinSM.h&lt;/pre&gt;</description>
      <comment>&lt;pre&gt;This requirement replaces LinSM.ASR40.SWS_LinSM_00201. See Bugzilla RfC #52381&lt;/pre&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepConfirmation.c_18</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepIndication.c_22</srcid><srcstatus/><internalId>349</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>201</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM049_EB</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If LinSM_RequestComMode(FULL_COM) is called and LinSMSleepSupport is false, the mode shall be set to LINSM_FULL_COM and BswM/ComM shall be notified of the mode change.</description>
      <comment>&lt;pre&gt;Requirement was added according to Bugzilla RfC #52247&lt;/pre&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQCOMM_FALSE</srcid><srcstatus/><internalId>507</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>202</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM0202_EB</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>If LinSM_WakeupConfirmation is called with argument success = false, no action shall be taken and BswM and ComM shall not be notified.</description>
      <comment>&lt;pre&gt;The statemachine for the network shall be set to state LINSM_NO_COM.&lt;/pre&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_MAINFCT_TIMER</srcid><srcstatus/><internalId>604</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>203</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM0218_EB</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>C:/Projects/TEST_TRACING/asc_LinSM/doc/project/requirements/AUTOSAR_SWS_LINStateManager.xml</sourcefile>
      <sourceline>1334</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;LinSM_Init shall ignore the value of the ConfigPtr pointer parameter.&lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_Init.c_45</srcid><srcstatus/><internalId>358</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_INIT_NULLPTR</srcid><srcstatus/><internalId>519</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_INIT_PARAM_NONNULL</srcid><srcstatus/><internalId>520</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>204</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LINSM_ScheduleRequestConfirmation_NullSchedule</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If LinIf signals switching to NULL_SCHEDULE during initialization or after a goto sleep request, DET will not be called, only BswM(CurrentSchedule)</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCH_REQ_CONF</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>205</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LINSM_Arbitrary_Mapping_Channels</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>For any request issued by ComM, that configured LinSM channel shall be used which references the ComM channel with the corresponding ComMChannelId.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_NETWORKS</srcid><srcstatus/><internalId>560</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>206</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LINSM_Mandatory_Interfaces</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>The LinSM module expects service primitives from the BswM, ComM and LinIf, as presented in AUTOSAR_SWS_LINStateManager.pdf chapter 8.6.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_MANDATORY_INTERFACES</srcid><srcstatus/><internalId>466</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>207</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LINSM_ScheduleRequestOnlyOnMasterNodes</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>The LinSM nodes that are configured as SLAVE shall not accept schedule requests, so LinSM_ScheduleRequest shall return E_NOT_OK for those nodes.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_ScheduleRequest.c_58</srcid><srcstatus/><internalId>385</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_NO_SCHEDULE_ON_SLAVE</srcid><srcstatus/><internalId>563</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>208</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LINSM_ComMNmVariantSlaveNode</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>The LinSM nodes that are configured as SLAVE shall reference a ComM channel that has ComMNmVariant configured as SLAVE_ACTIVE.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/LinSM_Extension.xdm.m4_330</srcid><srcstatus/><internalId>396</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01011_Err_Slave_ComMNmVar</srcid><srcstatus/><internalId>485</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>209</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LINSM_SleepSupportSlaveNode</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>The LinSM nodes that are configured as SLAVE shall support sleep (LinSMSleepSupport).</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/LinSM_Extension.xdm.m4_333</srcid><srcstatus/><internalId>397</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01012_Err_Slave_SleepSupport</srcid><srcstatus/><internalId>486</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQ_IND_REQ_CONF</srcid><srcstatus/><internalId>564</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>210</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LINSM_SilenceTimeoutValue</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>LinSMSilenceAfterWakeupTimeout after being converted into MainFunction occurences needs to be less than 65535.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/LinSM_Extension.xdm.m4_369</srcid><srcstatus/><internalId>399</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01013_Err_Slave_SilenceTimeoutValue</srcid><srcstatus/><internalId>487</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>211</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM_CBK_H</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>&lt;pre&gt;The function prototypes of the callback functions will be provided in the file LinSM_Cbk.h.&lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_CBK_H</srcid><srcstatus/><internalId>464</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>212</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.ModuleConfig_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>Module Name: LinSM Module Description: Configuration of the LIN State Manager module. Included Containers: - LinSMGeneral, 1 - LinSMConfigSet, 1</description>
      <comment>&lt;pre&gt;This is a configuration parameter requirement without functional specification.&lt;/pre&gt;</comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>213</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM_ScheduleRequest_Pending</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If LinSM_ScheduleRequest() is pending and NO_COM is requested, LinSM_RequestComMode will return E_OK and LinIf_GotoSleep() will be called.</description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>LinSM.ASR40.LINSM_ScheduleRequest_Pending_01</srcid><srcstatus/><internalId>233</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM_ScheduleRequest_Pending_02</srcid><srcstatus/><internalId>234</internalId></linkedfrom><linkedfrom><srcid>LinSM.ASR40.LINSM_ScheduleRequest_Pending_03</srcid><srcstatus/><internalId>235</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>214</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LinSMWakeupAndSleepIndication_Conf</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name LinSMWakeupAndSleepIndication
        Parent Container LinSMChannel
        Parameter Type: Boolean
        Description Notify BswM with LINSM_WAKEUP and LINSM_GOTO_SLEEP states.
        Multiplicity 1
        Default value false
        Value Configuration Class Pre-compile time X  VARIANT-PRE-COMPILE
                                  Link time        --
                                  Post-build time  --
        Scope / Dependency scope: local
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/LinSM_InternalCfg.h_432</srcid><srcstatus/><internalId>306</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_BSWM_NOTIFICATION</srcid><srcstatus/><internalId>588</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKEUP_BSWM_NOTIFICATION_TIMEOUT</srcid><srcstatus/><internalId>589</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTO_SLEEP_BSWM_NOTIFICATION_M</srcid><srcstatus/><internalId>590</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTO_SLEEP_BSWM_NOTIFICATION_S</srcid><srcstatus/><internalId>591</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTO_SLEEP_BSWM_NOTIFICATION_S_FALSE</srcid><srcstatus/><internalId>592</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTO_SLEEP_BSWM_NOTIFI_CONFRM_TIME_OUT</srcid><srcstatus/><internalId>593</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_LIN_SM_WAKEUP_SLEEP_IND_DISABLED</srcid><srcstatus/><internalId>594</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>215</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LinSM_BswM_LINSM_WAKEUP_Notification</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
      If LinSMWakeupAndSleepIndication paramter exists and equal true, LinSM shall notify BswM when sub-state
      LINSM_WAKEUP is entered.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_RequestComMode.c_276</srcid><srcstatus/><internalId>372</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_BSWM_NOTIFICATION</srcid><srcstatus/><internalId>588</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>216</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LinSM_BswM_LINSM_WAKEUP_ConfirmationFailure</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
      LinSM shall notify BswM with sub-state LINSM_NO_COM if LinSM_WakeupConfirmation is called
      with success equal FALSE and LinSMWakeupAndSleepIndication paramter exists and equal true.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_WakeupConfirmation.c_108</srcid><srcstatus/><internalId>391</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_BSWM_NOTIFICATION</srcid><srcstatus/><internalId>588</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>217</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LinSM_BswM_LINSM_WAKEUP_LinIfWakepFailure</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
      LinSM shall notify BswM with sub-state LINSM_NO_COM if LinIf_Wakeup() return FALSE,
      and the current state is LINSM_WAKEUP and LinSMWakeupAndSleepIndication paramter exists and equal true.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_RequestComMode.c_316</srcid><srcstatus/><internalId>373</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_BSWM_NOTIFICATION</srcid><srcstatus/><internalId>588</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>218</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LinSM_BswM_LINSM_WAKEUP_ConfirmationTimout</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
      LinSM shall notify BswM with sub-state LINSM_NO_COM if LinSMConfirmationTimeout elapsed,
      and the current state is LINSM_WAKEUP, and LinSMWakeupAndSleepIndication paramter exists and equal true.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_MainFunction.c_207</srcid><srcstatus/><internalId>362</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_MainFunction.c_379</srcid><srcstatus/><internalId>367</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_BSWM_NOTIFICATION_TIMEOUT</srcid><srcstatus/><internalId>589</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>219</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LinSM_BswM_LINSM_GOTO_SLEEP_Notification</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
      If LinSMWakeupAndSleepIndication paramter exists and equal true, LinSM shall notify BswM when sub-state
      LINSM_GOTO_SLEEP is entered.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_RequestComMode.c_353</srcid><srcstatus/><internalId>375</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_GOTO_SLEEP_BSWM_NOTIFICATION_M</srcid><srcstatus/><internalId>590</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTO_SLEEP_BSWM_NOTIFICATION_S</srcid><srcstatus/><internalId>591</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>220</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LinSM_BswM_LINSM_GOTO_SLEEP_ConfirmationFailure</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
      LinSM shall notify BswM with sub-state LINSM_FULL_COM if LinSM_GotoSleepConfirmation is called
      with success equal FALSE and LinSMWakeupAndSleepIndication paramter exists and equal true.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepConfirmation.c_141</srcid><srcstatus/><internalId>344</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_GOTO_SLEEP_BSWM_NOTIFICATION_M</srcid><srcstatus/><internalId>590</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GOTO_SLEEP_BSWM_NOTIFICATION_S_FALSE</srcid><srcstatus/><internalId>592</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>221</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LinSM_BswM_LINSM_GOTO_SLEEP_LinIfGoToSleepFailure</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
      LinSM shall notify BswM with sub-state LINSM_FULL_COM if LinIf_GotoSleep() return FALSE,
      and the current state is LINSM_GOTO_SLEEP and LinSMWakeupAndSleepIndication paramter exists and equal true.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_RequestComMode.c_404</srcid><srcstatus/><internalId>377</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_GOTO_SLEEP_BSWM_NOTIFICATION_M</srcid><srcstatus/><internalId>590</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>222</internalId></specobject>
    <specobject>
      <id>LinSM.EB.LinSM_BswM_LINSM_GOTO_SLEEP_ConfirmationTimout</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
      LinSM shall notify BswM with sub-state LINSM_NO_COM if LinSMConfirmationTimeout elapsed,
      and the current state is LINSM_GOTO_SLEEP, and LinSMWakeupAndSleepIndication paramter exists and equal true.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_MainFunction.c_208</srcid><srcstatus/><internalId>363</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_MainFunction.c_380</srcid><srcstatus/><internalId>368</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_GOTO_SLEEP_BSWM_NOTIFI_CONFRM_TIME_OUT</srcid><srcstatus/><internalId>593</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_LIN_SM_WAKEUP_SLEEP_IND_DISABLED</srcid><srcstatus/><internalId>594</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>223</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>LinSM.SWS_LinSM_10209_UNINIT</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <priority>high</priority>
      <description>
        If LinSM is not initialized, LinSMSleepSupport is true and 
        ComM requests COMM_NO_COMMUNICATION, LinSM will not call LinIf_GotoSleep()
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQNOCOM_UNINIT</srcid><srcstatus/><internalId>491</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_10209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>224</internalId></specobject>

    <specobject>
      <id>LinSM.SWS_LinSM_10209_SLEEP_FALSE</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <priority>high</priority>
      <description>
        If LinSM is not initialized, LinSMSleepSupport is false and 
        ComM requests COMM_NO_COMMUNICATION, LinSM will not call LinIf_GotoSleep()
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQ_NOCOMM_FALSE</srcid><srcstatus/><internalId>503</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_10209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>225</internalId></specobject>

    <specobject>
      <id>LinSM.SWS_LinSM_10209_FULL_SLEEP_FALSE</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <priority>high</priority>
      <description>
        If communication state is FULL COM, LinSMSleepSupport is false and 
        ComM requests COMM_NO_COMMUNICATION, LinSM will not call LinIf_GotoSleep()
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQ_NOCOM_SLEEP_FALSE</srcid><srcstatus/><internalId>505</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_10209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>226</internalId></specobject>

    <specobject>
      <id>LinSM.SWS_LinSM_10209_NOCOMM</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <priority>high</priority>
      <description>
        If LinSM current state is NO_COMMUNICATION, LinSMSleepSupport is true
        and ComM requests COMM_NO_COMMUNICATION, LinSM will not call LinIf_GotoSleep()
      </description>
      <comment> 
        When LinSM gets initialized, it goes into NO_COM state, and after requesting
        COMM_NO_COMMUNICATION, no LinIf_GotoSleep is called
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQ_NOCOMM</srcid><srcstatus/><internalId>502</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_10209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>227</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00178_FULLCOMM</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <priority>high</priority>
      <description>
        If LinSM current state is FULL_COMMUNICATION and ComM requests COMM_FULL_COMMUNICATION,
        LinSM will not call LinIf_Wakeup() and will return E_OK
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQFULLCOM</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>228</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00178_UNINIT</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <priority>high</priority>
      <description>
        If LinSM is not initialized and ComM requests COMM_FULL_COMMUNICATION,
        LinSM will not call LinIf_Wakeup()
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQFULLCOM_UNINIT</srcid><srcstatus/><internalId>492</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>229</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00178_SLEEP_FALSE</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <priority>high</priority>
      <description>
        If LinSM current state is FULL_COMMUNICATION, LinSMSleepSupport is false and 
        ComM requests COMM_FULL_COMMUNICATION, LinSM will not call LinIf_Wakeup(),
        but will return E_OK
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQ_FULLCOMM_FALSE</srcid><srcstatus/><internalId>506</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>230</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00178_SLEEP_FALSE_2</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <priority>high</priority>
      <description>
        If LinSM current state is NO_COMMUNICATION, LinSMSleepSupport is false and 
        ComM requests COMM_FULL_COMMUNICATION, LinSM will not call LinIf_Wakeup(),
        will return E_OK and the state will be changed to FULL_COM
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_FULLCOM_NOCOMM_FALSE</srcid><srcstatus/><internalId>504</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>231</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00175_INDEP</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <priority>high</priority>
      <description>
        Request timers of each network shall be independent of each other
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_TIMER_NETW_INDEPENDENT</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>232</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.LINSM_ScheduleRequest_Pending_01</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <priority>high</priority>
      <description>
        If LinSM_ScheduleRequest() is pending and NO_COM is requested,
        LinSM_RequestComMode will return E_OK, LinIf_GotoSleep() will be called
        and the timer set when LinSM_ScheduleRequest was called will be reset.    
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_MAIN_FCT_HANDLES_TIMERS</srcid><srcstatus/><internalId>601</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM_ScheduleRequest_Pending</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>233</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.LINSM_ScheduleRequest_Pending_02</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <priority>high</priority>
      <description>
        If LinSM_ScheduleRequest() is pending, NO_COM is requested and LinSM_GotoSleepConfirmation()
        is called, no DET will be reported. If LinSM_ScheduleRequestConfirmation() will be called,
        the requested schedule will be reported to BswM and LINSM_E_UNEXPECTED_CALLOUT
        will be reported to DET
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ_PENDING_SLEEP_CONFIRMATION</srcid><srcstatus/><internalId>614</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM_ScheduleRequest_Pending</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>234</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.LINSM_ScheduleRequest_Pending_03</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <priority>high</priority>
      <description>
        If LinSM_ScheduleRequest() is pending, NO_COM is requested and
        LinSM_ScheduleRequestConfirmation() is called the requested schedule
        will be reported to BswM and LINSM_E_UNEXPECTED_CALLOUT will be reported to DET
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ_PENDING_SCHEDULE_CONFIRMATION</srcid><srcstatus/><internalId>617</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM_ScheduleRequest_Pending</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>235</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00138_DET</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>2</version>
      <priority>high</priority>
      <description>
        API function: Det_ReportError
        Description: Service to report development errors.
        This is an optional interface
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30032</srcid><srcstatus/><internalId>467</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00138</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>236</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00138_Trcv_Mode</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>2</version>
      <priority>high</priority>
      <description>
        API function: LinIf_SetTrcvMode
        Description: Set the given LIN transceiver to the given mode.
        This is an optional interface
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_OPTIONAL_INTERFACES</srcid><srcstatus/><internalId>470</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_CONF_NOTIF_TRCV</srcid><srcstatus/><internalId>595</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00138</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>      
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>237</internalId></specobject>

    <specobject>
      <id>LinSM.SWS_LinSM_00229_Sleep</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <priority>high</priority>
      <description>
        API function: LinIf_GotoSleep
        Description: Initiates a transition into the Sleep Mode on the selected channel.
        This is a mandatory interface
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30032</srcid><srcstatus/><internalId>467</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>238</internalId></specobject>

    <specobject>
      <id>LinSM.SWS_LinSM_00229_Wakeup</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <priority>high</priority>
      <description>
        API function: LinIf_Wakeup
        Description: Initiates the wake up process.
        This is a mandatory interface
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30032</srcid><srcstatus/><internalId>467</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>239</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00203_PassiveTrue</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <priority>high</priority>
      <description>
        When entering LINSM_NO_COM the transceiver shall be set to STANDBY if LinSMTransceiverPassiveMode is true by using the LinIf_SetTrcvMode. This requirement is applicable only when LinSMTransceiverPassiveMode is configured for the channel.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_CONF_NOTIF_TRCV</srcid><srcstatus/><internalId>595</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>240</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00203_PassiveFalse</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <priority>high</priority>
      <description>
        When entering LINSM_NO_COM the transceiver shall be set to SLEEP if LinSMTransceiverPassiveMode is true by using the LinIf_SetTrcvMode. This requirement is applicable only when LinSMTransceiverPassiveMode is configured for the channel.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_CONF_NOTIF_TRCV</srcid><srcstatus/><internalId>595</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>241</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.LINSM027_EB</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>When LinSM_GotoSleepConfirmation was called with argument success=true and the LinSMConfirmationTimeout has not yet expired, the LinSM module shall notify (in this order) 1) ComM of the state change by calling the ComM_BusSM_ModeIndication with the parameter COMM_NO_COMMUNICATION for the specific network. 2) BswM of the state change by calling the BswM_LinSM_CurrentState with the parameter LINSM_NO_COM for the specific network.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_NOCOM_TIMEOUT_EXPIRE</srcid><srcstatus/><internalId>549</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQ_IND_REQ_CONF</srcid><srcstatus/><internalId>564</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_REQ_CONF</srcid><srcstatus/><internalId>565</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_CONF_REQ</srcid><srcstatus/><internalId>566</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>242</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.LINSM033_EB</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>When entering LINSM_FULL_COM the BswM shall be notified of the state change by calling (in this order) 1) the ComM_BusSM_ModeIndication with the parameter COMM_FULL_COMMUNICATION for the specified network. 2) the BswM_LinSM_CurrentState with the parameter LINSM_FULL_COM for the specified network.</description>
      <comment>SleepSupport = TRUE 'entering LINSM_FULL_COM' means that - LinSM_RequestComMode(FULL_COM) returned OK - and LinSM_WakeUpConfirmation was called with argument success=true SleepSupport = FALSE entering LINSM_FULL_COM' means that - LinSM_RequestComMode(FULL_COM) returned OK</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_FULLCOM_NOCOMM_FALSE</srcid><srcstatus/><internalId>504</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKEUP_AND_WAKEUPCONF_SAME_CONTEXT</srcid><srcstatus/><internalId>510</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKEUP_CONF_BEFORE_TIMEOUT</srcid><srcstatus/><internalId>551</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_ENTER_FULL_COM</srcid><srcstatus/><internalId>581</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40083</srcid><srcstatus/><internalId>628</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>243</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00035_EB</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>When calling LinSM_RequestComMode(mode=NO_COM): The LinSM module may only call LinIf_GotoSleep API in LinIf when the state LINSM_FULL_COM or LINSM_WAKEUP is active, otherwise LinSM_RequestComMode shall just return E_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQNOCOM_UNINIT</srcid><srcstatus/><internalId>491</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQ_NOCOMM</srcid><srcstatus/><internalId>502</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30147</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>244</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.LINSM170_EB</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>If request timer elapses when waiting for LinSM_WakeupConfirmation or LinSM_GotoSleepConfirmation, only a DET error shall be reported as in LINSM102 and ComM/BswM shall not be notified.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_TIMEOUT</srcid><srcstatus/><internalId>530</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30075</srcid><srcstatus/><internalId>552</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>245</internalId></specobject>

    <specobject>
      <id>LinSM.EB.LINSM0211_EB</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>If the function LinSM_ScheduleRequest is called and the state is LINSM_NO_COM, or if LinSM_WakeupConfirmation/LinSM_GotoSleepConfirmation are waited then the LinSM_ScheduleRequest shall report to DET with event id LINSM_E_NOT_IN_RUN_SCHEDULE and return with E_NOT_OK.</description>
      <comment>&lt;pre&gt;replaces LinSM.SWS_LinSM_10211&lt;/pre&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_INIT_RESET</srcid><srcstatus/><internalId>499</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQ_NOCOM_SLEEP_FALSE</srcid><srcstatus/><internalId>505</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCHREQ_MODCHANGE</srcid><srcstatus/><internalId>526</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCHREQ_MODCHANGE_2</srcid><srcstatus/><internalId>527</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30137</srcid><srcstatus/><internalId>580</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_ENTER_FULL_COM</srcid><srcstatus/><internalId>581</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCH_REQ_IN_NOCOM</srcid><srcstatus/><internalId>597</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>246</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.LINSM183_EB</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>&lt;pre&gt;If COMM_SILENT_COMMUNICATION is requested the function shall return E_OK and the request shall be ignored.&lt;/pre&gt;</description>
      <comment>&lt;pre&gt;when calling LinSM_RequestComMode&lt;/pre&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQCOM_SILENT</srcid><srcstatus/><internalId>523</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>247</internalId></specobject>

    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00159_EB</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>If a timeout is not a multiple of LinSMMainProcessingPeriod, it shall be handled according to [ecuc_sws_7000] of the AUTOSAR document "Specification of ECU configuration V3.2.0 R4.0 Rev 3". For this computation float values of times in second shall be converted to integer values in micro seconds, remaindor (i.e. micro second fraction part) shall be omitted.</description>
      <comment>&lt;pre&gt;Implement via configuration check.&lt;/pre&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_TIMEOUT_NOT_DIVISIBLE</srcid><srcstatus/><internalId>500</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00159</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>248</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00230_EB</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>The LinSM nodes that receive a NO_COM request from ComM shall not store that request and ignore the request.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_RequestComMode.c_173</srcid><srcstatus/><internalId>371</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/LinSM_RequestComMode.c_377</srcid><srcstatus/><internalId>376</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQ_IND_REQ_CONF</srcid><srcstatus/><internalId>564</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_REQ_CONF</srcid><srcstatus/><internalId>565</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_CONF_REQ</srcid><srcstatus/><internalId>566</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_REQ_NOCONF_TIMEOUT</srcid><srcstatus/><internalId>567</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_CONF_NOREQ_TIMEOUT</srcid><srcstatus/><internalId>568</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>249</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00233_EB</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>2</version>
      <description>When the current state is LINSM_FULL_COM, LINSM_WAKEUP or LINSM_NO_COM and the LinIf_GotoSleep returns E_OK,
      the ComM shall be notified of the bus sleep event by calling ComM_BusSM_BusSleepMode for the specified network.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_RequestComMode.c_416</srcid><srcstatus/><internalId>378</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQ_IND_REQ_CONF</srcid><srcstatus/><internalId>564</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_REQ_CONF</srcid><srcstatus/><internalId>565</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_CONF_REQ</srcid><srcstatus/><internalId>566</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_REQ_NOCONF_TIMEOUT</srcid><srcstatus/><internalId>567</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_CONF_NOREQ_TIMEOUT</srcid><srcstatus/><internalId>568</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_NOCOM_GOTOSLEEP</srcid><srcstatus/><internalId>569</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SLAVESTATES_01</srcid><srcstatus/><internalId>619</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>250</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_91000_EB</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>
        Service Name LinSM_GotoSleepIndication
        Syntax void LinSM_GotoSleepIndication ( NetworkHandleType Channel )
        Service ID [hex] 0x03
        Sync/Async Synchronous
        Reentrancy Reentrant
        Parameters (in) Channel Identification of the LIN channel
        Parameters (inout) None
        Parameters (out) None
        Return value None
        Description The LinIf will call this callback when the go to sleep command is received on the network or a bus idle timeout occurs.
                    Only applicable for LIN slave nodes.
                    Available via LinSM_Cbk.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepIndication.c_44</srcid><srcstatus/><internalId>351</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQ_IND_REQ_CONF</srcid><srcstatus/><internalId>564</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_91000</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>251</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00234_EB</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>In the case of [SWS_LinSM_00046] and the requested communication mode by ComM module is COMM_FULL_COMMUNICATION, the LinSM shall restart the wakeup up process
        if the request comes before LinSM receives the return value of LinIf_GotoSleep.</description>
      <comment>
        Requirement mentioned above (SWS_LinSM_00046) is probably wrong and intended reference would be SWS_LinSM_00233.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_MainFunction.c_363</srcid><srcstatus/><internalId>366</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SILENCE_AFTER_WU_NOCONF</srcid><srcstatus/><internalId>570</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>252</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM102.Wakeup</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>If LinSMDevErrorDetect is enabled: When a timeout occurs while waiting for LinSM_WakeupConfirmation, the error code LINSM_E_CONFIRMATION_TIMEOUT shall be reported to the DET module.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_TIMEOUT</srcid><srcstatus/><internalId>530</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30075</srcid><srcstatus/><internalId>552</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>253</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM102.Sleep</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>If LinSMDevErrorDetect is enabled: When a timeout occurs while waiting for LinSM_GotoSleepConfirmation, the error code LINSM_E_CONFIRMATION_TIMEOUT shall be reported to the DET module.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30074</srcid><srcstatus/><internalId>550</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_REQ_NOCONF_TIMEOUT</srcid><srcstatus/><internalId>567</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_CONF_NOREQ_TIMEOUT</srcid><srcstatus/><internalId>568</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>254</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM102.Schedule</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>If LinSMDevErrorDetect is enabled: When a timeout occurs while waiting for LinSM_ScheduleRequestConfirmation, the error code LINSM_E_CONFIRMATION_TIMEOUT shall be reported to the DET module.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ_TIMEOUT</srcid><srcstatus/><internalId>547</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>255</internalId></specobject>    
    <specobject>
      <id>LinSM.ASR40.LINSM103.GotoSleep</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>If the configuration parameter LinSMConfirmationTimeout is set to zero the timer is not used, and hence a timeout while waiting for LinSM_GotoSleepConfirmation cannot occur. This means that requirements [LinSM.ASR40.LINSM102], [LinSM.ASR40.LINSM170] and [LinSM.ASR40.LINSM0215] will not happen.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30080</srcid><srcstatus/><internalId>574</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>256</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM103.Wakeup</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>If the configuration parameter LinSMConfirmationTimeout is set to zero the timer is not used, and hence a timeout while waiting for LinSM_WakeupConfirmation cannot occur. This means that requirements [LinSM.ASR40.LINSM102], [LinSM.ASR40.LINSM170] and [LinSM.ASR40.LINSM0215] will not happen.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30078</srcid><srcstatus/><internalId>572</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>257</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM103.ScheduleRequest</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>If the configuration parameter LinSMConfirmationTimeout is set to zero the timer is not used, and hence a timeout while waiting for LinSM_ScheduleRequestConfirmation cannot occur. This means that requirements [LinSM.ASR40.LINSM102], [LinSM.ASR40.LINSM170] and [LinSM.ASR40.LINSM0215] will not happen.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30079</srcid><srcstatus/><internalId>573</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>258</internalId></specobject>       
    <specobject>
      <id>LinSM.ASR40.LINSM154.Wakeup</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>If the LinIf module calls LinSM_WakeupConfirmation before the timeout occurs, the active timer shall stop, so that the timeout will not occur.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_CONF</srcid><srcstatus/><internalId>529</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKEUP_CONF_BEFORE_TIMEOUT</srcid><srcstatus/><internalId>551</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>259</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM154.Sleep</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>If the LinIf module calls LinSM_GotoSleepConfirmation before the timeout occurs, the active timer shall stop, so that the timeout will not occur.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLEEP_SCHEDULE_TIMEOUT</srcid><srcstatus/><internalId>531</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_NOCOM_TIMEOUT_EXPIRE</srcid><srcstatus/><internalId>549</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>260</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM154.Schedule</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>If the LinIf module calls LinSM_ScheduleRequestConfirmation before the timeout occurs, the active timer shall stop, so that the timeout will not occur.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLEEP_SCHEDULE_TIMEOUT</srcid><srcstatus/><internalId>531</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCH_REQ_CONF_BEFORE_TIMEOUT</srcid><srcstatus/><internalId>546</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>261</internalId></specobject>  
    <specobject>
      <id>LinSM.ASR40.LINSM164.Wakeup</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>The LinSM module shall use the same NetworkHandle value, received through an API, when interfacing to the LinIf module (when LIN network is required as a parameter).</description>
      <comment>&lt;pre&gt;This applies to the following function calls: LinSM_RequestComMode calling LinIf_WakeUp&lt;/pre&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SAME_IDS_FOR_LINSM_AND_LINIF</srcid><srcstatus/><internalId>553</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_NETWORKS</srcid><srcstatus/><internalId>560</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>262</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM164.GotoSleep</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>The LinSM module shall use the same NetworkHandle value, received through an API, when interfacing to the LinIf module (when LIN network is required as a parameter).</description>
      <comment>&lt;pre&gt;This applies to the following function calls: LinSM_RequestComMode calling LinIf_GotoSleep&lt;/pre&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SAME_IDS_FOR_LINSM_AND_LINIF</srcid><srcstatus/><internalId>553</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>263</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM164.ScheduleRequest</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>The LinSM module shall use the same NetworkHandle value, received through an API, when interfacing to the LinIf module (when LIN network is required as a parameter).</description>
      <comment>&lt;pre&gt;This applies to the following function calls: LinSM_ScheduleRequest calling LinIf_ScheduleRequest&lt;/pre&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SAME_IDS_FOR_LINSM_AND_LINIF</srcid><srcstatus/><internalId>553</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>264</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM053_LINSM_E_UNINIT</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>Type or error Relevance Related error code Value [hex] API called without Development LINSM_E_UNINIT 0x00 initialization of LinSM</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ_UNINIT</srcid><srcstatus/><internalId>488</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_CURMOD_UNINIT</srcid><srcstatus/><internalId>490</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQNOCOM_UNINIT</srcid><srcstatus/><internalId>491</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQFULLCOM_UNINIT</srcid><srcstatus/><internalId>492</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKECONF_UNINIT</srcid><srcstatus/><internalId>493</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SLEEPCONF_UNINIT</srcid><srcstatus/><internalId>494</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCHREQCONF_UNINIT</srcid><srcstatus/><internalId>495</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>265</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM053_LINSM_E_NONEXISTENT_NETWORK</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>Type or error Relevance Related error code Value [hex] Referenced network does Development LINSM_E_NONEXISTENT_NETWORK 0x20 not exist (identification is out of range)</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ_NONEXCHANNEL</srcid><srcstatus/><internalId>501</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_CURMOD_NONEX_CHANNEL</srcid><srcstatus/><internalId>514</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_REQCOM_NONEX_CHANNEL</srcid><srcstatus/><internalId>515</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKECONF_NONEXCHANNEL</srcid><srcstatus/><internalId>516</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SLEEPCONF_NONEXCHANNEL</srcid><srcstatus/><internalId>517</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCHREQCONF_NONEXCHANNEL</srcid><srcstatus/><internalId>518</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>266</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM053_LINSM_E_PARAMETER</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>Type or error Relevance Related error code Value [hex] API service called with Development LINSM_E_PARAMETER 0x30 wrong parameter</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQCOM_MODEINVALID</srcid><srcstatus/><internalId>524</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>267</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM053_LINSM_E_PARAMETER_POINTER</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>Type or error Relevance Related error code Value [hex] API service called with Development LINSM_E_PARAMETER_POINTER 0x40 invalid pointer</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_GETVER_NULLPTR</srcid><srcstatus/><internalId>521</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_GETCURCOMMODE_NULLPTR</srcid><srcstatus/><internalId>522</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>268</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.LINSM053_LINSM_E_CONFIRMATION_TIMEOUT</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>Type or error Relevance Related error code Value [hex] Timeout of the callbacks Development LINSM_E_CONFIRMATION_TIMEOUT 0x50 from LinIf</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ_TIMEOUT</srcid><srcstatus/><internalId>547</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30074</srcid><srcstatus/><internalId>550</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_30075</srcid><srcstatus/><internalId>552</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>269</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00168_1</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>&lt;pre&gt;If LinIf_ScheduleRequest returns with E_OK the LinSM_ScheduleRequest shall return with E_OK.&lt;/pre&gt;</description>
      <comment>&lt;pre&gt;Only if the state is FULL_COM&lt;/pre&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCHREQ</srcid><srcstatus/><internalId>508</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>270</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00168_2</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>&lt;pre&gt;If LinIf_ScheduleRequest returns with E_NOT_OK the LinSM_ScheduleRequest shall return with E_NOT_OK.&lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SCH_REQ_NOT_OK</srcid><srcstatus/><internalId>557</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SCH_REQ_NOT_OK_NULL</srcid><srcstatus/><internalId>558</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>271</internalId></specobject>
    <specobject>
      <id>LinSM.ASR40.SWS_LinSM_00015_1</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>2</version>
      <description>&lt;pre&gt;The LinSM module shall not include the Det.h file in case LinSMDevErrorDetect is disabled&lt;/pre&gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_30032</srcid><srcstatus/><internalId>467</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00015</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>272</internalId></specobject>
    <specobject>
      <id>LinSM.SWS_LinSM_00231_EB</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>When LinSM_GotoSleepIndication is called, and the current state is LINSM_FULL_COM, LINSM_WAKEUP or LINSM_NO_COM, the LinSM shall directly call LinIf_GotoSleep
      (and not wait for next main function call) to enter sleep mode on the requested network.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/LinSM_GotoSleepIndication.c_83</srcid><srcstatus/><internalId>355</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQ_IND_REQ_CONF</srcid><srcstatus/><internalId>564</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_REQ_CONF</srcid><srcstatus/><internalId>565</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_CONF_REQ</srcid><srcstatus/><internalId>566</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_REQ_NOCONF_TIMEOUT</srcid><srcstatus/><internalId>567</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_IND_CONF_NOREQ_TIMEOUT</srcid><srcstatus/><internalId>568</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_NOCOM_GOTOSLEEP</srcid><srcstatus/><internalId>569</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SLAVESTATES_01</srcid><srcstatus/><internalId>619</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00231</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>273</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>LinSM.EB.DBGINST001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Every public API of the module shall have debug instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LinSM_DBGINST_001</srcid><srcstatus/><internalId>461</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>274</internalId></specobject>

    <specobject>
      <id>LinSM.EB.DBGINST002</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The parameter of a API shall be available in the entry instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LinSM_DBGINST_001</srcid><srcstatus/><internalId>461</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>275</internalId></specobject>

    <specobject>
      <id>LinSM.EB.DBGINST003</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The parameter of a API shall be available in the exit instrumentation.
        If the API has a return value, the very first parameter of the macro shall contain the expected return value.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LinSM_DBGINST_001</srcid><srcstatus/><internalId>461</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>276</internalId></specobject>

    <specobject>
      <id>LinSM.EB.DBGINST004</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The default implementation of the debug instrumentation shall be an empty macro.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LinSM_DBGINST_001</srcid><srcstatus/><internalId>461</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>277</internalId></specobject>

    <specobject>
      <id>LinSM.EB.DBGINST005</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module shall include the header files Base_Dbg.h in order to allow changing the default implementation of the debug instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LinSM_DBGINST_001</srcid><srcstatus/><internalId>461</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>278</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>LinSM.EB.Interface.Consistency</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        The module shall provide a mechanism to guarantee consistency of interfaces and
        types between its implementation and its code stub.
       </description>
       <comment>
        The code stub of a module shall provide the same external view than the module itself.
        This is mandatory because unit test of modules test against the code stubs of
        adjacent modules. Inconsistent stubs may result in the situation that incompatible
        interfaces are not detected as unit test stage.
       </comment>
       <verifycrit>
        Create a compile test with two permutations that call all interfaces of a module
        (in both permutations).
        p0: Behave like a regular compile test; call the module generator and compile against
        the implementation of the module.
        p1: Do not generate module code and do not compile the implementation of the module.
        Instead the module shall be replaced with its own code stub.
       </verifycrit>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LinSM_VerifyCodeStub</srcid><srcstatus/><internalId>462</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>279</internalId></specobject>

  </specobjects>
    <specobjects doctype="dev">
    <specobject>
      <id>dev.LinSM.PostBuild</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>42</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>280</internalId></specobject>
    <specobject>
      <id>dev.LinSM.InitPtr</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>64</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00218</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>281</internalId></specobject>
    <specobject>
      <id>dev.LINSM.ScheduleRequestDet</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>83</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_10211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>282</internalId></specobject>
    <specobject>
      <id>dev.LinSM.MainFunction</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>128</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>283</internalId></specobject>
    <specobject>
      <id>dev.LinSM.InterModVerChk</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>159</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>284</internalId></specobject>
    <specobject>
      <id>dev.LinSM.Init</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>176</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>285</internalId></specobject>
    <specobject>
      <id>dev.LinSM.ApiNotConfigurable</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>193</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00198</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00199</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>286</internalId></specobject>
    <specobject>
      <id>dev.LinSM.ModeIndication</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>212</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>287</internalId></specobject>
    <specobject>
      <id>dev.LinSM.ConfigVariant</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>224</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>288</internalId></specobject>
    <specobject>
      <id>dev.LinSM.AutosarDebugging</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>237</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00184</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00185</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00186</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00187</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>289</internalId></specobject>
    <specobject>
      <id>dev.LinSM.ConsecutiveScheduleIndices</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>255</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00115</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>290</internalId></specobject>
    <specobject>
      <id>dev.LinSM.ComMHarmonization</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>276</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00176</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00183</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_10210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>291</internalId></specobject>
    <specobject>
      <id>dev.LinSM.CbkHeaderExport</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>293</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_91000</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>292</internalId></specobject>
    <specobject>
      <id>dev.LinSM.NothingStoredSlaveNodes</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>312</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>293</internalId></specobject>
    <specobject>
      <id>dev.LinSM.BusSleepModeCall</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>331</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>294</internalId></specobject>
    <specobject>
      <id>dev.LinSM.ConfTimeoutError</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>350</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>295</internalId></specobject>
    <specobject>
      <id>dev.LinSM.WUDuringSleep</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>369</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>296</internalId></specobject>
    <specobject>
      <id>dev.LinSM.OnlyPreCompileSupported</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>383</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00145</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00144</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00140</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>297</internalId></specobject>
    <specobject>
      <id>dev.LinSM.LinIfGoToSleepNewSubState</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>404</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>298</internalId></specobject>
    <specobject>
      <id>dev.LinSM.LinSM_GotoSleepConfirmationNewState</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>417</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>299</internalId></specobject>
    <specobject>
      <id>dev.LinSM.ChangeOfDevelopmentErrorsMacros</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>430</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00124</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00119</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>300</internalId></specobject>
    <specobject>
      <id>dev.LinSM.NewStateRunComm</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>445</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00301</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>301</internalId></specobject>
    <specobject>
      <id>dev.LinSM.PartlyImplementedFunctionalities</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>457</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00176</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00183</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00115</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>302</internalId></specobject>
    <specobject>
      <id>dev.LinSM.GotoSleepIndStates</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>488</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00231</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>303</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/LinSM_Cfg.h.m4_137</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate/include/LinSM_Cfg.h.m4</sourcefile>
      <sourceline>137</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>304</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/LinSM_Cfg.h.m4_143</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate/include/LinSM_Cfg.h.m4</sourcefile>
      <sourceline>143</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>305</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/LinSM_InternalCfg.h_432</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate/include/LinSM_InternalCfg.h</sourcefile>
      <sourceline>432</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSMWakeupAndSleepIndication_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>306</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/LinSM_InternalCfg.h_588</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate/include/LinSM_InternalCfg.h</sourcefile>
      <sourceline>588</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>307</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/LinSM_InternalCfg.h_594</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate/include/LinSM_InternalCfg.h</sourcefile>
      <sourceline>594</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>308</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/LinSM_InternalCfg.h_599</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate/include/LinSM_InternalCfg.h</sourcefile>
      <sourceline>599</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>309</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/LinSM_InternalCfg.h_605</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate/include/LinSM_InternalCfg.h</sourcefile>
      <sourceline>605</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>310</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/LinSM_InternalCfg.h_612</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate/include/LinSM_InternalCfg.h</sourcefile>
      <sourceline>612</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>311</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/LinSM_InternalCfg.h_627</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate/include/LinSM_InternalCfg.h</sourcefile>
      <sourceline>627</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>312</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/src/LinSM_Cfg.c_3</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate/src/LinSM_Cfg.c</sourcefile>
      <sourceline>3</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>313</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/LinSM_Cfg.c_61</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate/src/LinSM_Cfg.c</sourcefile>
      <sourceline>61</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>314</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/LinSM_Cfg.c_111</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate/src/LinSM_Cfg.c</sourcefile>
      <sourceline>111</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>315</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/LinSM_Cfg.c_116</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate/src/LinSM_Cfg.c</sourcefile>
      <sourceline>116</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>316</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/LinSM_Cfg.c_122</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate/src/LinSM_Cfg.c</sourcefile>
      <sourceline>122</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>317</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/LinSM_Cfg.c_129</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate/src/LinSM_Cfg.c</sourcefile>
      <sourceline>129</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>318</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/LinSM_Cfg.c_151</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate/src/LinSM_Cfg.c</sourcefile>
      <sourceline>151</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>319</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/LinSM.h_8</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/include/LinSM.h</sourcefile>
      <sourceline>8</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>320</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/LinSM_Api.h_21</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/include/LinSM_Api.h</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>321</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/LinSM_Api.h_23</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/include/LinSM_Api.h</sourcefile>
      <sourceline>23</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>322</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/LinSM_Api.h_265</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/include/LinSM_Api.h</sourcefile>
      <sourceline>265</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>323</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/LinSM_Api.h_406</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/include/LinSM_Api.h</sourcefile>
      <sourceline>406</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>324</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/LinSM_Cbk.h_24</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/include/LinSM_Cbk.h</sourcefile>
      <sourceline>24</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>325</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/LinSM_Cbk.h_115</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/include/LinSM_Cbk.h</sourcefile>
      <sourceline>115</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>326</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/LinSM_Internal.h.m4_13</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/include/LinSM_Internal.h.m4</sourcefile>
      <sourceline>13</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00195</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>327</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/LinSM_Internal.h.m4_97</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/include/LinSM_Internal.h.m4</sourcefile>
      <sourceline>97</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>328</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/LinSM_Internal.h.m4_103</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/include/LinSM_Internal.h.m4</sourcefile>
      <sourceline>103</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>329</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/LinSM_Internal.h.m4_108</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/include/LinSM_Internal.h.m4</sourcefile>
      <sourceline>108</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>330</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/LinSM_Internal.h.m4_139</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/include/LinSM_Internal.h.m4</sourcefile>
      <sourceline>139</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>331</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/LinSM_Version.h.m4_1</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/include/LinSM_Version.h.m4</sourcefile>
      <sourceline>1</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>332</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/LinSM.c.m4_10</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM.c.m4</sourcefile>
      <sourceline>10</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>333</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM.c.m4_27</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM.c.m4</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>334</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM.c.m4_32</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM.c.m4</sourcefile>
      <sourceline>32</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>335</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/LinSM_GetCurrentComMode.c_25</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GetCurrentComMode.c</sourcefile>
      <sourceline>25</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>336</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GetCurrentComMode.c_96</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GetCurrentComMode.c</sourcefile>
      <sourceline>96</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>337</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/LinSM_GetVersionInfo.c_25</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GetVersionInfo.c</sourcefile>
      <sourceline>25</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>338</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GetVersionInfo.c_57</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GetVersionInfo.c</sourcefile>
      <sourceline>57</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>339</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepConfirmation.c_18</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepConfirmation.c</sourcefile>
      <sourceline>18</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00201_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>340</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepConfirmation.c_26</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepConfirmation.c</sourcefile>
      <sourceline>26</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>341</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepConfirmation.c_58</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepConfirmation.c</sourcefile>
      <sourceline>58</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>342</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepConfirmation.c_69</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepConfirmation.c</sourcefile>
      <sourceline>69</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>343</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepConfirmation.c_141</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepConfirmation.c</sourcefile>
      <sourceline>141</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_GOTO_SLEEP_ConfirmationFailure</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>344</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepConfirmation.c_161</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepConfirmation.c</sourcefile>
      <sourceline>161</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>345</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepConfirmation.c_166</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepConfirmation.c</sourcefile>
      <sourceline>166</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>346</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepConfirmation.c_255</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepConfirmation.c</sourcefile>
      <sourceline>255</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>347</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepIndication.c_20</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepIndication.c</sourcefile>
      <sourceline>20</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>348</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepIndication.c_22</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepIndication.c</sourcefile>
      <sourceline>22</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00201_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>349</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepIndication.c_42</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepIndication.c</sourcefile>
      <sourceline>42</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>350</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepIndication.c_44</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepIndication.c</sourcefile>
      <sourceline>44</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_91000_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>351</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepIndication.c_57</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepIndication.c</sourcefile>
      <sourceline>57</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>352</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepIndication.c_64</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepIndication.c</sourcefile>
      <sourceline>64</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>353</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepIndication.c_80</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepIndication.c</sourcefile>
      <sourceline>80</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>354</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepIndication.c_83</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepIndication.c</sourcefile>
      <sourceline>83</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00231_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>355</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_GotoSleepIndication.c_96</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_GotoSleepIndication.c</sourcefile>
      <sourceline>96</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>356</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/LinSM_Init.c_35</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_Init.c</sourcefile>
      <sourceline>35</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>357</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_Init.c_45</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_Init.c</sourcefile>
      <sourceline>45</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM0218_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>358</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_Init.c_85</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_Init.c</sourcefile>
      <sourceline>85</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>359</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/LinSM_MainFunction.c_25</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_MainFunction.c</sourcefile>
      <sourceline>25</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>360</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_MainFunction.c_198</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_MainFunction.c</sourcefile>
      <sourceline>198</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00307</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>361</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_MainFunction.c_207</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_MainFunction.c</sourcefile>
      <sourceline>207</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_WAKEUP_ConfirmationTimout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>362</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_MainFunction.c_208</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_MainFunction.c</sourcefile>
      <sourceline>208</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_GOTO_SLEEP_ConfirmationTimout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>363</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_MainFunction.c_317</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_MainFunction.c</sourcefile>
      <sourceline>317</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00236</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>364</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_MainFunction.c_338</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_MainFunction.c</sourcefile>
      <sourceline>338</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>365</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_MainFunction.c_363</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_MainFunction.c</sourcefile>
      <sourceline>363</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00234_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>366</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_MainFunction.c_379</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_MainFunction.c</sourcefile>
      <sourceline>379</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_WAKEUP_ConfirmationTimout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>367</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_MainFunction.c_380</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_MainFunction.c</sourcefile>
      <sourceline>380</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_GOTO_SLEEP_ConfirmationTimout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>368</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_MainFunction.c_407</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_MainFunction.c</sourcefile>
      <sourceline>407</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>369</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/LinSM_RequestComMode.c_53</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_RequestComMode.c</sourcefile>
      <sourceline>53</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>370</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_RequestComMode.c_173</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_RequestComMode.c</sourcefile>
      <sourceline>173</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00230_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>371</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_RequestComMode.c_276</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_RequestComMode.c</sourcefile>
      <sourceline>276</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_WAKEUP_Notification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>372</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_RequestComMode.c_316</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_RequestComMode.c</sourcefile>
      <sourceline>316</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_WAKEUP_LinIfWakepFailure</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>373</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_RequestComMode.c_343</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_RequestComMode.c</sourcefile>
      <sourceline>343</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00302</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>374</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_RequestComMode.c_353</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_RequestComMode.c</sourcefile>
      <sourceline>353</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_GOTO_SLEEP_Notification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>375</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_RequestComMode.c_377</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_RequestComMode.c</sourcefile>
      <sourceline>377</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00230_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>376</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_RequestComMode.c_404</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_RequestComMode.c</sourcefile>
      <sourceline>404</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_GOTO_SLEEP_LinIfGoToSleepFailure</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>377</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_RequestComMode.c_416</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_RequestComMode.c</sourcefile>
      <sourceline>416</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00233_EB</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>378</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_RequestComMode.c_535</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_RequestComMode.c</sourcefile>
      <sourceline>535</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>379</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_RequestComMode.c_555</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_RequestComMode.c</sourcefile>
      <sourceline>555</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>380</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_RequestComMode.c_563</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_RequestComMode.c</sourcefile>
      <sourceline>563</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>381</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_RequestComMode.c_590</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_RequestComMode.c</sourcefile>
      <sourceline>590</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>382</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/LinSM_ScheduleRequest.c_9</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_ScheduleRequest.c</sourcefile>
      <sourceline>9</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>383</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_ScheduleRequest.c_28</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_ScheduleRequest.c</sourcefile>
      <sourceline>28</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>384</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_ScheduleRequest.c_58</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_ScheduleRequest.c</sourcefile>
      <sourceline>58</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM_ScheduleRequestOnlyOnMasterNodes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>385</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_ScheduleRequest.c_132</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_ScheduleRequest.c</sourcefile>
      <sourceline>132</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>386</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/LinSM_ScheduleRequestConfirmation.c_9</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_ScheduleRequestConfirmation.c</sourcefile>
      <sourceline>9</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00242</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>387</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_ScheduleRequestConfirmation.c_30</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_ScheduleRequestConfirmation.c</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>388</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_ScheduleRequestConfirmation.c_99</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_ScheduleRequestConfirmation.c</sourcefile>
      <sourceline>99</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>389</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/LinSM_WakeupConfirmation.c_37</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_WakeupConfirmation.c</sourcefile>
      <sourceline>37</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>390</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_WakeupConfirmation.c_108</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_WakeupConfirmation.c</sourcefile>
      <sourceline>108</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_WAKEUP_ConfirmationFailure</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>391</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/LinSM_WakeupConfirmation.c_128</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/src/LinSM_WakeupConfirmation.c</sourcefile>
      <sourceline>128</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>392</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/LinSM_Extension.xdm.m4_122</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/config/LinSM_Extension.xdm.m4</sourcefile>
      <sourceline>122</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>393</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/LinSM_Extension.xdm.m4_167</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/config/LinSM_Extension.xdm.m4</sourcefile>
      <sourceline>167</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00144</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>394</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/LinSM_Extension.xdm.m4_313</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/config/LinSM_Extension.xdm.m4</sourcefile>
      <sourceline>313</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>395</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/LinSM_Extension.xdm.m4_330</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/config/LinSM_Extension.xdm.m4</sourcefile>
      <sourceline>330</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM_ComMNmVariantSlaveNode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>396</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/LinSM_Extension.xdm.m4_333</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/config/LinSM_Extension.xdm.m4</sourcefile>
      <sourceline>333</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM_SleepSupportSlaveNode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>397</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/LinSM_Extension.xdm.m4_338</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/config/LinSM_Extension.xdm.m4</sourcefile>
      <sourceline>338</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>398</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/LinSM_Extension.xdm.m4_369</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/config/LinSM_Extension.xdm.m4</sourcefile>
      <sourceline>369</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM_SilenceTimeoutValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>399</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/LinSM_Extension.xdm.m4_375</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/config/LinSM_Extension.xdm.m4</sourcefile>
      <sourceline>375</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00146</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>400</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/LinSM_Bswmd.arxml.m4_245</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/src/Autosar/generate_swcd/swcd/LinSM_Bswmd.arxml.m4</sourcefile>
      <sourceline>245</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>401</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>dsn.LinSM.Preemption1</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>1071</sourceline>
      <version>1</version>
      <description>
                The LinSM_RequestComMode function is non-reentrant if called for a transition
                from LINSM_FULL_COM to LINSM_NO_COM state for a channel that uses sleep support. During 
                such a transition, the LinIf function LinIf_GotoSleep must be called which itself is
                non-reentrant.
              </description>
      <needscoverage>
        <needscov><needsobj>lim</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>lim.LinSM.EB_INTREQ_LinSM_0001</srcid><srcstatus/><internalId>0</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>402</internalId></specobject>
    <specobject>
      <id>dsn.LinSM.Preemption2</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>1086</sourceline>
      <version>1</version>
      <description>
                LinSM_ScheduleRequest is non-reentrant for the same LIN channel. According to 
                LINSM113, the LinSM_ScheduleRequest function shall be reentrant. Contrary to this, 
                the LinSM_ScheduleRequest function implementation is non-reentrant for the same LIN 
                channel.
              </description>
      <needscoverage>
        <needscov><needsobj>lim</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>lim.LinSM.EB_INTREQ_LinSM_0002</srcid><srcstatus/><internalId>1</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>403</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>LinSM.Design.20041</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>1278</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt; 
                      If the ComM ids in question are consecutive, a direct mapping using an offset will be used. &amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_40064</srcid><srcstatus/><internalId>623</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40065</srcid><srcstatus/><internalId>624</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40066</srcid><srcstatus/><internalId>625</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40067</srcid><srcstatus/><internalId>626</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40070</srcid><srcstatus/><internalId>627</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>404</internalId></specobject>
    <specobject>
      <id>LinSM.Design.20042</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>1289</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt; 
                      Otherwise, a lookup table will be used which has to be searched at runtime. &amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_40064</srcid><srcstatus/><internalId>623</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40065</srcid><srcstatus/><internalId>624</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40066</srcid><srcstatus/><internalId>625</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40067</srcid><srcstatus/><internalId>626</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40070</srcid><srcstatus/><internalId>627</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>405</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>LinSM.Design.20043</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>1423</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;ComM handle IDs shall be used when using the APIs of the
                        &amp;amp;modulelongname; module.&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_IMPL_ID</srcid><srcstatus/><internalId>618</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>406</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>LinSM.Design.20044</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>1495</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;The handle IDs used when interacting with other modules
                        is done according to the following table:&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_IMPL_ID</srcid><srcstatus/><internalId>618</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>407</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>LinSM.Design.20089</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>1820</sourceline>
      <version>1</version>
      <description> 
                                  If no channel in the configuration uses sleep support, only code for direct state transitions between LINSM_NO_COM and LINSM_FULL_COM needs to be provided. </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_40083</srcid><srcstatus/><internalId>628</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40084</srcid><srcstatus/><internalId>629</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40085</srcid><srcstatus/><internalId>630</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>408</internalId></specobject>
    <specobject>
      <id>LinSM.Design.20090</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>1832</sourceline>
      <version>1</version>
      <description> If all channels in the configuration use sleep support, the code for direct state transitions between LINSM_NO_COM and LINSM_FULL_COM (in both directions) can be omitted. </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_40064</srcid><srcstatus/><internalId>623</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40065</srcid><srcstatus/><internalId>624</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40066</srcid><srcstatus/><internalId>625</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40067</srcid><srcstatus/><internalId>626</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>409</internalId></specobject>
    <specobject>
      <id>LinSM.Design.20091</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>1842</sourceline>
      <version>1</version>
      <description> If some of the configured channels use sleep support while others don't, code for both possibilities must be provided and must be chosen at runtime based on the channel configuration. </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_40083</srcid><srcstatus/><internalId>628</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40084</srcid><srcstatus/><internalId>629</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40085</srcid><srcstatus/><internalId>630</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>410</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>LinSM.Design.Transition.T01a</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2102</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQSAMECOM</srcid><srcstatus/><internalId>512</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>411</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T01b</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2119</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_INIT_IN_FULLCOM</srcid><srcstatus/><internalId>611</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>412</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T01c</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2136</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_AND_GOTOSLEEP_TO_NO_COM</srcid><srcstatus/><internalId>615</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>413</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T01d</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2153</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_AND_GOTOSLEEP_TO_NO_COM</srcid><srcstatus/><internalId>615</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>414</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T02</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2170</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_MAIN_FCT_HANDLES_TIMERS</srcid><srcstatus/><internalId>601</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_WAKECONF_TIMEOUT</srcid><srcstatus/><internalId>602</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_MAINFCT_TIMER</srcid><srcstatus/><internalId>604</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>415</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T03a</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2187</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_MAINFCT_TIMER</srcid><srcstatus/><internalId>604</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>416</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T03b</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2204</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKECONF_TIMEOUT</srcid><srcstatus/><internalId>602</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>417</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T04</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2221</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_MAIN_FCT_HANDLES_TIMERS</srcid><srcstatus/><internalId>601</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>418</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T05</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2238</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_MAIN_FCT_HANDLES_TIMERS</srcid><srcstatus/><internalId>601</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>419</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T06a</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2255</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQCOM_NOCOM_FALSE</srcid><srcstatus/><internalId>583</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>420</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T06b</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2272</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_GOTO_SLEEP_TIMEOUT</srcid><srcstatus/><internalId>543</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>421</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T06c</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2289</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_GOTO_SLEEP_TIMEOUT</srcid><srcstatus/><internalId>543</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>422</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T07</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2306</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_MAIN_FCT_HANDLES_TIMERS</srcid><srcstatus/><internalId>601</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>423</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T08a</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2323</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_NOTOK</srcid><srcstatus/><internalId>534</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>424</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T08b</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2340</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_NOTOK</srcid><srcstatus/><internalId>534</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>425</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T08c</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2357</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_NOTOK</srcid><srcstatus/><internalId>534</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>426</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T09</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2374</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_GOTOSLEEP_NOK</srcid><srcstatus/><internalId>536</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>427</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T10a</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2391</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLEEP_NOTOK</srcid><srcstatus/><internalId>532</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>428</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T10b</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2408</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLEEP_NOTOK</srcid><srcstatus/><internalId>532</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>429</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T11</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2425</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_WAKEUP_GOTOSLEEP_NOK</srcid><srcstatus/><internalId>536</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>430</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T12</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2442</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLEEP_NOTOK</srcid><srcstatus/><internalId>532</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SLEEP_NOTOK_REP_0</srcid><srcstatus/><internalId>533</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>431</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T13</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2459</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQCOM</srcid><srcstatus/><internalId>511</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>432</internalId></specobject>
    <specobject>
      <id>LinSM.Design.Transition.T14</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2476</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQCOM</srcid><srcstatus/><internalId>511</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>433</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSleepSupport.T01a</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2534</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQCOMM_FALSE</srcid><srcstatus/><internalId>507</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>434</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSleepSupport.T01b</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2551</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_REQCOMM_FALSE</srcid><srcstatus/><internalId>507</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>435</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSleepSupport.T02</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2568</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_FULLCOM_NOCOMM_FALSE</srcid><srcstatus/><internalId>504</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>436</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSleepSupport.T03</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2585</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_FULLCOM_NOCOMM_FALSE</srcid><srcstatus/><internalId>504</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>437</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T01a</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2643</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_GOTOSLEEPINDICATIONDET</srcid><srcstatus/><internalId>562</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>438</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T01b</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2660</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLAVESTATES_02</srcid><srcstatus/><internalId>620</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>439</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T01c</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2677</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLAVESTATES_02</srcid><srcstatus/><internalId>620</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>440</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T01d</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2694</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLAVESTATES_02</srcid><srcstatus/><internalId>620</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>441</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T02</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2711</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SILENCE_AFTER_WU_NOCONF</srcid><srcstatus/><internalId>570</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>442</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T03</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2728</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SILENCE_AFTER_WU_NOCONF</srcid><srcstatus/><internalId>570</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_SLAVESTATES_03</srcid><srcstatus/><internalId>621</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>443</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T04</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2745</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLAVESTATES_01</srcid><srcstatus/><internalId>619</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>444</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T05a</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2762</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_IND_CONF_NOREQ_TIMEOUT</srcid><srcstatus/><internalId>568</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>445</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T05b</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2779</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_NOCOM_GOTOSLEEP</srcid><srcstatus/><internalId>569</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>446</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T05c</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2796</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_NOCOM_GOTOSLEEP</srcid><srcstatus/><internalId>569</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>447</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T06a</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2813</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_IND_REQ_NOCONF_TIMEOUT</srcid><srcstatus/><internalId>567</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>448</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T06b</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2830</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_IND_REQ_NOCONF_TIMEOUT</srcid><srcstatus/><internalId>567</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>449</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T07a</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2847</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_IND_REQ_CONF</srcid><srcstatus/><internalId>565</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>450</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T07b</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2864</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_IND_CONF_REQ</srcid><srcstatus/><internalId>566</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>451</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T08a</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2881</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SILENCE_AFTER_WU_NOK</srcid><srcstatus/><internalId>571</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>452</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T08b</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2898</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SILENCE_AFTER_WU_NOK</srcid><srcstatus/><internalId>571</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>453</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T08c</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2915</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SILENCE_AFTER_WU_NOK</srcid><srcstatus/><internalId>571</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>454</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T09a</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2932</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLAVESTATES_02</srcid><srcstatus/><internalId>620</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>455</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T09b</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2949</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SILENCE_AFTER_WU_NOK</srcid><srcstatus/><internalId>571</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>456</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T10</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2966</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLAVESTATES_04</srcid><srcstatus/><internalId>622</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>457</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T11</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>2983</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLAVESTATES_04</srcid><srcstatus/><internalId>622</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>458</internalId></specobject>
    <specobject>
      <id>LinSM.Design.TransitionSlave.T12</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>3000</sourceline>
      <version>1</version>
      <description>&amp;lt;pre&amp;gt;DESIGN&amp;lt;/pre&amp;gt;</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_SLAVESTATES_04</srcid><srcstatus/><internalId>622</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>459</internalId></specobject>
    <specobject>
      <id>LinSM.Design.20093</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/doc/project/design/pdf/LinSM_Design-profiled.xml</sourcefile>
      <sourceline>3021</sourceline>
      <version>1</version>
      <description> If LinSM_ScheduleRequest() is called, the confirmation timer is started.
                If the LinIf does not accept the schedule table request (i.e. LinIf_ScheduleRequest() returns E_NOT_OK) and another timer was running before the LinSM_ScheduleRequest() call, the previous timer is resumed. </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_LINSM_40092</srcid><srcstatus/><internalId>612</internalId></linkedfrom><linkedfrom><srcid>TS_LINSM_40093</srcid><srcstatus/><internalId>613</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>460</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LinSM_DBGINST_001</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/common_req/LinSM_DbgInst_Trace_APIs.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
   Test Dbg
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  VP: Successful compilation test.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.DBGINST001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.DBGINST002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>275</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.DBGINST003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>276</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.DBGINST004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>277</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.DBGINST005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>461</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LinSM_VerifyCodeStub</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/build/reqm/common_req/LinSM_VerifyStub_testspec.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the code stub of the module is consistent with the
    implementation.
  
Test Object: 
    Relocatable post-build configuration macros generation.
  
Test Precondition: 
    Permutation [VerifyStub == true]:
      - Unit test contains its own code stub
      - Module is excluded from generation and compilation
    Permutation [VerifyStub == false]:
      - unit test excludes its own code stub
  
Test Execution: 
    01: Invoke all module APIs
    02: VP(LinSM.EB.Interface.Consistency):
        Unit test compiles (implicitly tested)
  
Test Input: 
  
Test Output: 
    Test is correctly generated and compiled.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.Interface.Consistency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>462</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_30031</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_ComTest_AllOptions/source/application/Application.c</sourcefile>
      <sourceline>23</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_ComTest_AllOptions
  
Test Object: 
    Compile tests with all options enabled.
  
Test Precondition: 
    - All configurable options enabled.
    - LIN Driver Stub is not provided
  
Test Execution: 
    Call all API functions, use generated LinSM_ConfigType constant.
  
Test Input: None.
Test Output: 
    The module compiles and links.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00117</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00155</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00156</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00135</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00132</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>463</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_CBK_H</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_ComTest_Cbk_Header/source/application/Application.c</sourcefile>
      <sourceline>20</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      Test LinSM_Cbk.h declares LinSM callback functions
    
Test Object: 
      LinSM_Cbk.h
    
Test Precondition: 
      - Of the LinSM header files, only LinSM_Cbk.h included
    
Test Execution: 
      01: VP: Call LinSM_ScheduleRequestConfirmation
      02: VP: Call LinSM_GotoSleepConfirmation
      03: VP: Call LinSM_WakeupConfirmation
    
Test Input: 
    
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM_CBK_H</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>464</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_WITHOUT_CBK</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_ComTest_LinSM_Header/source/application/Application.c</sourcefile>
      <sourceline>35</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    A LinSM implementation shall provide a header file LinSM.h that contains all
    data exported from the LinSM - API declarations (except callbacks),
    extern types, and global data.
  
Test Object: 
    LinSM.h
  
Test Precondition: 
  
Test Execution: 
    01: Call all API functions.
  
Test Input: None.
Test Output: 
    The module compiles and links.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>465</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_MANDATORY_INTERFACES</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_ComTest_MandatoryInterfaces/source/application/Application.c.m4</sourcefile>
      <sourceline>32</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that only the mandatory interfaces are actually required: 
    - BswM_LinSM_CurrentSchedule
    - BswM_LinSM_CurrentState
    - ComM_BusSM_ModeIndication
    - ComM_BusSM_BusSleepMode
    - LinIf_GotoSleep
    - LinIf_Wakeup
    - LinIf_ScheduleRequest 
    and LinIf_Wakeup 
  
Test Object: 
    LinSM.h
  
Test Precondition: 
    1st permutation: No slave node is configured.
    2nd permutation: No master node is configured.
    3rd permutation: Some master and some slave nodes configured.
  
Test Execution: 
    01: Call all API functions.
  
Test Input: None.
Test Output: 
    The module compiles and links.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM_Mandatory_Interfaces</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00242</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>466</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_30032</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_ComTest_NoErrDetect/source/application/Application.c</sourcefile>
      <sourceline>22</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_ComTest_NoErrDetect
  
Test Object: 
    Development error detection disabled.
  
Test Precondition: 
    All configurable options enabled, except LinSMDevErrorDetect. DET stubs are not provided.
  
Test Execution: 
    Call all API functions, use generated LinSM_ConfigType constant.
  
Test Input: None.
Test Output: 
    The module compiles and links,
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00117</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00015_1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00229_Sleep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>238</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00138_DET</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00229_Wakeup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>467</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_30034</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_ComTest_NoVerInfo/source/application/Application.c</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_ComTest_NoVerInfo
  
Test Object: 
    LinSMVersionInfoApi disabled.
  
Test Precondition: 
    All configurable options enabled, except LinSMVersionInfoApi. Provide an own implementation of
    LinSM_GetVersionInfo.
  
Test Execution: 
    Call all API functions.
  
Test Input: None.
Test Output: 
    The module compiles and links.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>468</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_CBK_FCT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_ComTest_Only_Cbk_Header/source/application/Application.c</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Include only LinSM_Cbk.h and verify that call back funtions are provided.
  
Test Object: 
    LinSM_Cbk.h
  
Test Precondition: 
  
Test Execution: 
    01: Call callback API functions
  
Test Input: None.
Test Output: 
    The module compiles and links.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>469</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_OPTIONAL_INTERFACES</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_ComTest_OptionalInterfaces/source/application/Application.c</sourcefile>
      <sourceline>22</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the usage of LinIf_SetTrcvMode optional API
    is indeed optional LinIf_SetTrcvMode() from LinIf is used.
  
Test Object: 
    LinSM.h
  
Test Precondition: None.
Test Execution: 
    01: Call the optional API LinIf_SetTrcvMode()
  
Test Input: None.
Test Output: 
    The module compiles and links.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00138_Trcv_Mode</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>470</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LinSM_SCHM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_ComTest_SchM/source/application/LinSM_ComTest_SchM.c</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   This test checks that the LinSM module's generator generates a
   syntactically and semantically valid basic software module
   description (BSWMD) when the generator mode "generate_swcd" is
   invoked. It further tests that the SchM exclusive area API is
   correctly generated by the RTE generator based on the LinSM module's
   generated BSWMD.

Test Object: None.
Test Precondition: None.
Test Execution: 
  Ts5 build environment steps:
    The module configuration generator produces the BSWMD containing
    the information on the required exclusive areas.  This information
    is then used by the RTE generator to create the required SchM API
    for these exclusive areas. This implicitly verifies that the BSWMD
    is syntactically and semantically correct.  LinSM's static code
    makes use of this API (and the respective #defines) thus causing
    compile/link errors if the BSWMD does not contain the correct
    information.

Test Input: 
  Usage of a common ASR configuration having all adjacent ASR modules
  configured.

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.BSWMDGeneration_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.BSWMDGeneration_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.BSWMDGeneration_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>471</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_30035</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_ComTest_SleepSupp/source/application/Application.c.m4</sourcefile>
      <sourceline>23</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Verify that a configuration with sleep support m4_ifelse(PM_SleepSupportType,None,disabled,enabled) for m4_ifelse(m4_ifelse(PM_SleepSupportType,Mixed,eq,ne),ne,all,some) channels is compilable
  
Test Object: 
    Sleep support set as PM_SleepSupportType.
  
Test Precondition: 
    All configurable options enabled, m4_ifelse(PM_SleepSupportType,None,except,including) LinSMSleepSupport.
  
Test Execution: 
    Call all API functions, use generated LinSM_ConfigType constant.
  
Test Input: None.
Test Output: 
    The module compiles and links.
  </description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.ECUC_LinSM_00143</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>472</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_30036</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_ComTest_SpecialLin/source/application/Application.c</sourcefile>
      <sourceline>22</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_ComTest_SpecialLin
  
Test Object: 
    No usage of LIN Driver functions
  
Test Precondition: 
    All configurable options enabled. LinIf stub shall be configured to provide only those interfaces
    required by LinSM.
  
Test Execution: 
    Call all API functions, use generated LinSM_ConfigType constant.
  
Test Input: None.
Test Output: 
    The module compiles and links.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00117</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00155</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00156</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00135</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00132</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>473</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_SYMBOLICNAMEVALUES</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_ComTest_SymbolicNameValues/source/application/Application.c</sourcefile>
      <sourceline>18</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      Check that macros are generated for configuration parameters which are specified as
      SYMBOLICNAMEVALUES (LinSMScheduleIndex)
      Note: Test modified due to ASCLINSM-377.
    
Test Object: None.
Test Precondition: 
      - Of the LinSM header files, only LinSM.h included
    
Test Execution: 
      Verify Symbolic name values for parameter LinSMScheduleIndex:

      01: VP: Symbol LinSMConf_LinSMSchedule_NULL_SCHEDULE_0 is defined as 0

      02: VP: Symbol LinSMConf_LinSMSchedule_LinSMSchedule_0_0 is defined as 1

      03: VP: Symbol LinSMConf_LinSMSchedule_LinSMSchedule_0_1 is defined as 2

      04: VP: Symbol LinSMConf_LinSMSchedule_LinSMSchedule_0_2 is defined as 3

      05: VP: Symbol LinSMConf_LinSMSchedule_LinSMSchedule_1_0 is defined as 2

      06: VP: Symbol LinSMConf_LinSMSchedule_LinSMSchedule_1_1 is defined as 3

      07: VP: Symbol LinSMConf_LinSMSchedule_LinSMSchedule_1_2 is defined as 1

      08: VP: Symbol LinSMConf_LinSMSchedule_NULL_SCHEDULE_1 is defined as 0

      09: VP: Symbol LinSMConf_LinSMSchedule_LinSMSchedule_2_0 is defined as 3

      10: VP: Symbol LinSMConf_LinSMSchedule_LinSMSchedule_2_1 is defined as 2

      11: VP: Symbol LinSMConf_LinSMSchedule_NULL_SCHEDULE_2 is defined as 0

    
Test Input: 
    
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>474</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_GenTest_01001_Err_LinSM_Channels_Same_ComM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Use invalid configuration(2 LinSM channels linked to the same ComM channel)
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.ConfigCheck1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>475</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01002_Err_LinSM_ScheduleIndexRef_Empty</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>44</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Use invalid configuration(invalid LinSMScheduleIndexRef)
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.ConfigCheck2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>476</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01003_Err_Schedule_Referenced_More_Than_Once</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>61</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Use invalid configuration(2 LinSM schedule tables linked to same LinIf schedule table)
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.ConfigCheck4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>477</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01004_Schedule_Channel_Missmatch</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>78</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Use invalid configuration
    (LinSM schedule table`s channel not the same with LinIf schedule table`s channel)
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.ConfigCheck6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>478</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01005_LinIfScheduleTableIndex_Greater_Than_255</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>96</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Use invalid configuration(LinIfScheduleId greater than 255)
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.ConfigCheck5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>479</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01006_LinIfScheduleTableIndex_Empty</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>113</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Use invalid configuration(Invalid LinIfScheduleTableIndex )
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.ConfigCheck3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>480</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01007_Sleep_Support_Conflict</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>130</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Use invalid configuration
    (LinSMSleepSupport DISABLED
    and
    LinSMTransceiverPassiveMode ENABLED and set as FALSE)
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.ConfigCheck7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>481</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01008_LinSMScheduleIndex_0_Name_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>150</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Use invalid configuration
    (LinSMScheduleIndex set as 0
    AND
    the name of the LinSMSchedule != NULL_SCHEDULE_&lt;index&gt;)
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.ConfigCheck8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>482</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01009_NULL_SCHEDULE_Index_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>170</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Use invalid configuration
    (Name of the LinSMSchedule == NULL_SCHEDULE_&lt;index&gt;
    AND
    the value of the LinSMScheduleIndex != 0)
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.ConfigCheck9</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>483</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01010_Err_Schedule_Name_Not_Unique</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>190</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Use invalid configuration
    Two different schedule tables have the same name
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.ConfigCheck10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>484</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01011_Err_Slave_ComMNmVar</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>208</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Use invalid configuration
    Referenced ComM channel does not have ComMNmVariant SLAVE_ACTIVE.
  
Test Object: None.
Test Precondition: 
    A node configured as slave.
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM_ComMNmVariantSlaveNode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>485</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01012_Err_Slave_SleepSupport</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>227</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Use invalid configuration
    LinSM slave node has no sleep support.
  
Test Object: None.
Test Precondition: 
    A node configured as slave.
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM_SleepSupportSlaveNode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>486</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01013_Err_Slave_SilenceTimeoutValue</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Compile/IN/LinSM_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>246</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Use invalid configuration
    LinSMSilenceAfterWakeupTimeout translates in over 65534 main function periods.
  
Test Object: None.
Test Precondition: 
    A node configured as slave.
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM_SilenceTimeoutValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>487</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_SCHREQ_UNINIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>175</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_ScheduleRequest() with LinSM uninitialized
  
Test Object: 
    Verify that LinSM_ScheduleRequest() reports LINSM_E_UNINIT DET if LinSM is uninitialized.
  
Test Precondition: 
    LinSM uninitialized
  
Test Execution: 
    01: VP(LINSM116): Call LinSM_ScheduleRequest() with LinSM uninitialized
        and verify that it returns E_NOT_OK
    02: VP(LINSM053_LINSM_E_UNINIT, LINSM116, LINSM161):
        Det_ReportError is called with LINSM_E_UNINIT (error code 0x00), Service ID 0x10.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00116</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>488</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GETVER_UNINIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>235</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_GetVersionInfo() with LinSM uninitialized
  
Test Object: 
    LinSM_GetVersionInfo()
  
Test Precondition: 
    LinSM uninitialized
  
Test Execution: 
    01: Call LinSM_GetVersionInfo() with LinSM uninitialized
    02: VP(LINSM165): Verify that no error is reported
        after calling LinSM_GetVersionInfo();
  
Test Input: None.
Test Output: .
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00165</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>489</internalId></specobject>
    <specobject>
      <id>TS_LINSM_CURMOD_UNINIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>282</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_GetCurrentComMode() with LinSM uninitialized
  
Test Object: 
    Verify that LinSM_GetCurrentComMode() reports LINSM_E_UNINIT DET if LinSM is uninitialized.
  
Test Precondition: 
    LinSM uninitialized
  
Test Execution: 
    01: VP(LINSM125): Call LinSM_GetCurrentComMode() with LinSM uninitialized
        and check that it returns E_NOT_OK
    02: Verify that the current communication mode is NO_COM
    03: VP(LINSM053_LINSM_E_UNINIT, LINSM125): Verify that
        Det_ReportError is called with LINSM_E_UNINIT (error code 0x00), Service ID 0x11
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00125</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>490</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQNOCOM_UNINIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>346</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_RequestComMode() with LinSM uninitialized
  
Test Object: 
    LinSM_RequestComMode()
  
Test Precondition: 
    LinSM uninitialized
  
Test Execution: 
    01: VP(LINSM128, SWS_LinSM_00035_EB): Call LinSM_RequestComMode(NO COM) with LinSM uninitialized
        and verify that it returns E_NOT_OK
    02: VP(LINSM053_LINSM_E_UNINIT, LINSM128): Verify that
        Det_ReportError is called with LINSM_E_UNINIT (error code 0x00), Service ID 0x12
    03: VP(SWS_LinSM_10209_UNINIT): Check that LinIf_GotoSleep() wasn't called in UNINIT state
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_10209_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00035_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>491</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQFULLCOM_UNINIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>408</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If LinSM is not initialized and ComM requests TST_FULL_COMMUNICATION,
    LinSM will not call LinIf_Wakeup()
  
Test Object: 
    LinSM_RequestComMode()
  
Test Precondition: 
    LinSM uninitialized
  
Test Execution: 
    01: VP(LINSM128): Call LinSM_RequestComMode(FULL COM) with LinSM uninitialized
        and verify that it returns E_NOT_OK
    02: VP(LINSM053_LINSM_E_UNINIT, LINSM128): Verify that
        Det_ReportError is called with LINSM_E_UNINIT (error code 0x00), Service ID 0x12.
    03: VP(SWS_LinSM_00178_UNINIT): Check that LinIf_Wakeup() wasn't called in UNINIT state
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00178_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>492</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKECONF_UNINIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>469</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_WakeupConfirmation() with LinSM uninitialized
  
Test Object: 
  LinSM_WakeupConfirmation()
  
Test Precondition: 
    LinSM uninitialized
  
Test Execution: 
    01: Call LinSM_WakeupConfirmation() with LinSM uninitialized
    02: VP(LINSM053_LINSM_E_UNINIT, LINSM134): Verify that
        Det_ReportError() is called with LINSM_E_UNINIT (error code 0x00), Service ID 0x21
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00134</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>493</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SLEEPCONF_UNINIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>523</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_GotoSleepConfirmation() with LinSM uninitialized
  
Test Object: 
    LinSM_GotoSleepConfirmation()
  
Test Precondition: 
    LinSM uninitialized
  
Test Execution: 
    01: Call LinSM_GotoSleepConfirmation() with LinSM uninitialized
    02: VP(LINSM053_LINSM_E_UNINIT, LINSM137): Verify that
        Det_ReportError() is called with LINSM_E_UNINIT (error code 0x00), Service ID 0x22
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>494</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCHREQCONF_UNINIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>577</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_ScheduleRequestConfirmation() with LinSM uninitialized.
  
Test Object: 
    LinSM_ScheduleRequestConfirmation()
  
Test Precondition: 
    LinSM uninitialized
  
Test Execution: 
    01: Call LinSM_ScheduleRequestConfirmation() with LinSM uninitialized
    02: VP(LINSM053_LINSM_E_UNINIT, LINSM131): Verify that
        Det_ReportError() is called with LINSM_E_UNINIT (error code 0x00), Service ID 0x20
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00131</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>495</internalId></specobject>
    <specobject>
      <id>TS_LINSM_MODE_UNINIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>631</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if the module is not initialized the state TST_NO_COMMUNICATION is returned
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
    LinSM uninitialized
  
Test Execution: 
    01: VP(LINSM125): Call LinSM_GetCurrentComMode and verify that it returns E_NOT_OK
    02: VP(LINSM182): Verify that the TST_NO_COMMUNICATION is the curent state
    03: VP(LINSM125): Verify that TST_E_UNINIT was reported
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00125</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00182</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>496</internalId></specobject>
    <specobject>
      <id>TS_LINSM_INIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>688</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that no other API function was called from within the function LinSM_Init
  
Test Object: 
    LinSM_Init function
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02: VP(LINSM151) Check that no other API function was called from within LinSM_Init function
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00151</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>497</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCH_REQ_CONF</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>735</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If LinIf signals switching to NULL_SCHEDULE during initialization or after
    a goto sleep request, DET will not be called, only BswM(CurrentSchedule)
  
Test Object: 
    LinSM_ScheduleRequestConfirmation()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02: Call LinSM_ScheduleRequestConfirmation() using NULL_SCHEDULE
    03: VP(LINSM_ScheduleRequestConfirmation_NullSchedule):
        Verify that switching to NULL_SCHEDULE calls BswM
    04: VP(LINSM_ScheduleRequestConfirmation_NullSchedule):
        Verify that switching to NULL_SCHEDULE doesn't call the DET
    05: Request FULL_COM
    06: Call LinSM_ScheduleRequestConfirmation() using NULL_SCHEDULE
    07: VP(LINSM_ScheduleRequestConfirmation_NullSchedule):
        Verify that switching to NULL_SCHEDULE calls BswM
    08: VP(LINSM_ScheduleRequestConfirmation_NullSchedule):
        Verify that switching to NULL_SCHEDULE doesn't call the DET
    09: Confirm and bring the module in FULL_COM
    10: Call LinSM_RequestComMode(NO_COM)
    11: Call LinSM_ScheduleRequestConfirmation() using NULL_SCHEDULE
    12: VP(LINSM_ScheduleRequestConfirmation_NullSchedule):
        Verify that switching to NULL_SCHEDULE calls BswM
    13: VP(LINSM_ScheduleRequestConfirmation_NullSchedule):
        Verify that switching to NULL_SCHEDULE doesn't call the DET
    14: Call LinSM_GotoSleepConfirmation() and get the module in a clean state
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM_ScheduleRequestConfirmation_NullSchedule</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>498</internalId></specobject>
    <specobject>
      <id>TS_LINSM_INIT_RESET</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>889</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that calling LinSM_Init the global variables will be set to default value
  
Test Object: 
    LinSM_Init function
  
Test Precondition: 
  
Test Execution: 
    01: Call LinSM_RequestComMode(FULL COM) and verify that it returns E_OK
    02: Initialize LinSM
    03: Call some main function, enough to trigger a timeout on every channel
    04: Verify that after calling a sufficient number of LinSM_MainFunction() no timeout occurred
    05: VP(LINSM0211_EB) Verify that the current communication mode is NO_COM by calling
        LinSM_ScheduleRequest() which returns E_NOT_OK and reports LINSM_E_NOT_IN_RUN_SCHEDULE
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM0211_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>499</internalId></specobject>
    <specobject>
      <id>TS_LINSM_TIMEOUT_NOT_DIVISIBLE</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>964</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If a timeout is not a multiple of LinSMMainProcessingPeriod, it shall be rounded up
    If LinSM_WakeupConfirmation was not called, LinSM_MainFunction will call LinIf_Wakeup() until
    timer reaches 0, and report CONFIRMATION_TIMEOUT to DET.
  
Test Object: 
    LinSM_MainFunction
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02: Call LinSM_RequestComMode(FULL COM), check that LinIf_Wakeup() was called,
        and verify that it returns E_OK
    03: Call LinSM_MainFunction() for channel 4 timeout value times,
        and stop when only 1 more LinSM_MainFunction() call will trigger a timeout
    04: Verify that the timer did not occur yet
    05: Call 254 MainFunction and verify that LinIf_Wakeup() is called each time
    06: Verify that the timeout did not occur yet
    07: VP(): Call one more MainFunction and verify that CONFIRMATION_TIMEOUT is reported to DET
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00159_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>500</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCHREQ_NONEXCHANNEL</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>1057</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_ScheduleRequest() with nonexistent channel
  
Test Object: 
    LinSM_ScheduleRequest()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02: VP(LINSM114): Call LinSM_ScheduleRequest() with an unconfigured channel and
        check that it returns E_NOT_OK
    03: VP(LINSM053_LINSM_E_NONEXISTENT_NETWORK, LINSM114):
         Check that Det_ReportError() is called with
         LINSM_E_NONEXISTENT_NETWORK (error code 0x20),Service ID 0x10
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_NONEXISTENT_NETWORK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>501</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQ_NOCOMM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>1124</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that requesting NO_COMMUNICATION when the current state is NO_COMMUNICATION
    won't call LinIf_GotoSleep() and will return E_OK.
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02: VP(LINSM0210, SWS_LinSM_00035_EB): Verify that requesting NO_COM while the active state is
        LINSM_NO_COM, LinSM_RequestComMode() shall return E_OK,
        and no other function will be called
    03: VPSWS_LinSM_10209_NOCOMM)
        Check that requesting NO_COM in NO_COM doesn't call LinIf_GotoSleep()
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM0210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_10209_NOCOMM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00035_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>502</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQ_NOCOMM_FALSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>1184</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that requesting NO_COMMUNICATION when the current state is NO_COMMUNICATION
    and LinSMSleepSupport is false won't call LinIf_GotoSleep() and return E_OK.
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02: VP(LINSM0210): Request NO_COMMUNICATION and verify that it returns E_OK
    03: VP(SWS_LinSM_10209_SLEEP_FALSE):
        Check that requesting NO_COM in NO_COM with LinSMSleepSupport set to false
        LinIf_GotoSleep() will not be called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_10209_SLEEP_FALSE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LINSM0210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>503</internalId></specobject>
    <specobject>
      <id>TS_LINSM_FULLCOM_NOCOMM_FALSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>1241</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that requesting NO_COMMUNICATION when the current state is FULL_COMMUNICATION
    and LinSMSleepSupport is false, the change will be done immediately
    and ComM and BswM will be called
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02: VP(TransitionSleepSupport.T02, LINSM033_EB):
        Request FULL_COM and verify that it changes the state directly, calling BswM and ComM
    03: VP(SWS_LinSM_00178_SLEEP_FALSE_2): Verify that LinIf_Wakeup was not called
    04: VP(LINSM0210): Verify that if we request FULL_COM, while the state is FULL_COM
        E_OK will be returned without any other action
    05: Verify that the current communication mode is FULL_COM(requesting schedule)
    06: VP(LINSM193, TransitionSleepSupport.T03):
        Request NO_COM and verify that the mode changes immediately and ComM and BswM are called
    07: Verify that the module is in NO_COM by calling LinSM_ScheduleRequest()
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.TransitionSleepSupport.T02</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>436</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSleepSupport.T03</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00193</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM033_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00178_SLEEP_FALSE_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LINSM0210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>504</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQ_NOCOM_SLEEP_FALSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>1373</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that requesting NO_COMMUNICATION when the current state is FULL_COMMUNICATION
    and LinSMSleepSupport is false won't call LinIf_GotoSleep()
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module bring it to FULL_COM mode on a channel with sleepsupport = false
    02: VP(SWS_LinSM_10209_FULL_SLEEP_FALSE):
        Verify that the current communication mode is FULL_COM(requesting schedule)
    03: VP(SWS_LinSM_10209_FULL_SLEEP_FALSE): Request NO_COM on a channel with sleepsupport = false
        and verify it returns E_OK
    04: VP(SWS_LinSM_10209_FULL_SLEEP_FALSE): Verify that LinIf_GotoSleep() was not called
    05: VP(SWS_LinSM_10209_FULL_SLEEP_FALSE):
        Verify that the current communication mode is NO_COM(requesting schedule)
    06: VP(LINSM0211_EB):
        Verify that requesting schedule in NO COM state returns E_NOT_OK
    07: VP(LINSM0211_EB):
        Verify that requesting schedule in NO COM reports LINSM_E_NOT_IN_RUN_SCHEDULE
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_10209_FULL_SLEEP_FALSE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LINSM0211_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>505</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQ_FULLCOMM_FALSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>1497</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that requesting FULL_COMMUNICATION when the current state is FULL_COMMUNICATION
    and LinSMSleepSupport is false won't call LinIf_GotoSleep() and will return E_OK
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module and request FULL_COM on a channel with sleepsupport = false
    02: VP(SWS_LinSM_00178_SLEEP_FALSE):
        Verify that the current communication mode is FULL_COM(requesting schedule)
    03: VP(SWS_LinSM_00178_SLEEP_FALSE):
        Request FULL_COM on a channel with sleepsupport = false and state = FULL_COM and
        verify it returns E_OK
    04: VP(SWS_LinSM_00178_SLEEP_FALSE):
        Verify that LinIf_Wakeup() or other api were not called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00178_SLEEP_FALSE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>506</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQCOMM_FALSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>1585</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If LinSM_RequestComMode(FULL_COM) is called and LinSMSleepSupport is false,
    the mode shall be set to LINSM_FULL_COM and BswM/ComM shall be notified of the mode change.
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: VP(TransitionSleepSupport.T01a): Initialize module
    02: Request FULL_COM
    03: VP(LINSM049_EB): Verify that ComM and BswM are notified of the mode change
    04: Verify that the current communication mode is FULL_COM(requesting schedule and confirm)
    05: Call LinSM_Init
    06: VP(TransitionSleepSupport.T01b):
        Verify that the current communication mode is NO_COM(requesting schedule)
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM049_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSleepSupport.T01a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>434</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSleepSupport.T01b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>435</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>507</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCHREQ</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>1682</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if LinIf_ScheduleRequest returns E_OK,
    LinSM_ScheduleRequest shall also return E_OK.
  
Test Object: 
    LinSM_ScheduleRequest
  
Test Precondition: 
  
Test Execution: 
   01: Set LinIf_ScheduleRequest to return E_OK
   02: Initialize module and bring it to FULL_COMM mode
   03: Call LinSM_ScheduleRequest
   04: VP(SWS_LinSM_00168_1): Check that LinSM_ScheduleRequest returns E_OK
   05: VP(LINSM079): Verify that LinIf_ScheduleRequest() is called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00168_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>270</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00079</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>508</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQFULLCOM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>1769</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if the module is on FULL_COMMUNICATION mode and we request FULL_COMMUNICATION
    LinIf_Wakeup() will not be called
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
   01: Initialize LinSM and bring it to FULL_COMM mode
   02: Call LinSM_RequestComMode(FULL_COM)
   03: VP(SWS_LinSM_00178_FULLCOMM): Verify that calling LinSM_RequestComMode returns E_OK
   04: VP(SWS_LinSM_00178_FULLCOMM): Check that LinIf_Wakeup() was not called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00178_FULLCOMM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>509</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKEUP_AND_WAKEUPCONF_SAME_CONTEXT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>1846</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if LinIf_Wakeup is called and LinSM_WakeupConfirmation is reported in the same
    context, everything will work as supposed to
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
   01: Initialize LinSM
   02: Prepare the stub to call LinSM_WakeupConfirmation when LinIf_Wakeup is called
   03: Call LinSM_RequestComMode
   04: VP(LINSM033_EB):Verify that LinIf_Wakeup, ComM and BswM are called
        (EB_STUBS stores LinIf_Wakeup after the callout, that's why is called the last one)
   05: Reset LinIf_Wakeup_Stub.Callout
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM033_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>510</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQCOM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>1927</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If LinSM_RequestComMode is called and another request is in process on the same network,
    LinSM_RequestComMode shall return E_OK and process the request
  
Test Object: 
    LinSM_RequestComMode()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02: Call LinSM_RequestComMode(FULL COM) and check that it returns E_OK
    03: Verify that LinIf_Wakeup() was called
    04: VP(LINSM174)Request NO_COM and verify that it returns E_OK
    05: VP(LINSM174, T13): Verify that the first request was dropped and the new one is processed
        (switch from WAKEUP state to GOTO_SLEEP)
    06: VP(LINSM174):Request FULL_COM and verify that it returns E_OK
    07: VP(LINSM174, T14): Verify that the first request was dropped and the new one is processed
    (switch from GOTO_SLEEP state to WAKEUP)
    08: Confirm and bring the module to FULL_COM
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00174</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>432</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T14</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>511</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQSAMECOM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>2031</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If the requested mode is the same as the current active mode
    the function shall return directly E_NOT_OK
  
Test Object: 
    LinSM_RequestComMode()
  
Test Precondition: 
  
Test Execution: 
    01: VP(Transition.T01a, LINSM152): Initialize LinSM
    02: VP(LINSM0210):
        Verify that requesting NO_COM while being in NO_COM state returns E_OK
    03: Bring the module in FULL_COMMUNICATION state
    04: Request FULL_COMM while being in FULL_COMM state
    05: VP(LINSM0210): Verify that requesting FULL_COMM while being in FULL_COMM state
        returns E_OK
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM0210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T01a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>411</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>512</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCHREQ_ACTIVE_REQ</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>2121</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If LinSM_ScheduleRequest is called and another request is in process on the network
    then LinSM_ScheduleRequest will directly return E_NOT_OK
  
Test Object: 
    LinSM_ScheduleRequest
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module
    02: Loop over all 6 configured channels and bring them to FULL_COM
        (Channel 3 has SleepSupport = FALSE, so LinIf_Wakeup won't be called
        and LinSM_WakeupConfirmation doesn't have to be called)
    03: Call LinSM_ScheduleRequest()
    04: VP(LINSM163): Check that LinSM_ScheduleRequest returns E_OK
    05: Check that LinIf_ScheduleRequest() was called
    06: Call LinSM_ScheduleRequest() without calling LinSM_ScheduleRequestConfirmation
        so that the first request will still be in progress
    07: VP(LINSM163): Verify that the second ScheduleRequest hasn't called any other function
    08: VP(LINSM163): Verify that second call of the LinSM_ScheduleRequest() returns E_NOT_OK
    09: Call LinSM_ScheduleRequestConfirmation() and confirm the original request
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00163</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>513</internalId></specobject>
    <specobject>
      <id>TS_LINSM_CURMOD_NONEX_CHANNEL</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>2240</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_GetCurrentComMode() reports LINSM_E_NONEXISTENT_NETWORK error
    if channel does not exist.
  
Test Object: 
    LinSM_GetCurrentComMode()
  
Test Precondition: 
  
Test Execution: 
   01: Initialize LinSM
   02: VP(LINSM123): Verify that calling LinSM_GetCurrentComMode
       using a non existent channel returns E_NOT_OK
   03: VP(LINSM053_LINSM_E_NONEXISTENT_NETWORK, LINSM123):
        Verify that Det_ReportError is called with
        LINSM_E_NONEXISTENT_NETWORK (error code 0x20), Service ID 0x11
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_NONEXISTENT_NETWORK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00123</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>514</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQCOM_NONEX_CHANNEL</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>2308</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_RequestComMode() reports LINSM_E_NONEXISTENT_NETWORK error
    if channel does not exist.
  
Test Object: 
  LinSM_RequestComMode()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02: VP(LINSM127): Call LinSM_RequestComMode(FULL COM) using a non existent channel
        and check that it returns E_NOT_OK
    03: VP(LINSM053_LINSM_E_NONEXISTENT_NETWORK, LINSM127):
         Verify that Det_ReportError is called with
         LINSM_E_NONEXISTENT_NETWORK (error code 0x20), Service ID 0x12
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_NONEXISTENT_NETWORK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00127</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>515</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKECONF_NONEXCHANNEL</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>2375</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_WakeupConfirmation() reports LINSM_E_NONEXISTENT_NETWORK error
    if channel does not exist.
  
Test Object: 
    LinSM_WakeupConfirmation()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02: Call LinSM_WakeupConfirmation() using a non existent channel
    03: VP(LINSM053_LINSM_E_NONEXISTENT_NETWORK, LINSM133):
        Verify that Det_ReportError is called with
        LINSM_E_NONEXISTENT_NETWORK (error code 0x20), Service ID 0x21
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_NONEXISTENT_NETWORK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00133</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>516</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SLEEPCONF_NONEXCHANNEL</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>2439</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_GotoSleepConfirmation() reports
    LINSM_E_NONEXISTENT_NETWORK error if channel does not exist.
  
Test Object: 
    LinSM_GotoSleepConfirmation()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02: Call LinSM_GotoSleepConfirmation() using a non existent channel
    03: VP(LINSM053_LINSM_E_NONEXISTENT_NETWORK, LINSM136):
        Verify that Det_ReportError is called with
        LINSM_E_NONEXISTENT_NETWORK (error code 0x20), Service ID 0x22
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_NONEXISTENT_NETWORK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00136</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>517</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCHREQCONF_NONEXCHANNEL</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>2502</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_ScheduleRequestConfirmation() reports
    LINSM_E_NONEXISTENT_NETWORK error if channel does not exist.
  
Test Object: 
    LinSM_ScheduleRequestConfirmation()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02: Call LinSM_ScheduleRequestConfirmation() using a non existent channel
    03: VP(LINSM053_LINSM_E_NONEXISTENT_NETWORK, LINSM130):
         Verify that Det_ReportError is called with
         LINSM_E_NONEXISTENT_NETWORK (error code 0x20), Service ID 0x20
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_NONEXISTENT_NETWORK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>518</internalId></specobject>
    <specobject>
      <id>TS_LINSM_INIT_NULLPTR</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>2565</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_Init() does not report a DET if a null pointer is passed to it.
  
Test Object: 
    LinSM_Init()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM with a null pointer as argument
    02: VP(LINSM0218_EB) Check that Det_ReportError() was not called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM0218_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>519</internalId></specobject>
    <specobject>
      <id>TS_LINSM_INIT_PARAM_NONNULL</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>2609</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_Init() does not report a DET if a non-null pointer is passed to it.
  
Test Object: 
    LinSM_Init()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM with a non-null pointer
    02: VP(LINSM0218_EB) Check that Det_ReportError() was not called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM0218_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>520</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GETVER_NULLPTR</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>2653</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_GetVersionInfo() reports LINSM_E_PARAMETER_POINTER DET if a
    null pointer is passed to it.
  
Test Object: 
    LinSM_GetVersionInfo()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02: Call LinSM_GetVersionInfo() with a null pointer
    03: VP(LINSM053_LINSM_E_PARAMETER_POINTER, SWS_LinSM_00119):
        Verify that Det_ReportError is called with
        LINSM_E_PARAMETER_POINTER (error code 0x40), Service ID 0x02
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_PARAMETER_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00119</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>521</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GETCURCOMMODE_NULLPTR</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>2717</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_GetCurrentComMode() reports LINSM_E_PARAMETER_POINTER DET if
    a null pointer is passed to it.
  
Test Object: 
    LinSM_GetCurrentComMode()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02: VP(SWS_LinSM_00124): Verify that calling LinSM_GetCurrentComMode()
        using a null pointer returns E_NOT_OK
    03: VP(LINSM053_LINSM_E_PARAMETER_POINTER, SWS_LinSM_00124):
        Verify that Det_ReportError() is called with
        LINSM_E_PARAMETER_POINTER (error code 0x40), Service ID 0x11
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_PARAMETER_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00124</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>522</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQCOM_SILENT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>2783</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_RequestComMode() with SILENT mode
  
Test Object: 
    LinSM_RequestComMode()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02:VP(LINSM191): Verify that calling LinSM_RequestComMode() using
       TST_SILENT_COMMUNICATION mode will return E_OK
    03:VP(LINSM183_EB):Verify that the request is ignored and the state is still NO_COM
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM183_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>523</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQCOM_MODEINVALID</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>2846</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_RequestComMode() reports LINSM_E_PARAMETER DET if the mode
    is out of range.
  
Test Object: 
    LinSM_RequestComMode()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02: VP(LINSM191): Verify that calling LinSM_RequestComMode() with invalid mode
        will return E_NOT_OK
    03: VP(LINSM053_LINSM_E_PARAMETER):
         Verify that Det_ReportError() is called with
         LINSM_E_PARAMETER (error code 0x30), Service ID 0x12
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_PARAMETER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>267</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>524</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GOTO_SLEEP</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>2911</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if the state is FULL_COMM and ComM requests NO_COMM and sleepsupport = true 
    LinSM shall call LinIf_GotoSleep()
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module and bring it to FULL_COMM mode
    02: Call LinSM_RequestComMode(NO_COMM)
    03: VP(SWS_LinSM_10208): Verify that LinIf_GotoSleep() it's transmitted on the requested network
    04: Verify that the NO_COM state has been successfully changed
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_10208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>525</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCHREQ_MODCHANGE</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>3009</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_ScheduleRequest doesn't work when the module is currently changing the state
  
Test Object: 
    LinSM_ScheduleRequest
  
Test Precondition: 
  
Test Execution: 
   01: Initialize module and request FULL_COMM
   02: VP(LINSM0211_EB): Verify that if LinSM_ScheduleRequest is called when
       LinSM_WakeupConfirmation is waited it will return E_NOT_OK
       and report to DET LINSM_E_NOT_IN_RUN_SCHEDULE
   03: Call LinSM_WakeupConfirmation and bring the module to FULL_COM
   04: Call LinSM_RequestComMode(NO_COMM)
   05: VP(LINSM0211_EB): Verify that if LinSM_ScheduleRequest is called when
       LinSM_GotoSleepConfirmation is waited it will return E_NOT_OK
       and report to DET LINSM_E_NOT_IN_RUN_SCHEDULE
   06: Call LinSM_GotoSleepConfirmation and bring the module to NO_COM
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM0211_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>526</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCHREQ_MODCHANGE_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>3129</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_ScheduleRequest reports LINSM_E_NOT_IN_RUN_SCHEDULE
    and returns E_NOT_OK if LinSM_RequestComMode is called with FULL_COMM and
    LinIf_Wakeup returns E_NOT_OK.

    Verify that LinSM_ScheduleRequest returns E_NOT_OK if LinSM_RequestComMode
    is called with NO_COMM and LinIf_GotoSleep returns E_NOT_OK.
  
Test Object: 
    LinSM_ScheduleRequest
  
Test Precondition: 
  
Test Execution: 
    01: Set return value of LinIf_Wakeup to E_NOT_OK
    02: Initialize module and request FULL_COMM and verify that LinIf_Wakeup
        was called
    03: VP(LINSM0211_EB): Verify that if LinSM_ScheduleRequest is called when
        NO_COMM is ongoing it will return E_NOT_OK and report to DET
        LINSM_E_NOT_IN_RUN_SCHEDULE
    04: Set return value of LinIf_Wakeup to E_OK
    05: Call LinSM_MainFunction() to trigger another LinIf_Wakeup call
        and verify that it was called
    06: Call LinSM_WakeupConfirmation and bring the module to FULL_COM
    07: Set return value of LinIf_GotoSleep to E_NOT_OK
    08: Call LinSM_RequestComMode(NO_COMM) and verify that goto sleep was requested
    09: VP(LinSM.EB.ScheduleRequestOngoingTransition): Verify that if 
        LinSM_ScheduleRequest is called when NO_COMM is ongoing it will 
        return E_NOT_OK 
    10: Call LinSM_MainFunction() to trigger another LinIf_GotoSleep call
        and verify that it was called
    11: VP(LinSM.EB.ScheduleRequestOngoingTransition): Verify that if 
        LinSM_ScheduleRequest is called when NO_COMM is ongoing it will
        return E_NOT_OK 
    12: Set return value of LinIf_GotoSleep to E_OK
    13: Call LinSM_MainFunction() to trigger another LinIf_GotoSleep call
        and verify that it was called 
    14: Call LinSM_GotoSleepConfirmation and bring the module to NO_COM
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM0211_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.ScheduleRequestOngoingTransition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>527</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQ_FULLCOM_IN_GOTOSLEEP_STATE</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>3301</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    After ComM requests NO_COMM, LinSM shall return E_OK for other requests.
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module and bring it to FULL_COMM mode
    02: Call LinSM_RequestComMode(NO_COMM)
    03: Verify that LinIf_GotoSleep() was called
    04: VP(LINSM044):
        Verify that LinSM_RequestComMode(FULL COM) returns E_OK
    05: Check that LinIf_Wakeup was called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>528</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKEUP_CONF</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>3408</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If the LinIf module calls LinSM_WakeupConfirmation before the timeout occurs,
    the active timer shall stop, so that the timeout will not occur.
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module
    02: Request FULL_COM and check that LinIf_Wakeup() was called
    03: Call some main functions and stop 1 call before the timeout
    04: Verify that no timeout has occurred
    05: Call LinSM_WakeupConfirmation()
        and check that ModeIndication and CurrentState were called
    06: VP(ECUC_LinSM_00144):
        Call some main functions enough to trigger a timeout
    07: VP(LINSM154.Wakeup):
        Verify that no timeout triggered after calling LinSM_WakeupConfirmation()
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM154.Wakeup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00144</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>529</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKEUP_TIMEOUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>3508</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If LinSMDevErrorDetect is enabled: When a timeout occurs
    while waiting for LinSM_WakeupConfirmation, the error code
    LINSM_E_CONFIRMATION_TIMEOUT shall be reported to the DET module.
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module
    02: Request FULL_COM and check that LinIf_Wakeup() was called
    Loop over steps 3-5 as many times as configured in LinSMRepeitionMax
    03: Call some main functions and stop when one more call will start calling LinIf_Wakeup
    04: Verify that the timeout did not occur yet
    05: Call LinSM_MainFunction() and verify that LinIf_Wakeup is called
    06: Call some main functions and stop when one more call will cause a timeout
    07: Verify that the timeout did not occur yet
    08: Call 1 MainFunction
    09: VP(LINSM170_EB): Verify that only Det_ReportError is called after the timer elapses
    10: VP(LINSM102.Wakeup): Verify that if a timeout occurs while waiting for
        LinSM_WakeupConfirmation() LINSM_E_CONFIRMATION_TIMEOUT will be reported
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM102.Wakeup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM170_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>530</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SLEEP_SCHEDULE_TIMEOUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>3606</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If the LinIf module calls LinSM_WakeupConfirmation before the timeout occurs,
    the active timer shall stop, so that the timeout will not occur.
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module and bring it to FULL_COM
    02: Call LinSM_ScheduleRequest() and check that LinIf_ScheduleRequest() was called
    03: Call some main functions and stop 1 call before the timeout
    04: Call LinSM_ScheduleRequestConfirmation() and check that CurrentSchedule was called
    05: Call some main functions enough to trigger a timeout
    06: VP(LINSM154.Schedule):
        Verify that no timeout triggered after calling LinSM_ScheduleRequestConfirmation()
    07: Call LinSM_RequestComMode(NO_COM) and check that LinIf_GotoSleep() was called
    08: Call some main functions and stop 1 call before the timeout
    09: Call LinSM_GotoSleepConfirmation() and check that
        ModeIndication and CurrentState were called
    10: Call some main functions enough to trigger a timeout
    11: VP(LINSM154.Sleep):
        Verify that no timeout triggered after calling LinSM_GotoSleepConfirmation()
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM154.Schedule</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM154.Sleep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>531</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SLEEP_NOTOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>3756</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If the LinIf_GotoSleep returns E_NOT_OK the LinSM_RequestComMode shall return E_NOT_OK
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Set the return value for LinIf_GotoSleep to E_NOT_OK
    02: Initialize LinSM and bring it to FULL_COM mode on both channels
        (one has RepMax 8, the other 254)
    03: Call LinSM_RequestComMode(NO COM)
    04: Verify that LinSM_RequestComMode returns E_OK
    05: VP(LINSM0223, T10a): Verify that when calling MF the stored mode request will be processed
    06: Call MF and stop when 1 more call would reach RepetitionMax
    07: Nothing should have happened
    08: Call another MF
    09: VP(T10b, T12, ECUC_LinSM_00208): Verify that the request counter is incremented and
        eventually exceeded, which results in reporting TST_E_REPETITION_MAX_REACHED to DET
    10: VP(T12): Call one MF and verify that nothing happens,
        because the requested mode which was stored is cleared
    11: VP(T12, ECUC_LinSM_00208): Verify that the current state was changed to NO_COM
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T10a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>428</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T10b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>429</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>431</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>532</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SLEEP_NOTOK_REP_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>3881</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that TST_E_REPETITION_MAX_REACHED is reported after 1 MainFunction call on a channel
    configured with LinSMModeRequestRepetitionTime= 0.
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Set the return value for LinIf_GotoSleep to E_NOT_OK
    02: Initialize LinSM and bring it to FULL_COM
    03: Call LinSM_RequestComMode(NO COM)
    04: Verify that LinSM_RequestComMode returns E_OK
    05: VP(T12, ECUC_LinSM_00208): Verify that after one MF call the RepetitionMax was exceeded and
         TST_E_REPETITION_MAX_REACHED is reported to DET
    06: VP(T12): Call one MF and verify that nothing happens,
                because the requested mode which was stored is cleared
    07: VP(T12,ECUC_LinSM_00208): Verify that the current state was changed to NO_COM
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>431</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>533</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKEUP_NOTOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>3978</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Storing requested mode if the LinIf_Wakeup returns E_NOT_OK 
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Set the return value for LinIf_Wakeup to E_NOT_OK
    02: Initialize LinSM and request FULL_COM and verify that it returns E_OK
    03: VP(LINSM0223, T08a): 
        Verify that when calling MF the stored mode request will be processed
    04: Call MF and stop when 1 more call would reach RepetitionMax
    05: Nothing should have happened
    06: Call another MF
    07: VP(T08b): Verify that the request counter is incremented
    08: VP(T08c): Call one MF and verify that nothing happens, 
                 because the requested mode which was stored is cleared
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T08a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>424</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T08b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T08c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>426</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>534</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQCOMMODE_WHILE_STORED_MODE_IS_PROCESSED</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>4069</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if a stored mode is currently processed and a new mode is requested, the stored
    mode will be ignored and it will process the new mode request.
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Set the return value for LinIf_Wakeup to E_NOT_OK
    02: Initialize LinSM and request FULL_COM and verify that it returns E_OK
    03: VP(LINSM0223, T08a):
        Verify that when calling MF the stored mode request will be processed
    04: Call LinSM_RequestComMode while a stored mode is processed
    05: Call some MF
    06: VP(LINSM174):Verify that the old stored mode is ignored if a new more request was called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00174</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>535</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKEUP_GOTOSLEEP_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>4141</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_MainFunction is called, a mode request was stored and LinIf_Wakeup=E_OK
    LinSM_MainFunction is called, a mode request was stored and LinIf_GotoSleep=E_OK
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Set the return value for LinIf_Wakeup and LinIf_GotoSleep to E_NOT_OK
    02: Initialize LinSM and request FULL_COM and verify that it returns E_OK
    03: Verify that when calling MF the stored mode request will be processed
    04: Verify that the module is not in WAKEUP state
    05: Set the return value for LinIf_Wakeup to E_OK
    06: VP(T09): Call another MF and verify that the module is in WAKEUP state
    07: Confirm and bring the module to FULL_COM
    08: Request NO_COM and verify that it returns E_NOT_OK
    09: Call MF and verify that LinIf_GotoSleep was called
    10: Verify that the module is not in GOTOSLEEP state
    11: Set the return value for LinIf_GotoSleep to E_OK
    12: VP(T11): Call another MF and verify that the module is in GOTO_SLEEP state
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.Transition.T09</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>427</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>430</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>536</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKEUP_REPETITION</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>4283</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    RepetitionMax was reached, so a timeout should occur for LinIf_Wakeup as well
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM and request FULL_COM
    02: Call MF for RepetitionMax-1 times
    03: Nothing should have happened
    04: Call MF one more time
    05: RepetitionMax was reached so a DET will be reported
    06: VP(LINSM305): Since RepetitionMax was reached, 
        the timer will elapse as well, reporting CONFIRMATION_TIMEOUT
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00305</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>537</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKEUP_REPETITION_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>4354</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Timeout occurs while waiting for WakeupConfirmation, and RepetitionMax was not reached
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM and request FULL_COM
    Loop over steps 02-04 as many times as configured in LinSMRepetitionMax
    02: Call some main functions and stop one call before timeout
    03: Timeout should have not occur
    04: Call 1 main function and verify that LinIf_Wakeup will be called
    05: Call some main functions and stop one call before timeout
    06: Timeout should have not occur
    07: Elapse another main function and verify that timeout has occured for channel_0 and DET is reported
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00304</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>538</internalId></specobject>
    <specobject>
      <id>TS_LINSM_TIMER_NETW_INDEPENDENT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>4442</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    There shall be request timers for each network
  
Test Object: 
    TST_CHANNEL_0, TST_CHANNEL_1, TST_CHANNEL_2
  
Test Precondition: 
  
Test Execution: 
    01: Request FULL_COMM for all 3 channels
    02: Request schedule for all 3 channels
    03: VP(LINSM162): Let some time elapse, and exceed the timer only for channel 0
        and verify that the countdown of every timer is done using LinSM_MainFunction()
    04: VP( SWS_LinSM_00175_INDEP, LINSM162 ):
        When the timer for channel 0 reaches 0 those functions are called
        Verify that the expiration of every timer is done using LinSM_MainFunction()
    05: Calling another LinSM_MainFunction()  will make the timer for channel 2 reach 0
    06: VP(SWS_LinSM_00175_INDEP ):
        When the timer for channel 1 reaches 0 those functions are called
    07: Calling another LinSM_MainFunction()  will make the timer for channel 3 reach 0
    08: VP(SWS_LinSM_00175_INDEP ):
        When the timer for channel 2 reaches 0 those functions are called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00175_INDEP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>539</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCH_REQ_ACTIVE_SCHEDULE</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>4581</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if we request a schedule that is already active, LinIf_ScheduleRequest will be
    called and timeout will occur if schedule is not confirmed in the expected time.
  
Test Object: 
    LinSM_ScheduleRequest()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module and bring it to FULL_COMM mode
    02: Call LinSM_ScheduleRequest and confirm the schedule
    03: Call LinSM_ScheduleRequest using the active schedule
    04: VP(ScheduleRequestActiveTable): 
        Check that LinSM_ScheduleRequest returns E_OK and calls LinIf_ScheduleRequest
    05: Call LinSM_MainFunction enough times to trigger a timeout
    06: VP(ScheduleRequestActiveTable): Verify that timeout occurred
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.ScheduleRequestActiveTable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>540</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKEUP_REPETITION_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>4698</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If LinSM_WakeupConfirmation was not called, and LinIf_Wakeup is set to return E_NOT_OK,
    after RepetitionMax is reached TST_E_REPETITION_MAX_REACHED is reported to DET.
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM and request FULL_COM
    02: Call some main functions and stop one call before timeout
    03: Timeout should have not occur
    04: Set LinIf_Wakeup to return E_NOT_OK
    05: Call 1 main function and verify that LinIf_Wakeup is called (first repetition)
    06: Call 1 main function and verify that LinIf_Wakeup is called (second repetition)
    07: Call 1 MainFunction
    08: Verify that TST_E_REPETITION_MAX_REACHED is reported to det (RepetitionMax=2, which is
        exceeded here)
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>541</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GOTOSLEEP_REPETITION</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>4787</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If LinSM_GotoSleep was not called, and LinIf_GotoSleep is set to return E_NOT_OK,
    after RepetitionMax is reached TST_E_REPETITION_MAX_REACHED is reported to DET.
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module and bring it to FULL_COMM mode
    02: Request NO_COM
    03: Call some main functions and stop one call before timeout
    03: Timeout should have not occur
    04: Check that timeout did not yet occur and no other function was called
    05: Set LinIf_GotoSleep to return E_NOT_OK
    06: Call 1 main function and verify that LinIf_GotoSleep is called
    07: Call another main function and verify that LinIf_GotoSleep is called
    08: Verify that after next main function DET error REPETITION_MAX_REACHED is reported to det
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>542</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GOTO_SLEEP_TIMEOUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>4896</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If LinSMDevErrorDetect is enabled: When a timeout occurs
    while waiting for LinSM_GotoSleepConfirmation, the error code
    LINSM_E_CONFIRMATION_TIMEOUT shall be reported to the DET module and the module will behave
    like LinSM_GotoSleepConfirmation() was called with success = FALSE.
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module and bring it to FULL_COM
    02: Request NO_COM and check that LinIf_GotoSleep() was called
    03: Call some main functions and stop when one more call will start calling LinIf_GotoSleep()
    04: Verify that the timeout did not occur yet
    05: VP (T06b): Call LinSM_MainFunction() and verify that LinIf_GotoSleep() is called
    06: Call some main functions and stop when one more call will cause a timeout
    07: Verify that the timeout did not occur yet
    08: Call 1 MainFunction
    09: Verify that only Det_ReportError is called after the timer elapses
    10: VP(T06c):
        Verify that the module is in NO_COM by calling LinSM_ScheduleRequest()
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.Transition.T06b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>421</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T06c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>422</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.SchM_Call_ModeIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>543</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCH_REQ_CONF_TIMEOUT_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>5022</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if the active schedule is requested again, LinSM_ScheduleRequest will
    forward the request to LinIf by calling LinIf_ScheduleRequest.
  
Test Object: 
    LinSM_ScheduleRequest
  
Test Precondition: 
  
Test Execution: 
    01: Bring the module in FULL_COM
    02: Call LinSM_ScheduleRequestConfirmation for SCHEDULE_0
    03: Call LinSM_ScheduleRequest for active schedule
    04: VP(LinSM.EB.ScheduleRequestActiveTable): Verify that LinIf_ScheduleRequest() was
        called
    05: Call LinSM_ScheduleRequest() with a different channel and verify that function
        returns E_NOT_OK because other request is in progress
    06: Confirm request for SCHEDULE_0 and verify that BswM_LinSM_CurrentSchedule is
        called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.ScheduleRequestActiveTable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>544</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCHEDULE_REQ_CONF_INTERRUPT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Det/source/application/Tests.c.m4</sourcefile>
      <sourceline>5109</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that LinSM calls BswM_LinSM_CurrentSchedule if
    LinSM_ScheduleRequestConfirmation() is called during LinIf_ScheduleRequest().
  
Test Object: 
    LinSM_ScheduleRequest, LinSM_ScheduleRequestConfirmation
  
Test Precondition: 
  
Test Execution: 
    01: Bring the module in FULL_COM
    02: Call LinSM_ScheduleRequest to select schedule
    03: VP(LinSM.ASR40.SWS_LinSM_00207): Verify that BswM_LinSM_CurrentSchedule was called because
        LinSM_ScheduleRequestConfirmation was called during LinSM_ScheduleRequest
    04: VP(): Verify that LinSM forward request by calling LinIf_ScheduleRequest()
    05: VP(LinSM.ASR40.SWS_LinSM_00207): Request another schedule and verify that request is
        handled correctly
    06: VP(): Request another schedule and verify LinIf_ScheduleRequest is called
    07: VP(): Verify that LinSM does not accept another schedule request if another one
        is ongoing
    08: VP(LinSM.ASR40.SWS_LinSM_00207) Verify that BswM_LinSM_CurrentSchedule was called to
        confirm request
    09: VP(LinSM.ASR40.SWS_LinSM_00207): Request another schedule and verify that request is
        handled correctly
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00207</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>545</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_SCH_REQ_CONF_BEFORE_TIMEOUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_General/source/application/Tests.c</sourcefile>
      <sourceline>126</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_ScheduleRequest() works correctly if the request is
    confirmed before the timeout expires.
  
Test Object: 
    LinSM_ScheduleRequest()
  
Test Precondition: 
    Switch to FULL_COM mode.
  
Test Execution: 
    01: Initialize module and bring it to FULL_COMM mode
    02: Call LinSM_ScheduleRequest
    03: Verify that LinIf_ScheduleRequest() is called
    04: Let some time elapse, but don't exceed the timeout
    05: Verify that no timeout occurred
    06: VP(LINSM206):
        Call LinSM_ScheduleRequestConfirmation() and check that CurrentSchedule was called
    07: VP(LINSM154.Schedule):
        Call 3 more MF, enough to trigget a timeout, and verify that no timeout occurred
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM154.Schedule</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>546</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCHREQ_TIMEOUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_General/source/application/Tests.c</sourcefile>
      <sourceline>225</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_ScheduleRequest() with confirmation after timeout
  
Test Object: 
    LinSM_ScheduleRequest()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module, bring it to FULL_COM and successfully request a schedule request
    02: Call LinSM_ScheduleRequest() and verify that it returns E_OK
    03: LinSM_ScheduleRequest() calls LinIf_ScheduleRequest()
    04: Call LinSM_MainFunction() until timer would elapse on another LinSM_MainFunction() call
    05: LinSM_MainFunction() called no APIs
    06: Call LinSM_MainFunction()
    07: VP(LINSM053_LINSM_E_CONFIRMATION_TIMEOUT, LINSM102.Schedule, LINSM101):
        LinSM_MainFunction reports LINSM_E_CONFIRMATION_TIMEOUT to DET
    08: VP(LINSM102.Schedule, LINSM0214):
         LinSM_MainFunction calls BswM_LinSM_CurrentSchedule() with unchanged schedule table
    09: Call LinSM_ScheduleRequestConfirmation() (Late confirmation)
    10: VP (LINSM207, LINSM172):
        LinSM_ScheduleRequestConfirmation() calls BswM_LinSM_CurrentSchedule()
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM102.Schedule</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_CONFIRMATION_TIMEOUT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>269</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00207</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00172</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>84</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>547</internalId></specobject>
    <specobject>
      <id>TS_LINSM_UNREQUESTED_SCHEDREQCONF_FULL_COM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_General/source/application/Tests.c</sourcefile>
      <sourceline>344</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test schedule switch confirmation without preceding request of new schedule table
  
Test Object: 
    LinSM_ScheduleRequestConfirmation
  
Test Precondition: 
  
Test Execution: 
    - All network parameters shall equal TST_CHANNEL_0

    Preparation

    01: Call LinSM_Init
    02: Call LinSM_RequestComMode with TST_FULL_COMMUNICATION
    03: VP: LinSM_RequestComMode returns E_OK
    04: Call LinSM_WakeupConfirmation with success = TRUE
    05: VP: LinSM_WakeupConfirmation calls BswM_LinSM_CurrentState with LINSM_FULL_COM

    Test

    06: Call LinSM_ScheduleRequestConfirmation with TST_SCHEDULE_0
    07: VP (LinSM.ASR40.SWS_LinSM_00207):
        LinSM_ScheduleRequestConfirmation calls BswM_LinSM_CurrentSchedule with TST_SCHEDULE_0
    08: VP: LinSM_ScheduleRequestConfirmation does no further calls
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00207</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>548</internalId></specobject>
    <specobject>
      <id>TS_LINSM_NOCOM_TIMEOUT_EXPIRE</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_General/source/application/Tests.c</sourcefile>
      <sourceline>428</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_RequestComMode(NO_COM) with confirmation before timeout
  
Test Object: 
    Verify that LinSM_RequestComMode(NO_COM) works correctly if the request is
    confirmed before the timeout expires.
  
Test Precondition: 
    Switch to FULL_COM mode.
  
Test Execution: 
    01: Initialize module and bring it to FULL_COM
    02: Request NO_COM mode
    03: Let some time elapse, but don't exceed the timeout
    04: Verify that timeout didn't occurred
    05: Confirm the mode change request
    06: VP(LINSM027_EB, LINSM193): Verify that if LinSM_GotoSleepConfirmation() is called with 
         success=TRUE LinSM shall call ComM_BusSM_ModeIndication with the parameter 
        TST_NO_COMMUNICATION and BswM_LinSM_CurrentState with the parameter LINSM_NO_COM
    07: Now let the timeout expire. This must have no effect  any longer
    08: VP(LINSM154.Sleep): Verify that no timeout occurred
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM154.Sleep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM027_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00193</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>549</internalId></specobject>
    <specobject>
      <id>TS_LINSM_30074</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_General/source/application/Tests.c</sourcefile>
      <sourceline>527</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_RequestComMode(NO_COM) with confirmation after timeout
  
Test Object: 
    Verify that LinSM remains in FULL_COM mode if the confirmation timeout
    expires after calling LinSM_RequestComMode(NO_COM)
  
Test Precondition: 
  
Test Execution: 
    01: Switch to FULL_COM mode, successfully request a schedule table.
    02: Call LinSM_RequestComMode(NO_COM)
    03: VP: Verify that LinSM_RequestComMode() returns E_OK
    Loop 3 times (LinSMModeRequestRepetitionMax of this channel is 2) over steps 04-07 
    04: VP: Verify that LinSM_RequestComMode() calls LinIf_GotoSleep()
    05: Call LinSM_MainFunction() until timer would elapse on another LinSM_MainFunction() call
    06: VP: Verify that LinSM_MainFunction() called no APIs
    07: Call LinSM_MainFunction()
    08: VP(LINSM101, LINSM102.Sleep, LINSM053_LINSM_E_CONFIRMATION_TIMEOUT):
        Verify that LinSM_MainFunction() reports LINSM_E_CONFIRMATION_TIMEOUT to DET (LinSMRepetitionMax was exceeded)
    09: Call LinSM_GotoSleepConfirmation() (Late confirmation)
    10: VP(LinSM.EB.UnexpectedCallout):
        LinSM_GotoSleepConfirmation() reports LINSM_E_UNEXPECTED_CALLOUT to DET
    11: LinSM_GotoSleepConfirmation() calls no other APIs
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM102.Sleep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_CONFIRMATION_TIMEOUT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>269</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>550</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKEUP_CONF_BEFORE_TIMEOUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_General/source/application/Tests.c</sourcefile>
      <sourceline>638</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_RequestComMode(FULL_COM) works correctly if the request
    is confirmed before the timeout expires.
  
Test Object: 
    LinSM_RequestComMode
  
Test Precondition: 
    Switch to NO_COM mode.
  
Test Execution: 
    01: Request FULL_COM mode
    02: Let some time elapse, but don't exceed the timeout
    03: Verify that no timeout occurred
    04: VP(LINSM033_EB): Confirm the FULL_COM request and verify that ComM and BswM are called
    05: VP(LINSM154.Wakeup): Verify that calling MF has no effect
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM154.Wakeup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM033_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>551</internalId></specobject>
    <specobject>
      <id>TS_LINSM_30075</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_General/source/application/Tests.c</sourcefile>
      <sourceline>721</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_RequestComMode(FULL_COM) with confirmation after timeout
  
Test Object: 
    Verify that LinSM remains in NO_COM mode if the confirmation timeout
    expires after calling LinSM_RequestComMode(FULL_COM).
  
Test Precondition: 
  
Test Execution: 
    01: Switch to NO_COM mode.
    02: Call LinSM_RequestComMode(FULL_COM)
    03: VP: Verify that LinSM_RequestComMode() returns E_OK
    Loop 3 times (LinSMModeRequestRepetitionMax of this channel is 2) over steps 04-07 
    04: VP: Verify that LinSM_RequestComMode() calls LinIf_Wakeup()
    05: Call LinSM_MainFunction() until timer would elapse on another LinSM_MainFunction() call
    06: VP: Verify that LinSM_MainFunction() called no APIs
    07: Call LinSM_MainFunction()
    08: VP(LINSM053_LINSM_E_CONFIRMATION_TIMEOUT, LINSM102.Wakeup, LINSM170_EB, LINSM101):
        VP: Verify that LinSM_MainFunction() reports LINSM_E_CONFIRMATION_TIMEOUT 
        to DET (LinSMModeRequestRepetitionMax was exceeded)
    09: Call LinSM_WakeupConfirmation() (Late confirmation)
    10: VP(LinSM.EB.UnexpectedCallout):
        LinSM_WakeupConfirmation() reports LINSM_E_UNEXPECTED_CALLOUT to DET
    11: LinSM_WakeupConfirmation() calls no other APIs
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM102.Wakeup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM053_LINSM_E_CONFIRMATION_TIMEOUT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>269</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM170_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.UnexpectedCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>552</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SAME_IDS_FOR_LINSM_AND_LINIF</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_General/source/application/Tests.c</sourcefile>
      <sourceline>828</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the correct channel and network Ids are used during
    communication with LinIf, ComM and BswM
  
Test Object: 
    LinSM_RequestComMode, LinSM_ScheduleRequest
  
Test Precondition: 
    Channel and network ids are assigned equally (channel id 1 = network id 1 a.s.o.)
  
Test Execution: 
    01: VP(LINSM164.Wakeup):
        Request FULL_COM mode and verify that LinIf_Wakeup is called with correct channel
    02: Mode must not yet have been changed
    03: Confirm the request and verify that ComM and BswM are called
    04: Schedule tables are not yet running
    05: VP(LINSM164.ScheduleRequest):
        Request a schedule table  and verify that LinIf_ScheduleRequest
        is called with correct channel
    06: Confirmation not yet given
    07: Call LinSM_ScheduleReqeustConfirmation and verify that BswM is called
    08: VP(LINSM164.GotoSleep):
        Request NO_COM mode and verify that LinIf_GotoSleep is called with correct channel
    09: Mode must not yet have been changed
    10: Call LinSM_GotoSleepConfirmation and verify that ComM and BswM are called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM164.Wakeup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM164.GotoSleep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM164.ScheduleRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>553</internalId></specobject>
    <specobject>
      <id>TS_LINSM_30087</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_General/source/application/Tests.c</sourcefile>
      <sourceline>974</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_GetVersionInfo() behaves correctly.
  
Test Object: 
    Verify that LinSM_GetVersionInfo() returns the correct values.
  
Test Precondition: 
  
Test Execution: 
    Call LinSM_Init() followed by LinSM_GetVersionInfo()
  
Test Input: None.
Test Output: 
    The VersionInfo structure passed to LinSM_GetVersionInfo() is filled-in with the correct
    version information according to the values defined in LinSM_Version.h
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00118</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>554</internalId></specobject>
    <specobject>
      <id>TS_LINSM_30090</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_General/source/application/Tests.c</sourcefile>
      <sourceline>1034</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_GetCurrentComMode() behaves correctly in LINSM_FULL_COM mode.
  
Test Object: 
    Verify that LinSM_GetCurrentComMode() behaves correctly in FULL_COM mode.
  
Test Precondition: 
    Switch to FULL_COMmode.
  
Test Execution: 
    Call LinSM_GetCurrentComMode().
  
Test Input: None.
Test Output: 
    LinSM_GetCurrentComMode() returns E_OK. The "mode" parameter is set to TST_FULL_COMMUNICATION.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00181</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>555</internalId></specobject>
    <specobject>
      <id>TS_LINSM_30091</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_General/source/application/Tests.c</sourcefile>
      <sourceline>1094</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_GetCurrentComMode() behaves correctly in LINSM_NO_COM mode.
  
Test Object: 
    Verify that LinSM_GetCurrentComMode() behaves correctly in NO_COM mode.
  
Test Precondition: 
    Switch to NO_COM mode.
  
Test Execution: 
    Call LinSM_GetCurrentComMode():
  
Test Input: None.
Test Output: 
    LinSM_GetCurrentComMode() returns E_OK. The "mode" parameter is set to TST_NO_COMMUNICATION.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>556</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCH_REQ_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_General/source/application/Tests.c</sourcefile>
      <sourceline>1149</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify an unsuccessful change of the schedule table 
    when there is a previous successful schedule change
  
Test Object: 
    LinSM_ScheduleRequest()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module and bring it to FULL_COM
    02: Request a schedule and confirm it
    03: Initialize LinIf_ScheduleRequest to return E_NOT_OK
    04: VP(SWS_LinSM_00168_2): Call LinIf_ScheduleRequest and verify that it returns E_NOT_OK
    05: LinIf_ScheduleRequest is called with TST_SCHEDULE_0
    06: LinSM_ScheduleRequest does not call any further APIs
    07: Call LinSM_MainFunction
    08: VP(LINSM0213): LinSM_MainFunction calls BswM_LinSM_CurrentSchedule with TST_SCHEDULE_1
    09: Call LinSM_MainFunction
    10: LinSM_MainFunction does no calls any other API
    11: Restore LinIf_ScheduleRequest_Stub
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00168_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>557</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCH_REQ_NOT_OK_NULL</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_General/source/application/Tests.c</sourcefile>
      <sourceline>1246</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify an unsuccessful change of the schedule table 
    when there`s not a previous successful schedule change
  
Test Object: 
    LinSM_ScheduleRequest()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module and bring it to FULL_COM
    02: Initialize LinIf_ScheduleRequest to return E_NOT_OK
    03: VP(SWS_LinSM_00168_2): Request a schedule and verify that it returns E_NOT_OK
    04: Call LinSM_MainFunction
    05: VP(LINSM0213):LinSM_MainFunction calls BswM_LinSM_CurrentSchedule with TST_SCHEDULE_NULL
    06: Call LinSM_MainFunction
    07: LinSM_MainFunction does no calls any other API
    08: Restore LinIf_ScheduleRequest_Stub
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00168_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>558</internalId></specobject>
    <specobject>
      <id>TS_LINSM_MODETYPE</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_General/source/application/Tests.c</sourcefile>
      <sourceline>1323</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test declaration of type LinSM_ModeType and value range
  
Test Object: 
    LinSM_ModeType
  
Test Precondition: 
  
Test Execution: 
    01: VP: sizeof(LinSM_ModeType) == sizeof(uint8)
    02: Assign LINSM_FULL_COM to a LinSM_ModeType variable
    03: VP: LinSM_ModeType variable equals 1
    04: Assign LINSM_NO_COM to a LinSM_ModeType variable
    05: VP: LinSM_ModeType variable equals 2
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>559</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_NETWORKS</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Networks/source/application/Tests.c</sourcefile>
      <sourceline>86</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Enter LINSM_NO_COM from GOTO_SLEEP state with LinSM_Init()
  
Test Object: 
    Verify that LinSM_Init() enters NO_COM state from GOTO_SLEEP state.
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module
    02: Bring all channels in FULL_COM
    03: VP(LINSM164.Wakeup):
        Verify that LinIf_Wakeup is called for requested channel
    04: Call LinSM_ScheduleRequest() for all 5 channels
    05: For every channel call LinSM_MainFunction() and stop 1 call before timeout occurs
    06: No timeout occurred
    07: Call LinSM_MainFunction()
    08: VP(LINSM_Arbitrary_Mapping_Channels):
        Verify that timeout occurred for current channel
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM_Arbitrary_Mapping_Channels</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM164.Wakeup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>560</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_PRECOMPILE_CFG</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_PrecompileCfg/source/application/Tests.c</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The specified macros exist for all precompile parameters
  
Test Object: 
    Precompile parameters
  
Test Precondition: 
  
Test Execution: 
    01: Verify that each of the macros listed in the input section exists
  
Test Input: 
    List of precompile parameters and corresponding macro
      LinSMVersionInfoApi - LINSM_VERSION_INFO_API
      LinSMDevErrorDetect - LINSM_DEV_ERROR_DETECT
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>561</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_GOTOSLEEPINDICATIONDET</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_SlaveSupport/source/application/Tests.c</sourcefile>
      <sourceline>82</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    DET calls on LinSM_GotoSleepIndication
  
Test Object: 
    Verify that an invalid call of LinSM_GotoSleepIndication raises a DET error.
  
Test Precondition: 
    A node configured as slave.
  
Test Execution: 
    01: VP(SWS_LinSM_00240):
        Verify that a call in UNINIT state raises a DET with E_UNINIT.
    02: Initialize module and bring it to FULL_COM state.
    03: VP(SWS_LinSM_00239):
        Verify that a wrong network parameter raises a DET with E_NONEXISTENT_NETWORK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T01a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>438</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>562</internalId></specobject>
    <specobject>
      <id>TS_LINSM_NO_SCHEDULE_ON_SLAVE</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_SlaveSupport/source/application/Tests.c</sourcefile>
      <sourceline>158</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Slave node rejects schedule request.
  
Test Object: 
    Verify that a slave node does not accept a schedule request, but returns E_NOT_OK.
  
Test Precondition: 
    A node configured as slave.
  
Test Execution: 
    01: Initialize module and bring it to FULL_COM state.
    02: VP(LinSM.EB.LINSM_ScheduleRequestOnlyOnMasterNodes):
        Verify that a slave node shall not accept a schedule request, even if in FULL_COM, but return E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LINSM_ScheduleRequestOnlyOnMasterNodes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>563</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQ_IND_REQ_CONF</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_SlaveSupport/source/application/Tests.c</sourcefile>
      <sourceline>223</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    RequestComMode(NO_COM) before GoToSleepIndication has no effect.
    Reach NO_COM through the sequence GoToSleepIndication then RequestComMode(NO_COM) then GoToSleepConfirmation.
  
Test Object: 
    Verify that if GoToSleepIndication and RequestComMode(NO_COM) have arrived,
    GoToSleepConfirmation calls ComM and BswM to confirm the transition.
  
Test Precondition: 
    A node configured as slave.
  
Test Execution: 
    01: Initialize module and bring it to FULL_COM state.
    02: VP(SWS_LinSM_00230_EB): Check that if LinSM_RequestComMode (NO_COM)
        is called before LinSM_GotoSleepIndication, it returns E_OK and nothing else happens.
    03: VP(SWS_LinSM_00231_EB,SWS_LinSM_00233_EB): Check that when LinSM_GotoSleepIndication is called,
        it triggers calls of LinIf_GoToSleep and ComM_BusSM_BusSleepMode.
    04: Call LinSM_RequestComMode so that when confirmation comes, the request is already arrived.
    05: VP(LINSM027,LINSM193): Check that when LinSM_GotoSleepConfirmation is called, it triggers
        calls of ComM_BusSM_ModeIndication and BswM_LinSM_CurrentState to notify transition to NO_COM.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00230_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00231_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00233_EB</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_91000_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM027_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00193</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LINSM_SleepSupportSlaveNode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>564</internalId></specobject>
    <specobject>
      <id>TS_LINSM_IND_REQ_CONF</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_SlaveSupport/source/application/Tests.c</sourcefile>
      <sourceline>329</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Reach NO_COM through the sequence GoToSleepIndication then RequestComMode(NO_COM) then GoToSleepConfirmation.
  
Test Object: 
    Verify that if GoToSleepIndication and RequestComMode(NO_COM) have arrived,
    GoToSleepConfirmation calls ComM and BswM to confirm the transition.
  
Test Precondition: 
    A node configured as slave.
  
Test Execution: 
    01: Initialize module and bring it to FULL_COM state.
    02: VP(SWS_LinSM_00231_EB,SWS_LinSM_00233_EB): Check that when LinSM_GotoSleepIndication is called,
        it triggers calls of LinIf_GoToSleep and ComM_BusSM_BusSleepMode.
    03: Call LinSM_RequestComMode so that when confirmation comes, the request is already arrived.
    04: VP(LINSM027,LINSM193,TransitionSlave.T07a): Check that when LinSM_GotoSleepConfirmation is called, it triggers
        calls of ComM_BusSM_ModeIndication and BswM_LinSM_CurrentState to notify transition to NO_COM.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00230_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00231_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00233_EB</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM027_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00193</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T07a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>450</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>565</internalId></specobject>
    <specobject>
      <id>TS_LINSM_IND_CONF_REQ</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_SlaveSupport/source/application/Tests.c</sourcefile>
      <sourceline>423</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Reach NO_COM through the sequence GoToSleepIndication then GoToSleepConfirmation then RequestComMode(NO_COM).
  
Test Object: 
    Verify that if GoToSleepIndication and RequestComMode(NO_COM) have arrived,
    GoToSleepConfirmation calls ComM and BswM to confirm the transition.
  
Test Precondition: 
    A node configured as slave.
  
Test Execution: 
    01: Initialize module and bring it to FULL_COM state.
    02: VP(SWS_LinSM_00231_EB,SWS_LinSM_00233_EB): Check that when LinSM_GotoSleepIndication is called,
        it triggers calls of LinIf_GoToSleep and ComM_BusSM_BusSleepMode.
    03: Call LinSM_GotoSleepConfirmation so that when request comes, the confirmation is already arrived.
    04: VP(LINSM027,LINSM193,TransitionSlave.T07b): Check that when LinSM_RequestComMode is called, it triggers
        calls of ComM_BusSM_ModeIndication and BswM_LinSM_CurrentState to notify transition to NO_COM.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00230_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00231_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00233_EB</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM027_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00193</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T07b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>566</internalId></specobject>
    <specobject>
      <id>TS_LINSM_IND_REQ_NOCONF_TIMEOUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_SlaveSupport/source/application/Tests.c</sourcefile>
      <sourceline>517</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Confirmation timeout expires since GoToSleepConfirmation does not arrive in time.
  
Test Object: 
    Verify that if GoToSleepIndication and RequestComMode(NO_COM) have arrived,
    but GoToSleepConfirmation does not, timer expires and DET will be called.
  
Test Precondition: 
    A node configured as slave.
  
Test Execution: 
    01: Initialize module and bring it to FULL_COM state.
    02: VP(SWS_LinSM_00231_EB,SWS_LinSM_00233_EB): Check that when LinSM_GotoSleepIndication is called,
        it triggers calls of LinIf_GoToSleep and ComM_BusSM_BusSleepMode.
    03: Call LinSM_RequestComMode so that when confirmation comes, the request is already arrived.
    04: VP(LINSM101,LINSM102.Sleep,TransitionSlave.T06a,TransitionSlave.T06b): Check that if the confirmation
        timer expires (since GoToSleepConfirmation does not arrive), it triggers a DET callwith the ID TST_E_CONFIRMATION_TIMEOUT.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00230_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00231_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00233_EB</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM102.Sleep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T06a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>448</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T06b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>449</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>567</internalId></specobject>
    <specobject>
      <id>TS_LINSM_IND_CONF_NOREQ_TIMEOUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_SlaveSupport/source/application/Tests.c</sourcefile>
      <sourceline>612</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Confirmation timeout expires since GoToSleepConfirmation does not arrive in time.
  
Test Object: 
    Verify that if GoToSleepIndication and GoToSleepConfirmation have arrived,
    but RequestComMode(NO_COM) does not, timer expires and DET will be called.
  
Test Precondition: 
    A node configured as slave.
  
Test Execution: 
    01: Initialize module and bring it to FULL_COM state.
    02: VP(SWS_LinSM_00231_EB,SWS_LinSM_00233_EB,TransitionSlave.T05a): Check that when LinSM_GotoSleepIndication is called,
        it triggers calls of LinIf_GoToSleep and ComM_BusSM_BusSleepMode.
    03: Call LinSM_GotoSleepConfirmation so that when request comes, the confirmation is already arrived.
    04: VP(LINSM101,LINSM102.Sleep): Check that if the confirmation timer expires (since RequestComMode(NO_COM)
        does not arrive), it triggers a DET call with the ID TST_E_CONFIRMATION_TIMEOUT.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00230_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00231_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00233_EB</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM102.Sleep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T05a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>445</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>568</internalId></specobject>
    <specobject>
      <id>TS_LINSM_NOCOM_GOTOSLEEP</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_SlaveSupport/source/application/Tests.c</sourcefile>
      <sourceline>705</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinIf_GoToSleep called because GoToSleepIndication came when state was NO_COM or WAKEUP (e.g. BusIdle timeout
    expired after an incomplete wakeup sequence).
  
Test Object: 
    Verify that GOTO_SLEEP mode is entered if LinSM receives a GoToSleepIndication while in NO_COM or WAKEUP.
  
Test Precondition: 
    A node configured as slave.
  
Test Execution: 
    01: Initialize module.
    02: VP(SWS_LinSM_00231_EB, SWS_LinSM_00233_EB,TransitionSlave.T05c):
        Check that LinIf_GoToSleep and ComM_BusSM_BusSleepMode are called if LinSM state is NO_COM.
    03: GotoSleepConfirmation and RequestComMode to reach NO_COM.
    04: Request FULL_COM to enter state WAKEUP.
    05: VP(SWS_LinSM_00231_EB, SWS_LinSM_00233_EB,TransitionSlave.T05b):
        Check that LinIf_GoToSleep and ComM_BusSM_BusSleepMode are called if LinSM state is WAKEUP.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00231_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00233_EB</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T05b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>446</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T05c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>447</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>569</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SILENCE_AFTER_WU_NOCONF</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_SlaveSupport/source/application/Tests.c</sourcefile>
      <sourceline>782</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Silence after wakeup timer is activated when confirmation does not come in time
    and after this timer expires, LinSM retries wakeup.
  
Test Object: 
    Verify that a FULL_COM request does nothing until the silence after wakeup timer is fulfilled.
  
Test Precondition: 
    A node configured as slave.
  
Test Execution: 
    01: Initialize module.
    02: VP(TransitionSlave.T02): Call LinSM_RequestComMode with FULL_COM and expect confirmation.
    03: VP(SWS_LinSM_00235,SWS_LinSM_00307,TransitionSlave.T03): Call LinSM_MainFunction so many times
        (nr. of MF for confirmation timer * nr. of request repetition) that DET is called for confirmation timeout.
    04: VP(SWS_LinSM_00237): Check that a request for FULL_COM does nothing
        until the silence after wakeup timer has elapsed.
    05: VP(SWS_LinSM_00236): Check that when silence after wakeup timer has occured, wakeup is retried.
    06: VP(SWS_LinSM_00235,SWS_LinSM_00307): Call LinSM_MainFunction so many times
        (nr. of MF for confirmation timer * nr. of request repetition) that DET is called for confirmation timeout.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00236</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00307</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00234_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T02</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>442</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T03</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>443</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>570</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SILENCE_AFTER_WU_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_SlaveSupport/source/application/Tests.c</sourcefile>
      <sourceline>897</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Silence after wakeup timer is activated when LinIf_Wakeup returns E_NOT_OK
    and after this timer expires, LinSM retries wakeup.
  
Test Object: 
    Verify that a FULL_COM request does nothing until the silence after wakeup timer is fulfilled.
  
Test Precondition: 
    A node configured as slave.
  
Test Execution: 
    01: Initialize module.
    02: VP(TransitionSlave.T08a): Call LinSM_RequestComMode with FULL_COM and get E_NOT_OK from LinIf_Wakeup.
    03: VP(SWS_LinSM_00235,TransitionSlave.T08b,TransitionSlave.T08c): Call LinSM_MainFunction so many times
        (nr. of request repetition) that DET is called for numer of request repetition exceeded.
    04: VP(SWS_LinSM_00237): Check that a request for FULL_COM does nothing
        until the silence after wakeup timer has elapsed.
    05: VP(SWS_LinSM_00236,TransitionSlave.T09b): Check that when silence after wakeup timer has occured, wakeup is retried.
    06: VP(SWS_LinSM_00235): Call LinSM_MainFunction so many times
        (nr. of request repetition) that DET is called for numer of request repetition exceeded.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00236</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T08a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>452</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T08b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>453</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T08c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T09b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>456</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>571</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_30078</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_SpecialConf/source/application/Tests.c</sourcefile>
      <sourceline>92</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_RequestComMode(FULL_COM) with  no confirmation
  
Test Object: 
    Verify that LinSM_RequestComMode(FULL_COM) does not time out.
  
Test Precondition: 
    LinSMDevErrorDetect = true
    Switch to NO_COM mode.
    Configuration parameter LinSMConfirmationTimeout is set to zero
  
Test Execution: 
    1. Call LinSM_Init()
    2. Call LinSM_RequestComMode(FULL_COM)
    3. Call LinSM_MainFunction() some thousand times
    4. Call LinSM_WakeupConfirmation() to transit into FULL_COM state needed by the following
    test case.
  
Test Input: None.
Test Output: 
    In step 3, LinIf_Wakeup() is called
    No failed DET events occur during step 3.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM103.Wakeup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>572</internalId></specobject>
    <specobject>
      <id>TS_LINSM_30079</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_SpecialConf/source/application/Tests.c</sourcefile>
      <sourceline>164</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_ScheduleRequest() with no confirmation
  
Test Object: 
    Verify that LinSM_ScheduleRequest() does not time out. LinSM is already in
    FULL_COM state, so the test needs no special initialization.
  
Test Precondition: 
    LinSMDevErrorDetect = true
    LinSM in FULL_COM mode.
    Configuration parameter LinSMConfirmationTimeout is set to zero
  
Test Execution: 
    1. Call LinSM_ScheduleRequest()
    2. Call LinSM_MainFunction() some thousand times
    3. Call LinSM_ScheduleRequestConfirmation() to stay in FULL_COM state needed by the
    following test case.
  
Test Input: None.
Test Output: 
    In step 2, LinIf_ScheduleRequest() is called
    No failed DET events occur during step 2.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM103.ScheduleRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>573</internalId></specobject>
    <specobject>
      <id>TS_LINSM_30080</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_SpecialConf/source/application/Tests.c</sourcefile>
      <sourceline>233</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_RequestComMode(NO_COM) with  no confirmation
  
Test Object: 
    Verify that LinSM_RequestComMode(NO_COM) does not time out. LinSM is
    already in FULL_COM state, so the test needs no special initialization.
  
Test Precondition: 
    LinSMDevErrorDetect = true
    LinSM in FULL_COM mode.
    Configuration parameter LinSMConfirmationTimeout is set to zero
  
Test Execution: 
    1. Call LinSM_RequestComMode(NO_COM)
    2. Call LinSM_MainFunction() some thousand times
    3. Call LinSM_GotoSleepConfirmation() to safely transit into NO_COM state.
  
Test Input: None.
Test Output: 
    In step 2, LinIf_GotoSleep() is called
    No failed DET events occur during step 2.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM103.GotoSleep</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>574</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_UNINIT_NOCOM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>168</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Enter LINSM_NO_COM from UNINIT state with LinSM_Init()
  
Test Object: 
    Verify that LinSM_Init() switches from uninitialized state to NO_COM
  
Test Precondition: 
    LinSM uninitialized
  
Test Execution: 
    01: Initialize module
    02: VP(LINSM166): Verify that ComM and BswM were not called
    03: VP(LINSM025, LINSM152):
        Verify that the state is NO_COM by calling LinSM_ScheduleRequest()
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>575</internalId></specobject>
    <specobject>
      <id>TS_LINSM_FULLCOM_NOCOM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>236</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Enter LINSM_NO_COM from FULL_COM state with LinSM_Init().
  
Test Object: 
    Verify that LinSM_Init() switches from FULL_COM state to NO_COM state.
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module and bring it to FULL_COM state
    02: Call LinSM_Init()
    03: VP(LINSM152): Verify that ComM and BswM were not called
    04: VP(LINSM152): Verify that the state in NO_COM
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>576</internalId></specobject>
    <specobject>
      <id>TS_LINSM_NOCOM_NOCOM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>314</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Enter LINSM_NO_COM from NO_COM state with LinSM_Init()
  
Test Object: 
    Verify that LinSM_Init() stays in NO_COM state if LinSM_Init() is called
    in NO_COM state.
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module
    02: VP(LINSM166): Verify that ComM and BswM  were not called
    03: VP(LINSM152): Verify that the module is in NO_COM state
    04: Call LinSM_Init()
    05: VP(LINSM166): Verify that ComM and BswM  were not called
    06: VP(LINSM152): Verify that the module is in NO_COM state
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>577</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GOTOSLEEP_NOCOM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>394</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Enter LINSM_NO_COM from GOTO_SLEEP state with LinSM_Init()
  
Test Object: 
    Verify that LinSM_Init() enters NO_COM state from GOTO_SLEEP state.
  
Test Precondition: 
    Switch to GOTO_SLEEP state
  
Test Execution: 
    01: Initialize module and bring it to FULL_COMM mode
    02: VP(LINSM152): Request NO_COM, without calling LinSM_GotoSleepConfirmation(),
        so that the module will be in GOTO_SLEEP state
    03: Call LinSM_Init() to bring the module in NO_COM
    04: Verify that ComM and BswM were not called
    05: VP(LINSM152): Verify that the module is in NO_COM by calling LinSM_ScheduleRequest()
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>578</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKEUP_NOCOM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>482</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Enter LINSM_NO_COM from WAKEUP state with LinSM_Init()
  
Test Object: 
    Verify that LinSM_Init() enters NO_COM state from WAKEUP state.
  
Test Precondition: 
    Switch to WAKEUP state
  
Test Execution: 
    01: Initialize module
    02: VP(LINSM152): Request FULL_COM, without calling LinSM_WakeupConfirmation(),
        so that the module will be in WAKEUP state
    03: Call LinSM_Init() to bring the module in NO_COM
    04: Verify that ComM and BswM were not called
    05: VP(LINSM152): Verify that the module is in NO_COM by calling LinSM_ScheduleRequest()
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>579</internalId></specobject>
    <specobject>
      <id>TS_LINSM_30137</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>559</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    In LINSM_NO_COM, LinIf is not commanded to communicate
  
Test Object: 
    Verify that LinSM_ScheduleRequest() fails in NO_COM state.
  
Test Precondition: 
    Switch to NO_COM state
  
Test Execution: 
    1. Call LinSM_ScheduleRequest()
  
Test Input: None.
Test Output: 
    In step 1, LinSM_ScheduleRequest() returns E_NOT_OK and throws DET error
    LINSM_E_NOT_IN_RUN_SCHEDULE.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LINSM0211_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>580</internalId></specobject>
    <specobject>
      <id>TS_LINSM_ENTER_FULL_COM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>614</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify how the module behaves when entering LINSM_FULL_COM
  
Test Object: 
    LinSM_RequestComMode()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize LinSM
    02: Request FULL_COM
    03: VP(SWS_LinSM_00047): Verify that LinIf_Wakeup() was called
    04: VP(LINSM0211_EB): The module is not in FULL_COM,
        so LinSM_ScheduleRequest should fail and report LINSM_E_NOT_IN_RUN_SCHEDULE
    05: Confirm and get the module in FULL_COM
    06: VP(LINSM033_EB):
        Verify that when entering LINSM_FULL_COM BswM will be called with the parameter
        TST_FULL_COMMUNICATION and ComM with LINSM_FULL_COM
    07: VP(LINSM049): Verify that the state is changed to FULL_COM
    08: Confirm the request and bring the module in a clean state
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM033_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LINSM0211_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>581</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GOTOSLEEP_NOTOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>715</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Refuse to enter LINSM_GOTO_SLEEP in case of LinIf error
  
Test Object: 
    Verify that GOTO_SLEEP mode is not entered if LinIf reports an error after
    the request.
  
Test Precondition: 
    Switch to FULL_COM state
  
Test Execution: 
    01 : Set the return value for LinIf_GotoSleep to E_NOT_OK
    02: Initialize module and bring it to FULL_COM on channel 0
    03: VP(LINSM021): Verify that each network is in NO_COM or FULL_COM state independently
        ( on channel 0 state is FULL_COM and on channel 1 is NO_COM )
    04: Call LinSM_RequestComMode(NO_COM)
    05: VP(LINSM036): Verify that LinIf_GotoSleep is immediately called after requesting NO_COM
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>582</internalId></specobject>
    <specobject>
      <id>TS_LINSM_REQCOM_NOCOM_FALSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>805</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Refuse to enter LINSM_GOTO_SLEEP in case of LinIf error (goto sleep
    confirmation called with success==FALSE)
  
Test Object: 
    Verify that GOTO_SLEEP mode is not entered if LinIf reports an error after
    the request (goto-sleep confirmation).
  
Test Precondition: 
    Switch to FULL_COM state
  
Test Execution: 
    01: Initialize module and bring it to FULL_COM
    02: LinIf accepts goto-sleep request
    03: Request NO_COM and verify that it returns E_OK and LinIf_GotoSleep has been called
    04: VP(LINSM036): Verify that LinIf_GotoSleep was called after we requested NO_COM
    05: Call LinSM_GotoSleepConfirmation with success=FALSE. No further action is made,
        because the state didn't change
    06: VP(SWS_LinSM_00046, T06a): Verify that requesting a schedule returns E_OK,
        so the communication mode is FULL_COM
    07: Call LinSM_ScheduleRequestConfirmation() to bring the module in a clean state
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T06a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>420</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>583</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKEUP_DURING_GOTOSLEEP</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>898</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that if FULL_COM is requested during LINSM_GOTO_SLEEP, and
    LinIf_Wakeup() returns E_NOT_OK, the LinSM goes back to the
    LINSM_GOTO_SLEEP state.
  
Test Object: 
    Verify that LinSM returns to previous state.
  
Test Precondition: 
    Switch to FULL_COM state and after go to sleep
  
Test Execution: 
    01: Initialize module and bring it to FULL_COM
    02: LinIf does not accept goto-sleep request
    03: Request NO_COM and verify that it returns E_OK and LinIf_GotoSleep has been called
    04: Verify that LinIf_GotoSleep was called after we requested NO_COM
    05: LinIf refuses the wakeup
    06: Request FULL_COM and verify that it returns E_OK and LinIf_Wakeup has been called
    07: VP(LINSM177): Call LinSM_GotoSleepConfirmation with success=TRUE. because state is back to
        LINSM_GOTO_SLEEP, confirmation is accepted and mode indications are called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>584</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GOTOSLEEP_DURING_WAKEUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>995</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that if NO_COM is requested during LINSM_WAKEUP, and
    LinIf_GoToSleep() returns E_NOT_OK, the LinSM goes back to the
    LINSM_WAKEUP state.
  
Test Object: 
    Verify that LinSM returns to previous state.
  
Test Precondition: 
    Switch to FULL_COM state
  
Test Execution: 
    01: Initialize module and bring it to FULL_COM
    02: Go to FULL_COM
    03: LinIf does not accept goto-sleep request
    04: Request NO_COM and verify that it returns E_OK and LinIf_GotoSleep has been called
    05: Verify that LinIf_GotoSleep was called after we requested NO_COM
    06: VP(LINSM177): Call LinSM_WakeupConfirmation with success=TRUE. because state
        is back to LINSM_WAKEUP, confirmation is accepted and mode indications are called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>585</internalId></specobject>
    <specobject>
      <id>TS_LINSM_30147</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>1075</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Enter LINSM_GOTO_SLEEP (LINSM_FULL_COM). Assure that the channels are correctly dispatched and
    a schedule request for a channel in GOTO_SLEEP mode is rejected while that for a channel in
    FULL_COM mode is accepted.
  
Test Object: 
    Verify that GOTO_SLEEP mode can be entered from FULL_COM mode and that
    this is done for the correct channel.
  
Test Precondition: 
    Switch channel 1 to FULL_COM state, channel 2 to NO_COM state
  
Test Execution: 
    1. Call LinSM_RequestComMode(NO_COM) for channel 1 and LinSM_RequestComMode(FULL_COM) for
    channel 2.
    2. Call LinSM_RequestComMode(FULL_COM) and LinSM_ScheduleRequest() for channel 1.
    3. Call LinSM_ScheduleRequest() for channel 2.
  
Test Input: None.
Test Output: 
    In step 1, LinIf_GotoSleep() for channel 1 is called.
    In step 2, LinIf_ScheduleRequest() is not called. LinSM_RequestComMode() and
    LinSM_ScheduleRequest() return E_NOT_OK.
    In step 3, LinIf_ScheduleRequest() is called for channel 2.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00035_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>586</internalId></specobject>
    <specobject>
      <id>TS_LINSM_30150</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>1193</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Exit LINSM_GOTO_SLEEP and enter LINSM_NO_COM.
    Assure that the channels are correctly dispatched and only the channel in GOTO_SLEEP mode
    transits to NO_COM mode, while the channel in FULL_COM mode stays there.
  
Test Object: 
    Verify that transition from GOTO_SLEEP to NO_COM mode succeeds and that it
    is done for the correct channel.
  
Test Precondition: 
    Switch channel 1 to GOTO_SLEEP state, channel 2 to FULL_COM state.
  
Test Execution: 
    1. Call LinSM_GotoSleepConfirmation() for channel 1.
    2. Verify that the current state of channel 1 is NO_COM
    3. Call LinSM_ScheduleRequest() for channel 1.
    4. Call LinSM_ScheduleRequest() for channel 2.
  
Test Input: None.
Test Output: 
    In step 1. ComM_BusSM_ModeIndication() is called for channel 1.
    In step 2, the state of channel 1 is NO_COM
    In step 3, LinIf_ScheduleRequest() is not called for channel 1. LinSM_ScheduleRequest returns
    E_NOT_OK.
    In step 4, LinIf_ScheduleRequest() is called for channel 2, LinSM_ScheduleRequest() returns
    E_OK.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00045</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>587</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKEUP_BSWM_NOTIFICATION</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>1304</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Verify that LinSM will notify BswM module with LINSM_WAKEUP state when LinSMWakeupAndSleepIndication parameter
   is enabled.
  
Test Object: 
    Verify that LinSM will notify BswM with LINSM_WAKEUP when state is entered.
  
Test Precondition: 
  LinSMWakeupAndSleepIndication is exist and equal true.
  
Test Execution: 
    01: Initialize module.
    02: Set LinIf_Wakeup() retVal to FALSE and no call for Confirmation.
    03: Call LinSM_RequestComMode() with COMM_FULL_COMMUNICATION.
    04: VP(LinSM_BswM_LINSM_WAKEUP_Notification) Make Sure BswM_LinSM_CurrentState is called with LINSM_WAKEUP.
    05: Make sure LinIf_Wakeup() is called with right LinIf Channel ID.
    06: VP(LinSM_BswM_LINSM_WAKEUP_LinIfWakepFailure) Make Sure BswM_LinSM_CurrentState is called with LINSM_NO_COM.
    07: Set LinIf_Wakeup() retVal to FALSE and LinSM_WakeupConfirmation() in the Call back with success = FALSE.
    08: Call LinSM_RequestComMode() with COMM_FULL_COMMUNICATION.
    09: VP(LinSM_BswM_LINSM_WAKEUP_Notification) Make Sure BswM_LinSM_CurrentState is called with LINSM_WAKEUP.
    10: VP(LinSM_BswM_LINSM_WAKEUP_ConfirmationFailure) Make Sure BswM_LinSM_CurrentState Make Sure.
    11: Make sure LinIf_Wakeup() is called with right LinIf Channel ID.
    12: VP(LinSM_BswM_LINSM_WAKEUP_LinIfWakepFailure) Make sure BswM_LinSM_CurrentState() is not called again.
    13: Set LinIf_Wakeup() retVal to TRUE, and success of LinSM_WakeupConfirmation() is TRUE.
    14: Call LinSM_RequestComMode() with COMM_FULL_COMMUNICATION.
    15: VP(LinSM_BswM_LINSM_WAKEUP_Notification) Make Sure LinSM notified BswM with right network id and
            LINSM_WAKEUP state.
    16: Make sure LinSM notify ComM with right network ID and COMM_FULL_COMMUNICATION.
    17: Make Sure LinSM notified BswM with right network id and LINSM_FULL_COM state.
    18: Make sure LinIf_Wakeup() is called with right LinIf Channel ID.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSMWakeupAndSleepIndication_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_WAKEUP_Notification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_WAKEUP_ConfirmationFailure</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_WAKEUP_LinIfWakepFailure</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>588</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKEUP_BSWM_NOTIFICATION_TIMEOUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>1458</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   If LinSM is in state LINSM_WAKEUP and LinSMConfirmationTimeout elapsed, LinSM will switch back to LINSM_NO_COM,
   and LinSM shall notify BswM with that.
  
Test Object: 
    Verify that LinSM will notify BswM with LINSM_NO_COM when LinSMConfirmationTimeout elapsed.
  
Test Precondition: 
  LinSMWakeupAndSleepIndication is exist and equal true.
  
Test Execution: 
   01: Initialize module and bring it to state LINSM_WAKEUP.
   02: Call  LinSM_MainFunction() multiple times to make confirmation time out occur for TST_NW_ID_5.
   03: Make Sure LinSM notified BswM with right network id and LINSM_NO_COM state, and report Det error.
   04: Call  LinSM_MainFunction() multiple times to make confirmation time out occur for TST_NW_ID_6.
   05: Make Sure LinSM notified BswM with right network id and LINSM_NO_COM state, and report Det error.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSMWakeupAndSleepIndication_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_WAKEUP_ConfirmationTimout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>589</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GOTO_SLEEP_BSWM_NOTIFICATION_M</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>1536</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
   For master nodes verify that LinSM will notify BswM module with LINSM_GOTO_SLEEP state when LinSMWakeupAndSleepIndication parameter
   is enabled.
  
Test Object: 
    Verify that LinSM will notify BswM with LINSM_GOTO_SLEEP when state is entered and Notify BswM if the state changed..
  
Test Precondition: 
  LinSMWakeupAndSleepIndication is exist and equal true.
  
Test Execution: 
    01: Initialize module, and bring it to LINSM_FULL_COM .
    02: Set LinIf_GotoSleep() return value to E_NOT_OK to test that LinSM will Switch back to LINSM_FULL_COM.
    03: VP(LinSM_BswM_LINSM_GOTO_SLEEP_Notification) Make Sure LinSM notified BswM with right network id and
    INSM_GOTO_SLEEP state.
    04: VP(LinSM_BswM_LINSM_GOTO_SLEEP_LinIfGoToSleepFailure) Make Sure LinSM notified BswM with right network id and
    INSM_FULL_COM state
    05: Set LinIf_GotoSleep() return value to E_NOT_OK and call back with confirmation failure.
    06: VP(LinSM_BswM_LINSM_GOTO_SLEEP_ConfirmationFailure) Make Sure LinSM notified BswM with right network id and
    INSM_FULL_COM state.
    07: Make Sure LinSM did not double notify BswM as LinSM_GotoSleepConfirmation() aleardy did.
    08: Set LinIf_GotoSleep() return value to E_OK, and Callout to call the LinSM_GotoSleepConfirmation() with sucess.
    09: Make sure LinSM notify ComM with right network ID and COMM_NO_COMMUNICATION.
    10: Make Sure LinSM notified BswM with right network id and LINSM_NO_COM state.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSMWakeupAndSleepIndication_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_GOTO_SLEEP_Notification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_GOTO_SLEEP_ConfirmationFailure</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_GOTO_SLEEP_LinIfGoToSleepFailure</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>590</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GOTO_SLEEP_BSWM_NOTIFICATION_S</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>1680</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
   For slave node verfiy that LinSM will notify BswM module with LINSM_GOTO_SLEEP state when LinSMWakeupAndSleepIndication paramter
   is enabeld.
  
Test Object: 
    Verify that LinSM will notify BswM with LINSM_GOTO_SLEEP when state is entered.
  
Test Precondition: 
  LinSMWakeupAndSleepIndication is exist and equal true.
  
Test Execution: 
    01: Initialize module, and bring it to LINSM_FULL_COM .
    02: Call LinSM_GotoSleepIndication() to switch to LINSM_GOTO_SLEEP state.
    03: VP(LinSM_BswM_LINSM_GOTO_SLEEP_Notification) Make Sure LinSM notified BswM with right network id and
    INSM_GOTO_SLEEP state
    04: Make sure LinIf_Wakeup() is called with right LinIf Channel ID.
    05: Make sure LinSM called ComM_BusSM_BusSleepMode() with right network ID.
    06: Call LinSM_GotoSleepConfirmation() with success equal TRUE.
    07: Make sure LinSM notify ComM with right network ID and COMM_NO_COMMUNICATION.
    08: Make Sure LinSM notified BswM with right network id and LINSM_NO_COM state.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSMWakeupAndSleepIndication_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_GOTO_SLEEP_Notification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>591</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GOTO_SLEEP_BSWM_NOTIFICATION_S_FALSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>1776</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
   For slave nodes verfiy that LinSM will notify BswM module with LINSM_FULL_COM state when LinSMWakeupAndSleepIndication paramter
   is enabeld,and LinSM_GotoSleepConfirmation() is called with success equal FALSE.
  
Test Object: 
    Verify that LinSM will notify BswM with LINSM_FULL_COM if LinSM_GotoSleepConfirmation() is called with success equal FALSE.
  
Test Precondition: 
  LinSMWakeupAndSleepIndication is exist and equal true.
  
Test Execution: 
    01: Initialize module.
    02: Enter LINSM_FULL_COM state.
    03: Call LinSM_GotoSleepIndication() to switch to LINSM_GOTO_SLEEP state.
    04: VP(LinSM_BswM_LINSM_GOTO_SLEEP_Notification) Make Sure LinSM notified BswM with right network id and
    LINSM_GOTO_SLEEP state.
    05: Make sure LinIf_Wakeup() is called with right LinIf Channel ID.
    06: Make sure LinSM called ComM_BusSM_BusSleepMode() with right network ID.
    07: Call LinSM_GotoSleepConfirmation() with success equal FALSE.
    08: Make Sure LinSM notified BswM with right network id and LINSM_FULL_COM state.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSMWakeupAndSleepIndication_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_GOTO_SLEEP_ConfirmationFailure</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>592</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GOTO_SLEEP_BSWM_NOTIFI_CONFRM_TIME_OUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>1866</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   When LinSM module is in LINSM_GOTO_SLEEP state, and LinSMWakeupAndSleepIndication is exist and equal true
   and a confirmation time out occur without receiving LinSM_GotoSleepConfirmation().LinSM will swich to LINSM_NO_COM
   state, and LinSM shall notify BswM with it.
  
Test Object: 
    Verify that LinSM will notify BswM with LINSM_NO_COM if LinSM_GotoSleepConfirmation() is not called and
    LinSMConfirmationTimeout elapsed.
  
Test Precondition: 
  LinSMWakeupAndSleepIndication is exist and equal true.
  
Test Execution: 
    01: Initialize module, and bring it to LINSM_FULL_COM .
    02: Request full communication without the confirmation to bring the module to LINSM_GOTO_SLEEP state
    for both TST_NW_ID_5 and TST_NW_ID_6.
    03: Call  LinSM_MainFunction() multiple times to make confirmation time out occur for TST_NW_ID_5.
    04: VP(LinSM_BswM_LINSM_GOTO_SLEEP_ConfirmationTimout) Make Sure LinSM notified BswM with right
    network id and LINSM_NO_COM state, and report Det error.
    05: Call  LinSM_MainFunction() multiple times to make confirmation time out occur for TST_NW_ID_6.
    06: VP(LinSM_BswM_LINSM_GOTO_SLEEP_ConfirmationTimout) Make Sure LinSM notified BswM with right
    network id and LINSM_NO_COM state, and report Det error.
    07: Bring TST_NW_ID_5 to LINSM_GOTO_SLEEP with failure LinIf_GotoSleep().
    08: Call  LinSM_MainFunction() to bring the module to  LINSM_NO_COM for TST_NW_ID_5.
    09: Verify that LinSM notify BswM with  LINSM_NO_COM state.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSMWakeupAndSleepIndication_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_GOTO_SLEEP_ConfirmationTimout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>593</internalId></specobject>
    <specobject>
      <id>TS_LINSM_LIN_SM_WAKEUP_SLEEP_IND_DISABLED</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_StateMachine/source/application/Tests.c</sourcefile>
      <sourceline>2015</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test that LinSM will not notify BswM if LinSMWakeupAndSleepIndication is exist and equal false.
  
Test Object: 
    Verify that LinSM will NOT notify BswM with LINSM_NO_COM if LinSM_GotoSleepConfirmation() is not called and
    LinSMConfirmationTimeout elapsed and LinSMWakeupAndSleepIndication is exist and equal false.
  
Test Precondition: 
  LinSMWakeupAndSleepIndication is exist and equal true.
  
Test Execution: 
    01: Initialize module.
    02: Call LinSM_WakeupConfirmation() with FALSE to verfiy that LinSM will not call BswM_LinSM_CurrentState().
    03: Verfiy that LinSM did not call BswM_LinSM_CurrentState().
    04: Request FULL_COMMUNICATION with out calling LinSM_WakeupConfirmation().
    05: Call  LinSM_MainFunction() multiple times to make confirmation time out occur for TST_NW_ID_7.
    06: Verfiy that inSM did not notify BswM. and report Det error.
    07: Bring TST_NW_ID_7 to LINSM_GOTO_SLEEP with failure LinIf_GotoSleep().
    08: Call  LinSM_MainFunction() to bring the module to  LINSM_NO_COM for TST_NW_ID_7.
    09: Verfiy that inSM did not notify BswM. and report Det error.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.LinSMWakeupAndSleepIndication_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LinSM_BswM_LINSM_GOTO_SLEEP_ConfirmationTimout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>594</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_CONF_NOTIF_TRCV</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Conformance/IN/LinSM_ConfTest_Trcv/source/application/Tests.c</sourcefile>
      <sourceline>91</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinIf_SetTrcvMode() is called upon mode changes, if configured.
    Verify that the APIs of LinIf are called with the correct LinIfChannelId.
    Verify that the APIs of LinSM expect to be called with ComMChannelIds, as well as
    LinSM uses these ComMChannelIds when interacting with BswM and ComM.
  
Test Object: 
    If LinSMTransceiverPassiveMode is configured for the channel,
    LinIf_SetTrcvMode is called.
  
Test Precondition: None.
Test Execution: 
    01: Initialize module
    02: VP(LINSM204): LinIf_SetTrcvMode() isn't called from LinSM_Init()
    03: Module gets to FULL_COM
    04: VP(SWS_LinSM_00138_Trcv_Mode, LINSM205):
        LinIf_SetTrcvMode() called with LINTRCV_TRCV_MODE_NORMAL, if configured
    05: Request NO_COM mode, let some time elapse, but don't exceed the timeout
    06: Verify that timeout hadn't occurred
    07: Confirm the mode change request
    08: VPSWS_LinSM_00138_Trcv_Mode): Verify that LinIf_SetTrcvMode() is called with either
        VP(LinSM_00203_PassiveTrue) LINTRCV_TRCV_MODE_STANDBY or
        VP(SWS_LinSM_00203_PassiveFalse) LINTRCV_TRCV_MODE_SLEEP, if configured.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00138_Trcv_Mode</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00203_PassiveTrue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.SWS_LinSM_00203_PassiveFalse</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>595</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_MAIN_FUNCT_UNINIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ApiDet/source/application/Tests.c</sourcefile>
      <sourceline>89</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_MainFunction() with uninitialized LinSM
  
Test Object: 
    LinSM_MainFunction()
  
Test Precondition: 
    LinSM uninitialized
  
Test Execution: 
    01: Call LinSM_MainFunction()
    02: VP(BSW00450): Verify that no API was called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.BSW00450</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>596</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCH_REQ_IN_NOCOM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ApiDet/source/application/Tests.c</sourcefile>
      <sourceline>134</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_ScheduleRequest() throws LINSM_E_NOT_IN_RUN_SCHEDULE DET
    if called when not within LINSM_FULL_COM state.
  
Test Object: 
    LinSM_ScheduleRequest()
  
Test Precondition: 
  
Test Execution: 
    01: Loop over all 3 configured channels
    02: VP(LINSM0211_EB): Call LiNSM_ScheduleREquest in NO_COM and verify that it returns E_NOT_OK
    03: VP(ScheduleRequest_OfflineDet, LINSM0211_EB):
		       Verify that DET was called with TST_E_NOT_IN_RUN_SCHEDULE
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.ScheduleRequest_OfflineDet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>LinSM.EB.LINSM0211_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>597</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_40016</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>141</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_WakeupConfirmation() called in LINSM_NO_COM state
  
Test Object: 
    Verify that LinSM_WakeupConfirmation() throws LINSM_E_UNEXPECTED_CALLOUT
    DET when called in NO_COM state.
  
Test Precondition: 
  
Test Execution: 
    1. Call LinSM_Init()
    2. Evaluate LINSM_CHANNEL_STATE for a certain channel
    3. Call LinSM_WakeupConfirmation(true) for that channel
    4. Evalulate LINSM_CHANNEL_STATE for that channel
    5. Call LinSM_WakeupConfirmation(false) for that channel
    6. Evaluate LINSM_CHANNEL_STATE for that channel
  
Test Input: None.
Test Output: 
    2. State is LINSM_NO_COM
    3. DET is called with LINSM_E_UNEXPECTED_CALLOUT (error code 0x60)
    4. State is LINSM_NO_COM
    5. DET is called with LINSM_E_UNEXPECTED_CALLOUT (error code 0x60)
    6. State is LINSM_NO_COM
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.UnexpectedCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>598</internalId></specobject>
    <specobject>
      <id>TS_LINSM_40025</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>225</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_WakeupConfirmation() called in LINSM_FULL_COM state
  
Test Object: 
    Verify that LinSM_WakeupConfirmation() throws LINSM_E_UNEXPECTED_CALLOUT
    DET when called in FULL_COM state.
  
Test Precondition: 
  
Test Execution: 
    1. Call LinSM_Init() followed by LinSM_RequestComMode(FULL_COM) and
    LinSM_WakeupConfirmation(true) for a certain channel
    2. Evaluate LINSM_CHANNEL_STATE for that channel
    3. Call LinSM_WakeupConfirmation(true) for that channel
    4.  Evalulate LINSM_CHANNEL_STATE for that channel
    5. Call LinSM_WakeupConfirmation(false) for that channel
    6. Evaluate LINSM_CHANNEL_STATE for that channel
  
Test Input: None.
Test Output: 
    2. State is LINSM_FULL_COM
    3. DET is called with LINSM_E_UNEXPECTED_CALLOUT (error code 0x60)
    4. State is LINSM_FULL_COM
    5. DET is called with LINSM_E_UNEXPECTED_CALLOUT (error code 0x60)
    6. State is LINSM_FULL_COM
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.UnexpectedCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>599</internalId></specobject>
    <specobject>
      <id>TS_LINSM_40026</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>316</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_WakeupConfirmation() called in LINSM_GOTO_SLEEP state
  
Test Object: 
    Verify that LinSM_WakeupConfirmation() throws LINSM_E_UNEXPECTED_CALLOUT
    DET when called in GOTO_SLEEP state.
  
Test Precondition: 
  
Test Execution: 
    1. Call LinSM_Init() followed by LinSM_RequestComMode(FULL_COM), LinSM_WakeupConfirmation(true)
    and LinSM_RequestComMode(NO_COM) for a certain channel
    2. Evaluate LINSM_CHANNEL_STATE for that channel
    3. Call LinSM_WakeupConfirmation(true) for that channel
    4. Evalulate LINSM_CHANNEL_STATE for that channel
    5. Call LinSM_WakeupConfirmation(false) for that channel
    6. Evaluate LINSM_CHANNEL_STATE for that channel
  
Test Input: None.
Test Output: 
    2. State is LINSM_GOTO_SLEEP
    3. DET is called with LINSM_E_UNEXPECTED_CALLOUT (error code 0x60)
    4. State is LINSM_GOTO_SLEEP
    5. DET is called with LINSM_E_UNEXPECTED_CALLOUT (error code 0x60)
    6. State is LINSM_GOTO_SLEEP
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.UnexpectedCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>600</internalId></specobject>
    <specobject>
      <id>TS_LINSM_MAIN_FCT_HANDLES_TIMERS</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>412</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_MainFunction() handles the timers that are attached to
    LinIf_GotoSleep(), LinIf_Wakeup() or LinIf_ScheduleRequest()
  
Test Object: 
    LinSM_MainFunction()
  
Test Precondition: 
  
Test Execution: 
    01: Loop over all 3 configured channels
    02: VP(Transition.T02): Call LinSM_RequestComMode(FULL COM) and verify that it returns E_OK
        and LinIf_Wakeup is called
    03: VP(Transition.T02): Verify current state(WAKEUP) and initial timer value
    04: Call 2 main functions
    05: VP(LINSM157): 
        Verify the new timer value after calling LinSM_MainFunction() is LinSMConfirmationTimeout-2
    06: VP(Transition.T04): Confirm the request and bring the module in FULL_COM
    07: VP(Transition.T04): Call LinSM_ScheduleRequest and verify that it returns E_OK
    08: Verify current state and initial timer value
    09: Call 2 main functions
    10: VP(LINSM157): 
        Verify the new timer value after calling LinSM_MainFunction() is LinSMConfirmationTimeout-2
    11: Call LinSM_RequestComMode(NO COM) and verify that it returns E_OK
    12: VP(Transition.T05, LinSM.ASR40.LINSM_ScheduleRequest_Pending_01)
        Verify current state is LINSM_GOTO_SLEEP and the timer was reset
    13: Call 2 main functions
    14: VP(LINSM157): 
        Verify the new timer value after calling LinSM_MainFunction() is LinSMConfirmationTimeout-2
    15: VP(Transition.T07): Confirm the request and get the module in NO_COM state
        and verify the ComM and BswM are notified
    16: VP(Transition.T07): Verify that the state is NO_COM
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T02</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>415</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T04</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>418</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T05</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>419</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T07</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>423</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM_ScheduleRequest_Pending_01</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>601</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKECONF_TIMEOUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>563</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if the timeout occurs while waiting for LinSM_WakeupConfirmation()
    the state is reset to NO_COM
  
Test Object: 
    LinSM_MainFunction()
  
Test Precondition: 
  
Test Execution: 
    01: Loop over all 3 configured channels
    02: VP(Transition.T02): Call LinSM_RequestComMode(FULL COM) and verify that it returns E_OK
        and LinIf_Wakeup is called
    03: VP(Transition.T02): Verify current state(WAKEUP) and initial timer value
    04: Call enough MF that if another MF is called a timeout will occur
    05: No timeout occurred
    06: Call another main function
    07: Verify that the timeout occurred
    08: VP(Transition.T03b): Verify that the state is reset to NO_COM
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.Transition.T02</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>415</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T03b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>602</internalId></specobject>
    <specobject>
      <id>TS_LINSM_TIMER_START</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>650</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that before LinSM calls the LinIf_GotoSleep, LinIf_Wakeup or LinIf_ScheduleRequest,
    the LinSM module shall start a timer.
  
Test Object: 
    LinSM_ScheduleRequest(), LinSM_RequestComMode()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module
    02: Loop all 3 configured channels
    03: VP(LINSM100): Verify that the timer is at it`s initial value=0U
    04: Call LinSM_RequestComMode(FULL COM)
    05: VP(LINSM100): Verify that before calling LinIf_Wakeup a timer is started
    06: Verify that LinSM_RequestComMode() returns E_OK and LinIf_Wakeup() is called
    07: Confirm the request and bring the module in FULL_COM
    08: VP(LINSM100): Verify that the timer is at it`s initial value=0U
    09: Call LinSM_ScheduleRequest()
    10: VP(LINSM100): Verify that before calling LinIfScheduleRequest() a timer is started
    11: Verify that LinSM_ScheduleRequest() returns E_OK and LinIf_ScheduleRequest() is called
    12: Call LinSM_ScheduleRequestConfirmation()
    13: VP(LINSM100): Verify that the timer is at it`s initial value=0U
    14: Call LinSM_RequestComMode(NO COM)
    15: VP(LINSM100): Verify that before calling LinIf_GotoSleep() a timer is started
    16: Verify that LinSM_RequestComMode() returns E_OK and LinIf_GotoSleep() is called
    17: Confirm the request and bring the module in NO_COM
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>603</internalId></specobject>
    <specobject>
      <id>TS_LINSM_MAINFCT_TIMER</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>777</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_WakeupConfirmation() with success set to false returns
    from LINSM_WAKEUP to LINSM_NO_COM state.
  
Test Object: 
    LinSM_WakeupConfirmation()
  
Test Precondition: 
  
Test Execution: 
    01: Loop over all 3 configured channels
    02: Call LinSM_RequestComMode(FULL COM) and verify that it returns E_OK
    03: VP(Transition.T02):Verify that the state is LINSM_WAKEUP
    04: Call LinSM_WakeupConfirmation() with success set to FALSE
    05: VP(LINSM0202_EB, Transition.T03a): Verify that the state is LINSM_NO_COM
    06: VP(LINSM0202_EB): Verify that calling LinSM_WakeupConfirmation()
        with success = FALSE doesn't do any action
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM0202_EB</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T02</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>415</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T03a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>604</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCH_REQ_CONF_NO_COM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>845</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_ScheduleRequestConfirmation() reports LINSM_E_UNEXPECTED_CALLOUT DET and
    calls BswM_CurrenSchedule with used schedule table when called in NO_COM state.
  
Test Object: 
    LinSM_ScheduleRequestConfirmation() called in LINSM_NO_COM state
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module
    02: Loop over all 3 configured channels
    03: Verify that the current state is NO_COM
    04: Loop over both configured schedule tables
    05: Call LinSM_ScheduleRequestConfirmation
    06: VP(LinSM.EB.UnexpectedCallout):LINSM_E_UNEXPECTED_CALLOUT is reported to DET
    07: BswM is called with correct channel and schedule table
    08: Verify that the state is still NO_COM and the timer 0U
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.UnexpectedCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>605</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCH_REQ_CONF_WAKEUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>927</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_ScheduleRequestConfirmation() called in LINSM_WAKEUP state
  
Test Object: 
    Verify that LinSM_ScheduleRequestConfirmation() throws
    LINSM_E_UNEXPECTED_CALLOUT DET when called in WAKEUP state.
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module
    02: Loop over all 3 configured channels
    03: Request FULL_COM and verify that LinIf_Wakeup was called on right channel
    04: Verify that the current state is LINSM_WAKEUP
    05: Loop over both configured schedule tables
    06: Call LinSM_ScheduleRequestConfirmation
    07: VP(LinSM.EB.UnexpectedCallout):LINSM_E_UNEXPECTED_CALLOUT is reported to DET
    08: BswM is called with correct channel and schedule table
    09: Verify that the current state is LINSM_WAKEUP
    10: Call LinSM_WakeupConfirmation and bring the module in a clean state
    11: Verify that the state is LINSM_FULL_COM and the timer 0U
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.UnexpectedCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>606</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCH_REQ_CONF_SLEEP</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>1028</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_ScheduleRequestConfirmation() reports
    LINSM_E_UNEXPECTED_CALLOUT DET when called in GOTO_SLEEP state.
  
Test Object: 
    LinSM_ScheduleRequestConfirmation() called in LINSM_GOTO_SLEEP state
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module
    02: Loop over all 3 configured channels
    03: Bring each channel in FULL_COM
    04: Request NO_COM and verify that LinIf_GotoSleep was called on right channel
    05: Verify that the current state is LINSM_GOTO_SLEEP
    06: Loop over both configured schedule tables
    07: Call LinSM_ScheduleRequestConfirmation
    08: VP(LinSM.EB.UnexpectedCallout): LINSM_E_UNEXPECTED_CALLOUT is reported to DET
    09: BswM is called with correct channel and schedule table
    10: Call LinSM_GotoSleepConfirmation and bring the module in a clean state
    11: Verify that the state is LINSM_NO_COM and the timer 0U
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.UnexpectedCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>607</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GOTOSLEEP_CONF_UNINIT</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>1136</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_GotoSleepConfirmation() throws LINSM_E_UNEXPECTED_CALLOUT
    DET when called in NO_COM state.
  
Test Object: 
    LinSM_GotoSleepConfirmation() called in LINSM_NO_COM state
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module
    02: Loop over all 3 configured channels
    03: Verify that the current state is NO_COM
    04: Call LinSM_GotoSleepConfirmation(TRUE)
    05: VP(LinSM.EB.UnexpectedCallout): LINSM_E_UNEXPECTED_CALLOUT is reported to DET
    06: Call LinSM_GotoSleepConfirmation(FALSE)
    07: VP(LinSM.EB.UnexpectedCallout): LINSM_E_UNEXPECTED_CALLOUT is reported to DET
    08: Verify that the state is still NO_COM and the timer 0U
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.UnexpectedCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>608</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GOTOSLEEP_CONF_WAKEUP</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>1215</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_GotoSleepConfirmation() throws LINSM_E_UNEXPECTED_CALLOUT
    DET when called in WAKEUP state.
  
Test Object: 
    LinSM_GotoSleepConfirmation() called in LINSM_WAKEUP state
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module
    02: Loop over all 3 configured channels
    03: Request FULL_COM and verify that LinIf_Wakeup was called on right channel
    04: Verify that the current state is LINSM_WAKEUP
    05: Call LinSM_GotoSleepConfirmation(TRUE)
    06: VP(LinSM.EB.UnexpectedCallout): LINSM_E_UNEXPECTED_CALLOUT is reported to DET
    07: Verify that the current state is LINSM_WAKEUP
    08: Call LinSM_GotoSleepConfirmation(FALSE)
    09: VP(LinSM.EB.UnexpectedCallout): LINSM_E_UNEXPECTED_CALLOUT is reported to DET
    10: Verify that the current state is LINSM_WAKEUP
    11: Call LinSM_WakeupConfirmation and bring the module in a clean state
    12: Verify that the state is LINSM_FULL_COM and the timer 0U
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.UnexpectedCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>609</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GOTOSLEEP_CONF_FULL_COM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>1319</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_GotoSleepConfirmation() called in LINSM_FULL_COM state
  
Test Object: 
    Verify that LinSM_GotoSleepConfirmation() throws LINSM_E_UNEXPECTED_CALLOUT
    DET when called in FULL_COM state.
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module
    02: Loop over all 3 configured channels
    03: Bring each channel in FULL_COM
    04: Verify that the current state is LINSM_FULL_COM
    05: Call LinSM_GotoSleepConfirmation(TRUE)
    06: VP(LinSM.EB.UnexpectedCallout): LINSM_E_UNEXPECTED_CALLOUT is reported to DET
    07: Verify that the current state is LINSM_FULL_COM
    08: Call LinSM_GotoSleepConfirmation(FALSE)
    09: VP(LinSM.EB.UnexpectedCallout): LINSM_E_UNEXPECTED_CALLOUT is reported to DET
    10: Verify that the current state is LINSM_FULL_COM
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.EB.UnexpectedCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>610</internalId></specobject>
    <specobject>
      <id>TS_LINSM_INIT_IN_FULLCOM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>1412</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The modules transition from FULL_COM to NO_COM by calling LinSM_Init
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module and bring it to FULL_COM mode
    02: Loop over all 3 configured channels
    03: Call LinSM_Init
    04: VP(Transition.T01b, LINSM152): Verify that the state is NO_COM
    05: VP(Transition.T01b): Verify that BswM and ComM were not called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.Transition.T01b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>611</internalId></specobject>
    <specobject>
      <id>TS_LINSM_40092</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>1484</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_ScheduleRequest() correctly restores an old timer after a rejected schedule request (part
    1 - no timeout of old timer)
  
Test Object: 
    Verify the correct restoration of the timer in case of a failed schedule
    request attempt (part 1 - no timeout for old timer).
  
Test Precondition: 
  
Test Execution: 
    1. Call LinSM_Init() followed by LinSM_RequestComMode(FULL_COM)  and
    LinSM_WakeupConfirmation(true) for a certain channel.
    2. Call LinSM_ScheduleRequest() for a valid schedule table
    3. Evaluate LINSM_CHANNEL_STATE and LINSM_CHANNEL_TIMER for that channel
    4. Call LinSM_MainFunction() once (to simulate a timer tick)
    5. Evaluate LINSM_CHANNEL_STATE and LINSM_CHANNEL_TIMER for that channel afterwards
    6. Call LinSM_ScheduleRequest() for another schedule table. During this call:
    6.1 let LinIf_ScheduleRequest() return E_NOT_OK
    6.2 simulate a few LinSM_MainFunction() calls so that the schedule request confirmation timeout
    does not expire
    7. Evaluate LINSM_CHANNEL_STATE and LINSM_CHANNEL_TIMER for that channel
  
Test Input: None.
Test Output: 
    3. State is LINSM_FULL_COM, the timer is at its maximum value (timeout value)
    5. State is LINSM_FULL_COM, the timer is reduced by 1 from 4.
    6. LinSM_ScheduleRequest() returns E_NOT_OK
    7. State is LINSM_FULL_COM, the timer is further reduced by the number of
    LinSM_MainFunction calls from 6.2
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.20093</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>460</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>612</internalId></specobject>
    <specobject>
      <id>TS_LINSM_40093</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>1597</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    LinSM_ScheduleRequest() correctly restores an old timer after a rejected schedule request (part
    2 - timeout of old timer)
  
Test Object: 
    Verify the correct restoration of the timer in case of a failed schedule
    request attempt (part 2 - timeout for old timer).
  
Test Precondition: 
  
Test Execution: 
    1. Call LinSM_Init() followed by LinSM_RequestComMode(FULL_COM)  and
    LinSM_WakeupConfirmation(true) for a certain channel.
    2. Call LinSM_ScheduleRequest() for a valid schedule table
    3. Evaluate LINSM_CHANNEL_STATE and LINSM_CHANNEL_TIMER for that channel
    4. Make a few LinSM_MainFunction() calls to let the timer run down a bit
    5. Evaluate LINSM_CHANNEL_STATE and LINSM_CHANNEL_TIMER for that channel afterwards
    6. Call LinSM_ScheduleRequest() for another schedule table and verify that it returns E_NOT_OK
    7. simulate several LinSM_MainFunction() calls until the schedule request confirmation timeout
    expires
    8. Evaluate LINSM_CHANNEL_STATE and LINSM_CHANNEL_TIMER for that channel
  
Test Input: None.
Test Output: 
    3. State is LINSM_FULL_COM, the timer is at its maximum value (timeout value)
    5. State is LINSM_FULL_COM, the timer is decremented according to the number of main
    function calls in 4
    6. LinSM_ScheduleRequest() returns E_NOT_OK
    7. State is LINSM_FULL_COM, the timer value is 1 (trigger timeout during next main function
    call)
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.20093</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>460</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>613</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCHREQ_PENDING_SLEEP_CONFIRMATION</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>1710</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if schedule request is pending, NO_COM is requested, GotoSleepConfirmation
    is called and ScheduleRequestConfirmation is called,
    the requested schedule table will be reported to BswM
  
Test Object: 
    LinSM_ScheduleRequest()
  
Test Precondition: 
    LinSM_ScheduleRequest() in process
  
Test Execution: 
    01: Initialize module and bring it to FULL_COMM mode
    02: Loop over all 3 configured channels
    03: Bring all channels to FULL_COM
    04: Call LinSM_ScheduleRequest without confirmation so it'll be in process
    05: Request NO_COM and verify that it returns E_OK
    06: Call LinSM_GotoSleepConfirmation()
    07: Call LinSM_ScheduleRequestConfirmation()
    08: LINSM_E_UNEXPECTED_CALLOUT is reported to DET
    09: VP(LINSM_ScheduleRequest_Pending_02): Verify that the requested schedule table is reported
        to BswM is we call ScheduleRequestConfirmation after GotoSleepConfirmation
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM_ScheduleRequest_Pending_02</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>614</internalId></specobject>
    <specobject>
      <id>TS_LINSM_WAKEUP_AND_GOTOSLEEP_TO_NO_COM</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>1819</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that LinSM_Init can be used to bring the module in NO_COM while being in WAKEUP and
    GOTO_SLEEP state
  
Test Object: 
    LinSM_Init
  
Test Precondition: 
  
Test Execution: 
    01: Initialize module
    02: Loop over all 3 configured channels
    03: Bring all channels to WAKEUP state
    04: Call LinSM_Init()
    05: VP(Transition.T01c, LINSM152):
        Verify that the state has been reset from WAKEUP to NO_COM using LinSM_Init
    06: Bring all channels to FULL_COM
    07: Request NO_COM and verify that it returns E_OK
    08: Call LinSM_Init()
    09: VP(Transition.T01d, LINSM152):
        Verify that the state has been reset from GOTO_SLEEP to NO_COM using LinSM_Init
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.Transition.T01c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>413</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.Transition.T01d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>414</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>615</internalId></specobject>
    <specobject>
      <id>TS_LINSM_GOTOSLEEP_STATE</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>1922</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Verify that if LinSM_GotoSleepConfirmation is waited, and the timeout occurs and repetition counter is exceeded, the state will be
    reset to NO_COM.
  
Test Object: 
  
Test Precondition: 
    LinSM_ScheduleRequest() in process
  
Test Execution: 
    01: Initialize module
    02: Loop over all 3 configured channels
    03: Bring all channels to FULL_COM
    04: Request NO_COM and verify that it returns E_OK
    05: Call 5 main functions
    06: No timeout occurred
    07: Call one main function
    08: Verify that the timeout occurred
    09: VP(LinSM.ECUC_LinSM_00208): Verify that the state is reset to NO_COM
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ECUC_LinSM_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>616</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SCHREQ_PENDING_SCHEDULE_CONFIRMATION</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_ErrorHandling/source/application/Tests.c</sourcefile>
      <sourceline>2019</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if schedule request is pending, NO_COM is requested and ScheduleRequestConfirmation
    is called, the requested schedule table will be reported to BswM and LINSM_E_UNEXPECTED_CALLOUT
    will be reported to DET
  
Test Object: 
    LinSM_ScheduleRequest()
  
Test Precondition: 
    LinSM_ScheduleRequest() in process
  
Test Execution: 
    01: Initialize module
    02: Loop over all 3 configured channels
    03: Bring all channels to FULL_COM
    04: Call LinSM_ScheduleRequest without confirmation so it'll be in process
    05: Request NO_COM and verify that it returns E_OK
    06: Call LinSM_ScheduleRequestConfirmation()
    07: VP(LINSM_ScheduleRequest_Pending_03):
        Verify that LINSM_E_UNEXPECTED_CALLOUT was reported
    08: VP(LINSM_ScheduleRequest_Pending_03):
        Verify that BswM was called with the requested schedule table
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.ASR40.LINSM_ScheduleRequest_Pending_03</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>617</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_IMPL_ID</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_IDs/source/application/Tests.c</sourcefile>
      <sourceline>103</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the APIs of LinIf are called with the correct LinIfChannelId.
    Verify that the APIs of LinSM expect to be called with ComMChannelIds, as well as
    LinSM uses these ComMChannelIds when interacting with BswM and ComM.
  
Test Object: 
  
Test Precondition: None.
Test Execution: 
    01: Initialize module

  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.20043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.20044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>618</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_SLAVESTATES_01</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_SlaveStates/source/application/Tests.c</sourcefile>
      <sourceline>115</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check transition from LINSM_NO_COM to LINSM_FULL_COM.
  
Test Object: 
    Initialize, then move to FULL_COM/NO_COM to test transition states.
  
Test Precondition: 
    LinSM initialized
  
Test Execution: 
    01: Initialize LinSM.
    02: Wakeup channel requesting FULL_COM.
    03: VP(TransitionSlave.T04): WakeupConfirmation finishes the transition to FULL_COM.
    04: VP(SWS_LinSM_00231_EB,SWS_LinSM_00233_EB,SWS_LinSM_00302): GotoSleepIndication sends the channel to sleep.
    05: GotoSleepConfirmation keeps the channel in sleep, waiting for RequestComMode(NO_COM).
    06: VP(SWS_LinSM_00232): GotoSleepIndication in sleep state has no effect.
    07: RequestComMode(NO_COM) comes, channel transitions to NO_COM.
    08: Transition to FULL_COM, receive GotoSleepIndication and then RequestComMode(NO_COM) 2 times,
        second call has no effect, wait for GotoSleepConfirmation.
    09: Transition to FULL_COM and then receive a GotoSleepIndication while LinIf_GotoSleep returns E_NOT_OK.
  
Test Input: None.
Test Output: 
    To transition to FULL_COM, ComM_RequestComMode(FULL_COM) and a wakeup confirmation is enough.
    To transition to NO_COM, only after LinSM_GotoSleepIndication, LinSM_GotoSleepConfirmation
    and ComM_RequestComMode(NO_COM) are called, LinSM will transition to NO_COM and indicate
    FULL_COM to upper layer.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00231_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00233_EB</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T04</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>444</internalId></provcov>
        <provcov>
          <linksto>LinSM.SWS_LinSM_00302</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>619</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SLAVESTATES_02</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_SlaveStates/source/application/Tests.c</sourcefile>
      <sourceline>262</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check transition to NO_COM because of inialization.
  
Test Object: 
    Initialize, then move to WAKEUP/GOTOSLEEP and the initialize again.
  
Test Precondition: 
    LinSM initialized
  
Test Execution: 
    01: Initialize LinSM
    02: VP(TransitionSlave.T01c,TransitionSlave.T09a): Initialize LinSM while in WAKEUP state
    03: VP(TransitionSlave.T01d): Initialize LinSM while in GOTOSLEEP state
    04: VP(TransitionSlave.T01b): Initialize LinSM while in FULL_COM state
  
Test Input: None.
Test Output: 
    Initializing while being in state WAKEUP/GOTOSLEEP will bring the channel to NO_COM.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T01b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T01c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>440</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T01d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T09a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>455</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>620</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SLAVESTATES_03</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_SlaveStates/source/application/Tests.c</sourcefile>
      <sourceline>364</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check transition to NO_COM because WakeupConfirmation has success = FALSE and then
    call GotoSleepConfirmation while in wrong state.
  
Test Object: 
    Initialize, then move to WAKEUP, but confirmation comes with success FALSE.
  
Test Precondition: 
    LinSM initialized
  
Test Execution: 
    01: Initialize LinSM
    02: Wakeup the channel by requesting FULL_COM
    03: VP(TransitionSlave.T03): LinSM_WakeupConfirmation with success = FALSE leads to NO_COM
    04: GotoSleepConfirmation while not in GOTOSLEEP
  
Test Input: None.
Test Output: 
    Transition to WAKEUP, confirmation comes with success = FALSE and it brings it back to NO_COM,
    then call GotoSleepConfirmation while in wrong state.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T03</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>443</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>621</internalId></specobject>
    <specobject>
      <id>TS_LINSM_SLAVESTATES_04</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Implementation/IN/LinSM_ImpTest_SlaveStates/source/application/Tests.c</sourcefile>
      <sourceline>436</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check transition when requesting FULL_COM while in states WAKEUP/GOTOSLEEP/FULL_COM.
  
Test Object: 
    Initialize, then move to WAKEUP/GOTOSLEEP/FULL_COM and then request FULL_COM.
  
Test Precondition: 
    LinSM initialized
  
Test Execution: 
    01: Initialize LinSM
    02: VP(TransitionSlave.T12): Request FULL_COM while in WAKEUP
    03: VP(TransitionSlave.T10): Request FULL_COM while in FULL_COM
    04: VP(TransitionSlave.T11): Request FULL_COM while in GOTOSLEEP (via stub callout)
  
Test Input: None.
Test Output: 
    While in WAKEUP/GOTOSLEEP/FULL_COM requesting FULL_COM shall 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>457</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>458</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.TransitionSlave.T12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>459</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>622</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_40064</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Include/LinSM_ImpTest_IdsCommon/source/application/Tests.c</sourcefile>
      <sourceline>155</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check id mapping between LinSM_RequestComMode and LinIf_Wakeup
  
Test Object: 
    Initialize, then move to TST_WAKEUP
  
Test Precondition: 
    LinSM initialized
  
Test Execution: 
    Call LinSM_RequestComMode(FULL_COM) for all ComM network ids.
  
Test Input: None.
Test Output: 
    During each call of LinSM_RequestComMode, LinIf_Wakeup is called for the correct LinIf channel
    id.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.20041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>404</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.20042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>405</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.20090</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>409</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>623</internalId></specobject>
    <specobject>
      <id>TS_LINSM_40065</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Include/LinSM_ImpTest_IdsCommon/source/application/Tests.c</sourcefile>
      <sourceline>196</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check id mapping between LinSM_WakeupConfirmation and ComM_BusSM_ModeIndication/
    BswM_LinSM_CurrentState
  
Test Object: 
    Initialize, then move to TST_FULL_COM
  
Test Precondition: 
  
Test Execution: 
    Move all channels to state LINSM_WAKEUP, then:
    call LinSM_WakeupConfirmation for all LinIf channel ids.
  
Test Input: None.
Test Output: 
    During each call of LinSM_WakeupConfirmation, ComM_BusSM_ModeIndication and
    BswM_LinSM_CurrentState are called for the correct ComM network id.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.20041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>404</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.20042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>405</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.20090</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>409</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>624</internalId></specobject>
    <specobject>
      <id>TS_LINSM_40066</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Include/LinSM_ImpTest_IdsCommon/source/application/Tests.c</sourcefile>
      <sourceline>238</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check id mapping between LinSM_RequestComMode and LinIf_GotoSleep
  
Test Object: 
    Initialize, then move to TST_GOTO_SLEEP
  
Test Precondition: 
  
Test Execution: 
    Move all channels to LINSM_FULL_COM, then:
    call LinSM_RequestComMode(NO_COM) for all ComM network ids.
  
Test Input: None.
Test Output: 
    During each call of LinSM_RequestComMode, LinIf_GotoSleep is called for the correct LinIf
    channel id.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.20041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>404</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.20042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>405</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.20090</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>409</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>625</internalId></specobject>
    <specobject>
      <id>TS_LINSM_40067</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Include/LinSM_ImpTest_IdsCommon/source/application/Tests.c</sourcefile>
      <sourceline>279</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check id mapping between LinSM_GotoSleepConfirmation and ComM_BusSM_ModeIndication/
    BswM_LinSM_CurrentState
  
Test Object: 
    Initialize, then move through all states back to TST_NO_COM
  
Test Precondition: 
  
Test Execution: 
    Move all channels to LINSM_GOTO_SLEEP, then:
    call LinSM_GotoSleepConfirmation for all LinIf channel ids.
  
Test Input: None.
Test Output: 
    During each call of LinSM_GotoSleepConfirmation, ComM_BusSM_ModeIndication and
    BswM_LinSM_CurrentState are called for the correct ComM network id.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.20041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>404</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.20042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>405</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.20090</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>409</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>626</internalId></specobject>
    <specobject>
      <id>TS_LINSM_40070</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Include/LinSM_ImpTest_IdsCommon/source/application/Tests.c</sourcefile>
      <sourceline>321</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check channel id mapping between LinSM_ScheduleRequest and LinIf_ScheduleRequest.
    Check id mapping for BswM_LinSM_CurrentSchedule in case schedule request confirmation timeout
    expires
  
Test Object: 
    Expiration of schedule request confirmation timer
  
Test Precondition: 
  
Test Execution: 
    Move all channels to state LINSM_FULL_COM, then:
    Call LinSM_ScheduleRequest for each ComM network id to request a schedule table switch
    Wait for a timeout of the confirmation timer by calling LinSM_MainFunction multiple times.
  
Test Input: None.
Test Output: 
    During each call of LinSM_ScheduleRequest, LinIf_ScheduleRequest is called for the correct
    LinIf channel id.
    For both channels using confirmation timeouts, BswM_LinSM_CurrentSchedule is called for the
    correct ComM network id when the corresponding channel's timeout expires.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.20041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>404</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.20042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>405</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>627</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_LINSM_40083</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Include/LinSM_ImpTest_SleepSuppCommon/source/application/Tests.c</sourcefile>
      <sourceline>151</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check transition from LINSM_NO_COM to LINSM_FULL_COM.
  
Test Object: 
    Initialize, then move to FULL_COM
  
Test Precondition: 
    LinSM initialized
  
Test Execution: 
    Call LinSM_RequestComMode(FULL_COM) for all channels. For channels using sleep support, call
    LinSM_WakeupConfirmation.
  
Test Input: None.
Test Output: 
    For channels without sleep support:
    - During the call of LinSM_RequestComMode, ComM_BusSM_ModeIndication and
      BswM_LinSM_CurrentState are called. LinIf_Wakeup is not called.
    For channels using sleep support:
    - During the call of LinSM_RequestComMode, LinIf_Wakeup is called.
    - During the call of LinSM_WakeupConfirmation, ComM_BusSM_ModeIndication and
      BswM_LinSM_CurrentState are called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.20089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>408</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.20091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>410</internalId></provcov>
        <provcov>
          <linksto>LinSM.ASR40.LINSM033_EB</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>628</internalId></specobject>
    <specobject>
      <id>TS_LINSM_40084</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Include/LinSM_ImpTest_SleepSuppCommon/source/application/Tests.c</sourcefile>
      <sourceline>245</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check transition from LINSM_FULL_COM to LINSM_NO_COM.
  
Test Object: 
    Initialize, then move to FULL_COM and back to NO_COM
  
Test Precondition: 
  
Test Execution: 
    Move all channels to state LINSM_FULL_COM, then:
    Call LinSM_RequestComMode(NO_COM) for all channels. For channels using sleep support, call
    LinSM_GotoSleepConfirmation.
  
Test Input: None.
Test Output: 
    For channels without sleep support:
    - During the call of LinSM_RequestComMode, ComM_BusSM_ModeIndication and
      BswM_LinSM_CurrentState are called. LinIf_GotoSleep is not called.
    For channels using sleep support:
    - During the call of LinSM_RequestComMode, LinIf_GotoSleep is called.
    - During the call of LinSM_GotoSleepConfirmation, ComM_BusSM_ModeIndication and
      BswM_LinSM_CurrentState are called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.20089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>408</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.20091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>410</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>629</internalId></specobject>
    <specobject>
      <id>TS_LINSM_40085</id>
      <status>approved</status>
      <source>EB test case specification (asc_LinSM)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_LinSM/test/ts5/Include/LinSM_ImpTest_SleepSuppCommon/source/application/Tests.c</sourcefile>
      <sourceline>338</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that communication in LINSM_FULL_COM is possible independent on the extent of sleep
    support used.
  
Test Object: 
    Initialize, then move to FULL_COM, do some schedule requests
  
Test Precondition: 
  
Test Execution: 
    Move all channels to state LINSM_FULL_COM, then call LinSM_ScheduleRequest at least once
    for all channels.
  
Test Input: None.
Test Output: 
    Each call of LinSM_ScheduleRequest results in a correct call to LinIf_ScheduleRequest.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>LinSM.Design.20089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>408</internalId></provcov>
        <provcov>
          <linksto>LinSM.Design.20091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>410</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>630</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
